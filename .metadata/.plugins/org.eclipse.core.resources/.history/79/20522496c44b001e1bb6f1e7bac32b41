/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdio.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
int buf[1]; // 블루투스 DMA용 버퍼
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

//int __io_putchar(int ch)
//{
//	HAL_UART_Transmit(&huart2, &ch, 1, 50);
//	return ch;
//}
//
//int __io_getchar(void)
//{
//	int ch;
//	while(1)
//	{
//		if(HAL_UART_Receive(&huart2, &ch, 1, 50) == HAL_OK)
//			break;
//	}
//	HAL_UART_Transmit(&huart2, &ch, 1, 50);
//
//	return ch;
//}


void Forward()
{
	HAL_GPIO_WritePin(Right_Front_GPIO_Port, Right_Front_Pin, 1);
	HAL_GPIO_WritePin(Right_Back_GPIO_Port, Right_Back_Pin, 0);
	HAL_GPIO_WritePin(Left_Front_GPIO_Port, Left_Front_Pin, 0);
	HAL_GPIO_WritePin(Left_Back_GPIO_Port, Left_Back_Pin, 1);
}

void Backward()
{
	HAL_GPIO_WritePin(Right_Front_GPIO_Port, Right_Front_Pin, 0);
	HAL_GPIO_WritePin(Right_Back_GPIO_Port, Right_Back_Pin, 1);
	HAL_GPIO_WritePin(Left_Front_GPIO_Port, Left_Front_Pin, 1);
	HAL_GPIO_WritePin(Left_Back_GPIO_Port, Left_Back_Pin, 0);
}

//void Right()
//{
//	HAL_GPIO_WritePin(Right_Front_GPIO_Port, Right_Front_Pin, 0);
//	HAL_GPIO_WritePin(Right_Back_GPIO_Port, Right_Back_Pin, 1);
//	HAL_GPIO_WritePin(Left_Front_GPIO_Port, Left_Front_Pin, 0);
//	HAL_GPIO_WritePin(Left_Back_GPIO_Port, Left_Back_Pin, 1);
//}
//
//void Left()
//{
//	HAL_GPIO_WritePin(Right_Front_GPIO_Port, Right_Front_Pin, 1);
//	HAL_GPIO_WritePin(Right_Back_GPIO_Port, Right_Back_Pin, 0);
//	HAL_GPIO_WritePin(Left_Front_GPIO_Port, Left_Front_Pin, 1);
//	HAL_GPIO_WritePin(Left_Back_GPIO_Port, Left_Back_Pin, 0);
//}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  HAL_UART_Receive_IT(&huart1, buf, sizeof(buf));
  HAL_UART_Receive_IT(&huart2, buf, sizeof(buf));
}


/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_TIM10_Init();
  MX_TIM11_Init();
  MX_USART1_UART_Init();
  /* USER CODE BEGIN 2 */
  printf("Program Start!\r\n");
  HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1); // Left
  HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1); // Right
//  setbuf(stdin, NULL);

//  HAL_UART_Receive(&huart2, &buf[1], 1, 50);
//  HAL_UART_Transmit(&huart2, &buf[1], 1, 50);
  HAL_UART_Receive_IT(&huart1, &buf, sizeof(buf));
  HAL_UART_Receive_IT(&huart2, &buf, sizeof(buf));
//  HAL_UART_Transmit_IT(&huart2, &buf_B, sizeof(buf_B));
//  HAL_UART_Receive_DMA(&huart2, &buf_P, sizeof(buf_P));
//  HAL_UART_Transmit_DMA(&huart2, &buf_P, sizeof(buf_P));
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//		printf("Press Direction key and [Enter]....\r\n"); // 숫자 키를 입력하라고 프롬포트 내보내 줌.
//		scanf("%c", &i);

		if(buf[0] != 0)
		{
		switch(buf[0])
		{
		case 'w' :
			Forward();
			htim10.Instance->CCR1 = 10000; // Left
			htim11.Instance->CCR1 = 10000; // Right
			printf("Forward \r\n");
			break;
		case 's' :
			Backward();
			htim10.Instance->CCR1 = 10000; // Left
			htim11.Instance->CCR1 = 10000; // Right
			printf("Backward \r\n");
			break;
		case 'a' :
			Forward();
			htim10.Instance->CCR1 = 7500; // Left
			htim11.Instance->CCR1 = 10000; // Right
			printf("Right \r\n");
			break;
		case 'd' :
			Forward();
			htim10.Instance->CCR1 = 10000; // Left
			htim11.Instance->CCR1 = 7500; // Right
			printf("Left \r\n");
			break;
		default :
			printf("Error \r\n");
			break;
		}
		}
		buf[0] = 0;

//		if (buf_B[0] != 0)
//		{
//		switch(buf_B[0])
//		{
//		case 'w' :
//			Forward();
//			htim10.Instance->CCR1 = 10000; // Left
//			htim11.Instance->CCR1 = 10000; // Right
////			printf("Move [%c] \r\n", buf_B[0]);
//			break;
//		case 's' :
//			Backward();
//			htim10.Instance->CCR1 = 10000; // Left
//			htim11.Instance->CCR1 = 10000; // Right
////			printf("Move [%c] \r\n", buf_B[0]);
//			break;
//		case 'a' :
//			Forward();
//			htim10.Instance->CCR1 = 7500; // Left
//			htim11.Instance->CCR1 = 10000; // Right
////			printf("Move [%c] \r\n", buf_B[0]);
//			break;
//		case 'd' :
//			Forward();
//			htim10.Instance->CCR1 = 10000; // Left
//			htim11.Instance->CCR1 = 7500; // Right
////			printf("Move [%c] \r\n", buf_B[0]);
//			break;
//		default :
////			printf("Error [%c] \r\n", buf_B[0]);
//			break;
//		}
//		}
  	    HAL_Delay(1);
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 100;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
