
Ultra_Sonic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ae0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08004c80  08004c80  00014c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cd4  08004cd4  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08004cd4  08004cd4  00014cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004cdc  08004cdc  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cdc  08004cdc  00014cdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ce0  08004ce0  00014ce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004ce4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  20000068  08004d4c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000274  08004d4c  00020274  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e7ff  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000244d  00000000  00000000  0002e8da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d40  00000000  00000000  00030d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a44  00000000  00000000  00031a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017971  00000000  00000000  000324ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010665  00000000  00000000  00049e1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008fae7  00000000  00000000  0005a482  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003dc0  00000000  00000000  000e9f6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000edd2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004c68 	.word	0x08004c68

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08004c68 	.word	0x08004c68

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <delay_us>:
 */

#include "delay.h"

void delay_us(uint16_t us)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	80fb      	strh	r3, [r7, #6]
	// __HAL_TIM_SET_COUNTER() 함수는 타이머를 원하는 숫자로 설정하는 함수
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8000586:	4b09      	ldr	r3, [pc, #36]	; (80005ac <delay_us+0x30>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	2200      	movs	r2, #0
 800058c:	625a      	str	r2, [r3, #36]	; 0x24

	// 타이머 값을 받아와야
    while((__HAL_TIM_GET_COUNTER(&htim3)) < us);
 800058e:	bf00      	nop
 8000590:	4b06      	ldr	r3, [pc, #24]	; (80005ac <delay_us+0x30>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000596:	88fb      	ldrh	r3, [r7, #6]
 8000598:	429a      	cmp	r2, r3
 800059a:	d3f9      	bcc.n	8000590 <delay_us+0x14>
}
 800059c:	bf00      	nop
 800059e:	bf00      	nop
 80005a0:	370c      	adds	r7, #12
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	20000098 	.word	0x20000098

080005b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b08a      	sub	sp, #40	; 0x28
 80005b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b6:	f107 0314 	add.w	r3, r7, #20
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	605a      	str	r2, [r3, #4]
 80005c0:	609a      	str	r2, [r3, #8]
 80005c2:	60da      	str	r2, [r3, #12]
 80005c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	613b      	str	r3, [r7, #16]
 80005ca:	4b26      	ldr	r3, [pc, #152]	; (8000664 <MX_GPIO_Init+0xb4>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	4a25      	ldr	r2, [pc, #148]	; (8000664 <MX_GPIO_Init+0xb4>)
 80005d0:	f043 0304 	orr.w	r3, r3, #4
 80005d4:	6313      	str	r3, [r2, #48]	; 0x30
 80005d6:	4b23      	ldr	r3, [pc, #140]	; (8000664 <MX_GPIO_Init+0xb4>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	f003 0304 	and.w	r3, r3, #4
 80005de:	613b      	str	r3, [r7, #16]
 80005e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	60fb      	str	r3, [r7, #12]
 80005e6:	4b1f      	ldr	r3, [pc, #124]	; (8000664 <MX_GPIO_Init+0xb4>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	4a1e      	ldr	r2, [pc, #120]	; (8000664 <MX_GPIO_Init+0xb4>)
 80005ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005f0:	6313      	str	r3, [r2, #48]	; 0x30
 80005f2:	4b1c      	ldr	r3, [pc, #112]	; (8000664 <MX_GPIO_Init+0xb4>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	4b18      	ldr	r3, [pc, #96]	; (8000664 <MX_GPIO_Init+0xb4>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	4a17      	ldr	r2, [pc, #92]	; (8000664 <MX_GPIO_Init+0xb4>)
 8000608:	f043 0301 	orr.w	r3, r3, #1
 800060c:	6313      	str	r3, [r2, #48]	; 0x30
 800060e:	4b15      	ldr	r3, [pc, #84]	; (8000664 <MX_GPIO_Init+0xb4>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	f003 0301 	and.w	r3, r3, #1
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	4b11      	ldr	r3, [pc, #68]	; (8000664 <MX_GPIO_Init+0xb4>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	4a10      	ldr	r2, [pc, #64]	; (8000664 <MX_GPIO_Init+0xb4>)
 8000624:	f043 0302 	orr.w	r3, r3, #2
 8000628:	6313      	str	r3, [r2, #48]	; 0x30
 800062a:	4b0e      	ldr	r3, [pc, #56]	; (8000664 <MX_GPIO_Init+0xb4>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	f003 0302 	and.w	r3, r3, #2
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000636:	2200      	movs	r2, #0
 8000638:	2120      	movs	r1, #32
 800063a:	480b      	ldr	r0, [pc, #44]	; (8000668 <MX_GPIO_Init+0xb8>)
 800063c:	f000 ff9c 	bl	8001578 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000640:	2320      	movs	r3, #32
 8000642:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000644:	2301      	movs	r3, #1
 8000646:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000648:	2300      	movs	r3, #0
 800064a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800064c:	2302      	movs	r3, #2
 800064e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000650:	f107 0314 	add.w	r3, r7, #20
 8000654:	4619      	mov	r1, r3
 8000656:	4804      	ldr	r0, [pc, #16]	; (8000668 <MX_GPIO_Init+0xb8>)
 8000658:	f000 fe0a 	bl	8001270 <HAL_GPIO_Init>

}
 800065c:	bf00      	nop
 800065e:	3728      	adds	r7, #40	; 0x28
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40023800 	.word	0x40023800
 8000668:	40020000 	.word	0x40020000

0800066c <__io_putchar>:
  #define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000674:	1d39      	adds	r1, r7, #4
 8000676:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800067a:	2201      	movs	r2, #1
 800067c:	4803      	ldr	r0, [pc, #12]	; (800068c <__io_putchar+0x20>)
 800067e:	f002 fbf4 	bl	8002e6a <HAL_UART_Transmit>

  return ch;
 8000682:	687b      	ldr	r3, [r7, #4]
}
 8000684:	4618      	mov	r0, r3
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	200000e0 	.word	0x200000e0

08000690 <HAL_TIM_IC_CaptureCallback>:

// Echo read
// Echo가 High가 되는 순간, Interrupt가 발생한다.
// 그때부터 Falling Edge가 발생하는 순간을 캡쳐하기 위한 Callback 함수.
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) // 만약 인터럽트 소스 채널이면,(우리가 1번 채널을 쓰기로 설정)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	7f1b      	ldrb	r3, [r3, #28]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d16d      	bne.n	800077c <HAL_TIM_IC_CaptureCallback+0xec>
	{
		if(captureFlag == 0) // 첫 번째 캡쳐가 되지 않았다면,(Falling Edge가 발생하지 않았다면,)
 80006a0:	4b38      	ldr	r3, [pc, #224]	; (8000784 <HAL_TIM_IC_CaptureCallback+0xf4>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d11a      	bne.n	80006de <HAL_TIM_IC_CaptureCallback+0x4e>
		{
			INC_Value1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // 첫 번째 Value를 읽어라.
 80006a8:	2100      	movs	r1, #0
 80006aa:	6878      	ldr	r0, [r7, #4]
 80006ac:	f002 f844 	bl	8002738 <HAL_TIM_ReadCapturedValue>
 80006b0:	4603      	mov	r3, r0
 80006b2:	4a35      	ldr	r2, [pc, #212]	; (8000788 <HAL_TIM_IC_CaptureCallback+0xf8>)
 80006b4:	6013      	str	r3, [r2, #0]
			captureFlag = 1; // 첫 번째 캡쳐 완료
 80006b6:	4b33      	ldr	r3, [pc, #204]	; (8000784 <HAL_TIM_IC_CaptureCallback+0xf4>)
 80006b8:	2201      	movs	r2, #1
 80006ba:	701a      	strb	r2, [r3, #0]

			// Polarity 변경(Rising -> Falling)
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING); // Echo Falling을 캡쳐해야 하므로
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	6a1a      	ldr	r2, [r3, #32]
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	f022 020a 	bic.w	r2, r2, #10
 80006ca:	621a      	str	r2, [r3, #32]
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	6a1a      	ldr	r2, [r3, #32]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	f042 0202 	orr.w	r2, r2, #2
 80006da:	621a      	str	r2, [r3, #32]

			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING); // 다시 Echo High를 캡쳐하도록 설정
			__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC1);
		}
	}
}
 80006dc:	e04e      	b.n	800077c <HAL_TIM_IC_CaptureCallback+0xec>
		else if(captureFlag == 1) // 만약 첫 번쨰 캡쳐가 이미 완료됐다면,
 80006de:	4b29      	ldr	r3, [pc, #164]	; (8000784 <HAL_TIM_IC_CaptureCallback+0xf4>)
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	2b01      	cmp	r3, #1
 80006e4:	d14a      	bne.n	800077c <HAL_TIM_IC_CaptureCallback+0xec>
			INC_Value2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80006e6:	2100      	movs	r1, #0
 80006e8:	6878      	ldr	r0, [r7, #4]
 80006ea:	f002 f825 	bl	8002738 <HAL_TIM_ReadCapturedValue>
 80006ee:	4603      	mov	r3, r0
 80006f0:	4a26      	ldr	r2, [pc, #152]	; (800078c <HAL_TIM_IC_CaptureCallback+0xfc>)
 80006f2:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(&htim3, 0); // reset Counter
 80006f4:	4b26      	ldr	r3, [pc, #152]	; (8000790 <HAL_TIM_IC_CaptureCallback+0x100>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	2200      	movs	r2, #0
 80006fa:	625a      	str	r2, [r3, #36]	; 0x24
			if(INC_Value2 > INC_Value1)
 80006fc:	4b23      	ldr	r3, [pc, #140]	; (800078c <HAL_TIM_IC_CaptureCallback+0xfc>)
 80006fe:	681a      	ldr	r2, [r3, #0]
 8000700:	4b21      	ldr	r3, [pc, #132]	; (8000788 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	429a      	cmp	r2, r3
 8000706:	d907      	bls.n	8000718 <HAL_TIM_IC_CaptureCallback+0x88>
				echoTime = INC_Value2 - INC_Value1;
 8000708:	4b20      	ldr	r3, [pc, #128]	; (800078c <HAL_TIM_IC_CaptureCallback+0xfc>)
 800070a:	681a      	ldr	r2, [r3, #0]
 800070c:	4b1e      	ldr	r3, [pc, #120]	; (8000788 <HAL_TIM_IC_CaptureCallback+0xf8>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	1ad3      	subs	r3, r2, r3
 8000712:	4a20      	ldr	r2, [pc, #128]	; (8000794 <HAL_TIM_IC_CaptureCallback+0x104>)
 8000714:	6013      	str	r3, [r2, #0]
 8000716:	e00f      	b.n	8000738 <HAL_TIM_IC_CaptureCallback+0xa8>
			else if(INC_Value1 > INC_Value2) // 거리가 너무 길면, INC_Value2 가 Overflow되어 count가 0으로 뚝 떨어져서 INC_Value1보다 작아질 수 있다.
 8000718:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <HAL_TIM_IC_CaptureCallback+0xf8>)
 800071a:	681a      	ldr	r2, [r3, #0]
 800071c:	4b1b      	ldr	r3, [pc, #108]	; (800078c <HAL_TIM_IC_CaptureCallback+0xfc>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	429a      	cmp	r2, r3
 8000722:	d909      	bls.n	8000738 <HAL_TIM_IC_CaptureCallback+0xa8>
				echoTime = (0xffff - INC_Value1) + INC_Value2;
 8000724:	4b19      	ldr	r3, [pc, #100]	; (800078c <HAL_TIM_IC_CaptureCallback+0xfc>)
 8000726:	681a      	ldr	r2, [r3, #0]
 8000728:	4b17      	ldr	r3, [pc, #92]	; (8000788 <HAL_TIM_IC_CaptureCallback+0xf8>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	1ad3      	subs	r3, r2, r3
 800072e:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000732:	33ff      	adds	r3, #255	; 0xff
 8000734:	4a17      	ldr	r2, [pc, #92]	; (8000794 <HAL_TIM_IC_CaptureCallback+0x104>)
 8000736:	6013      	str	r3, [r2, #0]
			distance = echoTime / 58;
 8000738:	4b16      	ldr	r3, [pc, #88]	; (8000794 <HAL_TIM_IC_CaptureCallback+0x104>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a16      	ldr	r2, [pc, #88]	; (8000798 <HAL_TIM_IC_CaptureCallback+0x108>)
 800073e:	fba2 2303 	umull	r2, r3, r2, r3
 8000742:	095b      	lsrs	r3, r3, #5
 8000744:	b2da      	uxtb	r2, r3
 8000746:	4b15      	ldr	r3, [pc, #84]	; (800079c <HAL_TIM_IC_CaptureCallback+0x10c>)
 8000748:	701a      	strb	r2, [r3, #0]
			captureFlag = 0;
 800074a:	4b0e      	ldr	r3, [pc, #56]	; (8000784 <HAL_TIM_IC_CaptureCallback+0xf4>)
 800074c:	2200      	movs	r2, #0
 800074e:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING); // 다시 Echo High를 캡쳐하도록 설정
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	6a1a      	ldr	r2, [r3, #32]
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	f022 020a 	bic.w	r2, r2, #10
 800075e:	621a      	str	r2, [r3, #32]
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681a      	ldr	r2, [r3, #0]
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	6a12      	ldr	r2, [r2, #32]
 800076a:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC1);
 800076c:	4b08      	ldr	r3, [pc, #32]	; (8000790 <HAL_TIM_IC_CaptureCallback+0x100>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	68da      	ldr	r2, [r3, #12]
 8000772:	4b07      	ldr	r3, [pc, #28]	; (8000790 <HAL_TIM_IC_CaptureCallback+0x100>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f022 0202 	bic.w	r2, r2, #2
 800077a:	60da      	str	r2, [r3, #12]
}
 800077c:	bf00      	nop
 800077e:	3708      	adds	r7, #8
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	20000090 	.word	0x20000090
 8000788:	20000084 	.word	0x20000084
 800078c:	20000088 	.word	0x20000088
 8000790:	20000098 	.word	0x20000098
 8000794:	2000008c 	.word	0x2000008c
 8000798:	8d3dcb09 	.word	0x8d3dcb09
 800079c:	20000091 	.word	0x20000091

080007a0 <HCSR04_Read>:


void HCSR04_Read(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, 1); // Trig Pin High
 80007a4:	2201      	movs	r2, #1
 80007a6:	2120      	movs	r1, #32
 80007a8:	480a      	ldr	r0, [pc, #40]	; (80007d4 <HCSR04_Read+0x34>)
 80007aa:	f000 fee5 	bl	8001578 <HAL_GPIO_WritePin>
	delay_us(10);							   // Delay 10us
 80007ae:	200a      	movs	r0, #10
 80007b0:	f7ff fee4 	bl	800057c <delay_us>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, 0); // Trig Pin Low
 80007b4:	2200      	movs	r2, #0
 80007b6:	2120      	movs	r1, #32
 80007b8:	4806      	ldr	r0, [pc, #24]	; (80007d4 <HCSR04_Read+0x34>)
 80007ba:	f000 fedd 	bl	8001578 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC1); // Set Timer Enable
 80007be:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <HCSR04_Read+0x38>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	68da      	ldr	r2, [r3, #12]
 80007c4:	4b04      	ldr	r3, [pc, #16]	; (80007d8 <HCSR04_Read+0x38>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	f042 0202 	orr.w	r2, r2, #2
 80007cc:	60da      	str	r2, [r3, #12]
}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40020000 	.word	0x40020000
 80007d8:	20000098 	.word	0x20000098

080007dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e0:	f000 fb0c 	bl	8000dfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007e4:	f000 f81c 	bl	8000820 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007e8:	f7ff fee2 	bl	80005b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007ec:	f000 fa62 	bl	8000cb4 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80007f0:	f000 f9a0 	bl	8000b34 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 80007f4:	2100      	movs	r1, #0
 80007f6:	4807      	ldr	r0, [pc, #28]	; (8000814 <main+0x38>)
 80007f8:	f001 fc18 	bl	800202c <HAL_TIM_IC_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HCSR04_Read();
 80007fc:	f7ff ffd0 	bl	80007a0 <HCSR04_Read>
	  printf("%d cm\r\n", distance);
 8000800:	4b05      	ldr	r3, [pc, #20]	; (8000818 <main+0x3c>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	4619      	mov	r1, r3
 8000806:	4805      	ldr	r0, [pc, #20]	; (800081c <main+0x40>)
 8000808:	f003 fbb8 	bl	8003f7c <iprintf>
	  HAL_Delay(200);
 800080c:	20c8      	movs	r0, #200	; 0xc8
 800080e:	f000 fb67 	bl	8000ee0 <HAL_Delay>
	  HCSR04_Read();
 8000812:	e7f3      	b.n	80007fc <main+0x20>
 8000814:	20000098 	.word	0x20000098
 8000818:	20000091 	.word	0x20000091
 800081c:	08004c80 	.word	0x08004c80

08000820 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b094      	sub	sp, #80	; 0x50
 8000824:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000826:	f107 0320 	add.w	r3, r7, #32
 800082a:	2230      	movs	r2, #48	; 0x30
 800082c:	2100      	movs	r1, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f003 fbf9 	bl	8004026 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000834:	f107 030c 	add.w	r3, r7, #12
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	609a      	str	r2, [r3, #8]
 8000840:	60da      	str	r2, [r3, #12]
 8000842:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000844:	2300      	movs	r3, #0
 8000846:	60bb      	str	r3, [r7, #8]
 8000848:	4b27      	ldr	r3, [pc, #156]	; (80008e8 <SystemClock_Config+0xc8>)
 800084a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084c:	4a26      	ldr	r2, [pc, #152]	; (80008e8 <SystemClock_Config+0xc8>)
 800084e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000852:	6413      	str	r3, [r2, #64]	; 0x40
 8000854:	4b24      	ldr	r3, [pc, #144]	; (80008e8 <SystemClock_Config+0xc8>)
 8000856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800085c:	60bb      	str	r3, [r7, #8]
 800085e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000860:	2300      	movs	r3, #0
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	4b21      	ldr	r3, [pc, #132]	; (80008ec <SystemClock_Config+0xcc>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a20      	ldr	r2, [pc, #128]	; (80008ec <SystemClock_Config+0xcc>)
 800086a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800086e:	6013      	str	r3, [r2, #0]
 8000870:	4b1e      	ldr	r3, [pc, #120]	; (80008ec <SystemClock_Config+0xcc>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000878:	607b      	str	r3, [r7, #4]
 800087a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800087c:	2301      	movs	r3, #1
 800087e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000880:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000884:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000886:	2302      	movs	r3, #2
 8000888:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800088a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800088e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000890:	2304      	movs	r3, #4
 8000892:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000894:	2364      	movs	r3, #100	; 0x64
 8000896:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000898:	2302      	movs	r3, #2
 800089a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800089c:	2304      	movs	r3, #4
 800089e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a0:	f107 0320 	add.w	r3, r7, #32
 80008a4:	4618      	mov	r0, r3
 80008a6:	f000 fe81 	bl	80015ac <HAL_RCC_OscConfig>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008b0:	f000 f81e 	bl	80008f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b4:	230f      	movs	r3, #15
 80008b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b8:	2302      	movs	r3, #2
 80008ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008bc:	2300      	movs	r3, #0
 80008be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008c6:	2300      	movs	r3, #0
 80008c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008ca:	f107 030c 	add.w	r3, r7, #12
 80008ce:	2103      	movs	r1, #3
 80008d0:	4618      	mov	r0, r3
 80008d2:	f001 f8e3 	bl	8001a9c <HAL_RCC_ClockConfig>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80008dc:	f000 f808 	bl	80008f0 <Error_Handler>
  }
}
 80008e0:	bf00      	nop
 80008e2:	3750      	adds	r7, #80	; 0x50
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40023800 	.word	0x40023800
 80008ec:	40007000 	.word	0x40007000

080008f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f4:	b672      	cpsid	i
}
 80008f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f8:	e7fe      	b.n	80008f8 <Error_Handler+0x8>
	...

080008fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	607b      	str	r3, [r7, #4]
 8000906:	4b10      	ldr	r3, [pc, #64]	; (8000948 <HAL_MspInit+0x4c>)
 8000908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800090a:	4a0f      	ldr	r2, [pc, #60]	; (8000948 <HAL_MspInit+0x4c>)
 800090c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000910:	6453      	str	r3, [r2, #68]	; 0x44
 8000912:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <HAL_MspInit+0x4c>)
 8000914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000916:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	603b      	str	r3, [r7, #0]
 8000922:	4b09      	ldr	r3, [pc, #36]	; (8000948 <HAL_MspInit+0x4c>)
 8000924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000926:	4a08      	ldr	r2, [pc, #32]	; (8000948 <HAL_MspInit+0x4c>)
 8000928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800092c:	6413      	str	r3, [r2, #64]	; 0x40
 800092e:	4b06      	ldr	r3, [pc, #24]	; (8000948 <HAL_MspInit+0x4c>)
 8000930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000936:	603b      	str	r3, [r7, #0]
 8000938:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800093a:	2007      	movs	r0, #7
 800093c:	f000 fbc4 	bl	80010c8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000940:	bf00      	nop
 8000942:	3708      	adds	r7, #8
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	40023800 	.word	0x40023800

0800094c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000950:	e7fe      	b.n	8000950 <NMI_Handler+0x4>

08000952 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000956:	e7fe      	b.n	8000956 <HardFault_Handler+0x4>

08000958 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800095c:	e7fe      	b.n	800095c <MemManage_Handler+0x4>

0800095e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000962:	e7fe      	b.n	8000962 <BusFault_Handler+0x4>

08000964 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000968:	e7fe      	b.n	8000968 <UsageFault_Handler+0x4>

0800096a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr

08000978 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr

08000986 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000986:	b480      	push	{r7}
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800098a:	bf00      	nop
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr

08000994 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000998:	f000 fa82 	bl	8000ea0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800099c:	bf00      	nop
 800099e:	bd80      	pop	{r7, pc}

080009a0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80009a4:	4802      	ldr	r0, [pc, #8]	; (80009b0 <TIM3_IRQHandler+0x10>)
 80009a6:	f001 fc5b 	bl	8002260 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	20000098 	.word	0x20000098

080009b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009b8:	4802      	ldr	r0, [pc, #8]	; (80009c4 <USART2_IRQHandler+0x10>)
 80009ba:	f002 fae9 	bl	8002f90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	200000e0 	.word	0x200000e0

080009c8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	60f8      	str	r0, [r7, #12]
 80009d0:	60b9      	str	r1, [r7, #8]
 80009d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009d4:	2300      	movs	r3, #0
 80009d6:	617b      	str	r3, [r7, #20]
 80009d8:	e00a      	b.n	80009f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009da:	f3af 8000 	nop.w
 80009de:	4601      	mov	r1, r0
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	1c5a      	adds	r2, r3, #1
 80009e4:	60ba      	str	r2, [r7, #8]
 80009e6:	b2ca      	uxtb	r2, r1
 80009e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	3301      	adds	r3, #1
 80009ee:	617b      	str	r3, [r7, #20]
 80009f0:	697a      	ldr	r2, [r7, #20]
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	429a      	cmp	r2, r3
 80009f6:	dbf0      	blt.n	80009da <_read+0x12>
  }

  return len;
 80009f8:	687b      	ldr	r3, [r7, #4]
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3718      	adds	r7, #24
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}

08000a02 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a02:	b580      	push	{r7, lr}
 8000a04:	b086      	sub	sp, #24
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	60f8      	str	r0, [r7, #12]
 8000a0a:	60b9      	str	r1, [r7, #8]
 8000a0c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a0e:	2300      	movs	r3, #0
 8000a10:	617b      	str	r3, [r7, #20]
 8000a12:	e009      	b.n	8000a28 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	1c5a      	adds	r2, r3, #1
 8000a18:	60ba      	str	r2, [r7, #8]
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f7ff fe25 	bl	800066c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	3301      	adds	r3, #1
 8000a26:	617b      	str	r3, [r7, #20]
 8000a28:	697a      	ldr	r2, [r7, #20]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	dbf1      	blt.n	8000a14 <_write+0x12>
  }
  return len;
 8000a30:	687b      	ldr	r3, [r7, #4]
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	3718      	adds	r7, #24
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}

08000a3a <_close>:

int _close(int file)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	b083      	sub	sp, #12
 8000a3e:	af00      	add	r7, sp, #0
 8000a40:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	370c      	adds	r7, #12
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr

08000a52 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a52:	b480      	push	{r7}
 8000a54:	b083      	sub	sp, #12
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	6078      	str	r0, [r7, #4]
 8000a5a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a62:	605a      	str	r2, [r3, #4]
  return 0;
 8000a64:	2300      	movs	r3, #0
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	370c      	adds	r7, #12
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr

08000a72 <_isatty>:

int _isatty(int file)
{
 8000a72:	b480      	push	{r7}
 8000a74:	b083      	sub	sp, #12
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a7a:	2301      	movs	r3, #1
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	370c      	adds	r7, #12
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr

08000a88 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b085      	sub	sp, #20
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	60f8      	str	r0, [r7, #12]
 8000a90:	60b9      	str	r1, [r7, #8]
 8000a92:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a94:	2300      	movs	r3, #0
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3714      	adds	r7, #20
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
	...

08000aa4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b086      	sub	sp, #24
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000aac:	4a14      	ldr	r2, [pc, #80]	; (8000b00 <_sbrk+0x5c>)
 8000aae:	4b15      	ldr	r3, [pc, #84]	; (8000b04 <_sbrk+0x60>)
 8000ab0:	1ad3      	subs	r3, r2, r3
 8000ab2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ab8:	4b13      	ldr	r3, [pc, #76]	; (8000b08 <_sbrk+0x64>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d102      	bne.n	8000ac6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ac0:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <_sbrk+0x64>)
 8000ac2:	4a12      	ldr	r2, [pc, #72]	; (8000b0c <_sbrk+0x68>)
 8000ac4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ac6:	4b10      	ldr	r3, [pc, #64]	; (8000b08 <_sbrk+0x64>)
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4413      	add	r3, r2
 8000ace:	693a      	ldr	r2, [r7, #16]
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	d207      	bcs.n	8000ae4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ad4:	f003 faf6 	bl	80040c4 <__errno>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	220c      	movs	r2, #12
 8000adc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ade:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae2:	e009      	b.n	8000af8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ae4:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <_sbrk+0x64>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aea:	4b07      	ldr	r3, [pc, #28]	; (8000b08 <_sbrk+0x64>)
 8000aec:	681a      	ldr	r2, [r3, #0]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4413      	add	r3, r2
 8000af2:	4a05      	ldr	r2, [pc, #20]	; (8000b08 <_sbrk+0x64>)
 8000af4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000af6:	68fb      	ldr	r3, [r7, #12]
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	3718      	adds	r7, #24
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20020000 	.word	0x20020000
 8000b04:	00000400 	.word	0x00000400
 8000b08:	20000094 	.word	0x20000094
 8000b0c:	20000278 	.word	0x20000278

08000b10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b14:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <SystemInit+0x20>)
 8000b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b1a:	4a05      	ldr	r2, [pc, #20]	; (8000b30 <SystemInit+0x20>)
 8000b1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b08a      	sub	sp, #40	; 0x28
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b3a:	f107 0318 	add.w	r3, r7, #24
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	605a      	str	r2, [r3, #4]
 8000b44:	609a      	str	r2, [r3, #8]
 8000b46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b48:	f107 0310 	add.w	r3, r7, #16
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000b52:	463b      	mov	r3, r7
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b5e:	4b2b      	ldr	r3, [pc, #172]	; (8000c0c <MX_TIM3_Init+0xd8>)
 8000b60:	4a2b      	ldr	r2, [pc, #172]	; (8000c10 <MX_TIM3_Init+0xdc>)
 8000b62:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8000b64:	4b29      	ldr	r3, [pc, #164]	; (8000c0c <MX_TIM3_Init+0xd8>)
 8000b66:	2263      	movs	r2, #99	; 0x63
 8000b68:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b6a:	4b28      	ldr	r3, [pc, #160]	; (8000c0c <MX_TIM3_Init+0xd8>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000b70:	4b26      	ldr	r3, [pc, #152]	; (8000c0c <MX_TIM3_Init+0xd8>)
 8000b72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b76:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b78:	4b24      	ldr	r3, [pc, #144]	; (8000c0c <MX_TIM3_Init+0xd8>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b7e:	4b23      	ldr	r3, [pc, #140]	; (8000c0c <MX_TIM3_Init+0xd8>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b84:	4821      	ldr	r0, [pc, #132]	; (8000c0c <MX_TIM3_Init+0xd8>)
 8000b86:	f001 f9a9 	bl	8001edc <HAL_TIM_Base_Init>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8000b90:	f7ff feae 	bl	80008f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b98:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b9a:	f107 0318 	add.w	r3, r7, #24
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	481a      	ldr	r0, [pc, #104]	; (8000c0c <MX_TIM3_Init+0xd8>)
 8000ba2:	f001 fd01 	bl	80025a8 <HAL_TIM_ConfigClockSource>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000bac:	f7ff fea0 	bl	80008f0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000bb0:	4816      	ldr	r0, [pc, #88]	; (8000c0c <MX_TIM3_Init+0xd8>)
 8000bb2:	f001 f9e2 	bl	8001f7a <HAL_TIM_IC_Init>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000bbc:	f7ff fe98 	bl	80008f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000bc8:	f107 0310 	add.w	r3, r7, #16
 8000bcc:	4619      	mov	r1, r3
 8000bce:	480f      	ldr	r0, [pc, #60]	; (8000c0c <MX_TIM3_Init+0xd8>)
 8000bd0:	f002 f87c 	bl	8002ccc <HAL_TIMEx_MasterConfigSynchronization>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8000bda:	f7ff fe89 	bl	80008f0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000bde:	2300      	movs	r3, #0
 8000be0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000be2:	2301      	movs	r3, #1
 8000be4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000be6:	2300      	movs	r3, #0
 8000be8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000bee:	463b      	mov	r3, r7
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4805      	ldr	r0, [pc, #20]	; (8000c0c <MX_TIM3_Init+0xd8>)
 8000bf6:	f001 fc3b 	bl	8002470 <HAL_TIM_IC_ConfigChannel>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8000c00:	f7ff fe76 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c04:	bf00      	nop
 8000c06:	3728      	adds	r7, #40	; 0x28
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	20000098 	.word	0x20000098
 8000c10:	40000400 	.word	0x40000400

08000c14 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b08a      	sub	sp, #40	; 0x28
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]
 8000c2a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a1d      	ldr	r2, [pc, #116]	; (8000ca8 <HAL_TIM_Base_MspInit+0x94>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d133      	bne.n	8000c9e <HAL_TIM_Base_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	613b      	str	r3, [r7, #16]
 8000c3a:	4b1c      	ldr	r3, [pc, #112]	; (8000cac <HAL_TIM_Base_MspInit+0x98>)
 8000c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3e:	4a1b      	ldr	r2, [pc, #108]	; (8000cac <HAL_TIM_Base_MspInit+0x98>)
 8000c40:	f043 0302 	orr.w	r3, r3, #2
 8000c44:	6413      	str	r3, [r2, #64]	; 0x40
 8000c46:	4b19      	ldr	r3, [pc, #100]	; (8000cac <HAL_TIM_Base_MspInit+0x98>)
 8000c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4a:	f003 0302 	and.w	r3, r3, #2
 8000c4e:	613b      	str	r3, [r7, #16]
 8000c50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	60fb      	str	r3, [r7, #12]
 8000c56:	4b15      	ldr	r3, [pc, #84]	; (8000cac <HAL_TIM_Base_MspInit+0x98>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	4a14      	ldr	r2, [pc, #80]	; (8000cac <HAL_TIM_Base_MspInit+0x98>)
 8000c5c:	f043 0301 	orr.w	r3, r3, #1
 8000c60:	6313      	str	r3, [r2, #48]	; 0x30
 8000c62:	4b12      	ldr	r3, [pc, #72]	; (8000cac <HAL_TIM_Base_MspInit+0x98>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	f003 0301 	and.w	r3, r3, #1
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c6e:	2340      	movs	r3, #64	; 0x40
 8000c70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c72:	2302      	movs	r3, #2
 8000c74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c82:	f107 0314 	add.w	r3, r7, #20
 8000c86:	4619      	mov	r1, r3
 8000c88:	4809      	ldr	r0, [pc, #36]	; (8000cb0 <HAL_TIM_Base_MspInit+0x9c>)
 8000c8a:	f000 faf1 	bl	8001270 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2100      	movs	r1, #0
 8000c92:	201d      	movs	r0, #29
 8000c94:	f000 fa23 	bl	80010de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000c98:	201d      	movs	r0, #29
 8000c9a:	f000 fa3c 	bl	8001116 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000c9e:	bf00      	nop
 8000ca0:	3728      	adds	r7, #40	; 0x28
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40000400 	.word	0x40000400
 8000cac:	40023800 	.word	0x40023800
 8000cb0:	40020000 	.word	0x40020000

08000cb4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cb8:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <MX_USART2_UART_Init+0x4c>)
 8000cba:	4a12      	ldr	r2, [pc, #72]	; (8000d04 <MX_USART2_UART_Init+0x50>)
 8000cbc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cbe:	4b10      	ldr	r3, [pc, #64]	; (8000d00 <MX_USART2_UART_Init+0x4c>)
 8000cc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cc4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cc6:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <MX_USART2_UART_Init+0x4c>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ccc:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <MX_USART2_UART_Init+0x4c>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cd2:	4b0b      	ldr	r3, [pc, #44]	; (8000d00 <MX_USART2_UART_Init+0x4c>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cd8:	4b09      	ldr	r3, [pc, #36]	; (8000d00 <MX_USART2_UART_Init+0x4c>)
 8000cda:	220c      	movs	r2, #12
 8000cdc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cde:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <MX_USART2_UART_Init+0x4c>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ce4:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <MX_USART2_UART_Init+0x4c>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cea:	4805      	ldr	r0, [pc, #20]	; (8000d00 <MX_USART2_UART_Init+0x4c>)
 8000cec:	f002 f870 	bl	8002dd0 <HAL_UART_Init>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000cf6:	f7ff fdfb 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	200000e0 	.word	0x200000e0
 8000d04:	40004400 	.word	0x40004400

08000d08 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b08a      	sub	sp, #40	; 0x28
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d10:	f107 0314 	add.w	r3, r7, #20
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
 8000d1e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a1d      	ldr	r2, [pc, #116]	; (8000d9c <HAL_UART_MspInit+0x94>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d133      	bne.n	8000d92 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	613b      	str	r3, [r7, #16]
 8000d2e:	4b1c      	ldr	r3, [pc, #112]	; (8000da0 <HAL_UART_MspInit+0x98>)
 8000d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d32:	4a1b      	ldr	r2, [pc, #108]	; (8000da0 <HAL_UART_MspInit+0x98>)
 8000d34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d38:	6413      	str	r3, [r2, #64]	; 0x40
 8000d3a:	4b19      	ldr	r3, [pc, #100]	; (8000da0 <HAL_UART_MspInit+0x98>)
 8000d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d42:	613b      	str	r3, [r7, #16]
 8000d44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	4b15      	ldr	r3, [pc, #84]	; (8000da0 <HAL_UART_MspInit+0x98>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	4a14      	ldr	r2, [pc, #80]	; (8000da0 <HAL_UART_MspInit+0x98>)
 8000d50:	f043 0301 	orr.w	r3, r3, #1
 8000d54:	6313      	str	r3, [r2, #48]	; 0x30
 8000d56:	4b12      	ldr	r3, [pc, #72]	; (8000da0 <HAL_UART_MspInit+0x98>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	f003 0301 	and.w	r3, r3, #1
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d62:	230c      	movs	r3, #12
 8000d64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d66:	2302      	movs	r3, #2
 8000d68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d6e:	2303      	movs	r3, #3
 8000d70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d72:	2307      	movs	r3, #7
 8000d74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d76:	f107 0314 	add.w	r3, r7, #20
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4809      	ldr	r0, [pc, #36]	; (8000da4 <HAL_UART_MspInit+0x9c>)
 8000d7e:	f000 fa77 	bl	8001270 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d82:	2200      	movs	r2, #0
 8000d84:	2100      	movs	r1, #0
 8000d86:	2026      	movs	r0, #38	; 0x26
 8000d88:	f000 f9a9 	bl	80010de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d8c:	2026      	movs	r0, #38	; 0x26
 8000d8e:	f000 f9c2 	bl	8001116 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000d92:	bf00      	nop
 8000d94:	3728      	adds	r7, #40	; 0x28
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40004400 	.word	0x40004400
 8000da0:	40023800 	.word	0x40023800
 8000da4:	40020000 	.word	0x40020000

08000da8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000da8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000de0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dac:	480d      	ldr	r0, [pc, #52]	; (8000de4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dae:	490e      	ldr	r1, [pc, #56]	; (8000de8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000db0:	4a0e      	ldr	r2, [pc, #56]	; (8000dec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000db2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db4:	e002      	b.n	8000dbc <LoopCopyDataInit>

08000db6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000db6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000db8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dba:	3304      	adds	r3, #4

08000dbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc0:	d3f9      	bcc.n	8000db6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dc2:	4a0b      	ldr	r2, [pc, #44]	; (8000df0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000dc4:	4c0b      	ldr	r4, [pc, #44]	; (8000df4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dc8:	e001      	b.n	8000dce <LoopFillZerobss>

08000dca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dcc:	3204      	adds	r2, #4

08000dce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd0:	d3fb      	bcc.n	8000dca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dd2:	f7ff fe9d 	bl	8000b10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dd6:	f003 f97b 	bl	80040d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dda:	f7ff fcff 	bl	80007dc <main>
  bx  lr    
 8000dde:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000de0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000de4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000de8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000dec:	08004ce4 	.word	0x08004ce4
  ldr r2, =_sbss
 8000df0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000df4:	20000274 	.word	0x20000274

08000df8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000df8:	e7fe      	b.n	8000df8 <ADC_IRQHandler>
	...

08000dfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e00:	4b0e      	ldr	r3, [pc, #56]	; (8000e3c <HAL_Init+0x40>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a0d      	ldr	r2, [pc, #52]	; (8000e3c <HAL_Init+0x40>)
 8000e06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e0c:	4b0b      	ldr	r3, [pc, #44]	; (8000e3c <HAL_Init+0x40>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a0a      	ldr	r2, [pc, #40]	; (8000e3c <HAL_Init+0x40>)
 8000e12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e18:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <HAL_Init+0x40>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a07      	ldr	r2, [pc, #28]	; (8000e3c <HAL_Init+0x40>)
 8000e1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e24:	2003      	movs	r0, #3
 8000e26:	f000 f94f 	bl	80010c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e2a:	2000      	movs	r0, #0
 8000e2c:	f000 f808 	bl	8000e40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e30:	f7ff fd64 	bl	80008fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e34:	2300      	movs	r3, #0
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40023c00 	.word	0x40023c00

08000e40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e48:	4b12      	ldr	r3, [pc, #72]	; (8000e94 <HAL_InitTick+0x54>)
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	4b12      	ldr	r3, [pc, #72]	; (8000e98 <HAL_InitTick+0x58>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	4619      	mov	r1, r3
 8000e52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f000 f967 	bl	8001132 <HAL_SYSTICK_Config>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e00e      	b.n	8000e8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2b0f      	cmp	r3, #15
 8000e72:	d80a      	bhi.n	8000e8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e74:	2200      	movs	r2, #0
 8000e76:	6879      	ldr	r1, [r7, #4]
 8000e78:	f04f 30ff 	mov.w	r0, #4294967295
 8000e7c:	f000 f92f 	bl	80010de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e80:	4a06      	ldr	r2, [pc, #24]	; (8000e9c <HAL_InitTick+0x5c>)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e86:	2300      	movs	r3, #0
 8000e88:	e000      	b.n	8000e8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	20000000 	.word	0x20000000
 8000e98:	20000008 	.word	0x20000008
 8000e9c:	20000004 	.word	0x20000004

08000ea0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ea4:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <HAL_IncTick+0x20>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <HAL_IncTick+0x24>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4413      	add	r3, r2
 8000eb0:	4a04      	ldr	r2, [pc, #16]	; (8000ec4 <HAL_IncTick+0x24>)
 8000eb2:	6013      	str	r3, [r2, #0]
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	20000008 	.word	0x20000008
 8000ec4:	20000124 	.word	0x20000124

08000ec8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  return uwTick;
 8000ecc:	4b03      	ldr	r3, [pc, #12]	; (8000edc <HAL_GetTick+0x14>)
 8000ece:	681b      	ldr	r3, [r3, #0]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	20000124 	.word	0x20000124

08000ee0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ee8:	f7ff ffee 	bl	8000ec8 <HAL_GetTick>
 8000eec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ef8:	d005      	beq.n	8000f06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000efa:	4b0a      	ldr	r3, [pc, #40]	; (8000f24 <HAL_Delay+0x44>)
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	461a      	mov	r2, r3
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	4413      	add	r3, r2
 8000f04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f06:	bf00      	nop
 8000f08:	f7ff ffde 	bl	8000ec8 <HAL_GetTick>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	68fa      	ldr	r2, [r7, #12]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	d8f7      	bhi.n	8000f08 <HAL_Delay+0x28>
  {
  }
}
 8000f18:	bf00      	nop
 8000f1a:	bf00      	nop
 8000f1c:	3710      	adds	r7, #16
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	20000008 	.word	0x20000008

08000f28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b085      	sub	sp, #20
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f003 0307 	and.w	r3, r3, #7
 8000f36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f38:	4b0c      	ldr	r3, [pc, #48]	; (8000f6c <__NVIC_SetPriorityGrouping+0x44>)
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f3e:	68ba      	ldr	r2, [r7, #8]
 8000f40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f44:	4013      	ands	r3, r2
 8000f46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f5a:	4a04      	ldr	r2, [pc, #16]	; (8000f6c <__NVIC_SetPriorityGrouping+0x44>)
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	60d3      	str	r3, [r2, #12]
}
 8000f60:	bf00      	nop
 8000f62:	3714      	adds	r7, #20
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	e000ed00 	.word	0xe000ed00

08000f70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f74:	4b04      	ldr	r3, [pc, #16]	; (8000f88 <__NVIC_GetPriorityGrouping+0x18>)
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	0a1b      	lsrs	r3, r3, #8
 8000f7a:	f003 0307 	and.w	r3, r3, #7
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	e000ed00 	.word	0xe000ed00

08000f8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	db0b      	blt.n	8000fb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	f003 021f 	and.w	r2, r3, #31
 8000fa4:	4907      	ldr	r1, [pc, #28]	; (8000fc4 <__NVIC_EnableIRQ+0x38>)
 8000fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000faa:	095b      	lsrs	r3, r3, #5
 8000fac:	2001      	movs	r0, #1
 8000fae:	fa00 f202 	lsl.w	r2, r0, r2
 8000fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fb6:	bf00      	nop
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	e000e100 	.word	0xe000e100

08000fc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	6039      	str	r1, [r7, #0]
 8000fd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	db0a      	blt.n	8000ff2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	b2da      	uxtb	r2, r3
 8000fe0:	490c      	ldr	r1, [pc, #48]	; (8001014 <__NVIC_SetPriority+0x4c>)
 8000fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe6:	0112      	lsls	r2, r2, #4
 8000fe8:	b2d2      	uxtb	r2, r2
 8000fea:	440b      	add	r3, r1
 8000fec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ff0:	e00a      	b.n	8001008 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	b2da      	uxtb	r2, r3
 8000ff6:	4908      	ldr	r1, [pc, #32]	; (8001018 <__NVIC_SetPriority+0x50>)
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	f003 030f 	and.w	r3, r3, #15
 8000ffe:	3b04      	subs	r3, #4
 8001000:	0112      	lsls	r2, r2, #4
 8001002:	b2d2      	uxtb	r2, r2
 8001004:	440b      	add	r3, r1
 8001006:	761a      	strb	r2, [r3, #24]
}
 8001008:	bf00      	nop
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	e000e100 	.word	0xe000e100
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800101c:	b480      	push	{r7}
 800101e:	b089      	sub	sp, #36	; 0x24
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	f003 0307 	and.w	r3, r3, #7
 800102e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	f1c3 0307 	rsb	r3, r3, #7
 8001036:	2b04      	cmp	r3, #4
 8001038:	bf28      	it	cs
 800103a:	2304      	movcs	r3, #4
 800103c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	3304      	adds	r3, #4
 8001042:	2b06      	cmp	r3, #6
 8001044:	d902      	bls.n	800104c <NVIC_EncodePriority+0x30>
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	3b03      	subs	r3, #3
 800104a:	e000      	b.n	800104e <NVIC_EncodePriority+0x32>
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001050:	f04f 32ff 	mov.w	r2, #4294967295
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	43da      	mvns	r2, r3
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	401a      	ands	r2, r3
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001064:	f04f 31ff 	mov.w	r1, #4294967295
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	fa01 f303 	lsl.w	r3, r1, r3
 800106e:	43d9      	mvns	r1, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001074:	4313      	orrs	r3, r2
         );
}
 8001076:	4618      	mov	r0, r3
 8001078:	3724      	adds	r7, #36	; 0x24
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
	...

08001084 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3b01      	subs	r3, #1
 8001090:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001094:	d301      	bcc.n	800109a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001096:	2301      	movs	r3, #1
 8001098:	e00f      	b.n	80010ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800109a:	4a0a      	ldr	r2, [pc, #40]	; (80010c4 <SysTick_Config+0x40>)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3b01      	subs	r3, #1
 80010a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010a2:	210f      	movs	r1, #15
 80010a4:	f04f 30ff 	mov.w	r0, #4294967295
 80010a8:	f7ff ff8e 	bl	8000fc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010ac:	4b05      	ldr	r3, [pc, #20]	; (80010c4 <SysTick_Config+0x40>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010b2:	4b04      	ldr	r3, [pc, #16]	; (80010c4 <SysTick_Config+0x40>)
 80010b4:	2207      	movs	r2, #7
 80010b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	e000e010 	.word	0xe000e010

080010c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f7ff ff29 	bl	8000f28 <__NVIC_SetPriorityGrouping>
}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010de:	b580      	push	{r7, lr}
 80010e0:	b086      	sub	sp, #24
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	4603      	mov	r3, r0
 80010e6:	60b9      	str	r1, [r7, #8]
 80010e8:	607a      	str	r2, [r7, #4]
 80010ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010ec:	2300      	movs	r3, #0
 80010ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010f0:	f7ff ff3e 	bl	8000f70 <__NVIC_GetPriorityGrouping>
 80010f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	68b9      	ldr	r1, [r7, #8]
 80010fa:	6978      	ldr	r0, [r7, #20]
 80010fc:	f7ff ff8e 	bl	800101c <NVIC_EncodePriority>
 8001100:	4602      	mov	r2, r0
 8001102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001106:	4611      	mov	r1, r2
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff ff5d 	bl	8000fc8 <__NVIC_SetPriority>
}
 800110e:	bf00      	nop
 8001110:	3718      	adds	r7, #24
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	b082      	sub	sp, #8
 800111a:	af00      	add	r7, sp, #0
 800111c:	4603      	mov	r3, r0
 800111e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff ff31 	bl	8000f8c <__NVIC_EnableIRQ>
}
 800112a:	bf00      	nop
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b082      	sub	sp, #8
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f7ff ffa2 	bl	8001084 <SysTick_Config>
 8001140:	4603      	mov	r3, r0
}
 8001142:	4618      	mov	r0, r3
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b084      	sub	sp, #16
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001156:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001158:	f7ff feb6 	bl	8000ec8 <HAL_GetTick>
 800115c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001164:	b2db      	uxtb	r3, r3
 8001166:	2b02      	cmp	r3, #2
 8001168:	d008      	beq.n	800117c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2280      	movs	r2, #128	; 0x80
 800116e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2200      	movs	r2, #0
 8001174:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	e052      	b.n	8001222 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f022 0216 	bic.w	r2, r2, #22
 800118a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	695a      	ldr	r2, [r3, #20]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800119a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d103      	bne.n	80011ac <HAL_DMA_Abort+0x62>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d007      	beq.n	80011bc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f022 0208 	bic.w	r2, r2, #8
 80011ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f022 0201 	bic.w	r2, r2, #1
 80011ca:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011cc:	e013      	b.n	80011f6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011ce:	f7ff fe7b 	bl	8000ec8 <HAL_GetTick>
 80011d2:	4602      	mov	r2, r0
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	2b05      	cmp	r3, #5
 80011da:	d90c      	bls.n	80011f6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2220      	movs	r2, #32
 80011e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2203      	movs	r2, #3
 80011e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2200      	movs	r2, #0
 80011ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80011f2:	2303      	movs	r3, #3
 80011f4:	e015      	b.n	8001222 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 0301 	and.w	r3, r3, #1
 8001200:	2b00      	cmp	r3, #0
 8001202:	d1e4      	bne.n	80011ce <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001208:	223f      	movs	r2, #63	; 0x3f
 800120a:	409a      	lsls	r2, r3
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2201      	movs	r2, #1
 8001214:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2200      	movs	r2, #0
 800121c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800122a:	b480      	push	{r7}
 800122c:	b083      	sub	sp, #12
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001238:	b2db      	uxtb	r3, r3
 800123a:	2b02      	cmp	r3, #2
 800123c:	d004      	beq.n	8001248 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2280      	movs	r2, #128	; 0x80
 8001242:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001244:	2301      	movs	r3, #1
 8001246:	e00c      	b.n	8001262 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2205      	movs	r2, #5
 800124c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f022 0201 	bic.w	r2, r2, #1
 800125e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
	...

08001270 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001270:	b480      	push	{r7}
 8001272:	b089      	sub	sp, #36	; 0x24
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800127a:	2300      	movs	r3, #0
 800127c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800127e:	2300      	movs	r3, #0
 8001280:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001282:	2300      	movs	r3, #0
 8001284:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001286:	2300      	movs	r3, #0
 8001288:	61fb      	str	r3, [r7, #28]
 800128a:	e159      	b.n	8001540 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800128c:	2201      	movs	r2, #1
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	697a      	ldr	r2, [r7, #20]
 800129c:	4013      	ands	r3, r2
 800129e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	f040 8148 	bne.w	800153a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f003 0303 	and.w	r3, r3, #3
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d005      	beq.n	80012c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d130      	bne.n	8001324 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	2203      	movs	r2, #3
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	43db      	mvns	r3, r3
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	4013      	ands	r3, r2
 80012d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	68da      	ldr	r2, [r3, #12]
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012f8:	2201      	movs	r2, #1
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	43db      	mvns	r3, r3
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	4013      	ands	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	091b      	lsrs	r3, r3, #4
 800130e:	f003 0201 	and.w	r2, r3, #1
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	4313      	orrs	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f003 0303 	and.w	r3, r3, #3
 800132c:	2b03      	cmp	r3, #3
 800132e:	d017      	beq.n	8001360 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	2203      	movs	r2, #3
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	43db      	mvns	r3, r3
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	4013      	ands	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	689a      	ldr	r2, [r3, #8]
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	4313      	orrs	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f003 0303 	and.w	r3, r3, #3
 8001368:	2b02      	cmp	r3, #2
 800136a:	d123      	bne.n	80013b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	08da      	lsrs	r2, r3, #3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	3208      	adds	r2, #8
 8001374:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001378:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	f003 0307 	and.w	r3, r3, #7
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	220f      	movs	r2, #15
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	43db      	mvns	r3, r3
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	4013      	ands	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	691a      	ldr	r2, [r3, #16]
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	f003 0307 	and.w	r3, r3, #7
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	08da      	lsrs	r2, r3, #3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	3208      	adds	r2, #8
 80013ae:	69b9      	ldr	r1, [r7, #24]
 80013b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	2203      	movs	r2, #3
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	43db      	mvns	r3, r3
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	4013      	ands	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f003 0203 	and.w	r2, r3, #3
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	4313      	orrs	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	f000 80a2 	beq.w	800153a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	60fb      	str	r3, [r7, #12]
 80013fa:	4b57      	ldr	r3, [pc, #348]	; (8001558 <HAL_GPIO_Init+0x2e8>)
 80013fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fe:	4a56      	ldr	r2, [pc, #344]	; (8001558 <HAL_GPIO_Init+0x2e8>)
 8001400:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001404:	6453      	str	r3, [r2, #68]	; 0x44
 8001406:	4b54      	ldr	r3, [pc, #336]	; (8001558 <HAL_GPIO_Init+0x2e8>)
 8001408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001412:	4a52      	ldr	r2, [pc, #328]	; (800155c <HAL_GPIO_Init+0x2ec>)
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	089b      	lsrs	r3, r3, #2
 8001418:	3302      	adds	r3, #2
 800141a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800141e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	f003 0303 	and.w	r3, r3, #3
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	220f      	movs	r2, #15
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	43db      	mvns	r3, r3
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	4013      	ands	r3, r2
 8001434:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a49      	ldr	r2, [pc, #292]	; (8001560 <HAL_GPIO_Init+0x2f0>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d019      	beq.n	8001472 <HAL_GPIO_Init+0x202>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a48      	ldr	r2, [pc, #288]	; (8001564 <HAL_GPIO_Init+0x2f4>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d013      	beq.n	800146e <HAL_GPIO_Init+0x1fe>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a47      	ldr	r2, [pc, #284]	; (8001568 <HAL_GPIO_Init+0x2f8>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d00d      	beq.n	800146a <HAL_GPIO_Init+0x1fa>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a46      	ldr	r2, [pc, #280]	; (800156c <HAL_GPIO_Init+0x2fc>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d007      	beq.n	8001466 <HAL_GPIO_Init+0x1f6>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a45      	ldr	r2, [pc, #276]	; (8001570 <HAL_GPIO_Init+0x300>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d101      	bne.n	8001462 <HAL_GPIO_Init+0x1f2>
 800145e:	2304      	movs	r3, #4
 8001460:	e008      	b.n	8001474 <HAL_GPIO_Init+0x204>
 8001462:	2307      	movs	r3, #7
 8001464:	e006      	b.n	8001474 <HAL_GPIO_Init+0x204>
 8001466:	2303      	movs	r3, #3
 8001468:	e004      	b.n	8001474 <HAL_GPIO_Init+0x204>
 800146a:	2302      	movs	r3, #2
 800146c:	e002      	b.n	8001474 <HAL_GPIO_Init+0x204>
 800146e:	2301      	movs	r3, #1
 8001470:	e000      	b.n	8001474 <HAL_GPIO_Init+0x204>
 8001472:	2300      	movs	r3, #0
 8001474:	69fa      	ldr	r2, [r7, #28]
 8001476:	f002 0203 	and.w	r2, r2, #3
 800147a:	0092      	lsls	r2, r2, #2
 800147c:	4093      	lsls	r3, r2
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	4313      	orrs	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001484:	4935      	ldr	r1, [pc, #212]	; (800155c <HAL_GPIO_Init+0x2ec>)
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	089b      	lsrs	r3, r3, #2
 800148a:	3302      	adds	r3, #2
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001492:	4b38      	ldr	r3, [pc, #224]	; (8001574 <HAL_GPIO_Init+0x304>)
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	43db      	mvns	r3, r3
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	4013      	ands	r3, r2
 80014a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d003      	beq.n	80014b6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014b6:	4a2f      	ldr	r2, [pc, #188]	; (8001574 <HAL_GPIO_Init+0x304>)
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014bc:	4b2d      	ldr	r3, [pc, #180]	; (8001574 <HAL_GPIO_Init+0x304>)
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	43db      	mvns	r3, r3
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	4013      	ands	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d003      	beq.n	80014e0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	4313      	orrs	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014e0:	4a24      	ldr	r2, [pc, #144]	; (8001574 <HAL_GPIO_Init+0x304>)
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014e6:	4b23      	ldr	r3, [pc, #140]	; (8001574 <HAL_GPIO_Init+0x304>)
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	43db      	mvns	r3, r3
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	4013      	ands	r3, r2
 80014f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d003      	beq.n	800150a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	4313      	orrs	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800150a:	4a1a      	ldr	r2, [pc, #104]	; (8001574 <HAL_GPIO_Init+0x304>)
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001510:	4b18      	ldr	r3, [pc, #96]	; (8001574 <HAL_GPIO_Init+0x304>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	43db      	mvns	r3, r3
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	4013      	ands	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d003      	beq.n	8001534 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	4313      	orrs	r3, r2
 8001532:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001534:	4a0f      	ldr	r2, [pc, #60]	; (8001574 <HAL_GPIO_Init+0x304>)
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	3301      	adds	r3, #1
 800153e:	61fb      	str	r3, [r7, #28]
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	2b0f      	cmp	r3, #15
 8001544:	f67f aea2 	bls.w	800128c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001548:	bf00      	nop
 800154a:	bf00      	nop
 800154c:	3724      	adds	r7, #36	; 0x24
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	40023800 	.word	0x40023800
 800155c:	40013800 	.word	0x40013800
 8001560:	40020000 	.word	0x40020000
 8001564:	40020400 	.word	0x40020400
 8001568:	40020800 	.word	0x40020800
 800156c:	40020c00 	.word	0x40020c00
 8001570:	40021000 	.word	0x40021000
 8001574:	40013c00 	.word	0x40013c00

08001578 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	460b      	mov	r3, r1
 8001582:	807b      	strh	r3, [r7, #2]
 8001584:	4613      	mov	r3, r2
 8001586:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001588:	787b      	ldrb	r3, [r7, #1]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d003      	beq.n	8001596 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800158e:	887a      	ldrh	r2, [r7, #2]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001594:	e003      	b.n	800159e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001596:	887b      	ldrh	r3, [r7, #2]
 8001598:	041a      	lsls	r2, r3, #16
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	619a      	str	r2, [r3, #24]
}
 800159e:	bf00      	nop
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
	...

080015ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b086      	sub	sp, #24
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d101      	bne.n	80015be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e267      	b.n	8001a8e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d075      	beq.n	80016b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015ca:	4b88      	ldr	r3, [pc, #544]	; (80017ec <HAL_RCC_OscConfig+0x240>)
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	f003 030c 	and.w	r3, r3, #12
 80015d2:	2b04      	cmp	r3, #4
 80015d4:	d00c      	beq.n	80015f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015d6:	4b85      	ldr	r3, [pc, #532]	; (80017ec <HAL_RCC_OscConfig+0x240>)
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015de:	2b08      	cmp	r3, #8
 80015e0:	d112      	bne.n	8001608 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015e2:	4b82      	ldr	r3, [pc, #520]	; (80017ec <HAL_RCC_OscConfig+0x240>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015ee:	d10b      	bne.n	8001608 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015f0:	4b7e      	ldr	r3, [pc, #504]	; (80017ec <HAL_RCC_OscConfig+0x240>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d05b      	beq.n	80016b4 <HAL_RCC_OscConfig+0x108>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d157      	bne.n	80016b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e242      	b.n	8001a8e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001610:	d106      	bne.n	8001620 <HAL_RCC_OscConfig+0x74>
 8001612:	4b76      	ldr	r3, [pc, #472]	; (80017ec <HAL_RCC_OscConfig+0x240>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a75      	ldr	r2, [pc, #468]	; (80017ec <HAL_RCC_OscConfig+0x240>)
 8001618:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800161c:	6013      	str	r3, [r2, #0]
 800161e:	e01d      	b.n	800165c <HAL_RCC_OscConfig+0xb0>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001628:	d10c      	bne.n	8001644 <HAL_RCC_OscConfig+0x98>
 800162a:	4b70      	ldr	r3, [pc, #448]	; (80017ec <HAL_RCC_OscConfig+0x240>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a6f      	ldr	r2, [pc, #444]	; (80017ec <HAL_RCC_OscConfig+0x240>)
 8001630:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001634:	6013      	str	r3, [r2, #0]
 8001636:	4b6d      	ldr	r3, [pc, #436]	; (80017ec <HAL_RCC_OscConfig+0x240>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a6c      	ldr	r2, [pc, #432]	; (80017ec <HAL_RCC_OscConfig+0x240>)
 800163c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001640:	6013      	str	r3, [r2, #0]
 8001642:	e00b      	b.n	800165c <HAL_RCC_OscConfig+0xb0>
 8001644:	4b69      	ldr	r3, [pc, #420]	; (80017ec <HAL_RCC_OscConfig+0x240>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a68      	ldr	r2, [pc, #416]	; (80017ec <HAL_RCC_OscConfig+0x240>)
 800164a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800164e:	6013      	str	r3, [r2, #0]
 8001650:	4b66      	ldr	r3, [pc, #408]	; (80017ec <HAL_RCC_OscConfig+0x240>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a65      	ldr	r2, [pc, #404]	; (80017ec <HAL_RCC_OscConfig+0x240>)
 8001656:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800165a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d013      	beq.n	800168c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001664:	f7ff fc30 	bl	8000ec8 <HAL_GetTick>
 8001668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800166a:	e008      	b.n	800167e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800166c:	f7ff fc2c 	bl	8000ec8 <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	2b64      	cmp	r3, #100	; 0x64
 8001678:	d901      	bls.n	800167e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e207      	b.n	8001a8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800167e:	4b5b      	ldr	r3, [pc, #364]	; (80017ec <HAL_RCC_OscConfig+0x240>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d0f0      	beq.n	800166c <HAL_RCC_OscConfig+0xc0>
 800168a:	e014      	b.n	80016b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800168c:	f7ff fc1c 	bl	8000ec8 <HAL_GetTick>
 8001690:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001692:	e008      	b.n	80016a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001694:	f7ff fc18 	bl	8000ec8 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b64      	cmp	r3, #100	; 0x64
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e1f3      	b.n	8001a8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016a6:	4b51      	ldr	r3, [pc, #324]	; (80017ec <HAL_RCC_OscConfig+0x240>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d1f0      	bne.n	8001694 <HAL_RCC_OscConfig+0xe8>
 80016b2:	e000      	b.n	80016b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d063      	beq.n	800178a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016c2:	4b4a      	ldr	r3, [pc, #296]	; (80017ec <HAL_RCC_OscConfig+0x240>)
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	f003 030c 	and.w	r3, r3, #12
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d00b      	beq.n	80016e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016ce:	4b47      	ldr	r3, [pc, #284]	; (80017ec <HAL_RCC_OscConfig+0x240>)
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016d6:	2b08      	cmp	r3, #8
 80016d8:	d11c      	bne.n	8001714 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016da:	4b44      	ldr	r3, [pc, #272]	; (80017ec <HAL_RCC_OscConfig+0x240>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d116      	bne.n	8001714 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016e6:	4b41      	ldr	r3, [pc, #260]	; (80017ec <HAL_RCC_OscConfig+0x240>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d005      	beq.n	80016fe <HAL_RCC_OscConfig+0x152>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	68db      	ldr	r3, [r3, #12]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d001      	beq.n	80016fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e1c7      	b.n	8001a8e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016fe:	4b3b      	ldr	r3, [pc, #236]	; (80017ec <HAL_RCC_OscConfig+0x240>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	691b      	ldr	r3, [r3, #16]
 800170a:	00db      	lsls	r3, r3, #3
 800170c:	4937      	ldr	r1, [pc, #220]	; (80017ec <HAL_RCC_OscConfig+0x240>)
 800170e:	4313      	orrs	r3, r2
 8001710:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001712:	e03a      	b.n	800178a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d020      	beq.n	800175e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800171c:	4b34      	ldr	r3, [pc, #208]	; (80017f0 <HAL_RCC_OscConfig+0x244>)
 800171e:	2201      	movs	r2, #1
 8001720:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001722:	f7ff fbd1 	bl	8000ec8 <HAL_GetTick>
 8001726:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001728:	e008      	b.n	800173c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800172a:	f7ff fbcd 	bl	8000ec8 <HAL_GetTick>
 800172e:	4602      	mov	r2, r0
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	2b02      	cmp	r3, #2
 8001736:	d901      	bls.n	800173c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001738:	2303      	movs	r3, #3
 800173a:	e1a8      	b.n	8001a8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800173c:	4b2b      	ldr	r3, [pc, #172]	; (80017ec <HAL_RCC_OscConfig+0x240>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0302 	and.w	r3, r3, #2
 8001744:	2b00      	cmp	r3, #0
 8001746:	d0f0      	beq.n	800172a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001748:	4b28      	ldr	r3, [pc, #160]	; (80017ec <HAL_RCC_OscConfig+0x240>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	691b      	ldr	r3, [r3, #16]
 8001754:	00db      	lsls	r3, r3, #3
 8001756:	4925      	ldr	r1, [pc, #148]	; (80017ec <HAL_RCC_OscConfig+0x240>)
 8001758:	4313      	orrs	r3, r2
 800175a:	600b      	str	r3, [r1, #0]
 800175c:	e015      	b.n	800178a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800175e:	4b24      	ldr	r3, [pc, #144]	; (80017f0 <HAL_RCC_OscConfig+0x244>)
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001764:	f7ff fbb0 	bl	8000ec8 <HAL_GetTick>
 8001768:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800176a:	e008      	b.n	800177e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800176c:	f7ff fbac 	bl	8000ec8 <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	2b02      	cmp	r3, #2
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e187      	b.n	8001a8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800177e:	4b1b      	ldr	r3, [pc, #108]	; (80017ec <HAL_RCC_OscConfig+0x240>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	2b00      	cmp	r3, #0
 8001788:	d1f0      	bne.n	800176c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0308 	and.w	r3, r3, #8
 8001792:	2b00      	cmp	r3, #0
 8001794:	d036      	beq.n	8001804 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	695b      	ldr	r3, [r3, #20]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d016      	beq.n	80017cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800179e:	4b15      	ldr	r3, [pc, #84]	; (80017f4 <HAL_RCC_OscConfig+0x248>)
 80017a0:	2201      	movs	r2, #1
 80017a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017a4:	f7ff fb90 	bl	8000ec8 <HAL_GetTick>
 80017a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017aa:	e008      	b.n	80017be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017ac:	f7ff fb8c 	bl	8000ec8 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e167      	b.n	8001a8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017be:	4b0b      	ldr	r3, [pc, #44]	; (80017ec <HAL_RCC_OscConfig+0x240>)
 80017c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d0f0      	beq.n	80017ac <HAL_RCC_OscConfig+0x200>
 80017ca:	e01b      	b.n	8001804 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017cc:	4b09      	ldr	r3, [pc, #36]	; (80017f4 <HAL_RCC_OscConfig+0x248>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017d2:	f7ff fb79 	bl	8000ec8 <HAL_GetTick>
 80017d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017d8:	e00e      	b.n	80017f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017da:	f7ff fb75 	bl	8000ec8 <HAL_GetTick>
 80017de:	4602      	mov	r2, r0
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d907      	bls.n	80017f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e150      	b.n	8001a8e <HAL_RCC_OscConfig+0x4e2>
 80017ec:	40023800 	.word	0x40023800
 80017f0:	42470000 	.word	0x42470000
 80017f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017f8:	4b88      	ldr	r3, [pc, #544]	; (8001a1c <HAL_RCC_OscConfig+0x470>)
 80017fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017fc:	f003 0302 	and.w	r3, r3, #2
 8001800:	2b00      	cmp	r3, #0
 8001802:	d1ea      	bne.n	80017da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0304 	and.w	r3, r3, #4
 800180c:	2b00      	cmp	r3, #0
 800180e:	f000 8097 	beq.w	8001940 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001812:	2300      	movs	r3, #0
 8001814:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001816:	4b81      	ldr	r3, [pc, #516]	; (8001a1c <HAL_RCC_OscConfig+0x470>)
 8001818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d10f      	bne.n	8001842 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	60bb      	str	r3, [r7, #8]
 8001826:	4b7d      	ldr	r3, [pc, #500]	; (8001a1c <HAL_RCC_OscConfig+0x470>)
 8001828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182a:	4a7c      	ldr	r2, [pc, #496]	; (8001a1c <HAL_RCC_OscConfig+0x470>)
 800182c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001830:	6413      	str	r3, [r2, #64]	; 0x40
 8001832:	4b7a      	ldr	r3, [pc, #488]	; (8001a1c <HAL_RCC_OscConfig+0x470>)
 8001834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800183a:	60bb      	str	r3, [r7, #8]
 800183c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800183e:	2301      	movs	r3, #1
 8001840:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001842:	4b77      	ldr	r3, [pc, #476]	; (8001a20 <HAL_RCC_OscConfig+0x474>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800184a:	2b00      	cmp	r3, #0
 800184c:	d118      	bne.n	8001880 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800184e:	4b74      	ldr	r3, [pc, #464]	; (8001a20 <HAL_RCC_OscConfig+0x474>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a73      	ldr	r2, [pc, #460]	; (8001a20 <HAL_RCC_OscConfig+0x474>)
 8001854:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001858:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800185a:	f7ff fb35 	bl	8000ec8 <HAL_GetTick>
 800185e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001860:	e008      	b.n	8001874 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001862:	f7ff fb31 	bl	8000ec8 <HAL_GetTick>
 8001866:	4602      	mov	r2, r0
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	2b02      	cmp	r3, #2
 800186e:	d901      	bls.n	8001874 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001870:	2303      	movs	r3, #3
 8001872:	e10c      	b.n	8001a8e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001874:	4b6a      	ldr	r3, [pc, #424]	; (8001a20 <HAL_RCC_OscConfig+0x474>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800187c:	2b00      	cmp	r3, #0
 800187e:	d0f0      	beq.n	8001862 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d106      	bne.n	8001896 <HAL_RCC_OscConfig+0x2ea>
 8001888:	4b64      	ldr	r3, [pc, #400]	; (8001a1c <HAL_RCC_OscConfig+0x470>)
 800188a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800188c:	4a63      	ldr	r2, [pc, #396]	; (8001a1c <HAL_RCC_OscConfig+0x470>)
 800188e:	f043 0301 	orr.w	r3, r3, #1
 8001892:	6713      	str	r3, [r2, #112]	; 0x70
 8001894:	e01c      	b.n	80018d0 <HAL_RCC_OscConfig+0x324>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	2b05      	cmp	r3, #5
 800189c:	d10c      	bne.n	80018b8 <HAL_RCC_OscConfig+0x30c>
 800189e:	4b5f      	ldr	r3, [pc, #380]	; (8001a1c <HAL_RCC_OscConfig+0x470>)
 80018a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018a2:	4a5e      	ldr	r2, [pc, #376]	; (8001a1c <HAL_RCC_OscConfig+0x470>)
 80018a4:	f043 0304 	orr.w	r3, r3, #4
 80018a8:	6713      	str	r3, [r2, #112]	; 0x70
 80018aa:	4b5c      	ldr	r3, [pc, #368]	; (8001a1c <HAL_RCC_OscConfig+0x470>)
 80018ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ae:	4a5b      	ldr	r2, [pc, #364]	; (8001a1c <HAL_RCC_OscConfig+0x470>)
 80018b0:	f043 0301 	orr.w	r3, r3, #1
 80018b4:	6713      	str	r3, [r2, #112]	; 0x70
 80018b6:	e00b      	b.n	80018d0 <HAL_RCC_OscConfig+0x324>
 80018b8:	4b58      	ldr	r3, [pc, #352]	; (8001a1c <HAL_RCC_OscConfig+0x470>)
 80018ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018bc:	4a57      	ldr	r2, [pc, #348]	; (8001a1c <HAL_RCC_OscConfig+0x470>)
 80018be:	f023 0301 	bic.w	r3, r3, #1
 80018c2:	6713      	str	r3, [r2, #112]	; 0x70
 80018c4:	4b55      	ldr	r3, [pc, #340]	; (8001a1c <HAL_RCC_OscConfig+0x470>)
 80018c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018c8:	4a54      	ldr	r2, [pc, #336]	; (8001a1c <HAL_RCC_OscConfig+0x470>)
 80018ca:	f023 0304 	bic.w	r3, r3, #4
 80018ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d015      	beq.n	8001904 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018d8:	f7ff faf6 	bl	8000ec8 <HAL_GetTick>
 80018dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018de:	e00a      	b.n	80018f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018e0:	f7ff faf2 	bl	8000ec8 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e0cb      	b.n	8001a8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018f6:	4b49      	ldr	r3, [pc, #292]	; (8001a1c <HAL_RCC_OscConfig+0x470>)
 80018f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d0ee      	beq.n	80018e0 <HAL_RCC_OscConfig+0x334>
 8001902:	e014      	b.n	800192e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001904:	f7ff fae0 	bl	8000ec8 <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800190a:	e00a      	b.n	8001922 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800190c:	f7ff fadc 	bl	8000ec8 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	f241 3288 	movw	r2, #5000	; 0x1388
 800191a:	4293      	cmp	r3, r2
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e0b5      	b.n	8001a8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001922:	4b3e      	ldr	r3, [pc, #248]	; (8001a1c <HAL_RCC_OscConfig+0x470>)
 8001924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	2b00      	cmp	r3, #0
 800192c:	d1ee      	bne.n	800190c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800192e:	7dfb      	ldrb	r3, [r7, #23]
 8001930:	2b01      	cmp	r3, #1
 8001932:	d105      	bne.n	8001940 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001934:	4b39      	ldr	r3, [pc, #228]	; (8001a1c <HAL_RCC_OscConfig+0x470>)
 8001936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001938:	4a38      	ldr	r2, [pc, #224]	; (8001a1c <HAL_RCC_OscConfig+0x470>)
 800193a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800193e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	2b00      	cmp	r3, #0
 8001946:	f000 80a1 	beq.w	8001a8c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800194a:	4b34      	ldr	r3, [pc, #208]	; (8001a1c <HAL_RCC_OscConfig+0x470>)
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	f003 030c 	and.w	r3, r3, #12
 8001952:	2b08      	cmp	r3, #8
 8001954:	d05c      	beq.n	8001a10 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	699b      	ldr	r3, [r3, #24]
 800195a:	2b02      	cmp	r3, #2
 800195c:	d141      	bne.n	80019e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800195e:	4b31      	ldr	r3, [pc, #196]	; (8001a24 <HAL_RCC_OscConfig+0x478>)
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001964:	f7ff fab0 	bl	8000ec8 <HAL_GetTick>
 8001968:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800196a:	e008      	b.n	800197e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800196c:	f7ff faac 	bl	8000ec8 <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b02      	cmp	r3, #2
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e087      	b.n	8001a8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800197e:	4b27      	ldr	r3, [pc, #156]	; (8001a1c <HAL_RCC_OscConfig+0x470>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d1f0      	bne.n	800196c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	69da      	ldr	r2, [r3, #28]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a1b      	ldr	r3, [r3, #32]
 8001992:	431a      	orrs	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001998:	019b      	lsls	r3, r3, #6
 800199a:	431a      	orrs	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a0:	085b      	lsrs	r3, r3, #1
 80019a2:	3b01      	subs	r3, #1
 80019a4:	041b      	lsls	r3, r3, #16
 80019a6:	431a      	orrs	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ac:	061b      	lsls	r3, r3, #24
 80019ae:	491b      	ldr	r1, [pc, #108]	; (8001a1c <HAL_RCC_OscConfig+0x470>)
 80019b0:	4313      	orrs	r3, r2
 80019b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019b4:	4b1b      	ldr	r3, [pc, #108]	; (8001a24 <HAL_RCC_OscConfig+0x478>)
 80019b6:	2201      	movs	r2, #1
 80019b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ba:	f7ff fa85 	bl	8000ec8 <HAL_GetTick>
 80019be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019c0:	e008      	b.n	80019d4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019c2:	f7ff fa81 	bl	8000ec8 <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d901      	bls.n	80019d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e05c      	b.n	8001a8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019d4:	4b11      	ldr	r3, [pc, #68]	; (8001a1c <HAL_RCC_OscConfig+0x470>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d0f0      	beq.n	80019c2 <HAL_RCC_OscConfig+0x416>
 80019e0:	e054      	b.n	8001a8c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019e2:	4b10      	ldr	r3, [pc, #64]	; (8001a24 <HAL_RCC_OscConfig+0x478>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e8:	f7ff fa6e 	bl	8000ec8 <HAL_GetTick>
 80019ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019ee:	e008      	b.n	8001a02 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019f0:	f7ff fa6a 	bl	8000ec8 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e045      	b.n	8001a8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a02:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <HAL_RCC_OscConfig+0x470>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d1f0      	bne.n	80019f0 <HAL_RCC_OscConfig+0x444>
 8001a0e:	e03d      	b.n	8001a8c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d107      	bne.n	8001a28 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e038      	b.n	8001a8e <HAL_RCC_OscConfig+0x4e2>
 8001a1c:	40023800 	.word	0x40023800
 8001a20:	40007000 	.word	0x40007000
 8001a24:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a28:	4b1b      	ldr	r3, [pc, #108]	; (8001a98 <HAL_RCC_OscConfig+0x4ec>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	699b      	ldr	r3, [r3, #24]
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d028      	beq.n	8001a88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d121      	bne.n	8001a88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d11a      	bne.n	8001a88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a52:	68fa      	ldr	r2, [r7, #12]
 8001a54:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a58:	4013      	ands	r3, r2
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a5e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d111      	bne.n	8001a88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a6e:	085b      	lsrs	r3, r3, #1
 8001a70:	3b01      	subs	r3, #1
 8001a72:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d107      	bne.n	8001a88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a82:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d001      	beq.n	8001a8c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e000      	b.n	8001a8e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3718      	adds	r7, #24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40023800 	.word	0x40023800

08001a9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d101      	bne.n	8001ab0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e0cc      	b.n	8001c4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ab0:	4b68      	ldr	r3, [pc, #416]	; (8001c54 <HAL_RCC_ClockConfig+0x1b8>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0307 	and.w	r3, r3, #7
 8001ab8:	683a      	ldr	r2, [r7, #0]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d90c      	bls.n	8001ad8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001abe:	4b65      	ldr	r3, [pc, #404]	; (8001c54 <HAL_RCC_ClockConfig+0x1b8>)
 8001ac0:	683a      	ldr	r2, [r7, #0]
 8001ac2:	b2d2      	uxtb	r2, r2
 8001ac4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ac6:	4b63      	ldr	r3, [pc, #396]	; (8001c54 <HAL_RCC_ClockConfig+0x1b8>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0307 	and.w	r3, r3, #7
 8001ace:	683a      	ldr	r2, [r7, #0]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d001      	beq.n	8001ad8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e0b8      	b.n	8001c4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0302 	and.w	r3, r3, #2
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d020      	beq.n	8001b26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0304 	and.w	r3, r3, #4
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d005      	beq.n	8001afc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001af0:	4b59      	ldr	r3, [pc, #356]	; (8001c58 <HAL_RCC_ClockConfig+0x1bc>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	4a58      	ldr	r2, [pc, #352]	; (8001c58 <HAL_RCC_ClockConfig+0x1bc>)
 8001af6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001afa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0308 	and.w	r3, r3, #8
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d005      	beq.n	8001b14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b08:	4b53      	ldr	r3, [pc, #332]	; (8001c58 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	4a52      	ldr	r2, [pc, #328]	; (8001c58 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b14:	4b50      	ldr	r3, [pc, #320]	; (8001c58 <HAL_RCC_ClockConfig+0x1bc>)
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	494d      	ldr	r1, [pc, #308]	; (8001c58 <HAL_RCC_ClockConfig+0x1bc>)
 8001b22:	4313      	orrs	r3, r2
 8001b24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0301 	and.w	r3, r3, #1
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d044      	beq.n	8001bbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d107      	bne.n	8001b4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b3a:	4b47      	ldr	r3, [pc, #284]	; (8001c58 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d119      	bne.n	8001b7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e07f      	b.n	8001c4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d003      	beq.n	8001b5a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b56:	2b03      	cmp	r3, #3
 8001b58:	d107      	bne.n	8001b6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b5a:	4b3f      	ldr	r3, [pc, #252]	; (8001c58 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d109      	bne.n	8001b7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e06f      	b.n	8001c4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b6a:	4b3b      	ldr	r3, [pc, #236]	; (8001c58 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d101      	bne.n	8001b7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e067      	b.n	8001c4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b7a:	4b37      	ldr	r3, [pc, #220]	; (8001c58 <HAL_RCC_ClockConfig+0x1bc>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f023 0203 	bic.w	r2, r3, #3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	4934      	ldr	r1, [pc, #208]	; (8001c58 <HAL_RCC_ClockConfig+0x1bc>)
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b8c:	f7ff f99c 	bl	8000ec8 <HAL_GetTick>
 8001b90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b92:	e00a      	b.n	8001baa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b94:	f7ff f998 	bl	8000ec8 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e04f      	b.n	8001c4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001baa:	4b2b      	ldr	r3, [pc, #172]	; (8001c58 <HAL_RCC_ClockConfig+0x1bc>)
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f003 020c 	and.w	r2, r3, #12
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d1eb      	bne.n	8001b94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bbc:	4b25      	ldr	r3, [pc, #148]	; (8001c54 <HAL_RCC_ClockConfig+0x1b8>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0307 	and.w	r3, r3, #7
 8001bc4:	683a      	ldr	r2, [r7, #0]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d20c      	bcs.n	8001be4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bca:	4b22      	ldr	r3, [pc, #136]	; (8001c54 <HAL_RCC_ClockConfig+0x1b8>)
 8001bcc:	683a      	ldr	r2, [r7, #0]
 8001bce:	b2d2      	uxtb	r2, r2
 8001bd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bd2:	4b20      	ldr	r3, [pc, #128]	; (8001c54 <HAL_RCC_ClockConfig+0x1b8>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0307 	and.w	r3, r3, #7
 8001bda:	683a      	ldr	r2, [r7, #0]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d001      	beq.n	8001be4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e032      	b.n	8001c4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0304 	and.w	r3, r3, #4
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d008      	beq.n	8001c02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bf0:	4b19      	ldr	r3, [pc, #100]	; (8001c58 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	4916      	ldr	r1, [pc, #88]	; (8001c58 <HAL_RCC_ClockConfig+0x1bc>)
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0308 	and.w	r3, r3, #8
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d009      	beq.n	8001c22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c0e:	4b12      	ldr	r3, [pc, #72]	; (8001c58 <HAL_RCC_ClockConfig+0x1bc>)
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	691b      	ldr	r3, [r3, #16]
 8001c1a:	00db      	lsls	r3, r3, #3
 8001c1c:	490e      	ldr	r1, [pc, #56]	; (8001c58 <HAL_RCC_ClockConfig+0x1bc>)
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c22:	f000 f821 	bl	8001c68 <HAL_RCC_GetSysClockFreq>
 8001c26:	4602      	mov	r2, r0
 8001c28:	4b0b      	ldr	r3, [pc, #44]	; (8001c58 <HAL_RCC_ClockConfig+0x1bc>)
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	091b      	lsrs	r3, r3, #4
 8001c2e:	f003 030f 	and.w	r3, r3, #15
 8001c32:	490a      	ldr	r1, [pc, #40]	; (8001c5c <HAL_RCC_ClockConfig+0x1c0>)
 8001c34:	5ccb      	ldrb	r3, [r1, r3]
 8001c36:	fa22 f303 	lsr.w	r3, r2, r3
 8001c3a:	4a09      	ldr	r2, [pc, #36]	; (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001c3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c3e:	4b09      	ldr	r3, [pc, #36]	; (8001c64 <HAL_RCC_ClockConfig+0x1c8>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff f8fc 	bl	8000e40 <HAL_InitTick>

  return HAL_OK;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3710      	adds	r7, #16
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40023c00 	.word	0x40023c00
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	08004c88 	.word	0x08004c88
 8001c60:	20000000 	.word	0x20000000
 8001c64:	20000004 	.word	0x20000004

08001c68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c6c:	b094      	sub	sp, #80	; 0x50
 8001c6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c70:	2300      	movs	r3, #0
 8001c72:	647b      	str	r3, [r7, #68]	; 0x44
 8001c74:	2300      	movs	r3, #0
 8001c76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c78:	2300      	movs	r3, #0
 8001c7a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c80:	4b79      	ldr	r3, [pc, #484]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f003 030c 	and.w	r3, r3, #12
 8001c88:	2b08      	cmp	r3, #8
 8001c8a:	d00d      	beq.n	8001ca8 <HAL_RCC_GetSysClockFreq+0x40>
 8001c8c:	2b08      	cmp	r3, #8
 8001c8e:	f200 80e1 	bhi.w	8001e54 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d002      	beq.n	8001c9c <HAL_RCC_GetSysClockFreq+0x34>
 8001c96:	2b04      	cmp	r3, #4
 8001c98:	d003      	beq.n	8001ca2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c9a:	e0db      	b.n	8001e54 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c9c:	4b73      	ldr	r3, [pc, #460]	; (8001e6c <HAL_RCC_GetSysClockFreq+0x204>)
 8001c9e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001ca0:	e0db      	b.n	8001e5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ca2:	4b73      	ldr	r3, [pc, #460]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x208>)
 8001ca4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ca6:	e0d8      	b.n	8001e5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ca8:	4b6f      	ldr	r3, [pc, #444]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x200>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cb0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cb2:	4b6d      	ldr	r3, [pc, #436]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d063      	beq.n	8001d86 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cbe:	4b6a      	ldr	r3, [pc, #424]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	099b      	lsrs	r3, r3, #6
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	63bb      	str	r3, [r7, #56]	; 0x38
 8001cc8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ccc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cd0:	633b      	str	r3, [r7, #48]	; 0x30
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	637b      	str	r3, [r7, #52]	; 0x34
 8001cd6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001cda:	4622      	mov	r2, r4
 8001cdc:	462b      	mov	r3, r5
 8001cde:	f04f 0000 	mov.w	r0, #0
 8001ce2:	f04f 0100 	mov.w	r1, #0
 8001ce6:	0159      	lsls	r1, r3, #5
 8001ce8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cec:	0150      	lsls	r0, r2, #5
 8001cee:	4602      	mov	r2, r0
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	4621      	mov	r1, r4
 8001cf4:	1a51      	subs	r1, r2, r1
 8001cf6:	6139      	str	r1, [r7, #16]
 8001cf8:	4629      	mov	r1, r5
 8001cfa:	eb63 0301 	sbc.w	r3, r3, r1
 8001cfe:	617b      	str	r3, [r7, #20]
 8001d00:	f04f 0200 	mov.w	r2, #0
 8001d04:	f04f 0300 	mov.w	r3, #0
 8001d08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001d0c:	4659      	mov	r1, fp
 8001d0e:	018b      	lsls	r3, r1, #6
 8001d10:	4651      	mov	r1, sl
 8001d12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d16:	4651      	mov	r1, sl
 8001d18:	018a      	lsls	r2, r1, #6
 8001d1a:	4651      	mov	r1, sl
 8001d1c:	ebb2 0801 	subs.w	r8, r2, r1
 8001d20:	4659      	mov	r1, fp
 8001d22:	eb63 0901 	sbc.w	r9, r3, r1
 8001d26:	f04f 0200 	mov.w	r2, #0
 8001d2a:	f04f 0300 	mov.w	r3, #0
 8001d2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d3a:	4690      	mov	r8, r2
 8001d3c:	4699      	mov	r9, r3
 8001d3e:	4623      	mov	r3, r4
 8001d40:	eb18 0303 	adds.w	r3, r8, r3
 8001d44:	60bb      	str	r3, [r7, #8]
 8001d46:	462b      	mov	r3, r5
 8001d48:	eb49 0303 	adc.w	r3, r9, r3
 8001d4c:	60fb      	str	r3, [r7, #12]
 8001d4e:	f04f 0200 	mov.w	r2, #0
 8001d52:	f04f 0300 	mov.w	r3, #0
 8001d56:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d5a:	4629      	mov	r1, r5
 8001d5c:	024b      	lsls	r3, r1, #9
 8001d5e:	4621      	mov	r1, r4
 8001d60:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d64:	4621      	mov	r1, r4
 8001d66:	024a      	lsls	r2, r1, #9
 8001d68:	4610      	mov	r0, r2
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d6e:	2200      	movs	r2, #0
 8001d70:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d72:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d74:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d78:	f7fe fa82 	bl	8000280 <__aeabi_uldivmod>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	460b      	mov	r3, r1
 8001d80:	4613      	mov	r3, r2
 8001d82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d84:	e058      	b.n	8001e38 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d86:	4b38      	ldr	r3, [pc, #224]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	099b      	lsrs	r3, r3, #6
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	4618      	mov	r0, r3
 8001d90:	4611      	mov	r1, r2
 8001d92:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d96:	623b      	str	r3, [r7, #32]
 8001d98:	2300      	movs	r3, #0
 8001d9a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d9c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001da0:	4642      	mov	r2, r8
 8001da2:	464b      	mov	r3, r9
 8001da4:	f04f 0000 	mov.w	r0, #0
 8001da8:	f04f 0100 	mov.w	r1, #0
 8001dac:	0159      	lsls	r1, r3, #5
 8001dae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001db2:	0150      	lsls	r0, r2, #5
 8001db4:	4602      	mov	r2, r0
 8001db6:	460b      	mov	r3, r1
 8001db8:	4641      	mov	r1, r8
 8001dba:	ebb2 0a01 	subs.w	sl, r2, r1
 8001dbe:	4649      	mov	r1, r9
 8001dc0:	eb63 0b01 	sbc.w	fp, r3, r1
 8001dc4:	f04f 0200 	mov.w	r2, #0
 8001dc8:	f04f 0300 	mov.w	r3, #0
 8001dcc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001dd0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001dd4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001dd8:	ebb2 040a 	subs.w	r4, r2, sl
 8001ddc:	eb63 050b 	sbc.w	r5, r3, fp
 8001de0:	f04f 0200 	mov.w	r2, #0
 8001de4:	f04f 0300 	mov.w	r3, #0
 8001de8:	00eb      	lsls	r3, r5, #3
 8001dea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001dee:	00e2      	lsls	r2, r4, #3
 8001df0:	4614      	mov	r4, r2
 8001df2:	461d      	mov	r5, r3
 8001df4:	4643      	mov	r3, r8
 8001df6:	18e3      	adds	r3, r4, r3
 8001df8:	603b      	str	r3, [r7, #0]
 8001dfa:	464b      	mov	r3, r9
 8001dfc:	eb45 0303 	adc.w	r3, r5, r3
 8001e00:	607b      	str	r3, [r7, #4]
 8001e02:	f04f 0200 	mov.w	r2, #0
 8001e06:	f04f 0300 	mov.w	r3, #0
 8001e0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e0e:	4629      	mov	r1, r5
 8001e10:	028b      	lsls	r3, r1, #10
 8001e12:	4621      	mov	r1, r4
 8001e14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e18:	4621      	mov	r1, r4
 8001e1a:	028a      	lsls	r2, r1, #10
 8001e1c:	4610      	mov	r0, r2
 8001e1e:	4619      	mov	r1, r3
 8001e20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e22:	2200      	movs	r2, #0
 8001e24:	61bb      	str	r3, [r7, #24]
 8001e26:	61fa      	str	r2, [r7, #28]
 8001e28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e2c:	f7fe fa28 	bl	8000280 <__aeabi_uldivmod>
 8001e30:	4602      	mov	r2, r0
 8001e32:	460b      	mov	r3, r1
 8001e34:	4613      	mov	r3, r2
 8001e36:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e38:	4b0b      	ldr	r3, [pc, #44]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	0c1b      	lsrs	r3, r3, #16
 8001e3e:	f003 0303 	and.w	r3, r3, #3
 8001e42:	3301      	adds	r3, #1
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001e48:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001e4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e50:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e52:	e002      	b.n	8001e5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e54:	4b05      	ldr	r3, [pc, #20]	; (8001e6c <HAL_RCC_GetSysClockFreq+0x204>)
 8001e56:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3750      	adds	r7, #80	; 0x50
 8001e60:	46bd      	mov	sp, r7
 8001e62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e66:	bf00      	nop
 8001e68:	40023800 	.word	0x40023800
 8001e6c:	00f42400 	.word	0x00f42400
 8001e70:	007a1200 	.word	0x007a1200

08001e74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e78:	4b03      	ldr	r3, [pc, #12]	; (8001e88 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	20000000 	.word	0x20000000

08001e8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e90:	f7ff fff0 	bl	8001e74 <HAL_RCC_GetHCLKFreq>
 8001e94:	4602      	mov	r2, r0
 8001e96:	4b05      	ldr	r3, [pc, #20]	; (8001eac <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	0a9b      	lsrs	r3, r3, #10
 8001e9c:	f003 0307 	and.w	r3, r3, #7
 8001ea0:	4903      	ldr	r1, [pc, #12]	; (8001eb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ea2:	5ccb      	ldrb	r3, [r1, r3]
 8001ea4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40023800 	.word	0x40023800
 8001eb0:	08004c98 	.word	0x08004c98

08001eb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001eb8:	f7ff ffdc 	bl	8001e74 <HAL_RCC_GetHCLKFreq>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	4b05      	ldr	r3, [pc, #20]	; (8001ed4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	0b5b      	lsrs	r3, r3, #13
 8001ec4:	f003 0307 	and.w	r3, r3, #7
 8001ec8:	4903      	ldr	r1, [pc, #12]	; (8001ed8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001eca:	5ccb      	ldrb	r3, [r1, r3]
 8001ecc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	40023800 	.word	0x40023800
 8001ed8:	08004c98 	.word	0x08004c98

08001edc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d101      	bne.n	8001eee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e041      	b.n	8001f72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d106      	bne.n	8001f08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f7fe fe86 	bl	8000c14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2202      	movs	r2, #2
 8001f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	3304      	adds	r3, #4
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4610      	mov	r0, r2
 8001f1c:	f000 fc78 	bl	8002810 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b082      	sub	sp, #8
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d101      	bne.n	8001f8c <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e041      	b.n	8002010 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d106      	bne.n	8001fa6 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f000 f839 	bl	8002018 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2202      	movs	r2, #2
 8001faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	3304      	adds	r3, #4
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	4610      	mov	r0, r2
 8001fba:	f000 fc29 	bl	8002810 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2201      	movs	r2, #1
 8001fca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2201      	movs	r2, #1
 8002002:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2201      	movs	r2, #1
 800200a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800200e:	2300      	movs	r3, #0
}
 8002010:	4618      	mov	r0, r3
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002036:	2300      	movs	r3, #0
 8002038:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d104      	bne.n	800204a <HAL_TIM_IC_Start_IT+0x1e>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002046:	b2db      	uxtb	r3, r3
 8002048:	e013      	b.n	8002072 <HAL_TIM_IC_Start_IT+0x46>
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	2b04      	cmp	r3, #4
 800204e:	d104      	bne.n	800205a <HAL_TIM_IC_Start_IT+0x2e>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002056:	b2db      	uxtb	r3, r3
 8002058:	e00b      	b.n	8002072 <HAL_TIM_IC_Start_IT+0x46>
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	2b08      	cmp	r3, #8
 800205e:	d104      	bne.n	800206a <HAL_TIM_IC_Start_IT+0x3e>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002066:	b2db      	uxtb	r3, r3
 8002068:	e003      	b.n	8002072 <HAL_TIM_IC_Start_IT+0x46>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002070:	b2db      	uxtb	r3, r3
 8002072:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d104      	bne.n	8002084 <HAL_TIM_IC_Start_IT+0x58>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002080:	b2db      	uxtb	r3, r3
 8002082:	e013      	b.n	80020ac <HAL_TIM_IC_Start_IT+0x80>
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	2b04      	cmp	r3, #4
 8002088:	d104      	bne.n	8002094 <HAL_TIM_IC_Start_IT+0x68>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002090:	b2db      	uxtb	r3, r3
 8002092:	e00b      	b.n	80020ac <HAL_TIM_IC_Start_IT+0x80>
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	2b08      	cmp	r3, #8
 8002098:	d104      	bne.n	80020a4 <HAL_TIM_IC_Start_IT+0x78>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	e003      	b.n	80020ac <HAL_TIM_IC_Start_IT+0x80>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80020ae:	7bbb      	ldrb	r3, [r7, #14]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d102      	bne.n	80020ba <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80020b4:	7b7b      	ldrb	r3, [r7, #13]
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d001      	beq.n	80020be <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e0c2      	b.n	8002244 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d104      	bne.n	80020ce <HAL_TIM_IC_Start_IT+0xa2>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2202      	movs	r2, #2
 80020c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020cc:	e013      	b.n	80020f6 <HAL_TIM_IC_Start_IT+0xca>
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	2b04      	cmp	r3, #4
 80020d2:	d104      	bne.n	80020de <HAL_TIM_IC_Start_IT+0xb2>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2202      	movs	r2, #2
 80020d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020dc:	e00b      	b.n	80020f6 <HAL_TIM_IC_Start_IT+0xca>
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	2b08      	cmp	r3, #8
 80020e2:	d104      	bne.n	80020ee <HAL_TIM_IC_Start_IT+0xc2>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2202      	movs	r2, #2
 80020e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020ec:	e003      	b.n	80020f6 <HAL_TIM_IC_Start_IT+0xca>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2202      	movs	r2, #2
 80020f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d104      	bne.n	8002106 <HAL_TIM_IC_Start_IT+0xda>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2202      	movs	r2, #2
 8002100:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002104:	e013      	b.n	800212e <HAL_TIM_IC_Start_IT+0x102>
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	2b04      	cmp	r3, #4
 800210a:	d104      	bne.n	8002116 <HAL_TIM_IC_Start_IT+0xea>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2202      	movs	r2, #2
 8002110:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002114:	e00b      	b.n	800212e <HAL_TIM_IC_Start_IT+0x102>
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	2b08      	cmp	r3, #8
 800211a:	d104      	bne.n	8002126 <HAL_TIM_IC_Start_IT+0xfa>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2202      	movs	r2, #2
 8002120:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002124:	e003      	b.n	800212e <HAL_TIM_IC_Start_IT+0x102>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2202      	movs	r2, #2
 800212a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	2b0c      	cmp	r3, #12
 8002132:	d841      	bhi.n	80021b8 <HAL_TIM_IC_Start_IT+0x18c>
 8002134:	a201      	add	r2, pc, #4	; (adr r2, 800213c <HAL_TIM_IC_Start_IT+0x110>)
 8002136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800213a:	bf00      	nop
 800213c:	08002171 	.word	0x08002171
 8002140:	080021b9 	.word	0x080021b9
 8002144:	080021b9 	.word	0x080021b9
 8002148:	080021b9 	.word	0x080021b9
 800214c:	08002183 	.word	0x08002183
 8002150:	080021b9 	.word	0x080021b9
 8002154:	080021b9 	.word	0x080021b9
 8002158:	080021b9 	.word	0x080021b9
 800215c:	08002195 	.word	0x08002195
 8002160:	080021b9 	.word	0x080021b9
 8002164:	080021b9 	.word	0x080021b9
 8002168:	080021b9 	.word	0x080021b9
 800216c:	080021a7 	.word	0x080021a7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	68da      	ldr	r2, [r3, #12]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f042 0202 	orr.w	r2, r2, #2
 800217e:	60da      	str	r2, [r3, #12]
      break;
 8002180:	e01d      	b.n	80021be <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68da      	ldr	r2, [r3, #12]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f042 0204 	orr.w	r2, r2, #4
 8002190:	60da      	str	r2, [r3, #12]
      break;
 8002192:	e014      	b.n	80021be <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	68da      	ldr	r2, [r3, #12]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f042 0208 	orr.w	r2, r2, #8
 80021a2:	60da      	str	r2, [r3, #12]
      break;
 80021a4:	e00b      	b.n	80021be <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	68da      	ldr	r2, [r3, #12]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f042 0210 	orr.w	r2, r2, #16
 80021b4:	60da      	str	r2, [r3, #12]
      break;
 80021b6:	e002      	b.n	80021be <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	73fb      	strb	r3, [r7, #15]
      break;
 80021bc:	bf00      	nop
  }

  if (status == HAL_OK)
 80021be:	7bfb      	ldrb	r3, [r7, #15]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d13e      	bne.n	8002242 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2201      	movs	r2, #1
 80021ca:	6839      	ldr	r1, [r7, #0]
 80021cc:	4618      	mov	r0, r3
 80021ce:	f000 fd57 	bl	8002c80 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a1d      	ldr	r2, [pc, #116]	; (800224c <HAL_TIM_IC_Start_IT+0x220>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d018      	beq.n	800220e <HAL_TIM_IC_Start_IT+0x1e2>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021e4:	d013      	beq.n	800220e <HAL_TIM_IC_Start_IT+0x1e2>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a19      	ldr	r2, [pc, #100]	; (8002250 <HAL_TIM_IC_Start_IT+0x224>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d00e      	beq.n	800220e <HAL_TIM_IC_Start_IT+0x1e2>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a17      	ldr	r2, [pc, #92]	; (8002254 <HAL_TIM_IC_Start_IT+0x228>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d009      	beq.n	800220e <HAL_TIM_IC_Start_IT+0x1e2>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a16      	ldr	r2, [pc, #88]	; (8002258 <HAL_TIM_IC_Start_IT+0x22c>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d004      	beq.n	800220e <HAL_TIM_IC_Start_IT+0x1e2>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a14      	ldr	r2, [pc, #80]	; (800225c <HAL_TIM_IC_Start_IT+0x230>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d111      	bne.n	8002232 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f003 0307 	and.w	r3, r3, #7
 8002218:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	2b06      	cmp	r3, #6
 800221e:	d010      	beq.n	8002242 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f042 0201 	orr.w	r2, r2, #1
 800222e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002230:	e007      	b.n	8002242 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f042 0201 	orr.w	r2, r2, #1
 8002240:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002242:	7bfb      	ldrb	r3, [r7, #15]
}
 8002244:	4618      	mov	r0, r3
 8002246:	3710      	adds	r7, #16
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40010000 	.word	0x40010000
 8002250:	40000400 	.word	0x40000400
 8002254:	40000800 	.word	0x40000800
 8002258:	40000c00 	.word	0x40000c00
 800225c:	40014000 	.word	0x40014000

08002260 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	2b02      	cmp	r3, #2
 8002274:	d122      	bne.n	80022bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	f003 0302 	and.w	r3, r3, #2
 8002280:	2b02      	cmp	r3, #2
 8002282:	d11b      	bne.n	80022bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f06f 0202 	mvn.w	r2, #2
 800228c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2201      	movs	r2, #1
 8002292:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	f003 0303 	and.w	r3, r3, #3
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d003      	beq.n	80022aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f7fe f9f4 	bl	8000690 <HAL_TIM_IC_CaptureCallback>
 80022a8:	e005      	b.n	80022b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 fa92 	bl	80027d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f000 fa99 	bl	80027e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	f003 0304 	and.w	r3, r3, #4
 80022c6:	2b04      	cmp	r3, #4
 80022c8:	d122      	bne.n	8002310 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	f003 0304 	and.w	r3, r3, #4
 80022d4:	2b04      	cmp	r3, #4
 80022d6:	d11b      	bne.n	8002310 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f06f 0204 	mvn.w	r2, #4
 80022e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2202      	movs	r2, #2
 80022e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d003      	beq.n	80022fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f7fe f9ca 	bl	8000690 <HAL_TIM_IC_CaptureCallback>
 80022fc:	e005      	b.n	800230a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f000 fa68 	bl	80027d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f000 fa6f 	bl	80027e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	f003 0308 	and.w	r3, r3, #8
 800231a:	2b08      	cmp	r3, #8
 800231c:	d122      	bne.n	8002364 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	f003 0308 	and.w	r3, r3, #8
 8002328:	2b08      	cmp	r3, #8
 800232a:	d11b      	bne.n	8002364 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f06f 0208 	mvn.w	r2, #8
 8002334:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2204      	movs	r2, #4
 800233a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	69db      	ldr	r3, [r3, #28]
 8002342:	f003 0303 	and.w	r3, r3, #3
 8002346:	2b00      	cmp	r3, #0
 8002348:	d003      	beq.n	8002352 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f7fe f9a0 	bl	8000690 <HAL_TIM_IC_CaptureCallback>
 8002350:	e005      	b.n	800235e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f000 fa3e 	bl	80027d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f000 fa45 	bl	80027e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	f003 0310 	and.w	r3, r3, #16
 800236e:	2b10      	cmp	r3, #16
 8002370:	d122      	bne.n	80023b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	f003 0310 	and.w	r3, r3, #16
 800237c:	2b10      	cmp	r3, #16
 800237e:	d11b      	bne.n	80023b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f06f 0210 	mvn.w	r2, #16
 8002388:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2208      	movs	r2, #8
 800238e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	69db      	ldr	r3, [r3, #28]
 8002396:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800239a:	2b00      	cmp	r3, #0
 800239c:	d003      	beq.n	80023a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f7fe f976 	bl	8000690 <HAL_TIM_IC_CaptureCallback>
 80023a4:	e005      	b.n	80023b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f000 fa14 	bl	80027d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f000 fa1b 	bl	80027e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	691b      	ldr	r3, [r3, #16]
 80023be:	f003 0301 	and.w	r3, r3, #1
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d10e      	bne.n	80023e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	f003 0301 	and.w	r3, r3, #1
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d107      	bne.n	80023e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f06f 0201 	mvn.w	r2, #1
 80023dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f000 f9ee 	bl	80027c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ee:	2b80      	cmp	r3, #128	; 0x80
 80023f0:	d10e      	bne.n	8002410 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023fc:	2b80      	cmp	r3, #128	; 0x80
 80023fe:	d107      	bne.n	8002410 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002408:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f000 fcd6 	bl	8002dbc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800241a:	2b40      	cmp	r3, #64	; 0x40
 800241c:	d10e      	bne.n	800243c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002428:	2b40      	cmp	r3, #64	; 0x40
 800242a:	d107      	bne.n	800243c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002434:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f000 f9e0 	bl	80027fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	f003 0320 	and.w	r3, r3, #32
 8002446:	2b20      	cmp	r3, #32
 8002448:	d10e      	bne.n	8002468 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	f003 0320 	and.w	r3, r3, #32
 8002454:	2b20      	cmp	r3, #32
 8002456:	d107      	bne.n	8002468 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f06f 0220 	mvn.w	r2, #32
 8002460:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f000 fca0 	bl	8002da8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002468:	bf00      	nop
 800246a:	3708      	adds	r7, #8
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b086      	sub	sp, #24
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800247c:	2300      	movs	r3, #0
 800247e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002486:	2b01      	cmp	r3, #1
 8002488:	d101      	bne.n	800248e <HAL_TIM_IC_ConfigChannel+0x1e>
 800248a:	2302      	movs	r3, #2
 800248c:	e088      	b.n	80025a0 <HAL_TIM_IC_ConfigChannel+0x130>
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2201      	movs	r2, #1
 8002492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d11b      	bne.n	80024d4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	6818      	ldr	r0, [r3, #0]
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	6819      	ldr	r1, [r3, #0]
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	685a      	ldr	r2, [r3, #4]
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	f000 fa30 	bl	8002910 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	699a      	ldr	r2, [r3, #24]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f022 020c 	bic.w	r2, r2, #12
 80024be:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	6999      	ldr	r1, [r3, #24]
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	689a      	ldr	r2, [r3, #8]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	430a      	orrs	r2, r1
 80024d0:	619a      	str	r2, [r3, #24]
 80024d2:	e060      	b.n	8002596 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2b04      	cmp	r3, #4
 80024d8:	d11c      	bne.n	8002514 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6818      	ldr	r0, [r3, #0]
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	6819      	ldr	r1, [r3, #0]
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	685a      	ldr	r2, [r3, #4]
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	f000 faa8 	bl	8002a3e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	699a      	ldr	r2, [r3, #24]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80024fc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	6999      	ldr	r1, [r3, #24]
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	021a      	lsls	r2, r3, #8
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	430a      	orrs	r2, r1
 8002510:	619a      	str	r2, [r3, #24]
 8002512:	e040      	b.n	8002596 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2b08      	cmp	r3, #8
 8002518:	d11b      	bne.n	8002552 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6818      	ldr	r0, [r3, #0]
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	6819      	ldr	r1, [r3, #0]
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	685a      	ldr	r2, [r3, #4]
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	f000 faf5 	bl	8002b18 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	69da      	ldr	r2, [r3, #28]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f022 020c 	bic.w	r2, r2, #12
 800253c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	69d9      	ldr	r1, [r3, #28]
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	689a      	ldr	r2, [r3, #8]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	430a      	orrs	r2, r1
 800254e:	61da      	str	r2, [r3, #28]
 8002550:	e021      	b.n	8002596 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2b0c      	cmp	r3, #12
 8002556:	d11c      	bne.n	8002592 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6818      	ldr	r0, [r3, #0]
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	6819      	ldr	r1, [r3, #0]
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	685a      	ldr	r2, [r3, #4]
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	f000 fb12 	bl	8002b90 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	69da      	ldr	r2, [r3, #28]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800257a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	69d9      	ldr	r1, [r3, #28]
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	021a      	lsls	r2, r3, #8
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	430a      	orrs	r2, r1
 800258e:	61da      	str	r2, [r3, #28]
 8002590:	e001      	b.n	8002596 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800259e:	7dfb      	ldrb	r3, [r7, #23]
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3718      	adds	r7, #24
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025b2:	2300      	movs	r3, #0
 80025b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d101      	bne.n	80025c4 <HAL_TIM_ConfigClockSource+0x1c>
 80025c0:	2302      	movs	r3, #2
 80025c2:	e0b4      	b.n	800272e <HAL_TIM_ConfigClockSource+0x186>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2202      	movs	r2, #2
 80025d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80025e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80025ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68ba      	ldr	r2, [r7, #8]
 80025f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025fc:	d03e      	beq.n	800267c <HAL_TIM_ConfigClockSource+0xd4>
 80025fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002602:	f200 8087 	bhi.w	8002714 <HAL_TIM_ConfigClockSource+0x16c>
 8002606:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800260a:	f000 8086 	beq.w	800271a <HAL_TIM_ConfigClockSource+0x172>
 800260e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002612:	d87f      	bhi.n	8002714 <HAL_TIM_ConfigClockSource+0x16c>
 8002614:	2b70      	cmp	r3, #112	; 0x70
 8002616:	d01a      	beq.n	800264e <HAL_TIM_ConfigClockSource+0xa6>
 8002618:	2b70      	cmp	r3, #112	; 0x70
 800261a:	d87b      	bhi.n	8002714 <HAL_TIM_ConfigClockSource+0x16c>
 800261c:	2b60      	cmp	r3, #96	; 0x60
 800261e:	d050      	beq.n	80026c2 <HAL_TIM_ConfigClockSource+0x11a>
 8002620:	2b60      	cmp	r3, #96	; 0x60
 8002622:	d877      	bhi.n	8002714 <HAL_TIM_ConfigClockSource+0x16c>
 8002624:	2b50      	cmp	r3, #80	; 0x50
 8002626:	d03c      	beq.n	80026a2 <HAL_TIM_ConfigClockSource+0xfa>
 8002628:	2b50      	cmp	r3, #80	; 0x50
 800262a:	d873      	bhi.n	8002714 <HAL_TIM_ConfigClockSource+0x16c>
 800262c:	2b40      	cmp	r3, #64	; 0x40
 800262e:	d058      	beq.n	80026e2 <HAL_TIM_ConfigClockSource+0x13a>
 8002630:	2b40      	cmp	r3, #64	; 0x40
 8002632:	d86f      	bhi.n	8002714 <HAL_TIM_ConfigClockSource+0x16c>
 8002634:	2b30      	cmp	r3, #48	; 0x30
 8002636:	d064      	beq.n	8002702 <HAL_TIM_ConfigClockSource+0x15a>
 8002638:	2b30      	cmp	r3, #48	; 0x30
 800263a:	d86b      	bhi.n	8002714 <HAL_TIM_ConfigClockSource+0x16c>
 800263c:	2b20      	cmp	r3, #32
 800263e:	d060      	beq.n	8002702 <HAL_TIM_ConfigClockSource+0x15a>
 8002640:	2b20      	cmp	r3, #32
 8002642:	d867      	bhi.n	8002714 <HAL_TIM_ConfigClockSource+0x16c>
 8002644:	2b00      	cmp	r3, #0
 8002646:	d05c      	beq.n	8002702 <HAL_TIM_ConfigClockSource+0x15a>
 8002648:	2b10      	cmp	r3, #16
 800264a:	d05a      	beq.n	8002702 <HAL_TIM_ConfigClockSource+0x15a>
 800264c:	e062      	b.n	8002714 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6818      	ldr	r0, [r3, #0]
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	6899      	ldr	r1, [r3, #8]
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685a      	ldr	r2, [r3, #4]
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	f000 faef 	bl	8002c40 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002670:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68ba      	ldr	r2, [r7, #8]
 8002678:	609a      	str	r2, [r3, #8]
      break;
 800267a:	e04f      	b.n	800271c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6818      	ldr	r0, [r3, #0]
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	6899      	ldr	r1, [r3, #8]
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685a      	ldr	r2, [r3, #4]
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	f000 fad8 	bl	8002c40 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	689a      	ldr	r2, [r3, #8]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800269e:	609a      	str	r2, [r3, #8]
      break;
 80026a0:	e03c      	b.n	800271c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6818      	ldr	r0, [r3, #0]
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	6859      	ldr	r1, [r3, #4]
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	461a      	mov	r2, r3
 80026b0:	f000 f996 	bl	80029e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2150      	movs	r1, #80	; 0x50
 80026ba:	4618      	mov	r0, r3
 80026bc:	f000 faa5 	bl	8002c0a <TIM_ITRx_SetConfig>
      break;
 80026c0:	e02c      	b.n	800271c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6818      	ldr	r0, [r3, #0]
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	6859      	ldr	r1, [r3, #4]
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	461a      	mov	r2, r3
 80026d0:	f000 f9f2 	bl	8002ab8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2160      	movs	r1, #96	; 0x60
 80026da:	4618      	mov	r0, r3
 80026dc:	f000 fa95 	bl	8002c0a <TIM_ITRx_SetConfig>
      break;
 80026e0:	e01c      	b.n	800271c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6818      	ldr	r0, [r3, #0]
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	6859      	ldr	r1, [r3, #4]
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	461a      	mov	r2, r3
 80026f0:	f000 f976 	bl	80029e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2140      	movs	r1, #64	; 0x40
 80026fa:	4618      	mov	r0, r3
 80026fc:	f000 fa85 	bl	8002c0a <TIM_ITRx_SetConfig>
      break;
 8002700:	e00c      	b.n	800271c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4619      	mov	r1, r3
 800270c:	4610      	mov	r0, r2
 800270e:	f000 fa7c 	bl	8002c0a <TIM_ITRx_SetConfig>
      break;
 8002712:	e003      	b.n	800271c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	73fb      	strb	r3, [r7, #15]
      break;
 8002718:	e000      	b.n	800271c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800271a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800272c:	7bfb      	ldrb	r3, [r7, #15]
}
 800272e:	4618      	mov	r0, r3
 8002730:	3710      	adds	r7, #16
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
	...

08002738 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002738:	b480      	push	{r7}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002742:	2300      	movs	r3, #0
 8002744:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	2b0c      	cmp	r3, #12
 800274a:	d831      	bhi.n	80027b0 <HAL_TIM_ReadCapturedValue+0x78>
 800274c:	a201      	add	r2, pc, #4	; (adr r2, 8002754 <HAL_TIM_ReadCapturedValue+0x1c>)
 800274e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002752:	bf00      	nop
 8002754:	08002789 	.word	0x08002789
 8002758:	080027b1 	.word	0x080027b1
 800275c:	080027b1 	.word	0x080027b1
 8002760:	080027b1 	.word	0x080027b1
 8002764:	08002793 	.word	0x08002793
 8002768:	080027b1 	.word	0x080027b1
 800276c:	080027b1 	.word	0x080027b1
 8002770:	080027b1 	.word	0x080027b1
 8002774:	0800279d 	.word	0x0800279d
 8002778:	080027b1 	.word	0x080027b1
 800277c:	080027b1 	.word	0x080027b1
 8002780:	080027b1 	.word	0x080027b1
 8002784:	080027a7 	.word	0x080027a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800278e:	60fb      	str	r3, [r7, #12]

      break;
 8002790:	e00f      	b.n	80027b2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002798:	60fb      	str	r3, [r7, #12]

      break;
 800279a:	e00a      	b.n	80027b2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027a2:	60fb      	str	r3, [r7, #12]

      break;
 80027a4:	e005      	b.n	80027b2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ac:	60fb      	str	r3, [r7, #12]

      break;
 80027ae:	e000      	b.n	80027b2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80027b0:	bf00      	nop
  }

  return tmpreg;
 80027b2:	68fb      	ldr	r3, [r7, #12]
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3714      	adds	r7, #20
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80027c8:	bf00      	nop
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027dc:	bf00      	nop
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027f0:	bf00      	nop
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002804:	bf00      	nop
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002810:	b480      	push	{r7}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4a34      	ldr	r2, [pc, #208]	; (80028f4 <TIM_Base_SetConfig+0xe4>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d00f      	beq.n	8002848 <TIM_Base_SetConfig+0x38>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800282e:	d00b      	beq.n	8002848 <TIM_Base_SetConfig+0x38>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4a31      	ldr	r2, [pc, #196]	; (80028f8 <TIM_Base_SetConfig+0xe8>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d007      	beq.n	8002848 <TIM_Base_SetConfig+0x38>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4a30      	ldr	r2, [pc, #192]	; (80028fc <TIM_Base_SetConfig+0xec>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d003      	beq.n	8002848 <TIM_Base_SetConfig+0x38>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	4a2f      	ldr	r2, [pc, #188]	; (8002900 <TIM_Base_SetConfig+0xf0>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d108      	bne.n	800285a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800284e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	4313      	orrs	r3, r2
 8002858:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a25      	ldr	r2, [pc, #148]	; (80028f4 <TIM_Base_SetConfig+0xe4>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d01b      	beq.n	800289a <TIM_Base_SetConfig+0x8a>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002868:	d017      	beq.n	800289a <TIM_Base_SetConfig+0x8a>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a22      	ldr	r2, [pc, #136]	; (80028f8 <TIM_Base_SetConfig+0xe8>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d013      	beq.n	800289a <TIM_Base_SetConfig+0x8a>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a21      	ldr	r2, [pc, #132]	; (80028fc <TIM_Base_SetConfig+0xec>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d00f      	beq.n	800289a <TIM_Base_SetConfig+0x8a>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a20      	ldr	r2, [pc, #128]	; (8002900 <TIM_Base_SetConfig+0xf0>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d00b      	beq.n	800289a <TIM_Base_SetConfig+0x8a>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a1f      	ldr	r2, [pc, #124]	; (8002904 <TIM_Base_SetConfig+0xf4>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d007      	beq.n	800289a <TIM_Base_SetConfig+0x8a>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a1e      	ldr	r2, [pc, #120]	; (8002908 <TIM_Base_SetConfig+0xf8>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d003      	beq.n	800289a <TIM_Base_SetConfig+0x8a>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a1d      	ldr	r2, [pc, #116]	; (800290c <TIM_Base_SetConfig+0xfc>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d108      	bne.n	80028ac <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	689a      	ldr	r2, [r3, #8]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4a08      	ldr	r2, [pc, #32]	; (80028f4 <TIM_Base_SetConfig+0xe4>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d103      	bne.n	80028e0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	691a      	ldr	r2, [r3, #16]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	615a      	str	r2, [r3, #20]
}
 80028e6:	bf00      	nop
 80028e8:	3714      	adds	r7, #20
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	40010000 	.word	0x40010000
 80028f8:	40000400 	.word	0x40000400
 80028fc:	40000800 	.word	0x40000800
 8002900:	40000c00 	.word	0x40000c00
 8002904:	40014000 	.word	0x40014000
 8002908:	40014400 	.word	0x40014400
 800290c:	40014800 	.word	0x40014800

08002910 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002910:	b480      	push	{r7}
 8002912:	b087      	sub	sp, #28
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
 800291c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6a1b      	ldr	r3, [r3, #32]
 8002922:	f023 0201 	bic.w	r2, r3, #1
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6a1b      	ldr	r3, [r3, #32]
 8002934:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	4a24      	ldr	r2, [pc, #144]	; (80029cc <TIM_TI1_SetConfig+0xbc>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d013      	beq.n	8002966 <TIM_TI1_SetConfig+0x56>
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002944:	d00f      	beq.n	8002966 <TIM_TI1_SetConfig+0x56>
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	4a21      	ldr	r2, [pc, #132]	; (80029d0 <TIM_TI1_SetConfig+0xc0>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d00b      	beq.n	8002966 <TIM_TI1_SetConfig+0x56>
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	4a20      	ldr	r2, [pc, #128]	; (80029d4 <TIM_TI1_SetConfig+0xc4>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d007      	beq.n	8002966 <TIM_TI1_SetConfig+0x56>
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	4a1f      	ldr	r2, [pc, #124]	; (80029d8 <TIM_TI1_SetConfig+0xc8>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d003      	beq.n	8002966 <TIM_TI1_SetConfig+0x56>
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	4a1e      	ldr	r2, [pc, #120]	; (80029dc <TIM_TI1_SetConfig+0xcc>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d101      	bne.n	800296a <TIM_TI1_SetConfig+0x5a>
 8002966:	2301      	movs	r3, #1
 8002968:	e000      	b.n	800296c <TIM_TI1_SetConfig+0x5c>
 800296a:	2300      	movs	r3, #0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d008      	beq.n	8002982 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	f023 0303 	bic.w	r3, r3, #3
 8002976:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002978:	697a      	ldr	r2, [r7, #20]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4313      	orrs	r3, r2
 800297e:	617b      	str	r3, [r7, #20]
 8002980:	e003      	b.n	800298a <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	f043 0301 	orr.w	r3, r3, #1
 8002988:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002990:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	011b      	lsls	r3, r3, #4
 8002996:	b2db      	uxtb	r3, r3
 8002998:	697a      	ldr	r2, [r7, #20]
 800299a:	4313      	orrs	r3, r2
 800299c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	f023 030a 	bic.w	r3, r3, #10
 80029a4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	f003 030a 	and.w	r3, r3, #10
 80029ac:	693a      	ldr	r2, [r7, #16]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	697a      	ldr	r2, [r7, #20]
 80029b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	693a      	ldr	r2, [r7, #16]
 80029bc:	621a      	str	r2, [r3, #32]
}
 80029be:	bf00      	nop
 80029c0:	371c      	adds	r7, #28
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	40010000 	.word	0x40010000
 80029d0:	40000400 	.word	0x40000400
 80029d4:	40000800 	.word	0x40000800
 80029d8:	40000c00 	.word	0x40000c00
 80029dc:	40014000 	.word	0x40014000

080029e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b087      	sub	sp, #28
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6a1b      	ldr	r3, [r3, #32]
 80029f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6a1b      	ldr	r3, [r3, #32]
 80029f6:	f023 0201 	bic.w	r2, r3, #1
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	011b      	lsls	r3, r3, #4
 8002a10:	693a      	ldr	r2, [r7, #16]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	f023 030a 	bic.w	r3, r3, #10
 8002a1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	693a      	ldr	r2, [r7, #16]
 8002a2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	697a      	ldr	r2, [r7, #20]
 8002a30:	621a      	str	r2, [r3, #32]
}
 8002a32:	bf00      	nop
 8002a34:	371c      	adds	r7, #28
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr

08002a3e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002a3e:	b480      	push	{r7}
 8002a40:	b087      	sub	sp, #28
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	60f8      	str	r0, [r7, #12]
 8002a46:	60b9      	str	r1, [r7, #8]
 8002a48:	607a      	str	r2, [r7, #4]
 8002a4a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6a1b      	ldr	r3, [r3, #32]
 8002a50:	f023 0210 	bic.w	r2, r3, #16
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	699b      	ldr	r3, [r3, #24]
 8002a5c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6a1b      	ldr	r3, [r3, #32]
 8002a62:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a6a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	021b      	lsls	r3, r3, #8
 8002a70:	697a      	ldr	r2, [r7, #20]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a7c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	031b      	lsls	r3, r3, #12
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	697a      	ldr	r2, [r7, #20]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a90:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	011b      	lsls	r3, r3, #4
 8002a96:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002a9a:	693a      	ldr	r2, [r7, #16]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	697a      	ldr	r2, [r7, #20]
 8002aa4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	621a      	str	r2, [r3, #32]
}
 8002aac:	bf00      	nop
 8002aae:	371c      	adds	r7, #28
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b087      	sub	sp, #28
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6a1b      	ldr	r3, [r3, #32]
 8002ac8:	f023 0210 	bic.w	r2, r3, #16
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	699b      	ldr	r3, [r3, #24]
 8002ad4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6a1b      	ldr	r3, [r3, #32]
 8002ada:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ae2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	031b      	lsls	r3, r3, #12
 8002ae8:	697a      	ldr	r2, [r7, #20]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002af4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	011b      	lsls	r3, r3, #4
 8002afa:	693a      	ldr	r2, [r7, #16]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	697a      	ldr	r2, [r7, #20]
 8002b04:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	693a      	ldr	r2, [r7, #16]
 8002b0a:	621a      	str	r2, [r3, #32]
}
 8002b0c:	bf00      	nop
 8002b0e:	371c      	adds	r7, #28
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b087      	sub	sp, #28
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	607a      	str	r2, [r7, #4]
 8002b24:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6a1b      	ldr	r3, [r3, #32]
 8002b2a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	69db      	ldr	r3, [r3, #28]
 8002b36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6a1b      	ldr	r3, [r3, #32]
 8002b3c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	f023 0303 	bic.w	r3, r3, #3
 8002b44:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8002b46:	697a      	ldr	r2, [r7, #20]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b54:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	011b      	lsls	r3, r3, #4
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	697a      	ldr	r2, [r7, #20]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8002b68:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	021b      	lsls	r3, r3, #8
 8002b6e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	697a      	ldr	r2, [r7, #20]
 8002b7c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	693a      	ldr	r2, [r7, #16]
 8002b82:	621a      	str	r2, [r3, #32]
}
 8002b84:	bf00      	nop
 8002b86:	371c      	adds	r7, #28
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b087      	sub	sp, #28
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	607a      	str	r2, [r7, #4]
 8002b9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6a1b      	ldr	r3, [r3, #32]
 8002ba2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	69db      	ldr	r3, [r3, #28]
 8002bae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6a1b      	ldr	r3, [r3, #32]
 8002bb4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bbc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	021b      	lsls	r3, r3, #8
 8002bc2:	697a      	ldr	r2, [r7, #20]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002bce:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	031b      	lsls	r3, r3, #12
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	697a      	ldr	r2, [r7, #20]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8002be2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	031b      	lsls	r3, r3, #12
 8002be8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8002bec:	693a      	ldr	r2, [r7, #16]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	697a      	ldr	r2, [r7, #20]
 8002bf6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	621a      	str	r2, [r3, #32]
}
 8002bfe:	bf00      	nop
 8002c00:	371c      	adds	r7, #28
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr

08002c0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	b085      	sub	sp, #20
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
 8002c12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c22:	683a      	ldr	r2, [r7, #0]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	f043 0307 	orr.w	r3, r3, #7
 8002c2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	68fa      	ldr	r2, [r7, #12]
 8002c32:	609a      	str	r2, [r3, #8]
}
 8002c34:	bf00      	nop
 8002c36:	3714      	adds	r7, #20
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr

08002c40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b087      	sub	sp, #28
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	60b9      	str	r1, [r7, #8]
 8002c4a:	607a      	str	r2, [r7, #4]
 8002c4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	021a      	lsls	r2, r3, #8
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	431a      	orrs	r2, r3
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	697a      	ldr	r2, [r7, #20]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	697a      	ldr	r2, [r7, #20]
 8002c72:	609a      	str	r2, [r3, #8]
}
 8002c74:	bf00      	nop
 8002c76:	371c      	adds	r7, #28
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b087      	sub	sp, #28
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	60b9      	str	r1, [r7, #8]
 8002c8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	f003 031f 	and.w	r3, r3, #31
 8002c92:	2201      	movs	r2, #1
 8002c94:	fa02 f303 	lsl.w	r3, r2, r3
 8002c98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6a1a      	ldr	r2, [r3, #32]
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	43db      	mvns	r3, r3
 8002ca2:	401a      	ands	r2, r3
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6a1a      	ldr	r2, [r3, #32]
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	f003 031f 	and.w	r3, r3, #31
 8002cb2:	6879      	ldr	r1, [r7, #4]
 8002cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb8:	431a      	orrs	r2, r3
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	621a      	str	r2, [r3, #32]
}
 8002cbe:	bf00      	nop
 8002cc0:	371c      	adds	r7, #28
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
	...

08002ccc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d101      	bne.n	8002ce4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	e050      	b.n	8002d86 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2202      	movs	r2, #2
 8002cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	68fa      	ldr	r2, [r7, #12]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a1c      	ldr	r2, [pc, #112]	; (8002d94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d018      	beq.n	8002d5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d30:	d013      	beq.n	8002d5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a18      	ldr	r2, [pc, #96]	; (8002d98 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d00e      	beq.n	8002d5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a16      	ldr	r2, [pc, #88]	; (8002d9c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d009      	beq.n	8002d5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a15      	ldr	r2, [pc, #84]	; (8002da0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d004      	beq.n	8002d5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a13      	ldr	r2, [pc, #76]	; (8002da4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d10c      	bne.n	8002d74 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	68ba      	ldr	r2, [r7, #8]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	68ba      	ldr	r2, [r7, #8]
 8002d72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3714      	adds	r7, #20
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	40010000 	.word	0x40010000
 8002d98:	40000400 	.word	0x40000400
 8002d9c:	40000800 	.word	0x40000800
 8002da0:	40000c00 	.word	0x40000c00
 8002da4:	40014000 	.word	0x40014000

08002da8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002db0:	bf00      	nop
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002dc4:	bf00      	nop
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e03f      	b.n	8002e62 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d106      	bne.n	8002dfc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f7fd ff86 	bl	8000d08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2224      	movs	r2, #36	; 0x24
 8002e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	68da      	ldr	r2, [r3, #12]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f000 fd7b 	bl	8003910 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	691a      	ldr	r2, [r3, #16]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	695a      	ldr	r2, [r3, #20]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68da      	ldr	r2, [r3, #12]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2220      	movs	r2, #32
 8002e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2220      	movs	r2, #32
 8002e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b08a      	sub	sp, #40	; 0x28
 8002e6e:	af02      	add	r7, sp, #8
 8002e70:	60f8      	str	r0, [r7, #12]
 8002e72:	60b9      	str	r1, [r7, #8]
 8002e74:	603b      	str	r3, [r7, #0]
 8002e76:	4613      	mov	r3, r2
 8002e78:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b20      	cmp	r3, #32
 8002e88:	d17c      	bne.n	8002f84 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d002      	beq.n	8002e96 <HAL_UART_Transmit+0x2c>
 8002e90:	88fb      	ldrh	r3, [r7, #6]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d101      	bne.n	8002e9a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e075      	b.n	8002f86 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d101      	bne.n	8002ea8 <HAL_UART_Transmit+0x3e>
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	e06e      	b.n	8002f86 <HAL_UART_Transmit+0x11c>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2221      	movs	r2, #33	; 0x21
 8002eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ebe:	f7fe f803 	bl	8000ec8 <HAL_GetTick>
 8002ec2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	88fa      	ldrh	r2, [r7, #6]
 8002ec8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	88fa      	ldrh	r2, [r7, #6]
 8002ece:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ed8:	d108      	bne.n	8002eec <HAL_UART_Transmit+0x82>
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d104      	bne.n	8002eec <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	61bb      	str	r3, [r7, #24]
 8002eea:	e003      	b.n	8002ef4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002efc:	e02a      	b.n	8002f54 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	9300      	str	r3, [sp, #0]
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	2200      	movs	r2, #0
 8002f06:	2180      	movs	r1, #128	; 0x80
 8002f08:	68f8      	ldr	r0, [r7, #12]
 8002f0a:	f000 faf9 	bl	8003500 <UART_WaitOnFlagUntilTimeout>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d001      	beq.n	8002f18 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	e036      	b.n	8002f86 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d10b      	bne.n	8002f36 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	881b      	ldrh	r3, [r3, #0]
 8002f22:	461a      	mov	r2, r3
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f2c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	3302      	adds	r3, #2
 8002f32:	61bb      	str	r3, [r7, #24]
 8002f34:	e007      	b.n	8002f46 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	781a      	ldrb	r2, [r3, #0]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	3301      	adds	r3, #1
 8002f44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	b29a      	uxth	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d1cf      	bne.n	8002efe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	9300      	str	r3, [sp, #0]
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	2200      	movs	r2, #0
 8002f66:	2140      	movs	r1, #64	; 0x40
 8002f68:	68f8      	ldr	r0, [r7, #12]
 8002f6a:	f000 fac9 	bl	8003500 <UART_WaitOnFlagUntilTimeout>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d001      	beq.n	8002f78 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e006      	b.n	8002f86 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2220      	movs	r2, #32
 8002f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002f80:	2300      	movs	r3, #0
 8002f82:	e000      	b.n	8002f86 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002f84:	2302      	movs	r3, #2
  }
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3720      	adds	r7, #32
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
	...

08002f90 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b0ba      	sub	sp, #232	; 0xe8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002fc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fc6:	f003 030f 	and.w	r3, r3, #15
 8002fca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002fce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10f      	bne.n	8002ff6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002fd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fda:	f003 0320 	and.w	r3, r3, #32
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d009      	beq.n	8002ff6 <HAL_UART_IRQHandler+0x66>
 8002fe2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fe6:	f003 0320 	and.w	r3, r3, #32
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d003      	beq.n	8002ff6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 fbd3 	bl	800379a <UART_Receive_IT>
      return;
 8002ff4:	e256      	b.n	80034a4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002ff6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	f000 80de 	beq.w	80031bc <HAL_UART_IRQHandler+0x22c>
 8003000:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003004:	f003 0301 	and.w	r3, r3, #1
 8003008:	2b00      	cmp	r3, #0
 800300a:	d106      	bne.n	800301a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800300c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003010:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003014:	2b00      	cmp	r3, #0
 8003016:	f000 80d1 	beq.w	80031bc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800301a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00b      	beq.n	800303e <HAL_UART_IRQHandler+0xae>
 8003026:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800302a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800302e:	2b00      	cmp	r3, #0
 8003030:	d005      	beq.n	800303e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003036:	f043 0201 	orr.w	r2, r3, #1
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800303e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003042:	f003 0304 	and.w	r3, r3, #4
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00b      	beq.n	8003062 <HAL_UART_IRQHandler+0xd2>
 800304a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	2b00      	cmp	r3, #0
 8003054:	d005      	beq.n	8003062 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305a:	f043 0202 	orr.w	r2, r3, #2
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003066:	f003 0302 	and.w	r3, r3, #2
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00b      	beq.n	8003086 <HAL_UART_IRQHandler+0xf6>
 800306e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	2b00      	cmp	r3, #0
 8003078:	d005      	beq.n	8003086 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307e:	f043 0204 	orr.w	r2, r3, #4
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800308a:	f003 0308 	and.w	r3, r3, #8
 800308e:	2b00      	cmp	r3, #0
 8003090:	d011      	beq.n	80030b6 <HAL_UART_IRQHandler+0x126>
 8003092:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003096:	f003 0320 	and.w	r3, r3, #32
 800309a:	2b00      	cmp	r3, #0
 800309c:	d105      	bne.n	80030aa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800309e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d005      	beq.n	80030b6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ae:	f043 0208 	orr.w	r2, r3, #8
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f000 81ed 	beq.w	800349a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80030c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030c4:	f003 0320 	and.w	r3, r3, #32
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d008      	beq.n	80030de <HAL_UART_IRQHandler+0x14e>
 80030cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030d0:	f003 0320 	and.w	r3, r3, #32
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d002      	beq.n	80030de <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f000 fb5e 	bl	800379a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	695b      	ldr	r3, [r3, #20]
 80030e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030e8:	2b40      	cmp	r3, #64	; 0x40
 80030ea:	bf0c      	ite	eq
 80030ec:	2301      	moveq	r3, #1
 80030ee:	2300      	movne	r3, #0
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fa:	f003 0308 	and.w	r3, r3, #8
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d103      	bne.n	800310a <HAL_UART_IRQHandler+0x17a>
 8003102:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003106:	2b00      	cmp	r3, #0
 8003108:	d04f      	beq.n	80031aa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 fa66 	bl	80035dc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800311a:	2b40      	cmp	r3, #64	; 0x40
 800311c:	d141      	bne.n	80031a2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	3314      	adds	r3, #20
 8003124:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003128:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800312c:	e853 3f00 	ldrex	r3, [r3]
 8003130:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003134:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003138:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800313c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	3314      	adds	r3, #20
 8003146:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800314a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800314e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003152:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003156:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800315a:	e841 2300 	strex	r3, r2, [r1]
 800315e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003162:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1d9      	bne.n	800311e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800316e:	2b00      	cmp	r3, #0
 8003170:	d013      	beq.n	800319a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003176:	4a7d      	ldr	r2, [pc, #500]	; (800336c <HAL_UART_IRQHandler+0x3dc>)
 8003178:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800317e:	4618      	mov	r0, r3
 8003180:	f7fe f853 	bl	800122a <HAL_DMA_Abort_IT>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d016      	beq.n	80031b8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800318e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003194:	4610      	mov	r0, r2
 8003196:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003198:	e00e      	b.n	80031b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 f99a 	bl	80034d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031a0:	e00a      	b.n	80031b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 f996 	bl	80034d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031a8:	e006      	b.n	80031b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 f992 	bl	80034d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80031b6:	e170      	b.n	800349a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031b8:	bf00      	nop
    return;
 80031ba:	e16e      	b.n	800349a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	f040 814a 	bne.w	800345a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80031c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031ca:	f003 0310 	and.w	r3, r3, #16
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f000 8143 	beq.w	800345a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80031d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031d8:	f003 0310 	and.w	r3, r3, #16
 80031dc:	2b00      	cmp	r3, #0
 80031de:	f000 813c 	beq.w	800345a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80031e2:	2300      	movs	r3, #0
 80031e4:	60bb      	str	r3, [r7, #8]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	60bb      	str	r3, [r7, #8]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	60bb      	str	r3, [r7, #8]
 80031f6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	695b      	ldr	r3, [r3, #20]
 80031fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003202:	2b40      	cmp	r3, #64	; 0x40
 8003204:	f040 80b4 	bne.w	8003370 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003214:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003218:	2b00      	cmp	r3, #0
 800321a:	f000 8140 	beq.w	800349e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003222:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003226:	429a      	cmp	r2, r3
 8003228:	f080 8139 	bcs.w	800349e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003232:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003238:	69db      	ldr	r3, [r3, #28]
 800323a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800323e:	f000 8088 	beq.w	8003352 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	330c      	adds	r3, #12
 8003248:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800324c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003250:	e853 3f00 	ldrex	r3, [r3]
 8003254:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003258:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800325c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003260:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	330c      	adds	r3, #12
 800326a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800326e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003272:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003276:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800327a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800327e:	e841 2300 	strex	r3, r2, [r1]
 8003282:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003286:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800328a:	2b00      	cmp	r3, #0
 800328c:	d1d9      	bne.n	8003242 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	3314      	adds	r3, #20
 8003294:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003296:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003298:	e853 3f00 	ldrex	r3, [r3]
 800329c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800329e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032a0:	f023 0301 	bic.w	r3, r3, #1
 80032a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	3314      	adds	r3, #20
 80032ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80032b2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80032b6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032b8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80032ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80032be:	e841 2300 	strex	r3, r2, [r1]
 80032c2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80032c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d1e1      	bne.n	800328e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	3314      	adds	r3, #20
 80032d0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032d4:	e853 3f00 	ldrex	r3, [r3]
 80032d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80032da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	3314      	adds	r3, #20
 80032ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80032ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 80032f0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80032f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80032f6:	e841 2300 	strex	r3, r2, [r1]
 80032fa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80032fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d1e3      	bne.n	80032ca <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2220      	movs	r2, #32
 8003306:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	330c      	adds	r3, #12
 8003316:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003318:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800331a:	e853 3f00 	ldrex	r3, [r3]
 800331e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003320:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003322:	f023 0310 	bic.w	r3, r3, #16
 8003326:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	330c      	adds	r3, #12
 8003330:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003334:	65ba      	str	r2, [r7, #88]	; 0x58
 8003336:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003338:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800333a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800333c:	e841 2300 	strex	r3, r2, [r1]
 8003340:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003342:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003344:	2b00      	cmp	r3, #0
 8003346:	d1e3      	bne.n	8003310 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800334c:	4618      	mov	r0, r3
 800334e:	f7fd fefc 	bl	800114a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800335a:	b29b      	uxth	r3, r3
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	b29b      	uxth	r3, r3
 8003360:	4619      	mov	r1, r3
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 f8c0 	bl	80034e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003368:	e099      	b.n	800349e <HAL_UART_IRQHandler+0x50e>
 800336a:	bf00      	nop
 800336c:	080036a3 	.word	0x080036a3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003378:	b29b      	uxth	r3, r3
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003384:	b29b      	uxth	r3, r3
 8003386:	2b00      	cmp	r3, #0
 8003388:	f000 808b 	beq.w	80034a2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800338c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003390:	2b00      	cmp	r3, #0
 8003392:	f000 8086 	beq.w	80034a2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	330c      	adds	r3, #12
 800339c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800339e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033a0:	e853 3f00 	ldrex	r3, [r3]
 80033a4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80033a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80033ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	330c      	adds	r3, #12
 80033b6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80033ba:	647a      	str	r2, [r7, #68]	; 0x44
 80033bc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80033c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80033c2:	e841 2300 	strex	r3, r2, [r1]
 80033c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80033c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d1e3      	bne.n	8003396 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	3314      	adds	r3, #20
 80033d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d8:	e853 3f00 	ldrex	r3, [r3]
 80033dc:	623b      	str	r3, [r7, #32]
   return(result);
 80033de:	6a3b      	ldr	r3, [r7, #32]
 80033e0:	f023 0301 	bic.w	r3, r3, #1
 80033e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	3314      	adds	r3, #20
 80033ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80033f2:	633a      	str	r2, [r7, #48]	; 0x30
 80033f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80033f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033fa:	e841 2300 	strex	r3, r2, [r1]
 80033fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003402:	2b00      	cmp	r3, #0
 8003404:	d1e3      	bne.n	80033ce <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2220      	movs	r2, #32
 800340a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	330c      	adds	r3, #12
 800341a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	e853 3f00 	ldrex	r3, [r3]
 8003422:	60fb      	str	r3, [r7, #12]
   return(result);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f023 0310 	bic.w	r3, r3, #16
 800342a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	330c      	adds	r3, #12
 8003434:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003438:	61fa      	str	r2, [r7, #28]
 800343a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800343c:	69b9      	ldr	r1, [r7, #24]
 800343e:	69fa      	ldr	r2, [r7, #28]
 8003440:	e841 2300 	strex	r3, r2, [r1]
 8003444:	617b      	str	r3, [r7, #20]
   return(result);
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d1e3      	bne.n	8003414 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800344c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003450:	4619      	mov	r1, r3
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 f848 	bl	80034e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003458:	e023      	b.n	80034a2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800345a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800345e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003462:	2b00      	cmp	r3, #0
 8003464:	d009      	beq.n	800347a <HAL_UART_IRQHandler+0x4ea>
 8003466:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800346a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800346e:	2b00      	cmp	r3, #0
 8003470:	d003      	beq.n	800347a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 f929 	bl	80036ca <UART_Transmit_IT>
    return;
 8003478:	e014      	b.n	80034a4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800347a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800347e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00e      	beq.n	80034a4 <HAL_UART_IRQHandler+0x514>
 8003486:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800348a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800348e:	2b00      	cmp	r3, #0
 8003490:	d008      	beq.n	80034a4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 f969 	bl	800376a <UART_EndTransmit_IT>
    return;
 8003498:	e004      	b.n	80034a4 <HAL_UART_IRQHandler+0x514>
    return;
 800349a:	bf00      	nop
 800349c:	e002      	b.n	80034a4 <HAL_UART_IRQHandler+0x514>
      return;
 800349e:	bf00      	nop
 80034a0:	e000      	b.n	80034a4 <HAL_UART_IRQHandler+0x514>
      return;
 80034a2:	bf00      	nop
  }
}
 80034a4:	37e8      	adds	r7, #232	; 0xe8
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop

080034ac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80034b4:	bf00      	nop
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80034c8:	bf00      	nop
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80034dc:	bf00      	nop
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	460b      	mov	r3, r1
 80034f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80034f4:	bf00      	nop
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b090      	sub	sp, #64	; 0x40
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	603b      	str	r3, [r7, #0]
 800350c:	4613      	mov	r3, r2
 800350e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003510:	e050      	b.n	80035b4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003512:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003518:	d04c      	beq.n	80035b4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800351a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800351c:	2b00      	cmp	r3, #0
 800351e:	d007      	beq.n	8003530 <UART_WaitOnFlagUntilTimeout+0x30>
 8003520:	f7fd fcd2 	bl	8000ec8 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800352c:	429a      	cmp	r2, r3
 800352e:	d241      	bcs.n	80035b4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	330c      	adds	r3, #12
 8003536:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800353a:	e853 3f00 	ldrex	r3, [r3]
 800353e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003542:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003546:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	330c      	adds	r3, #12
 800354e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003550:	637a      	str	r2, [r7, #52]	; 0x34
 8003552:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003554:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003556:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003558:	e841 2300 	strex	r3, r2, [r1]
 800355c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800355e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1e5      	bne.n	8003530 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	3314      	adds	r3, #20
 800356a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	e853 3f00 	ldrex	r3, [r3]
 8003572:	613b      	str	r3, [r7, #16]
   return(result);
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	f023 0301 	bic.w	r3, r3, #1
 800357a:	63bb      	str	r3, [r7, #56]	; 0x38
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	3314      	adds	r3, #20
 8003582:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003584:	623a      	str	r2, [r7, #32]
 8003586:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003588:	69f9      	ldr	r1, [r7, #28]
 800358a:	6a3a      	ldr	r2, [r7, #32]
 800358c:	e841 2300 	strex	r3, r2, [r1]
 8003590:	61bb      	str	r3, [r7, #24]
   return(result);
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d1e5      	bne.n	8003564 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2220      	movs	r2, #32
 800359c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2220      	movs	r2, #32
 80035a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e00f      	b.n	80035d4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	4013      	ands	r3, r2
 80035be:	68ba      	ldr	r2, [r7, #8]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	bf0c      	ite	eq
 80035c4:	2301      	moveq	r3, #1
 80035c6:	2300      	movne	r3, #0
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	461a      	mov	r2, r3
 80035cc:	79fb      	ldrb	r3, [r7, #7]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d09f      	beq.n	8003512 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3740      	adds	r7, #64	; 0x40
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80035dc:	b480      	push	{r7}
 80035de:	b095      	sub	sp, #84	; 0x54
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	330c      	adds	r3, #12
 80035ea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035ee:	e853 3f00 	ldrex	r3, [r3]
 80035f2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80035f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80035fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	330c      	adds	r3, #12
 8003602:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003604:	643a      	str	r2, [r7, #64]	; 0x40
 8003606:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003608:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800360a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800360c:	e841 2300 	strex	r3, r2, [r1]
 8003610:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003614:	2b00      	cmp	r3, #0
 8003616:	d1e5      	bne.n	80035e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	3314      	adds	r3, #20
 800361e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003620:	6a3b      	ldr	r3, [r7, #32]
 8003622:	e853 3f00 	ldrex	r3, [r3]
 8003626:	61fb      	str	r3, [r7, #28]
   return(result);
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	f023 0301 	bic.w	r3, r3, #1
 800362e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	3314      	adds	r3, #20
 8003636:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003638:	62fa      	str	r2, [r7, #44]	; 0x2c
 800363a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800363c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800363e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003640:	e841 2300 	strex	r3, r2, [r1]
 8003644:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003648:	2b00      	cmp	r3, #0
 800364a:	d1e5      	bne.n	8003618 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003650:	2b01      	cmp	r3, #1
 8003652:	d119      	bne.n	8003688 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	330c      	adds	r3, #12
 800365a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	e853 3f00 	ldrex	r3, [r3]
 8003662:	60bb      	str	r3, [r7, #8]
   return(result);
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	f023 0310 	bic.w	r3, r3, #16
 800366a:	647b      	str	r3, [r7, #68]	; 0x44
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	330c      	adds	r3, #12
 8003672:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003674:	61ba      	str	r2, [r7, #24]
 8003676:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003678:	6979      	ldr	r1, [r7, #20]
 800367a:	69ba      	ldr	r2, [r7, #24]
 800367c:	e841 2300 	strex	r3, r2, [r1]
 8003680:	613b      	str	r3, [r7, #16]
   return(result);
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d1e5      	bne.n	8003654 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2220      	movs	r2, #32
 800368c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003696:	bf00      	nop
 8003698:	3754      	adds	r7, #84	; 0x54
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr

080036a2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b084      	sub	sp, #16
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2200      	movs	r2, #0
 80036b4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2200      	movs	r2, #0
 80036ba:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80036bc:	68f8      	ldr	r0, [r7, #12]
 80036be:	f7ff ff09 	bl	80034d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036c2:	bf00      	nop
 80036c4:	3710      	adds	r7, #16
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}

080036ca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80036ca:	b480      	push	{r7}
 80036cc:	b085      	sub	sp, #20
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2b21      	cmp	r3, #33	; 0x21
 80036dc:	d13e      	bne.n	800375c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036e6:	d114      	bne.n	8003712 <UART_Transmit_IT+0x48>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d110      	bne.n	8003712 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a1b      	ldr	r3, [r3, #32]
 80036f4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	881b      	ldrh	r3, [r3, #0]
 80036fa:	461a      	mov	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003704:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a1b      	ldr	r3, [r3, #32]
 800370a:	1c9a      	adds	r2, r3, #2
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	621a      	str	r2, [r3, #32]
 8003710:	e008      	b.n	8003724 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a1b      	ldr	r3, [r3, #32]
 8003716:	1c59      	adds	r1, r3, #1
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	6211      	str	r1, [r2, #32]
 800371c:	781a      	ldrb	r2, [r3, #0]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003728:	b29b      	uxth	r3, r3
 800372a:	3b01      	subs	r3, #1
 800372c:	b29b      	uxth	r3, r3
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	4619      	mov	r1, r3
 8003732:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003734:	2b00      	cmp	r3, #0
 8003736:	d10f      	bne.n	8003758 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68da      	ldr	r2, [r3, #12]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003746:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68da      	ldr	r2, [r3, #12]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003756:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003758:	2300      	movs	r3, #0
 800375a:	e000      	b.n	800375e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800375c:	2302      	movs	r3, #2
  }
}
 800375e:	4618      	mov	r0, r3
 8003760:	3714      	adds	r7, #20
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr

0800376a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800376a:	b580      	push	{r7, lr}
 800376c:	b082      	sub	sp, #8
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	68da      	ldr	r2, [r3, #12]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003780:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2220      	movs	r2, #32
 8003786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f7ff fe8e 	bl	80034ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3708      	adds	r7, #8
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}

0800379a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800379a:	b580      	push	{r7, lr}
 800379c:	b08c      	sub	sp, #48	; 0x30
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b22      	cmp	r3, #34	; 0x22
 80037ac:	f040 80ab 	bne.w	8003906 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037b8:	d117      	bne.n	80037ea <UART_Receive_IT+0x50>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d113      	bne.n	80037ea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80037c2:	2300      	movs	r3, #0
 80037c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ca:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037d8:	b29a      	uxth	r2, r3
 80037da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037dc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e2:	1c9a      	adds	r2, r3, #2
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	629a      	str	r2, [r3, #40]	; 0x28
 80037e8:	e026      	b.n	8003838 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80037f0:	2300      	movs	r3, #0
 80037f2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037fc:	d007      	beq.n	800380e <UART_Receive_IT+0x74>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d10a      	bne.n	800381c <UART_Receive_IT+0x82>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d106      	bne.n	800381c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	b2da      	uxtb	r2, r3
 8003816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003818:	701a      	strb	r2, [r3, #0]
 800381a:	e008      	b.n	800382e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	b2db      	uxtb	r3, r3
 8003824:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003828:	b2da      	uxtb	r2, r3
 800382a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800382c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003832:	1c5a      	adds	r2, r3, #1
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800383c:	b29b      	uxth	r3, r3
 800383e:	3b01      	subs	r3, #1
 8003840:	b29b      	uxth	r3, r3
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	4619      	mov	r1, r3
 8003846:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003848:	2b00      	cmp	r3, #0
 800384a:	d15a      	bne.n	8003902 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	68da      	ldr	r2, [r3, #12]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f022 0220 	bic.w	r2, r2, #32
 800385a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	68da      	ldr	r2, [r3, #12]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800386a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	695a      	ldr	r2, [r3, #20]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f022 0201 	bic.w	r2, r2, #1
 800387a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2220      	movs	r2, #32
 8003880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003888:	2b01      	cmp	r3, #1
 800388a:	d135      	bne.n	80038f8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	330c      	adds	r3, #12
 8003898:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	e853 3f00 	ldrex	r3, [r3]
 80038a0:	613b      	str	r3, [r7, #16]
   return(result);
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	f023 0310 	bic.w	r3, r3, #16
 80038a8:	627b      	str	r3, [r7, #36]	; 0x24
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	330c      	adds	r3, #12
 80038b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038b2:	623a      	str	r2, [r7, #32]
 80038b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b6:	69f9      	ldr	r1, [r7, #28]
 80038b8:	6a3a      	ldr	r2, [r7, #32]
 80038ba:	e841 2300 	strex	r3, r2, [r1]
 80038be:	61bb      	str	r3, [r7, #24]
   return(result);
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d1e5      	bne.n	8003892 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0310 	and.w	r3, r3, #16
 80038d0:	2b10      	cmp	r3, #16
 80038d2:	d10a      	bne.n	80038ea <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80038d4:	2300      	movs	r3, #0
 80038d6:	60fb      	str	r3, [r7, #12]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	60fb      	str	r3, [r7, #12]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	60fb      	str	r3, [r7, #12]
 80038e8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80038ee:	4619      	mov	r1, r3
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f7ff fdf9 	bl	80034e8 <HAL_UARTEx_RxEventCallback>
 80038f6:	e002      	b.n	80038fe <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f7ff fde1 	bl	80034c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80038fe:	2300      	movs	r3, #0
 8003900:	e002      	b.n	8003908 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003902:	2300      	movs	r3, #0
 8003904:	e000      	b.n	8003908 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003906:	2302      	movs	r3, #2
  }
}
 8003908:	4618      	mov	r0, r3
 800390a:	3730      	adds	r7, #48	; 0x30
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003910:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003914:	b0c0      	sub	sp, #256	; 0x100
 8003916:	af00      	add	r7, sp, #0
 8003918:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800391c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	691b      	ldr	r3, [r3, #16]
 8003924:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800392c:	68d9      	ldr	r1, [r3, #12]
 800392e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	ea40 0301 	orr.w	r3, r0, r1
 8003938:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800393a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800393e:	689a      	ldr	r2, [r3, #8]
 8003940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	431a      	orrs	r2, r3
 8003948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800394c:	695b      	ldr	r3, [r3, #20]
 800394e:	431a      	orrs	r2, r3
 8003950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003954:	69db      	ldr	r3, [r3, #28]
 8003956:	4313      	orrs	r3, r2
 8003958:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800395c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003968:	f021 010c 	bic.w	r1, r1, #12
 800396c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003976:	430b      	orrs	r3, r1
 8003978:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800397a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800398a:	6999      	ldr	r1, [r3, #24]
 800398c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	ea40 0301 	orr.w	r3, r0, r1
 8003996:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	4b8f      	ldr	r3, [pc, #572]	; (8003bdc <UART_SetConfig+0x2cc>)
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d005      	beq.n	80039b0 <UART_SetConfig+0xa0>
 80039a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	4b8d      	ldr	r3, [pc, #564]	; (8003be0 <UART_SetConfig+0x2d0>)
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d104      	bne.n	80039ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80039b0:	f7fe fa80 	bl	8001eb4 <HAL_RCC_GetPCLK2Freq>
 80039b4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80039b8:	e003      	b.n	80039c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80039ba:	f7fe fa67 	bl	8001e8c <HAL_RCC_GetPCLK1Freq>
 80039be:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039c6:	69db      	ldr	r3, [r3, #28]
 80039c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039cc:	f040 810c 	bne.w	8003be8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80039d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039d4:	2200      	movs	r2, #0
 80039d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80039da:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80039de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80039e2:	4622      	mov	r2, r4
 80039e4:	462b      	mov	r3, r5
 80039e6:	1891      	adds	r1, r2, r2
 80039e8:	65b9      	str	r1, [r7, #88]	; 0x58
 80039ea:	415b      	adcs	r3, r3
 80039ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80039f2:	4621      	mov	r1, r4
 80039f4:	eb12 0801 	adds.w	r8, r2, r1
 80039f8:	4629      	mov	r1, r5
 80039fa:	eb43 0901 	adc.w	r9, r3, r1
 80039fe:	f04f 0200 	mov.w	r2, #0
 8003a02:	f04f 0300 	mov.w	r3, #0
 8003a06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a12:	4690      	mov	r8, r2
 8003a14:	4699      	mov	r9, r3
 8003a16:	4623      	mov	r3, r4
 8003a18:	eb18 0303 	adds.w	r3, r8, r3
 8003a1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003a20:	462b      	mov	r3, r5
 8003a22:	eb49 0303 	adc.w	r3, r9, r3
 8003a26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003a2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003a36:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003a3a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003a3e:	460b      	mov	r3, r1
 8003a40:	18db      	adds	r3, r3, r3
 8003a42:	653b      	str	r3, [r7, #80]	; 0x50
 8003a44:	4613      	mov	r3, r2
 8003a46:	eb42 0303 	adc.w	r3, r2, r3
 8003a4a:	657b      	str	r3, [r7, #84]	; 0x54
 8003a4c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003a50:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003a54:	f7fc fc14 	bl	8000280 <__aeabi_uldivmod>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	4b61      	ldr	r3, [pc, #388]	; (8003be4 <UART_SetConfig+0x2d4>)
 8003a5e:	fba3 2302 	umull	r2, r3, r3, r2
 8003a62:	095b      	lsrs	r3, r3, #5
 8003a64:	011c      	lsls	r4, r3, #4
 8003a66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a70:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003a74:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003a78:	4642      	mov	r2, r8
 8003a7a:	464b      	mov	r3, r9
 8003a7c:	1891      	adds	r1, r2, r2
 8003a7e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003a80:	415b      	adcs	r3, r3
 8003a82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a84:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003a88:	4641      	mov	r1, r8
 8003a8a:	eb12 0a01 	adds.w	sl, r2, r1
 8003a8e:	4649      	mov	r1, r9
 8003a90:	eb43 0b01 	adc.w	fp, r3, r1
 8003a94:	f04f 0200 	mov.w	r2, #0
 8003a98:	f04f 0300 	mov.w	r3, #0
 8003a9c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003aa0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003aa4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003aa8:	4692      	mov	sl, r2
 8003aaa:	469b      	mov	fp, r3
 8003aac:	4643      	mov	r3, r8
 8003aae:	eb1a 0303 	adds.w	r3, sl, r3
 8003ab2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ab6:	464b      	mov	r3, r9
 8003ab8:	eb4b 0303 	adc.w	r3, fp, r3
 8003abc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003acc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003ad0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003ad4:	460b      	mov	r3, r1
 8003ad6:	18db      	adds	r3, r3, r3
 8003ad8:	643b      	str	r3, [r7, #64]	; 0x40
 8003ada:	4613      	mov	r3, r2
 8003adc:	eb42 0303 	adc.w	r3, r2, r3
 8003ae0:	647b      	str	r3, [r7, #68]	; 0x44
 8003ae2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003ae6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003aea:	f7fc fbc9 	bl	8000280 <__aeabi_uldivmod>
 8003aee:	4602      	mov	r2, r0
 8003af0:	460b      	mov	r3, r1
 8003af2:	4611      	mov	r1, r2
 8003af4:	4b3b      	ldr	r3, [pc, #236]	; (8003be4 <UART_SetConfig+0x2d4>)
 8003af6:	fba3 2301 	umull	r2, r3, r3, r1
 8003afa:	095b      	lsrs	r3, r3, #5
 8003afc:	2264      	movs	r2, #100	; 0x64
 8003afe:	fb02 f303 	mul.w	r3, r2, r3
 8003b02:	1acb      	subs	r3, r1, r3
 8003b04:	00db      	lsls	r3, r3, #3
 8003b06:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003b0a:	4b36      	ldr	r3, [pc, #216]	; (8003be4 <UART_SetConfig+0x2d4>)
 8003b0c:	fba3 2302 	umull	r2, r3, r3, r2
 8003b10:	095b      	lsrs	r3, r3, #5
 8003b12:	005b      	lsls	r3, r3, #1
 8003b14:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b18:	441c      	add	r4, r3
 8003b1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003b24:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003b28:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003b2c:	4642      	mov	r2, r8
 8003b2e:	464b      	mov	r3, r9
 8003b30:	1891      	adds	r1, r2, r2
 8003b32:	63b9      	str	r1, [r7, #56]	; 0x38
 8003b34:	415b      	adcs	r3, r3
 8003b36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b38:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003b3c:	4641      	mov	r1, r8
 8003b3e:	1851      	adds	r1, r2, r1
 8003b40:	6339      	str	r1, [r7, #48]	; 0x30
 8003b42:	4649      	mov	r1, r9
 8003b44:	414b      	adcs	r3, r1
 8003b46:	637b      	str	r3, [r7, #52]	; 0x34
 8003b48:	f04f 0200 	mov.w	r2, #0
 8003b4c:	f04f 0300 	mov.w	r3, #0
 8003b50:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003b54:	4659      	mov	r1, fp
 8003b56:	00cb      	lsls	r3, r1, #3
 8003b58:	4651      	mov	r1, sl
 8003b5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b5e:	4651      	mov	r1, sl
 8003b60:	00ca      	lsls	r2, r1, #3
 8003b62:	4610      	mov	r0, r2
 8003b64:	4619      	mov	r1, r3
 8003b66:	4603      	mov	r3, r0
 8003b68:	4642      	mov	r2, r8
 8003b6a:	189b      	adds	r3, r3, r2
 8003b6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b70:	464b      	mov	r3, r9
 8003b72:	460a      	mov	r2, r1
 8003b74:	eb42 0303 	adc.w	r3, r2, r3
 8003b78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003b88:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003b8c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003b90:	460b      	mov	r3, r1
 8003b92:	18db      	adds	r3, r3, r3
 8003b94:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b96:	4613      	mov	r3, r2
 8003b98:	eb42 0303 	adc.w	r3, r2, r3
 8003b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ba2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003ba6:	f7fc fb6b 	bl	8000280 <__aeabi_uldivmod>
 8003baa:	4602      	mov	r2, r0
 8003bac:	460b      	mov	r3, r1
 8003bae:	4b0d      	ldr	r3, [pc, #52]	; (8003be4 <UART_SetConfig+0x2d4>)
 8003bb0:	fba3 1302 	umull	r1, r3, r3, r2
 8003bb4:	095b      	lsrs	r3, r3, #5
 8003bb6:	2164      	movs	r1, #100	; 0x64
 8003bb8:	fb01 f303 	mul.w	r3, r1, r3
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	00db      	lsls	r3, r3, #3
 8003bc0:	3332      	adds	r3, #50	; 0x32
 8003bc2:	4a08      	ldr	r2, [pc, #32]	; (8003be4 <UART_SetConfig+0x2d4>)
 8003bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc8:	095b      	lsrs	r3, r3, #5
 8003bca:	f003 0207 	and.w	r2, r3, #7
 8003bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4422      	add	r2, r4
 8003bd6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003bd8:	e106      	b.n	8003de8 <UART_SetConfig+0x4d8>
 8003bda:	bf00      	nop
 8003bdc:	40011000 	.word	0x40011000
 8003be0:	40011400 	.word	0x40011400
 8003be4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003be8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bec:	2200      	movs	r2, #0
 8003bee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003bf2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003bf6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003bfa:	4642      	mov	r2, r8
 8003bfc:	464b      	mov	r3, r9
 8003bfe:	1891      	adds	r1, r2, r2
 8003c00:	6239      	str	r1, [r7, #32]
 8003c02:	415b      	adcs	r3, r3
 8003c04:	627b      	str	r3, [r7, #36]	; 0x24
 8003c06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c0a:	4641      	mov	r1, r8
 8003c0c:	1854      	adds	r4, r2, r1
 8003c0e:	4649      	mov	r1, r9
 8003c10:	eb43 0501 	adc.w	r5, r3, r1
 8003c14:	f04f 0200 	mov.w	r2, #0
 8003c18:	f04f 0300 	mov.w	r3, #0
 8003c1c:	00eb      	lsls	r3, r5, #3
 8003c1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c22:	00e2      	lsls	r2, r4, #3
 8003c24:	4614      	mov	r4, r2
 8003c26:	461d      	mov	r5, r3
 8003c28:	4643      	mov	r3, r8
 8003c2a:	18e3      	adds	r3, r4, r3
 8003c2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003c30:	464b      	mov	r3, r9
 8003c32:	eb45 0303 	adc.w	r3, r5, r3
 8003c36:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003c46:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c4a:	f04f 0200 	mov.w	r2, #0
 8003c4e:	f04f 0300 	mov.w	r3, #0
 8003c52:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003c56:	4629      	mov	r1, r5
 8003c58:	008b      	lsls	r3, r1, #2
 8003c5a:	4621      	mov	r1, r4
 8003c5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c60:	4621      	mov	r1, r4
 8003c62:	008a      	lsls	r2, r1, #2
 8003c64:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003c68:	f7fc fb0a 	bl	8000280 <__aeabi_uldivmod>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	460b      	mov	r3, r1
 8003c70:	4b60      	ldr	r3, [pc, #384]	; (8003df4 <UART_SetConfig+0x4e4>)
 8003c72:	fba3 2302 	umull	r2, r3, r3, r2
 8003c76:	095b      	lsrs	r3, r3, #5
 8003c78:	011c      	lsls	r4, r3, #4
 8003c7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003c84:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003c88:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003c8c:	4642      	mov	r2, r8
 8003c8e:	464b      	mov	r3, r9
 8003c90:	1891      	adds	r1, r2, r2
 8003c92:	61b9      	str	r1, [r7, #24]
 8003c94:	415b      	adcs	r3, r3
 8003c96:	61fb      	str	r3, [r7, #28]
 8003c98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c9c:	4641      	mov	r1, r8
 8003c9e:	1851      	adds	r1, r2, r1
 8003ca0:	6139      	str	r1, [r7, #16]
 8003ca2:	4649      	mov	r1, r9
 8003ca4:	414b      	adcs	r3, r1
 8003ca6:	617b      	str	r3, [r7, #20]
 8003ca8:	f04f 0200 	mov.w	r2, #0
 8003cac:	f04f 0300 	mov.w	r3, #0
 8003cb0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003cb4:	4659      	mov	r1, fp
 8003cb6:	00cb      	lsls	r3, r1, #3
 8003cb8:	4651      	mov	r1, sl
 8003cba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cbe:	4651      	mov	r1, sl
 8003cc0:	00ca      	lsls	r2, r1, #3
 8003cc2:	4610      	mov	r0, r2
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	4642      	mov	r2, r8
 8003cca:	189b      	adds	r3, r3, r2
 8003ccc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003cd0:	464b      	mov	r3, r9
 8003cd2:	460a      	mov	r2, r1
 8003cd4:	eb42 0303 	adc.w	r3, r2, r3
 8003cd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ce6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003ce8:	f04f 0200 	mov.w	r2, #0
 8003cec:	f04f 0300 	mov.w	r3, #0
 8003cf0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003cf4:	4649      	mov	r1, r9
 8003cf6:	008b      	lsls	r3, r1, #2
 8003cf8:	4641      	mov	r1, r8
 8003cfa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cfe:	4641      	mov	r1, r8
 8003d00:	008a      	lsls	r2, r1, #2
 8003d02:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003d06:	f7fc fabb 	bl	8000280 <__aeabi_uldivmod>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	460b      	mov	r3, r1
 8003d0e:	4611      	mov	r1, r2
 8003d10:	4b38      	ldr	r3, [pc, #224]	; (8003df4 <UART_SetConfig+0x4e4>)
 8003d12:	fba3 2301 	umull	r2, r3, r3, r1
 8003d16:	095b      	lsrs	r3, r3, #5
 8003d18:	2264      	movs	r2, #100	; 0x64
 8003d1a:	fb02 f303 	mul.w	r3, r2, r3
 8003d1e:	1acb      	subs	r3, r1, r3
 8003d20:	011b      	lsls	r3, r3, #4
 8003d22:	3332      	adds	r3, #50	; 0x32
 8003d24:	4a33      	ldr	r2, [pc, #204]	; (8003df4 <UART_SetConfig+0x4e4>)
 8003d26:	fba2 2303 	umull	r2, r3, r2, r3
 8003d2a:	095b      	lsrs	r3, r3, #5
 8003d2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d30:	441c      	add	r4, r3
 8003d32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d36:	2200      	movs	r2, #0
 8003d38:	673b      	str	r3, [r7, #112]	; 0x70
 8003d3a:	677a      	str	r2, [r7, #116]	; 0x74
 8003d3c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003d40:	4642      	mov	r2, r8
 8003d42:	464b      	mov	r3, r9
 8003d44:	1891      	adds	r1, r2, r2
 8003d46:	60b9      	str	r1, [r7, #8]
 8003d48:	415b      	adcs	r3, r3
 8003d4a:	60fb      	str	r3, [r7, #12]
 8003d4c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d50:	4641      	mov	r1, r8
 8003d52:	1851      	adds	r1, r2, r1
 8003d54:	6039      	str	r1, [r7, #0]
 8003d56:	4649      	mov	r1, r9
 8003d58:	414b      	adcs	r3, r1
 8003d5a:	607b      	str	r3, [r7, #4]
 8003d5c:	f04f 0200 	mov.w	r2, #0
 8003d60:	f04f 0300 	mov.w	r3, #0
 8003d64:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003d68:	4659      	mov	r1, fp
 8003d6a:	00cb      	lsls	r3, r1, #3
 8003d6c:	4651      	mov	r1, sl
 8003d6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d72:	4651      	mov	r1, sl
 8003d74:	00ca      	lsls	r2, r1, #3
 8003d76:	4610      	mov	r0, r2
 8003d78:	4619      	mov	r1, r3
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	4642      	mov	r2, r8
 8003d7e:	189b      	adds	r3, r3, r2
 8003d80:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d82:	464b      	mov	r3, r9
 8003d84:	460a      	mov	r2, r1
 8003d86:	eb42 0303 	adc.w	r3, r2, r3
 8003d8a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	663b      	str	r3, [r7, #96]	; 0x60
 8003d96:	667a      	str	r2, [r7, #100]	; 0x64
 8003d98:	f04f 0200 	mov.w	r2, #0
 8003d9c:	f04f 0300 	mov.w	r3, #0
 8003da0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003da4:	4649      	mov	r1, r9
 8003da6:	008b      	lsls	r3, r1, #2
 8003da8:	4641      	mov	r1, r8
 8003daa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003dae:	4641      	mov	r1, r8
 8003db0:	008a      	lsls	r2, r1, #2
 8003db2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003db6:	f7fc fa63 	bl	8000280 <__aeabi_uldivmod>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	460b      	mov	r3, r1
 8003dbe:	4b0d      	ldr	r3, [pc, #52]	; (8003df4 <UART_SetConfig+0x4e4>)
 8003dc0:	fba3 1302 	umull	r1, r3, r3, r2
 8003dc4:	095b      	lsrs	r3, r3, #5
 8003dc6:	2164      	movs	r1, #100	; 0x64
 8003dc8:	fb01 f303 	mul.w	r3, r1, r3
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	011b      	lsls	r3, r3, #4
 8003dd0:	3332      	adds	r3, #50	; 0x32
 8003dd2:	4a08      	ldr	r2, [pc, #32]	; (8003df4 <UART_SetConfig+0x4e4>)
 8003dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd8:	095b      	lsrs	r3, r3, #5
 8003dda:	f003 020f 	and.w	r2, r3, #15
 8003dde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4422      	add	r2, r4
 8003de6:	609a      	str	r2, [r3, #8]
}
 8003de8:	bf00      	nop
 8003dea:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003dee:	46bd      	mov	sp, r7
 8003df0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003df4:	51eb851f 	.word	0x51eb851f

08003df8 <std>:
 8003df8:	2300      	movs	r3, #0
 8003dfa:	b510      	push	{r4, lr}
 8003dfc:	4604      	mov	r4, r0
 8003dfe:	e9c0 3300 	strd	r3, r3, [r0]
 8003e02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003e06:	6083      	str	r3, [r0, #8]
 8003e08:	8181      	strh	r1, [r0, #12]
 8003e0a:	6643      	str	r3, [r0, #100]	; 0x64
 8003e0c:	81c2      	strh	r2, [r0, #14]
 8003e0e:	6183      	str	r3, [r0, #24]
 8003e10:	4619      	mov	r1, r3
 8003e12:	2208      	movs	r2, #8
 8003e14:	305c      	adds	r0, #92	; 0x5c
 8003e16:	f000 f906 	bl	8004026 <memset>
 8003e1a:	4b0d      	ldr	r3, [pc, #52]	; (8003e50 <std+0x58>)
 8003e1c:	6263      	str	r3, [r4, #36]	; 0x24
 8003e1e:	4b0d      	ldr	r3, [pc, #52]	; (8003e54 <std+0x5c>)
 8003e20:	62a3      	str	r3, [r4, #40]	; 0x28
 8003e22:	4b0d      	ldr	r3, [pc, #52]	; (8003e58 <std+0x60>)
 8003e24:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003e26:	4b0d      	ldr	r3, [pc, #52]	; (8003e5c <std+0x64>)
 8003e28:	6323      	str	r3, [r4, #48]	; 0x30
 8003e2a:	4b0d      	ldr	r3, [pc, #52]	; (8003e60 <std+0x68>)
 8003e2c:	6224      	str	r4, [r4, #32]
 8003e2e:	429c      	cmp	r4, r3
 8003e30:	d006      	beq.n	8003e40 <std+0x48>
 8003e32:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003e36:	4294      	cmp	r4, r2
 8003e38:	d002      	beq.n	8003e40 <std+0x48>
 8003e3a:	33d0      	adds	r3, #208	; 0xd0
 8003e3c:	429c      	cmp	r4, r3
 8003e3e:	d105      	bne.n	8003e4c <std+0x54>
 8003e40:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003e44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e48:	f000 b966 	b.w	8004118 <__retarget_lock_init_recursive>
 8003e4c:	bd10      	pop	{r4, pc}
 8003e4e:	bf00      	nop
 8003e50:	08003fa1 	.word	0x08003fa1
 8003e54:	08003fc3 	.word	0x08003fc3
 8003e58:	08003ffb 	.word	0x08003ffb
 8003e5c:	0800401f 	.word	0x0800401f
 8003e60:	20000128 	.word	0x20000128

08003e64 <stdio_exit_handler>:
 8003e64:	4a02      	ldr	r2, [pc, #8]	; (8003e70 <stdio_exit_handler+0xc>)
 8003e66:	4903      	ldr	r1, [pc, #12]	; (8003e74 <stdio_exit_handler+0x10>)
 8003e68:	4803      	ldr	r0, [pc, #12]	; (8003e78 <stdio_exit_handler+0x14>)
 8003e6a:	f000 b869 	b.w	8003f40 <_fwalk_sglue>
 8003e6e:	bf00      	nop
 8003e70:	2000000c 	.word	0x2000000c
 8003e74:	080049c5 	.word	0x080049c5
 8003e78:	20000018 	.word	0x20000018

08003e7c <cleanup_stdio>:
 8003e7c:	6841      	ldr	r1, [r0, #4]
 8003e7e:	4b0c      	ldr	r3, [pc, #48]	; (8003eb0 <cleanup_stdio+0x34>)
 8003e80:	4299      	cmp	r1, r3
 8003e82:	b510      	push	{r4, lr}
 8003e84:	4604      	mov	r4, r0
 8003e86:	d001      	beq.n	8003e8c <cleanup_stdio+0x10>
 8003e88:	f000 fd9c 	bl	80049c4 <_fflush_r>
 8003e8c:	68a1      	ldr	r1, [r4, #8]
 8003e8e:	4b09      	ldr	r3, [pc, #36]	; (8003eb4 <cleanup_stdio+0x38>)
 8003e90:	4299      	cmp	r1, r3
 8003e92:	d002      	beq.n	8003e9a <cleanup_stdio+0x1e>
 8003e94:	4620      	mov	r0, r4
 8003e96:	f000 fd95 	bl	80049c4 <_fflush_r>
 8003e9a:	68e1      	ldr	r1, [r4, #12]
 8003e9c:	4b06      	ldr	r3, [pc, #24]	; (8003eb8 <cleanup_stdio+0x3c>)
 8003e9e:	4299      	cmp	r1, r3
 8003ea0:	d004      	beq.n	8003eac <cleanup_stdio+0x30>
 8003ea2:	4620      	mov	r0, r4
 8003ea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ea8:	f000 bd8c 	b.w	80049c4 <_fflush_r>
 8003eac:	bd10      	pop	{r4, pc}
 8003eae:	bf00      	nop
 8003eb0:	20000128 	.word	0x20000128
 8003eb4:	20000190 	.word	0x20000190
 8003eb8:	200001f8 	.word	0x200001f8

08003ebc <global_stdio_init.part.0>:
 8003ebc:	b510      	push	{r4, lr}
 8003ebe:	4b0b      	ldr	r3, [pc, #44]	; (8003eec <global_stdio_init.part.0+0x30>)
 8003ec0:	4c0b      	ldr	r4, [pc, #44]	; (8003ef0 <global_stdio_init.part.0+0x34>)
 8003ec2:	4a0c      	ldr	r2, [pc, #48]	; (8003ef4 <global_stdio_init.part.0+0x38>)
 8003ec4:	601a      	str	r2, [r3, #0]
 8003ec6:	4620      	mov	r0, r4
 8003ec8:	2200      	movs	r2, #0
 8003eca:	2104      	movs	r1, #4
 8003ecc:	f7ff ff94 	bl	8003df8 <std>
 8003ed0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	2109      	movs	r1, #9
 8003ed8:	f7ff ff8e 	bl	8003df8 <std>
 8003edc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003ee0:	2202      	movs	r2, #2
 8003ee2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ee6:	2112      	movs	r1, #18
 8003ee8:	f7ff bf86 	b.w	8003df8 <std>
 8003eec:	20000260 	.word	0x20000260
 8003ef0:	20000128 	.word	0x20000128
 8003ef4:	08003e65 	.word	0x08003e65

08003ef8 <__sfp_lock_acquire>:
 8003ef8:	4801      	ldr	r0, [pc, #4]	; (8003f00 <__sfp_lock_acquire+0x8>)
 8003efa:	f000 b90e 	b.w	800411a <__retarget_lock_acquire_recursive>
 8003efe:	bf00      	nop
 8003f00:	20000269 	.word	0x20000269

08003f04 <__sfp_lock_release>:
 8003f04:	4801      	ldr	r0, [pc, #4]	; (8003f0c <__sfp_lock_release+0x8>)
 8003f06:	f000 b909 	b.w	800411c <__retarget_lock_release_recursive>
 8003f0a:	bf00      	nop
 8003f0c:	20000269 	.word	0x20000269

08003f10 <__sinit>:
 8003f10:	b510      	push	{r4, lr}
 8003f12:	4604      	mov	r4, r0
 8003f14:	f7ff fff0 	bl	8003ef8 <__sfp_lock_acquire>
 8003f18:	6a23      	ldr	r3, [r4, #32]
 8003f1a:	b11b      	cbz	r3, 8003f24 <__sinit+0x14>
 8003f1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f20:	f7ff bff0 	b.w	8003f04 <__sfp_lock_release>
 8003f24:	4b04      	ldr	r3, [pc, #16]	; (8003f38 <__sinit+0x28>)
 8003f26:	6223      	str	r3, [r4, #32]
 8003f28:	4b04      	ldr	r3, [pc, #16]	; (8003f3c <__sinit+0x2c>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d1f5      	bne.n	8003f1c <__sinit+0xc>
 8003f30:	f7ff ffc4 	bl	8003ebc <global_stdio_init.part.0>
 8003f34:	e7f2      	b.n	8003f1c <__sinit+0xc>
 8003f36:	bf00      	nop
 8003f38:	08003e7d 	.word	0x08003e7d
 8003f3c:	20000260 	.word	0x20000260

08003f40 <_fwalk_sglue>:
 8003f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f44:	4607      	mov	r7, r0
 8003f46:	4688      	mov	r8, r1
 8003f48:	4614      	mov	r4, r2
 8003f4a:	2600      	movs	r6, #0
 8003f4c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003f50:	f1b9 0901 	subs.w	r9, r9, #1
 8003f54:	d505      	bpl.n	8003f62 <_fwalk_sglue+0x22>
 8003f56:	6824      	ldr	r4, [r4, #0]
 8003f58:	2c00      	cmp	r4, #0
 8003f5a:	d1f7      	bne.n	8003f4c <_fwalk_sglue+0xc>
 8003f5c:	4630      	mov	r0, r6
 8003f5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f62:	89ab      	ldrh	r3, [r5, #12]
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d907      	bls.n	8003f78 <_fwalk_sglue+0x38>
 8003f68:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003f6c:	3301      	adds	r3, #1
 8003f6e:	d003      	beq.n	8003f78 <_fwalk_sglue+0x38>
 8003f70:	4629      	mov	r1, r5
 8003f72:	4638      	mov	r0, r7
 8003f74:	47c0      	blx	r8
 8003f76:	4306      	orrs	r6, r0
 8003f78:	3568      	adds	r5, #104	; 0x68
 8003f7a:	e7e9      	b.n	8003f50 <_fwalk_sglue+0x10>

08003f7c <iprintf>:
 8003f7c:	b40f      	push	{r0, r1, r2, r3}
 8003f7e:	b507      	push	{r0, r1, r2, lr}
 8003f80:	4906      	ldr	r1, [pc, #24]	; (8003f9c <iprintf+0x20>)
 8003f82:	ab04      	add	r3, sp, #16
 8003f84:	6808      	ldr	r0, [r1, #0]
 8003f86:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f8a:	6881      	ldr	r1, [r0, #8]
 8003f8c:	9301      	str	r3, [sp, #4]
 8003f8e:	f000 f9e9 	bl	8004364 <_vfiprintf_r>
 8003f92:	b003      	add	sp, #12
 8003f94:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f98:	b004      	add	sp, #16
 8003f9a:	4770      	bx	lr
 8003f9c:	20000064 	.word	0x20000064

08003fa0 <__sread>:
 8003fa0:	b510      	push	{r4, lr}
 8003fa2:	460c      	mov	r4, r1
 8003fa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fa8:	f000 f868 	bl	800407c <_read_r>
 8003fac:	2800      	cmp	r0, #0
 8003fae:	bfab      	itete	ge
 8003fb0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003fb2:	89a3      	ldrhlt	r3, [r4, #12]
 8003fb4:	181b      	addge	r3, r3, r0
 8003fb6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003fba:	bfac      	ite	ge
 8003fbc:	6563      	strge	r3, [r4, #84]	; 0x54
 8003fbe:	81a3      	strhlt	r3, [r4, #12]
 8003fc0:	bd10      	pop	{r4, pc}

08003fc2 <__swrite>:
 8003fc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fc6:	461f      	mov	r7, r3
 8003fc8:	898b      	ldrh	r3, [r1, #12]
 8003fca:	05db      	lsls	r3, r3, #23
 8003fcc:	4605      	mov	r5, r0
 8003fce:	460c      	mov	r4, r1
 8003fd0:	4616      	mov	r6, r2
 8003fd2:	d505      	bpl.n	8003fe0 <__swrite+0x1e>
 8003fd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fd8:	2302      	movs	r3, #2
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f000 f83c 	bl	8004058 <_lseek_r>
 8003fe0:	89a3      	ldrh	r3, [r4, #12]
 8003fe2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003fe6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003fea:	81a3      	strh	r3, [r4, #12]
 8003fec:	4632      	mov	r2, r6
 8003fee:	463b      	mov	r3, r7
 8003ff0:	4628      	mov	r0, r5
 8003ff2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ff6:	f000 b853 	b.w	80040a0 <_write_r>

08003ffa <__sseek>:
 8003ffa:	b510      	push	{r4, lr}
 8003ffc:	460c      	mov	r4, r1
 8003ffe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004002:	f000 f829 	bl	8004058 <_lseek_r>
 8004006:	1c43      	adds	r3, r0, #1
 8004008:	89a3      	ldrh	r3, [r4, #12]
 800400a:	bf15      	itete	ne
 800400c:	6560      	strne	r0, [r4, #84]	; 0x54
 800400e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004012:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004016:	81a3      	strheq	r3, [r4, #12]
 8004018:	bf18      	it	ne
 800401a:	81a3      	strhne	r3, [r4, #12]
 800401c:	bd10      	pop	{r4, pc}

0800401e <__sclose>:
 800401e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004022:	f000 b809 	b.w	8004038 <_close_r>

08004026 <memset>:
 8004026:	4402      	add	r2, r0
 8004028:	4603      	mov	r3, r0
 800402a:	4293      	cmp	r3, r2
 800402c:	d100      	bne.n	8004030 <memset+0xa>
 800402e:	4770      	bx	lr
 8004030:	f803 1b01 	strb.w	r1, [r3], #1
 8004034:	e7f9      	b.n	800402a <memset+0x4>
	...

08004038 <_close_r>:
 8004038:	b538      	push	{r3, r4, r5, lr}
 800403a:	4d06      	ldr	r5, [pc, #24]	; (8004054 <_close_r+0x1c>)
 800403c:	2300      	movs	r3, #0
 800403e:	4604      	mov	r4, r0
 8004040:	4608      	mov	r0, r1
 8004042:	602b      	str	r3, [r5, #0]
 8004044:	f7fc fcf9 	bl	8000a3a <_close>
 8004048:	1c43      	adds	r3, r0, #1
 800404a:	d102      	bne.n	8004052 <_close_r+0x1a>
 800404c:	682b      	ldr	r3, [r5, #0]
 800404e:	b103      	cbz	r3, 8004052 <_close_r+0x1a>
 8004050:	6023      	str	r3, [r4, #0]
 8004052:	bd38      	pop	{r3, r4, r5, pc}
 8004054:	20000264 	.word	0x20000264

08004058 <_lseek_r>:
 8004058:	b538      	push	{r3, r4, r5, lr}
 800405a:	4d07      	ldr	r5, [pc, #28]	; (8004078 <_lseek_r+0x20>)
 800405c:	4604      	mov	r4, r0
 800405e:	4608      	mov	r0, r1
 8004060:	4611      	mov	r1, r2
 8004062:	2200      	movs	r2, #0
 8004064:	602a      	str	r2, [r5, #0]
 8004066:	461a      	mov	r2, r3
 8004068:	f7fc fd0e 	bl	8000a88 <_lseek>
 800406c:	1c43      	adds	r3, r0, #1
 800406e:	d102      	bne.n	8004076 <_lseek_r+0x1e>
 8004070:	682b      	ldr	r3, [r5, #0]
 8004072:	b103      	cbz	r3, 8004076 <_lseek_r+0x1e>
 8004074:	6023      	str	r3, [r4, #0]
 8004076:	bd38      	pop	{r3, r4, r5, pc}
 8004078:	20000264 	.word	0x20000264

0800407c <_read_r>:
 800407c:	b538      	push	{r3, r4, r5, lr}
 800407e:	4d07      	ldr	r5, [pc, #28]	; (800409c <_read_r+0x20>)
 8004080:	4604      	mov	r4, r0
 8004082:	4608      	mov	r0, r1
 8004084:	4611      	mov	r1, r2
 8004086:	2200      	movs	r2, #0
 8004088:	602a      	str	r2, [r5, #0]
 800408a:	461a      	mov	r2, r3
 800408c:	f7fc fc9c 	bl	80009c8 <_read>
 8004090:	1c43      	adds	r3, r0, #1
 8004092:	d102      	bne.n	800409a <_read_r+0x1e>
 8004094:	682b      	ldr	r3, [r5, #0]
 8004096:	b103      	cbz	r3, 800409a <_read_r+0x1e>
 8004098:	6023      	str	r3, [r4, #0]
 800409a:	bd38      	pop	{r3, r4, r5, pc}
 800409c:	20000264 	.word	0x20000264

080040a0 <_write_r>:
 80040a0:	b538      	push	{r3, r4, r5, lr}
 80040a2:	4d07      	ldr	r5, [pc, #28]	; (80040c0 <_write_r+0x20>)
 80040a4:	4604      	mov	r4, r0
 80040a6:	4608      	mov	r0, r1
 80040a8:	4611      	mov	r1, r2
 80040aa:	2200      	movs	r2, #0
 80040ac:	602a      	str	r2, [r5, #0]
 80040ae:	461a      	mov	r2, r3
 80040b0:	f7fc fca7 	bl	8000a02 <_write>
 80040b4:	1c43      	adds	r3, r0, #1
 80040b6:	d102      	bne.n	80040be <_write_r+0x1e>
 80040b8:	682b      	ldr	r3, [r5, #0]
 80040ba:	b103      	cbz	r3, 80040be <_write_r+0x1e>
 80040bc:	6023      	str	r3, [r4, #0]
 80040be:	bd38      	pop	{r3, r4, r5, pc}
 80040c0:	20000264 	.word	0x20000264

080040c4 <__errno>:
 80040c4:	4b01      	ldr	r3, [pc, #4]	; (80040cc <__errno+0x8>)
 80040c6:	6818      	ldr	r0, [r3, #0]
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	20000064 	.word	0x20000064

080040d0 <__libc_init_array>:
 80040d0:	b570      	push	{r4, r5, r6, lr}
 80040d2:	4d0d      	ldr	r5, [pc, #52]	; (8004108 <__libc_init_array+0x38>)
 80040d4:	4c0d      	ldr	r4, [pc, #52]	; (800410c <__libc_init_array+0x3c>)
 80040d6:	1b64      	subs	r4, r4, r5
 80040d8:	10a4      	asrs	r4, r4, #2
 80040da:	2600      	movs	r6, #0
 80040dc:	42a6      	cmp	r6, r4
 80040de:	d109      	bne.n	80040f4 <__libc_init_array+0x24>
 80040e0:	4d0b      	ldr	r5, [pc, #44]	; (8004110 <__libc_init_array+0x40>)
 80040e2:	4c0c      	ldr	r4, [pc, #48]	; (8004114 <__libc_init_array+0x44>)
 80040e4:	f000 fdc0 	bl	8004c68 <_init>
 80040e8:	1b64      	subs	r4, r4, r5
 80040ea:	10a4      	asrs	r4, r4, #2
 80040ec:	2600      	movs	r6, #0
 80040ee:	42a6      	cmp	r6, r4
 80040f0:	d105      	bne.n	80040fe <__libc_init_array+0x2e>
 80040f2:	bd70      	pop	{r4, r5, r6, pc}
 80040f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80040f8:	4798      	blx	r3
 80040fa:	3601      	adds	r6, #1
 80040fc:	e7ee      	b.n	80040dc <__libc_init_array+0xc>
 80040fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004102:	4798      	blx	r3
 8004104:	3601      	adds	r6, #1
 8004106:	e7f2      	b.n	80040ee <__libc_init_array+0x1e>
 8004108:	08004cdc 	.word	0x08004cdc
 800410c:	08004cdc 	.word	0x08004cdc
 8004110:	08004cdc 	.word	0x08004cdc
 8004114:	08004ce0 	.word	0x08004ce0

08004118 <__retarget_lock_init_recursive>:
 8004118:	4770      	bx	lr

0800411a <__retarget_lock_acquire_recursive>:
 800411a:	4770      	bx	lr

0800411c <__retarget_lock_release_recursive>:
 800411c:	4770      	bx	lr
	...

08004120 <_free_r>:
 8004120:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004122:	2900      	cmp	r1, #0
 8004124:	d044      	beq.n	80041b0 <_free_r+0x90>
 8004126:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800412a:	9001      	str	r0, [sp, #4]
 800412c:	2b00      	cmp	r3, #0
 800412e:	f1a1 0404 	sub.w	r4, r1, #4
 8004132:	bfb8      	it	lt
 8004134:	18e4      	addlt	r4, r4, r3
 8004136:	f000 f8df 	bl	80042f8 <__malloc_lock>
 800413a:	4a1e      	ldr	r2, [pc, #120]	; (80041b4 <_free_r+0x94>)
 800413c:	9801      	ldr	r0, [sp, #4]
 800413e:	6813      	ldr	r3, [r2, #0]
 8004140:	b933      	cbnz	r3, 8004150 <_free_r+0x30>
 8004142:	6063      	str	r3, [r4, #4]
 8004144:	6014      	str	r4, [r2, #0]
 8004146:	b003      	add	sp, #12
 8004148:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800414c:	f000 b8da 	b.w	8004304 <__malloc_unlock>
 8004150:	42a3      	cmp	r3, r4
 8004152:	d908      	bls.n	8004166 <_free_r+0x46>
 8004154:	6825      	ldr	r5, [r4, #0]
 8004156:	1961      	adds	r1, r4, r5
 8004158:	428b      	cmp	r3, r1
 800415a:	bf01      	itttt	eq
 800415c:	6819      	ldreq	r1, [r3, #0]
 800415e:	685b      	ldreq	r3, [r3, #4]
 8004160:	1949      	addeq	r1, r1, r5
 8004162:	6021      	streq	r1, [r4, #0]
 8004164:	e7ed      	b.n	8004142 <_free_r+0x22>
 8004166:	461a      	mov	r2, r3
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	b10b      	cbz	r3, 8004170 <_free_r+0x50>
 800416c:	42a3      	cmp	r3, r4
 800416e:	d9fa      	bls.n	8004166 <_free_r+0x46>
 8004170:	6811      	ldr	r1, [r2, #0]
 8004172:	1855      	adds	r5, r2, r1
 8004174:	42a5      	cmp	r5, r4
 8004176:	d10b      	bne.n	8004190 <_free_r+0x70>
 8004178:	6824      	ldr	r4, [r4, #0]
 800417a:	4421      	add	r1, r4
 800417c:	1854      	adds	r4, r2, r1
 800417e:	42a3      	cmp	r3, r4
 8004180:	6011      	str	r1, [r2, #0]
 8004182:	d1e0      	bne.n	8004146 <_free_r+0x26>
 8004184:	681c      	ldr	r4, [r3, #0]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	6053      	str	r3, [r2, #4]
 800418a:	440c      	add	r4, r1
 800418c:	6014      	str	r4, [r2, #0]
 800418e:	e7da      	b.n	8004146 <_free_r+0x26>
 8004190:	d902      	bls.n	8004198 <_free_r+0x78>
 8004192:	230c      	movs	r3, #12
 8004194:	6003      	str	r3, [r0, #0]
 8004196:	e7d6      	b.n	8004146 <_free_r+0x26>
 8004198:	6825      	ldr	r5, [r4, #0]
 800419a:	1961      	adds	r1, r4, r5
 800419c:	428b      	cmp	r3, r1
 800419e:	bf04      	itt	eq
 80041a0:	6819      	ldreq	r1, [r3, #0]
 80041a2:	685b      	ldreq	r3, [r3, #4]
 80041a4:	6063      	str	r3, [r4, #4]
 80041a6:	bf04      	itt	eq
 80041a8:	1949      	addeq	r1, r1, r5
 80041aa:	6021      	streq	r1, [r4, #0]
 80041ac:	6054      	str	r4, [r2, #4]
 80041ae:	e7ca      	b.n	8004146 <_free_r+0x26>
 80041b0:	b003      	add	sp, #12
 80041b2:	bd30      	pop	{r4, r5, pc}
 80041b4:	2000026c 	.word	0x2000026c

080041b8 <sbrk_aligned>:
 80041b8:	b570      	push	{r4, r5, r6, lr}
 80041ba:	4e0e      	ldr	r6, [pc, #56]	; (80041f4 <sbrk_aligned+0x3c>)
 80041bc:	460c      	mov	r4, r1
 80041be:	6831      	ldr	r1, [r6, #0]
 80041c0:	4605      	mov	r5, r0
 80041c2:	b911      	cbnz	r1, 80041ca <sbrk_aligned+0x12>
 80041c4:	f000 fcbc 	bl	8004b40 <_sbrk_r>
 80041c8:	6030      	str	r0, [r6, #0]
 80041ca:	4621      	mov	r1, r4
 80041cc:	4628      	mov	r0, r5
 80041ce:	f000 fcb7 	bl	8004b40 <_sbrk_r>
 80041d2:	1c43      	adds	r3, r0, #1
 80041d4:	d00a      	beq.n	80041ec <sbrk_aligned+0x34>
 80041d6:	1cc4      	adds	r4, r0, #3
 80041d8:	f024 0403 	bic.w	r4, r4, #3
 80041dc:	42a0      	cmp	r0, r4
 80041de:	d007      	beq.n	80041f0 <sbrk_aligned+0x38>
 80041e0:	1a21      	subs	r1, r4, r0
 80041e2:	4628      	mov	r0, r5
 80041e4:	f000 fcac 	bl	8004b40 <_sbrk_r>
 80041e8:	3001      	adds	r0, #1
 80041ea:	d101      	bne.n	80041f0 <sbrk_aligned+0x38>
 80041ec:	f04f 34ff 	mov.w	r4, #4294967295
 80041f0:	4620      	mov	r0, r4
 80041f2:	bd70      	pop	{r4, r5, r6, pc}
 80041f4:	20000270 	.word	0x20000270

080041f8 <_malloc_r>:
 80041f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041fc:	1ccd      	adds	r5, r1, #3
 80041fe:	f025 0503 	bic.w	r5, r5, #3
 8004202:	3508      	adds	r5, #8
 8004204:	2d0c      	cmp	r5, #12
 8004206:	bf38      	it	cc
 8004208:	250c      	movcc	r5, #12
 800420a:	2d00      	cmp	r5, #0
 800420c:	4607      	mov	r7, r0
 800420e:	db01      	blt.n	8004214 <_malloc_r+0x1c>
 8004210:	42a9      	cmp	r1, r5
 8004212:	d905      	bls.n	8004220 <_malloc_r+0x28>
 8004214:	230c      	movs	r3, #12
 8004216:	603b      	str	r3, [r7, #0]
 8004218:	2600      	movs	r6, #0
 800421a:	4630      	mov	r0, r6
 800421c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004220:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80042f4 <_malloc_r+0xfc>
 8004224:	f000 f868 	bl	80042f8 <__malloc_lock>
 8004228:	f8d8 3000 	ldr.w	r3, [r8]
 800422c:	461c      	mov	r4, r3
 800422e:	bb5c      	cbnz	r4, 8004288 <_malloc_r+0x90>
 8004230:	4629      	mov	r1, r5
 8004232:	4638      	mov	r0, r7
 8004234:	f7ff ffc0 	bl	80041b8 <sbrk_aligned>
 8004238:	1c43      	adds	r3, r0, #1
 800423a:	4604      	mov	r4, r0
 800423c:	d155      	bne.n	80042ea <_malloc_r+0xf2>
 800423e:	f8d8 4000 	ldr.w	r4, [r8]
 8004242:	4626      	mov	r6, r4
 8004244:	2e00      	cmp	r6, #0
 8004246:	d145      	bne.n	80042d4 <_malloc_r+0xdc>
 8004248:	2c00      	cmp	r4, #0
 800424a:	d048      	beq.n	80042de <_malloc_r+0xe6>
 800424c:	6823      	ldr	r3, [r4, #0]
 800424e:	4631      	mov	r1, r6
 8004250:	4638      	mov	r0, r7
 8004252:	eb04 0903 	add.w	r9, r4, r3
 8004256:	f000 fc73 	bl	8004b40 <_sbrk_r>
 800425a:	4581      	cmp	r9, r0
 800425c:	d13f      	bne.n	80042de <_malloc_r+0xe6>
 800425e:	6821      	ldr	r1, [r4, #0]
 8004260:	1a6d      	subs	r5, r5, r1
 8004262:	4629      	mov	r1, r5
 8004264:	4638      	mov	r0, r7
 8004266:	f7ff ffa7 	bl	80041b8 <sbrk_aligned>
 800426a:	3001      	adds	r0, #1
 800426c:	d037      	beq.n	80042de <_malloc_r+0xe6>
 800426e:	6823      	ldr	r3, [r4, #0]
 8004270:	442b      	add	r3, r5
 8004272:	6023      	str	r3, [r4, #0]
 8004274:	f8d8 3000 	ldr.w	r3, [r8]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d038      	beq.n	80042ee <_malloc_r+0xf6>
 800427c:	685a      	ldr	r2, [r3, #4]
 800427e:	42a2      	cmp	r2, r4
 8004280:	d12b      	bne.n	80042da <_malloc_r+0xe2>
 8004282:	2200      	movs	r2, #0
 8004284:	605a      	str	r2, [r3, #4]
 8004286:	e00f      	b.n	80042a8 <_malloc_r+0xb0>
 8004288:	6822      	ldr	r2, [r4, #0]
 800428a:	1b52      	subs	r2, r2, r5
 800428c:	d41f      	bmi.n	80042ce <_malloc_r+0xd6>
 800428e:	2a0b      	cmp	r2, #11
 8004290:	d917      	bls.n	80042c2 <_malloc_r+0xca>
 8004292:	1961      	adds	r1, r4, r5
 8004294:	42a3      	cmp	r3, r4
 8004296:	6025      	str	r5, [r4, #0]
 8004298:	bf18      	it	ne
 800429a:	6059      	strne	r1, [r3, #4]
 800429c:	6863      	ldr	r3, [r4, #4]
 800429e:	bf08      	it	eq
 80042a0:	f8c8 1000 	streq.w	r1, [r8]
 80042a4:	5162      	str	r2, [r4, r5]
 80042a6:	604b      	str	r3, [r1, #4]
 80042a8:	4638      	mov	r0, r7
 80042aa:	f104 060b 	add.w	r6, r4, #11
 80042ae:	f000 f829 	bl	8004304 <__malloc_unlock>
 80042b2:	f026 0607 	bic.w	r6, r6, #7
 80042b6:	1d23      	adds	r3, r4, #4
 80042b8:	1af2      	subs	r2, r6, r3
 80042ba:	d0ae      	beq.n	800421a <_malloc_r+0x22>
 80042bc:	1b9b      	subs	r3, r3, r6
 80042be:	50a3      	str	r3, [r4, r2]
 80042c0:	e7ab      	b.n	800421a <_malloc_r+0x22>
 80042c2:	42a3      	cmp	r3, r4
 80042c4:	6862      	ldr	r2, [r4, #4]
 80042c6:	d1dd      	bne.n	8004284 <_malloc_r+0x8c>
 80042c8:	f8c8 2000 	str.w	r2, [r8]
 80042cc:	e7ec      	b.n	80042a8 <_malloc_r+0xb0>
 80042ce:	4623      	mov	r3, r4
 80042d0:	6864      	ldr	r4, [r4, #4]
 80042d2:	e7ac      	b.n	800422e <_malloc_r+0x36>
 80042d4:	4634      	mov	r4, r6
 80042d6:	6876      	ldr	r6, [r6, #4]
 80042d8:	e7b4      	b.n	8004244 <_malloc_r+0x4c>
 80042da:	4613      	mov	r3, r2
 80042dc:	e7cc      	b.n	8004278 <_malloc_r+0x80>
 80042de:	230c      	movs	r3, #12
 80042e0:	603b      	str	r3, [r7, #0]
 80042e2:	4638      	mov	r0, r7
 80042e4:	f000 f80e 	bl	8004304 <__malloc_unlock>
 80042e8:	e797      	b.n	800421a <_malloc_r+0x22>
 80042ea:	6025      	str	r5, [r4, #0]
 80042ec:	e7dc      	b.n	80042a8 <_malloc_r+0xb0>
 80042ee:	605b      	str	r3, [r3, #4]
 80042f0:	deff      	udf	#255	; 0xff
 80042f2:	bf00      	nop
 80042f4:	2000026c 	.word	0x2000026c

080042f8 <__malloc_lock>:
 80042f8:	4801      	ldr	r0, [pc, #4]	; (8004300 <__malloc_lock+0x8>)
 80042fa:	f7ff bf0e 	b.w	800411a <__retarget_lock_acquire_recursive>
 80042fe:	bf00      	nop
 8004300:	20000268 	.word	0x20000268

08004304 <__malloc_unlock>:
 8004304:	4801      	ldr	r0, [pc, #4]	; (800430c <__malloc_unlock+0x8>)
 8004306:	f7ff bf09 	b.w	800411c <__retarget_lock_release_recursive>
 800430a:	bf00      	nop
 800430c:	20000268 	.word	0x20000268

08004310 <__sfputc_r>:
 8004310:	6893      	ldr	r3, [r2, #8]
 8004312:	3b01      	subs	r3, #1
 8004314:	2b00      	cmp	r3, #0
 8004316:	b410      	push	{r4}
 8004318:	6093      	str	r3, [r2, #8]
 800431a:	da08      	bge.n	800432e <__sfputc_r+0x1e>
 800431c:	6994      	ldr	r4, [r2, #24]
 800431e:	42a3      	cmp	r3, r4
 8004320:	db01      	blt.n	8004326 <__sfputc_r+0x16>
 8004322:	290a      	cmp	r1, #10
 8004324:	d103      	bne.n	800432e <__sfputc_r+0x1e>
 8004326:	f85d 4b04 	ldr.w	r4, [sp], #4
 800432a:	f000 bb73 	b.w	8004a14 <__swbuf_r>
 800432e:	6813      	ldr	r3, [r2, #0]
 8004330:	1c58      	adds	r0, r3, #1
 8004332:	6010      	str	r0, [r2, #0]
 8004334:	7019      	strb	r1, [r3, #0]
 8004336:	4608      	mov	r0, r1
 8004338:	f85d 4b04 	ldr.w	r4, [sp], #4
 800433c:	4770      	bx	lr

0800433e <__sfputs_r>:
 800433e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004340:	4606      	mov	r6, r0
 8004342:	460f      	mov	r7, r1
 8004344:	4614      	mov	r4, r2
 8004346:	18d5      	adds	r5, r2, r3
 8004348:	42ac      	cmp	r4, r5
 800434a:	d101      	bne.n	8004350 <__sfputs_r+0x12>
 800434c:	2000      	movs	r0, #0
 800434e:	e007      	b.n	8004360 <__sfputs_r+0x22>
 8004350:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004354:	463a      	mov	r2, r7
 8004356:	4630      	mov	r0, r6
 8004358:	f7ff ffda 	bl	8004310 <__sfputc_r>
 800435c:	1c43      	adds	r3, r0, #1
 800435e:	d1f3      	bne.n	8004348 <__sfputs_r+0xa>
 8004360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004364 <_vfiprintf_r>:
 8004364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004368:	460d      	mov	r5, r1
 800436a:	b09d      	sub	sp, #116	; 0x74
 800436c:	4614      	mov	r4, r2
 800436e:	4698      	mov	r8, r3
 8004370:	4606      	mov	r6, r0
 8004372:	b118      	cbz	r0, 800437c <_vfiprintf_r+0x18>
 8004374:	6a03      	ldr	r3, [r0, #32]
 8004376:	b90b      	cbnz	r3, 800437c <_vfiprintf_r+0x18>
 8004378:	f7ff fdca 	bl	8003f10 <__sinit>
 800437c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800437e:	07d9      	lsls	r1, r3, #31
 8004380:	d405      	bmi.n	800438e <_vfiprintf_r+0x2a>
 8004382:	89ab      	ldrh	r3, [r5, #12]
 8004384:	059a      	lsls	r2, r3, #22
 8004386:	d402      	bmi.n	800438e <_vfiprintf_r+0x2a>
 8004388:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800438a:	f7ff fec6 	bl	800411a <__retarget_lock_acquire_recursive>
 800438e:	89ab      	ldrh	r3, [r5, #12]
 8004390:	071b      	lsls	r3, r3, #28
 8004392:	d501      	bpl.n	8004398 <_vfiprintf_r+0x34>
 8004394:	692b      	ldr	r3, [r5, #16]
 8004396:	b99b      	cbnz	r3, 80043c0 <_vfiprintf_r+0x5c>
 8004398:	4629      	mov	r1, r5
 800439a:	4630      	mov	r0, r6
 800439c:	f000 fb78 	bl	8004a90 <__swsetup_r>
 80043a0:	b170      	cbz	r0, 80043c0 <_vfiprintf_r+0x5c>
 80043a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80043a4:	07dc      	lsls	r4, r3, #31
 80043a6:	d504      	bpl.n	80043b2 <_vfiprintf_r+0x4e>
 80043a8:	f04f 30ff 	mov.w	r0, #4294967295
 80043ac:	b01d      	add	sp, #116	; 0x74
 80043ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043b2:	89ab      	ldrh	r3, [r5, #12]
 80043b4:	0598      	lsls	r0, r3, #22
 80043b6:	d4f7      	bmi.n	80043a8 <_vfiprintf_r+0x44>
 80043b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80043ba:	f7ff feaf 	bl	800411c <__retarget_lock_release_recursive>
 80043be:	e7f3      	b.n	80043a8 <_vfiprintf_r+0x44>
 80043c0:	2300      	movs	r3, #0
 80043c2:	9309      	str	r3, [sp, #36]	; 0x24
 80043c4:	2320      	movs	r3, #32
 80043c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80043ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80043ce:	2330      	movs	r3, #48	; 0x30
 80043d0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004584 <_vfiprintf_r+0x220>
 80043d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80043d8:	f04f 0901 	mov.w	r9, #1
 80043dc:	4623      	mov	r3, r4
 80043de:	469a      	mov	sl, r3
 80043e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80043e4:	b10a      	cbz	r2, 80043ea <_vfiprintf_r+0x86>
 80043e6:	2a25      	cmp	r2, #37	; 0x25
 80043e8:	d1f9      	bne.n	80043de <_vfiprintf_r+0x7a>
 80043ea:	ebba 0b04 	subs.w	fp, sl, r4
 80043ee:	d00b      	beq.n	8004408 <_vfiprintf_r+0xa4>
 80043f0:	465b      	mov	r3, fp
 80043f2:	4622      	mov	r2, r4
 80043f4:	4629      	mov	r1, r5
 80043f6:	4630      	mov	r0, r6
 80043f8:	f7ff ffa1 	bl	800433e <__sfputs_r>
 80043fc:	3001      	adds	r0, #1
 80043fe:	f000 80a9 	beq.w	8004554 <_vfiprintf_r+0x1f0>
 8004402:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004404:	445a      	add	r2, fp
 8004406:	9209      	str	r2, [sp, #36]	; 0x24
 8004408:	f89a 3000 	ldrb.w	r3, [sl]
 800440c:	2b00      	cmp	r3, #0
 800440e:	f000 80a1 	beq.w	8004554 <_vfiprintf_r+0x1f0>
 8004412:	2300      	movs	r3, #0
 8004414:	f04f 32ff 	mov.w	r2, #4294967295
 8004418:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800441c:	f10a 0a01 	add.w	sl, sl, #1
 8004420:	9304      	str	r3, [sp, #16]
 8004422:	9307      	str	r3, [sp, #28]
 8004424:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004428:	931a      	str	r3, [sp, #104]	; 0x68
 800442a:	4654      	mov	r4, sl
 800442c:	2205      	movs	r2, #5
 800442e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004432:	4854      	ldr	r0, [pc, #336]	; (8004584 <_vfiprintf_r+0x220>)
 8004434:	f7fb fed4 	bl	80001e0 <memchr>
 8004438:	9a04      	ldr	r2, [sp, #16]
 800443a:	b9d8      	cbnz	r0, 8004474 <_vfiprintf_r+0x110>
 800443c:	06d1      	lsls	r1, r2, #27
 800443e:	bf44      	itt	mi
 8004440:	2320      	movmi	r3, #32
 8004442:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004446:	0713      	lsls	r3, r2, #28
 8004448:	bf44      	itt	mi
 800444a:	232b      	movmi	r3, #43	; 0x2b
 800444c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004450:	f89a 3000 	ldrb.w	r3, [sl]
 8004454:	2b2a      	cmp	r3, #42	; 0x2a
 8004456:	d015      	beq.n	8004484 <_vfiprintf_r+0x120>
 8004458:	9a07      	ldr	r2, [sp, #28]
 800445a:	4654      	mov	r4, sl
 800445c:	2000      	movs	r0, #0
 800445e:	f04f 0c0a 	mov.w	ip, #10
 8004462:	4621      	mov	r1, r4
 8004464:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004468:	3b30      	subs	r3, #48	; 0x30
 800446a:	2b09      	cmp	r3, #9
 800446c:	d94d      	bls.n	800450a <_vfiprintf_r+0x1a6>
 800446e:	b1b0      	cbz	r0, 800449e <_vfiprintf_r+0x13a>
 8004470:	9207      	str	r2, [sp, #28]
 8004472:	e014      	b.n	800449e <_vfiprintf_r+0x13a>
 8004474:	eba0 0308 	sub.w	r3, r0, r8
 8004478:	fa09 f303 	lsl.w	r3, r9, r3
 800447c:	4313      	orrs	r3, r2
 800447e:	9304      	str	r3, [sp, #16]
 8004480:	46a2      	mov	sl, r4
 8004482:	e7d2      	b.n	800442a <_vfiprintf_r+0xc6>
 8004484:	9b03      	ldr	r3, [sp, #12]
 8004486:	1d19      	adds	r1, r3, #4
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	9103      	str	r1, [sp, #12]
 800448c:	2b00      	cmp	r3, #0
 800448e:	bfbb      	ittet	lt
 8004490:	425b      	neglt	r3, r3
 8004492:	f042 0202 	orrlt.w	r2, r2, #2
 8004496:	9307      	strge	r3, [sp, #28]
 8004498:	9307      	strlt	r3, [sp, #28]
 800449a:	bfb8      	it	lt
 800449c:	9204      	strlt	r2, [sp, #16]
 800449e:	7823      	ldrb	r3, [r4, #0]
 80044a0:	2b2e      	cmp	r3, #46	; 0x2e
 80044a2:	d10c      	bne.n	80044be <_vfiprintf_r+0x15a>
 80044a4:	7863      	ldrb	r3, [r4, #1]
 80044a6:	2b2a      	cmp	r3, #42	; 0x2a
 80044a8:	d134      	bne.n	8004514 <_vfiprintf_r+0x1b0>
 80044aa:	9b03      	ldr	r3, [sp, #12]
 80044ac:	1d1a      	adds	r2, r3, #4
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	9203      	str	r2, [sp, #12]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	bfb8      	it	lt
 80044b6:	f04f 33ff 	movlt.w	r3, #4294967295
 80044ba:	3402      	adds	r4, #2
 80044bc:	9305      	str	r3, [sp, #20]
 80044be:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004594 <_vfiprintf_r+0x230>
 80044c2:	7821      	ldrb	r1, [r4, #0]
 80044c4:	2203      	movs	r2, #3
 80044c6:	4650      	mov	r0, sl
 80044c8:	f7fb fe8a 	bl	80001e0 <memchr>
 80044cc:	b138      	cbz	r0, 80044de <_vfiprintf_r+0x17a>
 80044ce:	9b04      	ldr	r3, [sp, #16]
 80044d0:	eba0 000a 	sub.w	r0, r0, sl
 80044d4:	2240      	movs	r2, #64	; 0x40
 80044d6:	4082      	lsls	r2, r0
 80044d8:	4313      	orrs	r3, r2
 80044da:	3401      	adds	r4, #1
 80044dc:	9304      	str	r3, [sp, #16]
 80044de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044e2:	4829      	ldr	r0, [pc, #164]	; (8004588 <_vfiprintf_r+0x224>)
 80044e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80044e8:	2206      	movs	r2, #6
 80044ea:	f7fb fe79 	bl	80001e0 <memchr>
 80044ee:	2800      	cmp	r0, #0
 80044f0:	d03f      	beq.n	8004572 <_vfiprintf_r+0x20e>
 80044f2:	4b26      	ldr	r3, [pc, #152]	; (800458c <_vfiprintf_r+0x228>)
 80044f4:	bb1b      	cbnz	r3, 800453e <_vfiprintf_r+0x1da>
 80044f6:	9b03      	ldr	r3, [sp, #12]
 80044f8:	3307      	adds	r3, #7
 80044fa:	f023 0307 	bic.w	r3, r3, #7
 80044fe:	3308      	adds	r3, #8
 8004500:	9303      	str	r3, [sp, #12]
 8004502:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004504:	443b      	add	r3, r7
 8004506:	9309      	str	r3, [sp, #36]	; 0x24
 8004508:	e768      	b.n	80043dc <_vfiprintf_r+0x78>
 800450a:	fb0c 3202 	mla	r2, ip, r2, r3
 800450e:	460c      	mov	r4, r1
 8004510:	2001      	movs	r0, #1
 8004512:	e7a6      	b.n	8004462 <_vfiprintf_r+0xfe>
 8004514:	2300      	movs	r3, #0
 8004516:	3401      	adds	r4, #1
 8004518:	9305      	str	r3, [sp, #20]
 800451a:	4619      	mov	r1, r3
 800451c:	f04f 0c0a 	mov.w	ip, #10
 8004520:	4620      	mov	r0, r4
 8004522:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004526:	3a30      	subs	r2, #48	; 0x30
 8004528:	2a09      	cmp	r2, #9
 800452a:	d903      	bls.n	8004534 <_vfiprintf_r+0x1d0>
 800452c:	2b00      	cmp	r3, #0
 800452e:	d0c6      	beq.n	80044be <_vfiprintf_r+0x15a>
 8004530:	9105      	str	r1, [sp, #20]
 8004532:	e7c4      	b.n	80044be <_vfiprintf_r+0x15a>
 8004534:	fb0c 2101 	mla	r1, ip, r1, r2
 8004538:	4604      	mov	r4, r0
 800453a:	2301      	movs	r3, #1
 800453c:	e7f0      	b.n	8004520 <_vfiprintf_r+0x1bc>
 800453e:	ab03      	add	r3, sp, #12
 8004540:	9300      	str	r3, [sp, #0]
 8004542:	462a      	mov	r2, r5
 8004544:	4b12      	ldr	r3, [pc, #72]	; (8004590 <_vfiprintf_r+0x22c>)
 8004546:	a904      	add	r1, sp, #16
 8004548:	4630      	mov	r0, r6
 800454a:	f3af 8000 	nop.w
 800454e:	4607      	mov	r7, r0
 8004550:	1c78      	adds	r0, r7, #1
 8004552:	d1d6      	bne.n	8004502 <_vfiprintf_r+0x19e>
 8004554:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004556:	07d9      	lsls	r1, r3, #31
 8004558:	d405      	bmi.n	8004566 <_vfiprintf_r+0x202>
 800455a:	89ab      	ldrh	r3, [r5, #12]
 800455c:	059a      	lsls	r2, r3, #22
 800455e:	d402      	bmi.n	8004566 <_vfiprintf_r+0x202>
 8004560:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004562:	f7ff fddb 	bl	800411c <__retarget_lock_release_recursive>
 8004566:	89ab      	ldrh	r3, [r5, #12]
 8004568:	065b      	lsls	r3, r3, #25
 800456a:	f53f af1d 	bmi.w	80043a8 <_vfiprintf_r+0x44>
 800456e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004570:	e71c      	b.n	80043ac <_vfiprintf_r+0x48>
 8004572:	ab03      	add	r3, sp, #12
 8004574:	9300      	str	r3, [sp, #0]
 8004576:	462a      	mov	r2, r5
 8004578:	4b05      	ldr	r3, [pc, #20]	; (8004590 <_vfiprintf_r+0x22c>)
 800457a:	a904      	add	r1, sp, #16
 800457c:	4630      	mov	r0, r6
 800457e:	f000 f879 	bl	8004674 <_printf_i>
 8004582:	e7e4      	b.n	800454e <_vfiprintf_r+0x1ea>
 8004584:	08004ca0 	.word	0x08004ca0
 8004588:	08004caa 	.word	0x08004caa
 800458c:	00000000 	.word	0x00000000
 8004590:	0800433f 	.word	0x0800433f
 8004594:	08004ca6 	.word	0x08004ca6

08004598 <_printf_common>:
 8004598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800459c:	4616      	mov	r6, r2
 800459e:	4699      	mov	r9, r3
 80045a0:	688a      	ldr	r2, [r1, #8]
 80045a2:	690b      	ldr	r3, [r1, #16]
 80045a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80045a8:	4293      	cmp	r3, r2
 80045aa:	bfb8      	it	lt
 80045ac:	4613      	movlt	r3, r2
 80045ae:	6033      	str	r3, [r6, #0]
 80045b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80045b4:	4607      	mov	r7, r0
 80045b6:	460c      	mov	r4, r1
 80045b8:	b10a      	cbz	r2, 80045be <_printf_common+0x26>
 80045ba:	3301      	adds	r3, #1
 80045bc:	6033      	str	r3, [r6, #0]
 80045be:	6823      	ldr	r3, [r4, #0]
 80045c0:	0699      	lsls	r1, r3, #26
 80045c2:	bf42      	ittt	mi
 80045c4:	6833      	ldrmi	r3, [r6, #0]
 80045c6:	3302      	addmi	r3, #2
 80045c8:	6033      	strmi	r3, [r6, #0]
 80045ca:	6825      	ldr	r5, [r4, #0]
 80045cc:	f015 0506 	ands.w	r5, r5, #6
 80045d0:	d106      	bne.n	80045e0 <_printf_common+0x48>
 80045d2:	f104 0a19 	add.w	sl, r4, #25
 80045d6:	68e3      	ldr	r3, [r4, #12]
 80045d8:	6832      	ldr	r2, [r6, #0]
 80045da:	1a9b      	subs	r3, r3, r2
 80045dc:	42ab      	cmp	r3, r5
 80045de:	dc26      	bgt.n	800462e <_printf_common+0x96>
 80045e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80045e4:	1e13      	subs	r3, r2, #0
 80045e6:	6822      	ldr	r2, [r4, #0]
 80045e8:	bf18      	it	ne
 80045ea:	2301      	movne	r3, #1
 80045ec:	0692      	lsls	r2, r2, #26
 80045ee:	d42b      	bmi.n	8004648 <_printf_common+0xb0>
 80045f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80045f4:	4649      	mov	r1, r9
 80045f6:	4638      	mov	r0, r7
 80045f8:	47c0      	blx	r8
 80045fa:	3001      	adds	r0, #1
 80045fc:	d01e      	beq.n	800463c <_printf_common+0xa4>
 80045fe:	6823      	ldr	r3, [r4, #0]
 8004600:	6922      	ldr	r2, [r4, #16]
 8004602:	f003 0306 	and.w	r3, r3, #6
 8004606:	2b04      	cmp	r3, #4
 8004608:	bf02      	ittt	eq
 800460a:	68e5      	ldreq	r5, [r4, #12]
 800460c:	6833      	ldreq	r3, [r6, #0]
 800460e:	1aed      	subeq	r5, r5, r3
 8004610:	68a3      	ldr	r3, [r4, #8]
 8004612:	bf0c      	ite	eq
 8004614:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004618:	2500      	movne	r5, #0
 800461a:	4293      	cmp	r3, r2
 800461c:	bfc4      	itt	gt
 800461e:	1a9b      	subgt	r3, r3, r2
 8004620:	18ed      	addgt	r5, r5, r3
 8004622:	2600      	movs	r6, #0
 8004624:	341a      	adds	r4, #26
 8004626:	42b5      	cmp	r5, r6
 8004628:	d11a      	bne.n	8004660 <_printf_common+0xc8>
 800462a:	2000      	movs	r0, #0
 800462c:	e008      	b.n	8004640 <_printf_common+0xa8>
 800462e:	2301      	movs	r3, #1
 8004630:	4652      	mov	r2, sl
 8004632:	4649      	mov	r1, r9
 8004634:	4638      	mov	r0, r7
 8004636:	47c0      	blx	r8
 8004638:	3001      	adds	r0, #1
 800463a:	d103      	bne.n	8004644 <_printf_common+0xac>
 800463c:	f04f 30ff 	mov.w	r0, #4294967295
 8004640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004644:	3501      	adds	r5, #1
 8004646:	e7c6      	b.n	80045d6 <_printf_common+0x3e>
 8004648:	18e1      	adds	r1, r4, r3
 800464a:	1c5a      	adds	r2, r3, #1
 800464c:	2030      	movs	r0, #48	; 0x30
 800464e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004652:	4422      	add	r2, r4
 8004654:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004658:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800465c:	3302      	adds	r3, #2
 800465e:	e7c7      	b.n	80045f0 <_printf_common+0x58>
 8004660:	2301      	movs	r3, #1
 8004662:	4622      	mov	r2, r4
 8004664:	4649      	mov	r1, r9
 8004666:	4638      	mov	r0, r7
 8004668:	47c0      	blx	r8
 800466a:	3001      	adds	r0, #1
 800466c:	d0e6      	beq.n	800463c <_printf_common+0xa4>
 800466e:	3601      	adds	r6, #1
 8004670:	e7d9      	b.n	8004626 <_printf_common+0x8e>
	...

08004674 <_printf_i>:
 8004674:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004678:	7e0f      	ldrb	r7, [r1, #24]
 800467a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800467c:	2f78      	cmp	r7, #120	; 0x78
 800467e:	4691      	mov	r9, r2
 8004680:	4680      	mov	r8, r0
 8004682:	460c      	mov	r4, r1
 8004684:	469a      	mov	sl, r3
 8004686:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800468a:	d807      	bhi.n	800469c <_printf_i+0x28>
 800468c:	2f62      	cmp	r7, #98	; 0x62
 800468e:	d80a      	bhi.n	80046a6 <_printf_i+0x32>
 8004690:	2f00      	cmp	r7, #0
 8004692:	f000 80d4 	beq.w	800483e <_printf_i+0x1ca>
 8004696:	2f58      	cmp	r7, #88	; 0x58
 8004698:	f000 80c0 	beq.w	800481c <_printf_i+0x1a8>
 800469c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80046a4:	e03a      	b.n	800471c <_printf_i+0xa8>
 80046a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80046aa:	2b15      	cmp	r3, #21
 80046ac:	d8f6      	bhi.n	800469c <_printf_i+0x28>
 80046ae:	a101      	add	r1, pc, #4	; (adr r1, 80046b4 <_printf_i+0x40>)
 80046b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80046b4:	0800470d 	.word	0x0800470d
 80046b8:	08004721 	.word	0x08004721
 80046bc:	0800469d 	.word	0x0800469d
 80046c0:	0800469d 	.word	0x0800469d
 80046c4:	0800469d 	.word	0x0800469d
 80046c8:	0800469d 	.word	0x0800469d
 80046cc:	08004721 	.word	0x08004721
 80046d0:	0800469d 	.word	0x0800469d
 80046d4:	0800469d 	.word	0x0800469d
 80046d8:	0800469d 	.word	0x0800469d
 80046dc:	0800469d 	.word	0x0800469d
 80046e0:	08004825 	.word	0x08004825
 80046e4:	0800474d 	.word	0x0800474d
 80046e8:	080047df 	.word	0x080047df
 80046ec:	0800469d 	.word	0x0800469d
 80046f0:	0800469d 	.word	0x0800469d
 80046f4:	08004847 	.word	0x08004847
 80046f8:	0800469d 	.word	0x0800469d
 80046fc:	0800474d 	.word	0x0800474d
 8004700:	0800469d 	.word	0x0800469d
 8004704:	0800469d 	.word	0x0800469d
 8004708:	080047e7 	.word	0x080047e7
 800470c:	682b      	ldr	r3, [r5, #0]
 800470e:	1d1a      	adds	r2, r3, #4
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	602a      	str	r2, [r5, #0]
 8004714:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004718:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800471c:	2301      	movs	r3, #1
 800471e:	e09f      	b.n	8004860 <_printf_i+0x1ec>
 8004720:	6820      	ldr	r0, [r4, #0]
 8004722:	682b      	ldr	r3, [r5, #0]
 8004724:	0607      	lsls	r7, r0, #24
 8004726:	f103 0104 	add.w	r1, r3, #4
 800472a:	6029      	str	r1, [r5, #0]
 800472c:	d501      	bpl.n	8004732 <_printf_i+0xbe>
 800472e:	681e      	ldr	r6, [r3, #0]
 8004730:	e003      	b.n	800473a <_printf_i+0xc6>
 8004732:	0646      	lsls	r6, r0, #25
 8004734:	d5fb      	bpl.n	800472e <_printf_i+0xba>
 8004736:	f9b3 6000 	ldrsh.w	r6, [r3]
 800473a:	2e00      	cmp	r6, #0
 800473c:	da03      	bge.n	8004746 <_printf_i+0xd2>
 800473e:	232d      	movs	r3, #45	; 0x2d
 8004740:	4276      	negs	r6, r6
 8004742:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004746:	485a      	ldr	r0, [pc, #360]	; (80048b0 <_printf_i+0x23c>)
 8004748:	230a      	movs	r3, #10
 800474a:	e012      	b.n	8004772 <_printf_i+0xfe>
 800474c:	682b      	ldr	r3, [r5, #0]
 800474e:	6820      	ldr	r0, [r4, #0]
 8004750:	1d19      	adds	r1, r3, #4
 8004752:	6029      	str	r1, [r5, #0]
 8004754:	0605      	lsls	r5, r0, #24
 8004756:	d501      	bpl.n	800475c <_printf_i+0xe8>
 8004758:	681e      	ldr	r6, [r3, #0]
 800475a:	e002      	b.n	8004762 <_printf_i+0xee>
 800475c:	0641      	lsls	r1, r0, #25
 800475e:	d5fb      	bpl.n	8004758 <_printf_i+0xe4>
 8004760:	881e      	ldrh	r6, [r3, #0]
 8004762:	4853      	ldr	r0, [pc, #332]	; (80048b0 <_printf_i+0x23c>)
 8004764:	2f6f      	cmp	r7, #111	; 0x6f
 8004766:	bf0c      	ite	eq
 8004768:	2308      	moveq	r3, #8
 800476a:	230a      	movne	r3, #10
 800476c:	2100      	movs	r1, #0
 800476e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004772:	6865      	ldr	r5, [r4, #4]
 8004774:	60a5      	str	r5, [r4, #8]
 8004776:	2d00      	cmp	r5, #0
 8004778:	bfa2      	ittt	ge
 800477a:	6821      	ldrge	r1, [r4, #0]
 800477c:	f021 0104 	bicge.w	r1, r1, #4
 8004780:	6021      	strge	r1, [r4, #0]
 8004782:	b90e      	cbnz	r6, 8004788 <_printf_i+0x114>
 8004784:	2d00      	cmp	r5, #0
 8004786:	d04b      	beq.n	8004820 <_printf_i+0x1ac>
 8004788:	4615      	mov	r5, r2
 800478a:	fbb6 f1f3 	udiv	r1, r6, r3
 800478e:	fb03 6711 	mls	r7, r3, r1, r6
 8004792:	5dc7      	ldrb	r7, [r0, r7]
 8004794:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004798:	4637      	mov	r7, r6
 800479a:	42bb      	cmp	r3, r7
 800479c:	460e      	mov	r6, r1
 800479e:	d9f4      	bls.n	800478a <_printf_i+0x116>
 80047a0:	2b08      	cmp	r3, #8
 80047a2:	d10b      	bne.n	80047bc <_printf_i+0x148>
 80047a4:	6823      	ldr	r3, [r4, #0]
 80047a6:	07de      	lsls	r6, r3, #31
 80047a8:	d508      	bpl.n	80047bc <_printf_i+0x148>
 80047aa:	6923      	ldr	r3, [r4, #16]
 80047ac:	6861      	ldr	r1, [r4, #4]
 80047ae:	4299      	cmp	r1, r3
 80047b0:	bfde      	ittt	le
 80047b2:	2330      	movle	r3, #48	; 0x30
 80047b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80047b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80047bc:	1b52      	subs	r2, r2, r5
 80047be:	6122      	str	r2, [r4, #16]
 80047c0:	f8cd a000 	str.w	sl, [sp]
 80047c4:	464b      	mov	r3, r9
 80047c6:	aa03      	add	r2, sp, #12
 80047c8:	4621      	mov	r1, r4
 80047ca:	4640      	mov	r0, r8
 80047cc:	f7ff fee4 	bl	8004598 <_printf_common>
 80047d0:	3001      	adds	r0, #1
 80047d2:	d14a      	bne.n	800486a <_printf_i+0x1f6>
 80047d4:	f04f 30ff 	mov.w	r0, #4294967295
 80047d8:	b004      	add	sp, #16
 80047da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047de:	6823      	ldr	r3, [r4, #0]
 80047e0:	f043 0320 	orr.w	r3, r3, #32
 80047e4:	6023      	str	r3, [r4, #0]
 80047e6:	4833      	ldr	r0, [pc, #204]	; (80048b4 <_printf_i+0x240>)
 80047e8:	2778      	movs	r7, #120	; 0x78
 80047ea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80047ee:	6823      	ldr	r3, [r4, #0]
 80047f0:	6829      	ldr	r1, [r5, #0]
 80047f2:	061f      	lsls	r7, r3, #24
 80047f4:	f851 6b04 	ldr.w	r6, [r1], #4
 80047f8:	d402      	bmi.n	8004800 <_printf_i+0x18c>
 80047fa:	065f      	lsls	r7, r3, #25
 80047fc:	bf48      	it	mi
 80047fe:	b2b6      	uxthmi	r6, r6
 8004800:	07df      	lsls	r7, r3, #31
 8004802:	bf48      	it	mi
 8004804:	f043 0320 	orrmi.w	r3, r3, #32
 8004808:	6029      	str	r1, [r5, #0]
 800480a:	bf48      	it	mi
 800480c:	6023      	strmi	r3, [r4, #0]
 800480e:	b91e      	cbnz	r6, 8004818 <_printf_i+0x1a4>
 8004810:	6823      	ldr	r3, [r4, #0]
 8004812:	f023 0320 	bic.w	r3, r3, #32
 8004816:	6023      	str	r3, [r4, #0]
 8004818:	2310      	movs	r3, #16
 800481a:	e7a7      	b.n	800476c <_printf_i+0xf8>
 800481c:	4824      	ldr	r0, [pc, #144]	; (80048b0 <_printf_i+0x23c>)
 800481e:	e7e4      	b.n	80047ea <_printf_i+0x176>
 8004820:	4615      	mov	r5, r2
 8004822:	e7bd      	b.n	80047a0 <_printf_i+0x12c>
 8004824:	682b      	ldr	r3, [r5, #0]
 8004826:	6826      	ldr	r6, [r4, #0]
 8004828:	6961      	ldr	r1, [r4, #20]
 800482a:	1d18      	adds	r0, r3, #4
 800482c:	6028      	str	r0, [r5, #0]
 800482e:	0635      	lsls	r5, r6, #24
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	d501      	bpl.n	8004838 <_printf_i+0x1c4>
 8004834:	6019      	str	r1, [r3, #0]
 8004836:	e002      	b.n	800483e <_printf_i+0x1ca>
 8004838:	0670      	lsls	r0, r6, #25
 800483a:	d5fb      	bpl.n	8004834 <_printf_i+0x1c0>
 800483c:	8019      	strh	r1, [r3, #0]
 800483e:	2300      	movs	r3, #0
 8004840:	6123      	str	r3, [r4, #16]
 8004842:	4615      	mov	r5, r2
 8004844:	e7bc      	b.n	80047c0 <_printf_i+0x14c>
 8004846:	682b      	ldr	r3, [r5, #0]
 8004848:	1d1a      	adds	r2, r3, #4
 800484a:	602a      	str	r2, [r5, #0]
 800484c:	681d      	ldr	r5, [r3, #0]
 800484e:	6862      	ldr	r2, [r4, #4]
 8004850:	2100      	movs	r1, #0
 8004852:	4628      	mov	r0, r5
 8004854:	f7fb fcc4 	bl	80001e0 <memchr>
 8004858:	b108      	cbz	r0, 800485e <_printf_i+0x1ea>
 800485a:	1b40      	subs	r0, r0, r5
 800485c:	6060      	str	r0, [r4, #4]
 800485e:	6863      	ldr	r3, [r4, #4]
 8004860:	6123      	str	r3, [r4, #16]
 8004862:	2300      	movs	r3, #0
 8004864:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004868:	e7aa      	b.n	80047c0 <_printf_i+0x14c>
 800486a:	6923      	ldr	r3, [r4, #16]
 800486c:	462a      	mov	r2, r5
 800486e:	4649      	mov	r1, r9
 8004870:	4640      	mov	r0, r8
 8004872:	47d0      	blx	sl
 8004874:	3001      	adds	r0, #1
 8004876:	d0ad      	beq.n	80047d4 <_printf_i+0x160>
 8004878:	6823      	ldr	r3, [r4, #0]
 800487a:	079b      	lsls	r3, r3, #30
 800487c:	d413      	bmi.n	80048a6 <_printf_i+0x232>
 800487e:	68e0      	ldr	r0, [r4, #12]
 8004880:	9b03      	ldr	r3, [sp, #12]
 8004882:	4298      	cmp	r0, r3
 8004884:	bfb8      	it	lt
 8004886:	4618      	movlt	r0, r3
 8004888:	e7a6      	b.n	80047d8 <_printf_i+0x164>
 800488a:	2301      	movs	r3, #1
 800488c:	4632      	mov	r2, r6
 800488e:	4649      	mov	r1, r9
 8004890:	4640      	mov	r0, r8
 8004892:	47d0      	blx	sl
 8004894:	3001      	adds	r0, #1
 8004896:	d09d      	beq.n	80047d4 <_printf_i+0x160>
 8004898:	3501      	adds	r5, #1
 800489a:	68e3      	ldr	r3, [r4, #12]
 800489c:	9903      	ldr	r1, [sp, #12]
 800489e:	1a5b      	subs	r3, r3, r1
 80048a0:	42ab      	cmp	r3, r5
 80048a2:	dcf2      	bgt.n	800488a <_printf_i+0x216>
 80048a4:	e7eb      	b.n	800487e <_printf_i+0x20a>
 80048a6:	2500      	movs	r5, #0
 80048a8:	f104 0619 	add.w	r6, r4, #25
 80048ac:	e7f5      	b.n	800489a <_printf_i+0x226>
 80048ae:	bf00      	nop
 80048b0:	08004cb1 	.word	0x08004cb1
 80048b4:	08004cc2 	.word	0x08004cc2

080048b8 <__sflush_r>:
 80048b8:	898a      	ldrh	r2, [r1, #12]
 80048ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048be:	4605      	mov	r5, r0
 80048c0:	0710      	lsls	r0, r2, #28
 80048c2:	460c      	mov	r4, r1
 80048c4:	d458      	bmi.n	8004978 <__sflush_r+0xc0>
 80048c6:	684b      	ldr	r3, [r1, #4]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	dc05      	bgt.n	80048d8 <__sflush_r+0x20>
 80048cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	dc02      	bgt.n	80048d8 <__sflush_r+0x20>
 80048d2:	2000      	movs	r0, #0
 80048d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80048da:	2e00      	cmp	r6, #0
 80048dc:	d0f9      	beq.n	80048d2 <__sflush_r+0x1a>
 80048de:	2300      	movs	r3, #0
 80048e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80048e4:	682f      	ldr	r7, [r5, #0]
 80048e6:	6a21      	ldr	r1, [r4, #32]
 80048e8:	602b      	str	r3, [r5, #0]
 80048ea:	d032      	beq.n	8004952 <__sflush_r+0x9a>
 80048ec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80048ee:	89a3      	ldrh	r3, [r4, #12]
 80048f0:	075a      	lsls	r2, r3, #29
 80048f2:	d505      	bpl.n	8004900 <__sflush_r+0x48>
 80048f4:	6863      	ldr	r3, [r4, #4]
 80048f6:	1ac0      	subs	r0, r0, r3
 80048f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80048fa:	b10b      	cbz	r3, 8004900 <__sflush_r+0x48>
 80048fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80048fe:	1ac0      	subs	r0, r0, r3
 8004900:	2300      	movs	r3, #0
 8004902:	4602      	mov	r2, r0
 8004904:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004906:	6a21      	ldr	r1, [r4, #32]
 8004908:	4628      	mov	r0, r5
 800490a:	47b0      	blx	r6
 800490c:	1c43      	adds	r3, r0, #1
 800490e:	89a3      	ldrh	r3, [r4, #12]
 8004910:	d106      	bne.n	8004920 <__sflush_r+0x68>
 8004912:	6829      	ldr	r1, [r5, #0]
 8004914:	291d      	cmp	r1, #29
 8004916:	d82b      	bhi.n	8004970 <__sflush_r+0xb8>
 8004918:	4a29      	ldr	r2, [pc, #164]	; (80049c0 <__sflush_r+0x108>)
 800491a:	410a      	asrs	r2, r1
 800491c:	07d6      	lsls	r6, r2, #31
 800491e:	d427      	bmi.n	8004970 <__sflush_r+0xb8>
 8004920:	2200      	movs	r2, #0
 8004922:	6062      	str	r2, [r4, #4]
 8004924:	04d9      	lsls	r1, r3, #19
 8004926:	6922      	ldr	r2, [r4, #16]
 8004928:	6022      	str	r2, [r4, #0]
 800492a:	d504      	bpl.n	8004936 <__sflush_r+0x7e>
 800492c:	1c42      	adds	r2, r0, #1
 800492e:	d101      	bne.n	8004934 <__sflush_r+0x7c>
 8004930:	682b      	ldr	r3, [r5, #0]
 8004932:	b903      	cbnz	r3, 8004936 <__sflush_r+0x7e>
 8004934:	6560      	str	r0, [r4, #84]	; 0x54
 8004936:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004938:	602f      	str	r7, [r5, #0]
 800493a:	2900      	cmp	r1, #0
 800493c:	d0c9      	beq.n	80048d2 <__sflush_r+0x1a>
 800493e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004942:	4299      	cmp	r1, r3
 8004944:	d002      	beq.n	800494c <__sflush_r+0x94>
 8004946:	4628      	mov	r0, r5
 8004948:	f7ff fbea 	bl	8004120 <_free_r>
 800494c:	2000      	movs	r0, #0
 800494e:	6360      	str	r0, [r4, #52]	; 0x34
 8004950:	e7c0      	b.n	80048d4 <__sflush_r+0x1c>
 8004952:	2301      	movs	r3, #1
 8004954:	4628      	mov	r0, r5
 8004956:	47b0      	blx	r6
 8004958:	1c41      	adds	r1, r0, #1
 800495a:	d1c8      	bne.n	80048ee <__sflush_r+0x36>
 800495c:	682b      	ldr	r3, [r5, #0]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d0c5      	beq.n	80048ee <__sflush_r+0x36>
 8004962:	2b1d      	cmp	r3, #29
 8004964:	d001      	beq.n	800496a <__sflush_r+0xb2>
 8004966:	2b16      	cmp	r3, #22
 8004968:	d101      	bne.n	800496e <__sflush_r+0xb6>
 800496a:	602f      	str	r7, [r5, #0]
 800496c:	e7b1      	b.n	80048d2 <__sflush_r+0x1a>
 800496e:	89a3      	ldrh	r3, [r4, #12]
 8004970:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004974:	81a3      	strh	r3, [r4, #12]
 8004976:	e7ad      	b.n	80048d4 <__sflush_r+0x1c>
 8004978:	690f      	ldr	r7, [r1, #16]
 800497a:	2f00      	cmp	r7, #0
 800497c:	d0a9      	beq.n	80048d2 <__sflush_r+0x1a>
 800497e:	0793      	lsls	r3, r2, #30
 8004980:	680e      	ldr	r6, [r1, #0]
 8004982:	bf08      	it	eq
 8004984:	694b      	ldreq	r3, [r1, #20]
 8004986:	600f      	str	r7, [r1, #0]
 8004988:	bf18      	it	ne
 800498a:	2300      	movne	r3, #0
 800498c:	eba6 0807 	sub.w	r8, r6, r7
 8004990:	608b      	str	r3, [r1, #8]
 8004992:	f1b8 0f00 	cmp.w	r8, #0
 8004996:	dd9c      	ble.n	80048d2 <__sflush_r+0x1a>
 8004998:	6a21      	ldr	r1, [r4, #32]
 800499a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800499c:	4643      	mov	r3, r8
 800499e:	463a      	mov	r2, r7
 80049a0:	4628      	mov	r0, r5
 80049a2:	47b0      	blx	r6
 80049a4:	2800      	cmp	r0, #0
 80049a6:	dc06      	bgt.n	80049b6 <__sflush_r+0xfe>
 80049a8:	89a3      	ldrh	r3, [r4, #12]
 80049aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049ae:	81a3      	strh	r3, [r4, #12]
 80049b0:	f04f 30ff 	mov.w	r0, #4294967295
 80049b4:	e78e      	b.n	80048d4 <__sflush_r+0x1c>
 80049b6:	4407      	add	r7, r0
 80049b8:	eba8 0800 	sub.w	r8, r8, r0
 80049bc:	e7e9      	b.n	8004992 <__sflush_r+0xda>
 80049be:	bf00      	nop
 80049c0:	dfbffffe 	.word	0xdfbffffe

080049c4 <_fflush_r>:
 80049c4:	b538      	push	{r3, r4, r5, lr}
 80049c6:	690b      	ldr	r3, [r1, #16]
 80049c8:	4605      	mov	r5, r0
 80049ca:	460c      	mov	r4, r1
 80049cc:	b913      	cbnz	r3, 80049d4 <_fflush_r+0x10>
 80049ce:	2500      	movs	r5, #0
 80049d0:	4628      	mov	r0, r5
 80049d2:	bd38      	pop	{r3, r4, r5, pc}
 80049d4:	b118      	cbz	r0, 80049de <_fflush_r+0x1a>
 80049d6:	6a03      	ldr	r3, [r0, #32]
 80049d8:	b90b      	cbnz	r3, 80049de <_fflush_r+0x1a>
 80049da:	f7ff fa99 	bl	8003f10 <__sinit>
 80049de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d0f3      	beq.n	80049ce <_fflush_r+0xa>
 80049e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80049e8:	07d0      	lsls	r0, r2, #31
 80049ea:	d404      	bmi.n	80049f6 <_fflush_r+0x32>
 80049ec:	0599      	lsls	r1, r3, #22
 80049ee:	d402      	bmi.n	80049f6 <_fflush_r+0x32>
 80049f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049f2:	f7ff fb92 	bl	800411a <__retarget_lock_acquire_recursive>
 80049f6:	4628      	mov	r0, r5
 80049f8:	4621      	mov	r1, r4
 80049fa:	f7ff ff5d 	bl	80048b8 <__sflush_r>
 80049fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a00:	07da      	lsls	r2, r3, #31
 8004a02:	4605      	mov	r5, r0
 8004a04:	d4e4      	bmi.n	80049d0 <_fflush_r+0xc>
 8004a06:	89a3      	ldrh	r3, [r4, #12]
 8004a08:	059b      	lsls	r3, r3, #22
 8004a0a:	d4e1      	bmi.n	80049d0 <_fflush_r+0xc>
 8004a0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a0e:	f7ff fb85 	bl	800411c <__retarget_lock_release_recursive>
 8004a12:	e7dd      	b.n	80049d0 <_fflush_r+0xc>

08004a14 <__swbuf_r>:
 8004a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a16:	460e      	mov	r6, r1
 8004a18:	4614      	mov	r4, r2
 8004a1a:	4605      	mov	r5, r0
 8004a1c:	b118      	cbz	r0, 8004a26 <__swbuf_r+0x12>
 8004a1e:	6a03      	ldr	r3, [r0, #32]
 8004a20:	b90b      	cbnz	r3, 8004a26 <__swbuf_r+0x12>
 8004a22:	f7ff fa75 	bl	8003f10 <__sinit>
 8004a26:	69a3      	ldr	r3, [r4, #24]
 8004a28:	60a3      	str	r3, [r4, #8]
 8004a2a:	89a3      	ldrh	r3, [r4, #12]
 8004a2c:	071a      	lsls	r2, r3, #28
 8004a2e:	d525      	bpl.n	8004a7c <__swbuf_r+0x68>
 8004a30:	6923      	ldr	r3, [r4, #16]
 8004a32:	b31b      	cbz	r3, 8004a7c <__swbuf_r+0x68>
 8004a34:	6823      	ldr	r3, [r4, #0]
 8004a36:	6922      	ldr	r2, [r4, #16]
 8004a38:	1a98      	subs	r0, r3, r2
 8004a3a:	6963      	ldr	r3, [r4, #20]
 8004a3c:	b2f6      	uxtb	r6, r6
 8004a3e:	4283      	cmp	r3, r0
 8004a40:	4637      	mov	r7, r6
 8004a42:	dc04      	bgt.n	8004a4e <__swbuf_r+0x3a>
 8004a44:	4621      	mov	r1, r4
 8004a46:	4628      	mov	r0, r5
 8004a48:	f7ff ffbc 	bl	80049c4 <_fflush_r>
 8004a4c:	b9e0      	cbnz	r0, 8004a88 <__swbuf_r+0x74>
 8004a4e:	68a3      	ldr	r3, [r4, #8]
 8004a50:	3b01      	subs	r3, #1
 8004a52:	60a3      	str	r3, [r4, #8]
 8004a54:	6823      	ldr	r3, [r4, #0]
 8004a56:	1c5a      	adds	r2, r3, #1
 8004a58:	6022      	str	r2, [r4, #0]
 8004a5a:	701e      	strb	r6, [r3, #0]
 8004a5c:	6962      	ldr	r2, [r4, #20]
 8004a5e:	1c43      	adds	r3, r0, #1
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d004      	beq.n	8004a6e <__swbuf_r+0x5a>
 8004a64:	89a3      	ldrh	r3, [r4, #12]
 8004a66:	07db      	lsls	r3, r3, #31
 8004a68:	d506      	bpl.n	8004a78 <__swbuf_r+0x64>
 8004a6a:	2e0a      	cmp	r6, #10
 8004a6c:	d104      	bne.n	8004a78 <__swbuf_r+0x64>
 8004a6e:	4621      	mov	r1, r4
 8004a70:	4628      	mov	r0, r5
 8004a72:	f7ff ffa7 	bl	80049c4 <_fflush_r>
 8004a76:	b938      	cbnz	r0, 8004a88 <__swbuf_r+0x74>
 8004a78:	4638      	mov	r0, r7
 8004a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a7c:	4621      	mov	r1, r4
 8004a7e:	4628      	mov	r0, r5
 8004a80:	f000 f806 	bl	8004a90 <__swsetup_r>
 8004a84:	2800      	cmp	r0, #0
 8004a86:	d0d5      	beq.n	8004a34 <__swbuf_r+0x20>
 8004a88:	f04f 37ff 	mov.w	r7, #4294967295
 8004a8c:	e7f4      	b.n	8004a78 <__swbuf_r+0x64>
	...

08004a90 <__swsetup_r>:
 8004a90:	b538      	push	{r3, r4, r5, lr}
 8004a92:	4b2a      	ldr	r3, [pc, #168]	; (8004b3c <__swsetup_r+0xac>)
 8004a94:	4605      	mov	r5, r0
 8004a96:	6818      	ldr	r0, [r3, #0]
 8004a98:	460c      	mov	r4, r1
 8004a9a:	b118      	cbz	r0, 8004aa4 <__swsetup_r+0x14>
 8004a9c:	6a03      	ldr	r3, [r0, #32]
 8004a9e:	b90b      	cbnz	r3, 8004aa4 <__swsetup_r+0x14>
 8004aa0:	f7ff fa36 	bl	8003f10 <__sinit>
 8004aa4:	89a3      	ldrh	r3, [r4, #12]
 8004aa6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004aaa:	0718      	lsls	r0, r3, #28
 8004aac:	d422      	bmi.n	8004af4 <__swsetup_r+0x64>
 8004aae:	06d9      	lsls	r1, r3, #27
 8004ab0:	d407      	bmi.n	8004ac2 <__swsetup_r+0x32>
 8004ab2:	2309      	movs	r3, #9
 8004ab4:	602b      	str	r3, [r5, #0]
 8004ab6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004aba:	81a3      	strh	r3, [r4, #12]
 8004abc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ac0:	e034      	b.n	8004b2c <__swsetup_r+0x9c>
 8004ac2:	0758      	lsls	r0, r3, #29
 8004ac4:	d512      	bpl.n	8004aec <__swsetup_r+0x5c>
 8004ac6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ac8:	b141      	cbz	r1, 8004adc <__swsetup_r+0x4c>
 8004aca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ace:	4299      	cmp	r1, r3
 8004ad0:	d002      	beq.n	8004ad8 <__swsetup_r+0x48>
 8004ad2:	4628      	mov	r0, r5
 8004ad4:	f7ff fb24 	bl	8004120 <_free_r>
 8004ad8:	2300      	movs	r3, #0
 8004ada:	6363      	str	r3, [r4, #52]	; 0x34
 8004adc:	89a3      	ldrh	r3, [r4, #12]
 8004ade:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004ae2:	81a3      	strh	r3, [r4, #12]
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	6063      	str	r3, [r4, #4]
 8004ae8:	6923      	ldr	r3, [r4, #16]
 8004aea:	6023      	str	r3, [r4, #0]
 8004aec:	89a3      	ldrh	r3, [r4, #12]
 8004aee:	f043 0308 	orr.w	r3, r3, #8
 8004af2:	81a3      	strh	r3, [r4, #12]
 8004af4:	6923      	ldr	r3, [r4, #16]
 8004af6:	b94b      	cbnz	r3, 8004b0c <__swsetup_r+0x7c>
 8004af8:	89a3      	ldrh	r3, [r4, #12]
 8004afa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004afe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b02:	d003      	beq.n	8004b0c <__swsetup_r+0x7c>
 8004b04:	4621      	mov	r1, r4
 8004b06:	4628      	mov	r0, r5
 8004b08:	f000 f850 	bl	8004bac <__smakebuf_r>
 8004b0c:	89a0      	ldrh	r0, [r4, #12]
 8004b0e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004b12:	f010 0301 	ands.w	r3, r0, #1
 8004b16:	d00a      	beq.n	8004b2e <__swsetup_r+0x9e>
 8004b18:	2300      	movs	r3, #0
 8004b1a:	60a3      	str	r3, [r4, #8]
 8004b1c:	6963      	ldr	r3, [r4, #20]
 8004b1e:	425b      	negs	r3, r3
 8004b20:	61a3      	str	r3, [r4, #24]
 8004b22:	6923      	ldr	r3, [r4, #16]
 8004b24:	b943      	cbnz	r3, 8004b38 <__swsetup_r+0xa8>
 8004b26:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004b2a:	d1c4      	bne.n	8004ab6 <__swsetup_r+0x26>
 8004b2c:	bd38      	pop	{r3, r4, r5, pc}
 8004b2e:	0781      	lsls	r1, r0, #30
 8004b30:	bf58      	it	pl
 8004b32:	6963      	ldrpl	r3, [r4, #20]
 8004b34:	60a3      	str	r3, [r4, #8]
 8004b36:	e7f4      	b.n	8004b22 <__swsetup_r+0x92>
 8004b38:	2000      	movs	r0, #0
 8004b3a:	e7f7      	b.n	8004b2c <__swsetup_r+0x9c>
 8004b3c:	20000064 	.word	0x20000064

08004b40 <_sbrk_r>:
 8004b40:	b538      	push	{r3, r4, r5, lr}
 8004b42:	4d06      	ldr	r5, [pc, #24]	; (8004b5c <_sbrk_r+0x1c>)
 8004b44:	2300      	movs	r3, #0
 8004b46:	4604      	mov	r4, r0
 8004b48:	4608      	mov	r0, r1
 8004b4a:	602b      	str	r3, [r5, #0]
 8004b4c:	f7fb ffaa 	bl	8000aa4 <_sbrk>
 8004b50:	1c43      	adds	r3, r0, #1
 8004b52:	d102      	bne.n	8004b5a <_sbrk_r+0x1a>
 8004b54:	682b      	ldr	r3, [r5, #0]
 8004b56:	b103      	cbz	r3, 8004b5a <_sbrk_r+0x1a>
 8004b58:	6023      	str	r3, [r4, #0]
 8004b5a:	bd38      	pop	{r3, r4, r5, pc}
 8004b5c:	20000264 	.word	0x20000264

08004b60 <__swhatbuf_r>:
 8004b60:	b570      	push	{r4, r5, r6, lr}
 8004b62:	460c      	mov	r4, r1
 8004b64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b68:	2900      	cmp	r1, #0
 8004b6a:	b096      	sub	sp, #88	; 0x58
 8004b6c:	4615      	mov	r5, r2
 8004b6e:	461e      	mov	r6, r3
 8004b70:	da0d      	bge.n	8004b8e <__swhatbuf_r+0x2e>
 8004b72:	89a3      	ldrh	r3, [r4, #12]
 8004b74:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004b78:	f04f 0100 	mov.w	r1, #0
 8004b7c:	bf0c      	ite	eq
 8004b7e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004b82:	2340      	movne	r3, #64	; 0x40
 8004b84:	2000      	movs	r0, #0
 8004b86:	6031      	str	r1, [r6, #0]
 8004b88:	602b      	str	r3, [r5, #0]
 8004b8a:	b016      	add	sp, #88	; 0x58
 8004b8c:	bd70      	pop	{r4, r5, r6, pc}
 8004b8e:	466a      	mov	r2, sp
 8004b90:	f000 f848 	bl	8004c24 <_fstat_r>
 8004b94:	2800      	cmp	r0, #0
 8004b96:	dbec      	blt.n	8004b72 <__swhatbuf_r+0x12>
 8004b98:	9901      	ldr	r1, [sp, #4]
 8004b9a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004b9e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004ba2:	4259      	negs	r1, r3
 8004ba4:	4159      	adcs	r1, r3
 8004ba6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004baa:	e7eb      	b.n	8004b84 <__swhatbuf_r+0x24>

08004bac <__smakebuf_r>:
 8004bac:	898b      	ldrh	r3, [r1, #12]
 8004bae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004bb0:	079d      	lsls	r5, r3, #30
 8004bb2:	4606      	mov	r6, r0
 8004bb4:	460c      	mov	r4, r1
 8004bb6:	d507      	bpl.n	8004bc8 <__smakebuf_r+0x1c>
 8004bb8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004bbc:	6023      	str	r3, [r4, #0]
 8004bbe:	6123      	str	r3, [r4, #16]
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	6163      	str	r3, [r4, #20]
 8004bc4:	b002      	add	sp, #8
 8004bc6:	bd70      	pop	{r4, r5, r6, pc}
 8004bc8:	ab01      	add	r3, sp, #4
 8004bca:	466a      	mov	r2, sp
 8004bcc:	f7ff ffc8 	bl	8004b60 <__swhatbuf_r>
 8004bd0:	9900      	ldr	r1, [sp, #0]
 8004bd2:	4605      	mov	r5, r0
 8004bd4:	4630      	mov	r0, r6
 8004bd6:	f7ff fb0f 	bl	80041f8 <_malloc_r>
 8004bda:	b948      	cbnz	r0, 8004bf0 <__smakebuf_r+0x44>
 8004bdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004be0:	059a      	lsls	r2, r3, #22
 8004be2:	d4ef      	bmi.n	8004bc4 <__smakebuf_r+0x18>
 8004be4:	f023 0303 	bic.w	r3, r3, #3
 8004be8:	f043 0302 	orr.w	r3, r3, #2
 8004bec:	81a3      	strh	r3, [r4, #12]
 8004bee:	e7e3      	b.n	8004bb8 <__smakebuf_r+0xc>
 8004bf0:	89a3      	ldrh	r3, [r4, #12]
 8004bf2:	6020      	str	r0, [r4, #0]
 8004bf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bf8:	81a3      	strh	r3, [r4, #12]
 8004bfa:	9b00      	ldr	r3, [sp, #0]
 8004bfc:	6163      	str	r3, [r4, #20]
 8004bfe:	9b01      	ldr	r3, [sp, #4]
 8004c00:	6120      	str	r0, [r4, #16]
 8004c02:	b15b      	cbz	r3, 8004c1c <__smakebuf_r+0x70>
 8004c04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c08:	4630      	mov	r0, r6
 8004c0a:	f000 f81d 	bl	8004c48 <_isatty_r>
 8004c0e:	b128      	cbz	r0, 8004c1c <__smakebuf_r+0x70>
 8004c10:	89a3      	ldrh	r3, [r4, #12]
 8004c12:	f023 0303 	bic.w	r3, r3, #3
 8004c16:	f043 0301 	orr.w	r3, r3, #1
 8004c1a:	81a3      	strh	r3, [r4, #12]
 8004c1c:	89a3      	ldrh	r3, [r4, #12]
 8004c1e:	431d      	orrs	r5, r3
 8004c20:	81a5      	strh	r5, [r4, #12]
 8004c22:	e7cf      	b.n	8004bc4 <__smakebuf_r+0x18>

08004c24 <_fstat_r>:
 8004c24:	b538      	push	{r3, r4, r5, lr}
 8004c26:	4d07      	ldr	r5, [pc, #28]	; (8004c44 <_fstat_r+0x20>)
 8004c28:	2300      	movs	r3, #0
 8004c2a:	4604      	mov	r4, r0
 8004c2c:	4608      	mov	r0, r1
 8004c2e:	4611      	mov	r1, r2
 8004c30:	602b      	str	r3, [r5, #0]
 8004c32:	f7fb ff0e 	bl	8000a52 <_fstat>
 8004c36:	1c43      	adds	r3, r0, #1
 8004c38:	d102      	bne.n	8004c40 <_fstat_r+0x1c>
 8004c3a:	682b      	ldr	r3, [r5, #0]
 8004c3c:	b103      	cbz	r3, 8004c40 <_fstat_r+0x1c>
 8004c3e:	6023      	str	r3, [r4, #0]
 8004c40:	bd38      	pop	{r3, r4, r5, pc}
 8004c42:	bf00      	nop
 8004c44:	20000264 	.word	0x20000264

08004c48 <_isatty_r>:
 8004c48:	b538      	push	{r3, r4, r5, lr}
 8004c4a:	4d06      	ldr	r5, [pc, #24]	; (8004c64 <_isatty_r+0x1c>)
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	4604      	mov	r4, r0
 8004c50:	4608      	mov	r0, r1
 8004c52:	602b      	str	r3, [r5, #0]
 8004c54:	f7fb ff0d 	bl	8000a72 <_isatty>
 8004c58:	1c43      	adds	r3, r0, #1
 8004c5a:	d102      	bne.n	8004c62 <_isatty_r+0x1a>
 8004c5c:	682b      	ldr	r3, [r5, #0]
 8004c5e:	b103      	cbz	r3, 8004c62 <_isatty_r+0x1a>
 8004c60:	6023      	str	r3, [r4, #0]
 8004c62:	bd38      	pop	{r3, r4, r5, pc}
 8004c64:	20000264 	.word	0x20000264

08004c68 <_init>:
 8004c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c6a:	bf00      	nop
 8004c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c6e:	bc08      	pop	{r3}
 8004c70:	469e      	mov	lr, r3
 8004c72:	4770      	bx	lr

08004c74 <_fini>:
 8004c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c76:	bf00      	nop
 8004c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c7a:	bc08      	pop	{r3}
 8004c7c:	469e      	mov	lr, r3
 8004c7e:	4770      	bx	lr
