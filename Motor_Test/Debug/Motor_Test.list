
Motor_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045b4  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  0800474c  0800474c  0001474c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047ac  080047ac  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080047ac  080047ac  000147ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047b4  080047b4  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047b4  080047b4  000147b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047b8  080047b8  000147b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080047bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000034c  20000068  08004824  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003b4  08004824  000203b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c883  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020d4  00000000  00000000  0002c95e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bf8  00000000  00000000  0002ea38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000938  00000000  00000000  0002f630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000177cb  00000000  00000000  0002ff68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000eef5  00000000  00000000  00047733  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f716  00000000  00000000  00056628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000036cc  00000000  00000000  000e5d40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000e940c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000068 	.word	0x20000068
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004734 	.word	0x08004734

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000006c 	.word	0x2000006c
 80001d4:	08004734 	.word	0x08004734

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004da:	2300      	movs	r3, #0
 80004dc:	607b      	str	r3, [r7, #4]
 80004de:	4b17      	ldr	r3, [pc, #92]	; (800053c <MX_DMA_Init+0x68>)
 80004e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e2:	4a16      	ldr	r2, [pc, #88]	; (800053c <MX_DMA_Init+0x68>)
 80004e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004e8:	6313      	str	r3, [r2, #48]	; 0x30
 80004ea:	4b14      	ldr	r3, [pc, #80]	; (800053c <MX_DMA_Init+0x68>)
 80004ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80004f2:	607b      	str	r3, [r7, #4]
 80004f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80004f6:	2300      	movs	r3, #0
 80004f8:	603b      	str	r3, [r7, #0]
 80004fa:	4b10      	ldr	r3, [pc, #64]	; (800053c <MX_DMA_Init+0x68>)
 80004fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fe:	4a0f      	ldr	r2, [pc, #60]	; (800053c <MX_DMA_Init+0x68>)
 8000500:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000504:	6313      	str	r3, [r2, #48]	; 0x30
 8000506:	4b0d      	ldr	r3, [pc, #52]	; (800053c <MX_DMA_Init+0x68>)
 8000508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800050e:	603b      	str	r3, [r7, #0]
 8000510:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000512:	2200      	movs	r2, #0
 8000514:	2100      	movs	r1, #0
 8000516:	2010      	movs	r0, #16
 8000518:	f000 ff6d 	bl	80013f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800051c:	2010      	movs	r0, #16
 800051e:	f000 ff86 	bl	800142e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000522:	2200      	movs	r2, #0
 8000524:	2100      	movs	r1, #0
 8000526:	203a      	movs	r0, #58	; 0x3a
 8000528:	f000 ff65 	bl	80013f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800052c:	203a      	movs	r0, #58	; 0x3a
 800052e:	f000 ff7e 	bl	800142e <HAL_NVIC_EnableIRQ>

}
 8000532:	bf00      	nop
 8000534:	3708      	adds	r7, #8
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	40023800 	.word	0x40023800

08000540 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b08a      	sub	sp, #40	; 0x28
 8000544:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000546:	f107 0314 	add.w	r3, r7, #20
 800054a:	2200      	movs	r2, #0
 800054c:	601a      	str	r2, [r3, #0]
 800054e:	605a      	str	r2, [r3, #4]
 8000550:	609a      	str	r2, [r3, #8]
 8000552:	60da      	str	r2, [r3, #12]
 8000554:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000556:	2300      	movs	r3, #0
 8000558:	613b      	str	r3, [r7, #16]
 800055a:	4b41      	ldr	r3, [pc, #260]	; (8000660 <MX_GPIO_Init+0x120>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055e:	4a40      	ldr	r2, [pc, #256]	; (8000660 <MX_GPIO_Init+0x120>)
 8000560:	f043 0304 	orr.w	r3, r3, #4
 8000564:	6313      	str	r3, [r2, #48]	; 0x30
 8000566:	4b3e      	ldr	r3, [pc, #248]	; (8000660 <MX_GPIO_Init+0x120>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056a:	f003 0304 	and.w	r3, r3, #4
 800056e:	613b      	str	r3, [r7, #16]
 8000570:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000572:	2300      	movs	r3, #0
 8000574:	60fb      	str	r3, [r7, #12]
 8000576:	4b3a      	ldr	r3, [pc, #232]	; (8000660 <MX_GPIO_Init+0x120>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057a:	4a39      	ldr	r2, [pc, #228]	; (8000660 <MX_GPIO_Init+0x120>)
 800057c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000580:	6313      	str	r3, [r2, #48]	; 0x30
 8000582:	4b37      	ldr	r3, [pc, #220]	; (8000660 <MX_GPIO_Init+0x120>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800058a:	60fb      	str	r3, [r7, #12]
 800058c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800058e:	2300      	movs	r3, #0
 8000590:	60bb      	str	r3, [r7, #8]
 8000592:	4b33      	ldr	r3, [pc, #204]	; (8000660 <MX_GPIO_Init+0x120>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000596:	4a32      	ldr	r2, [pc, #200]	; (8000660 <MX_GPIO_Init+0x120>)
 8000598:	f043 0301 	orr.w	r3, r3, #1
 800059c:	6313      	str	r3, [r2, #48]	; 0x30
 800059e:	4b30      	ldr	r3, [pc, #192]	; (8000660 <MX_GPIO_Init+0x120>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	f003 0301 	and.w	r3, r3, #1
 80005a6:	60bb      	str	r3, [r7, #8]
 80005a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	607b      	str	r3, [r7, #4]
 80005ae:	4b2c      	ldr	r3, [pc, #176]	; (8000660 <MX_GPIO_Init+0x120>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	4a2b      	ldr	r2, [pc, #172]	; (8000660 <MX_GPIO_Init+0x120>)
 80005b4:	f043 0302 	orr.w	r3, r3, #2
 80005b8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ba:	4b29      	ldr	r3, [pc, #164]	; (8000660 <MX_GPIO_Init+0x120>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	f003 0302 	and.w	r3, r3, #2
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Right_Front_Pin, GPIO_PIN_RESET);
 80005c6:	2200      	movs	r2, #0
 80005c8:	f44f 7108 	mov.w	r1, #544	; 0x220
 80005cc:	4825      	ldr	r0, [pc, #148]	; (8000664 <MX_GPIO_Init+0x124>)
 80005ce:	f001 fc3d 	bl	8001e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Right_Back_GPIO_Port, Right_Back_Pin, GPIO_PIN_RESET);
 80005d2:	2200      	movs	r2, #0
 80005d4:	2180      	movs	r1, #128	; 0x80
 80005d6:	4824      	ldr	r0, [pc, #144]	; (8000668 <MX_GPIO_Init+0x128>)
 80005d8:	f001 fc38 	bl	8001e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Left_Front_Pin|Left_Back_Pin, GPIO_PIN_RESET);
 80005dc:	2200      	movs	r2, #0
 80005de:	2130      	movs	r1, #48	; 0x30
 80005e0:	4822      	ldr	r0, [pc, #136]	; (800066c <MX_GPIO_Init+0x12c>)
 80005e2:	f001 fc33 	bl	8001e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005ec:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80005f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f2:	2300      	movs	r3, #0
 80005f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005f6:	f107 0314 	add.w	r3, r7, #20
 80005fa:	4619      	mov	r1, r3
 80005fc:	481a      	ldr	r0, [pc, #104]	; (8000668 <MX_GPIO_Init+0x128>)
 80005fe:	f001 faa1 	bl	8001b44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|Right_Front_Pin;
 8000602:	f44f 7308 	mov.w	r3, #544	; 0x220
 8000606:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000608:	2301      	movs	r3, #1
 800060a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060c:	2300      	movs	r3, #0
 800060e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000610:	2300      	movs	r3, #0
 8000612:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000614:	f107 0314 	add.w	r3, r7, #20
 8000618:	4619      	mov	r1, r3
 800061a:	4812      	ldr	r0, [pc, #72]	; (8000664 <MX_GPIO_Init+0x124>)
 800061c:	f001 fa92 	bl	8001b44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Right_Back_Pin;
 8000620:	2380      	movs	r3, #128	; 0x80
 8000622:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000624:	2301      	movs	r3, #1
 8000626:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000628:	2300      	movs	r3, #0
 800062a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800062c:	2300      	movs	r3, #0
 800062e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Right_Back_GPIO_Port, &GPIO_InitStruct);
 8000630:	f107 0314 	add.w	r3, r7, #20
 8000634:	4619      	mov	r1, r3
 8000636:	480c      	ldr	r0, [pc, #48]	; (8000668 <MX_GPIO_Init+0x128>)
 8000638:	f001 fa84 	bl	8001b44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Left_Front_Pin|Left_Back_Pin;
 800063c:	2330      	movs	r3, #48	; 0x30
 800063e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000640:	2301      	movs	r3, #1
 8000642:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000644:	2300      	movs	r3, #0
 8000646:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000648:	2300      	movs	r3, #0
 800064a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800064c:	f107 0314 	add.w	r3, r7, #20
 8000650:	4619      	mov	r1, r3
 8000652:	4806      	ldr	r0, [pc, #24]	; (800066c <MX_GPIO_Init+0x12c>)
 8000654:	f001 fa76 	bl	8001b44 <HAL_GPIO_Init>

}
 8000658:	bf00      	nop
 800065a:	3728      	adds	r7, #40	; 0x28
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	40023800 	.word	0x40023800
 8000664:	40020000 	.word	0x40020000
 8000668:	40020800 	.word	0x40020800
 800066c:	40020400 	.word	0x40020400

08000670 <__io_putchar>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

int __io_putchar(int ch)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, &ch, 1, 50);
 8000678:	1d39      	adds	r1, r7, #4
 800067a:	2332      	movs	r3, #50	; 0x32
 800067c:	2201      	movs	r2, #1
 800067e:	4804      	ldr	r0, [pc, #16]	; (8000690 <__io_putchar+0x20>)
 8000680:	f002 fd2e 	bl	80030e0 <HAL_UART_Transmit>
	return ch;
 8000684:	687b      	ldr	r3, [r7, #4]
}
 8000686:	4618      	mov	r0, r3
 8000688:	3708      	adds	r7, #8
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	20000160 	.word	0x20000160

08000694 <__io_getchar>:

int __io_getchar(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
	int ch; // buf에 저장됨과 동시에, ch에도 저장
	while(1)
	{
		if(HAL_UART_Receive(&huart2, &ch, 1, 50) == HAL_OK)
 800069a:	1d39      	adds	r1, r7, #4
 800069c:	2332      	movs	r3, #50	; 0x32
 800069e:	2201      	movs	r2, #1
 80006a0:	4809      	ldr	r0, [pc, #36]	; (80006c8 <__io_getchar+0x34>)
 80006a2:	f002 fdaf 	bl	8003204 <HAL_UART_Receive>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d000      	beq.n	80006ae <__io_getchar+0x1a>
 80006ac:	e7f5      	b.n	800069a <__io_getchar+0x6>
			break;
 80006ae:	bf00      	nop
	}
	HAL_UART_Transmit(&huart2, &ch, 1, 50);
 80006b0:	1d39      	adds	r1, r7, #4
 80006b2:	2332      	movs	r3, #50	; 0x32
 80006b4:	2201      	movs	r2, #1
 80006b6:	4804      	ldr	r0, [pc, #16]	; (80006c8 <__io_getchar+0x34>)
 80006b8:	f002 fd12 	bl	80030e0 <HAL_UART_Transmit>

	return ch;
 80006bc:	687b      	ldr	r3, [r7, #4]
}
 80006be:	4618      	mov	r0, r3
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000160 	.word	0x20000160

080006cc <Forward>:


void Forward()
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Right_Front_GPIO_Port, Right_Front_Pin, 1);
 80006d0:	2201      	movs	r2, #1
 80006d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006d6:	480a      	ldr	r0, [pc, #40]	; (8000700 <Forward+0x34>)
 80006d8:	f001 fbb8 	bl	8001e4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Right_Back_GPIO_Port, Right_Back_Pin, 0);
 80006dc:	2200      	movs	r2, #0
 80006de:	2180      	movs	r1, #128	; 0x80
 80006e0:	4808      	ldr	r0, [pc, #32]	; (8000704 <Forward+0x38>)
 80006e2:	f001 fbb3 	bl	8001e4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Left_Front_GPIO_Port, Left_Front_Pin, 0);
 80006e6:	2200      	movs	r2, #0
 80006e8:	2110      	movs	r1, #16
 80006ea:	4807      	ldr	r0, [pc, #28]	; (8000708 <Forward+0x3c>)
 80006ec:	f001 fbae 	bl	8001e4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Left_Back_GPIO_Port, Left_Back_Pin, 1);
 80006f0:	2201      	movs	r2, #1
 80006f2:	2120      	movs	r1, #32
 80006f4:	4804      	ldr	r0, [pc, #16]	; (8000708 <Forward+0x3c>)
 80006f6:	f001 fba9 	bl	8001e4c <HAL_GPIO_WritePin>
}
 80006fa:	bf00      	nop
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40020000 	.word	0x40020000
 8000704:	40020800 	.word	0x40020800
 8000708:	40020400 	.word	0x40020400

0800070c <Backward>:

void Backward()
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Right_Front_GPIO_Port, Right_Front_Pin, 0);
 8000710:	2200      	movs	r2, #0
 8000712:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000716:	480a      	ldr	r0, [pc, #40]	; (8000740 <Backward+0x34>)
 8000718:	f001 fb98 	bl	8001e4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Right_Back_GPIO_Port, Right_Back_Pin, 1);
 800071c:	2201      	movs	r2, #1
 800071e:	2180      	movs	r1, #128	; 0x80
 8000720:	4808      	ldr	r0, [pc, #32]	; (8000744 <Backward+0x38>)
 8000722:	f001 fb93 	bl	8001e4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Left_Front_GPIO_Port, Left_Front_Pin, 1);
 8000726:	2201      	movs	r2, #1
 8000728:	2110      	movs	r1, #16
 800072a:	4807      	ldr	r0, [pc, #28]	; (8000748 <Backward+0x3c>)
 800072c:	f001 fb8e 	bl	8001e4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Left_Back_GPIO_Port, Left_Back_Pin, 0);
 8000730:	2200      	movs	r2, #0
 8000732:	2120      	movs	r1, #32
 8000734:	4804      	ldr	r0, [pc, #16]	; (8000748 <Backward+0x3c>)
 8000736:	f001 fb89 	bl	8001e4c <HAL_GPIO_WritePin>
}
 800073a:	bf00      	nop
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40020000 	.word	0x40020000
 8000744:	40020800 	.word	0x40020800
 8000748:	40020400 	.word	0x40020400

0800074c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000750:	f000 fce0 	bl	8001114 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000754:	f000 f8be 	bl	80008d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000758:	f7ff fef2 	bl	8000540 <MX_GPIO_Init>
  MX_DMA_Init();
 800075c:	f7ff feba 	bl	80004d4 <MX_DMA_Init>
  MX_TIM10_Init();
 8000760:	f000 fa42 	bl	8000be8 <MX_TIM10_Init>
  MX_TIM11_Init();
 8000764:	f000 fa8e 	bl	8000c84 <MX_TIM11_Init>
  MX_USART2_UART_Init();
 8000768:	f000 fb9e 	bl	8000ea8 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800076c:	f000 fb72 	bl	8000e54 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Program Start!\r\n");
 8000770:	484d      	ldr	r0, [pc, #308]	; (80008a8 <main+0x15c>)
 8000772:	f003 fc4b 	bl	800400c <puts>
  HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1); // Left
 8000776:	2100      	movs	r1, #0
 8000778:	484c      	ldr	r0, [pc, #304]	; (80008ac <main+0x160>)
 800077a:	f002 f8c1 	bl	8002900 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1); // Right
 800077e:	2100      	movs	r1, #0
 8000780:	484b      	ldr	r0, [pc, #300]	; (80008b0 <main+0x164>)
 8000782:	f002 f8bd 	bl	8002900 <HAL_TIM_PWM_Start>
//  HAL_UART_Receive(&huart2, &buf[1], 1, 50);
//  HAL_UART_Transmit(&huart2, &buf[1], 1, 50);
//  HAL_UART_Receive_IT(&huart1, &buf, sizeof(buf));
//  HAL_UART_Receive_IT(&huart2, &buf, sizeof(buf));

  HAL_UART_Receive_DMA(&huart1, buf, sizeof(buf));
 8000786:	2201      	movs	r2, #1
 8000788:	494a      	ldr	r1, [pc, #296]	; (80008b4 <main+0x168>)
 800078a:	484b      	ldr	r0, [pc, #300]	; (80008b8 <main+0x16c>)
 800078c:	f002 fddc 	bl	8003348 <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA(&huart2, buf, sizeof(buf));
 8000790:	2201      	movs	r2, #1
 8000792:	4948      	ldr	r1, [pc, #288]	; (80008b4 <main+0x168>)
 8000794:	4849      	ldr	r0, [pc, #292]	; (80008bc <main+0x170>)
 8000796:	f002 fdd7 	bl	8003348 <HAL_UART_Receive_DMA>

    /* USER CODE BEGIN 3 */
//		printf("Press Direction key and [Enter]....\r\n"); // 숫자 키를 입력하라고 프롬포트 내보내 줌.
//		scanf("%c", &i);

		if(buf[0] != 0)
 800079a:	4b46      	ldr	r3, [pc, #280]	; (80008b4 <main+0x168>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d07a      	beq.n	8000898 <main+0x14c>
		{
			switch(buf[0])
 80007a2:	4b44      	ldr	r3, [pc, #272]	; (80008b4 <main+0x168>)
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	3b61      	subs	r3, #97	; 0x61
 80007a8:	2b16      	cmp	r3, #22
 80007aa:	d871      	bhi.n	8000890 <main+0x144>
 80007ac:	a201      	add	r2, pc, #4	; (adr r2, 80007b4 <main+0x68>)
 80007ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007b2:	bf00      	nop
 80007b4:	08000851 	.word	0x08000851
 80007b8:	08000891 	.word	0x08000891
 80007bc:	08000891 	.word	0x08000891
 80007c0:	08000871 	.word	0x08000871
 80007c4:	08000891 	.word	0x08000891
 80007c8:	08000891 	.word	0x08000891
 80007cc:	08000891 	.word	0x08000891
 80007d0:	08000891 	.word	0x08000891
 80007d4:	08000891 	.word	0x08000891
 80007d8:	08000891 	.word	0x08000891
 80007dc:	08000891 	.word	0x08000891
 80007e0:	08000891 	.word	0x08000891
 80007e4:	08000891 	.word	0x08000891
 80007e8:	08000891 	.word	0x08000891
 80007ec:	08000891 	.word	0x08000891
 80007f0:	08000891 	.word	0x08000891
 80007f4:	08000891 	.word	0x08000891
 80007f8:	08000891 	.word	0x08000891
 80007fc:	08000831 	.word	0x08000831
 8000800:	08000891 	.word	0x08000891
 8000804:	08000891 	.word	0x08000891
 8000808:	08000891 	.word	0x08000891
 800080c:	08000811 	.word	0x08000811
			{
			case 'w' :
				Forward();
 8000810:	f7ff ff5c 	bl	80006cc <Forward>
				htim10.Instance->CCR1 = 10000; // Left
 8000814:	4b25      	ldr	r3, [pc, #148]	; (80008ac <main+0x160>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	f242 7210 	movw	r2, #10000	; 0x2710
 800081c:	635a      	str	r2, [r3, #52]	; 0x34
				htim11.Instance->CCR1 = 10000; // Right
 800081e:	4b24      	ldr	r3, [pc, #144]	; (80008b0 <main+0x164>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	f242 7210 	movw	r2, #10000	; 0x2710
 8000826:	635a      	str	r2, [r3, #52]	; 0x34
				printf("Forward \r\n");
 8000828:	4825      	ldr	r0, [pc, #148]	; (80008c0 <main+0x174>)
 800082a:	f003 fbef 	bl	800400c <puts>
				break;
 800082e:	e033      	b.n	8000898 <main+0x14c>
			case 's' :
				Backward();
 8000830:	f7ff ff6c 	bl	800070c <Backward>
				htim10.Instance->CCR1 = 10000; // Left
 8000834:	4b1d      	ldr	r3, [pc, #116]	; (80008ac <main+0x160>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	f242 7210 	movw	r2, #10000	; 0x2710
 800083c:	635a      	str	r2, [r3, #52]	; 0x34
				htim11.Instance->CCR1 = 10000; // Right
 800083e:	4b1c      	ldr	r3, [pc, #112]	; (80008b0 <main+0x164>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	f242 7210 	movw	r2, #10000	; 0x2710
 8000846:	635a      	str	r2, [r3, #52]	; 0x34
				printf("Backward \r\n");
 8000848:	481e      	ldr	r0, [pc, #120]	; (80008c4 <main+0x178>)
 800084a:	f003 fbdf 	bl	800400c <puts>
				break;
 800084e:	e023      	b.n	8000898 <main+0x14c>
			case 'a' :
				Forward();
 8000850:	f7ff ff3c 	bl	80006cc <Forward>
				htim10.Instance->CCR1 = 7500; // Left
 8000854:	4b15      	ldr	r3, [pc, #84]	; (80008ac <main+0x160>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	f641 524c 	movw	r2, #7500	; 0x1d4c
 800085c:	635a      	str	r2, [r3, #52]	; 0x34
				htim11.Instance->CCR1 = 10000; // Right
 800085e:	4b14      	ldr	r3, [pc, #80]	; (80008b0 <main+0x164>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	f242 7210 	movw	r2, #10000	; 0x2710
 8000866:	635a      	str	r2, [r3, #52]	; 0x34
				printf("Right \r\n");
 8000868:	4817      	ldr	r0, [pc, #92]	; (80008c8 <main+0x17c>)
 800086a:	f003 fbcf 	bl	800400c <puts>
				break;
 800086e:	e013      	b.n	8000898 <main+0x14c>
			case 'd' :
				Forward();
 8000870:	f7ff ff2c 	bl	80006cc <Forward>
				htim10.Instance->CCR1 = 10000; // Left
 8000874:	4b0d      	ldr	r3, [pc, #52]	; (80008ac <main+0x160>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	f242 7210 	movw	r2, #10000	; 0x2710
 800087c:	635a      	str	r2, [r3, #52]	; 0x34
				htim11.Instance->CCR1 = 7500; // Right
 800087e:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <main+0x164>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8000886:	635a      	str	r2, [r3, #52]	; 0x34
				printf("Left \r\n");
 8000888:	4810      	ldr	r0, [pc, #64]	; (80008cc <main+0x180>)
 800088a:	f003 fbbf 	bl	800400c <puts>
				break;
 800088e:	e003      	b.n	8000898 <main+0x14c>
			default :
				printf("Error \r\n");
 8000890:	480f      	ldr	r0, [pc, #60]	; (80008d0 <main+0x184>)
 8000892:	f003 fbbb 	bl	800400c <puts>
				break;
 8000896:	bf00      	nop
			}
		}
		buf[0] = 0;
 8000898:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <main+0x168>)
 800089a:	2200      	movs	r2, #0
 800089c:	701a      	strb	r2, [r3, #0]
  	    HAL_Delay(100);
 800089e:	2064      	movs	r0, #100	; 0x64
 80008a0:	f000 fcaa 	bl	80011f8 <HAL_Delay>
		if(buf[0] != 0)
 80008a4:	e779      	b.n	800079a <main+0x4e>
 80008a6:	bf00      	nop
 80008a8:	0800474c 	.word	0x0800474c
 80008ac:	2000008c 	.word	0x2000008c
 80008b0:	200000d4 	.word	0x200000d4
 80008b4:	20000084 	.word	0x20000084
 80008b8:	2000011c 	.word	0x2000011c
 80008bc:	20000160 	.word	0x20000160
 80008c0:	0800475c 	.word	0x0800475c
 80008c4:	08004768 	.word	0x08004768
 80008c8:	08004774 	.word	0x08004774
 80008cc:	0800477c 	.word	0x0800477c
 80008d0:	08004784 	.word	0x08004784

080008d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b094      	sub	sp, #80	; 0x50
 80008d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008da:	f107 0320 	add.w	r3, r7, #32
 80008de:	2230      	movs	r2, #48	; 0x30
 80008e0:	2100      	movs	r1, #0
 80008e2:	4618      	mov	r0, r3
 80008e4:	f003 fc72 	bl	80041cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008e8:	f107 030c 	add.w	r3, r7, #12
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
 80008f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f8:	2300      	movs	r3, #0
 80008fa:	60bb      	str	r3, [r7, #8]
 80008fc:	4b27      	ldr	r3, [pc, #156]	; (800099c <SystemClock_Config+0xc8>)
 80008fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000900:	4a26      	ldr	r2, [pc, #152]	; (800099c <SystemClock_Config+0xc8>)
 8000902:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000906:	6413      	str	r3, [r2, #64]	; 0x40
 8000908:	4b24      	ldr	r3, [pc, #144]	; (800099c <SystemClock_Config+0xc8>)
 800090a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000910:	60bb      	str	r3, [r7, #8]
 8000912:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000914:	2300      	movs	r3, #0
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	4b21      	ldr	r3, [pc, #132]	; (80009a0 <SystemClock_Config+0xcc>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a20      	ldr	r2, [pc, #128]	; (80009a0 <SystemClock_Config+0xcc>)
 800091e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000922:	6013      	str	r3, [r2, #0]
 8000924:	4b1e      	ldr	r3, [pc, #120]	; (80009a0 <SystemClock_Config+0xcc>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800092c:	607b      	str	r3, [r7, #4]
 800092e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000930:	2301      	movs	r3, #1
 8000932:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000934:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000938:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800093a:	2302      	movs	r3, #2
 800093c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800093e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000942:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000944:	2304      	movs	r3, #4
 8000946:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000948:	2364      	movs	r3, #100	; 0x64
 800094a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800094c:	2302      	movs	r3, #2
 800094e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000950:	2304      	movs	r3, #4
 8000952:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000954:	f107 0320 	add.w	r3, r7, #32
 8000958:	4618      	mov	r0, r3
 800095a:	f001 fa91 	bl	8001e80 <HAL_RCC_OscConfig>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000964:	f000 f81e 	bl	80009a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000968:	230f      	movs	r3, #15
 800096a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800096c:	2302      	movs	r3, #2
 800096e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000970:	2300      	movs	r3, #0
 8000972:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000974:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000978:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800097a:	2300      	movs	r3, #0
 800097c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800097e:	f107 030c 	add.w	r3, r7, #12
 8000982:	2103      	movs	r1, #3
 8000984:	4618      	mov	r0, r3
 8000986:	f001 fcf3 	bl	8002370 <HAL_RCC_ClockConfig>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000990:	f000 f808 	bl	80009a4 <Error_Handler>
  }
}
 8000994:	bf00      	nop
 8000996:	3750      	adds	r7, #80	; 0x50
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	40023800 	.word	0x40023800
 80009a0:	40007000 	.word	0x40007000

080009a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a8:	b672      	cpsid	i
}
 80009aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009ac:	e7fe      	b.n	80009ac <Error_Handler+0x8>
	...

080009b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	607b      	str	r3, [r7, #4]
 80009ba:	4b10      	ldr	r3, [pc, #64]	; (80009fc <HAL_MspInit+0x4c>)
 80009bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009be:	4a0f      	ldr	r2, [pc, #60]	; (80009fc <HAL_MspInit+0x4c>)
 80009c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009c4:	6453      	str	r3, [r2, #68]	; 0x44
 80009c6:	4b0d      	ldr	r3, [pc, #52]	; (80009fc <HAL_MspInit+0x4c>)
 80009c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	603b      	str	r3, [r7, #0]
 80009d6:	4b09      	ldr	r3, [pc, #36]	; (80009fc <HAL_MspInit+0x4c>)
 80009d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009da:	4a08      	ldr	r2, [pc, #32]	; (80009fc <HAL_MspInit+0x4c>)
 80009dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009e0:	6413      	str	r3, [r2, #64]	; 0x40
 80009e2:	4b06      	ldr	r3, [pc, #24]	; (80009fc <HAL_MspInit+0x4c>)
 80009e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ea:	603b      	str	r3, [r7, #0]
 80009ec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009ee:	2007      	movs	r0, #7
 80009f0:	f000 fcf6 	bl	80013e0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009f4:	bf00      	nop
 80009f6:	3708      	adds	r7, #8
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40023800 	.word	0x40023800

08000a00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a04:	e7fe      	b.n	8000a04 <NMI_Handler+0x4>

08000a06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a06:	b480      	push	{r7}
 8000a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a0a:	e7fe      	b.n	8000a0a <HardFault_Handler+0x4>

08000a0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a10:	e7fe      	b.n	8000a10 <MemManage_Handler+0x4>

08000a12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a16:	e7fe      	b.n	8000a16 <BusFault_Handler+0x4>

08000a18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a1c:	e7fe      	b.n	8000a1c <UsageFault_Handler+0x4>

08000a1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a22:	bf00      	nop
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr

08000a2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr

08000a3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr

08000a48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a4c:	f000 fbb4 	bl	80011b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a50:	bf00      	nop
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000a58:	4802      	ldr	r0, [pc, #8]	; (8000a64 <DMA1_Stream5_IRQHandler+0x10>)
 8000a5a:	f000 fe09 	bl	8001670 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	20000204 	.word	0x20000204

08000a68 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000a6c:	4802      	ldr	r0, [pc, #8]	; (8000a78 <DMA2_Stream2_IRQHandler+0x10>)
 8000a6e:	f000 fdff 	bl	8001670 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	200001a4 	.word	0x200001a4

08000a7c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b086      	sub	sp, #24
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	60f8      	str	r0, [r7, #12]
 8000a84:	60b9      	str	r1, [r7, #8]
 8000a86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a88:	2300      	movs	r3, #0
 8000a8a:	617b      	str	r3, [r7, #20]
 8000a8c:	e00a      	b.n	8000aa4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a8e:	f7ff fe01 	bl	8000694 <__io_getchar>
 8000a92:	4601      	mov	r1, r0
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	1c5a      	adds	r2, r3, #1
 8000a98:	60ba      	str	r2, [r7, #8]
 8000a9a:	b2ca      	uxtb	r2, r1
 8000a9c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	617b      	str	r3, [r7, #20]
 8000aa4:	697a      	ldr	r2, [r7, #20]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	dbf0      	blt.n	8000a8e <_read+0x12>
  }

  return len;
 8000aac:	687b      	ldr	r3, [r7, #4]
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3718      	adds	r7, #24
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}

08000ab6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ab6:	b580      	push	{r7, lr}
 8000ab8:	b086      	sub	sp, #24
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	60f8      	str	r0, [r7, #12]
 8000abe:	60b9      	str	r1, [r7, #8]
 8000ac0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	617b      	str	r3, [r7, #20]
 8000ac6:	e009      	b.n	8000adc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	1c5a      	adds	r2, r3, #1
 8000acc:	60ba      	str	r2, [r7, #8]
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff fdcd 	bl	8000670 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	3301      	adds	r3, #1
 8000ada:	617b      	str	r3, [r7, #20]
 8000adc:	697a      	ldr	r2, [r7, #20]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	dbf1      	blt.n	8000ac8 <_write+0x12>
  }
  return len;
 8000ae4:	687b      	ldr	r3, [r7, #4]
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3718      	adds	r7, #24
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}

08000aee <_close>:

int _close(int file)
{
 8000aee:	b480      	push	{r7}
 8000af0:	b083      	sub	sp, #12
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000af6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr

08000b06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b06:	b480      	push	{r7}
 8000b08:	b083      	sub	sp, #12
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	6078      	str	r0, [r7, #4]
 8000b0e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b16:	605a      	str	r2, [r3, #4]
  return 0;
 8000b18:	2300      	movs	r3, #0
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr

08000b26 <_isatty>:

int _isatty(int file)
{
 8000b26:	b480      	push	{r7}
 8000b28:	b083      	sub	sp, #12
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b2e:	2301      	movs	r3, #1
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr

08000b3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b085      	sub	sp, #20
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	60f8      	str	r0, [r7, #12]
 8000b44:	60b9      	str	r1, [r7, #8]
 8000b46:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b48:	2300      	movs	r3, #0
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3714      	adds	r7, #20
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
	...

08000b58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b60:	4a14      	ldr	r2, [pc, #80]	; (8000bb4 <_sbrk+0x5c>)
 8000b62:	4b15      	ldr	r3, [pc, #84]	; (8000bb8 <_sbrk+0x60>)
 8000b64:	1ad3      	subs	r3, r2, r3
 8000b66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b6c:	4b13      	ldr	r3, [pc, #76]	; (8000bbc <_sbrk+0x64>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d102      	bne.n	8000b7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b74:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <_sbrk+0x64>)
 8000b76:	4a12      	ldr	r2, [pc, #72]	; (8000bc0 <_sbrk+0x68>)
 8000b78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b7a:	4b10      	ldr	r3, [pc, #64]	; (8000bbc <_sbrk+0x64>)
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4413      	add	r3, r2
 8000b82:	693a      	ldr	r2, [r7, #16]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	d207      	bcs.n	8000b98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b88:	f003 fb6e 	bl	8004268 <__errno>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	220c      	movs	r2, #12
 8000b90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b92:	f04f 33ff 	mov.w	r3, #4294967295
 8000b96:	e009      	b.n	8000bac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b98:	4b08      	ldr	r3, [pc, #32]	; (8000bbc <_sbrk+0x64>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b9e:	4b07      	ldr	r3, [pc, #28]	; (8000bbc <_sbrk+0x64>)
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4413      	add	r3, r2
 8000ba6:	4a05      	ldr	r2, [pc, #20]	; (8000bbc <_sbrk+0x64>)
 8000ba8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000baa:	68fb      	ldr	r3, [r7, #12]
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	3718      	adds	r7, #24
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	20020000 	.word	0x20020000
 8000bb8:	00000400 	.word	0x00000400
 8000bbc:	20000088 	.word	0x20000088
 8000bc0:	200003b8 	.word	0x200003b8

08000bc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bc8:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <SystemInit+0x20>)
 8000bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bce:	4a05      	ldr	r2, [pc, #20]	; (8000be4 <SystemInit+0x20>)
 8000bd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bd8:	bf00      	nop
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <MX_TIM10_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b088      	sub	sp, #32
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bee:	1d3b      	adds	r3, r7, #4
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
 8000bfc:	615a      	str	r2, [r3, #20]
 8000bfe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000c00:	4b1e      	ldr	r3, [pc, #120]	; (8000c7c <MX_TIM10_Init+0x94>)
 8000c02:	4a1f      	ldr	r2, [pc, #124]	; (8000c80 <MX_TIM10_Init+0x98>)
 8000c04:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 10000-1;
 8000c06:	4b1d      	ldr	r3, [pc, #116]	; (8000c7c <MX_TIM10_Init+0x94>)
 8000c08:	f242 720f 	movw	r2, #9999	; 0x270f
 8000c0c:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c0e:	4b1b      	ldr	r3, [pc, #108]	; (8000c7c <MX_TIM10_Init+0x94>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000-1;
 8000c14:	4b19      	ldr	r3, [pc, #100]	; (8000c7c <MX_TIM10_Init+0x94>)
 8000c16:	f242 720f 	movw	r2, #9999	; 0x270f
 8000c1a:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c1c:	4b17      	ldr	r3, [pc, #92]	; (8000c7c <MX_TIM10_Init+0x94>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c22:	4b16      	ldr	r3, [pc, #88]	; (8000c7c <MX_TIM10_Init+0x94>)
 8000c24:	2280      	movs	r2, #128	; 0x80
 8000c26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000c28:	4814      	ldr	r0, [pc, #80]	; (8000c7c <MX_TIM10_Init+0x94>)
 8000c2a:	f001 fdc1 	bl	80027b0 <HAL_TIM_Base_Init>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_TIM10_Init+0x50>
  {
    Error_Handler();
 8000c34:	f7ff feb6 	bl	80009a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8000c38:	4810      	ldr	r0, [pc, #64]	; (8000c7c <MX_TIM10_Init+0x94>)
 8000c3a:	f001 fe08 	bl	800284e <HAL_TIM_PWM_Init>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_TIM10_Init+0x60>
  {
    Error_Handler();
 8000c44:	f7ff feae 	bl	80009a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c48:	2360      	movs	r3, #96	; 0x60
 8000c4a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c50:	2300      	movs	r3, #0
 8000c52:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c54:	2300      	movs	r3, #0
 8000c56:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c58:	1d3b      	adds	r3, r7, #4
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4807      	ldr	r0, [pc, #28]	; (8000c7c <MX_TIM10_Init+0x94>)
 8000c60:	f001 fefe 	bl	8002a60 <HAL_TIM_PWM_ConfigChannel>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_TIM10_Init+0x86>
  {
    Error_Handler();
 8000c6a:	f7ff fe9b 	bl	80009a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8000c6e:	4803      	ldr	r0, [pc, #12]	; (8000c7c <MX_TIM10_Init+0x94>)
 8000c70:	f000 f88e 	bl	8000d90 <HAL_TIM_MspPostInit>

}
 8000c74:	bf00      	nop
 8000c76:	3720      	adds	r7, #32
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	2000008c 	.word	0x2000008c
 8000c80:	40014400 	.word	0x40014400

08000c84 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b088      	sub	sp, #32
 8000c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c8a:	1d3b      	adds	r3, r7, #4
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
 8000c96:	611a      	str	r2, [r3, #16]
 8000c98:	615a      	str	r2, [r3, #20]
 8000c9a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000c9c:	4b1e      	ldr	r3, [pc, #120]	; (8000d18 <MX_TIM11_Init+0x94>)
 8000c9e:	4a1f      	ldr	r2, [pc, #124]	; (8000d1c <MX_TIM11_Init+0x98>)
 8000ca0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 10000-1;
 8000ca2:	4b1d      	ldr	r3, [pc, #116]	; (8000d18 <MX_TIM11_Init+0x94>)
 8000ca4:	f242 720f 	movw	r2, #9999	; 0x270f
 8000ca8:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000caa:	4b1b      	ldr	r3, [pc, #108]	; (8000d18 <MX_TIM11_Init+0x94>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 10000-1;
 8000cb0:	4b19      	ldr	r3, [pc, #100]	; (8000d18 <MX_TIM11_Init+0x94>)
 8000cb2:	f242 720f 	movw	r2, #9999	; 0x270f
 8000cb6:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cb8:	4b17      	ldr	r3, [pc, #92]	; (8000d18 <MX_TIM11_Init+0x94>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000cbe:	4b16      	ldr	r3, [pc, #88]	; (8000d18 <MX_TIM11_Init+0x94>)
 8000cc0:	2280      	movs	r2, #128	; 0x80
 8000cc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000cc4:	4814      	ldr	r0, [pc, #80]	; (8000d18 <MX_TIM11_Init+0x94>)
 8000cc6:	f001 fd73 	bl	80027b0 <HAL_TIM_Base_Init>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_TIM11_Init+0x50>
  {
    Error_Handler();
 8000cd0:	f7ff fe68 	bl	80009a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8000cd4:	4810      	ldr	r0, [pc, #64]	; (8000d18 <MX_TIM11_Init+0x94>)
 8000cd6:	f001 fdba 	bl	800284e <HAL_TIM_PWM_Init>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_TIM11_Init+0x60>
  {
    Error_Handler();
 8000ce0:	f7ff fe60 	bl	80009a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ce4:	2360      	movs	r3, #96	; 0x60
 8000ce6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cec:	2300      	movs	r3, #0
 8000cee:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cf4:	1d3b      	adds	r3, r7, #4
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4807      	ldr	r0, [pc, #28]	; (8000d18 <MX_TIM11_Init+0x94>)
 8000cfc:	f001 feb0 	bl	8002a60 <HAL_TIM_PWM_ConfigChannel>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_TIM11_Init+0x86>
  {
    Error_Handler();
 8000d06:	f7ff fe4d 	bl	80009a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8000d0a:	4803      	ldr	r0, [pc, #12]	; (8000d18 <MX_TIM11_Init+0x94>)
 8000d0c:	f000 f840 	bl	8000d90 <HAL_TIM_MspPostInit>

}
 8000d10:	bf00      	nop
 8000d12:	3720      	adds	r7, #32
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	200000d4 	.word	0x200000d4
 8000d1c:	40014800 	.word	0x40014800

08000d20 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a15      	ldr	r2, [pc, #84]	; (8000d84 <HAL_TIM_Base_MspInit+0x64>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d10e      	bne.n	8000d50 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	4b14      	ldr	r3, [pc, #80]	; (8000d88 <HAL_TIM_Base_MspInit+0x68>)
 8000d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3a:	4a13      	ldr	r2, [pc, #76]	; (8000d88 <HAL_TIM_Base_MspInit+0x68>)
 8000d3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d40:	6453      	str	r3, [r2, #68]	; 0x44
 8000d42:	4b11      	ldr	r3, [pc, #68]	; (8000d88 <HAL_TIM_Base_MspInit+0x68>)
 8000d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8000d4e:	e012      	b.n	8000d76 <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM11)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a0d      	ldr	r2, [pc, #52]	; (8000d8c <HAL_TIM_Base_MspInit+0x6c>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d10d      	bne.n	8000d76 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60bb      	str	r3, [r7, #8]
 8000d5e:	4b0a      	ldr	r3, [pc, #40]	; (8000d88 <HAL_TIM_Base_MspInit+0x68>)
 8000d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d62:	4a09      	ldr	r2, [pc, #36]	; (8000d88 <HAL_TIM_Base_MspInit+0x68>)
 8000d64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d68:	6453      	str	r3, [r2, #68]	; 0x44
 8000d6a:	4b07      	ldr	r3, [pc, #28]	; (8000d88 <HAL_TIM_Base_MspInit+0x68>)
 8000d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d72:	60bb      	str	r3, [r7, #8]
 8000d74:	68bb      	ldr	r3, [r7, #8]
}
 8000d76:	bf00      	nop
 8000d78:	3714      	adds	r7, #20
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	40014400 	.word	0x40014400
 8000d88:	40023800 	.word	0x40023800
 8000d8c:	40014800 	.word	0x40014800

08000d90 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b08a      	sub	sp, #40	; 0x28
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d98:	f107 0314 	add.w	r3, r7, #20
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
 8000da6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM10)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a25      	ldr	r2, [pc, #148]	; (8000e44 <HAL_TIM_MspPostInit+0xb4>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d11f      	bne.n	8000df2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM10_MspPostInit 0 */

  /* USER CODE END TIM10_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	613b      	str	r3, [r7, #16]
 8000db6:	4b24      	ldr	r3, [pc, #144]	; (8000e48 <HAL_TIM_MspPostInit+0xb8>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	4a23      	ldr	r2, [pc, #140]	; (8000e48 <HAL_TIM_MspPostInit+0xb8>)
 8000dbc:	f043 0302 	orr.w	r3, r3, #2
 8000dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc2:	4b21      	ldr	r3, [pc, #132]	; (8000e48 <HAL_TIM_MspPostInit+0xb8>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	f003 0302 	and.w	r3, r3, #2
 8000dca:	613b      	str	r3, [r7, #16]
 8000dcc:	693b      	ldr	r3, [r7, #16]
    /**TIM10 GPIO Configuration
    PB8     ------> TIM10_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000dce:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8000de0:	2303      	movs	r3, #3
 8000de2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de4:	f107 0314 	add.w	r3, r7, #20
 8000de8:	4619      	mov	r1, r3
 8000dea:	4818      	ldr	r0, [pc, #96]	; (8000e4c <HAL_TIM_MspPostInit+0xbc>)
 8000dec:	f000 feaa 	bl	8001b44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8000df0:	e023      	b.n	8000e3a <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM11)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a16      	ldr	r2, [pc, #88]	; (8000e50 <HAL_TIM_MspPostInit+0xc0>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d11e      	bne.n	8000e3a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	4b11      	ldr	r3, [pc, #68]	; (8000e48 <HAL_TIM_MspPostInit+0xb8>)
 8000e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e04:	4a10      	ldr	r2, [pc, #64]	; (8000e48 <HAL_TIM_MspPostInit+0xb8>)
 8000e06:	f043 0302 	orr.w	r3, r3, #2
 8000e0a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0c:	4b0e      	ldr	r3, [pc, #56]	; (8000e48 <HAL_TIM_MspPostInit+0xb8>)
 8000e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e10:	f003 0302 	and.w	r3, r3, #2
 8000e14:	60fb      	str	r3, [r7, #12]
 8000e16:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e26:	2300      	movs	r3, #0
 8000e28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e2e:	f107 0314 	add.w	r3, r7, #20
 8000e32:	4619      	mov	r1, r3
 8000e34:	4805      	ldr	r0, [pc, #20]	; (8000e4c <HAL_TIM_MspPostInit+0xbc>)
 8000e36:	f000 fe85 	bl	8001b44 <HAL_GPIO_Init>
}
 8000e3a:	bf00      	nop
 8000e3c:	3728      	adds	r7, #40	; 0x28
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40014400 	.word	0x40014400
 8000e48:	40023800 	.word	0x40023800
 8000e4c:	40020400 	.word	0x40020400
 8000e50:	40014800 	.word	0x40014800

08000e54 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e58:	4b11      	ldr	r3, [pc, #68]	; (8000ea0 <MX_USART1_UART_Init+0x4c>)
 8000e5a:	4a12      	ldr	r2, [pc, #72]	; (8000ea4 <MX_USART1_UART_Init+0x50>)
 8000e5c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000e5e:	4b10      	ldr	r3, [pc, #64]	; (8000ea0 <MX_USART1_UART_Init+0x4c>)
 8000e60:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000e64:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e66:	4b0e      	ldr	r3, [pc, #56]	; (8000ea0 <MX_USART1_UART_Init+0x4c>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <MX_USART1_UART_Init+0x4c>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e72:	4b0b      	ldr	r3, [pc, #44]	; (8000ea0 <MX_USART1_UART_Init+0x4c>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e78:	4b09      	ldr	r3, [pc, #36]	; (8000ea0 <MX_USART1_UART_Init+0x4c>)
 8000e7a:	220c      	movs	r2, #12
 8000e7c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e7e:	4b08      	ldr	r3, [pc, #32]	; (8000ea0 <MX_USART1_UART_Init+0x4c>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e84:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <MX_USART1_UART_Init+0x4c>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e8a:	4805      	ldr	r0, [pc, #20]	; (8000ea0 <MX_USART1_UART_Init+0x4c>)
 8000e8c:	f002 f8db 	bl	8003046 <HAL_UART_Init>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e96:	f7ff fd85 	bl	80009a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	2000011c 	.word	0x2000011c
 8000ea4:	40011000 	.word	0x40011000

08000ea8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000eac:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <MX_USART2_UART_Init+0x4c>)
 8000eae:	4a12      	ldr	r2, [pc, #72]	; (8000ef8 <MX_USART2_UART_Init+0x50>)
 8000eb0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000eb2:	4b10      	ldr	r3, [pc, #64]	; (8000ef4 <MX_USART2_UART_Init+0x4c>)
 8000eb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000eb8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000eba:	4b0e      	ldr	r3, [pc, #56]	; (8000ef4 <MX_USART2_UART_Init+0x4c>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ec0:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <MX_USART2_UART_Init+0x4c>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ec6:	4b0b      	ldr	r3, [pc, #44]	; (8000ef4 <MX_USART2_UART_Init+0x4c>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ecc:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <MX_USART2_UART_Init+0x4c>)
 8000ece:	220c      	movs	r2, #12
 8000ed0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ed2:	4b08      	ldr	r3, [pc, #32]	; (8000ef4 <MX_USART2_UART_Init+0x4c>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ed8:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <MX_USART2_UART_Init+0x4c>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ede:	4805      	ldr	r0, [pc, #20]	; (8000ef4 <MX_USART2_UART_Init+0x4c>)
 8000ee0:	f002 f8b1 	bl	8003046 <HAL_UART_Init>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000eea:	f7ff fd5b 	bl	80009a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20000160 	.word	0x20000160
 8000ef8:	40004400 	.word	0x40004400

08000efc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b08c      	sub	sp, #48	; 0x30
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f04:	f107 031c 	add.w	r3, r7, #28
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]
 8000f12:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a61      	ldr	r2, [pc, #388]	; (80010a0 <HAL_UART_MspInit+0x1a4>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d15c      	bne.n	8000fd8 <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61bb      	str	r3, [r7, #24]
 8000f22:	4b60      	ldr	r3, [pc, #384]	; (80010a4 <HAL_UART_MspInit+0x1a8>)
 8000f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f26:	4a5f      	ldr	r2, [pc, #380]	; (80010a4 <HAL_UART_MspInit+0x1a8>)
 8000f28:	f043 0310 	orr.w	r3, r3, #16
 8000f2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f2e:	4b5d      	ldr	r3, [pc, #372]	; (80010a4 <HAL_UART_MspInit+0x1a8>)
 8000f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f32:	f003 0310 	and.w	r3, r3, #16
 8000f36:	61bb      	str	r3, [r7, #24]
 8000f38:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	617b      	str	r3, [r7, #20]
 8000f3e:	4b59      	ldr	r3, [pc, #356]	; (80010a4 <HAL_UART_MspInit+0x1a8>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	4a58      	ldr	r2, [pc, #352]	; (80010a4 <HAL_UART_MspInit+0x1a8>)
 8000f44:	f043 0301 	orr.w	r3, r3, #1
 8000f48:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4a:	4b56      	ldr	r3, [pc, #344]	; (80010a4 <HAL_UART_MspInit+0x1a8>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	617b      	str	r3, [r7, #20]
 8000f54:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 8000f56:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8000f5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f64:	2303      	movs	r3, #3
 8000f66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f68:	2307      	movs	r3, #7
 8000f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6c:	f107 031c 	add.w	r3, r7, #28
 8000f70:	4619      	mov	r1, r3
 8000f72:	484d      	ldr	r0, [pc, #308]	; (80010a8 <HAL_UART_MspInit+0x1ac>)
 8000f74:	f000 fde6 	bl	8001b44 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000f78:	4b4c      	ldr	r3, [pc, #304]	; (80010ac <HAL_UART_MspInit+0x1b0>)
 8000f7a:	4a4d      	ldr	r2, [pc, #308]	; (80010b0 <HAL_UART_MspInit+0x1b4>)
 8000f7c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000f7e:	4b4b      	ldr	r3, [pc, #300]	; (80010ac <HAL_UART_MspInit+0x1b0>)
 8000f80:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f84:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f86:	4b49      	ldr	r3, [pc, #292]	; (80010ac <HAL_UART_MspInit+0x1b0>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f8c:	4b47      	ldr	r3, [pc, #284]	; (80010ac <HAL_UART_MspInit+0x1b0>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f92:	4b46      	ldr	r3, [pc, #280]	; (80010ac <HAL_UART_MspInit+0x1b0>)
 8000f94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f98:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f9a:	4b44      	ldr	r3, [pc, #272]	; (80010ac <HAL_UART_MspInit+0x1b0>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fa0:	4b42      	ldr	r3, [pc, #264]	; (80010ac <HAL_UART_MspInit+0x1b0>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000fa6:	4b41      	ldr	r3, [pc, #260]	; (80010ac <HAL_UART_MspInit+0x1b0>)
 8000fa8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fac:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000fae:	4b3f      	ldr	r3, [pc, #252]	; (80010ac <HAL_UART_MspInit+0x1b0>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fb4:	4b3d      	ldr	r3, [pc, #244]	; (80010ac <HAL_UART_MspInit+0x1b0>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000fba:	483c      	ldr	r0, [pc, #240]	; (80010ac <HAL_UART_MspInit+0x1b0>)
 8000fbc:	f000 fa52 	bl	8001464 <HAL_DMA_Init>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000fc6:	f7ff fced 	bl	80009a4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a37      	ldr	r2, [pc, #220]	; (80010ac <HAL_UART_MspInit+0x1b0>)
 8000fce:	639a      	str	r2, [r3, #56]	; 0x38
 8000fd0:	4a36      	ldr	r2, [pc, #216]	; (80010ac <HAL_UART_MspInit+0x1b0>)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000fd6:	e05f      	b.n	8001098 <HAL_UART_MspInit+0x19c>
  else if(uartHandle->Instance==USART2)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a35      	ldr	r2, [pc, #212]	; (80010b4 <HAL_UART_MspInit+0x1b8>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d15a      	bne.n	8001098 <HAL_UART_MspInit+0x19c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	613b      	str	r3, [r7, #16]
 8000fe6:	4b2f      	ldr	r3, [pc, #188]	; (80010a4 <HAL_UART_MspInit+0x1a8>)
 8000fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fea:	4a2e      	ldr	r2, [pc, #184]	; (80010a4 <HAL_UART_MspInit+0x1a8>)
 8000fec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ff2:	4b2c      	ldr	r3, [pc, #176]	; (80010a4 <HAL_UART_MspInit+0x1a8>)
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ffa:	613b      	str	r3, [r7, #16]
 8000ffc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	60fb      	str	r3, [r7, #12]
 8001002:	4b28      	ldr	r3, [pc, #160]	; (80010a4 <HAL_UART_MspInit+0x1a8>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	4a27      	ldr	r2, [pc, #156]	; (80010a4 <HAL_UART_MspInit+0x1a8>)
 8001008:	f043 0301 	orr.w	r3, r3, #1
 800100c:	6313      	str	r3, [r2, #48]	; 0x30
 800100e:	4b25      	ldr	r3, [pc, #148]	; (80010a4 <HAL_UART_MspInit+0x1a8>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800101a:	230c      	movs	r3, #12
 800101c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101e:	2302      	movs	r3, #2
 8001020:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001026:	2303      	movs	r3, #3
 8001028:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800102a:	2307      	movs	r3, #7
 800102c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102e:	f107 031c 	add.w	r3, r7, #28
 8001032:	4619      	mov	r1, r3
 8001034:	481c      	ldr	r0, [pc, #112]	; (80010a8 <HAL_UART_MspInit+0x1ac>)
 8001036:	f000 fd85 	bl	8001b44 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800103a:	4b1f      	ldr	r3, [pc, #124]	; (80010b8 <HAL_UART_MspInit+0x1bc>)
 800103c:	4a1f      	ldr	r2, [pc, #124]	; (80010bc <HAL_UART_MspInit+0x1c0>)
 800103e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001040:	4b1d      	ldr	r3, [pc, #116]	; (80010b8 <HAL_UART_MspInit+0x1bc>)
 8001042:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001046:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001048:	4b1b      	ldr	r3, [pc, #108]	; (80010b8 <HAL_UART_MspInit+0x1bc>)
 800104a:	2200      	movs	r2, #0
 800104c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800104e:	4b1a      	ldr	r3, [pc, #104]	; (80010b8 <HAL_UART_MspInit+0x1bc>)
 8001050:	2200      	movs	r2, #0
 8001052:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001054:	4b18      	ldr	r3, [pc, #96]	; (80010b8 <HAL_UART_MspInit+0x1bc>)
 8001056:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800105a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800105c:	4b16      	ldr	r3, [pc, #88]	; (80010b8 <HAL_UART_MspInit+0x1bc>)
 800105e:	2200      	movs	r2, #0
 8001060:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001062:	4b15      	ldr	r3, [pc, #84]	; (80010b8 <HAL_UART_MspInit+0x1bc>)
 8001064:	2200      	movs	r2, #0
 8001066:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001068:	4b13      	ldr	r3, [pc, #76]	; (80010b8 <HAL_UART_MspInit+0x1bc>)
 800106a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800106e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001070:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <HAL_UART_MspInit+0x1bc>)
 8001072:	2200      	movs	r2, #0
 8001074:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001076:	4b10      	ldr	r3, [pc, #64]	; (80010b8 <HAL_UART_MspInit+0x1bc>)
 8001078:	2200      	movs	r2, #0
 800107a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800107c:	480e      	ldr	r0, [pc, #56]	; (80010b8 <HAL_UART_MspInit+0x1bc>)
 800107e:	f000 f9f1 	bl	8001464 <HAL_DMA_Init>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <HAL_UART_MspInit+0x190>
      Error_Handler();
 8001088:	f7ff fc8c 	bl	80009a4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	4a0a      	ldr	r2, [pc, #40]	; (80010b8 <HAL_UART_MspInit+0x1bc>)
 8001090:	639a      	str	r2, [r3, #56]	; 0x38
 8001092:	4a09      	ldr	r2, [pc, #36]	; (80010b8 <HAL_UART_MspInit+0x1bc>)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001098:	bf00      	nop
 800109a:	3730      	adds	r7, #48	; 0x30
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	40011000 	.word	0x40011000
 80010a4:	40023800 	.word	0x40023800
 80010a8:	40020000 	.word	0x40020000
 80010ac:	200001a4 	.word	0x200001a4
 80010b0:	40026440 	.word	0x40026440
 80010b4:	40004400 	.word	0x40004400
 80010b8:	20000204 	.word	0x20000204
 80010bc:	40026088 	.word	0x40026088

080010c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80010c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010c4:	480d      	ldr	r0, [pc, #52]	; (80010fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010c6:	490e      	ldr	r1, [pc, #56]	; (8001100 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010c8:	4a0e      	ldr	r2, [pc, #56]	; (8001104 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010cc:	e002      	b.n	80010d4 <LoopCopyDataInit>

080010ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010d2:	3304      	adds	r3, #4

080010d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010d8:	d3f9      	bcc.n	80010ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010da:	4a0b      	ldr	r2, [pc, #44]	; (8001108 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010dc:	4c0b      	ldr	r4, [pc, #44]	; (800110c <LoopFillZerobss+0x26>)
  movs r3, #0
 80010de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010e0:	e001      	b.n	80010e6 <LoopFillZerobss>

080010e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010e4:	3204      	adds	r2, #4

080010e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010e8:	d3fb      	bcc.n	80010e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010ea:	f7ff fd6b 	bl	8000bc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010ee:	f003 f8c1 	bl	8004274 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010f2:	f7ff fb2b 	bl	800074c <main>
  bx  lr    
 80010f6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80010f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001100:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001104:	080047bc 	.word	0x080047bc
  ldr r2, =_sbss
 8001108:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800110c:	200003b4 	.word	0x200003b4

08001110 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001110:	e7fe      	b.n	8001110 <ADC_IRQHandler>
	...

08001114 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001118:	4b0e      	ldr	r3, [pc, #56]	; (8001154 <HAL_Init+0x40>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a0d      	ldr	r2, [pc, #52]	; (8001154 <HAL_Init+0x40>)
 800111e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001122:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001124:	4b0b      	ldr	r3, [pc, #44]	; (8001154 <HAL_Init+0x40>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a0a      	ldr	r2, [pc, #40]	; (8001154 <HAL_Init+0x40>)
 800112a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800112e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001130:	4b08      	ldr	r3, [pc, #32]	; (8001154 <HAL_Init+0x40>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a07      	ldr	r2, [pc, #28]	; (8001154 <HAL_Init+0x40>)
 8001136:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800113a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800113c:	2003      	movs	r0, #3
 800113e:	f000 f94f 	bl	80013e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001142:	2000      	movs	r0, #0
 8001144:	f000 f808 	bl	8001158 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001148:	f7ff fc32 	bl	80009b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	40023c00 	.word	0x40023c00

08001158 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001160:	4b12      	ldr	r3, [pc, #72]	; (80011ac <HAL_InitTick+0x54>)
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	4b12      	ldr	r3, [pc, #72]	; (80011b0 <HAL_InitTick+0x58>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	4619      	mov	r1, r3
 800116a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800116e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001172:	fbb2 f3f3 	udiv	r3, r2, r3
 8001176:	4618      	mov	r0, r3
 8001178:	f000 f967 	bl	800144a <HAL_SYSTICK_Config>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e00e      	b.n	80011a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2b0f      	cmp	r3, #15
 800118a:	d80a      	bhi.n	80011a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800118c:	2200      	movs	r2, #0
 800118e:	6879      	ldr	r1, [r7, #4]
 8001190:	f04f 30ff 	mov.w	r0, #4294967295
 8001194:	f000 f92f 	bl	80013f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001198:	4a06      	ldr	r2, [pc, #24]	; (80011b4 <HAL_InitTick+0x5c>)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800119e:	2300      	movs	r3, #0
 80011a0:	e000      	b.n	80011a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	20000000 	.word	0x20000000
 80011b0:	20000008 	.word	0x20000008
 80011b4:	20000004 	.word	0x20000004

080011b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011bc:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <HAL_IncTick+0x20>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	461a      	mov	r2, r3
 80011c2:	4b06      	ldr	r3, [pc, #24]	; (80011dc <HAL_IncTick+0x24>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4413      	add	r3, r2
 80011c8:	4a04      	ldr	r2, [pc, #16]	; (80011dc <HAL_IncTick+0x24>)
 80011ca:	6013      	str	r3, [r2, #0]
}
 80011cc:	bf00      	nop
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	20000008 	.word	0x20000008
 80011dc:	20000264 	.word	0x20000264

080011e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  return uwTick;
 80011e4:	4b03      	ldr	r3, [pc, #12]	; (80011f4 <HAL_GetTick+0x14>)
 80011e6:	681b      	ldr	r3, [r3, #0]
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	20000264 	.word	0x20000264

080011f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001200:	f7ff ffee 	bl	80011e0 <HAL_GetTick>
 8001204:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001210:	d005      	beq.n	800121e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001212:	4b0a      	ldr	r3, [pc, #40]	; (800123c <HAL_Delay+0x44>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	461a      	mov	r2, r3
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	4413      	add	r3, r2
 800121c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800121e:	bf00      	nop
 8001220:	f7ff ffde 	bl	80011e0 <HAL_GetTick>
 8001224:	4602      	mov	r2, r0
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	68fa      	ldr	r2, [r7, #12]
 800122c:	429a      	cmp	r2, r3
 800122e:	d8f7      	bhi.n	8001220 <HAL_Delay+0x28>
  {
  }
}
 8001230:	bf00      	nop
 8001232:	bf00      	nop
 8001234:	3710      	adds	r7, #16
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	20000008 	.word	0x20000008

08001240 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001240:	b480      	push	{r7}
 8001242:	b085      	sub	sp, #20
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	f003 0307 	and.w	r3, r3, #7
 800124e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001250:	4b0c      	ldr	r3, [pc, #48]	; (8001284 <__NVIC_SetPriorityGrouping+0x44>)
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001256:	68ba      	ldr	r2, [r7, #8]
 8001258:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800125c:	4013      	ands	r3, r2
 800125e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001268:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800126c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001270:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001272:	4a04      	ldr	r2, [pc, #16]	; (8001284 <__NVIC_SetPriorityGrouping+0x44>)
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	60d3      	str	r3, [r2, #12]
}
 8001278:	bf00      	nop
 800127a:	3714      	adds	r7, #20
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr
 8001284:	e000ed00 	.word	0xe000ed00

08001288 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800128c:	4b04      	ldr	r3, [pc, #16]	; (80012a0 <__NVIC_GetPriorityGrouping+0x18>)
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	0a1b      	lsrs	r3, r3, #8
 8001292:	f003 0307 	and.w	r3, r3, #7
}
 8001296:	4618      	mov	r0, r3
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	e000ed00 	.word	0xe000ed00

080012a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	4603      	mov	r3, r0
 80012ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	db0b      	blt.n	80012ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012b6:	79fb      	ldrb	r3, [r7, #7]
 80012b8:	f003 021f 	and.w	r2, r3, #31
 80012bc:	4907      	ldr	r1, [pc, #28]	; (80012dc <__NVIC_EnableIRQ+0x38>)
 80012be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c2:	095b      	lsrs	r3, r3, #5
 80012c4:	2001      	movs	r0, #1
 80012c6:	fa00 f202 	lsl.w	r2, r0, r2
 80012ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012ce:	bf00      	nop
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	e000e100 	.word	0xe000e100

080012e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	6039      	str	r1, [r7, #0]
 80012ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	db0a      	blt.n	800130a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	b2da      	uxtb	r2, r3
 80012f8:	490c      	ldr	r1, [pc, #48]	; (800132c <__NVIC_SetPriority+0x4c>)
 80012fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fe:	0112      	lsls	r2, r2, #4
 8001300:	b2d2      	uxtb	r2, r2
 8001302:	440b      	add	r3, r1
 8001304:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001308:	e00a      	b.n	8001320 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	b2da      	uxtb	r2, r3
 800130e:	4908      	ldr	r1, [pc, #32]	; (8001330 <__NVIC_SetPriority+0x50>)
 8001310:	79fb      	ldrb	r3, [r7, #7]
 8001312:	f003 030f 	and.w	r3, r3, #15
 8001316:	3b04      	subs	r3, #4
 8001318:	0112      	lsls	r2, r2, #4
 800131a:	b2d2      	uxtb	r2, r2
 800131c:	440b      	add	r3, r1
 800131e:	761a      	strb	r2, [r3, #24]
}
 8001320:	bf00      	nop
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	e000e100 	.word	0xe000e100
 8001330:	e000ed00 	.word	0xe000ed00

08001334 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001334:	b480      	push	{r7}
 8001336:	b089      	sub	sp, #36	; 0x24
 8001338:	af00      	add	r7, sp, #0
 800133a:	60f8      	str	r0, [r7, #12]
 800133c:	60b9      	str	r1, [r7, #8]
 800133e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	f003 0307 	and.w	r3, r3, #7
 8001346:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	f1c3 0307 	rsb	r3, r3, #7
 800134e:	2b04      	cmp	r3, #4
 8001350:	bf28      	it	cs
 8001352:	2304      	movcs	r3, #4
 8001354:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	3304      	adds	r3, #4
 800135a:	2b06      	cmp	r3, #6
 800135c:	d902      	bls.n	8001364 <NVIC_EncodePriority+0x30>
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	3b03      	subs	r3, #3
 8001362:	e000      	b.n	8001366 <NVIC_EncodePriority+0x32>
 8001364:	2300      	movs	r3, #0
 8001366:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001368:	f04f 32ff 	mov.w	r2, #4294967295
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	fa02 f303 	lsl.w	r3, r2, r3
 8001372:	43da      	mvns	r2, r3
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	401a      	ands	r2, r3
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800137c:	f04f 31ff 	mov.w	r1, #4294967295
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	fa01 f303 	lsl.w	r3, r1, r3
 8001386:	43d9      	mvns	r1, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800138c:	4313      	orrs	r3, r2
         );
}
 800138e:	4618      	mov	r0, r3
 8001390:	3724      	adds	r7, #36	; 0x24
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
	...

0800139c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	3b01      	subs	r3, #1
 80013a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013ac:	d301      	bcc.n	80013b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ae:	2301      	movs	r3, #1
 80013b0:	e00f      	b.n	80013d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013b2:	4a0a      	ldr	r2, [pc, #40]	; (80013dc <SysTick_Config+0x40>)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	3b01      	subs	r3, #1
 80013b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ba:	210f      	movs	r1, #15
 80013bc:	f04f 30ff 	mov.w	r0, #4294967295
 80013c0:	f7ff ff8e 	bl	80012e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013c4:	4b05      	ldr	r3, [pc, #20]	; (80013dc <SysTick_Config+0x40>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ca:	4b04      	ldr	r3, [pc, #16]	; (80013dc <SysTick_Config+0x40>)
 80013cc:	2207      	movs	r2, #7
 80013ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	e000e010 	.word	0xe000e010

080013e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f7ff ff29 	bl	8001240 <__NVIC_SetPriorityGrouping>
}
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b086      	sub	sp, #24
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	4603      	mov	r3, r0
 80013fe:	60b9      	str	r1, [r7, #8]
 8001400:	607a      	str	r2, [r7, #4]
 8001402:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001404:	2300      	movs	r3, #0
 8001406:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001408:	f7ff ff3e 	bl	8001288 <__NVIC_GetPriorityGrouping>
 800140c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	68b9      	ldr	r1, [r7, #8]
 8001412:	6978      	ldr	r0, [r7, #20]
 8001414:	f7ff ff8e 	bl	8001334 <NVIC_EncodePriority>
 8001418:	4602      	mov	r2, r0
 800141a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800141e:	4611      	mov	r1, r2
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff ff5d 	bl	80012e0 <__NVIC_SetPriority>
}
 8001426:	bf00      	nop
 8001428:	3718      	adds	r7, #24
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}

0800142e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800142e:	b580      	push	{r7, lr}
 8001430:	b082      	sub	sp, #8
 8001432:	af00      	add	r7, sp, #0
 8001434:	4603      	mov	r3, r0
 8001436:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff ff31 	bl	80012a4 <__NVIC_EnableIRQ>
}
 8001442:	bf00      	nop
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	b082      	sub	sp, #8
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f7ff ffa2 	bl	800139c <SysTick_Config>
 8001458:	4603      	mov	r3, r0
}
 800145a:	4618      	mov	r0, r3
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
	...

08001464 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800146c:	2300      	movs	r3, #0
 800146e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001470:	f7ff feb6 	bl	80011e0 <HAL_GetTick>
 8001474:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d101      	bne.n	8001480 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e099      	b.n	80015b4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2202      	movs	r2, #2
 8001484:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2200      	movs	r2, #0
 800148c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f022 0201 	bic.w	r2, r2, #1
 800149e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014a0:	e00f      	b.n	80014c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014a2:	f7ff fe9d 	bl	80011e0 <HAL_GetTick>
 80014a6:	4602      	mov	r2, r0
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	2b05      	cmp	r3, #5
 80014ae:	d908      	bls.n	80014c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2220      	movs	r2, #32
 80014b4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2203      	movs	r2, #3
 80014ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e078      	b.n	80015b4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0301 	and.w	r3, r3, #1
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d1e8      	bne.n	80014a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80014d8:	697a      	ldr	r2, [r7, #20]
 80014da:	4b38      	ldr	r3, [pc, #224]	; (80015bc <HAL_DMA_Init+0x158>)
 80014dc:	4013      	ands	r3, r2
 80014de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	685a      	ldr	r2, [r3, #4]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	691b      	ldr	r3, [r3, #16]
 80014f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001506:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6a1b      	ldr	r3, [r3, #32]
 800150c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800150e:	697a      	ldr	r2, [r7, #20]
 8001510:	4313      	orrs	r3, r2
 8001512:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001518:	2b04      	cmp	r3, #4
 800151a:	d107      	bne.n	800152c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001524:	4313      	orrs	r3, r2
 8001526:	697a      	ldr	r2, [r7, #20]
 8001528:	4313      	orrs	r3, r2
 800152a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	697a      	ldr	r2, [r7, #20]
 8001532:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	695b      	ldr	r3, [r3, #20]
 800153a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	f023 0307 	bic.w	r3, r3, #7
 8001542:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001548:	697a      	ldr	r2, [r7, #20]
 800154a:	4313      	orrs	r3, r2
 800154c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001552:	2b04      	cmp	r3, #4
 8001554:	d117      	bne.n	8001586 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800155a:	697a      	ldr	r2, [r7, #20]
 800155c:	4313      	orrs	r3, r2
 800155e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001564:	2b00      	cmp	r3, #0
 8001566:	d00e      	beq.n	8001586 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f000 fa6f 	bl	8001a4c <DMA_CheckFifoParam>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d008      	beq.n	8001586 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2240      	movs	r2, #64	; 0x40
 8001578:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2201      	movs	r2, #1
 800157e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001582:	2301      	movs	r3, #1
 8001584:	e016      	b.n	80015b4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	697a      	ldr	r2, [r7, #20]
 800158c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f000 fa26 	bl	80019e0 <DMA_CalcBaseAndBitshift>
 8001594:	4603      	mov	r3, r0
 8001596:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800159c:	223f      	movs	r2, #63	; 0x3f
 800159e:	409a      	lsls	r2, r3
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2200      	movs	r2, #0
 80015a8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2201      	movs	r2, #1
 80015ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80015b2:	2300      	movs	r3, #0
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3718      	adds	r7, #24
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	f010803f 	.word	0xf010803f

080015c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	607a      	str	r2, [r7, #4]
 80015cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80015ce:	2300      	movs	r3, #0
 80015d0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d101      	bne.n	80015e6 <HAL_DMA_Start_IT+0x26>
 80015e2:	2302      	movs	r3, #2
 80015e4:	e040      	b.n	8001668 <HAL_DMA_Start_IT+0xa8>
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	2201      	movs	r2, #1
 80015ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d12f      	bne.n	800165a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	2202      	movs	r2, #2
 80015fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	2200      	movs	r2, #0
 8001606:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	68b9      	ldr	r1, [r7, #8]
 800160e:	68f8      	ldr	r0, [r7, #12]
 8001610:	f000 f9b8 	bl	8001984 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001618:	223f      	movs	r2, #63	; 0x3f
 800161a:	409a      	lsls	r2, r3
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f042 0216 	orr.w	r2, r2, #22
 800162e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001634:	2b00      	cmp	r3, #0
 8001636:	d007      	beq.n	8001648 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f042 0208 	orr.w	r2, r2, #8
 8001646:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f042 0201 	orr.w	r2, r2, #1
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	e005      	b.n	8001666 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	2200      	movs	r2, #0
 800165e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001662:	2302      	movs	r3, #2
 8001664:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001666:	7dfb      	ldrb	r3, [r7, #23]
}
 8001668:	4618      	mov	r0, r3
 800166a:	3718      	adds	r7, #24
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001678:	2300      	movs	r3, #0
 800167a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800167c:	4b8e      	ldr	r3, [pc, #568]	; (80018b8 <HAL_DMA_IRQHandler+0x248>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a8e      	ldr	r2, [pc, #568]	; (80018bc <HAL_DMA_IRQHandler+0x24c>)
 8001682:	fba2 2303 	umull	r2, r3, r2, r3
 8001686:	0a9b      	lsrs	r3, r3, #10
 8001688:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800168e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800169a:	2208      	movs	r2, #8
 800169c:	409a      	lsls	r2, r3
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	4013      	ands	r3, r2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d01a      	beq.n	80016dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0304 	and.w	r3, r3, #4
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d013      	beq.n	80016dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f022 0204 	bic.w	r2, r2, #4
 80016c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016c8:	2208      	movs	r2, #8
 80016ca:	409a      	lsls	r2, r3
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016d4:	f043 0201 	orr.w	r2, r3, #1
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016e0:	2201      	movs	r2, #1
 80016e2:	409a      	lsls	r2, r3
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	4013      	ands	r3, r2
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d012      	beq.n	8001712 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	695b      	ldr	r3, [r3, #20]
 80016f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d00b      	beq.n	8001712 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016fe:	2201      	movs	r2, #1
 8001700:	409a      	lsls	r2, r3
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800170a:	f043 0202 	orr.w	r2, r3, #2
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001716:	2204      	movs	r2, #4
 8001718:	409a      	lsls	r2, r3
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	4013      	ands	r3, r2
 800171e:	2b00      	cmp	r3, #0
 8001720:	d012      	beq.n	8001748 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0302 	and.w	r3, r3, #2
 800172c:	2b00      	cmp	r3, #0
 800172e:	d00b      	beq.n	8001748 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001734:	2204      	movs	r2, #4
 8001736:	409a      	lsls	r2, r3
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001740:	f043 0204 	orr.w	r2, r3, #4
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800174c:	2210      	movs	r2, #16
 800174e:	409a      	lsls	r2, r3
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	4013      	ands	r3, r2
 8001754:	2b00      	cmp	r3, #0
 8001756:	d043      	beq.n	80017e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0308 	and.w	r3, r3, #8
 8001762:	2b00      	cmp	r3, #0
 8001764:	d03c      	beq.n	80017e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800176a:	2210      	movs	r2, #16
 800176c:	409a      	lsls	r2, r3
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800177c:	2b00      	cmp	r3, #0
 800177e:	d018      	beq.n	80017b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d108      	bne.n	80017a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001792:	2b00      	cmp	r3, #0
 8001794:	d024      	beq.n	80017e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	4798      	blx	r3
 800179e:	e01f      	b.n	80017e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d01b      	beq.n	80017e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	4798      	blx	r3
 80017b0:	e016      	b.n	80017e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d107      	bne.n	80017d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f022 0208 	bic.w	r2, r2, #8
 80017ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d003      	beq.n	80017e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017e4:	2220      	movs	r2, #32
 80017e6:	409a      	lsls	r2, r3
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	4013      	ands	r3, r2
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	f000 808f 	beq.w	8001910 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0310 	and.w	r3, r3, #16
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	f000 8087 	beq.w	8001910 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001806:	2220      	movs	r2, #32
 8001808:	409a      	lsls	r2, r3
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001814:	b2db      	uxtb	r3, r3
 8001816:	2b05      	cmp	r3, #5
 8001818:	d136      	bne.n	8001888 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f022 0216 	bic.w	r2, r2, #22
 8001828:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	695a      	ldr	r2, [r3, #20]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001838:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183e:	2b00      	cmp	r3, #0
 8001840:	d103      	bne.n	800184a <HAL_DMA_IRQHandler+0x1da>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001846:	2b00      	cmp	r3, #0
 8001848:	d007      	beq.n	800185a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f022 0208 	bic.w	r2, r2, #8
 8001858:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800185e:	223f      	movs	r2, #63	; 0x3f
 8001860:	409a      	lsls	r2, r3
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2201      	movs	r2, #1
 800186a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2200      	movs	r2, #0
 8001872:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800187a:	2b00      	cmp	r3, #0
 800187c:	d07e      	beq.n	800197c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	4798      	blx	r3
        }
        return;
 8001886:	e079      	b.n	800197c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d01d      	beq.n	80018d2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d10d      	bne.n	80018c0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d031      	beq.n	8001910 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	4798      	blx	r3
 80018b4:	e02c      	b.n	8001910 <HAL_DMA_IRQHandler+0x2a0>
 80018b6:	bf00      	nop
 80018b8:	20000000 	.word	0x20000000
 80018bc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d023      	beq.n	8001910 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	4798      	blx	r3
 80018d0:	e01e      	b.n	8001910 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d10f      	bne.n	8001900 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f022 0210 	bic.w	r2, r2, #16
 80018ee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2201      	movs	r2, #1
 80018f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2200      	movs	r2, #0
 80018fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001904:	2b00      	cmp	r3, #0
 8001906:	d003      	beq.n	8001910 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001914:	2b00      	cmp	r3, #0
 8001916:	d032      	beq.n	800197e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800191c:	f003 0301 	and.w	r3, r3, #1
 8001920:	2b00      	cmp	r3, #0
 8001922:	d022      	beq.n	800196a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2205      	movs	r2, #5
 8001928:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f022 0201 	bic.w	r2, r2, #1
 800193a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	3301      	adds	r3, #1
 8001940:	60bb      	str	r3, [r7, #8]
 8001942:	697a      	ldr	r2, [r7, #20]
 8001944:	429a      	cmp	r2, r3
 8001946:	d307      	bcc.n	8001958 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	2b00      	cmp	r3, #0
 8001954:	d1f2      	bne.n	800193c <HAL_DMA_IRQHandler+0x2cc>
 8001956:	e000      	b.n	800195a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001958:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2201      	movs	r2, #1
 800195e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800196e:	2b00      	cmp	r3, #0
 8001970:	d005      	beq.n	800197e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	4798      	blx	r3
 800197a:	e000      	b.n	800197e <HAL_DMA_IRQHandler+0x30e>
        return;
 800197c:	bf00      	nop
    }
  }
}
 800197e:	3718      	adds	r7, #24
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001984:	b480      	push	{r7}
 8001986:	b085      	sub	sp, #20
 8001988:	af00      	add	r7, sp, #0
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	60b9      	str	r1, [r7, #8]
 800198e:	607a      	str	r2, [r7, #4]
 8001990:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80019a0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	683a      	ldr	r2, [r7, #0]
 80019a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	2b40      	cmp	r3, #64	; 0x40
 80019b0:	d108      	bne.n	80019c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	68ba      	ldr	r2, [r7, #8]
 80019c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80019c2:	e007      	b.n	80019d4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	68ba      	ldr	r2, [r7, #8]
 80019ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	60da      	str	r2, [r3, #12]
}
 80019d4:	bf00      	nop
 80019d6:	3714      	adds	r7, #20
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	3b10      	subs	r3, #16
 80019f0:	4a14      	ldr	r2, [pc, #80]	; (8001a44 <DMA_CalcBaseAndBitshift+0x64>)
 80019f2:	fba2 2303 	umull	r2, r3, r2, r3
 80019f6:	091b      	lsrs	r3, r3, #4
 80019f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80019fa:	4a13      	ldr	r2, [pc, #76]	; (8001a48 <DMA_CalcBaseAndBitshift+0x68>)
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	4413      	add	r3, r2
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	461a      	mov	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2b03      	cmp	r3, #3
 8001a0c:	d909      	bls.n	8001a22 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001a16:	f023 0303 	bic.w	r3, r3, #3
 8001a1a:	1d1a      	adds	r2, r3, #4
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	659a      	str	r2, [r3, #88]	; 0x58
 8001a20:	e007      	b.n	8001a32 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001a2a:	f023 0303 	bic.w	r3, r3, #3
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3714      	adds	r7, #20
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	aaaaaaab 	.word	0xaaaaaaab
 8001a48:	080047a4 	.word	0x080047a4

08001a4c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a54:	2300      	movs	r3, #0
 8001a56:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a5c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	699b      	ldr	r3, [r3, #24]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d11f      	bne.n	8001aa6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	2b03      	cmp	r3, #3
 8001a6a:	d856      	bhi.n	8001b1a <DMA_CheckFifoParam+0xce>
 8001a6c:	a201      	add	r2, pc, #4	; (adr r2, 8001a74 <DMA_CheckFifoParam+0x28>)
 8001a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a72:	bf00      	nop
 8001a74:	08001a85 	.word	0x08001a85
 8001a78:	08001a97 	.word	0x08001a97
 8001a7c:	08001a85 	.word	0x08001a85
 8001a80:	08001b1b 	.word	0x08001b1b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d046      	beq.n	8001b1e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a94:	e043      	b.n	8001b1e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a9a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a9e:	d140      	bne.n	8001b22 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001aa4:	e03d      	b.n	8001b22 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	699b      	ldr	r3, [r3, #24]
 8001aaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001aae:	d121      	bne.n	8001af4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	2b03      	cmp	r3, #3
 8001ab4:	d837      	bhi.n	8001b26 <DMA_CheckFifoParam+0xda>
 8001ab6:	a201      	add	r2, pc, #4	; (adr r2, 8001abc <DMA_CheckFifoParam+0x70>)
 8001ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001abc:	08001acd 	.word	0x08001acd
 8001ac0:	08001ad3 	.word	0x08001ad3
 8001ac4:	08001acd 	.word	0x08001acd
 8001ac8:	08001ae5 	.word	0x08001ae5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	73fb      	strb	r3, [r7, #15]
      break;
 8001ad0:	e030      	b.n	8001b34 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d025      	beq.n	8001b2a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ae2:	e022      	b.n	8001b2a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001aec:	d11f      	bne.n	8001b2e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001af2:	e01c      	b.n	8001b2e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d903      	bls.n	8001b02 <DMA_CheckFifoParam+0xb6>
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	2b03      	cmp	r3, #3
 8001afe:	d003      	beq.n	8001b08 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001b00:	e018      	b.n	8001b34 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	73fb      	strb	r3, [r7, #15]
      break;
 8001b06:	e015      	b.n	8001b34 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d00e      	beq.n	8001b32 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	73fb      	strb	r3, [r7, #15]
      break;
 8001b18:	e00b      	b.n	8001b32 <DMA_CheckFifoParam+0xe6>
      break;
 8001b1a:	bf00      	nop
 8001b1c:	e00a      	b.n	8001b34 <DMA_CheckFifoParam+0xe8>
      break;
 8001b1e:	bf00      	nop
 8001b20:	e008      	b.n	8001b34 <DMA_CheckFifoParam+0xe8>
      break;
 8001b22:	bf00      	nop
 8001b24:	e006      	b.n	8001b34 <DMA_CheckFifoParam+0xe8>
      break;
 8001b26:	bf00      	nop
 8001b28:	e004      	b.n	8001b34 <DMA_CheckFifoParam+0xe8>
      break;
 8001b2a:	bf00      	nop
 8001b2c:	e002      	b.n	8001b34 <DMA_CheckFifoParam+0xe8>
      break;   
 8001b2e:	bf00      	nop
 8001b30:	e000      	b.n	8001b34 <DMA_CheckFifoParam+0xe8>
      break;
 8001b32:	bf00      	nop
    }
  } 
  
  return status; 
 8001b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3714      	adds	r7, #20
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop

08001b44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b089      	sub	sp, #36	; 0x24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b52:	2300      	movs	r3, #0
 8001b54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b56:	2300      	movs	r3, #0
 8001b58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61fb      	str	r3, [r7, #28]
 8001b5e:	e159      	b.n	8001e14 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b60:	2201      	movs	r2, #1
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	697a      	ldr	r2, [r7, #20]
 8001b70:	4013      	ands	r3, r2
 8001b72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b74:	693a      	ldr	r2, [r7, #16]
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	f040 8148 	bne.w	8001e0e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f003 0303 	and.w	r3, r3, #3
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d005      	beq.n	8001b96 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d130      	bne.n	8001bf8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	2203      	movs	r2, #3
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	4013      	ands	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	68da      	ldr	r2, [r3, #12]
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bcc:	2201      	movs	r2, #1
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	69ba      	ldr	r2, [r7, #24]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	091b      	lsrs	r3, r3, #4
 8001be2:	f003 0201 	and.w	r2, r3, #1
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f003 0303 	and.w	r3, r3, #3
 8001c00:	2b03      	cmp	r3, #3
 8001c02:	d017      	beq.n	8001c34 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	2203      	movs	r2, #3
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	43db      	mvns	r3, r3
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	689a      	ldr	r2, [r3, #8]
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f003 0303 	and.w	r3, r3, #3
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d123      	bne.n	8001c88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	08da      	lsrs	r2, r3, #3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	3208      	adds	r2, #8
 8001c48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	f003 0307 	and.w	r3, r3, #7
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	220f      	movs	r2, #15
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	4013      	ands	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	691a      	ldr	r2, [r3, #16]
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	f003 0307 	and.w	r3, r3, #7
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	08da      	lsrs	r2, r3, #3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	3208      	adds	r2, #8
 8001c82:	69b9      	ldr	r1, [r7, #24]
 8001c84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	2203      	movs	r2, #3
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f003 0203 	and.w	r2, r3, #3
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	f000 80a2 	beq.w	8001e0e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	60fb      	str	r3, [r7, #12]
 8001cce:	4b57      	ldr	r3, [pc, #348]	; (8001e2c <HAL_GPIO_Init+0x2e8>)
 8001cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd2:	4a56      	ldr	r2, [pc, #344]	; (8001e2c <HAL_GPIO_Init+0x2e8>)
 8001cd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cd8:	6453      	str	r3, [r2, #68]	; 0x44
 8001cda:	4b54      	ldr	r3, [pc, #336]	; (8001e2c <HAL_GPIO_Init+0x2e8>)
 8001cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ce6:	4a52      	ldr	r2, [pc, #328]	; (8001e30 <HAL_GPIO_Init+0x2ec>)
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	089b      	lsrs	r3, r3, #2
 8001cec:	3302      	adds	r3, #2
 8001cee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	f003 0303 	and.w	r3, r3, #3
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	220f      	movs	r2, #15
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	43db      	mvns	r3, r3
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	4013      	ands	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a49      	ldr	r2, [pc, #292]	; (8001e34 <HAL_GPIO_Init+0x2f0>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d019      	beq.n	8001d46 <HAL_GPIO_Init+0x202>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a48      	ldr	r2, [pc, #288]	; (8001e38 <HAL_GPIO_Init+0x2f4>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d013      	beq.n	8001d42 <HAL_GPIO_Init+0x1fe>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a47      	ldr	r2, [pc, #284]	; (8001e3c <HAL_GPIO_Init+0x2f8>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d00d      	beq.n	8001d3e <HAL_GPIO_Init+0x1fa>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a46      	ldr	r2, [pc, #280]	; (8001e40 <HAL_GPIO_Init+0x2fc>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d007      	beq.n	8001d3a <HAL_GPIO_Init+0x1f6>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a45      	ldr	r2, [pc, #276]	; (8001e44 <HAL_GPIO_Init+0x300>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d101      	bne.n	8001d36 <HAL_GPIO_Init+0x1f2>
 8001d32:	2304      	movs	r3, #4
 8001d34:	e008      	b.n	8001d48 <HAL_GPIO_Init+0x204>
 8001d36:	2307      	movs	r3, #7
 8001d38:	e006      	b.n	8001d48 <HAL_GPIO_Init+0x204>
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e004      	b.n	8001d48 <HAL_GPIO_Init+0x204>
 8001d3e:	2302      	movs	r3, #2
 8001d40:	e002      	b.n	8001d48 <HAL_GPIO_Init+0x204>
 8001d42:	2301      	movs	r3, #1
 8001d44:	e000      	b.n	8001d48 <HAL_GPIO_Init+0x204>
 8001d46:	2300      	movs	r3, #0
 8001d48:	69fa      	ldr	r2, [r7, #28]
 8001d4a:	f002 0203 	and.w	r2, r2, #3
 8001d4e:	0092      	lsls	r2, r2, #2
 8001d50:	4093      	lsls	r3, r2
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d58:	4935      	ldr	r1, [pc, #212]	; (8001e30 <HAL_GPIO_Init+0x2ec>)
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	089b      	lsrs	r3, r3, #2
 8001d5e:	3302      	adds	r3, #2
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d66:	4b38      	ldr	r3, [pc, #224]	; (8001e48 <HAL_GPIO_Init+0x304>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	43db      	mvns	r3, r3
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	4013      	ands	r3, r2
 8001d74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d8a:	4a2f      	ldr	r2, [pc, #188]	; (8001e48 <HAL_GPIO_Init+0x304>)
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d90:	4b2d      	ldr	r3, [pc, #180]	; (8001e48 <HAL_GPIO_Init+0x304>)
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	43db      	mvns	r3, r3
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d003      	beq.n	8001db4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001db4:	4a24      	ldr	r2, [pc, #144]	; (8001e48 <HAL_GPIO_Init+0x304>)
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001dba:	4b23      	ldr	r3, [pc, #140]	; (8001e48 <HAL_GPIO_Init+0x304>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	43db      	mvns	r3, r3
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d003      	beq.n	8001dde <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001dd6:	69ba      	ldr	r2, [r7, #24]
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dde:	4a1a      	ldr	r2, [pc, #104]	; (8001e48 <HAL_GPIO_Init+0x304>)
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001de4:	4b18      	ldr	r3, [pc, #96]	; (8001e48 <HAL_GPIO_Init+0x304>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	43db      	mvns	r3, r3
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	4013      	ands	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d003      	beq.n	8001e08 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e08:	4a0f      	ldr	r2, [pc, #60]	; (8001e48 <HAL_GPIO_Init+0x304>)
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	3301      	adds	r3, #1
 8001e12:	61fb      	str	r3, [r7, #28]
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	2b0f      	cmp	r3, #15
 8001e18:	f67f aea2 	bls.w	8001b60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e1c:	bf00      	nop
 8001e1e:	bf00      	nop
 8001e20:	3724      	adds	r7, #36	; 0x24
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	40023800 	.word	0x40023800
 8001e30:	40013800 	.word	0x40013800
 8001e34:	40020000 	.word	0x40020000
 8001e38:	40020400 	.word	0x40020400
 8001e3c:	40020800 	.word	0x40020800
 8001e40:	40020c00 	.word	0x40020c00
 8001e44:	40021000 	.word	0x40021000
 8001e48:	40013c00 	.word	0x40013c00

08001e4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	460b      	mov	r3, r1
 8001e56:	807b      	strh	r3, [r7, #2]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e5c:	787b      	ldrb	r3, [r7, #1]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d003      	beq.n	8001e6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e62:	887a      	ldrh	r2, [r7, #2]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e68:	e003      	b.n	8001e72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e6a:	887b      	ldrh	r3, [r7, #2]
 8001e6c:	041a      	lsls	r2, r3, #16
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	619a      	str	r2, [r3, #24]
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
	...

08001e80 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e267      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d075      	beq.n	8001f8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e9e:	4b88      	ldr	r3, [pc, #544]	; (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f003 030c 	and.w	r3, r3, #12
 8001ea6:	2b04      	cmp	r3, #4
 8001ea8:	d00c      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eaa:	4b85      	ldr	r3, [pc, #532]	; (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001eb2:	2b08      	cmp	r3, #8
 8001eb4:	d112      	bne.n	8001edc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eb6:	4b82      	ldr	r3, [pc, #520]	; (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ebe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ec2:	d10b      	bne.n	8001edc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ec4:	4b7e      	ldr	r3, [pc, #504]	; (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d05b      	beq.n	8001f88 <HAL_RCC_OscConfig+0x108>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d157      	bne.n	8001f88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e242      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ee4:	d106      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x74>
 8001ee6:	4b76      	ldr	r3, [pc, #472]	; (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a75      	ldr	r2, [pc, #468]	; (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ef0:	6013      	str	r3, [r2, #0]
 8001ef2:	e01d      	b.n	8001f30 <HAL_RCC_OscConfig+0xb0>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001efc:	d10c      	bne.n	8001f18 <HAL_RCC_OscConfig+0x98>
 8001efe:	4b70      	ldr	r3, [pc, #448]	; (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a6f      	ldr	r2, [pc, #444]	; (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001f04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f08:	6013      	str	r3, [r2, #0]
 8001f0a:	4b6d      	ldr	r3, [pc, #436]	; (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a6c      	ldr	r2, [pc, #432]	; (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001f10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f14:	6013      	str	r3, [r2, #0]
 8001f16:	e00b      	b.n	8001f30 <HAL_RCC_OscConfig+0xb0>
 8001f18:	4b69      	ldr	r3, [pc, #420]	; (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a68      	ldr	r2, [pc, #416]	; (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001f1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f22:	6013      	str	r3, [r2, #0]
 8001f24:	4b66      	ldr	r3, [pc, #408]	; (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a65      	ldr	r2, [pc, #404]	; (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001f2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d013      	beq.n	8001f60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f38:	f7ff f952 	bl	80011e0 <HAL_GetTick>
 8001f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f3e:	e008      	b.n	8001f52 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f40:	f7ff f94e 	bl	80011e0 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b64      	cmp	r3, #100	; 0x64
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e207      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f52:	4b5b      	ldr	r3, [pc, #364]	; (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d0f0      	beq.n	8001f40 <HAL_RCC_OscConfig+0xc0>
 8001f5e:	e014      	b.n	8001f8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f60:	f7ff f93e 	bl	80011e0 <HAL_GetTick>
 8001f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f66:	e008      	b.n	8001f7a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f68:	f7ff f93a 	bl	80011e0 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b64      	cmp	r3, #100	; 0x64
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e1f3      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f7a:	4b51      	ldr	r3, [pc, #324]	; (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d1f0      	bne.n	8001f68 <HAL_RCC_OscConfig+0xe8>
 8001f86:	e000      	b.n	8001f8a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d063      	beq.n	800205e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f96:	4b4a      	ldr	r3, [pc, #296]	; (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f003 030c 	and.w	r3, r3, #12
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d00b      	beq.n	8001fba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fa2:	4b47      	ldr	r3, [pc, #284]	; (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001faa:	2b08      	cmp	r3, #8
 8001fac:	d11c      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fae:	4b44      	ldr	r3, [pc, #272]	; (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d116      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fba:	4b41      	ldr	r3, [pc, #260]	; (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d005      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x152>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d001      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e1c7      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fd2:	4b3b      	ldr	r3, [pc, #236]	; (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	4937      	ldr	r1, [pc, #220]	; (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fe6:	e03a      	b.n	800205e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d020      	beq.n	8002032 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ff0:	4b34      	ldr	r3, [pc, #208]	; (80020c4 <HAL_RCC_OscConfig+0x244>)
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff6:	f7ff f8f3 	bl	80011e0 <HAL_GetTick>
 8001ffa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ffc:	e008      	b.n	8002010 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ffe:	f7ff f8ef 	bl	80011e0 <HAL_GetTick>
 8002002:	4602      	mov	r2, r0
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	2b02      	cmp	r3, #2
 800200a:	d901      	bls.n	8002010 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800200c:	2303      	movs	r3, #3
 800200e:	e1a8      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002010:	4b2b      	ldr	r3, [pc, #172]	; (80020c0 <HAL_RCC_OscConfig+0x240>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0302 	and.w	r3, r3, #2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d0f0      	beq.n	8001ffe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800201c:	4b28      	ldr	r3, [pc, #160]	; (80020c0 <HAL_RCC_OscConfig+0x240>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	691b      	ldr	r3, [r3, #16]
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	4925      	ldr	r1, [pc, #148]	; (80020c0 <HAL_RCC_OscConfig+0x240>)
 800202c:	4313      	orrs	r3, r2
 800202e:	600b      	str	r3, [r1, #0]
 8002030:	e015      	b.n	800205e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002032:	4b24      	ldr	r3, [pc, #144]	; (80020c4 <HAL_RCC_OscConfig+0x244>)
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002038:	f7ff f8d2 	bl	80011e0 <HAL_GetTick>
 800203c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800203e:	e008      	b.n	8002052 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002040:	f7ff f8ce 	bl	80011e0 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b02      	cmp	r3, #2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e187      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002052:	4b1b      	ldr	r3, [pc, #108]	; (80020c0 <HAL_RCC_OscConfig+0x240>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d1f0      	bne.n	8002040 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0308 	and.w	r3, r3, #8
 8002066:	2b00      	cmp	r3, #0
 8002068:	d036      	beq.n	80020d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	695b      	ldr	r3, [r3, #20]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d016      	beq.n	80020a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002072:	4b15      	ldr	r3, [pc, #84]	; (80020c8 <HAL_RCC_OscConfig+0x248>)
 8002074:	2201      	movs	r2, #1
 8002076:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002078:	f7ff f8b2 	bl	80011e0 <HAL_GetTick>
 800207c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800207e:	e008      	b.n	8002092 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002080:	f7ff f8ae 	bl	80011e0 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b02      	cmp	r3, #2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e167      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002092:	4b0b      	ldr	r3, [pc, #44]	; (80020c0 <HAL_RCC_OscConfig+0x240>)
 8002094:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d0f0      	beq.n	8002080 <HAL_RCC_OscConfig+0x200>
 800209e:	e01b      	b.n	80020d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020a0:	4b09      	ldr	r3, [pc, #36]	; (80020c8 <HAL_RCC_OscConfig+0x248>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020a6:	f7ff f89b 	bl	80011e0 <HAL_GetTick>
 80020aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020ac:	e00e      	b.n	80020cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020ae:	f7ff f897 	bl	80011e0 <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d907      	bls.n	80020cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e150      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
 80020c0:	40023800 	.word	0x40023800
 80020c4:	42470000 	.word	0x42470000
 80020c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020cc:	4b88      	ldr	r3, [pc, #544]	; (80022f0 <HAL_RCC_OscConfig+0x470>)
 80020ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020d0:	f003 0302 	and.w	r3, r3, #2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d1ea      	bne.n	80020ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0304 	and.w	r3, r3, #4
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	f000 8097 	beq.w	8002214 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020e6:	2300      	movs	r3, #0
 80020e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ea:	4b81      	ldr	r3, [pc, #516]	; (80022f0 <HAL_RCC_OscConfig+0x470>)
 80020ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d10f      	bne.n	8002116 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020f6:	2300      	movs	r3, #0
 80020f8:	60bb      	str	r3, [r7, #8]
 80020fa:	4b7d      	ldr	r3, [pc, #500]	; (80022f0 <HAL_RCC_OscConfig+0x470>)
 80020fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fe:	4a7c      	ldr	r2, [pc, #496]	; (80022f0 <HAL_RCC_OscConfig+0x470>)
 8002100:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002104:	6413      	str	r3, [r2, #64]	; 0x40
 8002106:	4b7a      	ldr	r3, [pc, #488]	; (80022f0 <HAL_RCC_OscConfig+0x470>)
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800210e:	60bb      	str	r3, [r7, #8]
 8002110:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002112:	2301      	movs	r3, #1
 8002114:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002116:	4b77      	ldr	r3, [pc, #476]	; (80022f4 <HAL_RCC_OscConfig+0x474>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800211e:	2b00      	cmp	r3, #0
 8002120:	d118      	bne.n	8002154 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002122:	4b74      	ldr	r3, [pc, #464]	; (80022f4 <HAL_RCC_OscConfig+0x474>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a73      	ldr	r2, [pc, #460]	; (80022f4 <HAL_RCC_OscConfig+0x474>)
 8002128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800212c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800212e:	f7ff f857 	bl	80011e0 <HAL_GetTick>
 8002132:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002134:	e008      	b.n	8002148 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002136:	f7ff f853 	bl	80011e0 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b02      	cmp	r3, #2
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e10c      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002148:	4b6a      	ldr	r3, [pc, #424]	; (80022f4 <HAL_RCC_OscConfig+0x474>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002150:	2b00      	cmp	r3, #0
 8002152:	d0f0      	beq.n	8002136 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d106      	bne.n	800216a <HAL_RCC_OscConfig+0x2ea>
 800215c:	4b64      	ldr	r3, [pc, #400]	; (80022f0 <HAL_RCC_OscConfig+0x470>)
 800215e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002160:	4a63      	ldr	r2, [pc, #396]	; (80022f0 <HAL_RCC_OscConfig+0x470>)
 8002162:	f043 0301 	orr.w	r3, r3, #1
 8002166:	6713      	str	r3, [r2, #112]	; 0x70
 8002168:	e01c      	b.n	80021a4 <HAL_RCC_OscConfig+0x324>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	2b05      	cmp	r3, #5
 8002170:	d10c      	bne.n	800218c <HAL_RCC_OscConfig+0x30c>
 8002172:	4b5f      	ldr	r3, [pc, #380]	; (80022f0 <HAL_RCC_OscConfig+0x470>)
 8002174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002176:	4a5e      	ldr	r2, [pc, #376]	; (80022f0 <HAL_RCC_OscConfig+0x470>)
 8002178:	f043 0304 	orr.w	r3, r3, #4
 800217c:	6713      	str	r3, [r2, #112]	; 0x70
 800217e:	4b5c      	ldr	r3, [pc, #368]	; (80022f0 <HAL_RCC_OscConfig+0x470>)
 8002180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002182:	4a5b      	ldr	r2, [pc, #364]	; (80022f0 <HAL_RCC_OscConfig+0x470>)
 8002184:	f043 0301 	orr.w	r3, r3, #1
 8002188:	6713      	str	r3, [r2, #112]	; 0x70
 800218a:	e00b      	b.n	80021a4 <HAL_RCC_OscConfig+0x324>
 800218c:	4b58      	ldr	r3, [pc, #352]	; (80022f0 <HAL_RCC_OscConfig+0x470>)
 800218e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002190:	4a57      	ldr	r2, [pc, #348]	; (80022f0 <HAL_RCC_OscConfig+0x470>)
 8002192:	f023 0301 	bic.w	r3, r3, #1
 8002196:	6713      	str	r3, [r2, #112]	; 0x70
 8002198:	4b55      	ldr	r3, [pc, #340]	; (80022f0 <HAL_RCC_OscConfig+0x470>)
 800219a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800219c:	4a54      	ldr	r2, [pc, #336]	; (80022f0 <HAL_RCC_OscConfig+0x470>)
 800219e:	f023 0304 	bic.w	r3, r3, #4
 80021a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d015      	beq.n	80021d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ac:	f7ff f818 	bl	80011e0 <HAL_GetTick>
 80021b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021b2:	e00a      	b.n	80021ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021b4:	f7ff f814 	bl	80011e0 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e0cb      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ca:	4b49      	ldr	r3, [pc, #292]	; (80022f0 <HAL_RCC_OscConfig+0x470>)
 80021cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d0ee      	beq.n	80021b4 <HAL_RCC_OscConfig+0x334>
 80021d6:	e014      	b.n	8002202 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021d8:	f7ff f802 	bl	80011e0 <HAL_GetTick>
 80021dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021de:	e00a      	b.n	80021f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021e0:	f7fe fffe 	bl	80011e0 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e0b5      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021f6:	4b3e      	ldr	r3, [pc, #248]	; (80022f0 <HAL_RCC_OscConfig+0x470>)
 80021f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d1ee      	bne.n	80021e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002202:	7dfb      	ldrb	r3, [r7, #23]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d105      	bne.n	8002214 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002208:	4b39      	ldr	r3, [pc, #228]	; (80022f0 <HAL_RCC_OscConfig+0x470>)
 800220a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220c:	4a38      	ldr	r2, [pc, #224]	; (80022f0 <HAL_RCC_OscConfig+0x470>)
 800220e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002212:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	2b00      	cmp	r3, #0
 800221a:	f000 80a1 	beq.w	8002360 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800221e:	4b34      	ldr	r3, [pc, #208]	; (80022f0 <HAL_RCC_OscConfig+0x470>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f003 030c 	and.w	r3, r3, #12
 8002226:	2b08      	cmp	r3, #8
 8002228:	d05c      	beq.n	80022e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	699b      	ldr	r3, [r3, #24]
 800222e:	2b02      	cmp	r3, #2
 8002230:	d141      	bne.n	80022b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002232:	4b31      	ldr	r3, [pc, #196]	; (80022f8 <HAL_RCC_OscConfig+0x478>)
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002238:	f7fe ffd2 	bl	80011e0 <HAL_GetTick>
 800223c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800223e:	e008      	b.n	8002252 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002240:	f7fe ffce 	bl	80011e0 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b02      	cmp	r3, #2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e087      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002252:	4b27      	ldr	r3, [pc, #156]	; (80022f0 <HAL_RCC_OscConfig+0x470>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d1f0      	bne.n	8002240 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	69da      	ldr	r2, [r3, #28]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a1b      	ldr	r3, [r3, #32]
 8002266:	431a      	orrs	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226c:	019b      	lsls	r3, r3, #6
 800226e:	431a      	orrs	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002274:	085b      	lsrs	r3, r3, #1
 8002276:	3b01      	subs	r3, #1
 8002278:	041b      	lsls	r3, r3, #16
 800227a:	431a      	orrs	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002280:	061b      	lsls	r3, r3, #24
 8002282:	491b      	ldr	r1, [pc, #108]	; (80022f0 <HAL_RCC_OscConfig+0x470>)
 8002284:	4313      	orrs	r3, r2
 8002286:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002288:	4b1b      	ldr	r3, [pc, #108]	; (80022f8 <HAL_RCC_OscConfig+0x478>)
 800228a:	2201      	movs	r2, #1
 800228c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800228e:	f7fe ffa7 	bl	80011e0 <HAL_GetTick>
 8002292:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002294:	e008      	b.n	80022a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002296:	f7fe ffa3 	bl	80011e0 <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d901      	bls.n	80022a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e05c      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022a8:	4b11      	ldr	r3, [pc, #68]	; (80022f0 <HAL_RCC_OscConfig+0x470>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d0f0      	beq.n	8002296 <HAL_RCC_OscConfig+0x416>
 80022b4:	e054      	b.n	8002360 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022b6:	4b10      	ldr	r3, [pc, #64]	; (80022f8 <HAL_RCC_OscConfig+0x478>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022bc:	f7fe ff90 	bl	80011e0 <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022c4:	f7fe ff8c 	bl	80011e0 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e045      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022d6:	4b06      	ldr	r3, [pc, #24]	; (80022f0 <HAL_RCC_OscConfig+0x470>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1f0      	bne.n	80022c4 <HAL_RCC_OscConfig+0x444>
 80022e2:	e03d      	b.n	8002360 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d107      	bne.n	80022fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e038      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
 80022f0:	40023800 	.word	0x40023800
 80022f4:	40007000 	.word	0x40007000
 80022f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022fc:	4b1b      	ldr	r3, [pc, #108]	; (800236c <HAL_RCC_OscConfig+0x4ec>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	699b      	ldr	r3, [r3, #24]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d028      	beq.n	800235c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002314:	429a      	cmp	r2, r3
 8002316:	d121      	bne.n	800235c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002322:	429a      	cmp	r2, r3
 8002324:	d11a      	bne.n	800235c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800232c:	4013      	ands	r3, r2
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002332:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002334:	4293      	cmp	r3, r2
 8002336:	d111      	bne.n	800235c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002342:	085b      	lsrs	r3, r3, #1
 8002344:	3b01      	subs	r3, #1
 8002346:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002348:	429a      	cmp	r2, r3
 800234a:	d107      	bne.n	800235c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002356:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002358:	429a      	cmp	r2, r3
 800235a:	d001      	beq.n	8002360 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e000      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3718      	adds	r7, #24
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	40023800 	.word	0x40023800

08002370 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d101      	bne.n	8002384 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e0cc      	b.n	800251e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002384:	4b68      	ldr	r3, [pc, #416]	; (8002528 <HAL_RCC_ClockConfig+0x1b8>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0307 	and.w	r3, r3, #7
 800238c:	683a      	ldr	r2, [r7, #0]
 800238e:	429a      	cmp	r2, r3
 8002390:	d90c      	bls.n	80023ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002392:	4b65      	ldr	r3, [pc, #404]	; (8002528 <HAL_RCC_ClockConfig+0x1b8>)
 8002394:	683a      	ldr	r2, [r7, #0]
 8002396:	b2d2      	uxtb	r2, r2
 8002398:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800239a:	4b63      	ldr	r3, [pc, #396]	; (8002528 <HAL_RCC_ClockConfig+0x1b8>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0307 	and.w	r3, r3, #7
 80023a2:	683a      	ldr	r2, [r7, #0]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d001      	beq.n	80023ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e0b8      	b.n	800251e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d020      	beq.n	80023fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0304 	and.w	r3, r3, #4
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d005      	beq.n	80023d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023c4:	4b59      	ldr	r3, [pc, #356]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	4a58      	ldr	r2, [pc, #352]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80023ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0308 	and.w	r3, r3, #8
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d005      	beq.n	80023e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023dc:	4b53      	ldr	r3, [pc, #332]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	4a52      	ldr	r2, [pc, #328]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80023e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023e8:	4b50      	ldr	r3, [pc, #320]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	494d      	ldr	r1, [pc, #308]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	2b00      	cmp	r3, #0
 8002404:	d044      	beq.n	8002490 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d107      	bne.n	800241e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800240e:	4b47      	ldr	r3, [pc, #284]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d119      	bne.n	800244e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e07f      	b.n	800251e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	2b02      	cmp	r3, #2
 8002424:	d003      	beq.n	800242e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800242a:	2b03      	cmp	r3, #3
 800242c:	d107      	bne.n	800243e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800242e:	4b3f      	ldr	r3, [pc, #252]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d109      	bne.n	800244e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e06f      	b.n	800251e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800243e:	4b3b      	ldr	r3, [pc, #236]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e067      	b.n	800251e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800244e:	4b37      	ldr	r3, [pc, #220]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f023 0203 	bic.w	r2, r3, #3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	4934      	ldr	r1, [pc, #208]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 800245c:	4313      	orrs	r3, r2
 800245e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002460:	f7fe febe 	bl	80011e0 <HAL_GetTick>
 8002464:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002466:	e00a      	b.n	800247e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002468:	f7fe feba 	bl	80011e0 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	f241 3288 	movw	r2, #5000	; 0x1388
 8002476:	4293      	cmp	r3, r2
 8002478:	d901      	bls.n	800247e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e04f      	b.n	800251e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800247e:	4b2b      	ldr	r3, [pc, #172]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f003 020c 	and.w	r2, r3, #12
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	429a      	cmp	r2, r3
 800248e:	d1eb      	bne.n	8002468 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002490:	4b25      	ldr	r3, [pc, #148]	; (8002528 <HAL_RCC_ClockConfig+0x1b8>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0307 	and.w	r3, r3, #7
 8002498:	683a      	ldr	r2, [r7, #0]
 800249a:	429a      	cmp	r2, r3
 800249c:	d20c      	bcs.n	80024b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800249e:	4b22      	ldr	r3, [pc, #136]	; (8002528 <HAL_RCC_ClockConfig+0x1b8>)
 80024a0:	683a      	ldr	r2, [r7, #0]
 80024a2:	b2d2      	uxtb	r2, r2
 80024a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024a6:	4b20      	ldr	r3, [pc, #128]	; (8002528 <HAL_RCC_ClockConfig+0x1b8>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0307 	and.w	r3, r3, #7
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d001      	beq.n	80024b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e032      	b.n	800251e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0304 	and.w	r3, r3, #4
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d008      	beq.n	80024d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024c4:	4b19      	ldr	r3, [pc, #100]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	4916      	ldr	r1, [pc, #88]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0308 	and.w	r3, r3, #8
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d009      	beq.n	80024f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024e2:	4b12      	ldr	r3, [pc, #72]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	490e      	ldr	r1, [pc, #56]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024f6:	f000 f821 	bl	800253c <HAL_RCC_GetSysClockFreq>
 80024fa:	4602      	mov	r2, r0
 80024fc:	4b0b      	ldr	r3, [pc, #44]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	091b      	lsrs	r3, r3, #4
 8002502:	f003 030f 	and.w	r3, r3, #15
 8002506:	490a      	ldr	r1, [pc, #40]	; (8002530 <HAL_RCC_ClockConfig+0x1c0>)
 8002508:	5ccb      	ldrb	r3, [r1, r3]
 800250a:	fa22 f303 	lsr.w	r3, r2, r3
 800250e:	4a09      	ldr	r2, [pc, #36]	; (8002534 <HAL_RCC_ClockConfig+0x1c4>)
 8002510:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002512:	4b09      	ldr	r3, [pc, #36]	; (8002538 <HAL_RCC_ClockConfig+0x1c8>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4618      	mov	r0, r3
 8002518:	f7fe fe1e 	bl	8001158 <HAL_InitTick>

  return HAL_OK;
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3710      	adds	r7, #16
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	40023c00 	.word	0x40023c00
 800252c:	40023800 	.word	0x40023800
 8002530:	0800478c 	.word	0x0800478c
 8002534:	20000000 	.word	0x20000000
 8002538:	20000004 	.word	0x20000004

0800253c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800253c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002540:	b094      	sub	sp, #80	; 0x50
 8002542:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002544:	2300      	movs	r3, #0
 8002546:	647b      	str	r3, [r7, #68]	; 0x44
 8002548:	2300      	movs	r3, #0
 800254a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800254c:	2300      	movs	r3, #0
 800254e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002550:	2300      	movs	r3, #0
 8002552:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002554:	4b79      	ldr	r3, [pc, #484]	; (800273c <HAL_RCC_GetSysClockFreq+0x200>)
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f003 030c 	and.w	r3, r3, #12
 800255c:	2b08      	cmp	r3, #8
 800255e:	d00d      	beq.n	800257c <HAL_RCC_GetSysClockFreq+0x40>
 8002560:	2b08      	cmp	r3, #8
 8002562:	f200 80e1 	bhi.w	8002728 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002566:	2b00      	cmp	r3, #0
 8002568:	d002      	beq.n	8002570 <HAL_RCC_GetSysClockFreq+0x34>
 800256a:	2b04      	cmp	r3, #4
 800256c:	d003      	beq.n	8002576 <HAL_RCC_GetSysClockFreq+0x3a>
 800256e:	e0db      	b.n	8002728 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002570:	4b73      	ldr	r3, [pc, #460]	; (8002740 <HAL_RCC_GetSysClockFreq+0x204>)
 8002572:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002574:	e0db      	b.n	800272e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002576:	4b73      	ldr	r3, [pc, #460]	; (8002744 <HAL_RCC_GetSysClockFreq+0x208>)
 8002578:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800257a:	e0d8      	b.n	800272e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800257c:	4b6f      	ldr	r3, [pc, #444]	; (800273c <HAL_RCC_GetSysClockFreq+0x200>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002584:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002586:	4b6d      	ldr	r3, [pc, #436]	; (800273c <HAL_RCC_GetSysClockFreq+0x200>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d063      	beq.n	800265a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002592:	4b6a      	ldr	r3, [pc, #424]	; (800273c <HAL_RCC_GetSysClockFreq+0x200>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	099b      	lsrs	r3, r3, #6
 8002598:	2200      	movs	r2, #0
 800259a:	63bb      	str	r3, [r7, #56]	; 0x38
 800259c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800259e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025a4:	633b      	str	r3, [r7, #48]	; 0x30
 80025a6:	2300      	movs	r3, #0
 80025a8:	637b      	str	r3, [r7, #52]	; 0x34
 80025aa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80025ae:	4622      	mov	r2, r4
 80025b0:	462b      	mov	r3, r5
 80025b2:	f04f 0000 	mov.w	r0, #0
 80025b6:	f04f 0100 	mov.w	r1, #0
 80025ba:	0159      	lsls	r1, r3, #5
 80025bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025c0:	0150      	lsls	r0, r2, #5
 80025c2:	4602      	mov	r2, r0
 80025c4:	460b      	mov	r3, r1
 80025c6:	4621      	mov	r1, r4
 80025c8:	1a51      	subs	r1, r2, r1
 80025ca:	6139      	str	r1, [r7, #16]
 80025cc:	4629      	mov	r1, r5
 80025ce:	eb63 0301 	sbc.w	r3, r3, r1
 80025d2:	617b      	str	r3, [r7, #20]
 80025d4:	f04f 0200 	mov.w	r2, #0
 80025d8:	f04f 0300 	mov.w	r3, #0
 80025dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80025e0:	4659      	mov	r1, fp
 80025e2:	018b      	lsls	r3, r1, #6
 80025e4:	4651      	mov	r1, sl
 80025e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025ea:	4651      	mov	r1, sl
 80025ec:	018a      	lsls	r2, r1, #6
 80025ee:	4651      	mov	r1, sl
 80025f0:	ebb2 0801 	subs.w	r8, r2, r1
 80025f4:	4659      	mov	r1, fp
 80025f6:	eb63 0901 	sbc.w	r9, r3, r1
 80025fa:	f04f 0200 	mov.w	r2, #0
 80025fe:	f04f 0300 	mov.w	r3, #0
 8002602:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002606:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800260a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800260e:	4690      	mov	r8, r2
 8002610:	4699      	mov	r9, r3
 8002612:	4623      	mov	r3, r4
 8002614:	eb18 0303 	adds.w	r3, r8, r3
 8002618:	60bb      	str	r3, [r7, #8]
 800261a:	462b      	mov	r3, r5
 800261c:	eb49 0303 	adc.w	r3, r9, r3
 8002620:	60fb      	str	r3, [r7, #12]
 8002622:	f04f 0200 	mov.w	r2, #0
 8002626:	f04f 0300 	mov.w	r3, #0
 800262a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800262e:	4629      	mov	r1, r5
 8002630:	024b      	lsls	r3, r1, #9
 8002632:	4621      	mov	r1, r4
 8002634:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002638:	4621      	mov	r1, r4
 800263a:	024a      	lsls	r2, r1, #9
 800263c:	4610      	mov	r0, r2
 800263e:	4619      	mov	r1, r3
 8002640:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002642:	2200      	movs	r2, #0
 8002644:	62bb      	str	r3, [r7, #40]	; 0x28
 8002646:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002648:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800264c:	f7fd fdc4 	bl	80001d8 <__aeabi_uldivmod>
 8002650:	4602      	mov	r2, r0
 8002652:	460b      	mov	r3, r1
 8002654:	4613      	mov	r3, r2
 8002656:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002658:	e058      	b.n	800270c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800265a:	4b38      	ldr	r3, [pc, #224]	; (800273c <HAL_RCC_GetSysClockFreq+0x200>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	099b      	lsrs	r3, r3, #6
 8002660:	2200      	movs	r2, #0
 8002662:	4618      	mov	r0, r3
 8002664:	4611      	mov	r1, r2
 8002666:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800266a:	623b      	str	r3, [r7, #32]
 800266c:	2300      	movs	r3, #0
 800266e:	627b      	str	r3, [r7, #36]	; 0x24
 8002670:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002674:	4642      	mov	r2, r8
 8002676:	464b      	mov	r3, r9
 8002678:	f04f 0000 	mov.w	r0, #0
 800267c:	f04f 0100 	mov.w	r1, #0
 8002680:	0159      	lsls	r1, r3, #5
 8002682:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002686:	0150      	lsls	r0, r2, #5
 8002688:	4602      	mov	r2, r0
 800268a:	460b      	mov	r3, r1
 800268c:	4641      	mov	r1, r8
 800268e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002692:	4649      	mov	r1, r9
 8002694:	eb63 0b01 	sbc.w	fp, r3, r1
 8002698:	f04f 0200 	mov.w	r2, #0
 800269c:	f04f 0300 	mov.w	r3, #0
 80026a0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80026a4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80026a8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80026ac:	ebb2 040a 	subs.w	r4, r2, sl
 80026b0:	eb63 050b 	sbc.w	r5, r3, fp
 80026b4:	f04f 0200 	mov.w	r2, #0
 80026b8:	f04f 0300 	mov.w	r3, #0
 80026bc:	00eb      	lsls	r3, r5, #3
 80026be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026c2:	00e2      	lsls	r2, r4, #3
 80026c4:	4614      	mov	r4, r2
 80026c6:	461d      	mov	r5, r3
 80026c8:	4643      	mov	r3, r8
 80026ca:	18e3      	adds	r3, r4, r3
 80026cc:	603b      	str	r3, [r7, #0]
 80026ce:	464b      	mov	r3, r9
 80026d0:	eb45 0303 	adc.w	r3, r5, r3
 80026d4:	607b      	str	r3, [r7, #4]
 80026d6:	f04f 0200 	mov.w	r2, #0
 80026da:	f04f 0300 	mov.w	r3, #0
 80026de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026e2:	4629      	mov	r1, r5
 80026e4:	028b      	lsls	r3, r1, #10
 80026e6:	4621      	mov	r1, r4
 80026e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026ec:	4621      	mov	r1, r4
 80026ee:	028a      	lsls	r2, r1, #10
 80026f0:	4610      	mov	r0, r2
 80026f2:	4619      	mov	r1, r3
 80026f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026f6:	2200      	movs	r2, #0
 80026f8:	61bb      	str	r3, [r7, #24]
 80026fa:	61fa      	str	r2, [r7, #28]
 80026fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002700:	f7fd fd6a 	bl	80001d8 <__aeabi_uldivmod>
 8002704:	4602      	mov	r2, r0
 8002706:	460b      	mov	r3, r1
 8002708:	4613      	mov	r3, r2
 800270a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800270c:	4b0b      	ldr	r3, [pc, #44]	; (800273c <HAL_RCC_GetSysClockFreq+0x200>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	0c1b      	lsrs	r3, r3, #16
 8002712:	f003 0303 	and.w	r3, r3, #3
 8002716:	3301      	adds	r3, #1
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800271c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800271e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002720:	fbb2 f3f3 	udiv	r3, r2, r3
 8002724:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002726:	e002      	b.n	800272e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002728:	4b05      	ldr	r3, [pc, #20]	; (8002740 <HAL_RCC_GetSysClockFreq+0x204>)
 800272a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800272c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800272e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002730:	4618      	mov	r0, r3
 8002732:	3750      	adds	r7, #80	; 0x50
 8002734:	46bd      	mov	sp, r7
 8002736:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800273a:	bf00      	nop
 800273c:	40023800 	.word	0x40023800
 8002740:	00f42400 	.word	0x00f42400
 8002744:	007a1200 	.word	0x007a1200

08002748 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800274c:	4b03      	ldr	r3, [pc, #12]	; (800275c <HAL_RCC_GetHCLKFreq+0x14>)
 800274e:	681b      	ldr	r3, [r3, #0]
}
 8002750:	4618      	mov	r0, r3
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	20000000 	.word	0x20000000

08002760 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002764:	f7ff fff0 	bl	8002748 <HAL_RCC_GetHCLKFreq>
 8002768:	4602      	mov	r2, r0
 800276a:	4b05      	ldr	r3, [pc, #20]	; (8002780 <HAL_RCC_GetPCLK1Freq+0x20>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	0a9b      	lsrs	r3, r3, #10
 8002770:	f003 0307 	and.w	r3, r3, #7
 8002774:	4903      	ldr	r1, [pc, #12]	; (8002784 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002776:	5ccb      	ldrb	r3, [r1, r3]
 8002778:	fa22 f303 	lsr.w	r3, r2, r3
}
 800277c:	4618      	mov	r0, r3
 800277e:	bd80      	pop	{r7, pc}
 8002780:	40023800 	.word	0x40023800
 8002784:	0800479c 	.word	0x0800479c

08002788 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800278c:	f7ff ffdc 	bl	8002748 <HAL_RCC_GetHCLKFreq>
 8002790:	4602      	mov	r2, r0
 8002792:	4b05      	ldr	r3, [pc, #20]	; (80027a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	0b5b      	lsrs	r3, r3, #13
 8002798:	f003 0307 	and.w	r3, r3, #7
 800279c:	4903      	ldr	r1, [pc, #12]	; (80027ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800279e:	5ccb      	ldrb	r3, [r1, r3]
 80027a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	40023800 	.word	0x40023800
 80027ac:	0800479c 	.word	0x0800479c

080027b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d101      	bne.n	80027c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e041      	b.n	8002846 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d106      	bne.n	80027dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f7fe faa2 	bl	8000d20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2202      	movs	r2, #2
 80027e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	3304      	adds	r3, #4
 80027ec:	4619      	mov	r1, r3
 80027ee:	4610      	mov	r0, r2
 80027f0:	f000 f9f8 	bl	8002be4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800284e:	b580      	push	{r7, lr}
 8002850:	b082      	sub	sp, #8
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d101      	bne.n	8002860 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e041      	b.n	80028e4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002866:	b2db      	uxtb	r3, r3
 8002868:	2b00      	cmp	r3, #0
 800286a:	d106      	bne.n	800287a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f000 f839 	bl	80028ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2202      	movs	r2, #2
 800287e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	3304      	adds	r3, #4
 800288a:	4619      	mov	r1, r3
 800288c:	4610      	mov	r0, r2
 800288e:	f000 f9a9 	bl	8002be4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2201      	movs	r2, #1
 8002896:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2201      	movs	r2, #1
 800289e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2201      	movs	r2, #1
 80028a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2201      	movs	r2, #1
 80028ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2201      	movs	r2, #1
 80028b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2201      	movs	r2, #1
 80028be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2201      	movs	r2, #1
 80028c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2201      	movs	r2, #1
 80028ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2201      	movs	r2, #1
 80028d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2201      	movs	r2, #1
 80028de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028e2:	2300      	movs	r3, #0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80028f4:	bf00      	nop
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d109      	bne.n	8002924 <HAL_TIM_PWM_Start+0x24>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002916:	b2db      	uxtb	r3, r3
 8002918:	2b01      	cmp	r3, #1
 800291a:	bf14      	ite	ne
 800291c:	2301      	movne	r3, #1
 800291e:	2300      	moveq	r3, #0
 8002920:	b2db      	uxtb	r3, r3
 8002922:	e022      	b.n	800296a <HAL_TIM_PWM_Start+0x6a>
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	2b04      	cmp	r3, #4
 8002928:	d109      	bne.n	800293e <HAL_TIM_PWM_Start+0x3e>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2b01      	cmp	r3, #1
 8002934:	bf14      	ite	ne
 8002936:	2301      	movne	r3, #1
 8002938:	2300      	moveq	r3, #0
 800293a:	b2db      	uxtb	r3, r3
 800293c:	e015      	b.n	800296a <HAL_TIM_PWM_Start+0x6a>
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	2b08      	cmp	r3, #8
 8002942:	d109      	bne.n	8002958 <HAL_TIM_PWM_Start+0x58>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800294a:	b2db      	uxtb	r3, r3
 800294c:	2b01      	cmp	r3, #1
 800294e:	bf14      	ite	ne
 8002950:	2301      	movne	r3, #1
 8002952:	2300      	moveq	r3, #0
 8002954:	b2db      	uxtb	r3, r3
 8002956:	e008      	b.n	800296a <HAL_TIM_PWM_Start+0x6a>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800295e:	b2db      	uxtb	r3, r3
 8002960:	2b01      	cmp	r3, #1
 8002962:	bf14      	ite	ne
 8002964:	2301      	movne	r3, #1
 8002966:	2300      	moveq	r3, #0
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e068      	b.n	8002a44 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d104      	bne.n	8002982 <HAL_TIM_PWM_Start+0x82>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2202      	movs	r2, #2
 800297c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002980:	e013      	b.n	80029aa <HAL_TIM_PWM_Start+0xaa>
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	2b04      	cmp	r3, #4
 8002986:	d104      	bne.n	8002992 <HAL_TIM_PWM_Start+0x92>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2202      	movs	r2, #2
 800298c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002990:	e00b      	b.n	80029aa <HAL_TIM_PWM_Start+0xaa>
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	2b08      	cmp	r3, #8
 8002996:	d104      	bne.n	80029a2 <HAL_TIM_PWM_Start+0xa2>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2202      	movs	r2, #2
 800299c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029a0:	e003      	b.n	80029aa <HAL_TIM_PWM_Start+0xaa>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2202      	movs	r2, #2
 80029a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2201      	movs	r2, #1
 80029b0:	6839      	ldr	r1, [r7, #0]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f000 fb22 	bl	8002ffc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a23      	ldr	r2, [pc, #140]	; (8002a4c <HAL_TIM_PWM_Start+0x14c>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d107      	bne.n	80029d2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029d0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a1d      	ldr	r2, [pc, #116]	; (8002a4c <HAL_TIM_PWM_Start+0x14c>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d018      	beq.n	8002a0e <HAL_TIM_PWM_Start+0x10e>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029e4:	d013      	beq.n	8002a0e <HAL_TIM_PWM_Start+0x10e>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a19      	ldr	r2, [pc, #100]	; (8002a50 <HAL_TIM_PWM_Start+0x150>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d00e      	beq.n	8002a0e <HAL_TIM_PWM_Start+0x10e>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a17      	ldr	r2, [pc, #92]	; (8002a54 <HAL_TIM_PWM_Start+0x154>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d009      	beq.n	8002a0e <HAL_TIM_PWM_Start+0x10e>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a16      	ldr	r2, [pc, #88]	; (8002a58 <HAL_TIM_PWM_Start+0x158>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d004      	beq.n	8002a0e <HAL_TIM_PWM_Start+0x10e>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a14      	ldr	r2, [pc, #80]	; (8002a5c <HAL_TIM_PWM_Start+0x15c>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d111      	bne.n	8002a32 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f003 0307 	and.w	r3, r3, #7
 8002a18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2b06      	cmp	r3, #6
 8002a1e:	d010      	beq.n	8002a42 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f042 0201 	orr.w	r2, r2, #1
 8002a2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a30:	e007      	b.n	8002a42 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f042 0201 	orr.w	r2, r2, #1
 8002a40:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a42:	2300      	movs	r3, #0
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3710      	adds	r7, #16
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	40010000 	.word	0x40010000
 8002a50:	40000400 	.word	0x40000400
 8002a54:	40000800 	.word	0x40000800
 8002a58:	40000c00 	.word	0x40000c00
 8002a5c:	40014000 	.word	0x40014000

08002a60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b086      	sub	sp, #24
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d101      	bne.n	8002a7e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	e0ae      	b.n	8002bdc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2201      	movs	r2, #1
 8002a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2b0c      	cmp	r3, #12
 8002a8a:	f200 809f 	bhi.w	8002bcc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002a8e:	a201      	add	r2, pc, #4	; (adr r2, 8002a94 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a94:	08002ac9 	.word	0x08002ac9
 8002a98:	08002bcd 	.word	0x08002bcd
 8002a9c:	08002bcd 	.word	0x08002bcd
 8002aa0:	08002bcd 	.word	0x08002bcd
 8002aa4:	08002b09 	.word	0x08002b09
 8002aa8:	08002bcd 	.word	0x08002bcd
 8002aac:	08002bcd 	.word	0x08002bcd
 8002ab0:	08002bcd 	.word	0x08002bcd
 8002ab4:	08002b4b 	.word	0x08002b4b
 8002ab8:	08002bcd 	.word	0x08002bcd
 8002abc:	08002bcd 	.word	0x08002bcd
 8002ac0:	08002bcd 	.word	0x08002bcd
 8002ac4:	08002b8b 	.word	0x08002b8b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	68b9      	ldr	r1, [r7, #8]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f000 f908 	bl	8002ce4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	699a      	ldr	r2, [r3, #24]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f042 0208 	orr.w	r2, r2, #8
 8002ae2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	699a      	ldr	r2, [r3, #24]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f022 0204 	bic.w	r2, r2, #4
 8002af2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6999      	ldr	r1, [r3, #24]
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	691a      	ldr	r2, [r3, #16]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	430a      	orrs	r2, r1
 8002b04:	619a      	str	r2, [r3, #24]
      break;
 8002b06:	e064      	b.n	8002bd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68b9      	ldr	r1, [r7, #8]
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f000 f94e 	bl	8002db0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	699a      	ldr	r2, [r3, #24]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	699a      	ldr	r2, [r3, #24]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	6999      	ldr	r1, [r3, #24]
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	021a      	lsls	r2, r3, #8
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	430a      	orrs	r2, r1
 8002b46:	619a      	str	r2, [r3, #24]
      break;
 8002b48:	e043      	b.n	8002bd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68b9      	ldr	r1, [r7, #8]
 8002b50:	4618      	mov	r0, r3
 8002b52:	f000 f999 	bl	8002e88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	69da      	ldr	r2, [r3, #28]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f042 0208 	orr.w	r2, r2, #8
 8002b64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	69da      	ldr	r2, [r3, #28]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f022 0204 	bic.w	r2, r2, #4
 8002b74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	69d9      	ldr	r1, [r3, #28]
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	691a      	ldr	r2, [r3, #16]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	430a      	orrs	r2, r1
 8002b86:	61da      	str	r2, [r3, #28]
      break;
 8002b88:	e023      	b.n	8002bd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68b9      	ldr	r1, [r7, #8]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f000 f9e3 	bl	8002f5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	69da      	ldr	r2, [r3, #28]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ba4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	69da      	ldr	r2, [r3, #28]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	69d9      	ldr	r1, [r3, #28]
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	691b      	ldr	r3, [r3, #16]
 8002bc0:	021a      	lsls	r2, r3, #8
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	430a      	orrs	r2, r1
 8002bc8:	61da      	str	r2, [r3, #28]
      break;
 8002bca:	e002      	b.n	8002bd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	75fb      	strb	r3, [r7, #23]
      break;
 8002bd0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002bda:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3718      	adds	r7, #24
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b085      	sub	sp, #20
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	4a34      	ldr	r2, [pc, #208]	; (8002cc8 <TIM_Base_SetConfig+0xe4>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d00f      	beq.n	8002c1c <TIM_Base_SetConfig+0x38>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c02:	d00b      	beq.n	8002c1c <TIM_Base_SetConfig+0x38>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	4a31      	ldr	r2, [pc, #196]	; (8002ccc <TIM_Base_SetConfig+0xe8>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d007      	beq.n	8002c1c <TIM_Base_SetConfig+0x38>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4a30      	ldr	r2, [pc, #192]	; (8002cd0 <TIM_Base_SetConfig+0xec>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d003      	beq.n	8002c1c <TIM_Base_SetConfig+0x38>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	4a2f      	ldr	r2, [pc, #188]	; (8002cd4 <TIM_Base_SetConfig+0xf0>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d108      	bne.n	8002c2e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a25      	ldr	r2, [pc, #148]	; (8002cc8 <TIM_Base_SetConfig+0xe4>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d01b      	beq.n	8002c6e <TIM_Base_SetConfig+0x8a>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c3c:	d017      	beq.n	8002c6e <TIM_Base_SetConfig+0x8a>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a22      	ldr	r2, [pc, #136]	; (8002ccc <TIM_Base_SetConfig+0xe8>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d013      	beq.n	8002c6e <TIM_Base_SetConfig+0x8a>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a21      	ldr	r2, [pc, #132]	; (8002cd0 <TIM_Base_SetConfig+0xec>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d00f      	beq.n	8002c6e <TIM_Base_SetConfig+0x8a>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a20      	ldr	r2, [pc, #128]	; (8002cd4 <TIM_Base_SetConfig+0xf0>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d00b      	beq.n	8002c6e <TIM_Base_SetConfig+0x8a>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a1f      	ldr	r2, [pc, #124]	; (8002cd8 <TIM_Base_SetConfig+0xf4>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d007      	beq.n	8002c6e <TIM_Base_SetConfig+0x8a>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a1e      	ldr	r2, [pc, #120]	; (8002cdc <TIM_Base_SetConfig+0xf8>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d003      	beq.n	8002c6e <TIM_Base_SetConfig+0x8a>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a1d      	ldr	r2, [pc, #116]	; (8002ce0 <TIM_Base_SetConfig+0xfc>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d108      	bne.n	8002c80 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	68fa      	ldr	r2, [r7, #12]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	695b      	ldr	r3, [r3, #20]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	68fa      	ldr	r2, [r7, #12]
 8002c92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	689a      	ldr	r2, [r3, #8]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a08      	ldr	r2, [pc, #32]	; (8002cc8 <TIM_Base_SetConfig+0xe4>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d103      	bne.n	8002cb4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	691a      	ldr	r2, [r3, #16]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	615a      	str	r2, [r3, #20]
}
 8002cba:	bf00      	nop
 8002cbc:	3714      	adds	r7, #20
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	40010000 	.word	0x40010000
 8002ccc:	40000400 	.word	0x40000400
 8002cd0:	40000800 	.word	0x40000800
 8002cd4:	40000c00 	.word	0x40000c00
 8002cd8:	40014000 	.word	0x40014000
 8002cdc:	40014400 	.word	0x40014400
 8002ce0:	40014800 	.word	0x40014800

08002ce4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b087      	sub	sp, #28
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a1b      	ldr	r3, [r3, #32]
 8002cf2:	f023 0201 	bic.w	r2, r3, #1
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a1b      	ldr	r3, [r3, #32]
 8002cfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	699b      	ldr	r3, [r3, #24]
 8002d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f023 0303 	bic.w	r3, r3, #3
 8002d1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	68fa      	ldr	r2, [r7, #12]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	f023 0302 	bic.w	r3, r3, #2
 8002d2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	697a      	ldr	r2, [r7, #20]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a1c      	ldr	r2, [pc, #112]	; (8002dac <TIM_OC1_SetConfig+0xc8>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d10c      	bne.n	8002d5a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	f023 0308 	bic.w	r3, r3, #8
 8002d46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	697a      	ldr	r2, [r7, #20]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	f023 0304 	bic.w	r3, r3, #4
 8002d58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a13      	ldr	r2, [pc, #76]	; (8002dac <TIM_OC1_SetConfig+0xc8>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d111      	bne.n	8002d86 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	695b      	ldr	r3, [r3, #20]
 8002d76:	693a      	ldr	r2, [r7, #16]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	693a      	ldr	r2, [r7, #16]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	693a      	ldr	r2, [r7, #16]
 8002d8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	68fa      	ldr	r2, [r7, #12]
 8002d90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	685a      	ldr	r2, [r3, #4]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	697a      	ldr	r2, [r7, #20]
 8002d9e:	621a      	str	r2, [r3, #32]
}
 8002da0:	bf00      	nop
 8002da2:	371c      	adds	r7, #28
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr
 8002dac:	40010000 	.word	0x40010000

08002db0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b087      	sub	sp, #28
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a1b      	ldr	r3, [r3, #32]
 8002dbe:	f023 0210 	bic.w	r2, r3, #16
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002de6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	021b      	lsls	r3, r3, #8
 8002dee:	68fa      	ldr	r2, [r7, #12]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	f023 0320 	bic.w	r3, r3, #32
 8002dfa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	011b      	lsls	r3, r3, #4
 8002e02:	697a      	ldr	r2, [r7, #20]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4a1e      	ldr	r2, [pc, #120]	; (8002e84 <TIM_OC2_SetConfig+0xd4>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d10d      	bne.n	8002e2c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	011b      	lsls	r3, r3, #4
 8002e1e:	697a      	ldr	r2, [r7, #20]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e2a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4a15      	ldr	r2, [pc, #84]	; (8002e84 <TIM_OC2_SetConfig+0xd4>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d113      	bne.n	8002e5c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	695b      	ldr	r3, [r3, #20]
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	693a      	ldr	r2, [r7, #16]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	693a      	ldr	r2, [r7, #16]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	693a      	ldr	r2, [r7, #16]
 8002e60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	68fa      	ldr	r2, [r7, #12]
 8002e66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	685a      	ldr	r2, [r3, #4]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	697a      	ldr	r2, [r7, #20]
 8002e74:	621a      	str	r2, [r3, #32]
}
 8002e76:	bf00      	nop
 8002e78:	371c      	adds	r7, #28
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	40010000 	.word	0x40010000

08002e88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b087      	sub	sp, #28
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a1b      	ldr	r3, [r3, #32]
 8002e96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a1b      	ldr	r3, [r3, #32]
 8002ea2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	69db      	ldr	r3, [r3, #28]
 8002eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f023 0303 	bic.w	r3, r3, #3
 8002ebe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	68fa      	ldr	r2, [r7, #12]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ed0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	021b      	lsls	r3, r3, #8
 8002ed8:	697a      	ldr	r2, [r7, #20]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a1d      	ldr	r2, [pc, #116]	; (8002f58 <TIM_OC3_SetConfig+0xd0>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d10d      	bne.n	8002f02 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002eec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	021b      	lsls	r3, r3, #8
 8002ef4:	697a      	ldr	r2, [r7, #20]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a14      	ldr	r2, [pc, #80]	; (8002f58 <TIM_OC3_SetConfig+0xd0>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d113      	bne.n	8002f32 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	011b      	lsls	r3, r3, #4
 8002f20:	693a      	ldr	r2, [r7, #16]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	011b      	lsls	r3, r3, #4
 8002f2c:	693a      	ldr	r2, [r7, #16]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	693a      	ldr	r2, [r7, #16]
 8002f36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	68fa      	ldr	r2, [r7, #12]
 8002f3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	685a      	ldr	r2, [r3, #4]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	697a      	ldr	r2, [r7, #20]
 8002f4a:	621a      	str	r2, [r3, #32]
}
 8002f4c:	bf00      	nop
 8002f4e:	371c      	adds	r7, #28
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr
 8002f58:	40010000 	.word	0x40010000

08002f5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b087      	sub	sp, #28
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a1b      	ldr	r3, [r3, #32]
 8002f6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a1b      	ldr	r3, [r3, #32]
 8002f76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	69db      	ldr	r3, [r3, #28]
 8002f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	021b      	lsls	r3, r3, #8
 8002f9a:	68fa      	ldr	r2, [r7, #12]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002fa6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	031b      	lsls	r3, r3, #12
 8002fae:	693a      	ldr	r2, [r7, #16]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4a10      	ldr	r2, [pc, #64]	; (8002ff8 <TIM_OC4_SetConfig+0x9c>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d109      	bne.n	8002fd0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002fc2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	695b      	ldr	r3, [r3, #20]
 8002fc8:	019b      	lsls	r3, r3, #6
 8002fca:	697a      	ldr	r2, [r7, #20]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	697a      	ldr	r2, [r7, #20]
 8002fd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	68fa      	ldr	r2, [r7, #12]
 8002fda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685a      	ldr	r2, [r3, #4]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	693a      	ldr	r2, [r7, #16]
 8002fe8:	621a      	str	r2, [r3, #32]
}
 8002fea:	bf00      	nop
 8002fec:	371c      	adds	r7, #28
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	40010000 	.word	0x40010000

08002ffc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b087      	sub	sp, #28
 8003000:	af00      	add	r7, sp, #0
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	f003 031f 	and.w	r3, r3, #31
 800300e:	2201      	movs	r2, #1
 8003010:	fa02 f303 	lsl.w	r3, r2, r3
 8003014:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6a1a      	ldr	r2, [r3, #32]
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	43db      	mvns	r3, r3
 800301e:	401a      	ands	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6a1a      	ldr	r2, [r3, #32]
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	f003 031f 	and.w	r3, r3, #31
 800302e:	6879      	ldr	r1, [r7, #4]
 8003030:	fa01 f303 	lsl.w	r3, r1, r3
 8003034:	431a      	orrs	r2, r3
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	621a      	str	r2, [r3, #32]
}
 800303a:	bf00      	nop
 800303c:	371c      	adds	r7, #28
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr

08003046 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003046:	b580      	push	{r7, lr}
 8003048:	b082      	sub	sp, #8
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d101      	bne.n	8003058 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e03f      	b.n	80030d8 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800305e:	b2db      	uxtb	r3, r3
 8003060:	2b00      	cmp	r3, #0
 8003062:	d106      	bne.n	8003072 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f7fd ff45 	bl	8000efc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2224      	movs	r2, #36	; 0x24
 8003076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	68da      	ldr	r2, [r3, #12]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003088:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 fc46 	bl	800391c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	691a      	ldr	r2, [r3, #16]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800309e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	695a      	ldr	r2, [r3, #20]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030ae:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	68da      	ldr	r2, [r3, #12]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030be:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2220      	movs	r2, #32
 80030ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2220      	movs	r2, #32
 80030d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030d6:	2300      	movs	r3, #0
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3708      	adds	r7, #8
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b08a      	sub	sp, #40	; 0x28
 80030e4:	af02      	add	r7, sp, #8
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	603b      	str	r3, [r7, #0]
 80030ec:	4613      	mov	r3, r2
 80030ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80030f0:	2300      	movs	r3, #0
 80030f2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	2b20      	cmp	r3, #32
 80030fe:	d17c      	bne.n	80031fa <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d002      	beq.n	800310c <HAL_UART_Transmit+0x2c>
 8003106:	88fb      	ldrh	r3, [r7, #6]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d101      	bne.n	8003110 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e075      	b.n	80031fc <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003116:	2b01      	cmp	r3, #1
 8003118:	d101      	bne.n	800311e <HAL_UART_Transmit+0x3e>
 800311a:	2302      	movs	r3, #2
 800311c:	e06e      	b.n	80031fc <HAL_UART_Transmit+0x11c>
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2201      	movs	r2, #1
 8003122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2200      	movs	r2, #0
 800312a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2221      	movs	r2, #33	; 0x21
 8003130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003134:	f7fe f854 	bl	80011e0 <HAL_GetTick>
 8003138:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	88fa      	ldrh	r2, [r7, #6]
 800313e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	88fa      	ldrh	r2, [r7, #6]
 8003144:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800314e:	d108      	bne.n	8003162 <HAL_UART_Transmit+0x82>
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	691b      	ldr	r3, [r3, #16]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d104      	bne.n	8003162 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003158:	2300      	movs	r3, #0
 800315a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	61bb      	str	r3, [r7, #24]
 8003160:	e003      	b.n	800316a <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003166:	2300      	movs	r3, #0
 8003168:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003172:	e02a      	b.n	80031ca <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	9300      	str	r3, [sp, #0]
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	2200      	movs	r2, #0
 800317c:	2180      	movs	r1, #128	; 0x80
 800317e:	68f8      	ldr	r0, [r7, #12]
 8003180:	f000 fa34 	bl	80035ec <UART_WaitOnFlagUntilTimeout>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d001      	beq.n	800318e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e036      	b.n	80031fc <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d10b      	bne.n	80031ac <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	881b      	ldrh	r3, [r3, #0]
 8003198:	461a      	mov	r2, r3
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031a2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	3302      	adds	r3, #2
 80031a8:	61bb      	str	r3, [r7, #24]
 80031aa:	e007      	b.n	80031bc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	781a      	ldrb	r2, [r3, #0]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	3301      	adds	r3, #1
 80031ba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	3b01      	subs	r3, #1
 80031c4:	b29a      	uxth	r2, r3
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d1cf      	bne.n	8003174 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	9300      	str	r3, [sp, #0]
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	2200      	movs	r2, #0
 80031dc:	2140      	movs	r1, #64	; 0x40
 80031de:	68f8      	ldr	r0, [r7, #12]
 80031e0:	f000 fa04 	bl	80035ec <UART_WaitOnFlagUntilTimeout>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d001      	beq.n	80031ee <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e006      	b.n	80031fc <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2220      	movs	r2, #32
 80031f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80031f6:	2300      	movs	r3, #0
 80031f8:	e000      	b.n	80031fc <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80031fa:	2302      	movs	r3, #2
  }
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3720      	adds	r7, #32
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b08a      	sub	sp, #40	; 0x28
 8003208:	af02      	add	r7, sp, #8
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	603b      	str	r3, [r7, #0]
 8003210:	4613      	mov	r3, r2
 8003212:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003214:	2300      	movs	r3, #0
 8003216:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800321e:	b2db      	uxtb	r3, r3
 8003220:	2b20      	cmp	r3, #32
 8003222:	f040 808c 	bne.w	800333e <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d002      	beq.n	8003232 <HAL_UART_Receive+0x2e>
 800322c:	88fb      	ldrh	r3, [r7, #6]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d101      	bne.n	8003236 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e084      	b.n	8003340 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800323c:	2b01      	cmp	r3, #1
 800323e:	d101      	bne.n	8003244 <HAL_UART_Receive+0x40>
 8003240:	2302      	movs	r3, #2
 8003242:	e07d      	b.n	8003340 <HAL_UART_Receive+0x13c>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2200      	movs	r2, #0
 8003250:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2222      	movs	r2, #34	; 0x22
 8003256:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003260:	f7fd ffbe 	bl	80011e0 <HAL_GetTick>
 8003264:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	88fa      	ldrh	r2, [r7, #6]
 800326a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	88fa      	ldrh	r2, [r7, #6]
 8003270:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800327a:	d108      	bne.n	800328e <HAL_UART_Receive+0x8a>
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	691b      	ldr	r3, [r3, #16]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d104      	bne.n	800328e <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003284:	2300      	movs	r3, #0
 8003286:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	61bb      	str	r3, [r7, #24]
 800328c:	e003      	b.n	8003296 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003292:	2300      	movs	r3, #0
 8003294:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800329e:	e043      	b.n	8003328 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	9300      	str	r3, [sp, #0]
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	2200      	movs	r2, #0
 80032a8:	2120      	movs	r1, #32
 80032aa:	68f8      	ldr	r0, [r7, #12]
 80032ac:	f000 f99e 	bl	80035ec <UART_WaitOnFlagUntilTimeout>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d001      	beq.n	80032ba <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e042      	b.n	8003340 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d10c      	bne.n	80032da <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032cc:	b29a      	uxth	r2, r3
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	3302      	adds	r3, #2
 80032d6:	61bb      	str	r3, [r7, #24]
 80032d8:	e01f      	b.n	800331a <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032e2:	d007      	beq.n	80032f4 <HAL_UART_Receive+0xf0>
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d10a      	bne.n	8003302 <HAL_UART_Receive+0xfe>
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	691b      	ldr	r3, [r3, #16]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d106      	bne.n	8003302 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	b2da      	uxtb	r2, r3
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	701a      	strb	r2, [r3, #0]
 8003300:	e008      	b.n	8003314 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	b2db      	uxtb	r3, r3
 800330a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800330e:	b2da      	uxtb	r2, r3
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	3301      	adds	r3, #1
 8003318:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800331e:	b29b      	uxth	r3, r3
 8003320:	3b01      	subs	r3, #1
 8003322:	b29a      	uxth	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800332c:	b29b      	uxth	r3, r3
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1b6      	bne.n	80032a0 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2220      	movs	r2, #32
 8003336:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800333a:	2300      	movs	r3, #0
 800333c:	e000      	b.n	8003340 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800333e:	2302      	movs	r3, #2
  }
}
 8003340:	4618      	mov	r0, r3
 8003342:	3720      	adds	r7, #32
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	60b9      	str	r1, [r7, #8]
 8003352:	4613      	mov	r3, r2
 8003354:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800335c:	b2db      	uxtb	r3, r3
 800335e:	2b20      	cmp	r3, #32
 8003360:	d11d      	bne.n	800339e <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d002      	beq.n	800336e <HAL_UART_Receive_DMA+0x26>
 8003368:	88fb      	ldrh	r3, [r7, #6]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d101      	bne.n	8003372 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e016      	b.n	80033a0 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003378:	2b01      	cmp	r3, #1
 800337a:	d101      	bne.n	8003380 <HAL_UART_Receive_DMA+0x38>
 800337c:	2302      	movs	r3, #2
 800337e:	e00f      	b.n	80033a0 <HAL_UART_Receive_DMA+0x58>
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2200      	movs	r2, #0
 800338c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800338e:	88fb      	ldrh	r3, [r7, #6]
 8003390:	461a      	mov	r2, r3
 8003392:	68b9      	ldr	r1, [r7, #8]
 8003394:	68f8      	ldr	r0, [r7, #12]
 8003396:	f000 f997 	bl	80036c8 <UART_Start_Receive_DMA>
 800339a:	4603      	mov	r3, r0
 800339c:	e000      	b.n	80033a0 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800339e:	2302      	movs	r3, #2
  }
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3710      	adds	r7, #16
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80033b0:	bf00      	nop
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80033c4:	bf00      	nop
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	460b      	mov	r3, r1
 80033ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80033f0:	bf00      	nop
 80033f2:	370c      	adds	r7, #12
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr

080033fc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b09c      	sub	sp, #112	; 0x70
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003408:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003414:	2b00      	cmp	r3, #0
 8003416:	d172      	bne.n	80034fe <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003418:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800341a:	2200      	movs	r2, #0
 800341c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800341e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	330c      	adds	r3, #12
 8003424:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003426:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003428:	e853 3f00 	ldrex	r3, [r3]
 800342c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800342e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003430:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003434:	66bb      	str	r3, [r7, #104]	; 0x68
 8003436:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	330c      	adds	r3, #12
 800343c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800343e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003440:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003442:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003444:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003446:	e841 2300 	strex	r3, r2, [r1]
 800344a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800344c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1e5      	bne.n	800341e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003452:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	3314      	adds	r3, #20
 8003458:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800345a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800345c:	e853 3f00 	ldrex	r3, [r3]
 8003460:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003464:	f023 0301 	bic.w	r3, r3, #1
 8003468:	667b      	str	r3, [r7, #100]	; 0x64
 800346a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	3314      	adds	r3, #20
 8003470:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003472:	647a      	str	r2, [r7, #68]	; 0x44
 8003474:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003476:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003478:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800347a:	e841 2300 	strex	r3, r2, [r1]
 800347e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003482:	2b00      	cmp	r3, #0
 8003484:	d1e5      	bne.n	8003452 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003486:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	3314      	adds	r3, #20
 800348c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800348e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003490:	e853 3f00 	ldrex	r3, [r3]
 8003494:	623b      	str	r3, [r7, #32]
   return(result);
 8003496:	6a3b      	ldr	r3, [r7, #32]
 8003498:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800349c:	663b      	str	r3, [r7, #96]	; 0x60
 800349e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	3314      	adds	r3, #20
 80034a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80034a6:	633a      	str	r2, [r7, #48]	; 0x30
 80034a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80034ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034ae:	e841 2300 	strex	r3, r2, [r1]
 80034b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80034b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1e5      	bne.n	8003486 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80034ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034bc:	2220      	movs	r2, #32
 80034be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d119      	bne.n	80034fe <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	330c      	adds	r3, #12
 80034d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	e853 3f00 	ldrex	r3, [r3]
 80034d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f023 0310 	bic.w	r3, r3, #16
 80034e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	330c      	adds	r3, #12
 80034e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80034ea:	61fa      	str	r2, [r7, #28]
 80034ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ee:	69b9      	ldr	r1, [r7, #24]
 80034f0:	69fa      	ldr	r2, [r7, #28]
 80034f2:	e841 2300 	strex	r3, r2, [r1]
 80034f6:	617b      	str	r3, [r7, #20]
   return(result);
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d1e5      	bne.n	80034ca <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003502:	2b01      	cmp	r3, #1
 8003504:	d106      	bne.n	8003514 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003506:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003508:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800350a:	4619      	mov	r1, r3
 800350c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800350e:	f7ff ff69 	bl	80033e4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003512:	e002      	b.n	800351a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8003514:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003516:	f7ff ff47 	bl	80033a8 <HAL_UART_RxCpltCallback>
}
 800351a:	bf00      	nop
 800351c:	3770      	adds	r7, #112	; 0x70
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003522:	b580      	push	{r7, lr}
 8003524:	b084      	sub	sp, #16
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800352e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003534:	2b01      	cmp	r3, #1
 8003536:	d108      	bne.n	800354a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800353c:	085b      	lsrs	r3, r3, #1
 800353e:	b29b      	uxth	r3, r3
 8003540:	4619      	mov	r1, r3
 8003542:	68f8      	ldr	r0, [r7, #12]
 8003544:	f7ff ff4e 	bl	80033e4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003548:	e002      	b.n	8003550 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f7ff ff36 	bl	80033bc <HAL_UART_RxHalfCpltCallback>
}
 8003550:	bf00      	nop
 8003552:	3710      	adds	r7, #16
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003560:	2300      	movs	r3, #0
 8003562:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003568:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	695b      	ldr	r3, [r3, #20]
 8003570:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003574:	2b80      	cmp	r3, #128	; 0x80
 8003576:	bf0c      	ite	eq
 8003578:	2301      	moveq	r3, #1
 800357a:	2300      	movne	r3, #0
 800357c:	b2db      	uxtb	r3, r3
 800357e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003586:	b2db      	uxtb	r3, r3
 8003588:	2b21      	cmp	r3, #33	; 0x21
 800358a:	d108      	bne.n	800359e <UART_DMAError+0x46>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d005      	beq.n	800359e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	2200      	movs	r2, #0
 8003596:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003598:	68b8      	ldr	r0, [r7, #8]
 800359a:	f000 f933 	bl	8003804 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	695b      	ldr	r3, [r3, #20]
 80035a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a8:	2b40      	cmp	r3, #64	; 0x40
 80035aa:	bf0c      	ite	eq
 80035ac:	2301      	moveq	r3, #1
 80035ae:	2300      	movne	r3, #0
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	2b22      	cmp	r3, #34	; 0x22
 80035be:	d108      	bne.n	80035d2 <UART_DMAError+0x7a>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d005      	beq.n	80035d2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	2200      	movs	r2, #0
 80035ca:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80035cc:	68b8      	ldr	r0, [r7, #8]
 80035ce:	f000 f941 	bl	8003854 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d6:	f043 0210 	orr.w	r2, r3, #16
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80035de:	68b8      	ldr	r0, [r7, #8]
 80035e0:	f7ff fef6 	bl	80033d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80035e4:	bf00      	nop
 80035e6:	3710      	adds	r7, #16
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b090      	sub	sp, #64	; 0x40
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	603b      	str	r3, [r7, #0]
 80035f8:	4613      	mov	r3, r2
 80035fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035fc:	e050      	b.n	80036a0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003604:	d04c      	beq.n	80036a0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003606:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003608:	2b00      	cmp	r3, #0
 800360a:	d007      	beq.n	800361c <UART_WaitOnFlagUntilTimeout+0x30>
 800360c:	f7fd fde8 	bl	80011e0 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003618:	429a      	cmp	r2, r3
 800361a:	d241      	bcs.n	80036a0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	330c      	adds	r3, #12
 8003622:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003626:	e853 3f00 	ldrex	r3, [r3]
 800362a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800362c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003632:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	330c      	adds	r3, #12
 800363a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800363c:	637a      	str	r2, [r7, #52]	; 0x34
 800363e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003640:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003642:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003644:	e841 2300 	strex	r3, r2, [r1]
 8003648:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800364a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800364c:	2b00      	cmp	r3, #0
 800364e:	d1e5      	bne.n	800361c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	3314      	adds	r3, #20
 8003656:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	e853 3f00 	ldrex	r3, [r3]
 800365e:	613b      	str	r3, [r7, #16]
   return(result);
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	f023 0301 	bic.w	r3, r3, #1
 8003666:	63bb      	str	r3, [r7, #56]	; 0x38
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	3314      	adds	r3, #20
 800366e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003670:	623a      	str	r2, [r7, #32]
 8003672:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003674:	69f9      	ldr	r1, [r7, #28]
 8003676:	6a3a      	ldr	r2, [r7, #32]
 8003678:	e841 2300 	strex	r3, r2, [r1]
 800367c:	61bb      	str	r3, [r7, #24]
   return(result);
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d1e5      	bne.n	8003650 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2220      	movs	r2, #32
 8003688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2220      	movs	r2, #32
 8003690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e00f      	b.n	80036c0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	4013      	ands	r3, r2
 80036aa:	68ba      	ldr	r2, [r7, #8]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	bf0c      	ite	eq
 80036b0:	2301      	moveq	r3, #1
 80036b2:	2300      	movne	r3, #0
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	461a      	mov	r2, r3
 80036b8:	79fb      	ldrb	r3, [r7, #7]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d09f      	beq.n	80035fe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80036be:	2300      	movs	r3, #0
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3740      	adds	r7, #64	; 0x40
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b098      	sub	sp, #96	; 0x60
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	4613      	mov	r3, r2
 80036d4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80036d6:	68ba      	ldr	r2, [r7, #8]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	88fa      	ldrh	r2, [r7, #6]
 80036e0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2200      	movs	r2, #0
 80036e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2222      	movs	r2, #34	; 0x22
 80036ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f4:	4a40      	ldr	r2, [pc, #256]	; (80037f8 <UART_Start_Receive_DMA+0x130>)
 80036f6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036fc:	4a3f      	ldr	r2, [pc, #252]	; (80037fc <UART_Start_Receive_DMA+0x134>)
 80036fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003704:	4a3e      	ldr	r2, [pc, #248]	; (8003800 <UART_Start_Receive_DMA+0x138>)
 8003706:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800370c:	2200      	movs	r2, #0
 800370e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003710:	f107 0308 	add.w	r3, r7, #8
 8003714:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	3304      	adds	r3, #4
 8003720:	4619      	mov	r1, r3
 8003722:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	88fb      	ldrh	r3, [r7, #6]
 8003728:	f7fd ff4a 	bl	80015c0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800372c:	2300      	movs	r3, #0
 800372e:	613b      	str	r3, [r7, #16]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	613b      	str	r3, [r7, #16]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	613b      	str	r3, [r7, #16]
 8003740:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2200      	movs	r2, #0
 8003746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d019      	beq.n	8003786 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	330c      	adds	r3, #12
 8003758:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800375a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800375c:	e853 3f00 	ldrex	r3, [r3]
 8003760:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003764:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003768:	65bb      	str	r3, [r7, #88]	; 0x58
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	330c      	adds	r3, #12
 8003770:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003772:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003774:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003776:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003778:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800377a:	e841 2300 	strex	r3, r2, [r1]
 800377e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003780:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1e5      	bne.n	8003752 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	3314      	adds	r3, #20
 800378c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800378e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003790:	e853 3f00 	ldrex	r3, [r3]
 8003794:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003798:	f043 0301 	orr.w	r3, r3, #1
 800379c:	657b      	str	r3, [r7, #84]	; 0x54
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	3314      	adds	r3, #20
 80037a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80037a6:	63ba      	str	r2, [r7, #56]	; 0x38
 80037a8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037aa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80037ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80037ae:	e841 2300 	strex	r3, r2, [r1]
 80037b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80037b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d1e5      	bne.n	8003786 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	3314      	adds	r3, #20
 80037c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	e853 3f00 	ldrex	r3, [r3]
 80037c8:	617b      	str	r3, [r7, #20]
   return(result);
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037d0:	653b      	str	r3, [r7, #80]	; 0x50
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	3314      	adds	r3, #20
 80037d8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80037da:	627a      	str	r2, [r7, #36]	; 0x24
 80037dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037de:	6a39      	ldr	r1, [r7, #32]
 80037e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037e2:	e841 2300 	strex	r3, r2, [r1]
 80037e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d1e5      	bne.n	80037ba <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80037ee:	2300      	movs	r3, #0
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3760      	adds	r7, #96	; 0x60
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	080033fd 	.word	0x080033fd
 80037fc:	08003523 	.word	0x08003523
 8003800:	08003559 	.word	0x08003559

08003804 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003804:	b480      	push	{r7}
 8003806:	b089      	sub	sp, #36	; 0x24
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	330c      	adds	r3, #12
 8003812:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	e853 3f00 	ldrex	r3, [r3]
 800381a:	60bb      	str	r3, [r7, #8]
   return(result);
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003822:	61fb      	str	r3, [r7, #28]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	330c      	adds	r3, #12
 800382a:	69fa      	ldr	r2, [r7, #28]
 800382c:	61ba      	str	r2, [r7, #24]
 800382e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003830:	6979      	ldr	r1, [r7, #20]
 8003832:	69ba      	ldr	r2, [r7, #24]
 8003834:	e841 2300 	strex	r3, r2, [r1]
 8003838:	613b      	str	r3, [r7, #16]
   return(result);
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d1e5      	bne.n	800380c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2220      	movs	r2, #32
 8003844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003848:	bf00      	nop
 800384a:	3724      	adds	r7, #36	; 0x24
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003854:	b480      	push	{r7}
 8003856:	b095      	sub	sp, #84	; 0x54
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	330c      	adds	r3, #12
 8003862:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003866:	e853 3f00 	ldrex	r3, [r3]
 800386a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800386c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800386e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003872:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	330c      	adds	r3, #12
 800387a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800387c:	643a      	str	r2, [r7, #64]	; 0x40
 800387e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003880:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003882:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003884:	e841 2300 	strex	r3, r2, [r1]
 8003888:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800388a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800388c:	2b00      	cmp	r3, #0
 800388e:	d1e5      	bne.n	800385c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	3314      	adds	r3, #20
 8003896:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003898:	6a3b      	ldr	r3, [r7, #32]
 800389a:	e853 3f00 	ldrex	r3, [r3]
 800389e:	61fb      	str	r3, [r7, #28]
   return(result);
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	f023 0301 	bic.w	r3, r3, #1
 80038a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	3314      	adds	r3, #20
 80038ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038b8:	e841 2300 	strex	r3, r2, [r1]
 80038bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80038be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d1e5      	bne.n	8003890 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d119      	bne.n	8003900 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	330c      	adds	r3, #12
 80038d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	e853 3f00 	ldrex	r3, [r3]
 80038da:	60bb      	str	r3, [r7, #8]
   return(result);
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	f023 0310 	bic.w	r3, r3, #16
 80038e2:	647b      	str	r3, [r7, #68]	; 0x44
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	330c      	adds	r3, #12
 80038ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80038ec:	61ba      	str	r2, [r7, #24]
 80038ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f0:	6979      	ldr	r1, [r7, #20]
 80038f2:	69ba      	ldr	r2, [r7, #24]
 80038f4:	e841 2300 	strex	r3, r2, [r1]
 80038f8:	613b      	str	r3, [r7, #16]
   return(result);
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d1e5      	bne.n	80038cc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2220      	movs	r2, #32
 8003904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800390e:	bf00      	nop
 8003910:	3754      	adds	r7, #84	; 0x54
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr
	...

0800391c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800391c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003920:	b0c0      	sub	sp, #256	; 0x100
 8003922:	af00      	add	r7, sp, #0
 8003924:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	691b      	ldr	r3, [r3, #16]
 8003930:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003938:	68d9      	ldr	r1, [r3, #12]
 800393a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	ea40 0301 	orr.w	r3, r0, r1
 8003944:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003946:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800394a:	689a      	ldr	r2, [r3, #8]
 800394c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	431a      	orrs	r2, r3
 8003954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003958:	695b      	ldr	r3, [r3, #20]
 800395a:	431a      	orrs	r2, r3
 800395c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003960:	69db      	ldr	r3, [r3, #28]
 8003962:	4313      	orrs	r3, r2
 8003964:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003974:	f021 010c 	bic.w	r1, r1, #12
 8003978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003982:	430b      	orrs	r3, r1
 8003984:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	695b      	ldr	r3, [r3, #20]
 800398e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003996:	6999      	ldr	r1, [r3, #24]
 8003998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	ea40 0301 	orr.w	r3, r0, r1
 80039a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80039a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	4b8f      	ldr	r3, [pc, #572]	; (8003be8 <UART_SetConfig+0x2cc>)
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d005      	beq.n	80039bc <UART_SetConfig+0xa0>
 80039b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	4b8d      	ldr	r3, [pc, #564]	; (8003bec <UART_SetConfig+0x2d0>)
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d104      	bne.n	80039c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80039bc:	f7fe fee4 	bl	8002788 <HAL_RCC_GetPCLK2Freq>
 80039c0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80039c4:	e003      	b.n	80039ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80039c6:	f7fe fecb 	bl	8002760 <HAL_RCC_GetPCLK1Freq>
 80039ca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039d2:	69db      	ldr	r3, [r3, #28]
 80039d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039d8:	f040 810c 	bne.w	8003bf4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80039dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039e0:	2200      	movs	r2, #0
 80039e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80039e6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80039ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80039ee:	4622      	mov	r2, r4
 80039f0:	462b      	mov	r3, r5
 80039f2:	1891      	adds	r1, r2, r2
 80039f4:	65b9      	str	r1, [r7, #88]	; 0x58
 80039f6:	415b      	adcs	r3, r3
 80039f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80039fe:	4621      	mov	r1, r4
 8003a00:	eb12 0801 	adds.w	r8, r2, r1
 8003a04:	4629      	mov	r1, r5
 8003a06:	eb43 0901 	adc.w	r9, r3, r1
 8003a0a:	f04f 0200 	mov.w	r2, #0
 8003a0e:	f04f 0300 	mov.w	r3, #0
 8003a12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a1e:	4690      	mov	r8, r2
 8003a20:	4699      	mov	r9, r3
 8003a22:	4623      	mov	r3, r4
 8003a24:	eb18 0303 	adds.w	r3, r8, r3
 8003a28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003a2c:	462b      	mov	r3, r5
 8003a2e:	eb49 0303 	adc.w	r3, r9, r3
 8003a32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003a36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003a42:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003a46:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003a4a:	460b      	mov	r3, r1
 8003a4c:	18db      	adds	r3, r3, r3
 8003a4e:	653b      	str	r3, [r7, #80]	; 0x50
 8003a50:	4613      	mov	r3, r2
 8003a52:	eb42 0303 	adc.w	r3, r2, r3
 8003a56:	657b      	str	r3, [r7, #84]	; 0x54
 8003a58:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003a5c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003a60:	f7fc fbba 	bl	80001d8 <__aeabi_uldivmod>
 8003a64:	4602      	mov	r2, r0
 8003a66:	460b      	mov	r3, r1
 8003a68:	4b61      	ldr	r3, [pc, #388]	; (8003bf0 <UART_SetConfig+0x2d4>)
 8003a6a:	fba3 2302 	umull	r2, r3, r3, r2
 8003a6e:	095b      	lsrs	r3, r3, #5
 8003a70:	011c      	lsls	r4, r3, #4
 8003a72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a76:	2200      	movs	r2, #0
 8003a78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a7c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003a80:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003a84:	4642      	mov	r2, r8
 8003a86:	464b      	mov	r3, r9
 8003a88:	1891      	adds	r1, r2, r2
 8003a8a:	64b9      	str	r1, [r7, #72]	; 0x48
 8003a8c:	415b      	adcs	r3, r3
 8003a8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a90:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003a94:	4641      	mov	r1, r8
 8003a96:	eb12 0a01 	adds.w	sl, r2, r1
 8003a9a:	4649      	mov	r1, r9
 8003a9c:	eb43 0b01 	adc.w	fp, r3, r1
 8003aa0:	f04f 0200 	mov.w	r2, #0
 8003aa4:	f04f 0300 	mov.w	r3, #0
 8003aa8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003aac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ab0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ab4:	4692      	mov	sl, r2
 8003ab6:	469b      	mov	fp, r3
 8003ab8:	4643      	mov	r3, r8
 8003aba:	eb1a 0303 	adds.w	r3, sl, r3
 8003abe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ac2:	464b      	mov	r3, r9
 8003ac4:	eb4b 0303 	adc.w	r3, fp, r3
 8003ac8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ad8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003adc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	18db      	adds	r3, r3, r3
 8003ae4:	643b      	str	r3, [r7, #64]	; 0x40
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	eb42 0303 	adc.w	r3, r2, r3
 8003aec:	647b      	str	r3, [r7, #68]	; 0x44
 8003aee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003af2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003af6:	f7fc fb6f 	bl	80001d8 <__aeabi_uldivmod>
 8003afa:	4602      	mov	r2, r0
 8003afc:	460b      	mov	r3, r1
 8003afe:	4611      	mov	r1, r2
 8003b00:	4b3b      	ldr	r3, [pc, #236]	; (8003bf0 <UART_SetConfig+0x2d4>)
 8003b02:	fba3 2301 	umull	r2, r3, r3, r1
 8003b06:	095b      	lsrs	r3, r3, #5
 8003b08:	2264      	movs	r2, #100	; 0x64
 8003b0a:	fb02 f303 	mul.w	r3, r2, r3
 8003b0e:	1acb      	subs	r3, r1, r3
 8003b10:	00db      	lsls	r3, r3, #3
 8003b12:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003b16:	4b36      	ldr	r3, [pc, #216]	; (8003bf0 <UART_SetConfig+0x2d4>)
 8003b18:	fba3 2302 	umull	r2, r3, r3, r2
 8003b1c:	095b      	lsrs	r3, r3, #5
 8003b1e:	005b      	lsls	r3, r3, #1
 8003b20:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b24:	441c      	add	r4, r3
 8003b26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003b30:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003b34:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003b38:	4642      	mov	r2, r8
 8003b3a:	464b      	mov	r3, r9
 8003b3c:	1891      	adds	r1, r2, r2
 8003b3e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003b40:	415b      	adcs	r3, r3
 8003b42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003b48:	4641      	mov	r1, r8
 8003b4a:	1851      	adds	r1, r2, r1
 8003b4c:	6339      	str	r1, [r7, #48]	; 0x30
 8003b4e:	4649      	mov	r1, r9
 8003b50:	414b      	adcs	r3, r1
 8003b52:	637b      	str	r3, [r7, #52]	; 0x34
 8003b54:	f04f 0200 	mov.w	r2, #0
 8003b58:	f04f 0300 	mov.w	r3, #0
 8003b5c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003b60:	4659      	mov	r1, fp
 8003b62:	00cb      	lsls	r3, r1, #3
 8003b64:	4651      	mov	r1, sl
 8003b66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b6a:	4651      	mov	r1, sl
 8003b6c:	00ca      	lsls	r2, r1, #3
 8003b6e:	4610      	mov	r0, r2
 8003b70:	4619      	mov	r1, r3
 8003b72:	4603      	mov	r3, r0
 8003b74:	4642      	mov	r2, r8
 8003b76:	189b      	adds	r3, r3, r2
 8003b78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b7c:	464b      	mov	r3, r9
 8003b7e:	460a      	mov	r2, r1
 8003b80:	eb42 0303 	adc.w	r3, r2, r3
 8003b84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003b94:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003b98:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	18db      	adds	r3, r3, r3
 8003ba0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	eb42 0303 	adc.w	r3, r2, r3
 8003ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003baa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003bae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003bb2:	f7fc fb11 	bl	80001d8 <__aeabi_uldivmod>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	460b      	mov	r3, r1
 8003bba:	4b0d      	ldr	r3, [pc, #52]	; (8003bf0 <UART_SetConfig+0x2d4>)
 8003bbc:	fba3 1302 	umull	r1, r3, r3, r2
 8003bc0:	095b      	lsrs	r3, r3, #5
 8003bc2:	2164      	movs	r1, #100	; 0x64
 8003bc4:	fb01 f303 	mul.w	r3, r1, r3
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	00db      	lsls	r3, r3, #3
 8003bcc:	3332      	adds	r3, #50	; 0x32
 8003bce:	4a08      	ldr	r2, [pc, #32]	; (8003bf0 <UART_SetConfig+0x2d4>)
 8003bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd4:	095b      	lsrs	r3, r3, #5
 8003bd6:	f003 0207 	and.w	r2, r3, #7
 8003bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4422      	add	r2, r4
 8003be2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003be4:	e106      	b.n	8003df4 <UART_SetConfig+0x4d8>
 8003be6:	bf00      	nop
 8003be8:	40011000 	.word	0x40011000
 8003bec:	40011400 	.word	0x40011400
 8003bf0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bf4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003bfe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003c02:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003c06:	4642      	mov	r2, r8
 8003c08:	464b      	mov	r3, r9
 8003c0a:	1891      	adds	r1, r2, r2
 8003c0c:	6239      	str	r1, [r7, #32]
 8003c0e:	415b      	adcs	r3, r3
 8003c10:	627b      	str	r3, [r7, #36]	; 0x24
 8003c12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c16:	4641      	mov	r1, r8
 8003c18:	1854      	adds	r4, r2, r1
 8003c1a:	4649      	mov	r1, r9
 8003c1c:	eb43 0501 	adc.w	r5, r3, r1
 8003c20:	f04f 0200 	mov.w	r2, #0
 8003c24:	f04f 0300 	mov.w	r3, #0
 8003c28:	00eb      	lsls	r3, r5, #3
 8003c2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c2e:	00e2      	lsls	r2, r4, #3
 8003c30:	4614      	mov	r4, r2
 8003c32:	461d      	mov	r5, r3
 8003c34:	4643      	mov	r3, r8
 8003c36:	18e3      	adds	r3, r4, r3
 8003c38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003c3c:	464b      	mov	r3, r9
 8003c3e:	eb45 0303 	adc.w	r3, r5, r3
 8003c42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003c46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003c52:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c56:	f04f 0200 	mov.w	r2, #0
 8003c5a:	f04f 0300 	mov.w	r3, #0
 8003c5e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003c62:	4629      	mov	r1, r5
 8003c64:	008b      	lsls	r3, r1, #2
 8003c66:	4621      	mov	r1, r4
 8003c68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c6c:	4621      	mov	r1, r4
 8003c6e:	008a      	lsls	r2, r1, #2
 8003c70:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003c74:	f7fc fab0 	bl	80001d8 <__aeabi_uldivmod>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	460b      	mov	r3, r1
 8003c7c:	4b60      	ldr	r3, [pc, #384]	; (8003e00 <UART_SetConfig+0x4e4>)
 8003c7e:	fba3 2302 	umull	r2, r3, r3, r2
 8003c82:	095b      	lsrs	r3, r3, #5
 8003c84:	011c      	lsls	r4, r3, #4
 8003c86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003c90:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003c94:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003c98:	4642      	mov	r2, r8
 8003c9a:	464b      	mov	r3, r9
 8003c9c:	1891      	adds	r1, r2, r2
 8003c9e:	61b9      	str	r1, [r7, #24]
 8003ca0:	415b      	adcs	r3, r3
 8003ca2:	61fb      	str	r3, [r7, #28]
 8003ca4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ca8:	4641      	mov	r1, r8
 8003caa:	1851      	adds	r1, r2, r1
 8003cac:	6139      	str	r1, [r7, #16]
 8003cae:	4649      	mov	r1, r9
 8003cb0:	414b      	adcs	r3, r1
 8003cb2:	617b      	str	r3, [r7, #20]
 8003cb4:	f04f 0200 	mov.w	r2, #0
 8003cb8:	f04f 0300 	mov.w	r3, #0
 8003cbc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003cc0:	4659      	mov	r1, fp
 8003cc2:	00cb      	lsls	r3, r1, #3
 8003cc4:	4651      	mov	r1, sl
 8003cc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cca:	4651      	mov	r1, sl
 8003ccc:	00ca      	lsls	r2, r1, #3
 8003cce:	4610      	mov	r0, r2
 8003cd0:	4619      	mov	r1, r3
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	4642      	mov	r2, r8
 8003cd6:	189b      	adds	r3, r3, r2
 8003cd8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003cdc:	464b      	mov	r3, r9
 8003cde:	460a      	mov	r2, r1
 8003ce0:	eb42 0303 	adc.w	r3, r2, r3
 8003ce4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	67bb      	str	r3, [r7, #120]	; 0x78
 8003cf2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003cf4:	f04f 0200 	mov.w	r2, #0
 8003cf8:	f04f 0300 	mov.w	r3, #0
 8003cfc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003d00:	4649      	mov	r1, r9
 8003d02:	008b      	lsls	r3, r1, #2
 8003d04:	4641      	mov	r1, r8
 8003d06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d0a:	4641      	mov	r1, r8
 8003d0c:	008a      	lsls	r2, r1, #2
 8003d0e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003d12:	f7fc fa61 	bl	80001d8 <__aeabi_uldivmod>
 8003d16:	4602      	mov	r2, r0
 8003d18:	460b      	mov	r3, r1
 8003d1a:	4611      	mov	r1, r2
 8003d1c:	4b38      	ldr	r3, [pc, #224]	; (8003e00 <UART_SetConfig+0x4e4>)
 8003d1e:	fba3 2301 	umull	r2, r3, r3, r1
 8003d22:	095b      	lsrs	r3, r3, #5
 8003d24:	2264      	movs	r2, #100	; 0x64
 8003d26:	fb02 f303 	mul.w	r3, r2, r3
 8003d2a:	1acb      	subs	r3, r1, r3
 8003d2c:	011b      	lsls	r3, r3, #4
 8003d2e:	3332      	adds	r3, #50	; 0x32
 8003d30:	4a33      	ldr	r2, [pc, #204]	; (8003e00 <UART_SetConfig+0x4e4>)
 8003d32:	fba2 2303 	umull	r2, r3, r2, r3
 8003d36:	095b      	lsrs	r3, r3, #5
 8003d38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d3c:	441c      	add	r4, r3
 8003d3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d42:	2200      	movs	r2, #0
 8003d44:	673b      	str	r3, [r7, #112]	; 0x70
 8003d46:	677a      	str	r2, [r7, #116]	; 0x74
 8003d48:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003d4c:	4642      	mov	r2, r8
 8003d4e:	464b      	mov	r3, r9
 8003d50:	1891      	adds	r1, r2, r2
 8003d52:	60b9      	str	r1, [r7, #8]
 8003d54:	415b      	adcs	r3, r3
 8003d56:	60fb      	str	r3, [r7, #12]
 8003d58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d5c:	4641      	mov	r1, r8
 8003d5e:	1851      	adds	r1, r2, r1
 8003d60:	6039      	str	r1, [r7, #0]
 8003d62:	4649      	mov	r1, r9
 8003d64:	414b      	adcs	r3, r1
 8003d66:	607b      	str	r3, [r7, #4]
 8003d68:	f04f 0200 	mov.w	r2, #0
 8003d6c:	f04f 0300 	mov.w	r3, #0
 8003d70:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003d74:	4659      	mov	r1, fp
 8003d76:	00cb      	lsls	r3, r1, #3
 8003d78:	4651      	mov	r1, sl
 8003d7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d7e:	4651      	mov	r1, sl
 8003d80:	00ca      	lsls	r2, r1, #3
 8003d82:	4610      	mov	r0, r2
 8003d84:	4619      	mov	r1, r3
 8003d86:	4603      	mov	r3, r0
 8003d88:	4642      	mov	r2, r8
 8003d8a:	189b      	adds	r3, r3, r2
 8003d8c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d8e:	464b      	mov	r3, r9
 8003d90:	460a      	mov	r2, r1
 8003d92:	eb42 0303 	adc.w	r3, r2, r3
 8003d96:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	663b      	str	r3, [r7, #96]	; 0x60
 8003da2:	667a      	str	r2, [r7, #100]	; 0x64
 8003da4:	f04f 0200 	mov.w	r2, #0
 8003da8:	f04f 0300 	mov.w	r3, #0
 8003dac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003db0:	4649      	mov	r1, r9
 8003db2:	008b      	lsls	r3, r1, #2
 8003db4:	4641      	mov	r1, r8
 8003db6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003dba:	4641      	mov	r1, r8
 8003dbc:	008a      	lsls	r2, r1, #2
 8003dbe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003dc2:	f7fc fa09 	bl	80001d8 <__aeabi_uldivmod>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	460b      	mov	r3, r1
 8003dca:	4b0d      	ldr	r3, [pc, #52]	; (8003e00 <UART_SetConfig+0x4e4>)
 8003dcc:	fba3 1302 	umull	r1, r3, r3, r2
 8003dd0:	095b      	lsrs	r3, r3, #5
 8003dd2:	2164      	movs	r1, #100	; 0x64
 8003dd4:	fb01 f303 	mul.w	r3, r1, r3
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	011b      	lsls	r3, r3, #4
 8003ddc:	3332      	adds	r3, #50	; 0x32
 8003dde:	4a08      	ldr	r2, [pc, #32]	; (8003e00 <UART_SetConfig+0x4e4>)
 8003de0:	fba2 2303 	umull	r2, r3, r2, r3
 8003de4:	095b      	lsrs	r3, r3, #5
 8003de6:	f003 020f 	and.w	r2, r3, #15
 8003dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4422      	add	r2, r4
 8003df2:	609a      	str	r2, [r3, #8]
}
 8003df4:	bf00      	nop
 8003df6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e00:	51eb851f 	.word	0x51eb851f

08003e04 <std>:
 8003e04:	2300      	movs	r3, #0
 8003e06:	b510      	push	{r4, lr}
 8003e08:	4604      	mov	r4, r0
 8003e0a:	e9c0 3300 	strd	r3, r3, [r0]
 8003e0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003e12:	6083      	str	r3, [r0, #8]
 8003e14:	8181      	strh	r1, [r0, #12]
 8003e16:	6643      	str	r3, [r0, #100]	; 0x64
 8003e18:	81c2      	strh	r2, [r0, #14]
 8003e1a:	6183      	str	r3, [r0, #24]
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	2208      	movs	r2, #8
 8003e20:	305c      	adds	r0, #92	; 0x5c
 8003e22:	f000 f9d3 	bl	80041cc <memset>
 8003e26:	4b05      	ldr	r3, [pc, #20]	; (8003e3c <std+0x38>)
 8003e28:	6263      	str	r3, [r4, #36]	; 0x24
 8003e2a:	4b05      	ldr	r3, [pc, #20]	; (8003e40 <std+0x3c>)
 8003e2c:	62a3      	str	r3, [r4, #40]	; 0x28
 8003e2e:	4b05      	ldr	r3, [pc, #20]	; (8003e44 <std+0x40>)
 8003e30:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003e32:	4b05      	ldr	r3, [pc, #20]	; (8003e48 <std+0x44>)
 8003e34:	6224      	str	r4, [r4, #32]
 8003e36:	6323      	str	r3, [r4, #48]	; 0x30
 8003e38:	bd10      	pop	{r4, pc}
 8003e3a:	bf00      	nop
 8003e3c:	0800401d 	.word	0x0800401d
 8003e40:	0800403f 	.word	0x0800403f
 8003e44:	08004077 	.word	0x08004077
 8003e48:	0800409b 	.word	0x0800409b

08003e4c <stdio_exit_handler>:
 8003e4c:	4a02      	ldr	r2, [pc, #8]	; (8003e58 <stdio_exit_handler+0xc>)
 8003e4e:	4903      	ldr	r1, [pc, #12]	; (8003e5c <stdio_exit_handler+0x10>)
 8003e50:	4803      	ldr	r0, [pc, #12]	; (8003e60 <stdio_exit_handler+0x14>)
 8003e52:	f000 b869 	b.w	8003f28 <_fwalk_sglue>
 8003e56:	bf00      	nop
 8003e58:	2000000c 	.word	0x2000000c
 8003e5c:	080045bd 	.word	0x080045bd
 8003e60:	20000018 	.word	0x20000018

08003e64 <cleanup_stdio>:
 8003e64:	6841      	ldr	r1, [r0, #4]
 8003e66:	4b0c      	ldr	r3, [pc, #48]	; (8003e98 <cleanup_stdio+0x34>)
 8003e68:	4299      	cmp	r1, r3
 8003e6a:	b510      	push	{r4, lr}
 8003e6c:	4604      	mov	r4, r0
 8003e6e:	d001      	beq.n	8003e74 <cleanup_stdio+0x10>
 8003e70:	f000 fba4 	bl	80045bc <_fflush_r>
 8003e74:	68a1      	ldr	r1, [r4, #8]
 8003e76:	4b09      	ldr	r3, [pc, #36]	; (8003e9c <cleanup_stdio+0x38>)
 8003e78:	4299      	cmp	r1, r3
 8003e7a:	d002      	beq.n	8003e82 <cleanup_stdio+0x1e>
 8003e7c:	4620      	mov	r0, r4
 8003e7e:	f000 fb9d 	bl	80045bc <_fflush_r>
 8003e82:	68e1      	ldr	r1, [r4, #12]
 8003e84:	4b06      	ldr	r3, [pc, #24]	; (8003ea0 <cleanup_stdio+0x3c>)
 8003e86:	4299      	cmp	r1, r3
 8003e88:	d004      	beq.n	8003e94 <cleanup_stdio+0x30>
 8003e8a:	4620      	mov	r0, r4
 8003e8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e90:	f000 bb94 	b.w	80045bc <_fflush_r>
 8003e94:	bd10      	pop	{r4, pc}
 8003e96:	bf00      	nop
 8003e98:	20000268 	.word	0x20000268
 8003e9c:	200002d0 	.word	0x200002d0
 8003ea0:	20000338 	.word	0x20000338

08003ea4 <global_stdio_init.part.0>:
 8003ea4:	b510      	push	{r4, lr}
 8003ea6:	4b0b      	ldr	r3, [pc, #44]	; (8003ed4 <global_stdio_init.part.0+0x30>)
 8003ea8:	4c0b      	ldr	r4, [pc, #44]	; (8003ed8 <global_stdio_init.part.0+0x34>)
 8003eaa:	4a0c      	ldr	r2, [pc, #48]	; (8003edc <global_stdio_init.part.0+0x38>)
 8003eac:	601a      	str	r2, [r3, #0]
 8003eae:	4620      	mov	r0, r4
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	2104      	movs	r1, #4
 8003eb4:	f7ff ffa6 	bl	8003e04 <std>
 8003eb8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	2109      	movs	r1, #9
 8003ec0:	f7ff ffa0 	bl	8003e04 <std>
 8003ec4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003ec8:	2202      	movs	r2, #2
 8003eca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ece:	2112      	movs	r1, #18
 8003ed0:	f7ff bf98 	b.w	8003e04 <std>
 8003ed4:	200003a0 	.word	0x200003a0
 8003ed8:	20000268 	.word	0x20000268
 8003edc:	08003e4d 	.word	0x08003e4d

08003ee0 <__sfp_lock_acquire>:
 8003ee0:	4801      	ldr	r0, [pc, #4]	; (8003ee8 <__sfp_lock_acquire+0x8>)
 8003ee2:	f000 b9eb 	b.w	80042bc <__retarget_lock_acquire_recursive>
 8003ee6:	bf00      	nop
 8003ee8:	200003a9 	.word	0x200003a9

08003eec <__sfp_lock_release>:
 8003eec:	4801      	ldr	r0, [pc, #4]	; (8003ef4 <__sfp_lock_release+0x8>)
 8003eee:	f000 b9e6 	b.w	80042be <__retarget_lock_release_recursive>
 8003ef2:	bf00      	nop
 8003ef4:	200003a9 	.word	0x200003a9

08003ef8 <__sinit>:
 8003ef8:	b510      	push	{r4, lr}
 8003efa:	4604      	mov	r4, r0
 8003efc:	f7ff fff0 	bl	8003ee0 <__sfp_lock_acquire>
 8003f00:	6a23      	ldr	r3, [r4, #32]
 8003f02:	b11b      	cbz	r3, 8003f0c <__sinit+0x14>
 8003f04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f08:	f7ff bff0 	b.w	8003eec <__sfp_lock_release>
 8003f0c:	4b04      	ldr	r3, [pc, #16]	; (8003f20 <__sinit+0x28>)
 8003f0e:	6223      	str	r3, [r4, #32]
 8003f10:	4b04      	ldr	r3, [pc, #16]	; (8003f24 <__sinit+0x2c>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d1f5      	bne.n	8003f04 <__sinit+0xc>
 8003f18:	f7ff ffc4 	bl	8003ea4 <global_stdio_init.part.0>
 8003f1c:	e7f2      	b.n	8003f04 <__sinit+0xc>
 8003f1e:	bf00      	nop
 8003f20:	08003e65 	.word	0x08003e65
 8003f24:	200003a0 	.word	0x200003a0

08003f28 <_fwalk_sglue>:
 8003f28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f2c:	4607      	mov	r7, r0
 8003f2e:	4688      	mov	r8, r1
 8003f30:	4614      	mov	r4, r2
 8003f32:	2600      	movs	r6, #0
 8003f34:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003f38:	f1b9 0901 	subs.w	r9, r9, #1
 8003f3c:	d505      	bpl.n	8003f4a <_fwalk_sglue+0x22>
 8003f3e:	6824      	ldr	r4, [r4, #0]
 8003f40:	2c00      	cmp	r4, #0
 8003f42:	d1f7      	bne.n	8003f34 <_fwalk_sglue+0xc>
 8003f44:	4630      	mov	r0, r6
 8003f46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f4a:	89ab      	ldrh	r3, [r5, #12]
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d907      	bls.n	8003f60 <_fwalk_sglue+0x38>
 8003f50:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003f54:	3301      	adds	r3, #1
 8003f56:	d003      	beq.n	8003f60 <_fwalk_sglue+0x38>
 8003f58:	4629      	mov	r1, r5
 8003f5a:	4638      	mov	r0, r7
 8003f5c:	47c0      	blx	r8
 8003f5e:	4306      	orrs	r6, r0
 8003f60:	3568      	adds	r5, #104	; 0x68
 8003f62:	e7e9      	b.n	8003f38 <_fwalk_sglue+0x10>

08003f64 <_puts_r>:
 8003f64:	6a03      	ldr	r3, [r0, #32]
 8003f66:	b570      	push	{r4, r5, r6, lr}
 8003f68:	6884      	ldr	r4, [r0, #8]
 8003f6a:	4605      	mov	r5, r0
 8003f6c:	460e      	mov	r6, r1
 8003f6e:	b90b      	cbnz	r3, 8003f74 <_puts_r+0x10>
 8003f70:	f7ff ffc2 	bl	8003ef8 <__sinit>
 8003f74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003f76:	07db      	lsls	r3, r3, #31
 8003f78:	d405      	bmi.n	8003f86 <_puts_r+0x22>
 8003f7a:	89a3      	ldrh	r3, [r4, #12]
 8003f7c:	0598      	lsls	r0, r3, #22
 8003f7e:	d402      	bmi.n	8003f86 <_puts_r+0x22>
 8003f80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f82:	f000 f99b 	bl	80042bc <__retarget_lock_acquire_recursive>
 8003f86:	89a3      	ldrh	r3, [r4, #12]
 8003f88:	0719      	lsls	r1, r3, #28
 8003f8a:	d513      	bpl.n	8003fb4 <_puts_r+0x50>
 8003f8c:	6923      	ldr	r3, [r4, #16]
 8003f8e:	b18b      	cbz	r3, 8003fb4 <_puts_r+0x50>
 8003f90:	3e01      	subs	r6, #1
 8003f92:	68a3      	ldr	r3, [r4, #8]
 8003f94:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003f98:	3b01      	subs	r3, #1
 8003f9a:	60a3      	str	r3, [r4, #8]
 8003f9c:	b9e9      	cbnz	r1, 8003fda <_puts_r+0x76>
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	da2e      	bge.n	8004000 <_puts_r+0x9c>
 8003fa2:	4622      	mov	r2, r4
 8003fa4:	210a      	movs	r1, #10
 8003fa6:	4628      	mov	r0, r5
 8003fa8:	f000 f87b 	bl	80040a2 <__swbuf_r>
 8003fac:	3001      	adds	r0, #1
 8003fae:	d007      	beq.n	8003fc0 <_puts_r+0x5c>
 8003fb0:	250a      	movs	r5, #10
 8003fb2:	e007      	b.n	8003fc4 <_puts_r+0x60>
 8003fb4:	4621      	mov	r1, r4
 8003fb6:	4628      	mov	r0, r5
 8003fb8:	f000 f8b0 	bl	800411c <__swsetup_r>
 8003fbc:	2800      	cmp	r0, #0
 8003fbe:	d0e7      	beq.n	8003f90 <_puts_r+0x2c>
 8003fc0:	f04f 35ff 	mov.w	r5, #4294967295
 8003fc4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003fc6:	07da      	lsls	r2, r3, #31
 8003fc8:	d405      	bmi.n	8003fd6 <_puts_r+0x72>
 8003fca:	89a3      	ldrh	r3, [r4, #12]
 8003fcc:	059b      	lsls	r3, r3, #22
 8003fce:	d402      	bmi.n	8003fd6 <_puts_r+0x72>
 8003fd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003fd2:	f000 f974 	bl	80042be <__retarget_lock_release_recursive>
 8003fd6:	4628      	mov	r0, r5
 8003fd8:	bd70      	pop	{r4, r5, r6, pc}
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	da04      	bge.n	8003fe8 <_puts_r+0x84>
 8003fde:	69a2      	ldr	r2, [r4, #24]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	dc06      	bgt.n	8003ff2 <_puts_r+0x8e>
 8003fe4:	290a      	cmp	r1, #10
 8003fe6:	d004      	beq.n	8003ff2 <_puts_r+0x8e>
 8003fe8:	6823      	ldr	r3, [r4, #0]
 8003fea:	1c5a      	adds	r2, r3, #1
 8003fec:	6022      	str	r2, [r4, #0]
 8003fee:	7019      	strb	r1, [r3, #0]
 8003ff0:	e7cf      	b.n	8003f92 <_puts_r+0x2e>
 8003ff2:	4622      	mov	r2, r4
 8003ff4:	4628      	mov	r0, r5
 8003ff6:	f000 f854 	bl	80040a2 <__swbuf_r>
 8003ffa:	3001      	adds	r0, #1
 8003ffc:	d1c9      	bne.n	8003f92 <_puts_r+0x2e>
 8003ffe:	e7df      	b.n	8003fc0 <_puts_r+0x5c>
 8004000:	6823      	ldr	r3, [r4, #0]
 8004002:	250a      	movs	r5, #10
 8004004:	1c5a      	adds	r2, r3, #1
 8004006:	6022      	str	r2, [r4, #0]
 8004008:	701d      	strb	r5, [r3, #0]
 800400a:	e7db      	b.n	8003fc4 <_puts_r+0x60>

0800400c <puts>:
 800400c:	4b02      	ldr	r3, [pc, #8]	; (8004018 <puts+0xc>)
 800400e:	4601      	mov	r1, r0
 8004010:	6818      	ldr	r0, [r3, #0]
 8004012:	f7ff bfa7 	b.w	8003f64 <_puts_r>
 8004016:	bf00      	nop
 8004018:	20000064 	.word	0x20000064

0800401c <__sread>:
 800401c:	b510      	push	{r4, lr}
 800401e:	460c      	mov	r4, r1
 8004020:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004024:	f000 f8fc 	bl	8004220 <_read_r>
 8004028:	2800      	cmp	r0, #0
 800402a:	bfab      	itete	ge
 800402c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800402e:	89a3      	ldrhlt	r3, [r4, #12]
 8004030:	181b      	addge	r3, r3, r0
 8004032:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004036:	bfac      	ite	ge
 8004038:	6563      	strge	r3, [r4, #84]	; 0x54
 800403a:	81a3      	strhlt	r3, [r4, #12]
 800403c:	bd10      	pop	{r4, pc}

0800403e <__swrite>:
 800403e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004042:	461f      	mov	r7, r3
 8004044:	898b      	ldrh	r3, [r1, #12]
 8004046:	05db      	lsls	r3, r3, #23
 8004048:	4605      	mov	r5, r0
 800404a:	460c      	mov	r4, r1
 800404c:	4616      	mov	r6, r2
 800404e:	d505      	bpl.n	800405c <__swrite+0x1e>
 8004050:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004054:	2302      	movs	r3, #2
 8004056:	2200      	movs	r2, #0
 8004058:	f000 f8d0 	bl	80041fc <_lseek_r>
 800405c:	89a3      	ldrh	r3, [r4, #12]
 800405e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004062:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004066:	81a3      	strh	r3, [r4, #12]
 8004068:	4632      	mov	r2, r6
 800406a:	463b      	mov	r3, r7
 800406c:	4628      	mov	r0, r5
 800406e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004072:	f000 b8e7 	b.w	8004244 <_write_r>

08004076 <__sseek>:
 8004076:	b510      	push	{r4, lr}
 8004078:	460c      	mov	r4, r1
 800407a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800407e:	f000 f8bd 	bl	80041fc <_lseek_r>
 8004082:	1c43      	adds	r3, r0, #1
 8004084:	89a3      	ldrh	r3, [r4, #12]
 8004086:	bf15      	itete	ne
 8004088:	6560      	strne	r0, [r4, #84]	; 0x54
 800408a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800408e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004092:	81a3      	strheq	r3, [r4, #12]
 8004094:	bf18      	it	ne
 8004096:	81a3      	strhne	r3, [r4, #12]
 8004098:	bd10      	pop	{r4, pc}

0800409a <__sclose>:
 800409a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800409e:	f000 b89d 	b.w	80041dc <_close_r>

080040a2 <__swbuf_r>:
 80040a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040a4:	460e      	mov	r6, r1
 80040a6:	4614      	mov	r4, r2
 80040a8:	4605      	mov	r5, r0
 80040aa:	b118      	cbz	r0, 80040b4 <__swbuf_r+0x12>
 80040ac:	6a03      	ldr	r3, [r0, #32]
 80040ae:	b90b      	cbnz	r3, 80040b4 <__swbuf_r+0x12>
 80040b0:	f7ff ff22 	bl	8003ef8 <__sinit>
 80040b4:	69a3      	ldr	r3, [r4, #24]
 80040b6:	60a3      	str	r3, [r4, #8]
 80040b8:	89a3      	ldrh	r3, [r4, #12]
 80040ba:	071a      	lsls	r2, r3, #28
 80040bc:	d525      	bpl.n	800410a <__swbuf_r+0x68>
 80040be:	6923      	ldr	r3, [r4, #16]
 80040c0:	b31b      	cbz	r3, 800410a <__swbuf_r+0x68>
 80040c2:	6823      	ldr	r3, [r4, #0]
 80040c4:	6922      	ldr	r2, [r4, #16]
 80040c6:	1a98      	subs	r0, r3, r2
 80040c8:	6963      	ldr	r3, [r4, #20]
 80040ca:	b2f6      	uxtb	r6, r6
 80040cc:	4283      	cmp	r3, r0
 80040ce:	4637      	mov	r7, r6
 80040d0:	dc04      	bgt.n	80040dc <__swbuf_r+0x3a>
 80040d2:	4621      	mov	r1, r4
 80040d4:	4628      	mov	r0, r5
 80040d6:	f000 fa71 	bl	80045bc <_fflush_r>
 80040da:	b9e0      	cbnz	r0, 8004116 <__swbuf_r+0x74>
 80040dc:	68a3      	ldr	r3, [r4, #8]
 80040de:	3b01      	subs	r3, #1
 80040e0:	60a3      	str	r3, [r4, #8]
 80040e2:	6823      	ldr	r3, [r4, #0]
 80040e4:	1c5a      	adds	r2, r3, #1
 80040e6:	6022      	str	r2, [r4, #0]
 80040e8:	701e      	strb	r6, [r3, #0]
 80040ea:	6962      	ldr	r2, [r4, #20]
 80040ec:	1c43      	adds	r3, r0, #1
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d004      	beq.n	80040fc <__swbuf_r+0x5a>
 80040f2:	89a3      	ldrh	r3, [r4, #12]
 80040f4:	07db      	lsls	r3, r3, #31
 80040f6:	d506      	bpl.n	8004106 <__swbuf_r+0x64>
 80040f8:	2e0a      	cmp	r6, #10
 80040fa:	d104      	bne.n	8004106 <__swbuf_r+0x64>
 80040fc:	4621      	mov	r1, r4
 80040fe:	4628      	mov	r0, r5
 8004100:	f000 fa5c 	bl	80045bc <_fflush_r>
 8004104:	b938      	cbnz	r0, 8004116 <__swbuf_r+0x74>
 8004106:	4638      	mov	r0, r7
 8004108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800410a:	4621      	mov	r1, r4
 800410c:	4628      	mov	r0, r5
 800410e:	f000 f805 	bl	800411c <__swsetup_r>
 8004112:	2800      	cmp	r0, #0
 8004114:	d0d5      	beq.n	80040c2 <__swbuf_r+0x20>
 8004116:	f04f 37ff 	mov.w	r7, #4294967295
 800411a:	e7f4      	b.n	8004106 <__swbuf_r+0x64>

0800411c <__swsetup_r>:
 800411c:	b538      	push	{r3, r4, r5, lr}
 800411e:	4b2a      	ldr	r3, [pc, #168]	; (80041c8 <__swsetup_r+0xac>)
 8004120:	4605      	mov	r5, r0
 8004122:	6818      	ldr	r0, [r3, #0]
 8004124:	460c      	mov	r4, r1
 8004126:	b118      	cbz	r0, 8004130 <__swsetup_r+0x14>
 8004128:	6a03      	ldr	r3, [r0, #32]
 800412a:	b90b      	cbnz	r3, 8004130 <__swsetup_r+0x14>
 800412c:	f7ff fee4 	bl	8003ef8 <__sinit>
 8004130:	89a3      	ldrh	r3, [r4, #12]
 8004132:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004136:	0718      	lsls	r0, r3, #28
 8004138:	d422      	bmi.n	8004180 <__swsetup_r+0x64>
 800413a:	06d9      	lsls	r1, r3, #27
 800413c:	d407      	bmi.n	800414e <__swsetup_r+0x32>
 800413e:	2309      	movs	r3, #9
 8004140:	602b      	str	r3, [r5, #0]
 8004142:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004146:	81a3      	strh	r3, [r4, #12]
 8004148:	f04f 30ff 	mov.w	r0, #4294967295
 800414c:	e034      	b.n	80041b8 <__swsetup_r+0x9c>
 800414e:	0758      	lsls	r0, r3, #29
 8004150:	d512      	bpl.n	8004178 <__swsetup_r+0x5c>
 8004152:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004154:	b141      	cbz	r1, 8004168 <__swsetup_r+0x4c>
 8004156:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800415a:	4299      	cmp	r1, r3
 800415c:	d002      	beq.n	8004164 <__swsetup_r+0x48>
 800415e:	4628      	mov	r0, r5
 8004160:	f000 f8ae 	bl	80042c0 <_free_r>
 8004164:	2300      	movs	r3, #0
 8004166:	6363      	str	r3, [r4, #52]	; 0x34
 8004168:	89a3      	ldrh	r3, [r4, #12]
 800416a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800416e:	81a3      	strh	r3, [r4, #12]
 8004170:	2300      	movs	r3, #0
 8004172:	6063      	str	r3, [r4, #4]
 8004174:	6923      	ldr	r3, [r4, #16]
 8004176:	6023      	str	r3, [r4, #0]
 8004178:	89a3      	ldrh	r3, [r4, #12]
 800417a:	f043 0308 	orr.w	r3, r3, #8
 800417e:	81a3      	strh	r3, [r4, #12]
 8004180:	6923      	ldr	r3, [r4, #16]
 8004182:	b94b      	cbnz	r3, 8004198 <__swsetup_r+0x7c>
 8004184:	89a3      	ldrh	r3, [r4, #12]
 8004186:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800418a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800418e:	d003      	beq.n	8004198 <__swsetup_r+0x7c>
 8004190:	4621      	mov	r1, r4
 8004192:	4628      	mov	r0, r5
 8004194:	f000 fa60 	bl	8004658 <__smakebuf_r>
 8004198:	89a0      	ldrh	r0, [r4, #12]
 800419a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800419e:	f010 0301 	ands.w	r3, r0, #1
 80041a2:	d00a      	beq.n	80041ba <__swsetup_r+0x9e>
 80041a4:	2300      	movs	r3, #0
 80041a6:	60a3      	str	r3, [r4, #8]
 80041a8:	6963      	ldr	r3, [r4, #20]
 80041aa:	425b      	negs	r3, r3
 80041ac:	61a3      	str	r3, [r4, #24]
 80041ae:	6923      	ldr	r3, [r4, #16]
 80041b0:	b943      	cbnz	r3, 80041c4 <__swsetup_r+0xa8>
 80041b2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80041b6:	d1c4      	bne.n	8004142 <__swsetup_r+0x26>
 80041b8:	bd38      	pop	{r3, r4, r5, pc}
 80041ba:	0781      	lsls	r1, r0, #30
 80041bc:	bf58      	it	pl
 80041be:	6963      	ldrpl	r3, [r4, #20]
 80041c0:	60a3      	str	r3, [r4, #8]
 80041c2:	e7f4      	b.n	80041ae <__swsetup_r+0x92>
 80041c4:	2000      	movs	r0, #0
 80041c6:	e7f7      	b.n	80041b8 <__swsetup_r+0x9c>
 80041c8:	20000064 	.word	0x20000064

080041cc <memset>:
 80041cc:	4402      	add	r2, r0
 80041ce:	4603      	mov	r3, r0
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d100      	bne.n	80041d6 <memset+0xa>
 80041d4:	4770      	bx	lr
 80041d6:	f803 1b01 	strb.w	r1, [r3], #1
 80041da:	e7f9      	b.n	80041d0 <memset+0x4>

080041dc <_close_r>:
 80041dc:	b538      	push	{r3, r4, r5, lr}
 80041de:	4d06      	ldr	r5, [pc, #24]	; (80041f8 <_close_r+0x1c>)
 80041e0:	2300      	movs	r3, #0
 80041e2:	4604      	mov	r4, r0
 80041e4:	4608      	mov	r0, r1
 80041e6:	602b      	str	r3, [r5, #0]
 80041e8:	f7fc fc81 	bl	8000aee <_close>
 80041ec:	1c43      	adds	r3, r0, #1
 80041ee:	d102      	bne.n	80041f6 <_close_r+0x1a>
 80041f0:	682b      	ldr	r3, [r5, #0]
 80041f2:	b103      	cbz	r3, 80041f6 <_close_r+0x1a>
 80041f4:	6023      	str	r3, [r4, #0]
 80041f6:	bd38      	pop	{r3, r4, r5, pc}
 80041f8:	200003a4 	.word	0x200003a4

080041fc <_lseek_r>:
 80041fc:	b538      	push	{r3, r4, r5, lr}
 80041fe:	4d07      	ldr	r5, [pc, #28]	; (800421c <_lseek_r+0x20>)
 8004200:	4604      	mov	r4, r0
 8004202:	4608      	mov	r0, r1
 8004204:	4611      	mov	r1, r2
 8004206:	2200      	movs	r2, #0
 8004208:	602a      	str	r2, [r5, #0]
 800420a:	461a      	mov	r2, r3
 800420c:	f7fc fc96 	bl	8000b3c <_lseek>
 8004210:	1c43      	adds	r3, r0, #1
 8004212:	d102      	bne.n	800421a <_lseek_r+0x1e>
 8004214:	682b      	ldr	r3, [r5, #0]
 8004216:	b103      	cbz	r3, 800421a <_lseek_r+0x1e>
 8004218:	6023      	str	r3, [r4, #0]
 800421a:	bd38      	pop	{r3, r4, r5, pc}
 800421c:	200003a4 	.word	0x200003a4

08004220 <_read_r>:
 8004220:	b538      	push	{r3, r4, r5, lr}
 8004222:	4d07      	ldr	r5, [pc, #28]	; (8004240 <_read_r+0x20>)
 8004224:	4604      	mov	r4, r0
 8004226:	4608      	mov	r0, r1
 8004228:	4611      	mov	r1, r2
 800422a:	2200      	movs	r2, #0
 800422c:	602a      	str	r2, [r5, #0]
 800422e:	461a      	mov	r2, r3
 8004230:	f7fc fc24 	bl	8000a7c <_read>
 8004234:	1c43      	adds	r3, r0, #1
 8004236:	d102      	bne.n	800423e <_read_r+0x1e>
 8004238:	682b      	ldr	r3, [r5, #0]
 800423a:	b103      	cbz	r3, 800423e <_read_r+0x1e>
 800423c:	6023      	str	r3, [r4, #0]
 800423e:	bd38      	pop	{r3, r4, r5, pc}
 8004240:	200003a4 	.word	0x200003a4

08004244 <_write_r>:
 8004244:	b538      	push	{r3, r4, r5, lr}
 8004246:	4d07      	ldr	r5, [pc, #28]	; (8004264 <_write_r+0x20>)
 8004248:	4604      	mov	r4, r0
 800424a:	4608      	mov	r0, r1
 800424c:	4611      	mov	r1, r2
 800424e:	2200      	movs	r2, #0
 8004250:	602a      	str	r2, [r5, #0]
 8004252:	461a      	mov	r2, r3
 8004254:	f7fc fc2f 	bl	8000ab6 <_write>
 8004258:	1c43      	adds	r3, r0, #1
 800425a:	d102      	bne.n	8004262 <_write_r+0x1e>
 800425c:	682b      	ldr	r3, [r5, #0]
 800425e:	b103      	cbz	r3, 8004262 <_write_r+0x1e>
 8004260:	6023      	str	r3, [r4, #0]
 8004262:	bd38      	pop	{r3, r4, r5, pc}
 8004264:	200003a4 	.word	0x200003a4

08004268 <__errno>:
 8004268:	4b01      	ldr	r3, [pc, #4]	; (8004270 <__errno+0x8>)
 800426a:	6818      	ldr	r0, [r3, #0]
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	20000064 	.word	0x20000064

08004274 <__libc_init_array>:
 8004274:	b570      	push	{r4, r5, r6, lr}
 8004276:	4d0d      	ldr	r5, [pc, #52]	; (80042ac <__libc_init_array+0x38>)
 8004278:	4c0d      	ldr	r4, [pc, #52]	; (80042b0 <__libc_init_array+0x3c>)
 800427a:	1b64      	subs	r4, r4, r5
 800427c:	10a4      	asrs	r4, r4, #2
 800427e:	2600      	movs	r6, #0
 8004280:	42a6      	cmp	r6, r4
 8004282:	d109      	bne.n	8004298 <__libc_init_array+0x24>
 8004284:	4d0b      	ldr	r5, [pc, #44]	; (80042b4 <__libc_init_array+0x40>)
 8004286:	4c0c      	ldr	r4, [pc, #48]	; (80042b8 <__libc_init_array+0x44>)
 8004288:	f000 fa54 	bl	8004734 <_init>
 800428c:	1b64      	subs	r4, r4, r5
 800428e:	10a4      	asrs	r4, r4, #2
 8004290:	2600      	movs	r6, #0
 8004292:	42a6      	cmp	r6, r4
 8004294:	d105      	bne.n	80042a2 <__libc_init_array+0x2e>
 8004296:	bd70      	pop	{r4, r5, r6, pc}
 8004298:	f855 3b04 	ldr.w	r3, [r5], #4
 800429c:	4798      	blx	r3
 800429e:	3601      	adds	r6, #1
 80042a0:	e7ee      	b.n	8004280 <__libc_init_array+0xc>
 80042a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80042a6:	4798      	blx	r3
 80042a8:	3601      	adds	r6, #1
 80042aa:	e7f2      	b.n	8004292 <__libc_init_array+0x1e>
 80042ac:	080047b4 	.word	0x080047b4
 80042b0:	080047b4 	.word	0x080047b4
 80042b4:	080047b4 	.word	0x080047b4
 80042b8:	080047b8 	.word	0x080047b8

080042bc <__retarget_lock_acquire_recursive>:
 80042bc:	4770      	bx	lr

080042be <__retarget_lock_release_recursive>:
 80042be:	4770      	bx	lr

080042c0 <_free_r>:
 80042c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80042c2:	2900      	cmp	r1, #0
 80042c4:	d044      	beq.n	8004350 <_free_r+0x90>
 80042c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042ca:	9001      	str	r0, [sp, #4]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	f1a1 0404 	sub.w	r4, r1, #4
 80042d2:	bfb8      	it	lt
 80042d4:	18e4      	addlt	r4, r4, r3
 80042d6:	f000 f8df 	bl	8004498 <__malloc_lock>
 80042da:	4a1e      	ldr	r2, [pc, #120]	; (8004354 <_free_r+0x94>)
 80042dc:	9801      	ldr	r0, [sp, #4]
 80042de:	6813      	ldr	r3, [r2, #0]
 80042e0:	b933      	cbnz	r3, 80042f0 <_free_r+0x30>
 80042e2:	6063      	str	r3, [r4, #4]
 80042e4:	6014      	str	r4, [r2, #0]
 80042e6:	b003      	add	sp, #12
 80042e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80042ec:	f000 b8da 	b.w	80044a4 <__malloc_unlock>
 80042f0:	42a3      	cmp	r3, r4
 80042f2:	d908      	bls.n	8004306 <_free_r+0x46>
 80042f4:	6825      	ldr	r5, [r4, #0]
 80042f6:	1961      	adds	r1, r4, r5
 80042f8:	428b      	cmp	r3, r1
 80042fa:	bf01      	itttt	eq
 80042fc:	6819      	ldreq	r1, [r3, #0]
 80042fe:	685b      	ldreq	r3, [r3, #4]
 8004300:	1949      	addeq	r1, r1, r5
 8004302:	6021      	streq	r1, [r4, #0]
 8004304:	e7ed      	b.n	80042e2 <_free_r+0x22>
 8004306:	461a      	mov	r2, r3
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	b10b      	cbz	r3, 8004310 <_free_r+0x50>
 800430c:	42a3      	cmp	r3, r4
 800430e:	d9fa      	bls.n	8004306 <_free_r+0x46>
 8004310:	6811      	ldr	r1, [r2, #0]
 8004312:	1855      	adds	r5, r2, r1
 8004314:	42a5      	cmp	r5, r4
 8004316:	d10b      	bne.n	8004330 <_free_r+0x70>
 8004318:	6824      	ldr	r4, [r4, #0]
 800431a:	4421      	add	r1, r4
 800431c:	1854      	adds	r4, r2, r1
 800431e:	42a3      	cmp	r3, r4
 8004320:	6011      	str	r1, [r2, #0]
 8004322:	d1e0      	bne.n	80042e6 <_free_r+0x26>
 8004324:	681c      	ldr	r4, [r3, #0]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	6053      	str	r3, [r2, #4]
 800432a:	440c      	add	r4, r1
 800432c:	6014      	str	r4, [r2, #0]
 800432e:	e7da      	b.n	80042e6 <_free_r+0x26>
 8004330:	d902      	bls.n	8004338 <_free_r+0x78>
 8004332:	230c      	movs	r3, #12
 8004334:	6003      	str	r3, [r0, #0]
 8004336:	e7d6      	b.n	80042e6 <_free_r+0x26>
 8004338:	6825      	ldr	r5, [r4, #0]
 800433a:	1961      	adds	r1, r4, r5
 800433c:	428b      	cmp	r3, r1
 800433e:	bf04      	itt	eq
 8004340:	6819      	ldreq	r1, [r3, #0]
 8004342:	685b      	ldreq	r3, [r3, #4]
 8004344:	6063      	str	r3, [r4, #4]
 8004346:	bf04      	itt	eq
 8004348:	1949      	addeq	r1, r1, r5
 800434a:	6021      	streq	r1, [r4, #0]
 800434c:	6054      	str	r4, [r2, #4]
 800434e:	e7ca      	b.n	80042e6 <_free_r+0x26>
 8004350:	b003      	add	sp, #12
 8004352:	bd30      	pop	{r4, r5, pc}
 8004354:	200003ac 	.word	0x200003ac

08004358 <sbrk_aligned>:
 8004358:	b570      	push	{r4, r5, r6, lr}
 800435a:	4e0e      	ldr	r6, [pc, #56]	; (8004394 <sbrk_aligned+0x3c>)
 800435c:	460c      	mov	r4, r1
 800435e:	6831      	ldr	r1, [r6, #0]
 8004360:	4605      	mov	r5, r0
 8004362:	b911      	cbnz	r1, 800436a <sbrk_aligned+0x12>
 8004364:	f000 f9d6 	bl	8004714 <_sbrk_r>
 8004368:	6030      	str	r0, [r6, #0]
 800436a:	4621      	mov	r1, r4
 800436c:	4628      	mov	r0, r5
 800436e:	f000 f9d1 	bl	8004714 <_sbrk_r>
 8004372:	1c43      	adds	r3, r0, #1
 8004374:	d00a      	beq.n	800438c <sbrk_aligned+0x34>
 8004376:	1cc4      	adds	r4, r0, #3
 8004378:	f024 0403 	bic.w	r4, r4, #3
 800437c:	42a0      	cmp	r0, r4
 800437e:	d007      	beq.n	8004390 <sbrk_aligned+0x38>
 8004380:	1a21      	subs	r1, r4, r0
 8004382:	4628      	mov	r0, r5
 8004384:	f000 f9c6 	bl	8004714 <_sbrk_r>
 8004388:	3001      	adds	r0, #1
 800438a:	d101      	bne.n	8004390 <sbrk_aligned+0x38>
 800438c:	f04f 34ff 	mov.w	r4, #4294967295
 8004390:	4620      	mov	r0, r4
 8004392:	bd70      	pop	{r4, r5, r6, pc}
 8004394:	200003b0 	.word	0x200003b0

08004398 <_malloc_r>:
 8004398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800439c:	1ccd      	adds	r5, r1, #3
 800439e:	f025 0503 	bic.w	r5, r5, #3
 80043a2:	3508      	adds	r5, #8
 80043a4:	2d0c      	cmp	r5, #12
 80043a6:	bf38      	it	cc
 80043a8:	250c      	movcc	r5, #12
 80043aa:	2d00      	cmp	r5, #0
 80043ac:	4607      	mov	r7, r0
 80043ae:	db01      	blt.n	80043b4 <_malloc_r+0x1c>
 80043b0:	42a9      	cmp	r1, r5
 80043b2:	d905      	bls.n	80043c0 <_malloc_r+0x28>
 80043b4:	230c      	movs	r3, #12
 80043b6:	603b      	str	r3, [r7, #0]
 80043b8:	2600      	movs	r6, #0
 80043ba:	4630      	mov	r0, r6
 80043bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043c0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004494 <_malloc_r+0xfc>
 80043c4:	f000 f868 	bl	8004498 <__malloc_lock>
 80043c8:	f8d8 3000 	ldr.w	r3, [r8]
 80043cc:	461c      	mov	r4, r3
 80043ce:	bb5c      	cbnz	r4, 8004428 <_malloc_r+0x90>
 80043d0:	4629      	mov	r1, r5
 80043d2:	4638      	mov	r0, r7
 80043d4:	f7ff ffc0 	bl	8004358 <sbrk_aligned>
 80043d8:	1c43      	adds	r3, r0, #1
 80043da:	4604      	mov	r4, r0
 80043dc:	d155      	bne.n	800448a <_malloc_r+0xf2>
 80043de:	f8d8 4000 	ldr.w	r4, [r8]
 80043e2:	4626      	mov	r6, r4
 80043e4:	2e00      	cmp	r6, #0
 80043e6:	d145      	bne.n	8004474 <_malloc_r+0xdc>
 80043e8:	2c00      	cmp	r4, #0
 80043ea:	d048      	beq.n	800447e <_malloc_r+0xe6>
 80043ec:	6823      	ldr	r3, [r4, #0]
 80043ee:	4631      	mov	r1, r6
 80043f0:	4638      	mov	r0, r7
 80043f2:	eb04 0903 	add.w	r9, r4, r3
 80043f6:	f000 f98d 	bl	8004714 <_sbrk_r>
 80043fa:	4581      	cmp	r9, r0
 80043fc:	d13f      	bne.n	800447e <_malloc_r+0xe6>
 80043fe:	6821      	ldr	r1, [r4, #0]
 8004400:	1a6d      	subs	r5, r5, r1
 8004402:	4629      	mov	r1, r5
 8004404:	4638      	mov	r0, r7
 8004406:	f7ff ffa7 	bl	8004358 <sbrk_aligned>
 800440a:	3001      	adds	r0, #1
 800440c:	d037      	beq.n	800447e <_malloc_r+0xe6>
 800440e:	6823      	ldr	r3, [r4, #0]
 8004410:	442b      	add	r3, r5
 8004412:	6023      	str	r3, [r4, #0]
 8004414:	f8d8 3000 	ldr.w	r3, [r8]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d038      	beq.n	800448e <_malloc_r+0xf6>
 800441c:	685a      	ldr	r2, [r3, #4]
 800441e:	42a2      	cmp	r2, r4
 8004420:	d12b      	bne.n	800447a <_malloc_r+0xe2>
 8004422:	2200      	movs	r2, #0
 8004424:	605a      	str	r2, [r3, #4]
 8004426:	e00f      	b.n	8004448 <_malloc_r+0xb0>
 8004428:	6822      	ldr	r2, [r4, #0]
 800442a:	1b52      	subs	r2, r2, r5
 800442c:	d41f      	bmi.n	800446e <_malloc_r+0xd6>
 800442e:	2a0b      	cmp	r2, #11
 8004430:	d917      	bls.n	8004462 <_malloc_r+0xca>
 8004432:	1961      	adds	r1, r4, r5
 8004434:	42a3      	cmp	r3, r4
 8004436:	6025      	str	r5, [r4, #0]
 8004438:	bf18      	it	ne
 800443a:	6059      	strne	r1, [r3, #4]
 800443c:	6863      	ldr	r3, [r4, #4]
 800443e:	bf08      	it	eq
 8004440:	f8c8 1000 	streq.w	r1, [r8]
 8004444:	5162      	str	r2, [r4, r5]
 8004446:	604b      	str	r3, [r1, #4]
 8004448:	4638      	mov	r0, r7
 800444a:	f104 060b 	add.w	r6, r4, #11
 800444e:	f000 f829 	bl	80044a4 <__malloc_unlock>
 8004452:	f026 0607 	bic.w	r6, r6, #7
 8004456:	1d23      	adds	r3, r4, #4
 8004458:	1af2      	subs	r2, r6, r3
 800445a:	d0ae      	beq.n	80043ba <_malloc_r+0x22>
 800445c:	1b9b      	subs	r3, r3, r6
 800445e:	50a3      	str	r3, [r4, r2]
 8004460:	e7ab      	b.n	80043ba <_malloc_r+0x22>
 8004462:	42a3      	cmp	r3, r4
 8004464:	6862      	ldr	r2, [r4, #4]
 8004466:	d1dd      	bne.n	8004424 <_malloc_r+0x8c>
 8004468:	f8c8 2000 	str.w	r2, [r8]
 800446c:	e7ec      	b.n	8004448 <_malloc_r+0xb0>
 800446e:	4623      	mov	r3, r4
 8004470:	6864      	ldr	r4, [r4, #4]
 8004472:	e7ac      	b.n	80043ce <_malloc_r+0x36>
 8004474:	4634      	mov	r4, r6
 8004476:	6876      	ldr	r6, [r6, #4]
 8004478:	e7b4      	b.n	80043e4 <_malloc_r+0x4c>
 800447a:	4613      	mov	r3, r2
 800447c:	e7cc      	b.n	8004418 <_malloc_r+0x80>
 800447e:	230c      	movs	r3, #12
 8004480:	603b      	str	r3, [r7, #0]
 8004482:	4638      	mov	r0, r7
 8004484:	f000 f80e 	bl	80044a4 <__malloc_unlock>
 8004488:	e797      	b.n	80043ba <_malloc_r+0x22>
 800448a:	6025      	str	r5, [r4, #0]
 800448c:	e7dc      	b.n	8004448 <_malloc_r+0xb0>
 800448e:	605b      	str	r3, [r3, #4]
 8004490:	deff      	udf	#255	; 0xff
 8004492:	bf00      	nop
 8004494:	200003ac 	.word	0x200003ac

08004498 <__malloc_lock>:
 8004498:	4801      	ldr	r0, [pc, #4]	; (80044a0 <__malloc_lock+0x8>)
 800449a:	f7ff bf0f 	b.w	80042bc <__retarget_lock_acquire_recursive>
 800449e:	bf00      	nop
 80044a0:	200003a8 	.word	0x200003a8

080044a4 <__malloc_unlock>:
 80044a4:	4801      	ldr	r0, [pc, #4]	; (80044ac <__malloc_unlock+0x8>)
 80044a6:	f7ff bf0a 	b.w	80042be <__retarget_lock_release_recursive>
 80044aa:	bf00      	nop
 80044ac:	200003a8 	.word	0x200003a8

080044b0 <__sflush_r>:
 80044b0:	898a      	ldrh	r2, [r1, #12]
 80044b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044b6:	4605      	mov	r5, r0
 80044b8:	0710      	lsls	r0, r2, #28
 80044ba:	460c      	mov	r4, r1
 80044bc:	d458      	bmi.n	8004570 <__sflush_r+0xc0>
 80044be:	684b      	ldr	r3, [r1, #4]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	dc05      	bgt.n	80044d0 <__sflush_r+0x20>
 80044c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	dc02      	bgt.n	80044d0 <__sflush_r+0x20>
 80044ca:	2000      	movs	r0, #0
 80044cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80044d2:	2e00      	cmp	r6, #0
 80044d4:	d0f9      	beq.n	80044ca <__sflush_r+0x1a>
 80044d6:	2300      	movs	r3, #0
 80044d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80044dc:	682f      	ldr	r7, [r5, #0]
 80044de:	6a21      	ldr	r1, [r4, #32]
 80044e0:	602b      	str	r3, [r5, #0]
 80044e2:	d032      	beq.n	800454a <__sflush_r+0x9a>
 80044e4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80044e6:	89a3      	ldrh	r3, [r4, #12]
 80044e8:	075a      	lsls	r2, r3, #29
 80044ea:	d505      	bpl.n	80044f8 <__sflush_r+0x48>
 80044ec:	6863      	ldr	r3, [r4, #4]
 80044ee:	1ac0      	subs	r0, r0, r3
 80044f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80044f2:	b10b      	cbz	r3, 80044f8 <__sflush_r+0x48>
 80044f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80044f6:	1ac0      	subs	r0, r0, r3
 80044f8:	2300      	movs	r3, #0
 80044fa:	4602      	mov	r2, r0
 80044fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80044fe:	6a21      	ldr	r1, [r4, #32]
 8004500:	4628      	mov	r0, r5
 8004502:	47b0      	blx	r6
 8004504:	1c43      	adds	r3, r0, #1
 8004506:	89a3      	ldrh	r3, [r4, #12]
 8004508:	d106      	bne.n	8004518 <__sflush_r+0x68>
 800450a:	6829      	ldr	r1, [r5, #0]
 800450c:	291d      	cmp	r1, #29
 800450e:	d82b      	bhi.n	8004568 <__sflush_r+0xb8>
 8004510:	4a29      	ldr	r2, [pc, #164]	; (80045b8 <__sflush_r+0x108>)
 8004512:	410a      	asrs	r2, r1
 8004514:	07d6      	lsls	r6, r2, #31
 8004516:	d427      	bmi.n	8004568 <__sflush_r+0xb8>
 8004518:	2200      	movs	r2, #0
 800451a:	6062      	str	r2, [r4, #4]
 800451c:	04d9      	lsls	r1, r3, #19
 800451e:	6922      	ldr	r2, [r4, #16]
 8004520:	6022      	str	r2, [r4, #0]
 8004522:	d504      	bpl.n	800452e <__sflush_r+0x7e>
 8004524:	1c42      	adds	r2, r0, #1
 8004526:	d101      	bne.n	800452c <__sflush_r+0x7c>
 8004528:	682b      	ldr	r3, [r5, #0]
 800452a:	b903      	cbnz	r3, 800452e <__sflush_r+0x7e>
 800452c:	6560      	str	r0, [r4, #84]	; 0x54
 800452e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004530:	602f      	str	r7, [r5, #0]
 8004532:	2900      	cmp	r1, #0
 8004534:	d0c9      	beq.n	80044ca <__sflush_r+0x1a>
 8004536:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800453a:	4299      	cmp	r1, r3
 800453c:	d002      	beq.n	8004544 <__sflush_r+0x94>
 800453e:	4628      	mov	r0, r5
 8004540:	f7ff febe 	bl	80042c0 <_free_r>
 8004544:	2000      	movs	r0, #0
 8004546:	6360      	str	r0, [r4, #52]	; 0x34
 8004548:	e7c0      	b.n	80044cc <__sflush_r+0x1c>
 800454a:	2301      	movs	r3, #1
 800454c:	4628      	mov	r0, r5
 800454e:	47b0      	blx	r6
 8004550:	1c41      	adds	r1, r0, #1
 8004552:	d1c8      	bne.n	80044e6 <__sflush_r+0x36>
 8004554:	682b      	ldr	r3, [r5, #0]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d0c5      	beq.n	80044e6 <__sflush_r+0x36>
 800455a:	2b1d      	cmp	r3, #29
 800455c:	d001      	beq.n	8004562 <__sflush_r+0xb2>
 800455e:	2b16      	cmp	r3, #22
 8004560:	d101      	bne.n	8004566 <__sflush_r+0xb6>
 8004562:	602f      	str	r7, [r5, #0]
 8004564:	e7b1      	b.n	80044ca <__sflush_r+0x1a>
 8004566:	89a3      	ldrh	r3, [r4, #12]
 8004568:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800456c:	81a3      	strh	r3, [r4, #12]
 800456e:	e7ad      	b.n	80044cc <__sflush_r+0x1c>
 8004570:	690f      	ldr	r7, [r1, #16]
 8004572:	2f00      	cmp	r7, #0
 8004574:	d0a9      	beq.n	80044ca <__sflush_r+0x1a>
 8004576:	0793      	lsls	r3, r2, #30
 8004578:	680e      	ldr	r6, [r1, #0]
 800457a:	bf08      	it	eq
 800457c:	694b      	ldreq	r3, [r1, #20]
 800457e:	600f      	str	r7, [r1, #0]
 8004580:	bf18      	it	ne
 8004582:	2300      	movne	r3, #0
 8004584:	eba6 0807 	sub.w	r8, r6, r7
 8004588:	608b      	str	r3, [r1, #8]
 800458a:	f1b8 0f00 	cmp.w	r8, #0
 800458e:	dd9c      	ble.n	80044ca <__sflush_r+0x1a>
 8004590:	6a21      	ldr	r1, [r4, #32]
 8004592:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004594:	4643      	mov	r3, r8
 8004596:	463a      	mov	r2, r7
 8004598:	4628      	mov	r0, r5
 800459a:	47b0      	blx	r6
 800459c:	2800      	cmp	r0, #0
 800459e:	dc06      	bgt.n	80045ae <__sflush_r+0xfe>
 80045a0:	89a3      	ldrh	r3, [r4, #12]
 80045a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045a6:	81a3      	strh	r3, [r4, #12]
 80045a8:	f04f 30ff 	mov.w	r0, #4294967295
 80045ac:	e78e      	b.n	80044cc <__sflush_r+0x1c>
 80045ae:	4407      	add	r7, r0
 80045b0:	eba8 0800 	sub.w	r8, r8, r0
 80045b4:	e7e9      	b.n	800458a <__sflush_r+0xda>
 80045b6:	bf00      	nop
 80045b8:	dfbffffe 	.word	0xdfbffffe

080045bc <_fflush_r>:
 80045bc:	b538      	push	{r3, r4, r5, lr}
 80045be:	690b      	ldr	r3, [r1, #16]
 80045c0:	4605      	mov	r5, r0
 80045c2:	460c      	mov	r4, r1
 80045c4:	b913      	cbnz	r3, 80045cc <_fflush_r+0x10>
 80045c6:	2500      	movs	r5, #0
 80045c8:	4628      	mov	r0, r5
 80045ca:	bd38      	pop	{r3, r4, r5, pc}
 80045cc:	b118      	cbz	r0, 80045d6 <_fflush_r+0x1a>
 80045ce:	6a03      	ldr	r3, [r0, #32]
 80045d0:	b90b      	cbnz	r3, 80045d6 <_fflush_r+0x1a>
 80045d2:	f7ff fc91 	bl	8003ef8 <__sinit>
 80045d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d0f3      	beq.n	80045c6 <_fflush_r+0xa>
 80045de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80045e0:	07d0      	lsls	r0, r2, #31
 80045e2:	d404      	bmi.n	80045ee <_fflush_r+0x32>
 80045e4:	0599      	lsls	r1, r3, #22
 80045e6:	d402      	bmi.n	80045ee <_fflush_r+0x32>
 80045e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80045ea:	f7ff fe67 	bl	80042bc <__retarget_lock_acquire_recursive>
 80045ee:	4628      	mov	r0, r5
 80045f0:	4621      	mov	r1, r4
 80045f2:	f7ff ff5d 	bl	80044b0 <__sflush_r>
 80045f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80045f8:	07da      	lsls	r2, r3, #31
 80045fa:	4605      	mov	r5, r0
 80045fc:	d4e4      	bmi.n	80045c8 <_fflush_r+0xc>
 80045fe:	89a3      	ldrh	r3, [r4, #12]
 8004600:	059b      	lsls	r3, r3, #22
 8004602:	d4e1      	bmi.n	80045c8 <_fflush_r+0xc>
 8004604:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004606:	f7ff fe5a 	bl	80042be <__retarget_lock_release_recursive>
 800460a:	e7dd      	b.n	80045c8 <_fflush_r+0xc>

0800460c <__swhatbuf_r>:
 800460c:	b570      	push	{r4, r5, r6, lr}
 800460e:	460c      	mov	r4, r1
 8004610:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004614:	2900      	cmp	r1, #0
 8004616:	b096      	sub	sp, #88	; 0x58
 8004618:	4615      	mov	r5, r2
 800461a:	461e      	mov	r6, r3
 800461c:	da0d      	bge.n	800463a <__swhatbuf_r+0x2e>
 800461e:	89a3      	ldrh	r3, [r4, #12]
 8004620:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004624:	f04f 0100 	mov.w	r1, #0
 8004628:	bf0c      	ite	eq
 800462a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800462e:	2340      	movne	r3, #64	; 0x40
 8004630:	2000      	movs	r0, #0
 8004632:	6031      	str	r1, [r6, #0]
 8004634:	602b      	str	r3, [r5, #0]
 8004636:	b016      	add	sp, #88	; 0x58
 8004638:	bd70      	pop	{r4, r5, r6, pc}
 800463a:	466a      	mov	r2, sp
 800463c:	f000 f848 	bl	80046d0 <_fstat_r>
 8004640:	2800      	cmp	r0, #0
 8004642:	dbec      	blt.n	800461e <__swhatbuf_r+0x12>
 8004644:	9901      	ldr	r1, [sp, #4]
 8004646:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800464a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800464e:	4259      	negs	r1, r3
 8004650:	4159      	adcs	r1, r3
 8004652:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004656:	e7eb      	b.n	8004630 <__swhatbuf_r+0x24>

08004658 <__smakebuf_r>:
 8004658:	898b      	ldrh	r3, [r1, #12]
 800465a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800465c:	079d      	lsls	r5, r3, #30
 800465e:	4606      	mov	r6, r0
 8004660:	460c      	mov	r4, r1
 8004662:	d507      	bpl.n	8004674 <__smakebuf_r+0x1c>
 8004664:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004668:	6023      	str	r3, [r4, #0]
 800466a:	6123      	str	r3, [r4, #16]
 800466c:	2301      	movs	r3, #1
 800466e:	6163      	str	r3, [r4, #20]
 8004670:	b002      	add	sp, #8
 8004672:	bd70      	pop	{r4, r5, r6, pc}
 8004674:	ab01      	add	r3, sp, #4
 8004676:	466a      	mov	r2, sp
 8004678:	f7ff ffc8 	bl	800460c <__swhatbuf_r>
 800467c:	9900      	ldr	r1, [sp, #0]
 800467e:	4605      	mov	r5, r0
 8004680:	4630      	mov	r0, r6
 8004682:	f7ff fe89 	bl	8004398 <_malloc_r>
 8004686:	b948      	cbnz	r0, 800469c <__smakebuf_r+0x44>
 8004688:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800468c:	059a      	lsls	r2, r3, #22
 800468e:	d4ef      	bmi.n	8004670 <__smakebuf_r+0x18>
 8004690:	f023 0303 	bic.w	r3, r3, #3
 8004694:	f043 0302 	orr.w	r3, r3, #2
 8004698:	81a3      	strh	r3, [r4, #12]
 800469a:	e7e3      	b.n	8004664 <__smakebuf_r+0xc>
 800469c:	89a3      	ldrh	r3, [r4, #12]
 800469e:	6020      	str	r0, [r4, #0]
 80046a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046a4:	81a3      	strh	r3, [r4, #12]
 80046a6:	9b00      	ldr	r3, [sp, #0]
 80046a8:	6163      	str	r3, [r4, #20]
 80046aa:	9b01      	ldr	r3, [sp, #4]
 80046ac:	6120      	str	r0, [r4, #16]
 80046ae:	b15b      	cbz	r3, 80046c8 <__smakebuf_r+0x70>
 80046b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80046b4:	4630      	mov	r0, r6
 80046b6:	f000 f81d 	bl	80046f4 <_isatty_r>
 80046ba:	b128      	cbz	r0, 80046c8 <__smakebuf_r+0x70>
 80046bc:	89a3      	ldrh	r3, [r4, #12]
 80046be:	f023 0303 	bic.w	r3, r3, #3
 80046c2:	f043 0301 	orr.w	r3, r3, #1
 80046c6:	81a3      	strh	r3, [r4, #12]
 80046c8:	89a3      	ldrh	r3, [r4, #12]
 80046ca:	431d      	orrs	r5, r3
 80046cc:	81a5      	strh	r5, [r4, #12]
 80046ce:	e7cf      	b.n	8004670 <__smakebuf_r+0x18>

080046d0 <_fstat_r>:
 80046d0:	b538      	push	{r3, r4, r5, lr}
 80046d2:	4d07      	ldr	r5, [pc, #28]	; (80046f0 <_fstat_r+0x20>)
 80046d4:	2300      	movs	r3, #0
 80046d6:	4604      	mov	r4, r0
 80046d8:	4608      	mov	r0, r1
 80046da:	4611      	mov	r1, r2
 80046dc:	602b      	str	r3, [r5, #0]
 80046de:	f7fc fa12 	bl	8000b06 <_fstat>
 80046e2:	1c43      	adds	r3, r0, #1
 80046e4:	d102      	bne.n	80046ec <_fstat_r+0x1c>
 80046e6:	682b      	ldr	r3, [r5, #0]
 80046e8:	b103      	cbz	r3, 80046ec <_fstat_r+0x1c>
 80046ea:	6023      	str	r3, [r4, #0]
 80046ec:	bd38      	pop	{r3, r4, r5, pc}
 80046ee:	bf00      	nop
 80046f0:	200003a4 	.word	0x200003a4

080046f4 <_isatty_r>:
 80046f4:	b538      	push	{r3, r4, r5, lr}
 80046f6:	4d06      	ldr	r5, [pc, #24]	; (8004710 <_isatty_r+0x1c>)
 80046f8:	2300      	movs	r3, #0
 80046fa:	4604      	mov	r4, r0
 80046fc:	4608      	mov	r0, r1
 80046fe:	602b      	str	r3, [r5, #0]
 8004700:	f7fc fa11 	bl	8000b26 <_isatty>
 8004704:	1c43      	adds	r3, r0, #1
 8004706:	d102      	bne.n	800470e <_isatty_r+0x1a>
 8004708:	682b      	ldr	r3, [r5, #0]
 800470a:	b103      	cbz	r3, 800470e <_isatty_r+0x1a>
 800470c:	6023      	str	r3, [r4, #0]
 800470e:	bd38      	pop	{r3, r4, r5, pc}
 8004710:	200003a4 	.word	0x200003a4

08004714 <_sbrk_r>:
 8004714:	b538      	push	{r3, r4, r5, lr}
 8004716:	4d06      	ldr	r5, [pc, #24]	; (8004730 <_sbrk_r+0x1c>)
 8004718:	2300      	movs	r3, #0
 800471a:	4604      	mov	r4, r0
 800471c:	4608      	mov	r0, r1
 800471e:	602b      	str	r3, [r5, #0]
 8004720:	f7fc fa1a 	bl	8000b58 <_sbrk>
 8004724:	1c43      	adds	r3, r0, #1
 8004726:	d102      	bne.n	800472e <_sbrk_r+0x1a>
 8004728:	682b      	ldr	r3, [r5, #0]
 800472a:	b103      	cbz	r3, 800472e <_sbrk_r+0x1a>
 800472c:	6023      	str	r3, [r4, #0]
 800472e:	bd38      	pop	{r3, r4, r5, pc}
 8004730:	200003a4 	.word	0x200003a4

08004734 <_init>:
 8004734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004736:	bf00      	nop
 8004738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800473a:	bc08      	pop	{r3}
 800473c:	469e      	mov	lr, r3
 800473e:	4770      	bx	lr

08004740 <_fini>:
 8004740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004742:	bf00      	nop
 8004744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004746:	bc08      	pop	{r3}
 8004748:	469e      	mov	lr, r3
 800474a:	4770      	bx	lr
