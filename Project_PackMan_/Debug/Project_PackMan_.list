
Project_PackMan_.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006618  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  080067b8  080067b8  000167b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006948  08006948  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08006948  08006948  00016948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006950  08006950  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006950  08006950  00016950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006954  08006954  00016954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08006958  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000350  2000006c  080069c4  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003bc  080069c4  000203bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000133c9  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f3f  00000000  00000000  000334a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011d0  00000000  00000000  000363e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dee  00000000  00000000  000375b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019b5c  00000000  00000000  000383a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017a6c  00000000  00000000  00051f02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009e1e0  00000000  00000000  0006996e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000053ac  00000000  00000000  00107b50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0010cefc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080067a0 	.word	0x080067a0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	080067a0 	.word	0x080067a0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b086      	sub	sp, #24
 8000580:	af02      	add	r7, sp, #8
 8000582:	4603      	mov	r3, r0
 8000584:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	f023 030f 	bic.w	r3, r3, #15
 800058c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800058e:	79fb      	ldrb	r3, [r7, #7]
 8000590:	011b      	lsls	r3, r3, #4
 8000592:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000594:	7bfb      	ldrb	r3, [r7, #15]
 8000596:	f043 030c 	orr.w	r3, r3, #12
 800059a:	b2db      	uxtb	r3, r3
 800059c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800059e:	7bfb      	ldrb	r3, [r7, #15]
 80005a0:	f043 0308 	orr.w	r3, r3, #8
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80005a8:	7bbb      	ldrb	r3, [r7, #14]
 80005aa:	f043 030c 	orr.w	r3, r3, #12
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80005b2:	7bbb      	ldrb	r3, [r7, #14]
 80005b4:	f043 0308 	orr.w	r3, r3, #8
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80005bc:	f107 0208 	add.w	r2, r7, #8
 80005c0:	2364      	movs	r3, #100	; 0x64
 80005c2:	9300      	str	r3, [sp, #0]
 80005c4:	2304      	movs	r3, #4
 80005c6:	214e      	movs	r1, #78	; 0x4e
 80005c8:	4803      	ldr	r0, [pc, #12]	; (80005d8 <lcd_send_cmd+0x5c>)
 80005ca:	f002 feed 	bl	80033a8 <HAL_I2C_Master_Transmit>
}
 80005ce:	bf00      	nop
 80005d0:	3710      	adds	r7, #16
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	20000130 	.word	0x20000130

080005dc <lcd_send_data>:

void lcd_send_data (char data)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b086      	sub	sp, #24
 80005e0:	af02      	add	r7, sp, #8
 80005e2:	4603      	mov	r3, r0
 80005e4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80005e6:	79fb      	ldrb	r3, [r7, #7]
 80005e8:	f023 030f 	bic.w	r3, r3, #15
 80005ec:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80005ee:	79fb      	ldrb	r3, [r7, #7]
 80005f0:	011b      	lsls	r3, r3, #4
 80005f2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80005f4:	7bfb      	ldrb	r3, [r7, #15]
 80005f6:	f043 030d 	orr.w	r3, r3, #13
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80005fe:	7bfb      	ldrb	r3, [r7, #15]
 8000600:	f043 0309 	orr.w	r3, r3, #9
 8000604:	b2db      	uxtb	r3, r3
 8000606:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000608:	7bbb      	ldrb	r3, [r7, #14]
 800060a:	f043 030d 	orr.w	r3, r3, #13
 800060e:	b2db      	uxtb	r3, r3
 8000610:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000612:	7bbb      	ldrb	r3, [r7, #14]
 8000614:	f043 0309 	orr.w	r3, r3, #9
 8000618:	b2db      	uxtb	r3, r3
 800061a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800061c:	f107 0208 	add.w	r2, r7, #8
 8000620:	2364      	movs	r3, #100	; 0x64
 8000622:	9300      	str	r3, [sp, #0]
 8000624:	2304      	movs	r3, #4
 8000626:	214e      	movs	r1, #78	; 0x4e
 8000628:	4803      	ldr	r0, [pc, #12]	; (8000638 <lcd_send_data+0x5c>)
 800062a:	f002 febd 	bl	80033a8 <HAL_I2C_Master_Transmit>
}
 800062e:	bf00      	nop
 8000630:	3710      	adds	r7, #16
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	20000130 	.word	0x20000130

0800063c <lcd_clear>:

void lcd_clear (void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8000642:	2080      	movs	r0, #128	; 0x80
 8000644:	f7ff ff9a 	bl	800057c <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8000648:	2300      	movs	r3, #0
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	e005      	b.n	800065a <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 800064e:	2020      	movs	r0, #32
 8000650:	f7ff ffc4 	bl	80005dc <lcd_send_data>
	for (int i=0; i<70; i++)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	3301      	adds	r3, #1
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	2b45      	cmp	r3, #69	; 0x45
 800065e:	ddf6      	ble.n	800064e <lcd_clear+0x12>
	}
}
 8000660:	bf00      	nop
 8000662:	bf00      	nop
 8000664:	3708      	adds	r7, #8
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}

0800066a <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 800066a:	b580      	push	{r7, lr}
 800066c:	b082      	sub	sp, #8
 800066e:	af00      	add	r7, sp, #0
 8000670:	6078      	str	r0, [r7, #4]
 8000672:	6039      	str	r1, [r7, #0]
    switch (row)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d003      	beq.n	8000682 <lcd_put_cur+0x18>
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	2b01      	cmp	r3, #1
 800067e:	d005      	beq.n	800068c <lcd_put_cur+0x22>
 8000680:	e009      	b.n	8000696 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000688:	603b      	str	r3, [r7, #0]
            break;
 800068a:	e004      	b.n	8000696 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000692:	603b      	str	r3, [r7, #0]
            break;
 8000694:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	b2db      	uxtb	r3, r3
 800069a:	4618      	mov	r0, r3
 800069c:	f7ff ff6e 	bl	800057c <lcd_send_cmd>
}
 80006a0:	bf00      	nop
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <lcd_init>:


void lcd_init (void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80006ac:	2032      	movs	r0, #50	; 0x32
 80006ae:	f001 fad9 	bl	8001c64 <HAL_Delay>
	lcd_send_cmd (0x30);
 80006b2:	2030      	movs	r0, #48	; 0x30
 80006b4:	f7ff ff62 	bl	800057c <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80006b8:	2005      	movs	r0, #5
 80006ba:	f001 fad3 	bl	8001c64 <HAL_Delay>
	lcd_send_cmd (0x30);
 80006be:	2030      	movs	r0, #48	; 0x30
 80006c0:	f7ff ff5c 	bl	800057c <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80006c4:	2001      	movs	r0, #1
 80006c6:	f001 facd 	bl	8001c64 <HAL_Delay>
	lcd_send_cmd (0x30);
 80006ca:	2030      	movs	r0, #48	; 0x30
 80006cc:	f7ff ff56 	bl	800057c <lcd_send_cmd>
	HAL_Delay(10);
 80006d0:	200a      	movs	r0, #10
 80006d2:	f001 fac7 	bl	8001c64 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80006d6:	2020      	movs	r0, #32
 80006d8:	f7ff ff50 	bl	800057c <lcd_send_cmd>
	HAL_Delay(10);
 80006dc:	200a      	movs	r0, #10
 80006de:	f001 fac1 	bl	8001c64 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80006e2:	2028      	movs	r0, #40	; 0x28
 80006e4:	f7ff ff4a 	bl	800057c <lcd_send_cmd>
	HAL_Delay(1);
 80006e8:	2001      	movs	r0, #1
 80006ea:	f001 fabb 	bl	8001c64 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80006ee:	2008      	movs	r0, #8
 80006f0:	f7ff ff44 	bl	800057c <lcd_send_cmd>
	HAL_Delay(1);
 80006f4:	2001      	movs	r0, #1
 80006f6:	f001 fab5 	bl	8001c64 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80006fa:	2001      	movs	r0, #1
 80006fc:	f7ff ff3e 	bl	800057c <lcd_send_cmd>
	HAL_Delay(1);
 8000700:	2001      	movs	r0, #1
 8000702:	f001 faaf 	bl	8001c64 <HAL_Delay>
	HAL_Delay(1);
 8000706:	2001      	movs	r0, #1
 8000708:	f001 faac 	bl	8001c64 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800070c:	2006      	movs	r0, #6
 800070e:	f7ff ff35 	bl	800057c <lcd_send_cmd>
	HAL_Delay(1);
 8000712:	2001      	movs	r0, #1
 8000714:	f001 faa6 	bl	8001c64 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000718:	200c      	movs	r0, #12
 800071a:	f7ff ff2f 	bl	800057c <lcd_send_cmd>
}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}

08000722 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000722:	b580      	push	{r7, lr}
 8000724:	b082      	sub	sp, #8
 8000726:	af00      	add	r7, sp, #0
 8000728:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800072a:	e006      	b.n	800073a <lcd_send_string+0x18>
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	1c5a      	adds	r2, r3, #1
 8000730:	607a      	str	r2, [r7, #4]
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	4618      	mov	r0, r3
 8000736:	f7ff ff51 	bl	80005dc <lcd_send_data>
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d1f4      	bne.n	800072c <lcd_send_string+0xa>
}
 8000742:	bf00      	nop
 8000744:	bf00      	nop
 8000746:	3708      	adds	r7, #8
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}

0800074c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000752:	463b      	mov	r3, r7
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800075e:	4b28      	ldr	r3, [pc, #160]	; (8000800 <MX_ADC1_Init+0xb4>)
 8000760:	4a28      	ldr	r2, [pc, #160]	; (8000804 <MX_ADC1_Init+0xb8>)
 8000762:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000764:	4b26      	ldr	r3, [pc, #152]	; (8000800 <MX_ADC1_Init+0xb4>)
 8000766:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800076a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800076c:	4b24      	ldr	r3, [pc, #144]	; (8000800 <MX_ADC1_Init+0xb4>)
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000772:	4b23      	ldr	r3, [pc, #140]	; (8000800 <MX_ADC1_Init+0xb4>)
 8000774:	2201      	movs	r2, #1
 8000776:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000778:	4b21      	ldr	r3, [pc, #132]	; (8000800 <MX_ADC1_Init+0xb4>)
 800077a:	2201      	movs	r2, #1
 800077c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800077e:	4b20      	ldr	r3, [pc, #128]	; (8000800 <MX_ADC1_Init+0xb4>)
 8000780:	2200      	movs	r2, #0
 8000782:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000786:	4b1e      	ldr	r3, [pc, #120]	; (8000800 <MX_ADC1_Init+0xb4>)
 8000788:	2200      	movs	r2, #0
 800078a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800078c:	4b1c      	ldr	r3, [pc, #112]	; (8000800 <MX_ADC1_Init+0xb4>)
 800078e:	4a1e      	ldr	r2, [pc, #120]	; (8000808 <MX_ADC1_Init+0xbc>)
 8000790:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000792:	4b1b      	ldr	r3, [pc, #108]	; (8000800 <MX_ADC1_Init+0xb4>)
 8000794:	2200      	movs	r2, #0
 8000796:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000798:	4b19      	ldr	r3, [pc, #100]	; (8000800 <MX_ADC1_Init+0xb4>)
 800079a:	2202      	movs	r2, #2
 800079c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800079e:	4b18      	ldr	r3, [pc, #96]	; (8000800 <MX_ADC1_Init+0xb4>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007a6:	4b16      	ldr	r3, [pc, #88]	; (8000800 <MX_ADC1_Init+0xb4>)
 80007a8:	2201      	movs	r2, #1
 80007aa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007ac:	4814      	ldr	r0, [pc, #80]	; (8000800 <MX_ADC1_Init+0xb4>)
 80007ae:	f001 fa7d 	bl	8001cac <HAL_ADC_Init>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80007b8:	f000 fed8 	bl	800156c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007bc:	2300      	movs	r3, #0
 80007be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007c0:	2301      	movs	r3, #1
 80007c2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 80007c4:	2304      	movs	r3, #4
 80007c6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007c8:	463b      	mov	r3, r7
 80007ca:	4619      	mov	r1, r3
 80007cc:	480c      	ldr	r0, [pc, #48]	; (8000800 <MX_ADC1_Init+0xb4>)
 80007ce:	f001 fbbf 	bl	8001f50 <HAL_ADC_ConfigChannel>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007d8:	f000 fec8 	bl	800156c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007dc:	2301      	movs	r3, #1
 80007de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80007e0:	2302      	movs	r3, #2
 80007e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007e4:	463b      	mov	r3, r7
 80007e6:	4619      	mov	r1, r3
 80007e8:	4805      	ldr	r0, [pc, #20]	; (8000800 <MX_ADC1_Init+0xb4>)
 80007ea:	f001 fbb1 	bl	8001f50 <HAL_ADC_ConfigChannel>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80007f4:	f000 feba 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007f8:	bf00      	nop
 80007fa:	3710      	adds	r7, #16
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20000088 	.word	0x20000088
 8000804:	40012000 	.word	0x40012000
 8000808:	0f000001 	.word	0x0f000001

0800080c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b08a      	sub	sp, #40	; 0x28
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000814:	f107 0314 	add.w	r3, r7, #20
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
 8000822:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a2f      	ldr	r2, [pc, #188]	; (80008e8 <HAL_ADC_MspInit+0xdc>)
 800082a:	4293      	cmp	r3, r2
 800082c:	d157      	bne.n	80008de <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	613b      	str	r3, [r7, #16]
 8000832:	4b2e      	ldr	r3, [pc, #184]	; (80008ec <HAL_ADC_MspInit+0xe0>)
 8000834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000836:	4a2d      	ldr	r2, [pc, #180]	; (80008ec <HAL_ADC_MspInit+0xe0>)
 8000838:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800083c:	6453      	str	r3, [r2, #68]	; 0x44
 800083e:	4b2b      	ldr	r3, [pc, #172]	; (80008ec <HAL_ADC_MspInit+0xe0>)
 8000840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000846:	613b      	str	r3, [r7, #16]
 8000848:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	60fb      	str	r3, [r7, #12]
 800084e:	4b27      	ldr	r3, [pc, #156]	; (80008ec <HAL_ADC_MspInit+0xe0>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a26      	ldr	r2, [pc, #152]	; (80008ec <HAL_ADC_MspInit+0xe0>)
 8000854:	f043 0301 	orr.w	r3, r3, #1
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4b24      	ldr	r3, [pc, #144]	; (80008ec <HAL_ADC_MspInit+0xe0>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f003 0301 	and.w	r3, r3, #1
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = x_Value_Pin|y_Value_Pin;
 8000866:	2303      	movs	r3, #3
 8000868:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800086a:	2303      	movs	r3, #3
 800086c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000872:	f107 0314 	add.w	r3, r7, #20
 8000876:	4619      	mov	r1, r3
 8000878:	481d      	ldr	r0, [pc, #116]	; (80008f0 <HAL_ADC_MspInit+0xe4>)
 800087a:	f002 fa9b 	bl	8002db4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800087e:	4b1d      	ldr	r3, [pc, #116]	; (80008f4 <HAL_ADC_MspInit+0xe8>)
 8000880:	4a1d      	ldr	r2, [pc, #116]	; (80008f8 <HAL_ADC_MspInit+0xec>)
 8000882:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000884:	4b1b      	ldr	r3, [pc, #108]	; (80008f4 <HAL_ADC_MspInit+0xe8>)
 8000886:	2200      	movs	r2, #0
 8000888:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800088a:	4b1a      	ldr	r3, [pc, #104]	; (80008f4 <HAL_ADC_MspInit+0xe8>)
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000890:	4b18      	ldr	r3, [pc, #96]	; (80008f4 <HAL_ADC_MspInit+0xe8>)
 8000892:	2200      	movs	r2, #0
 8000894:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000896:	4b17      	ldr	r3, [pc, #92]	; (80008f4 <HAL_ADC_MspInit+0xe8>)
 8000898:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800089c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800089e:	4b15      	ldr	r3, [pc, #84]	; (80008f4 <HAL_ADC_MspInit+0xe8>)
 80008a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80008a4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80008a6:	4b13      	ldr	r3, [pc, #76]	; (80008f4 <HAL_ADC_MspInit+0xe8>)
 80008a8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008ac:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80008ae:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <HAL_ADC_MspInit+0xe8>)
 80008b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008b4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80008b6:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <HAL_ADC_MspInit+0xe8>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80008bc:	4b0d      	ldr	r3, [pc, #52]	; (80008f4 <HAL_ADC_MspInit+0xe8>)
 80008be:	2200      	movs	r2, #0
 80008c0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80008c2:	480c      	ldr	r0, [pc, #48]	; (80008f4 <HAL_ADC_MspInit+0xe8>)
 80008c4:	f001 ff06 	bl	80026d4 <HAL_DMA_Init>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80008ce:	f000 fe4d 	bl	800156c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	4a07      	ldr	r2, [pc, #28]	; (80008f4 <HAL_ADC_MspInit+0xe8>)
 80008d6:	639a      	str	r2, [r3, #56]	; 0x38
 80008d8:	4a06      	ldr	r2, [pc, #24]	; (80008f4 <HAL_ADC_MspInit+0xe8>)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80008de:	bf00      	nop
 80008e0:	3728      	adds	r7, #40	; 0x28
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40012000 	.word	0x40012000
 80008ec:	40023800 	.word	0x40023800
 80008f0:	40020000 	.word	0x40020000
 80008f4:	200000d0 	.word	0x200000d0
 80008f8:	40026410 	.word	0x40026410

080008fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	607b      	str	r3, [r7, #4]
 8000906:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <MX_DMA_Init+0x3c>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a0b      	ldr	r2, [pc, #44]	; (8000938 <MX_DMA_Init+0x3c>)
 800090c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b09      	ldr	r3, [pc, #36]	; (8000938 <MX_DMA_Init+0x3c>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800091e:	2200      	movs	r2, #0
 8000920:	2100      	movs	r1, #0
 8000922:	2038      	movs	r0, #56	; 0x38
 8000924:	f001 fe9f 	bl	8002666 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000928:	2038      	movs	r0, #56	; 0x38
 800092a:	f001 feb8 	bl	800269e <HAL_NVIC_EnableIRQ>

}
 800092e:	bf00      	nop
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40023800 	.word	0x40023800

0800093c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08a      	sub	sp, #40	; 0x28
 8000940:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000942:	f107 0314 	add.w	r3, r7, #20
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
 800094e:	60da      	str	r2, [r3, #12]
 8000950:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	613b      	str	r3, [r7, #16]
 8000956:	4b33      	ldr	r3, [pc, #204]	; (8000a24 <MX_GPIO_Init+0xe8>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a32      	ldr	r2, [pc, #200]	; (8000a24 <MX_GPIO_Init+0xe8>)
 800095c:	f043 0304 	orr.w	r3, r3, #4
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b30      	ldr	r3, [pc, #192]	; (8000a24 <MX_GPIO_Init+0xe8>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f003 0304 	and.w	r3, r3, #4
 800096a:	613b      	str	r3, [r7, #16]
 800096c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	60fb      	str	r3, [r7, #12]
 8000972:	4b2c      	ldr	r3, [pc, #176]	; (8000a24 <MX_GPIO_Init+0xe8>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a2b      	ldr	r2, [pc, #172]	; (8000a24 <MX_GPIO_Init+0xe8>)
 8000978:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b29      	ldr	r3, [pc, #164]	; (8000a24 <MX_GPIO_Init+0xe8>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	60bb      	str	r3, [r7, #8]
 800098e:	4b25      	ldr	r3, [pc, #148]	; (8000a24 <MX_GPIO_Init+0xe8>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a24      	ldr	r2, [pc, #144]	; (8000a24 <MX_GPIO_Init+0xe8>)
 8000994:	f043 0301 	orr.w	r3, r3, #1
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b22      	ldr	r3, [pc, #136]	; (8000a24 <MX_GPIO_Init+0xe8>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0301 	and.w	r3, r3, #1
 80009a2:	60bb      	str	r3, [r7, #8]
 80009a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	607b      	str	r3, [r7, #4]
 80009aa:	4b1e      	ldr	r3, [pc, #120]	; (8000a24 <MX_GPIO_Init+0xe8>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a1d      	ldr	r2, [pc, #116]	; (8000a24 <MX_GPIO_Init+0xe8>)
 80009b0:	f043 0302 	orr.w	r3, r3, #2
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b1b      	ldr	r3, [pc, #108]	; (8000a24 <MX_GPIO_Init+0xe8>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0302 	and.w	r3, r3, #2
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009c2:	2200      	movs	r2, #0
 80009c4:	2120      	movs	r1, #32
 80009c6:	4818      	ldr	r0, [pc, #96]	; (8000a28 <MX_GPIO_Init+0xec>)
 80009c8:	f002 fb90 	bl	80030ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009d2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009dc:	f107 0314 	add.w	r3, r7, #20
 80009e0:	4619      	mov	r1, r3
 80009e2:	4812      	ldr	r0, [pc, #72]	; (8000a2c <MX_GPIO_Init+0xf0>)
 80009e4:	f002 f9e6 	bl	8002db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Joystick_Button_Pin;
 80009e8:	2302      	movs	r3, #2
 80009ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ec:	2300      	movs	r3, #0
 80009ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009f0:	2301      	movs	r3, #1
 80009f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Joystick_Button_GPIO_Port, &GPIO_InitStruct);
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	4619      	mov	r1, r3
 80009fa:	480c      	ldr	r0, [pc, #48]	; (8000a2c <MX_GPIO_Init+0xf0>)
 80009fc:	f002 f9da 	bl	8002db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a00:	2320      	movs	r3, #32
 8000a02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a04:	2301      	movs	r3, #1
 8000a06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a10:	f107 0314 	add.w	r3, r7, #20
 8000a14:	4619      	mov	r1, r3
 8000a16:	4804      	ldr	r0, [pc, #16]	; (8000a28 <MX_GPIO_Init+0xec>)
 8000a18:	f002 f9cc 	bl	8002db4 <HAL_GPIO_Init>

}
 8000a1c:	bf00      	nop
 8000a1e:	3728      	adds	r7, #40	; 0x28
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	40023800 	.word	0x40023800
 8000a28:	40020000 	.word	0x40020000
 8000a2c:	40020800 	.word	0x40020800

08000a30 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a34:	4b12      	ldr	r3, [pc, #72]	; (8000a80 <MX_I2C1_Init+0x50>)
 8000a36:	4a13      	ldr	r2, [pc, #76]	; (8000a84 <MX_I2C1_Init+0x54>)
 8000a38:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a3a:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <MX_I2C1_Init+0x50>)
 8000a3c:	4a12      	ldr	r2, [pc, #72]	; (8000a88 <MX_I2C1_Init+0x58>)
 8000a3e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a40:	4b0f      	ldr	r3, [pc, #60]	; (8000a80 <MX_I2C1_Init+0x50>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a46:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <MX_I2C1_Init+0x50>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <MX_I2C1_Init+0x50>)
 8000a4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a52:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a54:	4b0a      	ldr	r3, [pc, #40]	; (8000a80 <MX_I2C1_Init+0x50>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a5a:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <MX_I2C1_Init+0x50>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a60:	4b07      	ldr	r3, [pc, #28]	; (8000a80 <MX_I2C1_Init+0x50>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a66:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <MX_I2C1_Init+0x50>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a6c:	4804      	ldr	r0, [pc, #16]	; (8000a80 <MX_I2C1_Init+0x50>)
 8000a6e:	f002 fb57 	bl	8003120 <HAL_I2C_Init>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a78:	f000 fd78 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a7c:	bf00      	nop
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	20000130 	.word	0x20000130
 8000a84:	40005400 	.word	0x40005400
 8000a88:	000186a0 	.word	0x000186a0

08000a8c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b08a      	sub	sp, #40	; 0x28
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a94:	f107 0314 	add.w	r3, r7, #20
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	609a      	str	r2, [r3, #8]
 8000aa0:	60da      	str	r2, [r3, #12]
 8000aa2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a19      	ldr	r2, [pc, #100]	; (8000b10 <HAL_I2C_MspInit+0x84>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d12b      	bne.n	8000b06 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	613b      	str	r3, [r7, #16]
 8000ab2:	4b18      	ldr	r3, [pc, #96]	; (8000b14 <HAL_I2C_MspInit+0x88>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a17      	ldr	r2, [pc, #92]	; (8000b14 <HAL_I2C_MspInit+0x88>)
 8000ab8:	f043 0302 	orr.w	r3, r3, #2
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b15      	ldr	r3, [pc, #84]	; (8000b14 <HAL_I2C_MspInit+0x88>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0302 	and.w	r3, r3, #2
 8000ac6:	613b      	str	r3, [r7, #16]
 8000ac8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000aca:	23c0      	movs	r3, #192	; 0xc0
 8000acc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ace:	2312      	movs	r3, #18
 8000ad0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad6:	2303      	movs	r3, #3
 8000ad8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ada:	2304      	movs	r3, #4
 8000adc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ade:	f107 0314 	add.w	r3, r7, #20
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	480c      	ldr	r0, [pc, #48]	; (8000b18 <HAL_I2C_MspInit+0x8c>)
 8000ae6:	f002 f965 	bl	8002db4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	4b09      	ldr	r3, [pc, #36]	; (8000b14 <HAL_I2C_MspInit+0x88>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af2:	4a08      	ldr	r2, [pc, #32]	; (8000b14 <HAL_I2C_MspInit+0x88>)
 8000af4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000af8:	6413      	str	r3, [r2, #64]	; 0x40
 8000afa:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <HAL_I2C_MspInit+0x88>)
 8000afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000b06:	bf00      	nop
 8000b08:	3728      	adds	r7, #40	; 0x28
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40005400 	.word	0x40005400
 8000b14:	40023800 	.word	0x40023800
 8000b18:	40020400 	.word	0x40020400

08000b1c <Dir_Joystick>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

Direction Dir_Joystick() // 조이스틱 방향 출력 함수
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
	// 중간값에 가까워질수록 민감도 높아짐.
	if(dir[0] > 3150) return LEFT;
 8000b20:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <Dir_Joystick+0x4c>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f640 424e 	movw	r2, #3150	; 0xc4e
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d901      	bls.n	8000b30 <Dir_Joystick+0x14>
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	e016      	b.n	8000b5e <Dir_Joystick+0x42>
	else if(dir[0] < 600) return RIGHT;
 8000b30:	4b0d      	ldr	r3, [pc, #52]	; (8000b68 <Dir_Joystick+0x4c>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8000b38:	d201      	bcs.n	8000b3e <Dir_Joystick+0x22>
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	e00f      	b.n	8000b5e <Dir_Joystick+0x42>
	else if(dir[1] > 3110) return UP;
 8000b3e:	4b0a      	ldr	r3, [pc, #40]	; (8000b68 <Dir_Joystick+0x4c>)
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	f640 4226 	movw	r2, #3110	; 0xc26
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d901      	bls.n	8000b4e <Dir_Joystick+0x32>
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	e007      	b.n	8000b5e <Dir_Joystick+0x42>
	else if(dir[1] < 600) return DOWN;
 8000b4e:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <Dir_Joystick+0x4c>)
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8000b56:	d201      	bcs.n	8000b5c <Dir_Joystick+0x40>
 8000b58:	2301      	movs	r3, #1
 8000b5a:	e000      	b.n	8000b5e <Dir_Joystick+0x42>
	else return NONE;
 8000b5c:	2304      	movs	r3, #4
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr
 8000b68:	20000188 	.word	0x20000188

08000b6c <Move_Pacman>:

void Move_Pacman(Character *character, Direction direc)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	460b      	mov	r3, r1
 8000b76:	70fb      	strb	r3, [r7, #3]
	switch(direc)
 8000b78:	78fb      	ldrb	r3, [r7, #3]
 8000b7a:	2b03      	cmp	r3, #3
 8000b7c:	d856      	bhi.n	8000c2c <Move_Pacman+0xc0>
 8000b7e:	a201      	add	r2, pc, #4	; (adr r2, 8000b84 <Move_Pacman+0x18>)
 8000b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b84:	08000bf9 	.word	0x08000bf9
 8000b88:	08000c13 	.word	0x08000c13
 8000b8c:	08000b95 	.word	0x08000b95
 8000b90:	08000bc7 	.word	0x08000bc7
	{
	case RIGHT :
		character->col++; // RIGHT 입력 시, 1칸 이동
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	1c5a      	adds	r2, r3, #1
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	605a      	str	r2, [r3, #4]
		if(character->col > 15) character->col = 15; // 칸 넘어가지 말고 그 자리에서 정지
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	2b0f      	cmp	r3, #15
 8000ba4:	dd02      	ble.n	8000bac <Move_Pacman+0x40>
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	220f      	movs	r2, #15
 8000baa:	605a      	str	r2, [r3, #4]
		character->image_num &= ~(0x2); // 오른쪽 방향 이미지 : 0, 1
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	689b      	ldr	r3, [r3, #8]
 8000bb0:	f023 0202 	bic.w	r2, r3, #2
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
		character->image_num ^= 1;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	689b      	ldr	r3, [r3, #8]
 8000bbc:	f083 0201 	eor.w	r2, r3, #1
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
//		LCD_Display_Charactor(character);
		break;
 8000bc4:	e037      	b.n	8000c36 <Move_Pacman+0xca>

	case LEFT :
		character->col--;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	1e5a      	subs	r2, r3, #1
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	605a      	str	r2, [r3, #4]
		if(character->col < 0) character->col = 0;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	da02      	bge.n	8000bde <Move_Pacman+0x72>
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2200      	movs	r2, #0
 8000bdc:	605a      	str	r2, [r3, #4]
		character->image_num |= 0x2; // 왼쪽 방향 이미지 : 2, 3
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	689b      	ldr	r3, [r3, #8]
 8000be2:	f043 0202 	orr.w	r2, r3, #2
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	609a      	str	r2, [r3, #8]
		character->image_num ^= 1;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	689b      	ldr	r3, [r3, #8]
 8000bee:	f083 0201 	eor.w	r2, r3, #1
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	609a      	str	r2, [r3, #8]
//		LCD_Display_Charactor(character);
		break;
 8000bf6:	e01e      	b.n	8000c36 <Move_Pacman+0xca>

	case UP :
		character->row--;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	1e5a      	subs	r2, r3, #1
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	601a      	str	r2, [r3, #0]
		if(character->row < 0) character->row = 0;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	da12      	bge.n	8000c30 <Move_Pacman+0xc4>
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
//		LCD_Display_Charactor(character);
		break;
 8000c10:	e00e      	b.n	8000c30 <Move_Pacman+0xc4>

	case DOWN :
		character->row++;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	1c5a      	adds	r2, r3, #1
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	601a      	str	r2, [r3, #0]
		if(character->row > 1) character->row = 1;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	dd07      	ble.n	8000c34 <Move_Pacman+0xc8>
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2201      	movs	r2, #1
 8000c28:	601a      	str	r2, [r3, #0]
//		LCD_Display_Charactor(character);
		break;
 8000c2a:	e003      	b.n	8000c34 <Move_Pacman+0xc8>

	default :
//		LCD_Display_Charactor(character);
		break;
 8000c2c:	bf00      	nop
 8000c2e:	e002      	b.n	8000c36 <Move_Pacman+0xca>
		break;
 8000c30:	bf00      	nop
 8000c32:	e000      	b.n	8000c36 <Move_Pacman+0xca>
		break;
 8000c34:	bf00      	nop
	}
	character->past_position[character->row][character->col] = 1;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6819      	ldr	r1, [r3, #0]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	687a      	ldr	r2, [r7, #4]
 8000c40:	0109      	lsls	r1, r1, #4
 8000c42:	440b      	add	r3, r1
 8000c44:	3302      	adds	r3, #2
 8000c46:	009b      	lsls	r3, r3, #2
 8000c48:	4413      	add	r3, r2
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	605a      	str	r2, [r3, #4]
	// 캐릭터 시작은 0,0
	// 모든 위치에 한 번씩 다 도달하여 이차원배열이 1로 채워지면,
	// 먹이를 다 먹었다는 뜻.
}
 8000c4e:	bf00      	nop
 8000c50:	370c      	adds	r7, #12
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <LCD_Display_Charactor>:


void LCD_Display_Charactor(Character *character)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
	uint8_t count = 0; // 먹이의 갯수를 세는 변수 count
 8000c64:	2300      	movs	r3, #0
 8000c66:	75fb      	strb	r3, [r7, #23]
	lcd_clear();
 8000c68:	f7ff fce8 	bl	800063c <lcd_clear>
	lcd_put_cur(character->row, character->col); // 캐릭터의 현재 위치로 커서 이동
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	4619      	mov	r1, r3
 8000c76:	4610      	mov	r0, r2
 8000c78:	f7ff fcf7 	bl	800066a <lcd_put_cur>
	lcd_send_data(character->image_num); // 캐릭터 이미지 데이터를 LCD에 출력
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	689b      	ldr	r3, [r3, #8]
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	4618      	mov	r0, r3
 8000c84:	f7ff fcaa 	bl	80005dc <lcd_send_data>

	// 캐릭터 먹이 생성
	for(int i = 0 ; i <= 1 ; i++)
 8000c88:	2300      	movs	r3, #0
 8000c8a:	613b      	str	r3, [r7, #16]
 8000c8c:	e020      	b.n	8000cd0 <LCD_Display_Charactor+0x74>
	{
		for(int j = 0 ; j < 16 ; j++)
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	e017      	b.n	8000cc4 <LCD_Display_Charactor+0x68>
		{
			if (character->past_position[i][j] != 1) // pacman이 지나가지 않은 곳에 먹이 생성
 8000c94:	687a      	ldr	r2, [r7, #4]
 8000c96:	693b      	ldr	r3, [r7, #16]
 8000c98:	0119      	lsls	r1, r3, #4
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	440b      	add	r3, r1
 8000c9e:	3302      	adds	r3, #2
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	4413      	add	r3, r2
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d009      	beq.n	8000cbe <LCD_Display_Charactor+0x62>
			{
				lcd_put_cur(i, j); // 지나간 위치 빼고 모든 위치에 먹이 배치
 8000caa:	68f9      	ldr	r1, [r7, #12]
 8000cac:	6938      	ldr	r0, [r7, #16]
 8000cae:	f7ff fcdc 	bl	800066a <lcd_put_cur>
				lcd_send_data(0xa5); // 먹이 모양 : 0xa5 / LCD 데이터 시트 참조
 8000cb2:	20a5      	movs	r0, #165	; 0xa5
 8000cb4:	f7ff fc92 	bl	80005dc <lcd_send_data>
				count++;
 8000cb8:	7dfb      	ldrb	r3, [r7, #23]
 8000cba:	3301      	adds	r3, #1
 8000cbc:	75fb      	strb	r3, [r7, #23]
		for(int j = 0 ; j < 16 ; j++)
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	2b0f      	cmp	r3, #15
 8000cc8:	dde4      	ble.n	8000c94 <LCD_Display_Charactor+0x38>
	for(int i = 0 ; i <= 1 ; i++)
 8000cca:	693b      	ldr	r3, [r7, #16]
 8000ccc:	3301      	adds	r3, #1
 8000cce:	613b      	str	r3, [r7, #16]
 8000cd0:	693b      	ldr	r3, [r7, #16]
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	dddb      	ble.n	8000c8e <LCD_Display_Charactor+0x32>
			}
		}
	}
	// 생성된 먹이의 갯수와 캐릭터가 먹은 먹이의 수를 비교하여 소리 조절
	if(count < character->food)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8000cdc:	7dfa      	ldrb	r2, [r7, #23]
 8000cde:	429a      	cmp	r2, r3
 8000ce0:	d208      	bcs.n	8000cf4 <LCD_Display_Charactor+0x98>
	{
		// PWM 사용하여 소리 출력
		TIM3->CCR1 = TIM3->ARR / 2;
 8000ce2:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <LCD_Display_Charactor+0xa0>)
 8000ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ce6:	4a05      	ldr	r2, [pc, #20]	; (8000cfc <LCD_Display_Charactor+0xa0>)
 8000ce8:	085b      	lsrs	r3, r3, #1
 8000cea:	6353      	str	r3, [r2, #52]	; 0x34
		character->food = count;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	7dfa      	ldrb	r2, [r7, #23]
 8000cf0:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	}
}
 8000cf4:	bf00      	nop
 8000cf6:	3718      	adds	r7, #24
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	40000400 	.word	0x40000400

08000d00 <Move_Enemy>:


void Move_Enemy(Enemy *enemy, Character character, uint8_t clk_pulse) // enemy는 포인터 변수, charactor는 구조체이므로 enemy->col, charaoctr->col
{
 8000d00:	b084      	sub	sp, #16
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b084      	sub	sp, #16
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
 8000d0a:	f107 001c 	add.w	r0, r7, #28
 8000d0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint8_t move = rand()%2; // 0 또는 1 중의 무작위값 선택
 8000d12:	f004 fd65 	bl	80057e0 <rand>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	bfb8      	it	lt
 8000d20:	425b      	neglt	r3, r3
 8000d22:	73fb      	strb	r3, [r7, #15]

	if(clk_pulse == 1 && enemy->clock_before == 0)
 8000d24:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	d135      	bne.n	8000d98 <Move_Enemy+0x98>
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	7b1b      	ldrb	r3, [r3, #12]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d131      	bne.n	8000d98 <Move_Enemy+0x98>
	{
		if(move == 0)
 8000d34:	7bfb      	ldrb	r3, [r7, #15]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d108      	bne.n	8000d4c <Move_Enemy+0x4c>
		{
			if(enemy->row != character.row) // Enemy와 Charactoc의 행이 다른 경우
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	429a      	cmp	r2, r3
 8000d42:	d029      	beq.n	8000d98 <Move_Enemy+0x98>
				enemy->row = character.row; // Enemy는 Charactor쪽으로 이동한다.
 8000d44:	69fa      	ldr	r2, [r7, #28]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	e025      	b.n	8000d98 <Move_Enemy+0x98>
		}
		else if(move == 1)
 8000d4c:	7bfb      	ldrb	r3, [r7, #15]
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d122      	bne.n	8000d98 <Move_Enemy+0x98>
		{
			if(enemy->col > character.col) // enemy가 charactor보다 오른쪽에 있다면,
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	685a      	ldr	r2, [r3, #4]
 8000d56:	6a3b      	ldr	r3, [r7, #32]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	dd0c      	ble.n	8000d76 <Move_Enemy+0x76>
			{
				enemy->col--; // 왼쪽으로 이동시켜라.
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	1e5a      	subs	r2, r3, #1
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	605a      	str	r2, [r3, #4]
				if(enemy->col < 0) // 화면 밖으로 나가지 않도록 설정
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	da14      	bge.n	8000d98 <Move_Enemy+0x98>
					enemy->col = 0;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2200      	movs	r2, #0
 8000d72:	605a      	str	r2, [r3, #4]
 8000d74:	e010      	b.n	8000d98 <Move_Enemy+0x98>
			}
			else if(enemy->col < character.col) // enemy가 charactor보다 왼쪽에 있다면,
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	685a      	ldr	r2, [r3, #4]
 8000d7a:	6a3b      	ldr	r3, [r7, #32]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	da0b      	bge.n	8000d98 <Move_Enemy+0x98>
			{
				enemy->col++; // 오른쪽으로 이동시켜라
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	1c5a      	adds	r2, r3, #1
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	605a      	str	r2, [r3, #4]
				if(enemy->col > 15) // 화면 밖으로 나가지 않도록 설정
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	2b0f      	cmp	r3, #15
 8000d90:	dd02      	ble.n	8000d98 <Move_Enemy+0x98>
					enemy->col = 15;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	220f      	movs	r2, #15
 8000d96:	605a      	str	r2, [r3, #4]
			}
		}
	}
	enemy->clock_before = clk_pulse;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	f897 20ac 	ldrb.w	r2, [r7, #172]	; 0xac
 8000d9e:	731a      	strb	r2, [r3, #12]
}
 8000da0:	bf00      	nop
 8000da2:	3710      	adds	r7, #16
 8000da4:	46bd      	mov	sp, r7
 8000da6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000daa:	b004      	add	sp, #16
 8000dac:	4770      	bx	lr

08000dae <LCD_Display_Enemy>:


void LCD_Display_Enemy(Enemy enemy)
{
 8000dae:	b590      	push	{r4, r7, lr}
 8000db0:	b085      	sub	sp, #20
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	463c      	mov	r4, r7
 8000db6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	lcd_put_cur(enemy.row, enemy.col);
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	687a      	ldr	r2, [r7, #4]
 8000dbe:	4611      	mov	r1, r2
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff fc52 	bl	800066a <lcd_put_cur>
	lcd_send_data(enemy.image_num);
 8000dc6:	68bb      	ldr	r3, [r7, #8]
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f7ff fc06 	bl	80005dc <lcd_send_data>
}
 8000dd0:	bf00      	nop
 8000dd2:	3714      	adds	r7, #20
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd90      	pop	{r4, r7, pc}

08000dd8 <GameStatus>:


Game_status GameStatus(Character *character, Enemy *enemy)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b086      	sub	sp, #24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	6039      	str	r1, [r7, #0]
	uint8_t cnt = 0;
 8000de2:	2300      	movs	r3, #0
 8000de4:	75fb      	strb	r3, [r7, #23]
	for(int i = 0 ; i <= 1 ; i++)
 8000de6:	2300      	movs	r3, #0
 8000de8:	613b      	str	r3, [r7, #16]
 8000dea:	e019      	b.n	8000e20 <GameStatus+0x48>
	{
		for(int j = 0 ; j < 16 ; j++)
 8000dec:	2300      	movs	r3, #0
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	e010      	b.n	8000e14 <GameStatus+0x3c>
		{
			if(character->past_position[i][j] == 1)
 8000df2:	687a      	ldr	r2, [r7, #4]
 8000df4:	693b      	ldr	r3, [r7, #16]
 8000df6:	0119      	lsls	r1, r3, #4
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	440b      	add	r3, r1
 8000dfc:	3302      	adds	r3, #2
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	4413      	add	r3, r2
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d102      	bne.n	8000e0e <GameStatus+0x36>
				cnt++;
 8000e08:	7dfb      	ldrb	r3, [r7, #23]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	75fb      	strb	r3, [r7, #23]
		for(int j = 0 ; j < 16 ; j++)
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	3301      	adds	r3, #1
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	2b0f      	cmp	r3, #15
 8000e18:	ddeb      	ble.n	8000df2 <GameStatus+0x1a>
	for(int i = 0 ; i <= 1 ; i++)
 8000e1a:	693b      	ldr	r3, [r7, #16]
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	613b      	str	r3, [r7, #16]
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	dde2      	ble.n	8000dec <GameStatus+0x14>
		}
	}
	if(character->row == enemy->row && character->col == enemy->col)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d109      	bne.n	8000e46 <GameStatus+0x6e>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	685a      	ldr	r2, [r3, #4]
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	d103      	bne.n	8000e46 <GameStatus+0x6e>
	{
		LoseSound();
 8000e3e:	f000 f8ef 	bl	8001020 <LoseSound>
		return OVER;
 8000e42:	2302      	movs	r3, #2
 8000e44:	e066      	b.n	8000f14 <GameStatus+0x13c>
	}
	else if(cnt == 32 && level == 1)
 8000e46:	7dfb      	ldrb	r3, [r7, #23]
 8000e48:	2b20      	cmp	r3, #32
 8000e4a:	d129      	bne.n	8000ea0 <GameStatus+0xc8>
 8000e4c:	4b33      	ldr	r3, [pc, #204]	; (8000f1c <GameStatus+0x144>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d125      	bne.n	8000ea0 <GameStatus+0xc8>
	{
		WinSound();
 8000e54:	f000 f91a 	bl	800108c <WinSound>
		lcd_clear();
 8000e58:	f7ff fbf0 	bl	800063c <lcd_clear>
		lcd_put_cur(0, 1);
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	2000      	movs	r0, #0
 8000e60:	f7ff fc03 	bl	800066a <lcd_put_cur>
		lcd_send_string("Level 2");
 8000e64:	482e      	ldr	r0, [pc, #184]	; (8000f20 <GameStatus+0x148>)
 8000e66:	f7ff fc5c 	bl	8000722 <lcd_send_string>
		HAL_Delay(500);
 8000e6a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e6e:	f000 fef9 	bl	8001c64 <HAL_Delay>
		lcd_put_cur(1, 9);
 8000e72:	2109      	movs	r1, #9
 8000e74:	2001      	movs	r0, #1
 8000e76:	f7ff fbf8 	bl	800066a <lcd_put_cur>
		lcd_send_string("Start!");
 8000e7a:	482a      	ldr	r0, [pc, #168]	; (8000f24 <GameStatus+0x14c>)
 8000e7c:	f7ff fc51 	bl	8000722 <lcd_send_string>
		HAL_Delay(800);
 8000e80:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000e84:	f000 feee 	bl	8001c64 <HAL_Delay>
		LevelupInit(character, enemy);
 8000e88:	6839      	ldr	r1, [r7, #0]
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	f000 f850 	bl	8000f30 <LevelupInit>
//		TIM2->PSC = 6750; // 문어 속도 Lv1보다 빠르게
		TIM2->PSC = 5000; // 문어 속도 Lv1보다 빠르게
 8000e90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e98:	629a      	str	r2, [r3, #40]	; 0x28
		return game_status;
 8000e9a:	4b23      	ldr	r3, [pc, #140]	; (8000f28 <GameStatus+0x150>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	e039      	b.n	8000f14 <GameStatus+0x13c>
	}
	else if(cnt == 32 && level == 2)
 8000ea0:	7dfb      	ldrb	r3, [r7, #23]
 8000ea2:	2b20      	cmp	r3, #32
 8000ea4:	d129      	bne.n	8000efa <GameStatus+0x122>
 8000ea6:	4b1d      	ldr	r3, [pc, #116]	; (8000f1c <GameStatus+0x144>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	2b02      	cmp	r3, #2
 8000eac:	d125      	bne.n	8000efa <GameStatus+0x122>
	{
		WinSound();
 8000eae:	f000 f8ed 	bl	800108c <WinSound>
		lcd_clear();
 8000eb2:	f7ff fbc3 	bl	800063c <lcd_clear>
		lcd_put_cur(0, 1);
 8000eb6:	2101      	movs	r1, #1
 8000eb8:	2000      	movs	r0, #0
 8000eba:	f7ff fbd6 	bl	800066a <lcd_put_cur>
		lcd_send_string("Level 3");
 8000ebe:	481b      	ldr	r0, [pc, #108]	; (8000f2c <GameStatus+0x154>)
 8000ec0:	f7ff fc2f 	bl	8000722 <lcd_send_string>
		HAL_Delay(500);
 8000ec4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ec8:	f000 fecc 	bl	8001c64 <HAL_Delay>
		lcd_put_cur(1, 9);
 8000ecc:	2109      	movs	r1, #9
 8000ece:	2001      	movs	r0, #1
 8000ed0:	f7ff fbcb 	bl	800066a <lcd_put_cur>
		lcd_send_string("Start!");
 8000ed4:	4813      	ldr	r0, [pc, #76]	; (8000f24 <GameStatus+0x14c>)
 8000ed6:	f7ff fc24 	bl	8000722 <lcd_send_string>
		HAL_Delay(800);
 8000eda:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000ede:	f000 fec1 	bl	8001c64 <HAL_Delay>
		LevelupInit(character, enemy);
 8000ee2:	6839      	ldr	r1, [r7, #0]
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f000 f823 	bl	8000f30 <LevelupInit>
//		TIM2->PSC = 4500; // 문어 속도 Lv2보다 빠르게
		TIM2->PSC = 3500; // 문어 속도 Lv2보다 빠르게
 8000eea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000eee:	f640 52ac 	movw	r2, #3500	; 0xdac
 8000ef2:	629a      	str	r2, [r3, #40]	; 0x28
		return game_status;
 8000ef4:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <GameStatus+0x150>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	e00c      	b.n	8000f14 <GameStatus+0x13c>
	}
	else if(cnt == 32 && level == 3)
 8000efa:	7dfb      	ldrb	r3, [r7, #23]
 8000efc:	2b20      	cmp	r3, #32
 8000efe:	d107      	bne.n	8000f10 <GameStatus+0x138>
 8000f00:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <GameStatus+0x144>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	2b03      	cmp	r3, #3
 8000f06:	d103      	bne.n	8000f10 <GameStatus+0x138>
	{
		WinSound();
 8000f08:	f000 f8c0 	bl	800108c <WinSound>
		return WIN;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	e001      	b.n	8000f14 <GameStatus+0x13c>
	}
	else return game_status;
 8000f10:	4b05      	ldr	r3, [pc, #20]	; (8000f28 <GameStatus+0x150>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3718      	adds	r7, #24
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20000000 	.word	0x20000000
 8000f20:	080067b8 	.word	0x080067b8
 8000f24:	080067c0 	.word	0x080067c0
 8000f28:	20000184 	.word	0x20000184
 8000f2c:	080067c8 	.word	0x080067c8

08000f30 <LevelupInit>:


void LevelupInit(Character *character, Enemy *enemy)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	6039      	str	r1, [r7, #0]
	level++; // enum type의 장점, 문자에 각 번호가 할당되어 연산식 사용이 편하다.
 8000f3a:	4b1c      	ldr	r3, [pc, #112]	; (8000fac <LevelupInit+0x7c>)
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	3301      	adds	r3, #1
 8000f40:	b2da      	uxtb	r2, r3
 8000f42:	4b1a      	ldr	r3, [pc, #104]	; (8000fac <LevelupInit+0x7c>)
 8000f44:	701a      	strb	r2, [r3, #0]
	character->row = 0;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
	character->col = 0;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2200      	movs	r2, #0
 8000f50:	605a      	str	r2, [r3, #4]
	character->food = 31;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	221f      	movs	r2, #31
 8000f56:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	for(int i = 0 ; i <= 1 ; i++)
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60fb      	str	r3, [r7, #12]
 8000f5e:	e015      	b.n	8000f8c <LevelupInit+0x5c>
	{
		for(int j = 0 ; j < 16 ; j++)
 8000f60:	2300      	movs	r3, #0
 8000f62:	60bb      	str	r3, [r7, #8]
 8000f64:	e00c      	b.n	8000f80 <LevelupInit+0x50>
		{
			character->past_position[i][j] = 0;
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	0119      	lsls	r1, r3, #4
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	440b      	add	r3, r1
 8000f70:	3302      	adds	r3, #2
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	4413      	add	r3, r2
 8000f76:	2200      	movs	r2, #0
 8000f78:	605a      	str	r2, [r3, #4]
		for(int j = 0 ; j < 16 ; j++)
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	60bb      	str	r3, [r7, #8]
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	2b0f      	cmp	r3, #15
 8000f84:	ddef      	ble.n	8000f66 <LevelupInit+0x36>
	for(int i = 0 ; i <= 1 ; i++)
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	dde6      	ble.n	8000f60 <LevelupInit+0x30>
		}
	}
	enemy->row = 1;
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	2201      	movs	r2, #1
 8000f96:	601a      	str	r2, [r3, #0]
	enemy->col = 8;
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	2208      	movs	r2, #8
 8000f9c:	605a      	str	r2, [r3, #4]
}
 8000f9e:	bf00      	nop
 8000fa0:	3714      	adds	r7, #20
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	20000000 	.word	0x20000000

08000fb0 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
	clk_pulse ^= 0x01;
 8000fb8:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	f083 0301 	eor.w	r3, r3, #1
 8000fc0:	b2da      	uxtb	r2, r3
 8000fc2:	4b04      	ldr	r3, [pc, #16]	; (8000fd4 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000fc4:	701a      	strb	r2, [r3, #0]
}
 8000fc6:	bf00      	nop
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	20000190 	.word	0x20000190

08000fd8 <StartSound>:


void StartSound()
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
	TIM3->ARR = 156;
 8000fdc:	4b0f      	ldr	r3, [pc, #60]	; (800101c <StartSound+0x44>)
 8000fde:	229c      	movs	r2, #156	; 0x9c
 8000fe0:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->CCR1 = TIM3->ARR / 2;
 8000fe2:	4b0e      	ldr	r3, [pc, #56]	; (800101c <StartSound+0x44>)
 8000fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fe6:	4a0d      	ldr	r2, [pc, #52]	; (800101c <StartSound+0x44>)
 8000fe8:	085b      	lsrs	r3, r3, #1
 8000fea:	6353      	str	r3, [r2, #52]	; 0x34
	HAL_Delay(100);
 8000fec:	2064      	movs	r0, #100	; 0x64
 8000fee:	f000 fe39 	bl	8001c64 <HAL_Delay>
	TIM3->ARR = 111;
 8000ff2:	4b0a      	ldr	r3, [pc, #40]	; (800101c <StartSound+0x44>)
 8000ff4:	226f      	movs	r2, #111	; 0x6f
 8000ff6:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->CCR1 = TIM3->ARR / 2;
 8000ff8:	4b08      	ldr	r3, [pc, #32]	; (800101c <StartSound+0x44>)
 8000ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ffc:	4a07      	ldr	r2, [pc, #28]	; (800101c <StartSound+0x44>)
 8000ffe:	085b      	lsrs	r3, r3, #1
 8001000:	6353      	str	r3, [r2, #52]	; 0x34
	HAL_Delay(100);
 8001002:	2064      	movs	r0, #100	; 0x64
 8001004:	f000 fe2e 	bl	8001c64 <HAL_Delay>

	// Setting for food eating Sound
	TIM3->ARR = 1060;
 8001008:	4b04      	ldr	r3, [pc, #16]	; (800101c <StartSound+0x44>)
 800100a:	f240 4224 	movw	r2, #1060	; 0x424
 800100e:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->CCR1 = 0;
 8001010:	4b02      	ldr	r3, [pc, #8]	; (800101c <StartSound+0x44>)
 8001012:	2200      	movs	r2, #0
 8001014:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40000400 	.word	0x40000400

08001020 <LoseSound>:


void LoseSound()
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
	TIM3->ARR = 290;
 8001024:	4b18      	ldr	r3, [pc, #96]	; (8001088 <LoseSound+0x68>)
 8001026:	f44f 7291 	mov.w	r2, #290	; 0x122
 800102a:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->CCR1 = TIM3->ARR / 2;
 800102c:	4b16      	ldr	r3, [pc, #88]	; (8001088 <LoseSound+0x68>)
 800102e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001030:	4a15      	ldr	r2, [pc, #84]	; (8001088 <LoseSound+0x68>)
 8001032:	085b      	lsrs	r3, r3, #1
 8001034:	6353      	str	r3, [r2, #52]	; 0x34
	HAL_Delay(80);
 8001036:	2050      	movs	r0, #80	; 0x50
 8001038:	f000 fe14 	bl	8001c64 <HAL_Delay>

	TIM3->ARR = 391;
 800103c:	4b12      	ldr	r3, [pc, #72]	; (8001088 <LoseSound+0x68>)
 800103e:	f240 1287 	movw	r2, #391	; 0x187
 8001042:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->CCR1 = TIM3->ARR / 2;
 8001044:	4b10      	ldr	r3, [pc, #64]	; (8001088 <LoseSound+0x68>)
 8001046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001048:	4a0f      	ldr	r2, [pc, #60]	; (8001088 <LoseSound+0x68>)
 800104a:	085b      	lsrs	r3, r3, #1
 800104c:	6353      	str	r3, [r2, #52]	; 0x34
	HAL_Delay(80);
 800104e:	2050      	movs	r0, #80	; 0x50
 8001050:	f000 fe08 	bl	8001c64 <HAL_Delay>

	TIM3->ARR = 290;
 8001054:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <LoseSound+0x68>)
 8001056:	f44f 7291 	mov.w	r2, #290	; 0x122
 800105a:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->CCR1 = TIM3->ARR / 2;
 800105c:	4b0a      	ldr	r3, [pc, #40]	; (8001088 <LoseSound+0x68>)
 800105e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001060:	4a09      	ldr	r2, [pc, #36]	; (8001088 <LoseSound+0x68>)
 8001062:	085b      	lsrs	r3, r3, #1
 8001064:	6353      	str	r3, [r2, #52]	; 0x34
	HAL_Delay(80);
 8001066:	2050      	movs	r0, #80	; 0x50
 8001068:	f000 fdfc 	bl	8001c64 <HAL_Delay>

	TIM3->ARR = 391;
 800106c:	4b06      	ldr	r3, [pc, #24]	; (8001088 <LoseSound+0x68>)
 800106e:	f240 1287 	movw	r2, #391	; 0x187
 8001072:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->CCR1 = TIM3->ARR / 2;
 8001074:	4b04      	ldr	r3, [pc, #16]	; (8001088 <LoseSound+0x68>)
 8001076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001078:	4a03      	ldr	r2, [pc, #12]	; (8001088 <LoseSound+0x68>)
 800107a:	085b      	lsrs	r3, r3, #1
 800107c:	6353      	str	r3, [r2, #52]	; 0x34
	HAL_Delay(80);
 800107e:	2050      	movs	r0, #80	; 0x50
 8001080:	f000 fdf0 	bl	8001c64 <HAL_Delay>
}
 8001084:	bf00      	nop
 8001086:	bd80      	pop	{r7, pc}
 8001088:	40000400 	.word	0x40000400

0800108c <WinSound>:


void WinSound()
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
	TIM3->ARR = 593;
 8001090:	4b31      	ldr	r3, [pc, #196]	; (8001158 <WinSound+0xcc>)
 8001092:	f240 2251 	movw	r2, #593	; 0x251
 8001096:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->CCR1 = TIM3->ARR / 2;
 8001098:	4b2f      	ldr	r3, [pc, #188]	; (8001158 <WinSound+0xcc>)
 800109a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800109c:	4a2e      	ldr	r2, [pc, #184]	; (8001158 <WinSound+0xcc>)
 800109e:	085b      	lsrs	r3, r3, #1
 80010a0:	6353      	str	r3, [r2, #52]	; 0x34
	HAL_Delay(100);
 80010a2:	2064      	movs	r0, #100	; 0x64
 80010a4:	f000 fdde 	bl	8001c64 <HAL_Delay>

	TIM3->CCR1 = 0;
 80010a8:	4b2b      	ldr	r3, [pc, #172]	; (8001158 <WinSound+0xcc>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(10);
 80010ae:	200a      	movs	r0, #10
 80010b0:	f000 fdd8 	bl	8001c64 <HAL_Delay>

	TIM3->CCR1 = TIM3->ARR / 2;
 80010b4:	4b28      	ldr	r3, [pc, #160]	; (8001158 <WinSound+0xcc>)
 80010b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010b8:	4a27      	ldr	r2, [pc, #156]	; (8001158 <WinSound+0xcc>)
 80010ba:	085b      	lsrs	r3, r3, #1
 80010bc:	6353      	str	r3, [r2, #52]	; 0x34
	HAL_Delay(100);
 80010be:	2064      	movs	r0, #100	; 0x64
 80010c0:	f000 fdd0 	bl	8001c64 <HAL_Delay>

	TIM3->CCR1 = 0;
 80010c4:	4b24      	ldr	r3, [pc, #144]	; (8001158 <WinSound+0xcc>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(10);
 80010ca:	200a      	movs	r0, #10
 80010cc:	f000 fdca 	bl	8001c64 <HAL_Delay>

	TIM3->CCR1 = TIM3->ARR / 2;
 80010d0:	4b21      	ldr	r3, [pc, #132]	; (8001158 <WinSound+0xcc>)
 80010d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010d4:	4a20      	ldr	r2, [pc, #128]	; (8001158 <WinSound+0xcc>)
 80010d6:	085b      	lsrs	r3, r3, #1
 80010d8:	6353      	str	r3, [r2, #52]	; 0x34
	HAL_Delay(100);
 80010da:	2064      	movs	r0, #100	; 0x64
 80010dc:	f000 fdc2 	bl	8001c64 <HAL_Delay>

	TIM3->CCR1 = 0;
 80010e0:	4b1d      	ldr	r3, [pc, #116]	; (8001158 <WinSound+0xcc>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(10);
 80010e6:	200a      	movs	r0, #10
 80010e8:	f000 fdbc 	bl	8001c64 <HAL_Delay>

	TIM3->ARR = 767;
 80010ec:	4b1a      	ldr	r3, [pc, #104]	; (8001158 <WinSound+0xcc>)
 80010ee:	f240 22ff 	movw	r2, #767	; 0x2ff
 80010f2:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->CCR1 = TIM3->ARR / 2;
 80010f4:	4b18      	ldr	r3, [pc, #96]	; (8001158 <WinSound+0xcc>)
 80010f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010f8:	4a17      	ldr	r2, [pc, #92]	; (8001158 <WinSound+0xcc>)
 80010fa:	085b      	lsrs	r3, r3, #1
 80010fc:	6353      	str	r3, [r2, #52]	; 0x34
	HAL_Delay(100);
 80010fe:	2064      	movs	r0, #100	; 0x64
 8001100:	f000 fdb0 	bl	8001c64 <HAL_Delay>

	TIM3->ARR = 593;
 8001104:	4b14      	ldr	r3, [pc, #80]	; (8001158 <WinSound+0xcc>)
 8001106:	f240 2251 	movw	r2, #593	; 0x251
 800110a:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->CCR1 = TIM3->ARR / 2;
 800110c:	4b12      	ldr	r3, [pc, #72]	; (8001158 <WinSound+0xcc>)
 800110e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001110:	4a11      	ldr	r2, [pc, #68]	; (8001158 <WinSound+0xcc>)
 8001112:	085b      	lsrs	r3, r3, #1
 8001114:	6353      	str	r3, [r2, #52]	; 0x34
	HAL_Delay(300);
 8001116:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800111a:	f000 fda3 	bl	8001c64 <HAL_Delay>

	TIM3->ARR = 508;
 800111e:	4b0e      	ldr	r3, [pc, #56]	; (8001158 <WinSound+0xcc>)
 8001120:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
 8001124:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->CCR1 = TIM3->ARR / 2;
 8001126:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <WinSound+0xcc>)
 8001128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800112a:	4a0b      	ldr	r2, [pc, #44]	; (8001158 <WinSound+0xcc>)
 800112c:	085b      	lsrs	r3, r3, #1
 800112e:	6353      	str	r3, [r2, #52]	; 0x34
	HAL_Delay(300);
 8001130:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001134:	f000 fd96 	bl	8001c64 <HAL_Delay>

	TIM3->ARR = 1029;
 8001138:	4b07      	ldr	r3, [pc, #28]	; (8001158 <WinSound+0xcc>)
 800113a:	f240 4205 	movw	r2, #1029	; 0x405
 800113e:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->CCR1 = TIM3->ARR / 2;
 8001140:	4b05      	ldr	r3, [pc, #20]	; (8001158 <WinSound+0xcc>)
 8001142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001144:	4a04      	ldr	r2, [pc, #16]	; (8001158 <WinSound+0xcc>)
 8001146:	085b      	lsrs	r3, r3, #1
 8001148:	6353      	str	r3, [r2, #52]	; 0x34
	HAL_Delay(300);
 800114a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800114e:	f000 fd89 	bl	8001c64 <HAL_Delay>
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40000400 	.word	0x40000400

0800115c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800115c:	b590      	push	{r4, r7, lr}
 800115e:	b0db      	sub	sp, #364	; 0x16c
 8001160:	af22      	add	r7, sp, #136	; 0x88
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001162:	f000 fd0d 	bl	8001b80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001166:	f000 f999 	bl	800149c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800116a:	f7ff fbe7 	bl	800093c <MX_GPIO_Init>
  MX_DMA_Init();
 800116e:	f7ff fbc5 	bl	80008fc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001172:	f000 fc69 	bl	8001a48 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001176:	f7ff fae9 	bl	800074c <MX_ADC1_Init>
  MX_TIM2_Init();
 800117a:	f000 fb3b 	bl	80017f4 <MX_TIM2_Init>
  MX_TIM3_Init();
 800117e:	f000 fb87 	bl	8001890 <MX_TIM3_Init>
  MX_I2C1_Init();
 8001182:	f7ff fc55 	bl	8000a30 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, dir, 2);
 8001186:	2202      	movs	r2, #2
 8001188:	49b0      	ldr	r1, [pc, #704]	; (800144c <main+0x2f0>)
 800118a:	48b1      	ldr	r0, [pc, #708]	; (8001450 <main+0x2f4>)
 800118c:	f000 fdd2 	bl	8001d34 <HAL_ADC_Start_DMA>

  // LCD 초기화 함수 호출
  lcd_init();
 8001190:	f7ff fa8a 	bl	80006a8 <lcd_init>

  // Pacman 이미지 데이터
  char pac1[] = {0x07,  0x0F,  0x1C,  0x18,  0x18,  0x1C,  0x0F,  0x07}; // 우 벌
 8001194:	4aaf      	ldr	r2, [pc, #700]	; (8001454 <main+0x2f8>)
 8001196:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800119a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800119e:	e883 0003 	stmia.w	r3, {r0, r1}
  char pac2[] = {0x00,  0x0F,  0x1F,  0x18,  0x1C,  0x1F,  0x0F,  0x00}; // 우 닫
 80011a2:	4aad      	ldr	r2, [pc, #692]	; (8001458 <main+0x2fc>)
 80011a4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80011a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011ac:	e883 0003 	stmia.w	r3, {r0, r1}
  char pac3[] = {0x1C,  0x1E,  0x07,  0x03,  0x03,  0x07,  0x1E,  0x1C}; // 좌 벌
 80011b0:	4aaa      	ldr	r2, [pc, #680]	; (800145c <main+0x300>)
 80011b2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80011b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011ba:	e883 0003 	stmia.w	r3, {r0, r1}
  char pac4[] = {0x00,  0x1E,  0x1F,  0x03,  0x07,  0x1F,  0x1E,  0x00}; // 좌 닫
 80011be:	4aa8      	ldr	r2, [pc, #672]	; (8001460 <main+0x304>)
 80011c0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80011c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011c8:	e883 0003 	stmia.w	r3, {r0, r1}
  char enemy[] = {0x0E,  0x1F,  0x15,  0x1F,  0x0E,  0x15,  0x15,  0x15}; // 문어
 80011cc:	4aa5      	ldr	r2, [pc, #660]	; (8001464 <main+0x308>)
 80011ce:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011d6:	e883 0003 	stmia.w	r3, {r0, r1}


  // Pacman 이미지를 LCD의 DDRAM에 저장
  lcd_send_cmd(0x40); // LCD 화면의 DDRAM 주소를 설정하여 화면의 원하는 위치에 출력, DDRAM Address 2열 1번의 주소가 0x40
 80011da:	2040      	movs	r0, #64	; 0x40
 80011dc:	f7ff f9ce 	bl	800057c <lcd_send_cmd>
  for(int i = 0 ; i < 8 ; i++)
 80011e0:	2300      	movs	r3, #0
 80011e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80011e6:	e00d      	b.n	8001204 <main+0xa8>
	  lcd_send_data(pac1[i]);
 80011e8:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 80011ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80011f0:	4413      	add	r3, r2
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff f9f1 	bl	80005dc <lcd_send_data>
  for(int i = 0 ; i < 8 ; i++)
 80011fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80011fe:	3301      	adds	r3, #1
 8001200:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001204:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001208:	2b07      	cmp	r3, #7
 800120a:	dded      	ble.n	80011e8 <main+0x8c>

  lcd_send_cmd(0x40+8); // 8bit씩이니까 2번은 0x40 + 8
 800120c:	2048      	movs	r0, #72	; 0x48
 800120e:	f7ff f9b5 	bl	800057c <lcd_send_cmd>
  for(int i = 0 ; i < 8 ; i++)
 8001212:	2300      	movs	r3, #0
 8001214:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001218:	e00d      	b.n	8001236 <main+0xda>
	  lcd_send_data(pac2[i]);
 800121a:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 800121e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001222:	4413      	add	r3, r2
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff f9d8 	bl	80005dc <lcd_send_data>
  for(int i = 0 ; i < 8 ; i++)
 800122c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001230:	3301      	adds	r3, #1
 8001232:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001236:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800123a:	2b07      	cmp	r3, #7
 800123c:	dded      	ble.n	800121a <main+0xbe>

  lcd_send_cmd(0x40+16);
 800123e:	2050      	movs	r0, #80	; 0x50
 8001240:	f7ff f99c 	bl	800057c <lcd_send_cmd>
  for(int i = 0 ; i < 8 ; i++)
 8001244:	2300      	movs	r3, #0
 8001246:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800124a:	e00d      	b.n	8001268 <main+0x10c>
	  lcd_send_data(pac3[i]);
 800124c:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8001250:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001254:	4413      	add	r3, r2
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff f9bf 	bl	80005dc <lcd_send_data>
  for(int i = 0 ; i < 8 ; i++)
 800125e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001262:	3301      	adds	r3, #1
 8001264:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001268:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800126c:	2b07      	cmp	r3, #7
 800126e:	dded      	ble.n	800124c <main+0xf0>

  lcd_send_cmd(0x40+24);
 8001270:	2058      	movs	r0, #88	; 0x58
 8001272:	f7ff f983 	bl	800057c <lcd_send_cmd>
  for(int i = 0 ; i < 8 ; i++)
 8001276:	2300      	movs	r3, #0
 8001278:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800127c:	e00d      	b.n	800129a <main+0x13e>
	  lcd_send_data(pac4[i]);
 800127e:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001282:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001286:	4413      	add	r3, r2
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff f9a6 	bl	80005dc <lcd_send_data>
  for(int i = 0 ; i < 8 ; i++)
 8001290:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001294:	3301      	adds	r3, #1
 8001296:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800129a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800129e:	2b07      	cmp	r3, #7
 80012a0:	dded      	ble.n	800127e <main+0x122>

  lcd_send_cmd(0x40+32);
 80012a2:	2060      	movs	r0, #96	; 0x60
 80012a4:	f7ff f96a 	bl	800057c <lcd_send_cmd>
  for(int i = 0 ; i < 8 ; i++)
 80012a8:	2300      	movs	r3, #0
 80012aa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80012ae:	e00d      	b.n	80012cc <main+0x170>
	  lcd_send_data(enemy[i]);
 80012b0:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80012b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80012b8:	4413      	add	r3, r2
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff f98d 	bl	80005dc <lcd_send_data>
  for(int i = 0 ; i < 8 ; i++)
 80012c2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80012c6:	3301      	adds	r3, #1
 80012c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80012cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80012d0:	2b07      	cmp	r3, #7
 80012d2:	dded      	ble.n	80012b0 <main+0x154>
  // lcd_send_cmd()를 사용하여 DDRAM 주소를 설정
  // lcd_send_data()를 사용하여 데이터 출력하면 LCD 화면에 그래픽이 표시된다.


  // 시작 화면
  lcd_put_cur(0, 0);
 80012d4:	2100      	movs	r1, #0
 80012d6:	2000      	movs	r0, #0
 80012d8:	f7ff f9c7 	bl	800066a <lcd_put_cur>
  lcd_send_string("Press the Button");
 80012dc:	4862      	ldr	r0, [pc, #392]	; (8001468 <main+0x30c>)
 80012de:	f7ff fa20 	bl	8000722 <lcd_send_string>

  lcd_put_cur(1, 4);
 80012e2:	2104      	movs	r1, #4
 80012e4:	2001      	movs	r0, #1
 80012e6:	f7ff f9c0 	bl	800066a <lcd_put_cur>
  lcd_send_string("to Start");
 80012ea:	4860      	ldr	r0, [pc, #384]	; (800146c <main+0x310>)
 80012ec:	f7ff fa19 	bl	8000722 <lcd_send_string>


  // 시작 버튼 누를 때까지 대기
  while(HAL_GPIO_ReadPin(Joystick_Button_GPIO_Port, Joystick_Button_Pin))
 80012f0:	e002      	b.n	80012f8 <main+0x19c>
	  HAL_Delay(100); // 눌리면, 100ms 뒤 시작
 80012f2:	2064      	movs	r0, #100	; 0x64
 80012f4:	f000 fcb6 	bl	8001c64 <HAL_Delay>
  while(HAL_GPIO_ReadPin(Joystick_Button_GPIO_Port, Joystick_Button_Pin))
 80012f8:	2102      	movs	r1, #2
 80012fa:	485d      	ldr	r0, [pc, #372]	; (8001470 <main+0x314>)
 80012fc:	f001 fede 	bl	80030bc <HAL_GPIO_ReadPin>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d1f5      	bne.n	80012f2 <main+0x196>

  HAL_TIM_Base_Start_IT(&htim2); // TIM2를 인터럽트로 사용
 8001306:	485b      	ldr	r0, [pc, #364]	; (8001474 <main+0x318>)
 8001308:	f003 f83e 	bl	8004388 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // Sound를 위한 PWM
 800130c:	2100      	movs	r1, #0
 800130e:	485a      	ldr	r0, [pc, #360]	; (8001478 <main+0x31c>)
 8001310:	f003 f8ec 	bl	80044ec <HAL_TIM_PWM_Start>

  StartSound();
 8001314:	f7ff fe60 	bl	8000fd8 <StartSound>

  lcd_clear();
 8001318:	f7ff f990 	bl	800063c <lcd_clear>
  lcd_put_cur(0, 1);
 800131c:	2101      	movs	r1, #1
 800131e:	2000      	movs	r0, #0
 8001320:	f7ff f9a3 	bl	800066a <lcd_put_cur>
  lcd_send_string("LEVEL 1");
 8001324:	4855      	ldr	r0, [pc, #340]	; (800147c <main+0x320>)
 8001326:	f7ff f9fc 	bl	8000722 <lcd_send_string>
  HAL_Delay(500);
 800132a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800132e:	f000 fc99 	bl	8001c64 <HAL_Delay>

  lcd_put_cur(1, 9);
 8001332:	2109      	movs	r1, #9
 8001334:	2001      	movs	r0, #1
 8001336:	f7ff f998 	bl	800066a <lcd_put_cur>
  lcd_send_string("Start!");
 800133a:	4851      	ldr	r0, [pc, #324]	; (8001480 <main+0x324>)
 800133c:	f7ff f9f1 	bl	8000722 <lcd_send_string>
  HAL_Delay(800);
 8001340:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001344:	f000 fc8e 	bl	8001c64 <HAL_Delay>


  // Pacman Init
  Character pacman;
  memset(&pacman, 0, sizeof(pacman)); // pacman 구조체를 0으로 초기화한다(모든 멤버 변수를 0으로 설정)
 8001348:	f107 0314 	add.w	r3, r7, #20
 800134c:	2290      	movs	r2, #144	; 0x90
 800134e:	2100      	movs	r1, #0
 8001350:	4618      	mov	r0, r3
 8001352:	f004 fb76 	bl	8005a42 <memset>
  pacman.food = 31;
 8001356:	231f      	movs	r3, #31
 8001358:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0

  // Enemy Init
  Enemy octopus;
  memset(&octopus, 0, sizeof(octopus)); // octopus 구조체를 0으로 초기화한다(모든 멤버 변수를 0으로 설정)
 800135c:	1d3b      	adds	r3, r7, #4
 800135e:	2210      	movs	r2, #16
 8001360:	2100      	movs	r1, #0
 8001362:	4618      	mov	r0, r3
 8001364:	f004 fb6d 	bl	8005a42 <memset>
  octopus.image_num = 4;
 8001368:	2304      	movs	r3, #4
 800136a:	60fb      	str	r3, [r7, #12]
  octopus.row = 1; // 처음 시작 위치
 800136c:	2301      	movs	r3, #1
 800136e:	607b      	str	r3, [r7, #4]
  octopus.col = 8;
 8001370:	2308      	movs	r3, #8
 8001372:	60bb      	str	r3, [r7, #8]


  lcd_clear();
 8001374:	f7ff f962 	bl	800063c <lcd_clear>
  lcd_put_cur(pacman.row, pacman.col);
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	4611      	mov	r1, r2
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff f973 	bl	800066a <lcd_put_cur>
  lcd_send_data(pacman.image_num);
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	b2db      	uxtb	r3, r3
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff f927 	bl	80005dc <lcd_send_data>
  TIM2->PSC = 8000; // 문어 속도를 좀 더 빠르게 설정
 800138e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001392:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001396:	629a      	str	r2, [r3, #40]	; 0x28
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if(game_status == ING)
 8001398:	4b3a      	ldr	r3, [pc, #232]	; (8001484 <main+0x328>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d135      	bne.n	800140c <main+0x2b0>
	{
		Move_Pacman(&pacman, Dir_Joystick());
 80013a0:	f7ff fbbc 	bl	8000b1c <Dir_Joystick>
 80013a4:	4603      	mov	r3, r0
 80013a6:	461a      	mov	r2, r3
 80013a8:	f107 0314 	add.w	r3, r7, #20
 80013ac:	4611      	mov	r1, r2
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff fbdc 	bl	8000b6c <Move_Pacman>
		Move_Enemy(&octopus, pacman, clk_pulse);
 80013b4:	4b34      	ldr	r3, [pc, #208]	; (8001488 <main+0x32c>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	1d3c      	adds	r4, r7, #4
 80013ba:	9321      	str	r3, [sp, #132]	; 0x84
 80013bc:	4668      	mov	r0, sp
 80013be:	f107 0320 	add.w	r3, r7, #32
 80013c2:	2284      	movs	r2, #132	; 0x84
 80013c4:	4619      	mov	r1, r3
 80013c6:	f004 fbb7 	bl	8005b38 <memcpy>
 80013ca:	f107 0314 	add.w	r3, r7, #20
 80013ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013d0:	4620      	mov	r0, r4
 80013d2:	f7ff fc95 	bl	8000d00 <Move_Enemy>
		LCD_Display_Charactor(&pacman);
 80013d6:	f107 0314 	add.w	r3, r7, #20
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff fc3e 	bl	8000c5c <LCD_Display_Charactor>
		LCD_Display_Enemy(octopus);
 80013e0:	1d3b      	adds	r3, r7, #4
 80013e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013e4:	f7ff fce3 	bl	8000dae <LCD_Display_Enemy>

		game_status = GameStatus(&pacman, &octopus);
 80013e8:	1d3a      	adds	r2, r7, #4
 80013ea:	f107 0314 	add.w	r3, r7, #20
 80013ee:	4611      	mov	r1, r2
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff fcf1 	bl	8000dd8 <GameStatus>
 80013f6:	4603      	mov	r3, r0
 80013f8:	461a      	mov	r2, r3
 80013fa:	4b22      	ldr	r3, [pc, #136]	; (8001484 <main+0x328>)
 80013fc:	701a      	strb	r2, [r3, #0]

//		HAL_Delay(100);
		HAL_Delay(130);
 80013fe:	2082      	movs	r0, #130	; 0x82
 8001400:	f000 fc30 	bl	8001c64 <HAL_Delay>
		TIM3->CCR1 = 0;
 8001404:	4b21      	ldr	r3, [pc, #132]	; (800148c <main+0x330>)
 8001406:	2200      	movs	r2, #0
 8001408:	635a      	str	r2, [r3, #52]	; 0x34
 800140a:	e7c5      	b.n	8001398 <main+0x23c>
	}
	else if(game_status == WIN)
 800140c:	4b1d      	ldr	r3, [pc, #116]	; (8001484 <main+0x328>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	2b01      	cmp	r3, #1
 8001412:	d10e      	bne.n	8001432 <main+0x2d6>
	{
		lcd_put_cur(0, 4);
 8001414:	2104      	movs	r1, #4
 8001416:	2000      	movs	r0, #0
 8001418:	f7ff f927 	bl	800066a <lcd_put_cur>
		lcd_send_string("YOU WIN");
 800141c:	481c      	ldr	r0, [pc, #112]	; (8001490 <main+0x334>)
 800141e:	f7ff f980 	bl	8000722 <lcd_send_string>
		lcd_put_cur(1, 0);
 8001422:	2100      	movs	r1, #0
 8001424:	2001      	movs	r0, #1
 8001426:	f7ff f920 	bl	800066a <lcd_put_cur>
		lcd_send_string("Congratulations!");
 800142a:	481a      	ldr	r0, [pc, #104]	; (8001494 <main+0x338>)
 800142c:	f7ff f979 	bl	8000722 <lcd_send_string>
 8001430:	e7b2      	b.n	8001398 <main+0x23c>
	}
	else if(game_status == OVER)
 8001432:	4b14      	ldr	r3, [pc, #80]	; (8001484 <main+0x328>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	2b02      	cmp	r3, #2
 8001438:	d1ae      	bne.n	8001398 <main+0x23c>
	{
		lcd_put_cur(0, 4);
 800143a:	2104      	movs	r1, #4
 800143c:	2000      	movs	r0, #0
 800143e:	f7ff f914 	bl	800066a <lcd_put_cur>
		lcd_send_string("YOU LOSE");
 8001442:	4815      	ldr	r0, [pc, #84]	; (8001498 <main+0x33c>)
 8001444:	f7ff f96d 	bl	8000722 <lcd_send_string>
	if(game_status == ING)
 8001448:	e7a6      	b.n	8001398 <main+0x23c>
 800144a:	bf00      	nop
 800144c:	20000188 	.word	0x20000188
 8001450:	20000088 	.word	0x20000088
 8001454:	08006820 	.word	0x08006820
 8001458:	08006828 	.word	0x08006828
 800145c:	08006830 	.word	0x08006830
 8001460:	08006838 	.word	0x08006838
 8001464:	08006840 	.word	0x08006840
 8001468:	080067d0 	.word	0x080067d0
 800146c:	080067e4 	.word	0x080067e4
 8001470:	40020800 	.word	0x40020800
 8001474:	20000198 	.word	0x20000198
 8001478:	200001e0 	.word	0x200001e0
 800147c:	080067f0 	.word	0x080067f0
 8001480:	080067c0 	.word	0x080067c0
 8001484:	20000184 	.word	0x20000184
 8001488:	20000190 	.word	0x20000190
 800148c:	40000400 	.word	0x40000400
 8001490:	080067f8 	.word	0x080067f8
 8001494:	08006800 	.word	0x08006800
 8001498:	08006814 	.word	0x08006814

0800149c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b094      	sub	sp, #80	; 0x50
 80014a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014a2:	f107 0320 	add.w	r3, r7, #32
 80014a6:	2230      	movs	r2, #48	; 0x30
 80014a8:	2100      	movs	r1, #0
 80014aa:	4618      	mov	r0, r3
 80014ac:	f004 fac9 	bl	8005a42 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014b0:	f107 030c 	add.w	r3, r7, #12
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]
 80014be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014c0:	2300      	movs	r3, #0
 80014c2:	60bb      	str	r3, [r7, #8]
 80014c4:	4b27      	ldr	r3, [pc, #156]	; (8001564 <SystemClock_Config+0xc8>)
 80014c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c8:	4a26      	ldr	r2, [pc, #152]	; (8001564 <SystemClock_Config+0xc8>)
 80014ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ce:	6413      	str	r3, [r2, #64]	; 0x40
 80014d0:	4b24      	ldr	r3, [pc, #144]	; (8001564 <SystemClock_Config+0xc8>)
 80014d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d8:	60bb      	str	r3, [r7, #8]
 80014da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014dc:	2300      	movs	r3, #0
 80014de:	607b      	str	r3, [r7, #4]
 80014e0:	4b21      	ldr	r3, [pc, #132]	; (8001568 <SystemClock_Config+0xcc>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a20      	ldr	r2, [pc, #128]	; (8001568 <SystemClock_Config+0xcc>)
 80014e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014ea:	6013      	str	r3, [r2, #0]
 80014ec:	4b1e      	ldr	r3, [pc, #120]	; (8001568 <SystemClock_Config+0xcc>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014f4:	607b      	str	r3, [r7, #4]
 80014f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014f8:	2301      	movs	r3, #1
 80014fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001500:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001502:	2302      	movs	r3, #2
 8001504:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001506:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800150a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800150c:	2304      	movs	r3, #4
 800150e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001510:	2364      	movs	r3, #100	; 0x64
 8001512:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001514:	2302      	movs	r3, #2
 8001516:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001518:	2304      	movs	r3, #4
 800151a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800151c:	f107 0320 	add.w	r3, r7, #32
 8001520:	4618      	mov	r0, r3
 8001522:	f002 fa49 	bl	80039b8 <HAL_RCC_OscConfig>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800152c:	f000 f81e 	bl	800156c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001530:	230f      	movs	r3, #15
 8001532:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001534:	2302      	movs	r3, #2
 8001536:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001538:	2300      	movs	r3, #0
 800153a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800153c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001540:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001542:	2300      	movs	r3, #0
 8001544:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001546:	f107 030c 	add.w	r3, r7, #12
 800154a:	2103      	movs	r1, #3
 800154c:	4618      	mov	r0, r3
 800154e:	f002 fcab 	bl	8003ea8 <HAL_RCC_ClockConfig>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001558:	f000 f808 	bl	800156c <Error_Handler>
  }
}
 800155c:	bf00      	nop
 800155e:	3750      	adds	r7, #80	; 0x50
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40023800 	.word	0x40023800
 8001568:	40007000 	.word	0x40007000

0800156c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001570:	b672      	cpsid	i
}
 8001572:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001574:	e7fe      	b.n	8001574 <Error_Handler+0x8>
	...

08001578 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	607b      	str	r3, [r7, #4]
 8001582:	4b10      	ldr	r3, [pc, #64]	; (80015c4 <HAL_MspInit+0x4c>)
 8001584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001586:	4a0f      	ldr	r2, [pc, #60]	; (80015c4 <HAL_MspInit+0x4c>)
 8001588:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800158c:	6453      	str	r3, [r2, #68]	; 0x44
 800158e:	4b0d      	ldr	r3, [pc, #52]	; (80015c4 <HAL_MspInit+0x4c>)
 8001590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001592:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001596:	607b      	str	r3, [r7, #4]
 8001598:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	603b      	str	r3, [r7, #0]
 800159e:	4b09      	ldr	r3, [pc, #36]	; (80015c4 <HAL_MspInit+0x4c>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	4a08      	ldr	r2, [pc, #32]	; (80015c4 <HAL_MspInit+0x4c>)
 80015a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a8:	6413      	str	r3, [r2, #64]	; 0x40
 80015aa:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <HAL_MspInit+0x4c>)
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b2:	603b      	str	r3, [r7, #0]
 80015b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015b6:	bf00      	nop
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	40023800 	.word	0x40023800

080015c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015cc:	e7fe      	b.n	80015cc <NMI_Handler+0x4>

080015ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ce:	b480      	push	{r7}
 80015d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015d2:	e7fe      	b.n	80015d2 <HardFault_Handler+0x4>

080015d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015d8:	e7fe      	b.n	80015d8 <MemManage_Handler+0x4>

080015da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015da:	b480      	push	{r7}
 80015dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015de:	e7fe      	b.n	80015de <BusFault_Handler+0x4>

080015e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015e4:	e7fe      	b.n	80015e4 <UsageFault_Handler+0x4>

080015e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015e6:	b480      	push	{r7}
 80015e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr

08001602 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001602:	b480      	push	{r7}
 8001604:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001614:	f000 fb06 	bl	8001c24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001618:	bf00      	nop
 800161a:	bd80      	pop	{r7, pc}

0800161c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001620:	4802      	ldr	r0, [pc, #8]	; (800162c <TIM2_IRQHandler+0x10>)
 8001622:	f003 f813 	bl	800464c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20000198 	.word	0x20000198

08001630 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001634:	4802      	ldr	r0, [pc, #8]	; (8001640 <DMA2_Stream0_IRQHandler+0x10>)
 8001636:	f001 f953 	bl	80028e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	200000d0 	.word	0x200000d0

08001644 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  return 1;
 8001648:	2301      	movs	r3, #1
}
 800164a:	4618      	mov	r0, r3
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <_kill>:

int _kill(int pid, int sig)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800165e:	f004 fa3f 	bl	8005ae0 <__errno>
 8001662:	4603      	mov	r3, r0
 8001664:	2216      	movs	r2, #22
 8001666:	601a      	str	r2, [r3, #0]
  return -1;
 8001668:	f04f 33ff 	mov.w	r3, #4294967295
}
 800166c:	4618      	mov	r0, r3
 800166e:	3708      	adds	r7, #8
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}

08001674 <_exit>:

void _exit (int status)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800167c:	f04f 31ff 	mov.w	r1, #4294967295
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f7ff ffe7 	bl	8001654 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001686:	e7fe      	b.n	8001686 <_exit+0x12>

08001688 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001694:	2300      	movs	r3, #0
 8001696:	617b      	str	r3, [r7, #20]
 8001698:	e00a      	b.n	80016b0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800169a:	f3af 8000 	nop.w
 800169e:	4601      	mov	r1, r0
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	1c5a      	adds	r2, r3, #1
 80016a4:	60ba      	str	r2, [r7, #8]
 80016a6:	b2ca      	uxtb	r2, r1
 80016a8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	3301      	adds	r3, #1
 80016ae:	617b      	str	r3, [r7, #20]
 80016b0:	697a      	ldr	r2, [r7, #20]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	dbf0      	blt.n	800169a <_read+0x12>
  }

  return len;
 80016b8:	687b      	ldr	r3, [r7, #4]
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3718      	adds	r7, #24
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b086      	sub	sp, #24
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	60f8      	str	r0, [r7, #12]
 80016ca:	60b9      	str	r1, [r7, #8]
 80016cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ce:	2300      	movs	r3, #0
 80016d0:	617b      	str	r3, [r7, #20]
 80016d2:	e009      	b.n	80016e8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	1c5a      	adds	r2, r3, #1
 80016d8:	60ba      	str	r2, [r7, #8]
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	4618      	mov	r0, r3
 80016de:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	3301      	adds	r3, #1
 80016e6:	617b      	str	r3, [r7, #20]
 80016e8:	697a      	ldr	r2, [r7, #20]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	dbf1      	blt.n	80016d4 <_write+0x12>
  }
  return len;
 80016f0:	687b      	ldr	r3, [r7, #4]
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3718      	adds	r7, #24
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <_close>:

int _close(int file)
{
 80016fa:	b480      	push	{r7}
 80016fc:	b083      	sub	sp, #12
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001702:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001706:	4618      	mov	r0, r3
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr

08001712 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001712:	b480      	push	{r7}
 8001714:	b083      	sub	sp, #12
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
 800171a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001722:	605a      	str	r2, [r3, #4]
  return 0;
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr

08001732 <_isatty>:

int _isatty(int file)
{
 8001732:	b480      	push	{r7}
 8001734:	b083      	sub	sp, #12
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800173a:	2301      	movs	r3, #1
}
 800173c:	4618      	mov	r0, r3
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001748:	b480      	push	{r7}
 800174a:	b085      	sub	sp, #20
 800174c:	af00      	add	r7, sp, #0
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	60b9      	str	r1, [r7, #8]
 8001752:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001754:	2300      	movs	r3, #0
}
 8001756:	4618      	mov	r0, r3
 8001758:	3714      	adds	r7, #20
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
	...

08001764 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800176c:	4a14      	ldr	r2, [pc, #80]	; (80017c0 <_sbrk+0x5c>)
 800176e:	4b15      	ldr	r3, [pc, #84]	; (80017c4 <_sbrk+0x60>)
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001778:	4b13      	ldr	r3, [pc, #76]	; (80017c8 <_sbrk+0x64>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d102      	bne.n	8001786 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001780:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <_sbrk+0x64>)
 8001782:	4a12      	ldr	r2, [pc, #72]	; (80017cc <_sbrk+0x68>)
 8001784:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001786:	4b10      	ldr	r3, [pc, #64]	; (80017c8 <_sbrk+0x64>)
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4413      	add	r3, r2
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	429a      	cmp	r2, r3
 8001792:	d207      	bcs.n	80017a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001794:	f004 f9a4 	bl	8005ae0 <__errno>
 8001798:	4603      	mov	r3, r0
 800179a:	220c      	movs	r2, #12
 800179c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800179e:	f04f 33ff 	mov.w	r3, #4294967295
 80017a2:	e009      	b.n	80017b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017a4:	4b08      	ldr	r3, [pc, #32]	; (80017c8 <_sbrk+0x64>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017aa:	4b07      	ldr	r3, [pc, #28]	; (80017c8 <_sbrk+0x64>)
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4413      	add	r3, r2
 80017b2:	4a05      	ldr	r2, [pc, #20]	; (80017c8 <_sbrk+0x64>)
 80017b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017b6:	68fb      	ldr	r3, [r7, #12]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3718      	adds	r7, #24
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	20020000 	.word	0x20020000
 80017c4:	00000400 	.word	0x00000400
 80017c8:	20000194 	.word	0x20000194
 80017cc:	200003c0 	.word	0x200003c0

080017d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017d4:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <SystemInit+0x20>)
 80017d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017da:	4a05      	ldr	r2, [pc, #20]	; (80017f0 <SystemInit+0x20>)
 80017dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017e4:	bf00      	nop
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	e000ed00 	.word	0xe000ed00

080017f4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017fa:	f107 0308 	add.w	r3, r7, #8
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	605a      	str	r2, [r3, #4]
 8001804:	609a      	str	r2, [r3, #8]
 8001806:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001808:	463b      	mov	r3, r7
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001810:	4b1e      	ldr	r3, [pc, #120]	; (800188c <MX_TIM2_Init+0x98>)
 8001812:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001816:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10000-1;
 8001818:	4b1c      	ldr	r3, [pc, #112]	; (800188c <MX_TIM2_Init+0x98>)
 800181a:	f242 720f 	movw	r2, #9999	; 0x270f
 800181e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001820:	4b1a      	ldr	r3, [pc, #104]	; (800188c <MX_TIM2_Init+0x98>)
 8001822:	2200      	movs	r2, #0
 8001824:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8001826:	4b19      	ldr	r3, [pc, #100]	; (800188c <MX_TIM2_Init+0x98>)
 8001828:	f242 720f 	movw	r2, #9999	; 0x270f
 800182c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800182e:	4b17      	ldr	r3, [pc, #92]	; (800188c <MX_TIM2_Init+0x98>)
 8001830:	2200      	movs	r2, #0
 8001832:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001834:	4b15      	ldr	r3, [pc, #84]	; (800188c <MX_TIM2_Init+0x98>)
 8001836:	2200      	movs	r2, #0
 8001838:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800183a:	4814      	ldr	r0, [pc, #80]	; (800188c <MX_TIM2_Init+0x98>)
 800183c:	f002 fd54 	bl	80042e8 <HAL_TIM_Base_Init>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001846:	f7ff fe91 	bl	800156c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800184a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800184e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001850:	f107 0308 	add.w	r3, r7, #8
 8001854:	4619      	mov	r1, r3
 8001856:	480d      	ldr	r0, [pc, #52]	; (800188c <MX_TIM2_Init+0x98>)
 8001858:	f003 f8c2 	bl	80049e0 <HAL_TIM_ConfigClockSource>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001862:	f7ff fe83 	bl	800156c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001866:	2300      	movs	r3, #0
 8001868:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800186a:	2300      	movs	r3, #0
 800186c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800186e:	463b      	mov	r3, r7
 8001870:	4619      	mov	r1, r3
 8001872:	4806      	ldr	r0, [pc, #24]	; (800188c <MX_TIM2_Init+0x98>)
 8001874:	f003 fc70 	bl	8005158 <HAL_TIMEx_MasterConfigSynchronization>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800187e:	f7ff fe75 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001882:	bf00      	nop
 8001884:	3718      	adds	r7, #24
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	20000198 	.word	0x20000198

08001890 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b08a      	sub	sp, #40	; 0x28
 8001894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001896:	f107 0320 	add.w	r3, r7, #32
 800189a:	2200      	movs	r2, #0
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018a0:	1d3b      	adds	r3, r7, #4
 80018a2:	2200      	movs	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	605a      	str	r2, [r3, #4]
 80018a8:	609a      	str	r2, [r3, #8]
 80018aa:	60da      	str	r2, [r3, #12]
 80018ac:	611a      	str	r2, [r3, #16]
 80018ae:	615a      	str	r2, [r3, #20]
 80018b0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80018b2:	4b22      	ldr	r3, [pc, #136]	; (800193c <MX_TIM3_Init+0xac>)
 80018b4:	4a22      	ldr	r2, [pc, #136]	; (8001940 <MX_TIM3_Init+0xb0>)
 80018b6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 230-1;
 80018b8:	4b20      	ldr	r3, [pc, #128]	; (800193c <MX_TIM3_Init+0xac>)
 80018ba:	22e5      	movs	r2, #229	; 0xe5
 80018bc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018be:	4b1f      	ldr	r3, [pc, #124]	; (800193c <MX_TIM3_Init+0xac>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80018c4:	4b1d      	ldr	r3, [pc, #116]	; (800193c <MX_TIM3_Init+0xac>)
 80018c6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018ca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018cc:	4b1b      	ldr	r3, [pc, #108]	; (800193c <MX_TIM3_Init+0xac>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018d2:	4b1a      	ldr	r3, [pc, #104]	; (800193c <MX_TIM3_Init+0xac>)
 80018d4:	2280      	movs	r2, #128	; 0x80
 80018d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80018d8:	4818      	ldr	r0, [pc, #96]	; (800193c <MX_TIM3_Init+0xac>)
 80018da:	f002 fdb7 	bl	800444c <HAL_TIM_PWM_Init>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80018e4:	f7ff fe42 	bl	800156c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018e8:	2300      	movs	r3, #0
 80018ea:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ec:	2300      	movs	r3, #0
 80018ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018f0:	f107 0320 	add.w	r3, r7, #32
 80018f4:	4619      	mov	r1, r3
 80018f6:	4811      	ldr	r0, [pc, #68]	; (800193c <MX_TIM3_Init+0xac>)
 80018f8:	f003 fc2e 	bl	8005158 <HAL_TIMEx_MasterConfigSynchronization>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001902:	f7ff fe33 	bl	800156c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001906:	2360      	movs	r3, #96	; 0x60
 8001908:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800190a:	2300      	movs	r3, #0
 800190c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800190e:	2300      	movs	r3, #0
 8001910:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001912:	2300      	movs	r3, #0
 8001914:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001916:	1d3b      	adds	r3, r7, #4
 8001918:	2200      	movs	r2, #0
 800191a:	4619      	mov	r1, r3
 800191c:	4807      	ldr	r0, [pc, #28]	; (800193c <MX_TIM3_Init+0xac>)
 800191e:	f002 ff9d 	bl	800485c <HAL_TIM_PWM_ConfigChannel>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001928:	f7ff fe20 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800192c:	4803      	ldr	r0, [pc, #12]	; (800193c <MX_TIM3_Init+0xac>)
 800192e:	f000 f851 	bl	80019d4 <HAL_TIM_MspPostInit>

}
 8001932:	bf00      	nop
 8001934:	3728      	adds	r7, #40	; 0x28
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	200001e0 	.word	0x200001e0
 8001940:	40000400 	.word	0x40000400

08001944 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001954:	d115      	bne.n	8001982 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	60fb      	str	r3, [r7, #12]
 800195a:	4b0c      	ldr	r3, [pc, #48]	; (800198c <HAL_TIM_Base_MspInit+0x48>)
 800195c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195e:	4a0b      	ldr	r2, [pc, #44]	; (800198c <HAL_TIM_Base_MspInit+0x48>)
 8001960:	f043 0301 	orr.w	r3, r3, #1
 8001964:	6413      	str	r3, [r2, #64]	; 0x40
 8001966:	4b09      	ldr	r3, [pc, #36]	; (800198c <HAL_TIM_Base_MspInit+0x48>)
 8001968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001972:	2200      	movs	r2, #0
 8001974:	2100      	movs	r1, #0
 8001976:	201c      	movs	r0, #28
 8001978:	f000 fe75 	bl	8002666 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800197c:	201c      	movs	r0, #28
 800197e:	f000 fe8e 	bl	800269e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001982:	bf00      	nop
 8001984:	3710      	adds	r7, #16
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	40023800 	.word	0x40023800

08001990 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a0b      	ldr	r2, [pc, #44]	; (80019cc <HAL_TIM_PWM_MspInit+0x3c>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d10d      	bne.n	80019be <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019a2:	2300      	movs	r3, #0
 80019a4:	60fb      	str	r3, [r7, #12]
 80019a6:	4b0a      	ldr	r3, [pc, #40]	; (80019d0 <HAL_TIM_PWM_MspInit+0x40>)
 80019a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019aa:	4a09      	ldr	r2, [pc, #36]	; (80019d0 <HAL_TIM_PWM_MspInit+0x40>)
 80019ac:	f043 0302 	orr.w	r3, r3, #2
 80019b0:	6413      	str	r3, [r2, #64]	; 0x40
 80019b2:	4b07      	ldr	r3, [pc, #28]	; (80019d0 <HAL_TIM_PWM_MspInit+0x40>)
 80019b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80019be:	bf00      	nop
 80019c0:	3714      	adds	r7, #20
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	40000400 	.word	0x40000400
 80019d0:	40023800 	.word	0x40023800

080019d4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b088      	sub	sp, #32
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019dc:	f107 030c 	add.w	r3, r7, #12
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	605a      	str	r2, [r3, #4]
 80019e6:	609a      	str	r2, [r3, #8]
 80019e8:	60da      	str	r2, [r3, #12]
 80019ea:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a12      	ldr	r2, [pc, #72]	; (8001a3c <HAL_TIM_MspPostInit+0x68>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d11d      	bne.n	8001a32 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f6:	2300      	movs	r3, #0
 80019f8:	60bb      	str	r3, [r7, #8]
 80019fa:	4b11      	ldr	r3, [pc, #68]	; (8001a40 <HAL_TIM_MspPostInit+0x6c>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	4a10      	ldr	r2, [pc, #64]	; (8001a40 <HAL_TIM_MspPostInit+0x6c>)
 8001a00:	f043 0301 	orr.w	r3, r3, #1
 8001a04:	6313      	str	r3, [r2, #48]	; 0x30
 8001a06:	4b0e      	ldr	r3, [pc, #56]	; (8001a40 <HAL_TIM_MspPostInit+0x6c>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	60bb      	str	r3, [r7, #8]
 8001a10:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a12:	2340      	movs	r3, #64	; 0x40
 8001a14:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a16:	2302      	movs	r3, #2
 8001a18:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a22:	2302      	movs	r3, #2
 8001a24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a26:	f107 030c 	add.w	r3, r7, #12
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4805      	ldr	r0, [pc, #20]	; (8001a44 <HAL_TIM_MspPostInit+0x70>)
 8001a2e:	f001 f9c1 	bl	8002db4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001a32:	bf00      	nop
 8001a34:	3720      	adds	r7, #32
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40000400 	.word	0x40000400
 8001a40:	40023800 	.word	0x40023800
 8001a44:	40020000 	.word	0x40020000

08001a48 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a4c:	4b11      	ldr	r3, [pc, #68]	; (8001a94 <MX_USART2_UART_Init+0x4c>)
 8001a4e:	4a12      	ldr	r2, [pc, #72]	; (8001a98 <MX_USART2_UART_Init+0x50>)
 8001a50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a52:	4b10      	ldr	r3, [pc, #64]	; (8001a94 <MX_USART2_UART_Init+0x4c>)
 8001a54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a5a:	4b0e      	ldr	r3, [pc, #56]	; (8001a94 <MX_USART2_UART_Init+0x4c>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a60:	4b0c      	ldr	r3, [pc, #48]	; (8001a94 <MX_USART2_UART_Init+0x4c>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a66:	4b0b      	ldr	r3, [pc, #44]	; (8001a94 <MX_USART2_UART_Init+0x4c>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a6c:	4b09      	ldr	r3, [pc, #36]	; (8001a94 <MX_USART2_UART_Init+0x4c>)
 8001a6e:	220c      	movs	r2, #12
 8001a70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a72:	4b08      	ldr	r3, [pc, #32]	; (8001a94 <MX_USART2_UART_Init+0x4c>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a78:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <MX_USART2_UART_Init+0x4c>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a7e:	4805      	ldr	r0, [pc, #20]	; (8001a94 <MX_USART2_UART_Init+0x4c>)
 8001a80:	f003 fbec 	bl	800525c <HAL_UART_Init>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a8a:	f7ff fd6f 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	20000228 	.word	0x20000228
 8001a98:	40004400 	.word	0x40004400

08001a9c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b08a      	sub	sp, #40	; 0x28
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa4:	f107 0314 	add.w	r3, r7, #20
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	605a      	str	r2, [r3, #4]
 8001aae:	609a      	str	r2, [r3, #8]
 8001ab0:	60da      	str	r2, [r3, #12]
 8001ab2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a19      	ldr	r2, [pc, #100]	; (8001b20 <HAL_UART_MspInit+0x84>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d12b      	bne.n	8001b16 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	613b      	str	r3, [r7, #16]
 8001ac2:	4b18      	ldr	r3, [pc, #96]	; (8001b24 <HAL_UART_MspInit+0x88>)
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac6:	4a17      	ldr	r2, [pc, #92]	; (8001b24 <HAL_UART_MspInit+0x88>)
 8001ac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001acc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ace:	4b15      	ldr	r3, [pc, #84]	; (8001b24 <HAL_UART_MspInit+0x88>)
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad6:	613b      	str	r3, [r7, #16]
 8001ad8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ada:	2300      	movs	r3, #0
 8001adc:	60fb      	str	r3, [r7, #12]
 8001ade:	4b11      	ldr	r3, [pc, #68]	; (8001b24 <HAL_UART_MspInit+0x88>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	4a10      	ldr	r2, [pc, #64]	; (8001b24 <HAL_UART_MspInit+0x88>)
 8001ae4:	f043 0301 	orr.w	r3, r3, #1
 8001ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aea:	4b0e      	ldr	r3, [pc, #56]	; (8001b24 <HAL_UART_MspInit+0x88>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001af6:	230c      	movs	r3, #12
 8001af8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001afa:	2302      	movs	r3, #2
 8001afc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afe:	2300      	movs	r3, #0
 8001b00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b02:	2303      	movs	r3, #3
 8001b04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b06:	2307      	movs	r3, #7
 8001b08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b0a:	f107 0314 	add.w	r3, r7, #20
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4805      	ldr	r0, [pc, #20]	; (8001b28 <HAL_UART_MspInit+0x8c>)
 8001b12:	f001 f94f 	bl	8002db4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001b16:	bf00      	nop
 8001b18:	3728      	adds	r7, #40	; 0x28
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40004400 	.word	0x40004400
 8001b24:	40023800 	.word	0x40023800
 8001b28:	40020000 	.word	0x40020000

08001b2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b64 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b30:	480d      	ldr	r0, [pc, #52]	; (8001b68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b32:	490e      	ldr	r1, [pc, #56]	; (8001b6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b34:	4a0e      	ldr	r2, [pc, #56]	; (8001b70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b38:	e002      	b.n	8001b40 <LoopCopyDataInit>

08001b3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b3e:	3304      	adds	r3, #4

08001b40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b44:	d3f9      	bcc.n	8001b3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b46:	4a0b      	ldr	r2, [pc, #44]	; (8001b74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b48:	4c0b      	ldr	r4, [pc, #44]	; (8001b78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b4c:	e001      	b.n	8001b52 <LoopFillZerobss>

08001b4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b50:	3204      	adds	r2, #4

08001b52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b54:	d3fb      	bcc.n	8001b4e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b56:	f7ff fe3b 	bl	80017d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b5a:	f003 ffc7 	bl	8005aec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b5e:	f7ff fafd 	bl	800115c <main>
  bx  lr    
 8001b62:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b6c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001b70:	08006958 	.word	0x08006958
  ldr r2, =_sbss
 8001b74:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001b78:	200003bc 	.word	0x200003bc

08001b7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b7c:	e7fe      	b.n	8001b7c <ADC_IRQHandler>
	...

08001b80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b84:	4b0e      	ldr	r3, [pc, #56]	; (8001bc0 <HAL_Init+0x40>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a0d      	ldr	r2, [pc, #52]	; (8001bc0 <HAL_Init+0x40>)
 8001b8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b90:	4b0b      	ldr	r3, [pc, #44]	; (8001bc0 <HAL_Init+0x40>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a0a      	ldr	r2, [pc, #40]	; (8001bc0 <HAL_Init+0x40>)
 8001b96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b9c:	4b08      	ldr	r3, [pc, #32]	; (8001bc0 <HAL_Init+0x40>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a07      	ldr	r2, [pc, #28]	; (8001bc0 <HAL_Init+0x40>)
 8001ba2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ba6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ba8:	2003      	movs	r0, #3
 8001baa:	f000 fd51 	bl	8002650 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bae:	2000      	movs	r0, #0
 8001bb0:	f000 f808 	bl	8001bc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bb4:	f7ff fce0 	bl	8001578 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40023c00 	.word	0x40023c00

08001bc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bcc:	4b12      	ldr	r3, [pc, #72]	; (8001c18 <HAL_InitTick+0x54>)
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	4b12      	ldr	r3, [pc, #72]	; (8001c1c <HAL_InitTick+0x58>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bda:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be2:	4618      	mov	r0, r3
 8001be4:	f000 fd69 	bl	80026ba <HAL_SYSTICK_Config>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e00e      	b.n	8001c10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2b0f      	cmp	r3, #15
 8001bf6:	d80a      	bhi.n	8001c0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	6879      	ldr	r1, [r7, #4]
 8001bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8001c00:	f000 fd31 	bl	8002666 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c04:	4a06      	ldr	r2, [pc, #24]	; (8001c20 <HAL_InitTick+0x5c>)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	e000      	b.n	8001c10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3708      	adds	r7, #8
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	20000004 	.word	0x20000004
 8001c1c:	2000000c 	.word	0x2000000c
 8001c20:	20000008 	.word	0x20000008

08001c24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c28:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <HAL_IncTick+0x20>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <HAL_IncTick+0x24>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4413      	add	r3, r2
 8001c34:	4a04      	ldr	r2, [pc, #16]	; (8001c48 <HAL_IncTick+0x24>)
 8001c36:	6013      	str	r3, [r2, #0]
}
 8001c38:	bf00      	nop
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	2000000c 	.word	0x2000000c
 8001c48:	2000026c 	.word	0x2000026c

08001c4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c50:	4b03      	ldr	r3, [pc, #12]	; (8001c60 <HAL_GetTick+0x14>)
 8001c52:	681b      	ldr	r3, [r3, #0]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	2000026c 	.word	0x2000026c

08001c64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c6c:	f7ff ffee 	bl	8001c4c <HAL_GetTick>
 8001c70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c7c:	d005      	beq.n	8001c8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ca8 <HAL_Delay+0x44>)
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	461a      	mov	r2, r3
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	4413      	add	r3, r2
 8001c88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c8a:	bf00      	nop
 8001c8c:	f7ff ffde 	bl	8001c4c <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	68fa      	ldr	r2, [r7, #12]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d8f7      	bhi.n	8001c8c <HAL_Delay+0x28>
  {
  }
}
 8001c9c:	bf00      	nop
 8001c9e:	bf00      	nop
 8001ca0:	3710      	adds	r7, #16
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	2000000c 	.word	0x2000000c

08001cac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d101      	bne.n	8001cc2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e033      	b.n	8001d2a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d109      	bne.n	8001cde <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f7fe fd9e 	bl	800080c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce2:	f003 0310 	and.w	r3, r3, #16
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d118      	bne.n	8001d1c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001cf2:	f023 0302 	bic.w	r3, r3, #2
 8001cf6:	f043 0202 	orr.w	r2, r3, #2
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f000 fa58 	bl	80021b4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	f023 0303 	bic.w	r3, r3, #3
 8001d12:	f043 0201 	orr.w	r2, r3, #1
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	641a      	str	r2, [r3, #64]	; 0x40
 8001d1a:	e001      	b.n	8001d20 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2200      	movs	r2, #0
 8001d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3710      	adds	r7, #16
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
	...

08001d34 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001d40:	2300      	movs	r3, #0
 8001d42:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d101      	bne.n	8001d52 <HAL_ADC_Start_DMA+0x1e>
 8001d4e:	2302      	movs	r3, #2
 8001d50:	e0ce      	b.n	8001ef0 <HAL_ADC_Start_DMA+0x1bc>
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2201      	movs	r2, #1
 8001d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f003 0301 	and.w	r3, r3, #1
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d018      	beq.n	8001d9a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	689a      	ldr	r2, [r3, #8]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f042 0201 	orr.w	r2, r2, #1
 8001d76:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d78:	4b5f      	ldr	r3, [pc, #380]	; (8001ef8 <HAL_ADC_Start_DMA+0x1c4>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a5f      	ldr	r2, [pc, #380]	; (8001efc <HAL_ADC_Start_DMA+0x1c8>)
 8001d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d82:	0c9a      	lsrs	r2, r3, #18
 8001d84:	4613      	mov	r3, r2
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	4413      	add	r3, r2
 8001d8a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001d8c:	e002      	b.n	8001d94 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	3b01      	subs	r3, #1
 8001d92:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d1f9      	bne.n	8001d8e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001da8:	d107      	bne.n	8001dba <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	689a      	ldr	r2, [r3, #8]
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001db8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	f040 8086 	bne.w	8001ed6 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dce:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001dd2:	f023 0301 	bic.w	r3, r3, #1
 8001dd6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d007      	beq.n	8001dfc <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001df4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e08:	d106      	bne.n	8001e18 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0e:	f023 0206 	bic.w	r2, r3, #6
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	645a      	str	r2, [r3, #68]	; 0x44
 8001e16:	e002      	b.n	8001e1e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e26:	4b36      	ldr	r3, [pc, #216]	; (8001f00 <HAL_ADC_Start_DMA+0x1cc>)
 8001e28:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e2e:	4a35      	ldr	r2, [pc, #212]	; (8001f04 <HAL_ADC_Start_DMA+0x1d0>)
 8001e30:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e36:	4a34      	ldr	r2, [pc, #208]	; (8001f08 <HAL_ADC_Start_DMA+0x1d4>)
 8001e38:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e3e:	4a33      	ldr	r2, [pc, #204]	; (8001f0c <HAL_ADC_Start_DMA+0x1d8>)
 8001e40:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001e4a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	685a      	ldr	r2, [r3, #4]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001e5a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	689a      	ldr	r2, [r3, #8]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e6a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	334c      	adds	r3, #76	; 0x4c
 8001e76:	4619      	mov	r1, r3
 8001e78:	68ba      	ldr	r2, [r7, #8]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f000 fcd8 	bl	8002830 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f003 031f 	and.w	r3, r3, #31
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d10f      	bne.n	8001eac <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d129      	bne.n	8001eee <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	689a      	ldr	r2, [r3, #8]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ea8:	609a      	str	r2, [r3, #8]
 8001eaa:	e020      	b.n	8001eee <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a17      	ldr	r2, [pc, #92]	; (8001f10 <HAL_ADC_Start_DMA+0x1dc>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d11b      	bne.n	8001eee <HAL_ADC_Start_DMA+0x1ba>
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d114      	bne.n	8001eee <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	689a      	ldr	r2, [r3, #8]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ed2:	609a      	str	r2, [r3, #8]
 8001ed4:	e00b      	b.n	8001eee <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eda:	f043 0210 	orr.w	r2, r3, #16
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee6:	f043 0201 	orr.w	r2, r3, #1
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001eee:	2300      	movs	r3, #0
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3718      	adds	r7, #24
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	20000004 	.word	0x20000004
 8001efc:	431bde83 	.word	0x431bde83
 8001f00:	40012300 	.word	0x40012300
 8001f04:	080023ad 	.word	0x080023ad
 8001f08:	08002467 	.word	0x08002467
 8001f0c:	08002483 	.word	0x08002483
 8001f10:	40012000 	.word	0x40012000

08001f14 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b085      	sub	sp, #20
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d101      	bne.n	8001f6c <HAL_ADC_ConfigChannel+0x1c>
 8001f68:	2302      	movs	r3, #2
 8001f6a:	e113      	b.n	8002194 <HAL_ADC_ConfigChannel+0x244>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2b09      	cmp	r3, #9
 8001f7a:	d925      	bls.n	8001fc8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	68d9      	ldr	r1, [r3, #12]
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	461a      	mov	r2, r3
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	4413      	add	r3, r2
 8001f90:	3b1e      	subs	r3, #30
 8001f92:	2207      	movs	r2, #7
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	43da      	mvns	r2, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	400a      	ands	r2, r1
 8001fa0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	68d9      	ldr	r1, [r3, #12]
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	689a      	ldr	r2, [r3, #8]
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	4403      	add	r3, r0
 8001fba:	3b1e      	subs	r3, #30
 8001fbc:	409a      	lsls	r2, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	60da      	str	r2, [r3, #12]
 8001fc6:	e022      	b.n	800200e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	6919      	ldr	r1, [r3, #16]
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	4413      	add	r3, r2
 8001fdc:	2207      	movs	r2, #7
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	43da      	mvns	r2, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	400a      	ands	r2, r1
 8001fea:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	6919      	ldr	r1, [r3, #16]
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	689a      	ldr	r2, [r3, #8]
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	4603      	mov	r3, r0
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	4403      	add	r3, r0
 8002004:	409a      	lsls	r2, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	430a      	orrs	r2, r1
 800200c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	2b06      	cmp	r3, #6
 8002014:	d824      	bhi.n	8002060 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685a      	ldr	r2, [r3, #4]
 8002020:	4613      	mov	r3, r2
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	4413      	add	r3, r2
 8002026:	3b05      	subs	r3, #5
 8002028:	221f      	movs	r2, #31
 800202a:	fa02 f303 	lsl.w	r3, r2, r3
 800202e:	43da      	mvns	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	400a      	ands	r2, r1
 8002036:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	b29b      	uxth	r3, r3
 8002044:	4618      	mov	r0, r3
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685a      	ldr	r2, [r3, #4]
 800204a:	4613      	mov	r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	4413      	add	r3, r2
 8002050:	3b05      	subs	r3, #5
 8002052:	fa00 f203 	lsl.w	r2, r0, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	430a      	orrs	r2, r1
 800205c:	635a      	str	r2, [r3, #52]	; 0x34
 800205e:	e04c      	b.n	80020fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	2b0c      	cmp	r3, #12
 8002066:	d824      	bhi.n	80020b2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685a      	ldr	r2, [r3, #4]
 8002072:	4613      	mov	r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	4413      	add	r3, r2
 8002078:	3b23      	subs	r3, #35	; 0x23
 800207a:	221f      	movs	r2, #31
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	43da      	mvns	r2, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	400a      	ands	r2, r1
 8002088:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	b29b      	uxth	r3, r3
 8002096:	4618      	mov	r0, r3
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685a      	ldr	r2, [r3, #4]
 800209c:	4613      	mov	r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	4413      	add	r3, r2
 80020a2:	3b23      	subs	r3, #35	; 0x23
 80020a4:	fa00 f203 	lsl.w	r2, r0, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	430a      	orrs	r2, r1
 80020ae:	631a      	str	r2, [r3, #48]	; 0x30
 80020b0:	e023      	b.n	80020fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685a      	ldr	r2, [r3, #4]
 80020bc:	4613      	mov	r3, r2
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	4413      	add	r3, r2
 80020c2:	3b41      	subs	r3, #65	; 0x41
 80020c4:	221f      	movs	r2, #31
 80020c6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ca:	43da      	mvns	r2, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	400a      	ands	r2, r1
 80020d2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	b29b      	uxth	r3, r3
 80020e0:	4618      	mov	r0, r3
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685a      	ldr	r2, [r3, #4]
 80020e6:	4613      	mov	r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	4413      	add	r3, r2
 80020ec:	3b41      	subs	r3, #65	; 0x41
 80020ee:	fa00 f203 	lsl.w	r2, r0, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	430a      	orrs	r2, r1
 80020f8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020fa:	4b29      	ldr	r3, [pc, #164]	; (80021a0 <HAL_ADC_ConfigChannel+0x250>)
 80020fc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a28      	ldr	r2, [pc, #160]	; (80021a4 <HAL_ADC_ConfigChannel+0x254>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d10f      	bne.n	8002128 <HAL_ADC_ConfigChannel+0x1d8>
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2b12      	cmp	r3, #18
 800210e:	d10b      	bne.n	8002128 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a1d      	ldr	r2, [pc, #116]	; (80021a4 <HAL_ADC_ConfigChannel+0x254>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d12b      	bne.n	800218a <HAL_ADC_ConfigChannel+0x23a>
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a1c      	ldr	r2, [pc, #112]	; (80021a8 <HAL_ADC_ConfigChannel+0x258>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d003      	beq.n	8002144 <HAL_ADC_ConfigChannel+0x1f4>
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2b11      	cmp	r3, #17
 8002142:	d122      	bne.n	800218a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a11      	ldr	r2, [pc, #68]	; (80021a8 <HAL_ADC_ConfigChannel+0x258>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d111      	bne.n	800218a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002166:	4b11      	ldr	r3, [pc, #68]	; (80021ac <HAL_ADC_ConfigChannel+0x25c>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a11      	ldr	r2, [pc, #68]	; (80021b0 <HAL_ADC_ConfigChannel+0x260>)
 800216c:	fba2 2303 	umull	r2, r3, r2, r3
 8002170:	0c9a      	lsrs	r2, r3, #18
 8002172:	4613      	mov	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	4413      	add	r3, r2
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800217c:	e002      	b.n	8002184 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	3b01      	subs	r3, #1
 8002182:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d1f9      	bne.n	800217e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002192:	2300      	movs	r3, #0
}
 8002194:	4618      	mov	r0, r3
 8002196:	3714      	adds	r7, #20
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr
 80021a0:	40012300 	.word	0x40012300
 80021a4:	40012000 	.word	0x40012000
 80021a8:	10000012 	.word	0x10000012
 80021ac:	20000004 	.word	0x20000004
 80021b0:	431bde83 	.word	0x431bde83

080021b4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021bc:	4b79      	ldr	r3, [pc, #484]	; (80023a4 <ADC_Init+0x1f0>)
 80021be:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	685a      	ldr	r2, [r3, #4]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	431a      	orrs	r2, r3
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	685a      	ldr	r2, [r3, #4]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	6859      	ldr	r1, [r3, #4]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	691b      	ldr	r3, [r3, #16]
 80021f4:	021a      	lsls	r2, r3, #8
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	430a      	orrs	r2, r1
 80021fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	685a      	ldr	r2, [r3, #4]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800220c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	6859      	ldr	r1, [r3, #4]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689a      	ldr	r2, [r3, #8]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	430a      	orrs	r2, r1
 800221e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	689a      	ldr	r2, [r3, #8]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800222e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	6899      	ldr	r1, [r3, #8]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	68da      	ldr	r2, [r3, #12]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	430a      	orrs	r2, r1
 8002240:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002246:	4a58      	ldr	r2, [pc, #352]	; (80023a8 <ADC_Init+0x1f4>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d022      	beq.n	8002292 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	689a      	ldr	r2, [r3, #8]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800225a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	6899      	ldr	r1, [r3, #8]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	430a      	orrs	r2, r1
 800226c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800227c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	6899      	ldr	r1, [r3, #8]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	430a      	orrs	r2, r1
 800228e:	609a      	str	r2, [r3, #8]
 8002290:	e00f      	b.n	80022b2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	689a      	ldr	r2, [r3, #8]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	689a      	ldr	r2, [r3, #8]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80022b0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	689a      	ldr	r2, [r3, #8]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f022 0202 	bic.w	r2, r2, #2
 80022c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	6899      	ldr	r1, [r3, #8]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	7e1b      	ldrb	r3, [r3, #24]
 80022cc:	005a      	lsls	r2, r3, #1
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	430a      	orrs	r2, r1
 80022d4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d01b      	beq.n	8002318 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	685a      	ldr	r2, [r3, #4]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022ee:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	685a      	ldr	r2, [r3, #4]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80022fe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6859      	ldr	r1, [r3, #4]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230a:	3b01      	subs	r3, #1
 800230c:	035a      	lsls	r2, r3, #13
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	430a      	orrs	r2, r1
 8002314:	605a      	str	r2, [r3, #4]
 8002316:	e007      	b.n	8002328 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	685a      	ldr	r2, [r3, #4]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002326:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002336:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	69db      	ldr	r3, [r3, #28]
 8002342:	3b01      	subs	r3, #1
 8002344:	051a      	lsls	r2, r3, #20
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	430a      	orrs	r2, r1
 800234c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	689a      	ldr	r2, [r3, #8]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800235c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	6899      	ldr	r1, [r3, #8]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800236a:	025a      	lsls	r2, r3, #9
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	430a      	orrs	r2, r1
 8002372:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	689a      	ldr	r2, [r3, #8]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002382:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6899      	ldr	r1, [r3, #8]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	695b      	ldr	r3, [r3, #20]
 800238e:	029a      	lsls	r2, r3, #10
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	430a      	orrs	r2, r1
 8002396:	609a      	str	r2, [r3, #8]
}
 8002398:	bf00      	nop
 800239a:	3714      	adds	r7, #20
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr
 80023a4:	40012300 	.word	0x40012300
 80023a8:	0f000001 	.word	0x0f000001

080023ac <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023be:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d13c      	bne.n	8002440 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d12b      	bne.n	8002438 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d127      	bne.n	8002438 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ee:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d006      	beq.n	8002404 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002400:	2b00      	cmp	r3, #0
 8002402:	d119      	bne.n	8002438 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	685a      	ldr	r2, [r3, #4]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f022 0220 	bic.w	r2, r2, #32
 8002412:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002418:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002424:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d105      	bne.n	8002438 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002430:	f043 0201 	orr.w	r2, r3, #1
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002438:	68f8      	ldr	r0, [r7, #12]
 800243a:	f7ff fd6b 	bl	8001f14 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800243e:	e00e      	b.n	800245e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002444:	f003 0310 	and.w	r3, r3, #16
 8002448:	2b00      	cmp	r3, #0
 800244a:	d003      	beq.n	8002454 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800244c:	68f8      	ldr	r0, [r7, #12]
 800244e:	f7ff fd75 	bl	8001f3c <HAL_ADC_ErrorCallback>
}
 8002452:	e004      	b.n	800245e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	4798      	blx	r3
}
 800245e:	bf00      	nop
 8002460:	3710      	adds	r7, #16
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b084      	sub	sp, #16
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002472:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002474:	68f8      	ldr	r0, [r7, #12]
 8002476:	f7ff fd57 	bl	8001f28 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800247a:	bf00      	nop
 800247c:	3710      	adds	r7, #16
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b084      	sub	sp, #16
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800248e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2240      	movs	r2, #64	; 0x40
 8002494:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249a:	f043 0204 	orr.w	r2, r3, #4
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80024a2:	68f8      	ldr	r0, [r7, #12]
 80024a4:	f7ff fd4a 	bl	8001f3c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80024a8:	bf00      	nop
 80024aa:	3710      	adds	r7, #16
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b085      	sub	sp, #20
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f003 0307 	and.w	r3, r3, #7
 80024be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024c0:	4b0c      	ldr	r3, [pc, #48]	; (80024f4 <__NVIC_SetPriorityGrouping+0x44>)
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024c6:	68ba      	ldr	r2, [r7, #8]
 80024c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024cc:	4013      	ands	r3, r2
 80024ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024e2:	4a04      	ldr	r2, [pc, #16]	; (80024f4 <__NVIC_SetPriorityGrouping+0x44>)
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	60d3      	str	r3, [r2, #12]
}
 80024e8:	bf00      	nop
 80024ea:	3714      	adds	r7, #20
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr
 80024f4:	e000ed00 	.word	0xe000ed00

080024f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024fc:	4b04      	ldr	r3, [pc, #16]	; (8002510 <__NVIC_GetPriorityGrouping+0x18>)
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	0a1b      	lsrs	r3, r3, #8
 8002502:	f003 0307 	and.w	r3, r3, #7
}
 8002506:	4618      	mov	r0, r3
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr
 8002510:	e000ed00 	.word	0xe000ed00

08002514 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	4603      	mov	r3, r0
 800251c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800251e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002522:	2b00      	cmp	r3, #0
 8002524:	db0b      	blt.n	800253e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002526:	79fb      	ldrb	r3, [r7, #7]
 8002528:	f003 021f 	and.w	r2, r3, #31
 800252c:	4907      	ldr	r1, [pc, #28]	; (800254c <__NVIC_EnableIRQ+0x38>)
 800252e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002532:	095b      	lsrs	r3, r3, #5
 8002534:	2001      	movs	r0, #1
 8002536:	fa00 f202 	lsl.w	r2, r0, r2
 800253a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800253e:	bf00      	nop
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	e000e100 	.word	0xe000e100

08002550 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	4603      	mov	r3, r0
 8002558:	6039      	str	r1, [r7, #0]
 800255a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800255c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002560:	2b00      	cmp	r3, #0
 8002562:	db0a      	blt.n	800257a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	b2da      	uxtb	r2, r3
 8002568:	490c      	ldr	r1, [pc, #48]	; (800259c <__NVIC_SetPriority+0x4c>)
 800256a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800256e:	0112      	lsls	r2, r2, #4
 8002570:	b2d2      	uxtb	r2, r2
 8002572:	440b      	add	r3, r1
 8002574:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002578:	e00a      	b.n	8002590 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	b2da      	uxtb	r2, r3
 800257e:	4908      	ldr	r1, [pc, #32]	; (80025a0 <__NVIC_SetPriority+0x50>)
 8002580:	79fb      	ldrb	r3, [r7, #7]
 8002582:	f003 030f 	and.w	r3, r3, #15
 8002586:	3b04      	subs	r3, #4
 8002588:	0112      	lsls	r2, r2, #4
 800258a:	b2d2      	uxtb	r2, r2
 800258c:	440b      	add	r3, r1
 800258e:	761a      	strb	r2, [r3, #24]
}
 8002590:	bf00      	nop
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr
 800259c:	e000e100 	.word	0xe000e100
 80025a0:	e000ed00 	.word	0xe000ed00

080025a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b089      	sub	sp, #36	; 0x24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f003 0307 	and.w	r3, r3, #7
 80025b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	f1c3 0307 	rsb	r3, r3, #7
 80025be:	2b04      	cmp	r3, #4
 80025c0:	bf28      	it	cs
 80025c2:	2304      	movcs	r3, #4
 80025c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	3304      	adds	r3, #4
 80025ca:	2b06      	cmp	r3, #6
 80025cc:	d902      	bls.n	80025d4 <NVIC_EncodePriority+0x30>
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	3b03      	subs	r3, #3
 80025d2:	e000      	b.n	80025d6 <NVIC_EncodePriority+0x32>
 80025d4:	2300      	movs	r3, #0
 80025d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025d8:	f04f 32ff 	mov.w	r2, #4294967295
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	fa02 f303 	lsl.w	r3, r2, r3
 80025e2:	43da      	mvns	r2, r3
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	401a      	ands	r2, r3
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025ec:	f04f 31ff 	mov.w	r1, #4294967295
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	fa01 f303 	lsl.w	r3, r1, r3
 80025f6:	43d9      	mvns	r1, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025fc:	4313      	orrs	r3, r2
         );
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3724      	adds	r7, #36	; 0x24
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
	...

0800260c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	3b01      	subs	r3, #1
 8002618:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800261c:	d301      	bcc.n	8002622 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800261e:	2301      	movs	r3, #1
 8002620:	e00f      	b.n	8002642 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002622:	4a0a      	ldr	r2, [pc, #40]	; (800264c <SysTick_Config+0x40>)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	3b01      	subs	r3, #1
 8002628:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800262a:	210f      	movs	r1, #15
 800262c:	f04f 30ff 	mov.w	r0, #4294967295
 8002630:	f7ff ff8e 	bl	8002550 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002634:	4b05      	ldr	r3, [pc, #20]	; (800264c <SysTick_Config+0x40>)
 8002636:	2200      	movs	r2, #0
 8002638:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800263a:	4b04      	ldr	r3, [pc, #16]	; (800264c <SysTick_Config+0x40>)
 800263c:	2207      	movs	r2, #7
 800263e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	e000e010 	.word	0xe000e010

08002650 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f7ff ff29 	bl	80024b0 <__NVIC_SetPriorityGrouping>
}
 800265e:	bf00      	nop
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}

08002666 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002666:	b580      	push	{r7, lr}
 8002668:	b086      	sub	sp, #24
 800266a:	af00      	add	r7, sp, #0
 800266c:	4603      	mov	r3, r0
 800266e:	60b9      	str	r1, [r7, #8]
 8002670:	607a      	str	r2, [r7, #4]
 8002672:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002674:	2300      	movs	r3, #0
 8002676:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002678:	f7ff ff3e 	bl	80024f8 <__NVIC_GetPriorityGrouping>
 800267c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	68b9      	ldr	r1, [r7, #8]
 8002682:	6978      	ldr	r0, [r7, #20]
 8002684:	f7ff ff8e 	bl	80025a4 <NVIC_EncodePriority>
 8002688:	4602      	mov	r2, r0
 800268a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800268e:	4611      	mov	r1, r2
 8002690:	4618      	mov	r0, r3
 8002692:	f7ff ff5d 	bl	8002550 <__NVIC_SetPriority>
}
 8002696:	bf00      	nop
 8002698:	3718      	adds	r7, #24
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b082      	sub	sp, #8
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	4603      	mov	r3, r0
 80026a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7ff ff31 	bl	8002514 <__NVIC_EnableIRQ>
}
 80026b2:	bf00      	nop
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}

080026ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b082      	sub	sp, #8
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f7ff ffa2 	bl	800260c <SysTick_Config>
 80026c8:	4603      	mov	r3, r0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
	...

080026d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b086      	sub	sp, #24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80026dc:	2300      	movs	r3, #0
 80026de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80026e0:	f7ff fab4 	bl	8001c4c <HAL_GetTick>
 80026e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d101      	bne.n	80026f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e099      	b.n	8002824 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2202      	movs	r2, #2
 80026f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f022 0201 	bic.w	r2, r2, #1
 800270e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002710:	e00f      	b.n	8002732 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002712:	f7ff fa9b 	bl	8001c4c <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b05      	cmp	r3, #5
 800271e:	d908      	bls.n	8002732 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2220      	movs	r2, #32
 8002724:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2203      	movs	r2, #3
 800272a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e078      	b.n	8002824 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0301 	and.w	r3, r3, #1
 800273c:	2b00      	cmp	r3, #0
 800273e:	d1e8      	bne.n	8002712 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002748:	697a      	ldr	r2, [r7, #20]
 800274a:	4b38      	ldr	r3, [pc, #224]	; (800282c <HAL_DMA_Init+0x158>)
 800274c:	4013      	ands	r3, r2
 800274e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685a      	ldr	r2, [r3, #4]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800275e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	691b      	ldr	r3, [r3, #16]
 8002764:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800276a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002776:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a1b      	ldr	r3, [r3, #32]
 800277c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800277e:	697a      	ldr	r2, [r7, #20]
 8002780:	4313      	orrs	r3, r2
 8002782:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002788:	2b04      	cmp	r3, #4
 800278a:	d107      	bne.n	800279c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002794:	4313      	orrs	r3, r2
 8002796:	697a      	ldr	r2, [r7, #20]
 8002798:	4313      	orrs	r3, r2
 800279a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	697a      	ldr	r2, [r7, #20]
 80027a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	695b      	ldr	r3, [r3, #20]
 80027aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	f023 0307 	bic.w	r3, r3, #7
 80027b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b8:	697a      	ldr	r2, [r7, #20]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c2:	2b04      	cmp	r3, #4
 80027c4:	d117      	bne.n	80027f6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ca:	697a      	ldr	r2, [r7, #20]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d00e      	beq.n	80027f6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f000 fa6f 	bl	8002cbc <DMA_CheckFifoParam>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d008      	beq.n	80027f6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2240      	movs	r2, #64	; 0x40
 80027e8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2201      	movs	r2, #1
 80027ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80027f2:	2301      	movs	r3, #1
 80027f4:	e016      	b.n	8002824 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	697a      	ldr	r2, [r7, #20]
 80027fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 fa26 	bl	8002c50 <DMA_CalcBaseAndBitshift>
 8002804:	4603      	mov	r3, r0
 8002806:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800280c:	223f      	movs	r2, #63	; 0x3f
 800280e:	409a      	lsls	r2, r3
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2201      	movs	r2, #1
 800281e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002822:	2300      	movs	r3, #0
}
 8002824:	4618      	mov	r0, r3
 8002826:	3718      	adds	r7, #24
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	f010803f 	.word	0xf010803f

08002830 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b086      	sub	sp, #24
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	607a      	str	r2, [r7, #4]
 800283c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800283e:	2300      	movs	r3, #0
 8002840:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002846:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800284e:	2b01      	cmp	r3, #1
 8002850:	d101      	bne.n	8002856 <HAL_DMA_Start_IT+0x26>
 8002852:	2302      	movs	r3, #2
 8002854:	e040      	b.n	80028d8 <HAL_DMA_Start_IT+0xa8>
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2201      	movs	r2, #1
 800285a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b01      	cmp	r3, #1
 8002868:	d12f      	bne.n	80028ca <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2202      	movs	r2, #2
 800286e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2200      	movs	r2, #0
 8002876:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	68b9      	ldr	r1, [r7, #8]
 800287e:	68f8      	ldr	r0, [r7, #12]
 8002880:	f000 f9b8 	bl	8002bf4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002888:	223f      	movs	r2, #63	; 0x3f
 800288a:	409a      	lsls	r2, r3
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f042 0216 	orr.w	r2, r2, #22
 800289e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d007      	beq.n	80028b8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f042 0208 	orr.w	r2, r2, #8
 80028b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f042 0201 	orr.w	r2, r2, #1
 80028c6:	601a      	str	r2, [r3, #0]
 80028c8:	e005      	b.n	80028d6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80028d2:	2302      	movs	r3, #2
 80028d4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80028d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3718      	adds	r7, #24
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b086      	sub	sp, #24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80028e8:	2300      	movs	r3, #0
 80028ea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80028ec:	4b8e      	ldr	r3, [pc, #568]	; (8002b28 <HAL_DMA_IRQHandler+0x248>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a8e      	ldr	r2, [pc, #568]	; (8002b2c <HAL_DMA_IRQHandler+0x24c>)
 80028f2:	fba2 2303 	umull	r2, r3, r2, r3
 80028f6:	0a9b      	lsrs	r3, r3, #10
 80028f8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028fe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800290a:	2208      	movs	r2, #8
 800290c:	409a      	lsls	r2, r3
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	4013      	ands	r3, r2
 8002912:	2b00      	cmp	r3, #0
 8002914:	d01a      	beq.n	800294c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0304 	and.w	r3, r3, #4
 8002920:	2b00      	cmp	r3, #0
 8002922:	d013      	beq.n	800294c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f022 0204 	bic.w	r2, r2, #4
 8002932:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002938:	2208      	movs	r2, #8
 800293a:	409a      	lsls	r2, r3
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002944:	f043 0201 	orr.w	r2, r3, #1
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002950:	2201      	movs	r2, #1
 8002952:	409a      	lsls	r2, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	4013      	ands	r3, r2
 8002958:	2b00      	cmp	r3, #0
 800295a:	d012      	beq.n	8002982 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	695b      	ldr	r3, [r3, #20]
 8002962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002966:	2b00      	cmp	r3, #0
 8002968:	d00b      	beq.n	8002982 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800296e:	2201      	movs	r2, #1
 8002970:	409a      	lsls	r2, r3
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800297a:	f043 0202 	orr.w	r2, r3, #2
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002986:	2204      	movs	r2, #4
 8002988:	409a      	lsls	r2, r3
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	4013      	ands	r3, r2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d012      	beq.n	80029b8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0302 	and.w	r3, r3, #2
 800299c:	2b00      	cmp	r3, #0
 800299e:	d00b      	beq.n	80029b8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a4:	2204      	movs	r2, #4
 80029a6:	409a      	lsls	r2, r3
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b0:	f043 0204 	orr.w	r2, r3, #4
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029bc:	2210      	movs	r2, #16
 80029be:	409a      	lsls	r2, r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	4013      	ands	r3, r2
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d043      	beq.n	8002a50 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0308 	and.w	r3, r3, #8
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d03c      	beq.n	8002a50 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029da:	2210      	movs	r2, #16
 80029dc:	409a      	lsls	r2, r3
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d018      	beq.n	8002a22 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d108      	bne.n	8002a10 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d024      	beq.n	8002a50 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	4798      	blx	r3
 8002a0e:	e01f      	b.n	8002a50 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d01b      	beq.n	8002a50 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	4798      	blx	r3
 8002a20:	e016      	b.n	8002a50 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d107      	bne.n	8002a40 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f022 0208 	bic.w	r2, r2, #8
 8002a3e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d003      	beq.n	8002a50 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a54:	2220      	movs	r2, #32
 8002a56:	409a      	lsls	r2, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	f000 808f 	beq.w	8002b80 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0310 	and.w	r3, r3, #16
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	f000 8087 	beq.w	8002b80 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a76:	2220      	movs	r2, #32
 8002a78:	409a      	lsls	r2, r3
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2b05      	cmp	r3, #5
 8002a88:	d136      	bne.n	8002af8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f022 0216 	bic.w	r2, r2, #22
 8002a98:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	695a      	ldr	r2, [r3, #20]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002aa8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d103      	bne.n	8002aba <HAL_DMA_IRQHandler+0x1da>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d007      	beq.n	8002aca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f022 0208 	bic.w	r2, r2, #8
 8002ac8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ace:	223f      	movs	r2, #63	; 0x3f
 8002ad0:	409a      	lsls	r2, r3
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2201      	movs	r2, #1
 8002ada:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d07e      	beq.n	8002bec <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	4798      	blx	r3
        }
        return;
 8002af6:	e079      	b.n	8002bec <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d01d      	beq.n	8002b42 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d10d      	bne.n	8002b30 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d031      	beq.n	8002b80 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	4798      	blx	r3
 8002b24:	e02c      	b.n	8002b80 <HAL_DMA_IRQHandler+0x2a0>
 8002b26:	bf00      	nop
 8002b28:	20000004 	.word	0x20000004
 8002b2c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d023      	beq.n	8002b80 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	4798      	blx	r3
 8002b40:	e01e      	b.n	8002b80 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d10f      	bne.n	8002b70 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f022 0210 	bic.w	r2, r2, #16
 8002b5e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d003      	beq.n	8002b80 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d032      	beq.n	8002bee <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b8c:	f003 0301 	and.w	r3, r3, #1
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d022      	beq.n	8002bda <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2205      	movs	r2, #5
 8002b98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f022 0201 	bic.w	r2, r2, #1
 8002baa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	3301      	adds	r3, #1
 8002bb0:	60bb      	str	r3, [r7, #8]
 8002bb2:	697a      	ldr	r2, [r7, #20]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d307      	bcc.n	8002bc8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1f2      	bne.n	8002bac <HAL_DMA_IRQHandler+0x2cc>
 8002bc6:	e000      	b.n	8002bca <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002bc8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d005      	beq.n	8002bee <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	4798      	blx	r3
 8002bea:	e000      	b.n	8002bee <HAL_DMA_IRQHandler+0x30e>
        return;
 8002bec:	bf00      	nop
    }
  }
}
 8002bee:	3718      	adds	r7, #24
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b085      	sub	sp, #20
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
 8002c00:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c10:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	683a      	ldr	r2, [r7, #0]
 8002c18:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	2b40      	cmp	r3, #64	; 0x40
 8002c20:	d108      	bne.n	8002c34 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68ba      	ldr	r2, [r7, #8]
 8002c30:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002c32:	e007      	b.n	8002c44 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68ba      	ldr	r2, [r7, #8]
 8002c3a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	60da      	str	r2, [r3, #12]
}
 8002c44:	bf00      	nop
 8002c46:	3714      	adds	r7, #20
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b085      	sub	sp, #20
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	3b10      	subs	r3, #16
 8002c60:	4a14      	ldr	r2, [pc, #80]	; (8002cb4 <DMA_CalcBaseAndBitshift+0x64>)
 8002c62:	fba2 2303 	umull	r2, r3, r2, r3
 8002c66:	091b      	lsrs	r3, r3, #4
 8002c68:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c6a:	4a13      	ldr	r2, [pc, #76]	; (8002cb8 <DMA_CalcBaseAndBitshift+0x68>)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	4413      	add	r3, r2
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	461a      	mov	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2b03      	cmp	r3, #3
 8002c7c:	d909      	bls.n	8002c92 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c86:	f023 0303 	bic.w	r3, r3, #3
 8002c8a:	1d1a      	adds	r2, r3, #4
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	659a      	str	r2, [r3, #88]	; 0x58
 8002c90:	e007      	b.n	8002ca2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c9a:	f023 0303 	bic.w	r3, r3, #3
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3714      	adds	r7, #20
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	aaaaaaab 	.word	0xaaaaaaab
 8002cb8:	08006860 	.word	0x08006860

08002cbc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ccc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d11f      	bne.n	8002d16 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	2b03      	cmp	r3, #3
 8002cda:	d856      	bhi.n	8002d8a <DMA_CheckFifoParam+0xce>
 8002cdc:	a201      	add	r2, pc, #4	; (adr r2, 8002ce4 <DMA_CheckFifoParam+0x28>)
 8002cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ce2:	bf00      	nop
 8002ce4:	08002cf5 	.word	0x08002cf5
 8002ce8:	08002d07 	.word	0x08002d07
 8002cec:	08002cf5 	.word	0x08002cf5
 8002cf0:	08002d8b 	.word	0x08002d8b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d046      	beq.n	8002d8e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d04:	e043      	b.n	8002d8e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d0e:	d140      	bne.n	8002d92 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d14:	e03d      	b.n	8002d92 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d1e:	d121      	bne.n	8002d64 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	2b03      	cmp	r3, #3
 8002d24:	d837      	bhi.n	8002d96 <DMA_CheckFifoParam+0xda>
 8002d26:	a201      	add	r2, pc, #4	; (adr r2, 8002d2c <DMA_CheckFifoParam+0x70>)
 8002d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d2c:	08002d3d 	.word	0x08002d3d
 8002d30:	08002d43 	.word	0x08002d43
 8002d34:	08002d3d 	.word	0x08002d3d
 8002d38:	08002d55 	.word	0x08002d55
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	73fb      	strb	r3, [r7, #15]
      break;
 8002d40:	e030      	b.n	8002da4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d025      	beq.n	8002d9a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d52:	e022      	b.n	8002d9a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d58:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d5c:	d11f      	bne.n	8002d9e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d62:	e01c      	b.n	8002d9e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d903      	bls.n	8002d72 <DMA_CheckFifoParam+0xb6>
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	2b03      	cmp	r3, #3
 8002d6e:	d003      	beq.n	8002d78 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d70:	e018      	b.n	8002da4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	73fb      	strb	r3, [r7, #15]
      break;
 8002d76:	e015      	b.n	8002da4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d00e      	beq.n	8002da2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	73fb      	strb	r3, [r7, #15]
      break;
 8002d88:	e00b      	b.n	8002da2 <DMA_CheckFifoParam+0xe6>
      break;
 8002d8a:	bf00      	nop
 8002d8c:	e00a      	b.n	8002da4 <DMA_CheckFifoParam+0xe8>
      break;
 8002d8e:	bf00      	nop
 8002d90:	e008      	b.n	8002da4 <DMA_CheckFifoParam+0xe8>
      break;
 8002d92:	bf00      	nop
 8002d94:	e006      	b.n	8002da4 <DMA_CheckFifoParam+0xe8>
      break;
 8002d96:	bf00      	nop
 8002d98:	e004      	b.n	8002da4 <DMA_CheckFifoParam+0xe8>
      break;
 8002d9a:	bf00      	nop
 8002d9c:	e002      	b.n	8002da4 <DMA_CheckFifoParam+0xe8>
      break;   
 8002d9e:	bf00      	nop
 8002da0:	e000      	b.n	8002da4 <DMA_CheckFifoParam+0xe8>
      break;
 8002da2:	bf00      	nop
    }
  } 
  
  return status; 
 8002da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3714      	adds	r7, #20
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop

08002db4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b089      	sub	sp, #36	; 0x24
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dca:	2300      	movs	r3, #0
 8002dcc:	61fb      	str	r3, [r7, #28]
 8002dce:	e159      	b.n	8003084 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	697a      	ldr	r2, [r7, #20]
 8002de0:	4013      	ands	r3, r2
 8002de2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	f040 8148 	bne.w	800307e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f003 0303 	and.w	r3, r3, #3
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d005      	beq.n	8002e06 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d130      	bne.n	8002e68 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	2203      	movs	r2, #3
 8002e12:	fa02 f303 	lsl.w	r3, r2, r3
 8002e16:	43db      	mvns	r3, r3
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	68da      	ldr	r2, [r3, #12]
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	005b      	lsls	r3, r3, #1
 8002e26:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2a:	69ba      	ldr	r2, [r7, #24]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	fa02 f303 	lsl.w	r3, r2, r3
 8002e44:	43db      	mvns	r3, r3
 8002e46:	69ba      	ldr	r2, [r7, #24]
 8002e48:	4013      	ands	r3, r2
 8002e4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	091b      	lsrs	r3, r3, #4
 8002e52:	f003 0201 	and.w	r2, r3, #1
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5c:	69ba      	ldr	r2, [r7, #24]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	69ba      	ldr	r2, [r7, #24]
 8002e66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f003 0303 	and.w	r3, r3, #3
 8002e70:	2b03      	cmp	r3, #3
 8002e72:	d017      	beq.n	8002ea4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	2203      	movs	r2, #3
 8002e80:	fa02 f303 	lsl.w	r3, r2, r3
 8002e84:	43db      	mvns	r3, r3
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	4013      	ands	r3, r2
 8002e8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	689a      	ldr	r2, [r3, #8]
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	fa02 f303 	lsl.w	r3, r2, r3
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	69ba      	ldr	r2, [r7, #24]
 8002ea2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f003 0303 	and.w	r3, r3, #3
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d123      	bne.n	8002ef8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	08da      	lsrs	r2, r3, #3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	3208      	adds	r2, #8
 8002eb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	f003 0307 	and.w	r3, r3, #7
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	220f      	movs	r2, #15
 8002ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ecc:	43db      	mvns	r3, r3
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	691a      	ldr	r2, [r3, #16]
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	f003 0307 	and.w	r3, r3, #7
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	08da      	lsrs	r2, r3, #3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	3208      	adds	r2, #8
 8002ef2:	69b9      	ldr	r1, [r7, #24]
 8002ef4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	005b      	lsls	r3, r3, #1
 8002f02:	2203      	movs	r2, #3
 8002f04:	fa02 f303 	lsl.w	r3, r2, r3
 8002f08:	43db      	mvns	r3, r3
 8002f0a:	69ba      	ldr	r2, [r7, #24]
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f003 0203 	and.w	r2, r3, #3
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	005b      	lsls	r3, r3, #1
 8002f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f20:	69ba      	ldr	r2, [r7, #24]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	f000 80a2 	beq.w	800307e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	60fb      	str	r3, [r7, #12]
 8002f3e:	4b57      	ldr	r3, [pc, #348]	; (800309c <HAL_GPIO_Init+0x2e8>)
 8002f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f42:	4a56      	ldr	r2, [pc, #344]	; (800309c <HAL_GPIO_Init+0x2e8>)
 8002f44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f48:	6453      	str	r3, [r2, #68]	; 0x44
 8002f4a:	4b54      	ldr	r3, [pc, #336]	; (800309c <HAL_GPIO_Init+0x2e8>)
 8002f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f52:	60fb      	str	r3, [r7, #12]
 8002f54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f56:	4a52      	ldr	r2, [pc, #328]	; (80030a0 <HAL_GPIO_Init+0x2ec>)
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	089b      	lsrs	r3, r3, #2
 8002f5c:	3302      	adds	r3, #2
 8002f5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	f003 0303 	and.w	r3, r3, #3
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	220f      	movs	r2, #15
 8002f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f72:	43db      	mvns	r3, r3
 8002f74:	69ba      	ldr	r2, [r7, #24]
 8002f76:	4013      	ands	r3, r2
 8002f78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a49      	ldr	r2, [pc, #292]	; (80030a4 <HAL_GPIO_Init+0x2f0>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d019      	beq.n	8002fb6 <HAL_GPIO_Init+0x202>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a48      	ldr	r2, [pc, #288]	; (80030a8 <HAL_GPIO_Init+0x2f4>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d013      	beq.n	8002fb2 <HAL_GPIO_Init+0x1fe>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a47      	ldr	r2, [pc, #284]	; (80030ac <HAL_GPIO_Init+0x2f8>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d00d      	beq.n	8002fae <HAL_GPIO_Init+0x1fa>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a46      	ldr	r2, [pc, #280]	; (80030b0 <HAL_GPIO_Init+0x2fc>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d007      	beq.n	8002faa <HAL_GPIO_Init+0x1f6>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a45      	ldr	r2, [pc, #276]	; (80030b4 <HAL_GPIO_Init+0x300>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d101      	bne.n	8002fa6 <HAL_GPIO_Init+0x1f2>
 8002fa2:	2304      	movs	r3, #4
 8002fa4:	e008      	b.n	8002fb8 <HAL_GPIO_Init+0x204>
 8002fa6:	2307      	movs	r3, #7
 8002fa8:	e006      	b.n	8002fb8 <HAL_GPIO_Init+0x204>
 8002faa:	2303      	movs	r3, #3
 8002fac:	e004      	b.n	8002fb8 <HAL_GPIO_Init+0x204>
 8002fae:	2302      	movs	r3, #2
 8002fb0:	e002      	b.n	8002fb8 <HAL_GPIO_Init+0x204>
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e000      	b.n	8002fb8 <HAL_GPIO_Init+0x204>
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	69fa      	ldr	r2, [r7, #28]
 8002fba:	f002 0203 	and.w	r2, r2, #3
 8002fbe:	0092      	lsls	r2, r2, #2
 8002fc0:	4093      	lsls	r3, r2
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fc8:	4935      	ldr	r1, [pc, #212]	; (80030a0 <HAL_GPIO_Init+0x2ec>)
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	089b      	lsrs	r3, r3, #2
 8002fce:	3302      	adds	r3, #2
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fd6:	4b38      	ldr	r3, [pc, #224]	; (80030b8 <HAL_GPIO_Init+0x304>)
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	43db      	mvns	r3, r3
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d003      	beq.n	8002ffa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ffa:	4a2f      	ldr	r2, [pc, #188]	; (80030b8 <HAL_GPIO_Init+0x304>)
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003000:	4b2d      	ldr	r3, [pc, #180]	; (80030b8 <HAL_GPIO_Init+0x304>)
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	43db      	mvns	r3, r3
 800300a:	69ba      	ldr	r2, [r7, #24]
 800300c:	4013      	ands	r3, r2
 800300e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d003      	beq.n	8003024 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800301c:	69ba      	ldr	r2, [r7, #24]
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	4313      	orrs	r3, r2
 8003022:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003024:	4a24      	ldr	r2, [pc, #144]	; (80030b8 <HAL_GPIO_Init+0x304>)
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800302a:	4b23      	ldr	r3, [pc, #140]	; (80030b8 <HAL_GPIO_Init+0x304>)
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	43db      	mvns	r3, r3
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	4013      	ands	r3, r2
 8003038:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d003      	beq.n	800304e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	4313      	orrs	r3, r2
 800304c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800304e:	4a1a      	ldr	r2, [pc, #104]	; (80030b8 <HAL_GPIO_Init+0x304>)
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003054:	4b18      	ldr	r3, [pc, #96]	; (80030b8 <HAL_GPIO_Init+0x304>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	43db      	mvns	r3, r3
 800305e:	69ba      	ldr	r2, [r7, #24]
 8003060:	4013      	ands	r3, r2
 8003062:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d003      	beq.n	8003078 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	4313      	orrs	r3, r2
 8003076:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003078:	4a0f      	ldr	r2, [pc, #60]	; (80030b8 <HAL_GPIO_Init+0x304>)
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	3301      	adds	r3, #1
 8003082:	61fb      	str	r3, [r7, #28]
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	2b0f      	cmp	r3, #15
 8003088:	f67f aea2 	bls.w	8002dd0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800308c:	bf00      	nop
 800308e:	bf00      	nop
 8003090:	3724      	adds	r7, #36	; 0x24
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	40023800 	.word	0x40023800
 80030a0:	40013800 	.word	0x40013800
 80030a4:	40020000 	.word	0x40020000
 80030a8:	40020400 	.word	0x40020400
 80030ac:	40020800 	.word	0x40020800
 80030b0:	40020c00 	.word	0x40020c00
 80030b4:	40021000 	.word	0x40021000
 80030b8:	40013c00 	.word	0x40013c00

080030bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80030bc:	b480      	push	{r7}
 80030be:	b085      	sub	sp, #20
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	460b      	mov	r3, r1
 80030c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	691a      	ldr	r2, [r3, #16]
 80030cc:	887b      	ldrh	r3, [r7, #2]
 80030ce:	4013      	ands	r3, r2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d002      	beq.n	80030da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80030d4:	2301      	movs	r3, #1
 80030d6:	73fb      	strb	r3, [r7, #15]
 80030d8:	e001      	b.n	80030de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80030da:	2300      	movs	r3, #0
 80030dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80030de:	7bfb      	ldrb	r3, [r7, #15]
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3714      	adds	r7, #20
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	460b      	mov	r3, r1
 80030f6:	807b      	strh	r3, [r7, #2]
 80030f8:	4613      	mov	r3, r2
 80030fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030fc:	787b      	ldrb	r3, [r7, #1]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d003      	beq.n	800310a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003102:	887a      	ldrh	r2, [r7, #2]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003108:	e003      	b.n	8003112 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800310a:	887b      	ldrh	r3, [r7, #2]
 800310c:	041a      	lsls	r2, r3, #16
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	619a      	str	r2, [r3, #24]
}
 8003112:	bf00      	nop
 8003114:	370c      	adds	r7, #12
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
	...

08003120 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d101      	bne.n	8003132 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e12b      	b.n	800338a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	d106      	bne.n	800314c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f7fd fca0 	bl	8000a8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2224      	movs	r2, #36	; 0x24
 8003150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f022 0201 	bic.w	r2, r2, #1
 8003162:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003172:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003182:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003184:	f001 f888 	bl	8004298 <HAL_RCC_GetPCLK1Freq>
 8003188:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	4a81      	ldr	r2, [pc, #516]	; (8003394 <HAL_I2C_Init+0x274>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d807      	bhi.n	80031a4 <HAL_I2C_Init+0x84>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	4a80      	ldr	r2, [pc, #512]	; (8003398 <HAL_I2C_Init+0x278>)
 8003198:	4293      	cmp	r3, r2
 800319a:	bf94      	ite	ls
 800319c:	2301      	movls	r3, #1
 800319e:	2300      	movhi	r3, #0
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	e006      	b.n	80031b2 <HAL_I2C_Init+0x92>
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	4a7d      	ldr	r2, [pc, #500]	; (800339c <HAL_I2C_Init+0x27c>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	bf94      	ite	ls
 80031ac:	2301      	movls	r3, #1
 80031ae:	2300      	movhi	r3, #0
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d001      	beq.n	80031ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e0e7      	b.n	800338a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	4a78      	ldr	r2, [pc, #480]	; (80033a0 <HAL_I2C_Init+0x280>)
 80031be:	fba2 2303 	umull	r2, r3, r2, r3
 80031c2:	0c9b      	lsrs	r3, r3, #18
 80031c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	68ba      	ldr	r2, [r7, #8]
 80031d6:	430a      	orrs	r2, r1
 80031d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	6a1b      	ldr	r3, [r3, #32]
 80031e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	4a6a      	ldr	r2, [pc, #424]	; (8003394 <HAL_I2C_Init+0x274>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d802      	bhi.n	80031f4 <HAL_I2C_Init+0xd4>
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	3301      	adds	r3, #1
 80031f2:	e009      	b.n	8003208 <HAL_I2C_Init+0xe8>
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80031fa:	fb02 f303 	mul.w	r3, r2, r3
 80031fe:	4a69      	ldr	r2, [pc, #420]	; (80033a4 <HAL_I2C_Init+0x284>)
 8003200:	fba2 2303 	umull	r2, r3, r2, r3
 8003204:	099b      	lsrs	r3, r3, #6
 8003206:	3301      	adds	r3, #1
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	6812      	ldr	r2, [r2, #0]
 800320c:	430b      	orrs	r3, r1
 800320e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	69db      	ldr	r3, [r3, #28]
 8003216:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800321a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	495c      	ldr	r1, [pc, #368]	; (8003394 <HAL_I2C_Init+0x274>)
 8003224:	428b      	cmp	r3, r1
 8003226:	d819      	bhi.n	800325c <HAL_I2C_Init+0x13c>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	1e59      	subs	r1, r3, #1
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	fbb1 f3f3 	udiv	r3, r1, r3
 8003236:	1c59      	adds	r1, r3, #1
 8003238:	f640 73fc 	movw	r3, #4092	; 0xffc
 800323c:	400b      	ands	r3, r1
 800323e:	2b00      	cmp	r3, #0
 8003240:	d00a      	beq.n	8003258 <HAL_I2C_Init+0x138>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	1e59      	subs	r1, r3, #1
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	005b      	lsls	r3, r3, #1
 800324c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003250:	3301      	adds	r3, #1
 8003252:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003256:	e051      	b.n	80032fc <HAL_I2C_Init+0x1dc>
 8003258:	2304      	movs	r3, #4
 800325a:	e04f      	b.n	80032fc <HAL_I2C_Init+0x1dc>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d111      	bne.n	8003288 <HAL_I2C_Init+0x168>
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	1e58      	subs	r0, r3, #1
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6859      	ldr	r1, [r3, #4]
 800326c:	460b      	mov	r3, r1
 800326e:	005b      	lsls	r3, r3, #1
 8003270:	440b      	add	r3, r1
 8003272:	fbb0 f3f3 	udiv	r3, r0, r3
 8003276:	3301      	adds	r3, #1
 8003278:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800327c:	2b00      	cmp	r3, #0
 800327e:	bf0c      	ite	eq
 8003280:	2301      	moveq	r3, #1
 8003282:	2300      	movne	r3, #0
 8003284:	b2db      	uxtb	r3, r3
 8003286:	e012      	b.n	80032ae <HAL_I2C_Init+0x18e>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	1e58      	subs	r0, r3, #1
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6859      	ldr	r1, [r3, #4]
 8003290:	460b      	mov	r3, r1
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	440b      	add	r3, r1
 8003296:	0099      	lsls	r1, r3, #2
 8003298:	440b      	add	r3, r1
 800329a:	fbb0 f3f3 	udiv	r3, r0, r3
 800329e:	3301      	adds	r3, #1
 80032a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	bf0c      	ite	eq
 80032a8:	2301      	moveq	r3, #1
 80032aa:	2300      	movne	r3, #0
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d001      	beq.n	80032b6 <HAL_I2C_Init+0x196>
 80032b2:	2301      	movs	r3, #1
 80032b4:	e022      	b.n	80032fc <HAL_I2C_Init+0x1dc>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d10e      	bne.n	80032dc <HAL_I2C_Init+0x1bc>
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	1e58      	subs	r0, r3, #1
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6859      	ldr	r1, [r3, #4]
 80032c6:	460b      	mov	r3, r1
 80032c8:	005b      	lsls	r3, r3, #1
 80032ca:	440b      	add	r3, r1
 80032cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80032d0:	3301      	adds	r3, #1
 80032d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032da:	e00f      	b.n	80032fc <HAL_I2C_Init+0x1dc>
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	1e58      	subs	r0, r3, #1
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6859      	ldr	r1, [r3, #4]
 80032e4:	460b      	mov	r3, r1
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	440b      	add	r3, r1
 80032ea:	0099      	lsls	r1, r3, #2
 80032ec:	440b      	add	r3, r1
 80032ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80032f2:	3301      	adds	r3, #1
 80032f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032fc:	6879      	ldr	r1, [r7, #4]
 80032fe:	6809      	ldr	r1, [r1, #0]
 8003300:	4313      	orrs	r3, r2
 8003302:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	69da      	ldr	r2, [r3, #28]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a1b      	ldr	r3, [r3, #32]
 8003316:	431a      	orrs	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	430a      	orrs	r2, r1
 800331e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800332a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	6911      	ldr	r1, [r2, #16]
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	68d2      	ldr	r2, [r2, #12]
 8003336:	4311      	orrs	r1, r2
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	6812      	ldr	r2, [r2, #0]
 800333c:	430b      	orrs	r3, r1
 800333e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	695a      	ldr	r2, [r3, #20]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	699b      	ldr	r3, [r3, #24]
 8003352:	431a      	orrs	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	430a      	orrs	r2, r1
 800335a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f042 0201 	orr.w	r2, r2, #1
 800336a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2220      	movs	r2, #32
 8003376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3710      	adds	r7, #16
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	000186a0 	.word	0x000186a0
 8003398:	001e847f 	.word	0x001e847f
 800339c:	003d08ff 	.word	0x003d08ff
 80033a0:	431bde83 	.word	0x431bde83
 80033a4:	10624dd3 	.word	0x10624dd3

080033a8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b088      	sub	sp, #32
 80033ac:	af02      	add	r7, sp, #8
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	607a      	str	r2, [r7, #4]
 80033b2:	461a      	mov	r2, r3
 80033b4:	460b      	mov	r3, r1
 80033b6:	817b      	strh	r3, [r7, #10]
 80033b8:	4613      	mov	r3, r2
 80033ba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80033bc:	f7fe fc46 	bl	8001c4c <HAL_GetTick>
 80033c0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	2b20      	cmp	r3, #32
 80033cc:	f040 80e0 	bne.w	8003590 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	9300      	str	r3, [sp, #0]
 80033d4:	2319      	movs	r3, #25
 80033d6:	2201      	movs	r2, #1
 80033d8:	4970      	ldr	r1, [pc, #448]	; (800359c <HAL_I2C_Master_Transmit+0x1f4>)
 80033da:	68f8      	ldr	r0, [r7, #12]
 80033dc:	f000 f964 	bl	80036a8 <I2C_WaitOnFlagUntilTimeout>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d001      	beq.n	80033ea <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80033e6:	2302      	movs	r3, #2
 80033e8:	e0d3      	b.n	8003592 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d101      	bne.n	80033f8 <HAL_I2C_Master_Transmit+0x50>
 80033f4:	2302      	movs	r3, #2
 80033f6:	e0cc      	b.n	8003592 <HAL_I2C_Master_Transmit+0x1ea>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0301 	and.w	r3, r3, #1
 800340a:	2b01      	cmp	r3, #1
 800340c:	d007      	beq.n	800341e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f042 0201 	orr.w	r2, r2, #1
 800341c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800342c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2221      	movs	r2, #33	; 0x21
 8003432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2210      	movs	r2, #16
 800343a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2200      	movs	r2, #0
 8003442:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	893a      	ldrh	r2, [r7, #8]
 800344e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003454:	b29a      	uxth	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	4a50      	ldr	r2, [pc, #320]	; (80035a0 <HAL_I2C_Master_Transmit+0x1f8>)
 800345e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003460:	8979      	ldrh	r1, [r7, #10]
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	6a3a      	ldr	r2, [r7, #32]
 8003466:	68f8      	ldr	r0, [r7, #12]
 8003468:	f000 f89c 	bl	80035a4 <I2C_MasterRequestWrite>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d001      	beq.n	8003476 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e08d      	b.n	8003592 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003476:	2300      	movs	r3, #0
 8003478:	613b      	str	r3, [r7, #16]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	695b      	ldr	r3, [r3, #20]
 8003480:	613b      	str	r3, [r7, #16]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	613b      	str	r3, [r7, #16]
 800348a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800348c:	e066      	b.n	800355c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800348e:	697a      	ldr	r2, [r7, #20]
 8003490:	6a39      	ldr	r1, [r7, #32]
 8003492:	68f8      	ldr	r0, [r7, #12]
 8003494:	f000 f9de 	bl	8003854 <I2C_WaitOnTXEFlagUntilTimeout>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00d      	beq.n	80034ba <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a2:	2b04      	cmp	r3, #4
 80034a4:	d107      	bne.n	80034b6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e06b      	b.n	8003592 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034be:	781a      	ldrb	r2, [r3, #0]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ca:	1c5a      	adds	r2, r3, #1
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	3b01      	subs	r3, #1
 80034d8:	b29a      	uxth	r2, r3
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034e2:	3b01      	subs	r3, #1
 80034e4:	b29a      	uxth	r2, r3
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	695b      	ldr	r3, [r3, #20]
 80034f0:	f003 0304 	and.w	r3, r3, #4
 80034f4:	2b04      	cmp	r3, #4
 80034f6:	d11b      	bne.n	8003530 <HAL_I2C_Master_Transmit+0x188>
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d017      	beq.n	8003530 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003504:	781a      	ldrb	r2, [r3, #0]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003510:	1c5a      	adds	r2, r3, #1
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800351a:	b29b      	uxth	r3, r3
 800351c:	3b01      	subs	r3, #1
 800351e:	b29a      	uxth	r2, r3
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003528:	3b01      	subs	r3, #1
 800352a:	b29a      	uxth	r2, r3
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003530:	697a      	ldr	r2, [r7, #20]
 8003532:	6a39      	ldr	r1, [r7, #32]
 8003534:	68f8      	ldr	r0, [r7, #12]
 8003536:	f000 f9ce 	bl	80038d6 <I2C_WaitOnBTFFlagUntilTimeout>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d00d      	beq.n	800355c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003544:	2b04      	cmp	r3, #4
 8003546:	d107      	bne.n	8003558 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003556:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e01a      	b.n	8003592 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003560:	2b00      	cmp	r3, #0
 8003562:	d194      	bne.n	800348e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003572:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2220      	movs	r2, #32
 8003578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800358c:	2300      	movs	r3, #0
 800358e:	e000      	b.n	8003592 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003590:	2302      	movs	r3, #2
  }
}
 8003592:	4618      	mov	r0, r3
 8003594:	3718      	adds	r7, #24
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	00100002 	.word	0x00100002
 80035a0:	ffff0000 	.word	0xffff0000

080035a4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b088      	sub	sp, #32
 80035a8:	af02      	add	r7, sp, #8
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	607a      	str	r2, [r7, #4]
 80035ae:	603b      	str	r3, [r7, #0]
 80035b0:	460b      	mov	r3, r1
 80035b2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	2b08      	cmp	r3, #8
 80035be:	d006      	beq.n	80035ce <I2C_MasterRequestWrite+0x2a>
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d003      	beq.n	80035ce <I2C_MasterRequestWrite+0x2a>
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80035cc:	d108      	bne.n	80035e0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035dc:	601a      	str	r2, [r3, #0]
 80035de:	e00b      	b.n	80035f8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e4:	2b12      	cmp	r3, #18
 80035e6:	d107      	bne.n	80035f8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035f6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	9300      	str	r3, [sp, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003604:	68f8      	ldr	r0, [r7, #12]
 8003606:	f000 f84f 	bl	80036a8 <I2C_WaitOnFlagUntilTimeout>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d00d      	beq.n	800362c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800361a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800361e:	d103      	bne.n	8003628 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003626:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e035      	b.n	8003698 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	691b      	ldr	r3, [r3, #16]
 8003630:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003634:	d108      	bne.n	8003648 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003636:	897b      	ldrh	r3, [r7, #10]
 8003638:	b2db      	uxtb	r3, r3
 800363a:	461a      	mov	r2, r3
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003644:	611a      	str	r2, [r3, #16]
 8003646:	e01b      	b.n	8003680 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003648:	897b      	ldrh	r3, [r7, #10]
 800364a:	11db      	asrs	r3, r3, #7
 800364c:	b2db      	uxtb	r3, r3
 800364e:	f003 0306 	and.w	r3, r3, #6
 8003652:	b2db      	uxtb	r3, r3
 8003654:	f063 030f 	orn	r3, r3, #15
 8003658:	b2da      	uxtb	r2, r3
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	490e      	ldr	r1, [pc, #56]	; (80036a0 <I2C_MasterRequestWrite+0xfc>)
 8003666:	68f8      	ldr	r0, [r7, #12]
 8003668:	f000 f875 	bl	8003756 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d001      	beq.n	8003676 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e010      	b.n	8003698 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003676:	897b      	ldrh	r3, [r7, #10]
 8003678:	b2da      	uxtb	r2, r3
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	4907      	ldr	r1, [pc, #28]	; (80036a4 <I2C_MasterRequestWrite+0x100>)
 8003686:	68f8      	ldr	r0, [r7, #12]
 8003688:	f000 f865 	bl	8003756 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d001      	beq.n	8003696 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e000      	b.n	8003698 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003696:	2300      	movs	r3, #0
}
 8003698:	4618      	mov	r0, r3
 800369a:	3718      	adds	r7, #24
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	00010008 	.word	0x00010008
 80036a4:	00010002 	.word	0x00010002

080036a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	603b      	str	r3, [r7, #0]
 80036b4:	4613      	mov	r3, r2
 80036b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036b8:	e025      	b.n	8003706 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036c0:	d021      	beq.n	8003706 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036c2:	f7fe fac3 	bl	8001c4c <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	683a      	ldr	r2, [r7, #0]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d302      	bcc.n	80036d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d116      	bne.n	8003706 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2220      	movs	r2, #32
 80036e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f2:	f043 0220 	orr.w	r2, r3, #32
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e023      	b.n	800374e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	0c1b      	lsrs	r3, r3, #16
 800370a:	b2db      	uxtb	r3, r3
 800370c:	2b01      	cmp	r3, #1
 800370e:	d10d      	bne.n	800372c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	43da      	mvns	r2, r3
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	4013      	ands	r3, r2
 800371c:	b29b      	uxth	r3, r3
 800371e:	2b00      	cmp	r3, #0
 8003720:	bf0c      	ite	eq
 8003722:	2301      	moveq	r3, #1
 8003724:	2300      	movne	r3, #0
 8003726:	b2db      	uxtb	r3, r3
 8003728:	461a      	mov	r2, r3
 800372a:	e00c      	b.n	8003746 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	43da      	mvns	r2, r3
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	4013      	ands	r3, r2
 8003738:	b29b      	uxth	r3, r3
 800373a:	2b00      	cmp	r3, #0
 800373c:	bf0c      	ite	eq
 800373e:	2301      	moveq	r3, #1
 8003740:	2300      	movne	r3, #0
 8003742:	b2db      	uxtb	r3, r3
 8003744:	461a      	mov	r2, r3
 8003746:	79fb      	ldrb	r3, [r7, #7]
 8003748:	429a      	cmp	r2, r3
 800374a:	d0b6      	beq.n	80036ba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3710      	adds	r7, #16
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}

08003756 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003756:	b580      	push	{r7, lr}
 8003758:	b084      	sub	sp, #16
 800375a:	af00      	add	r7, sp, #0
 800375c:	60f8      	str	r0, [r7, #12]
 800375e:	60b9      	str	r1, [r7, #8]
 8003760:	607a      	str	r2, [r7, #4]
 8003762:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003764:	e051      	b.n	800380a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	695b      	ldr	r3, [r3, #20]
 800376c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003770:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003774:	d123      	bne.n	80037be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003784:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800378e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2220      	movs	r2, #32
 800379a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037aa:	f043 0204 	orr.w	r2, r3, #4
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e046      	b.n	800384c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c4:	d021      	beq.n	800380a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037c6:	f7fe fa41 	bl	8001c4c <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d302      	bcc.n	80037dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d116      	bne.n	800380a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2200      	movs	r2, #0
 80037e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2220      	movs	r2, #32
 80037e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f6:	f043 0220 	orr.w	r2, r3, #32
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2200      	movs	r2, #0
 8003802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e020      	b.n	800384c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	0c1b      	lsrs	r3, r3, #16
 800380e:	b2db      	uxtb	r3, r3
 8003810:	2b01      	cmp	r3, #1
 8003812:	d10c      	bne.n	800382e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	695b      	ldr	r3, [r3, #20]
 800381a:	43da      	mvns	r2, r3
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	4013      	ands	r3, r2
 8003820:	b29b      	uxth	r3, r3
 8003822:	2b00      	cmp	r3, #0
 8003824:	bf14      	ite	ne
 8003826:	2301      	movne	r3, #1
 8003828:	2300      	moveq	r3, #0
 800382a:	b2db      	uxtb	r3, r3
 800382c:	e00b      	b.n	8003846 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	699b      	ldr	r3, [r3, #24]
 8003834:	43da      	mvns	r2, r3
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	4013      	ands	r3, r2
 800383a:	b29b      	uxth	r3, r3
 800383c:	2b00      	cmp	r3, #0
 800383e:	bf14      	ite	ne
 8003840:	2301      	movne	r3, #1
 8003842:	2300      	moveq	r3, #0
 8003844:	b2db      	uxtb	r3, r3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d18d      	bne.n	8003766 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800384a:	2300      	movs	r3, #0
}
 800384c:	4618      	mov	r0, r3
 800384e:	3710      	adds	r7, #16
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	60b9      	str	r1, [r7, #8]
 800385e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003860:	e02d      	b.n	80038be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003862:	68f8      	ldr	r0, [r7, #12]
 8003864:	f000 f878 	bl	8003958 <I2C_IsAcknowledgeFailed>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d001      	beq.n	8003872 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e02d      	b.n	80038ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003878:	d021      	beq.n	80038be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800387a:	f7fe f9e7 	bl	8001c4c <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	68ba      	ldr	r2, [r7, #8]
 8003886:	429a      	cmp	r2, r3
 8003888:	d302      	bcc.n	8003890 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d116      	bne.n	80038be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2200      	movs	r2, #0
 8003894:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2220      	movs	r2, #32
 800389a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038aa:	f043 0220 	orr.w	r2, r3, #32
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e007      	b.n	80038ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	695b      	ldr	r3, [r3, #20]
 80038c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038c8:	2b80      	cmp	r3, #128	; 0x80
 80038ca:	d1ca      	bne.n	8003862 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3710      	adds	r7, #16
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b084      	sub	sp, #16
 80038da:	af00      	add	r7, sp, #0
 80038dc:	60f8      	str	r0, [r7, #12]
 80038de:	60b9      	str	r1, [r7, #8]
 80038e0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038e2:	e02d      	b.n	8003940 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038e4:	68f8      	ldr	r0, [r7, #12]
 80038e6:	f000 f837 	bl	8003958 <I2C_IsAcknowledgeFailed>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d001      	beq.n	80038f4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e02d      	b.n	8003950 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038fa:	d021      	beq.n	8003940 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038fc:	f7fe f9a6 	bl	8001c4c <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	68ba      	ldr	r2, [r7, #8]
 8003908:	429a      	cmp	r2, r3
 800390a:	d302      	bcc.n	8003912 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d116      	bne.n	8003940 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2200      	movs	r2, #0
 8003916:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2220      	movs	r2, #32
 800391c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392c:	f043 0220 	orr.w	r2, r3, #32
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e007      	b.n	8003950 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	f003 0304 	and.w	r3, r3, #4
 800394a:	2b04      	cmp	r3, #4
 800394c:	d1ca      	bne.n	80038e4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800394e:	2300      	movs	r3, #0
}
 8003950:	4618      	mov	r0, r3
 8003952:	3710      	adds	r7, #16
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800396a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800396e:	d11b      	bne.n	80039a8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003978:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2220      	movs	r2, #32
 8003984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003994:	f043 0204 	orr.w	r2, r3, #4
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e000      	b.n	80039aa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	370c      	adds	r7, #12
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
	...

080039b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b086      	sub	sp, #24
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d101      	bne.n	80039ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e267      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0301 	and.w	r3, r3, #1
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d075      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039d6:	4b88      	ldr	r3, [pc, #544]	; (8003bf8 <HAL_RCC_OscConfig+0x240>)
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f003 030c 	and.w	r3, r3, #12
 80039de:	2b04      	cmp	r3, #4
 80039e0:	d00c      	beq.n	80039fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039e2:	4b85      	ldr	r3, [pc, #532]	; (8003bf8 <HAL_RCC_OscConfig+0x240>)
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039ea:	2b08      	cmp	r3, #8
 80039ec:	d112      	bne.n	8003a14 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039ee:	4b82      	ldr	r3, [pc, #520]	; (8003bf8 <HAL_RCC_OscConfig+0x240>)
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039fa:	d10b      	bne.n	8003a14 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039fc:	4b7e      	ldr	r3, [pc, #504]	; (8003bf8 <HAL_RCC_OscConfig+0x240>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d05b      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x108>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d157      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e242      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a1c:	d106      	bne.n	8003a2c <HAL_RCC_OscConfig+0x74>
 8003a1e:	4b76      	ldr	r3, [pc, #472]	; (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a75      	ldr	r2, [pc, #468]	; (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003a24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a28:	6013      	str	r3, [r2, #0]
 8003a2a:	e01d      	b.n	8003a68 <HAL_RCC_OscConfig+0xb0>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a34:	d10c      	bne.n	8003a50 <HAL_RCC_OscConfig+0x98>
 8003a36:	4b70      	ldr	r3, [pc, #448]	; (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a6f      	ldr	r2, [pc, #444]	; (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003a3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a40:	6013      	str	r3, [r2, #0]
 8003a42:	4b6d      	ldr	r3, [pc, #436]	; (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a6c      	ldr	r2, [pc, #432]	; (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003a48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a4c:	6013      	str	r3, [r2, #0]
 8003a4e:	e00b      	b.n	8003a68 <HAL_RCC_OscConfig+0xb0>
 8003a50:	4b69      	ldr	r3, [pc, #420]	; (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a68      	ldr	r2, [pc, #416]	; (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003a56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a5a:	6013      	str	r3, [r2, #0]
 8003a5c:	4b66      	ldr	r3, [pc, #408]	; (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a65      	ldr	r2, [pc, #404]	; (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003a62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d013      	beq.n	8003a98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a70:	f7fe f8ec 	bl	8001c4c <HAL_GetTick>
 8003a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a76:	e008      	b.n	8003a8a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a78:	f7fe f8e8 	bl	8001c4c <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	2b64      	cmp	r3, #100	; 0x64
 8003a84:	d901      	bls.n	8003a8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e207      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a8a:	4b5b      	ldr	r3, [pc, #364]	; (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d0f0      	beq.n	8003a78 <HAL_RCC_OscConfig+0xc0>
 8003a96:	e014      	b.n	8003ac2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a98:	f7fe f8d8 	bl	8001c4c <HAL_GetTick>
 8003a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a9e:	e008      	b.n	8003ab2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003aa0:	f7fe f8d4 	bl	8001c4c <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	2b64      	cmp	r3, #100	; 0x64
 8003aac:	d901      	bls.n	8003ab2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e1f3      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ab2:	4b51      	ldr	r3, [pc, #324]	; (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1f0      	bne.n	8003aa0 <HAL_RCC_OscConfig+0xe8>
 8003abe:	e000      	b.n	8003ac2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ac0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0302 	and.w	r3, r3, #2
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d063      	beq.n	8003b96 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ace:	4b4a      	ldr	r3, [pc, #296]	; (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f003 030c 	and.w	r3, r3, #12
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00b      	beq.n	8003af2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ada:	4b47      	ldr	r3, [pc, #284]	; (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ae2:	2b08      	cmp	r3, #8
 8003ae4:	d11c      	bne.n	8003b20 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ae6:	4b44      	ldr	r3, [pc, #272]	; (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d116      	bne.n	8003b20 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003af2:	4b41      	ldr	r3, [pc, #260]	; (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0302 	and.w	r3, r3, #2
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d005      	beq.n	8003b0a <HAL_RCC_OscConfig+0x152>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d001      	beq.n	8003b0a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e1c7      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b0a:	4b3b      	ldr	r3, [pc, #236]	; (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	00db      	lsls	r3, r3, #3
 8003b18:	4937      	ldr	r1, [pc, #220]	; (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b1e:	e03a      	b.n	8003b96 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d020      	beq.n	8003b6a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b28:	4b34      	ldr	r3, [pc, #208]	; (8003bfc <HAL_RCC_OscConfig+0x244>)
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b2e:	f7fe f88d 	bl	8001c4c <HAL_GetTick>
 8003b32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b34:	e008      	b.n	8003b48 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b36:	f7fe f889 	bl	8001c4c <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d901      	bls.n	8003b48 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e1a8      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b48:	4b2b      	ldr	r3, [pc, #172]	; (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0302 	and.w	r3, r3, #2
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d0f0      	beq.n	8003b36 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b54:	4b28      	ldr	r3, [pc, #160]	; (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	691b      	ldr	r3, [r3, #16]
 8003b60:	00db      	lsls	r3, r3, #3
 8003b62:	4925      	ldr	r1, [pc, #148]	; (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	600b      	str	r3, [r1, #0]
 8003b68:	e015      	b.n	8003b96 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b6a:	4b24      	ldr	r3, [pc, #144]	; (8003bfc <HAL_RCC_OscConfig+0x244>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b70:	f7fe f86c 	bl	8001c4c <HAL_GetTick>
 8003b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b76:	e008      	b.n	8003b8a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b78:	f7fe f868 	bl	8001c4c <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e187      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b8a:	4b1b      	ldr	r3, [pc, #108]	; (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0302 	and.w	r3, r3, #2
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d1f0      	bne.n	8003b78 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0308 	and.w	r3, r3, #8
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d036      	beq.n	8003c10 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d016      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003baa:	4b15      	ldr	r3, [pc, #84]	; (8003c00 <HAL_RCC_OscConfig+0x248>)
 8003bac:	2201      	movs	r2, #1
 8003bae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bb0:	f7fe f84c 	bl	8001c4c <HAL_GetTick>
 8003bb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bb6:	e008      	b.n	8003bca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bb8:	f7fe f848 	bl	8001c4c <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d901      	bls.n	8003bca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e167      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bca:	4b0b      	ldr	r3, [pc, #44]	; (8003bf8 <HAL_RCC_OscConfig+0x240>)
 8003bcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bce:	f003 0302 	and.w	r3, r3, #2
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d0f0      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x200>
 8003bd6:	e01b      	b.n	8003c10 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bd8:	4b09      	ldr	r3, [pc, #36]	; (8003c00 <HAL_RCC_OscConfig+0x248>)
 8003bda:	2200      	movs	r2, #0
 8003bdc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bde:	f7fe f835 	bl	8001c4c <HAL_GetTick>
 8003be2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003be4:	e00e      	b.n	8003c04 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003be6:	f7fe f831 	bl	8001c4c <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d907      	bls.n	8003c04 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e150      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
 8003bf8:	40023800 	.word	0x40023800
 8003bfc:	42470000 	.word	0x42470000
 8003c00:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c04:	4b88      	ldr	r3, [pc, #544]	; (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003c06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c08:	f003 0302 	and.w	r3, r3, #2
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d1ea      	bne.n	8003be6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0304 	and.w	r3, r3, #4
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	f000 8097 	beq.w	8003d4c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c22:	4b81      	ldr	r3, [pc, #516]	; (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d10f      	bne.n	8003c4e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c2e:	2300      	movs	r3, #0
 8003c30:	60bb      	str	r3, [r7, #8]
 8003c32:	4b7d      	ldr	r3, [pc, #500]	; (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c36:	4a7c      	ldr	r2, [pc, #496]	; (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c3c:	6413      	str	r3, [r2, #64]	; 0x40
 8003c3e:	4b7a      	ldr	r3, [pc, #488]	; (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c46:	60bb      	str	r3, [r7, #8]
 8003c48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c4e:	4b77      	ldr	r3, [pc, #476]	; (8003e2c <HAL_RCC_OscConfig+0x474>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d118      	bne.n	8003c8c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c5a:	4b74      	ldr	r3, [pc, #464]	; (8003e2c <HAL_RCC_OscConfig+0x474>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a73      	ldr	r2, [pc, #460]	; (8003e2c <HAL_RCC_OscConfig+0x474>)
 8003c60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c66:	f7fd fff1 	bl	8001c4c <HAL_GetTick>
 8003c6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c6c:	e008      	b.n	8003c80 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c6e:	f7fd ffed 	bl	8001c4c <HAL_GetTick>
 8003c72:	4602      	mov	r2, r0
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d901      	bls.n	8003c80 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e10c      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c80:	4b6a      	ldr	r3, [pc, #424]	; (8003e2c <HAL_RCC_OscConfig+0x474>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d0f0      	beq.n	8003c6e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d106      	bne.n	8003ca2 <HAL_RCC_OscConfig+0x2ea>
 8003c94:	4b64      	ldr	r3, [pc, #400]	; (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c98:	4a63      	ldr	r2, [pc, #396]	; (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003c9a:	f043 0301 	orr.w	r3, r3, #1
 8003c9e:	6713      	str	r3, [r2, #112]	; 0x70
 8003ca0:	e01c      	b.n	8003cdc <HAL_RCC_OscConfig+0x324>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	2b05      	cmp	r3, #5
 8003ca8:	d10c      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x30c>
 8003caa:	4b5f      	ldr	r3, [pc, #380]	; (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cae:	4a5e      	ldr	r2, [pc, #376]	; (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003cb0:	f043 0304 	orr.w	r3, r3, #4
 8003cb4:	6713      	str	r3, [r2, #112]	; 0x70
 8003cb6:	4b5c      	ldr	r3, [pc, #368]	; (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cba:	4a5b      	ldr	r2, [pc, #364]	; (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003cbc:	f043 0301 	orr.w	r3, r3, #1
 8003cc0:	6713      	str	r3, [r2, #112]	; 0x70
 8003cc2:	e00b      	b.n	8003cdc <HAL_RCC_OscConfig+0x324>
 8003cc4:	4b58      	ldr	r3, [pc, #352]	; (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cc8:	4a57      	ldr	r2, [pc, #348]	; (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003cca:	f023 0301 	bic.w	r3, r3, #1
 8003cce:	6713      	str	r3, [r2, #112]	; 0x70
 8003cd0:	4b55      	ldr	r3, [pc, #340]	; (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd4:	4a54      	ldr	r2, [pc, #336]	; (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003cd6:	f023 0304 	bic.w	r3, r3, #4
 8003cda:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d015      	beq.n	8003d10 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ce4:	f7fd ffb2 	bl	8001c4c <HAL_GetTick>
 8003ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cea:	e00a      	b.n	8003d02 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cec:	f7fd ffae 	bl	8001c4c <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d901      	bls.n	8003d02 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e0cb      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d02:	4b49      	ldr	r3, [pc, #292]	; (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d06:	f003 0302 	and.w	r3, r3, #2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d0ee      	beq.n	8003cec <HAL_RCC_OscConfig+0x334>
 8003d0e:	e014      	b.n	8003d3a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d10:	f7fd ff9c 	bl	8001c4c <HAL_GetTick>
 8003d14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d16:	e00a      	b.n	8003d2e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d18:	f7fd ff98 	bl	8001c4c <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d901      	bls.n	8003d2e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e0b5      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d2e:	4b3e      	ldr	r3, [pc, #248]	; (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d1ee      	bne.n	8003d18 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d3a:	7dfb      	ldrb	r3, [r7, #23]
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d105      	bne.n	8003d4c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d40:	4b39      	ldr	r3, [pc, #228]	; (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d44:	4a38      	ldr	r2, [pc, #224]	; (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003d46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d4a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	699b      	ldr	r3, [r3, #24]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	f000 80a1 	beq.w	8003e98 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d56:	4b34      	ldr	r3, [pc, #208]	; (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f003 030c 	and.w	r3, r3, #12
 8003d5e:	2b08      	cmp	r3, #8
 8003d60:	d05c      	beq.n	8003e1c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	699b      	ldr	r3, [r3, #24]
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d141      	bne.n	8003dee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d6a:	4b31      	ldr	r3, [pc, #196]	; (8003e30 <HAL_RCC_OscConfig+0x478>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d70:	f7fd ff6c 	bl	8001c4c <HAL_GetTick>
 8003d74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d76:	e008      	b.n	8003d8a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d78:	f7fd ff68 	bl	8001c4c <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e087      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d8a:	4b27      	ldr	r3, [pc, #156]	; (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d1f0      	bne.n	8003d78 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	69da      	ldr	r2, [r3, #28]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a1b      	ldr	r3, [r3, #32]
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da4:	019b      	lsls	r3, r3, #6
 8003da6:	431a      	orrs	r2, r3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dac:	085b      	lsrs	r3, r3, #1
 8003dae:	3b01      	subs	r3, #1
 8003db0:	041b      	lsls	r3, r3, #16
 8003db2:	431a      	orrs	r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db8:	061b      	lsls	r3, r3, #24
 8003dba:	491b      	ldr	r1, [pc, #108]	; (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dc0:	4b1b      	ldr	r3, [pc, #108]	; (8003e30 <HAL_RCC_OscConfig+0x478>)
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc6:	f7fd ff41 	bl	8001c4c <HAL_GetTick>
 8003dca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dcc:	e008      	b.n	8003de0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dce:	f7fd ff3d 	bl	8001c4c <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d901      	bls.n	8003de0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e05c      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003de0:	4b11      	ldr	r3, [pc, #68]	; (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d0f0      	beq.n	8003dce <HAL_RCC_OscConfig+0x416>
 8003dec:	e054      	b.n	8003e98 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dee:	4b10      	ldr	r3, [pc, #64]	; (8003e30 <HAL_RCC_OscConfig+0x478>)
 8003df0:	2200      	movs	r2, #0
 8003df2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003df4:	f7fd ff2a 	bl	8001c4c <HAL_GetTick>
 8003df8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dfa:	e008      	b.n	8003e0e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dfc:	f7fd ff26 	bl	8001c4c <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d901      	bls.n	8003e0e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e045      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e0e:	4b06      	ldr	r3, [pc, #24]	; (8003e28 <HAL_RCC_OscConfig+0x470>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d1f0      	bne.n	8003dfc <HAL_RCC_OscConfig+0x444>
 8003e1a:	e03d      	b.n	8003e98 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	699b      	ldr	r3, [r3, #24]
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d107      	bne.n	8003e34 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e038      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
 8003e28:	40023800 	.word	0x40023800
 8003e2c:	40007000 	.word	0x40007000
 8003e30:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e34:	4b1b      	ldr	r3, [pc, #108]	; (8003ea4 <HAL_RCC_OscConfig+0x4ec>)
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	699b      	ldr	r3, [r3, #24]
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d028      	beq.n	8003e94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d121      	bne.n	8003e94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d11a      	bne.n	8003e94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e5e:	68fa      	ldr	r2, [r7, #12]
 8003e60:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e64:	4013      	ands	r3, r2
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e6a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d111      	bne.n	8003e94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e7a:	085b      	lsrs	r3, r3, #1
 8003e7c:	3b01      	subs	r3, #1
 8003e7e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d107      	bne.n	8003e94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e8e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d001      	beq.n	8003e98 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e000      	b.n	8003e9a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3718      	adds	r7, #24
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	40023800 	.word	0x40023800

08003ea8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d101      	bne.n	8003ebc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e0cc      	b.n	8004056 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ebc:	4b68      	ldr	r3, [pc, #416]	; (8004060 <HAL_RCC_ClockConfig+0x1b8>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0307 	and.w	r3, r3, #7
 8003ec4:	683a      	ldr	r2, [r7, #0]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d90c      	bls.n	8003ee4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eca:	4b65      	ldr	r3, [pc, #404]	; (8004060 <HAL_RCC_ClockConfig+0x1b8>)
 8003ecc:	683a      	ldr	r2, [r7, #0]
 8003ece:	b2d2      	uxtb	r2, r2
 8003ed0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ed2:	4b63      	ldr	r3, [pc, #396]	; (8004060 <HAL_RCC_ClockConfig+0x1b8>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0307 	and.w	r3, r3, #7
 8003eda:	683a      	ldr	r2, [r7, #0]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d001      	beq.n	8003ee4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e0b8      	b.n	8004056 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0302 	and.w	r3, r3, #2
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d020      	beq.n	8003f32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0304 	and.w	r3, r3, #4
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d005      	beq.n	8003f08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003efc:	4b59      	ldr	r3, [pc, #356]	; (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	4a58      	ldr	r2, [pc, #352]	; (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8003f02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0308 	and.w	r3, r3, #8
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d005      	beq.n	8003f20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f14:	4b53      	ldr	r3, [pc, #332]	; (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	4a52      	ldr	r2, [pc, #328]	; (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8003f1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f20:	4b50      	ldr	r3, [pc, #320]	; (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	494d      	ldr	r1, [pc, #308]	; (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0301 	and.w	r3, r3, #1
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d044      	beq.n	8003fc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d107      	bne.n	8003f56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f46:	4b47      	ldr	r3, [pc, #284]	; (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d119      	bne.n	8003f86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e07f      	b.n	8004056 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d003      	beq.n	8003f66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f62:	2b03      	cmp	r3, #3
 8003f64:	d107      	bne.n	8003f76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f66:	4b3f      	ldr	r3, [pc, #252]	; (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d109      	bne.n	8003f86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e06f      	b.n	8004056 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f76:	4b3b      	ldr	r3, [pc, #236]	; (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0302 	and.w	r3, r3, #2
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d101      	bne.n	8003f86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e067      	b.n	8004056 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f86:	4b37      	ldr	r3, [pc, #220]	; (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f023 0203 	bic.w	r2, r3, #3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	4934      	ldr	r1, [pc, #208]	; (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f98:	f7fd fe58 	bl	8001c4c <HAL_GetTick>
 8003f9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f9e:	e00a      	b.n	8003fb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fa0:	f7fd fe54 	bl	8001c4c <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d901      	bls.n	8003fb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e04f      	b.n	8004056 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fb6:	4b2b      	ldr	r3, [pc, #172]	; (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f003 020c 	and.w	r2, r3, #12
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d1eb      	bne.n	8003fa0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fc8:	4b25      	ldr	r3, [pc, #148]	; (8004060 <HAL_RCC_ClockConfig+0x1b8>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0307 	and.w	r3, r3, #7
 8003fd0:	683a      	ldr	r2, [r7, #0]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d20c      	bcs.n	8003ff0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fd6:	4b22      	ldr	r3, [pc, #136]	; (8004060 <HAL_RCC_ClockConfig+0x1b8>)
 8003fd8:	683a      	ldr	r2, [r7, #0]
 8003fda:	b2d2      	uxtb	r2, r2
 8003fdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fde:	4b20      	ldr	r3, [pc, #128]	; (8004060 <HAL_RCC_ClockConfig+0x1b8>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0307 	and.w	r3, r3, #7
 8003fe6:	683a      	ldr	r2, [r7, #0]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d001      	beq.n	8003ff0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e032      	b.n	8004056 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0304 	and.w	r3, r3, #4
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d008      	beq.n	800400e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ffc:	4b19      	ldr	r3, [pc, #100]	; (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	4916      	ldr	r1, [pc, #88]	; (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 800400a:	4313      	orrs	r3, r2
 800400c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0308 	and.w	r3, r3, #8
 8004016:	2b00      	cmp	r3, #0
 8004018:	d009      	beq.n	800402e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800401a:	4b12      	ldr	r3, [pc, #72]	; (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	00db      	lsls	r3, r3, #3
 8004028:	490e      	ldr	r1, [pc, #56]	; (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 800402a:	4313      	orrs	r3, r2
 800402c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800402e:	f000 f821 	bl	8004074 <HAL_RCC_GetSysClockFreq>
 8004032:	4602      	mov	r2, r0
 8004034:	4b0b      	ldr	r3, [pc, #44]	; (8004064 <HAL_RCC_ClockConfig+0x1bc>)
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	091b      	lsrs	r3, r3, #4
 800403a:	f003 030f 	and.w	r3, r3, #15
 800403e:	490a      	ldr	r1, [pc, #40]	; (8004068 <HAL_RCC_ClockConfig+0x1c0>)
 8004040:	5ccb      	ldrb	r3, [r1, r3]
 8004042:	fa22 f303 	lsr.w	r3, r2, r3
 8004046:	4a09      	ldr	r2, [pc, #36]	; (800406c <HAL_RCC_ClockConfig+0x1c4>)
 8004048:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800404a:	4b09      	ldr	r3, [pc, #36]	; (8004070 <HAL_RCC_ClockConfig+0x1c8>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4618      	mov	r0, r3
 8004050:	f7fd fdb8 	bl	8001bc4 <HAL_InitTick>

  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3710      	adds	r7, #16
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	40023c00 	.word	0x40023c00
 8004064:	40023800 	.word	0x40023800
 8004068:	08006848 	.word	0x08006848
 800406c:	20000004 	.word	0x20000004
 8004070:	20000008 	.word	0x20000008

08004074 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004074:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004078:	b094      	sub	sp, #80	; 0x50
 800407a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800407c:	2300      	movs	r3, #0
 800407e:	647b      	str	r3, [r7, #68]	; 0x44
 8004080:	2300      	movs	r3, #0
 8004082:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004084:	2300      	movs	r3, #0
 8004086:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004088:	2300      	movs	r3, #0
 800408a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800408c:	4b79      	ldr	r3, [pc, #484]	; (8004274 <HAL_RCC_GetSysClockFreq+0x200>)
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	f003 030c 	and.w	r3, r3, #12
 8004094:	2b08      	cmp	r3, #8
 8004096:	d00d      	beq.n	80040b4 <HAL_RCC_GetSysClockFreq+0x40>
 8004098:	2b08      	cmp	r3, #8
 800409a:	f200 80e1 	bhi.w	8004260 <HAL_RCC_GetSysClockFreq+0x1ec>
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d002      	beq.n	80040a8 <HAL_RCC_GetSysClockFreq+0x34>
 80040a2:	2b04      	cmp	r3, #4
 80040a4:	d003      	beq.n	80040ae <HAL_RCC_GetSysClockFreq+0x3a>
 80040a6:	e0db      	b.n	8004260 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040a8:	4b73      	ldr	r3, [pc, #460]	; (8004278 <HAL_RCC_GetSysClockFreq+0x204>)
 80040aa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80040ac:	e0db      	b.n	8004266 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040ae:	4b73      	ldr	r3, [pc, #460]	; (800427c <HAL_RCC_GetSysClockFreq+0x208>)
 80040b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80040b2:	e0d8      	b.n	8004266 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040b4:	4b6f      	ldr	r3, [pc, #444]	; (8004274 <HAL_RCC_GetSysClockFreq+0x200>)
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040bc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040be:	4b6d      	ldr	r3, [pc, #436]	; (8004274 <HAL_RCC_GetSysClockFreq+0x200>)
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d063      	beq.n	8004192 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040ca:	4b6a      	ldr	r3, [pc, #424]	; (8004274 <HAL_RCC_GetSysClockFreq+0x200>)
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	099b      	lsrs	r3, r3, #6
 80040d0:	2200      	movs	r2, #0
 80040d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80040d4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80040d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040dc:	633b      	str	r3, [r7, #48]	; 0x30
 80040de:	2300      	movs	r3, #0
 80040e0:	637b      	str	r3, [r7, #52]	; 0x34
 80040e2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80040e6:	4622      	mov	r2, r4
 80040e8:	462b      	mov	r3, r5
 80040ea:	f04f 0000 	mov.w	r0, #0
 80040ee:	f04f 0100 	mov.w	r1, #0
 80040f2:	0159      	lsls	r1, r3, #5
 80040f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040f8:	0150      	lsls	r0, r2, #5
 80040fa:	4602      	mov	r2, r0
 80040fc:	460b      	mov	r3, r1
 80040fe:	4621      	mov	r1, r4
 8004100:	1a51      	subs	r1, r2, r1
 8004102:	6139      	str	r1, [r7, #16]
 8004104:	4629      	mov	r1, r5
 8004106:	eb63 0301 	sbc.w	r3, r3, r1
 800410a:	617b      	str	r3, [r7, #20]
 800410c:	f04f 0200 	mov.w	r2, #0
 8004110:	f04f 0300 	mov.w	r3, #0
 8004114:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004118:	4659      	mov	r1, fp
 800411a:	018b      	lsls	r3, r1, #6
 800411c:	4651      	mov	r1, sl
 800411e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004122:	4651      	mov	r1, sl
 8004124:	018a      	lsls	r2, r1, #6
 8004126:	4651      	mov	r1, sl
 8004128:	ebb2 0801 	subs.w	r8, r2, r1
 800412c:	4659      	mov	r1, fp
 800412e:	eb63 0901 	sbc.w	r9, r3, r1
 8004132:	f04f 0200 	mov.w	r2, #0
 8004136:	f04f 0300 	mov.w	r3, #0
 800413a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800413e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004142:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004146:	4690      	mov	r8, r2
 8004148:	4699      	mov	r9, r3
 800414a:	4623      	mov	r3, r4
 800414c:	eb18 0303 	adds.w	r3, r8, r3
 8004150:	60bb      	str	r3, [r7, #8]
 8004152:	462b      	mov	r3, r5
 8004154:	eb49 0303 	adc.w	r3, r9, r3
 8004158:	60fb      	str	r3, [r7, #12]
 800415a:	f04f 0200 	mov.w	r2, #0
 800415e:	f04f 0300 	mov.w	r3, #0
 8004162:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004166:	4629      	mov	r1, r5
 8004168:	024b      	lsls	r3, r1, #9
 800416a:	4621      	mov	r1, r4
 800416c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004170:	4621      	mov	r1, r4
 8004172:	024a      	lsls	r2, r1, #9
 8004174:	4610      	mov	r0, r2
 8004176:	4619      	mov	r1, r3
 8004178:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800417a:	2200      	movs	r2, #0
 800417c:	62bb      	str	r3, [r7, #40]	; 0x28
 800417e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004180:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004184:	f7fc f87c 	bl	8000280 <__aeabi_uldivmod>
 8004188:	4602      	mov	r2, r0
 800418a:	460b      	mov	r3, r1
 800418c:	4613      	mov	r3, r2
 800418e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004190:	e058      	b.n	8004244 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004192:	4b38      	ldr	r3, [pc, #224]	; (8004274 <HAL_RCC_GetSysClockFreq+0x200>)
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	099b      	lsrs	r3, r3, #6
 8004198:	2200      	movs	r2, #0
 800419a:	4618      	mov	r0, r3
 800419c:	4611      	mov	r1, r2
 800419e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80041a2:	623b      	str	r3, [r7, #32]
 80041a4:	2300      	movs	r3, #0
 80041a6:	627b      	str	r3, [r7, #36]	; 0x24
 80041a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80041ac:	4642      	mov	r2, r8
 80041ae:	464b      	mov	r3, r9
 80041b0:	f04f 0000 	mov.w	r0, #0
 80041b4:	f04f 0100 	mov.w	r1, #0
 80041b8:	0159      	lsls	r1, r3, #5
 80041ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041be:	0150      	lsls	r0, r2, #5
 80041c0:	4602      	mov	r2, r0
 80041c2:	460b      	mov	r3, r1
 80041c4:	4641      	mov	r1, r8
 80041c6:	ebb2 0a01 	subs.w	sl, r2, r1
 80041ca:	4649      	mov	r1, r9
 80041cc:	eb63 0b01 	sbc.w	fp, r3, r1
 80041d0:	f04f 0200 	mov.w	r2, #0
 80041d4:	f04f 0300 	mov.w	r3, #0
 80041d8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80041dc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80041e0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80041e4:	ebb2 040a 	subs.w	r4, r2, sl
 80041e8:	eb63 050b 	sbc.w	r5, r3, fp
 80041ec:	f04f 0200 	mov.w	r2, #0
 80041f0:	f04f 0300 	mov.w	r3, #0
 80041f4:	00eb      	lsls	r3, r5, #3
 80041f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041fa:	00e2      	lsls	r2, r4, #3
 80041fc:	4614      	mov	r4, r2
 80041fe:	461d      	mov	r5, r3
 8004200:	4643      	mov	r3, r8
 8004202:	18e3      	adds	r3, r4, r3
 8004204:	603b      	str	r3, [r7, #0]
 8004206:	464b      	mov	r3, r9
 8004208:	eb45 0303 	adc.w	r3, r5, r3
 800420c:	607b      	str	r3, [r7, #4]
 800420e:	f04f 0200 	mov.w	r2, #0
 8004212:	f04f 0300 	mov.w	r3, #0
 8004216:	e9d7 4500 	ldrd	r4, r5, [r7]
 800421a:	4629      	mov	r1, r5
 800421c:	028b      	lsls	r3, r1, #10
 800421e:	4621      	mov	r1, r4
 8004220:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004224:	4621      	mov	r1, r4
 8004226:	028a      	lsls	r2, r1, #10
 8004228:	4610      	mov	r0, r2
 800422a:	4619      	mov	r1, r3
 800422c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800422e:	2200      	movs	r2, #0
 8004230:	61bb      	str	r3, [r7, #24]
 8004232:	61fa      	str	r2, [r7, #28]
 8004234:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004238:	f7fc f822 	bl	8000280 <__aeabi_uldivmod>
 800423c:	4602      	mov	r2, r0
 800423e:	460b      	mov	r3, r1
 8004240:	4613      	mov	r3, r2
 8004242:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004244:	4b0b      	ldr	r3, [pc, #44]	; (8004274 <HAL_RCC_GetSysClockFreq+0x200>)
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	0c1b      	lsrs	r3, r3, #16
 800424a:	f003 0303 	and.w	r3, r3, #3
 800424e:	3301      	adds	r3, #1
 8004250:	005b      	lsls	r3, r3, #1
 8004252:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004254:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004256:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004258:	fbb2 f3f3 	udiv	r3, r2, r3
 800425c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800425e:	e002      	b.n	8004266 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004260:	4b05      	ldr	r3, [pc, #20]	; (8004278 <HAL_RCC_GetSysClockFreq+0x204>)
 8004262:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004264:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004266:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004268:	4618      	mov	r0, r3
 800426a:	3750      	adds	r7, #80	; 0x50
 800426c:	46bd      	mov	sp, r7
 800426e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004272:	bf00      	nop
 8004274:	40023800 	.word	0x40023800
 8004278:	00f42400 	.word	0x00f42400
 800427c:	007a1200 	.word	0x007a1200

08004280 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004280:	b480      	push	{r7}
 8004282:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004284:	4b03      	ldr	r3, [pc, #12]	; (8004294 <HAL_RCC_GetHCLKFreq+0x14>)
 8004286:	681b      	ldr	r3, [r3, #0]
}
 8004288:	4618      	mov	r0, r3
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr
 8004292:	bf00      	nop
 8004294:	20000004 	.word	0x20000004

08004298 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800429c:	f7ff fff0 	bl	8004280 <HAL_RCC_GetHCLKFreq>
 80042a0:	4602      	mov	r2, r0
 80042a2:	4b05      	ldr	r3, [pc, #20]	; (80042b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	0a9b      	lsrs	r3, r3, #10
 80042a8:	f003 0307 	and.w	r3, r3, #7
 80042ac:	4903      	ldr	r1, [pc, #12]	; (80042bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80042ae:	5ccb      	ldrb	r3, [r1, r3]
 80042b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	40023800 	.word	0x40023800
 80042bc:	08006858 	.word	0x08006858

080042c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80042c4:	f7ff ffdc 	bl	8004280 <HAL_RCC_GetHCLKFreq>
 80042c8:	4602      	mov	r2, r0
 80042ca:	4b05      	ldr	r3, [pc, #20]	; (80042e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	0b5b      	lsrs	r3, r3, #13
 80042d0:	f003 0307 	and.w	r3, r3, #7
 80042d4:	4903      	ldr	r1, [pc, #12]	; (80042e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042d6:	5ccb      	ldrb	r3, [r1, r3]
 80042d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042dc:	4618      	mov	r0, r3
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	40023800 	.word	0x40023800
 80042e4:	08006858 	.word	0x08006858

080042e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d101      	bne.n	80042fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e041      	b.n	800437e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004300:	b2db      	uxtb	r3, r3
 8004302:	2b00      	cmp	r3, #0
 8004304:	d106      	bne.n	8004314 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f7fd fb18 	bl	8001944 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2202      	movs	r2, #2
 8004318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	3304      	adds	r3, #4
 8004324:	4619      	mov	r1, r3
 8004326:	4610      	mov	r0, r2
 8004328:	f000 fc4a 	bl	8004bc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	3708      	adds	r7, #8
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
	...

08004388 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004388:	b480      	push	{r7}
 800438a:	b085      	sub	sp, #20
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004396:	b2db      	uxtb	r3, r3
 8004398:	2b01      	cmp	r3, #1
 800439a:	d001      	beq.n	80043a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e044      	b.n	800442a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2202      	movs	r2, #2
 80043a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68da      	ldr	r2, [r3, #12]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f042 0201 	orr.w	r2, r2, #1
 80043b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a1e      	ldr	r2, [pc, #120]	; (8004438 <HAL_TIM_Base_Start_IT+0xb0>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d018      	beq.n	80043f4 <HAL_TIM_Base_Start_IT+0x6c>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043ca:	d013      	beq.n	80043f4 <HAL_TIM_Base_Start_IT+0x6c>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a1a      	ldr	r2, [pc, #104]	; (800443c <HAL_TIM_Base_Start_IT+0xb4>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d00e      	beq.n	80043f4 <HAL_TIM_Base_Start_IT+0x6c>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a19      	ldr	r2, [pc, #100]	; (8004440 <HAL_TIM_Base_Start_IT+0xb8>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d009      	beq.n	80043f4 <HAL_TIM_Base_Start_IT+0x6c>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a17      	ldr	r2, [pc, #92]	; (8004444 <HAL_TIM_Base_Start_IT+0xbc>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d004      	beq.n	80043f4 <HAL_TIM_Base_Start_IT+0x6c>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a16      	ldr	r2, [pc, #88]	; (8004448 <HAL_TIM_Base_Start_IT+0xc0>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d111      	bne.n	8004418 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	f003 0307 	and.w	r3, r3, #7
 80043fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2b06      	cmp	r3, #6
 8004404:	d010      	beq.n	8004428 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f042 0201 	orr.w	r2, r2, #1
 8004414:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004416:	e007      	b.n	8004428 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f042 0201 	orr.w	r2, r2, #1
 8004426:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004428:	2300      	movs	r3, #0
}
 800442a:	4618      	mov	r0, r3
 800442c:	3714      	adds	r7, #20
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	40010000 	.word	0x40010000
 800443c:	40000400 	.word	0x40000400
 8004440:	40000800 	.word	0x40000800
 8004444:	40000c00 	.word	0x40000c00
 8004448:	40014000 	.word	0x40014000

0800444c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d101      	bne.n	800445e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e041      	b.n	80044e2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004464:	b2db      	uxtb	r3, r3
 8004466:	2b00      	cmp	r3, #0
 8004468:	d106      	bne.n	8004478 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f7fd fa8c 	bl	8001990 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2202      	movs	r2, #2
 800447c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	3304      	adds	r3, #4
 8004488:	4619      	mov	r1, r3
 800448a:	4610      	mov	r0, r2
 800448c:	f000 fb98 	bl	8004bc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044e0:	2300      	movs	r3, #0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3708      	adds	r7, #8
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
	...

080044ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d109      	bne.n	8004510 <HAL_TIM_PWM_Start+0x24>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004502:	b2db      	uxtb	r3, r3
 8004504:	2b01      	cmp	r3, #1
 8004506:	bf14      	ite	ne
 8004508:	2301      	movne	r3, #1
 800450a:	2300      	moveq	r3, #0
 800450c:	b2db      	uxtb	r3, r3
 800450e:	e022      	b.n	8004556 <HAL_TIM_PWM_Start+0x6a>
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	2b04      	cmp	r3, #4
 8004514:	d109      	bne.n	800452a <HAL_TIM_PWM_Start+0x3e>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800451c:	b2db      	uxtb	r3, r3
 800451e:	2b01      	cmp	r3, #1
 8004520:	bf14      	ite	ne
 8004522:	2301      	movne	r3, #1
 8004524:	2300      	moveq	r3, #0
 8004526:	b2db      	uxtb	r3, r3
 8004528:	e015      	b.n	8004556 <HAL_TIM_PWM_Start+0x6a>
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	2b08      	cmp	r3, #8
 800452e:	d109      	bne.n	8004544 <HAL_TIM_PWM_Start+0x58>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004536:	b2db      	uxtb	r3, r3
 8004538:	2b01      	cmp	r3, #1
 800453a:	bf14      	ite	ne
 800453c:	2301      	movne	r3, #1
 800453e:	2300      	moveq	r3, #0
 8004540:	b2db      	uxtb	r3, r3
 8004542:	e008      	b.n	8004556 <HAL_TIM_PWM_Start+0x6a>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800454a:	b2db      	uxtb	r3, r3
 800454c:	2b01      	cmp	r3, #1
 800454e:	bf14      	ite	ne
 8004550:	2301      	movne	r3, #1
 8004552:	2300      	moveq	r3, #0
 8004554:	b2db      	uxtb	r3, r3
 8004556:	2b00      	cmp	r3, #0
 8004558:	d001      	beq.n	800455e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e068      	b.n	8004630 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d104      	bne.n	800456e <HAL_TIM_PWM_Start+0x82>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2202      	movs	r2, #2
 8004568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800456c:	e013      	b.n	8004596 <HAL_TIM_PWM_Start+0xaa>
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	2b04      	cmp	r3, #4
 8004572:	d104      	bne.n	800457e <HAL_TIM_PWM_Start+0x92>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2202      	movs	r2, #2
 8004578:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800457c:	e00b      	b.n	8004596 <HAL_TIM_PWM_Start+0xaa>
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	2b08      	cmp	r3, #8
 8004582:	d104      	bne.n	800458e <HAL_TIM_PWM_Start+0xa2>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2202      	movs	r2, #2
 8004588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800458c:	e003      	b.n	8004596 <HAL_TIM_PWM_Start+0xaa>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2202      	movs	r2, #2
 8004592:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2201      	movs	r2, #1
 800459c:	6839      	ldr	r1, [r7, #0]
 800459e:	4618      	mov	r0, r3
 80045a0:	f000 fdb4 	bl	800510c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a23      	ldr	r2, [pc, #140]	; (8004638 <HAL_TIM_PWM_Start+0x14c>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d107      	bne.n	80045be <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a1d      	ldr	r2, [pc, #116]	; (8004638 <HAL_TIM_PWM_Start+0x14c>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d018      	beq.n	80045fa <HAL_TIM_PWM_Start+0x10e>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045d0:	d013      	beq.n	80045fa <HAL_TIM_PWM_Start+0x10e>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a19      	ldr	r2, [pc, #100]	; (800463c <HAL_TIM_PWM_Start+0x150>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d00e      	beq.n	80045fa <HAL_TIM_PWM_Start+0x10e>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a17      	ldr	r2, [pc, #92]	; (8004640 <HAL_TIM_PWM_Start+0x154>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d009      	beq.n	80045fa <HAL_TIM_PWM_Start+0x10e>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a16      	ldr	r2, [pc, #88]	; (8004644 <HAL_TIM_PWM_Start+0x158>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d004      	beq.n	80045fa <HAL_TIM_PWM_Start+0x10e>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a14      	ldr	r2, [pc, #80]	; (8004648 <HAL_TIM_PWM_Start+0x15c>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d111      	bne.n	800461e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	f003 0307 	and.w	r3, r3, #7
 8004604:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2b06      	cmp	r3, #6
 800460a:	d010      	beq.n	800462e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f042 0201 	orr.w	r2, r2, #1
 800461a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800461c:	e007      	b.n	800462e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f042 0201 	orr.w	r2, r2, #1
 800462c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800462e:	2300      	movs	r3, #0
}
 8004630:	4618      	mov	r0, r3
 8004632:	3710      	adds	r7, #16
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	40010000 	.word	0x40010000
 800463c:	40000400 	.word	0x40000400
 8004640:	40000800 	.word	0x40000800
 8004644:	40000c00 	.word	0x40000c00
 8004648:	40014000 	.word	0x40014000

0800464c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	691b      	ldr	r3, [r3, #16]
 800465a:	f003 0302 	and.w	r3, r3, #2
 800465e:	2b02      	cmp	r3, #2
 8004660:	d122      	bne.n	80046a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	f003 0302 	and.w	r3, r3, #2
 800466c:	2b02      	cmp	r3, #2
 800466e:	d11b      	bne.n	80046a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f06f 0202 	mvn.w	r2, #2
 8004678:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2201      	movs	r2, #1
 800467e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	699b      	ldr	r3, [r3, #24]
 8004686:	f003 0303 	and.w	r3, r3, #3
 800468a:	2b00      	cmp	r3, #0
 800468c:	d003      	beq.n	8004696 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 fa77 	bl	8004b82 <HAL_TIM_IC_CaptureCallback>
 8004694:	e005      	b.n	80046a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 fa69 	bl	8004b6e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f000 fa7a 	bl	8004b96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	f003 0304 	and.w	r3, r3, #4
 80046b2:	2b04      	cmp	r3, #4
 80046b4:	d122      	bne.n	80046fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	f003 0304 	and.w	r3, r3, #4
 80046c0:	2b04      	cmp	r3, #4
 80046c2:	d11b      	bne.n	80046fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f06f 0204 	mvn.w	r2, #4
 80046cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2202      	movs	r2, #2
 80046d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d003      	beq.n	80046ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f000 fa4d 	bl	8004b82 <HAL_TIM_IC_CaptureCallback>
 80046e8:	e005      	b.n	80046f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 fa3f 	bl	8004b6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f000 fa50 	bl	8004b96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	f003 0308 	and.w	r3, r3, #8
 8004706:	2b08      	cmp	r3, #8
 8004708:	d122      	bne.n	8004750 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	f003 0308 	and.w	r3, r3, #8
 8004714:	2b08      	cmp	r3, #8
 8004716:	d11b      	bne.n	8004750 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f06f 0208 	mvn.w	r2, #8
 8004720:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2204      	movs	r2, #4
 8004726:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	69db      	ldr	r3, [r3, #28]
 800472e:	f003 0303 	and.w	r3, r3, #3
 8004732:	2b00      	cmp	r3, #0
 8004734:	d003      	beq.n	800473e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 fa23 	bl	8004b82 <HAL_TIM_IC_CaptureCallback>
 800473c:	e005      	b.n	800474a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 fa15 	bl	8004b6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f000 fa26 	bl	8004b96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	f003 0310 	and.w	r3, r3, #16
 800475a:	2b10      	cmp	r3, #16
 800475c:	d122      	bne.n	80047a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	f003 0310 	and.w	r3, r3, #16
 8004768:	2b10      	cmp	r3, #16
 800476a:	d11b      	bne.n	80047a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f06f 0210 	mvn.w	r2, #16
 8004774:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2208      	movs	r2, #8
 800477a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	69db      	ldr	r3, [r3, #28]
 8004782:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004786:	2b00      	cmp	r3, #0
 8004788:	d003      	beq.n	8004792 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f000 f9f9 	bl	8004b82 <HAL_TIM_IC_CaptureCallback>
 8004790:	e005      	b.n	800479e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 f9eb 	bl	8004b6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f000 f9fc 	bl	8004b96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	f003 0301 	and.w	r3, r3, #1
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d10e      	bne.n	80047d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	f003 0301 	and.w	r3, r3, #1
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d107      	bne.n	80047d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f06f 0201 	mvn.w	r2, #1
 80047c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f7fc fbf0 	bl	8000fb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047da:	2b80      	cmp	r3, #128	; 0x80
 80047dc:	d10e      	bne.n	80047fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047e8:	2b80      	cmp	r3, #128	; 0x80
 80047ea:	d107      	bne.n	80047fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80047f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 fd26 	bl	8005248 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004806:	2b40      	cmp	r3, #64	; 0x40
 8004808:	d10e      	bne.n	8004828 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004814:	2b40      	cmp	r3, #64	; 0x40
 8004816:	d107      	bne.n	8004828 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004820:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 f9c1 	bl	8004baa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	691b      	ldr	r3, [r3, #16]
 800482e:	f003 0320 	and.w	r3, r3, #32
 8004832:	2b20      	cmp	r3, #32
 8004834:	d10e      	bne.n	8004854 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	f003 0320 	and.w	r3, r3, #32
 8004840:	2b20      	cmp	r3, #32
 8004842:	d107      	bne.n	8004854 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f06f 0220 	mvn.w	r2, #32
 800484c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f000 fcf0 	bl	8005234 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004854:	bf00      	nop
 8004856:	3708      	adds	r7, #8
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}

0800485c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b086      	sub	sp, #24
 8004860:	af00      	add	r7, sp, #0
 8004862:	60f8      	str	r0, [r7, #12]
 8004864:	60b9      	str	r1, [r7, #8]
 8004866:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004868:	2300      	movs	r3, #0
 800486a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004872:	2b01      	cmp	r3, #1
 8004874:	d101      	bne.n	800487a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004876:	2302      	movs	r3, #2
 8004878:	e0ae      	b.n	80049d8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2201      	movs	r2, #1
 800487e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2b0c      	cmp	r3, #12
 8004886:	f200 809f 	bhi.w	80049c8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800488a:	a201      	add	r2, pc, #4	; (adr r2, 8004890 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800488c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004890:	080048c5 	.word	0x080048c5
 8004894:	080049c9 	.word	0x080049c9
 8004898:	080049c9 	.word	0x080049c9
 800489c:	080049c9 	.word	0x080049c9
 80048a0:	08004905 	.word	0x08004905
 80048a4:	080049c9 	.word	0x080049c9
 80048a8:	080049c9 	.word	0x080049c9
 80048ac:	080049c9 	.word	0x080049c9
 80048b0:	08004947 	.word	0x08004947
 80048b4:	080049c9 	.word	0x080049c9
 80048b8:	080049c9 	.word	0x080049c9
 80048bc:	080049c9 	.word	0x080049c9
 80048c0:	08004987 	.word	0x08004987
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68b9      	ldr	r1, [r7, #8]
 80048ca:	4618      	mov	r0, r3
 80048cc:	f000 f9f8 	bl	8004cc0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	699a      	ldr	r2, [r3, #24]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f042 0208 	orr.w	r2, r2, #8
 80048de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	699a      	ldr	r2, [r3, #24]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f022 0204 	bic.w	r2, r2, #4
 80048ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	6999      	ldr	r1, [r3, #24]
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	691a      	ldr	r2, [r3, #16]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	430a      	orrs	r2, r1
 8004900:	619a      	str	r2, [r3, #24]
      break;
 8004902:	e064      	b.n	80049ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	68b9      	ldr	r1, [r7, #8]
 800490a:	4618      	mov	r0, r3
 800490c:	f000 fa3e 	bl	8004d8c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	699a      	ldr	r2, [r3, #24]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800491e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	699a      	ldr	r2, [r3, #24]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800492e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	6999      	ldr	r1, [r3, #24]
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	021a      	lsls	r2, r3, #8
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	430a      	orrs	r2, r1
 8004942:	619a      	str	r2, [r3, #24]
      break;
 8004944:	e043      	b.n	80049ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	68b9      	ldr	r1, [r7, #8]
 800494c:	4618      	mov	r0, r3
 800494e:	f000 fa89 	bl	8004e64 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	69da      	ldr	r2, [r3, #28]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f042 0208 	orr.w	r2, r2, #8
 8004960:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	69da      	ldr	r2, [r3, #28]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f022 0204 	bic.w	r2, r2, #4
 8004970:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	69d9      	ldr	r1, [r3, #28]
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	691a      	ldr	r2, [r3, #16]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	430a      	orrs	r2, r1
 8004982:	61da      	str	r2, [r3, #28]
      break;
 8004984:	e023      	b.n	80049ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	68b9      	ldr	r1, [r7, #8]
 800498c:	4618      	mov	r0, r3
 800498e:	f000 fad3 	bl	8004f38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	69da      	ldr	r2, [r3, #28]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	69da      	ldr	r2, [r3, #28]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	69d9      	ldr	r1, [r3, #28]
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	691b      	ldr	r3, [r3, #16]
 80049bc:	021a      	lsls	r2, r3, #8
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	430a      	orrs	r2, r1
 80049c4:	61da      	str	r2, [r3, #28]
      break;
 80049c6:	e002      	b.n	80049ce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	75fb      	strb	r3, [r7, #23]
      break;
 80049cc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80049d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3718      	adds	r7, #24
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049ea:	2300      	movs	r3, #0
 80049ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d101      	bne.n	80049fc <HAL_TIM_ConfigClockSource+0x1c>
 80049f8:	2302      	movs	r3, #2
 80049fa:	e0b4      	b.n	8004b66 <HAL_TIM_ConfigClockSource+0x186>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2202      	movs	r2, #2
 8004a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004a1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a22:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68ba      	ldr	r2, [r7, #8]
 8004a2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a34:	d03e      	beq.n	8004ab4 <HAL_TIM_ConfigClockSource+0xd4>
 8004a36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a3a:	f200 8087 	bhi.w	8004b4c <HAL_TIM_ConfigClockSource+0x16c>
 8004a3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a42:	f000 8086 	beq.w	8004b52 <HAL_TIM_ConfigClockSource+0x172>
 8004a46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a4a:	d87f      	bhi.n	8004b4c <HAL_TIM_ConfigClockSource+0x16c>
 8004a4c:	2b70      	cmp	r3, #112	; 0x70
 8004a4e:	d01a      	beq.n	8004a86 <HAL_TIM_ConfigClockSource+0xa6>
 8004a50:	2b70      	cmp	r3, #112	; 0x70
 8004a52:	d87b      	bhi.n	8004b4c <HAL_TIM_ConfigClockSource+0x16c>
 8004a54:	2b60      	cmp	r3, #96	; 0x60
 8004a56:	d050      	beq.n	8004afa <HAL_TIM_ConfigClockSource+0x11a>
 8004a58:	2b60      	cmp	r3, #96	; 0x60
 8004a5a:	d877      	bhi.n	8004b4c <HAL_TIM_ConfigClockSource+0x16c>
 8004a5c:	2b50      	cmp	r3, #80	; 0x50
 8004a5e:	d03c      	beq.n	8004ada <HAL_TIM_ConfigClockSource+0xfa>
 8004a60:	2b50      	cmp	r3, #80	; 0x50
 8004a62:	d873      	bhi.n	8004b4c <HAL_TIM_ConfigClockSource+0x16c>
 8004a64:	2b40      	cmp	r3, #64	; 0x40
 8004a66:	d058      	beq.n	8004b1a <HAL_TIM_ConfigClockSource+0x13a>
 8004a68:	2b40      	cmp	r3, #64	; 0x40
 8004a6a:	d86f      	bhi.n	8004b4c <HAL_TIM_ConfigClockSource+0x16c>
 8004a6c:	2b30      	cmp	r3, #48	; 0x30
 8004a6e:	d064      	beq.n	8004b3a <HAL_TIM_ConfigClockSource+0x15a>
 8004a70:	2b30      	cmp	r3, #48	; 0x30
 8004a72:	d86b      	bhi.n	8004b4c <HAL_TIM_ConfigClockSource+0x16c>
 8004a74:	2b20      	cmp	r3, #32
 8004a76:	d060      	beq.n	8004b3a <HAL_TIM_ConfigClockSource+0x15a>
 8004a78:	2b20      	cmp	r3, #32
 8004a7a:	d867      	bhi.n	8004b4c <HAL_TIM_ConfigClockSource+0x16c>
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d05c      	beq.n	8004b3a <HAL_TIM_ConfigClockSource+0x15a>
 8004a80:	2b10      	cmp	r3, #16
 8004a82:	d05a      	beq.n	8004b3a <HAL_TIM_ConfigClockSource+0x15a>
 8004a84:	e062      	b.n	8004b4c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6818      	ldr	r0, [r3, #0]
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	6899      	ldr	r1, [r3, #8]
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	685a      	ldr	r2, [r3, #4]
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	f000 fb19 	bl	80050cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004aa8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	68ba      	ldr	r2, [r7, #8]
 8004ab0:	609a      	str	r2, [r3, #8]
      break;
 8004ab2:	e04f      	b.n	8004b54 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6818      	ldr	r0, [r3, #0]
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	6899      	ldr	r1, [r3, #8]
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	685a      	ldr	r2, [r3, #4]
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	f000 fb02 	bl	80050cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	689a      	ldr	r2, [r3, #8]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ad6:	609a      	str	r2, [r3, #8]
      break;
 8004ad8:	e03c      	b.n	8004b54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6818      	ldr	r0, [r3, #0]
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	6859      	ldr	r1, [r3, #4]
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	f000 fa76 	bl	8004fd8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	2150      	movs	r1, #80	; 0x50
 8004af2:	4618      	mov	r0, r3
 8004af4:	f000 facf 	bl	8005096 <TIM_ITRx_SetConfig>
      break;
 8004af8:	e02c      	b.n	8004b54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6818      	ldr	r0, [r3, #0]
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	6859      	ldr	r1, [r3, #4]
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	461a      	mov	r2, r3
 8004b08:	f000 fa95 	bl	8005036 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2160      	movs	r1, #96	; 0x60
 8004b12:	4618      	mov	r0, r3
 8004b14:	f000 fabf 	bl	8005096 <TIM_ITRx_SetConfig>
      break;
 8004b18:	e01c      	b.n	8004b54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6818      	ldr	r0, [r3, #0]
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	6859      	ldr	r1, [r3, #4]
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	461a      	mov	r2, r3
 8004b28:	f000 fa56 	bl	8004fd8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2140      	movs	r1, #64	; 0x40
 8004b32:	4618      	mov	r0, r3
 8004b34:	f000 faaf 	bl	8005096 <TIM_ITRx_SetConfig>
      break;
 8004b38:	e00c      	b.n	8004b54 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4619      	mov	r1, r3
 8004b44:	4610      	mov	r0, r2
 8004b46:	f000 faa6 	bl	8005096 <TIM_ITRx_SetConfig>
      break;
 8004b4a:	e003      	b.n	8004b54 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	73fb      	strb	r3, [r7, #15]
      break;
 8004b50:	e000      	b.n	8004b54 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004b52:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3710      	adds	r7, #16
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}

08004b6e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b6e:	b480      	push	{r7}
 8004b70:	b083      	sub	sp, #12
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b76:	bf00      	nop
 8004b78:	370c      	adds	r7, #12
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr

08004b82 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b82:	b480      	push	{r7}
 8004b84:	b083      	sub	sp, #12
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b8a:	bf00      	nop
 8004b8c:	370c      	adds	r7, #12
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr

08004b96 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b96:	b480      	push	{r7}
 8004b98:	b083      	sub	sp, #12
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b9e:	bf00      	nop
 8004ba0:	370c      	adds	r7, #12
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr

08004baa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004baa:	b480      	push	{r7}
 8004bac:	b083      	sub	sp, #12
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004bb2:	bf00      	nop
 8004bb4:	370c      	adds	r7, #12
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr
	...

08004bc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b085      	sub	sp, #20
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	4a34      	ldr	r2, [pc, #208]	; (8004ca4 <TIM_Base_SetConfig+0xe4>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d00f      	beq.n	8004bf8 <TIM_Base_SetConfig+0x38>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bde:	d00b      	beq.n	8004bf8 <TIM_Base_SetConfig+0x38>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4a31      	ldr	r2, [pc, #196]	; (8004ca8 <TIM_Base_SetConfig+0xe8>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d007      	beq.n	8004bf8 <TIM_Base_SetConfig+0x38>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	4a30      	ldr	r2, [pc, #192]	; (8004cac <TIM_Base_SetConfig+0xec>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d003      	beq.n	8004bf8 <TIM_Base_SetConfig+0x38>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	4a2f      	ldr	r2, [pc, #188]	; (8004cb0 <TIM_Base_SetConfig+0xf0>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d108      	bne.n	8004c0a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	68fa      	ldr	r2, [r7, #12]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a25      	ldr	r2, [pc, #148]	; (8004ca4 <TIM_Base_SetConfig+0xe4>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d01b      	beq.n	8004c4a <TIM_Base_SetConfig+0x8a>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c18:	d017      	beq.n	8004c4a <TIM_Base_SetConfig+0x8a>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a22      	ldr	r2, [pc, #136]	; (8004ca8 <TIM_Base_SetConfig+0xe8>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d013      	beq.n	8004c4a <TIM_Base_SetConfig+0x8a>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4a21      	ldr	r2, [pc, #132]	; (8004cac <TIM_Base_SetConfig+0xec>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d00f      	beq.n	8004c4a <TIM_Base_SetConfig+0x8a>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a20      	ldr	r2, [pc, #128]	; (8004cb0 <TIM_Base_SetConfig+0xf0>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d00b      	beq.n	8004c4a <TIM_Base_SetConfig+0x8a>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4a1f      	ldr	r2, [pc, #124]	; (8004cb4 <TIM_Base_SetConfig+0xf4>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d007      	beq.n	8004c4a <TIM_Base_SetConfig+0x8a>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4a1e      	ldr	r2, [pc, #120]	; (8004cb8 <TIM_Base_SetConfig+0xf8>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d003      	beq.n	8004c4a <TIM_Base_SetConfig+0x8a>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a1d      	ldr	r2, [pc, #116]	; (8004cbc <TIM_Base_SetConfig+0xfc>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d108      	bne.n	8004c5c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	68fa      	ldr	r2, [r7, #12]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	695b      	ldr	r3, [r3, #20]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	68fa      	ldr	r2, [r7, #12]
 8004c6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	689a      	ldr	r2, [r3, #8]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a08      	ldr	r2, [pc, #32]	; (8004ca4 <TIM_Base_SetConfig+0xe4>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d103      	bne.n	8004c90 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	691a      	ldr	r2, [r3, #16]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	615a      	str	r2, [r3, #20]
}
 8004c96:	bf00      	nop
 8004c98:	3714      	adds	r7, #20
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr
 8004ca2:	bf00      	nop
 8004ca4:	40010000 	.word	0x40010000
 8004ca8:	40000400 	.word	0x40000400
 8004cac:	40000800 	.word	0x40000800
 8004cb0:	40000c00 	.word	0x40000c00
 8004cb4:	40014000 	.word	0x40014000
 8004cb8:	40014400 	.word	0x40014400
 8004cbc:	40014800 	.word	0x40014800

08004cc0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b087      	sub	sp, #28
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a1b      	ldr	r3, [r3, #32]
 8004cce:	f023 0201 	bic.w	r2, r3, #1
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a1b      	ldr	r3, [r3, #32]
 8004cda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	699b      	ldr	r3, [r3, #24]
 8004ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f023 0303 	bic.w	r3, r3, #3
 8004cf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	68fa      	ldr	r2, [r7, #12]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	f023 0302 	bic.w	r3, r3, #2
 8004d08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	697a      	ldr	r2, [r7, #20]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4a1c      	ldr	r2, [pc, #112]	; (8004d88 <TIM_OC1_SetConfig+0xc8>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d10c      	bne.n	8004d36 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	f023 0308 	bic.w	r3, r3, #8
 8004d22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	697a      	ldr	r2, [r7, #20]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	f023 0304 	bic.w	r3, r3, #4
 8004d34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4a13      	ldr	r2, [pc, #76]	; (8004d88 <TIM_OC1_SetConfig+0xc8>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d111      	bne.n	8004d62 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	695b      	ldr	r3, [r3, #20]
 8004d52:	693a      	ldr	r2, [r7, #16]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	699b      	ldr	r3, [r3, #24]
 8004d5c:	693a      	ldr	r2, [r7, #16]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	693a      	ldr	r2, [r7, #16]
 8004d66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	68fa      	ldr	r2, [r7, #12]
 8004d6c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	685a      	ldr	r2, [r3, #4]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	697a      	ldr	r2, [r7, #20]
 8004d7a:	621a      	str	r2, [r3, #32]
}
 8004d7c:	bf00      	nop
 8004d7e:	371c      	adds	r7, #28
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr
 8004d88:	40010000 	.word	0x40010000

08004d8c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b087      	sub	sp, #28
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a1b      	ldr	r3, [r3, #32]
 8004d9a:	f023 0210 	bic.w	r2, r3, #16
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a1b      	ldr	r3, [r3, #32]
 8004da6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	699b      	ldr	r3, [r3, #24]
 8004db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	021b      	lsls	r3, r3, #8
 8004dca:	68fa      	ldr	r2, [r7, #12]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	f023 0320 	bic.w	r3, r3, #32
 8004dd6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	011b      	lsls	r3, r3, #4
 8004dde:	697a      	ldr	r2, [r7, #20]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a1e      	ldr	r2, [pc, #120]	; (8004e60 <TIM_OC2_SetConfig+0xd4>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d10d      	bne.n	8004e08 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004df2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	011b      	lsls	r3, r3, #4
 8004dfa:	697a      	ldr	r2, [r7, #20]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e06:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a15      	ldr	r2, [pc, #84]	; (8004e60 <TIM_OC2_SetConfig+0xd4>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d113      	bne.n	8004e38 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	695b      	ldr	r3, [r3, #20]
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	693a      	ldr	r2, [r7, #16]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	699b      	ldr	r3, [r3, #24]
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	693a      	ldr	r2, [r7, #16]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	693a      	ldr	r2, [r7, #16]
 8004e3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	68fa      	ldr	r2, [r7, #12]
 8004e42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	685a      	ldr	r2, [r3, #4]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	697a      	ldr	r2, [r7, #20]
 8004e50:	621a      	str	r2, [r3, #32]
}
 8004e52:	bf00      	nop
 8004e54:	371c      	adds	r7, #28
 8004e56:	46bd      	mov	sp, r7
 8004e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5c:	4770      	bx	lr
 8004e5e:	bf00      	nop
 8004e60:	40010000 	.word	0x40010000

08004e64 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b087      	sub	sp, #28
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a1b      	ldr	r3, [r3, #32]
 8004e72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a1b      	ldr	r3, [r3, #32]
 8004e7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	69db      	ldr	r3, [r3, #28]
 8004e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f023 0303 	bic.w	r3, r3, #3
 8004e9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	68fa      	ldr	r2, [r7, #12]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004eac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	021b      	lsls	r3, r3, #8
 8004eb4:	697a      	ldr	r2, [r7, #20]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a1d      	ldr	r2, [pc, #116]	; (8004f34 <TIM_OC3_SetConfig+0xd0>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d10d      	bne.n	8004ede <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ec8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	021b      	lsls	r3, r3, #8
 8004ed0:	697a      	ldr	r2, [r7, #20]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004edc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a14      	ldr	r2, [pc, #80]	; (8004f34 <TIM_OC3_SetConfig+0xd0>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d113      	bne.n	8004f0e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004eec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ef4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	695b      	ldr	r3, [r3, #20]
 8004efa:	011b      	lsls	r3, r3, #4
 8004efc:	693a      	ldr	r2, [r7, #16]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	699b      	ldr	r3, [r3, #24]
 8004f06:	011b      	lsls	r3, r3, #4
 8004f08:	693a      	ldr	r2, [r7, #16]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	693a      	ldr	r2, [r7, #16]
 8004f12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	68fa      	ldr	r2, [r7, #12]
 8004f18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	685a      	ldr	r2, [r3, #4]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	697a      	ldr	r2, [r7, #20]
 8004f26:	621a      	str	r2, [r3, #32]
}
 8004f28:	bf00      	nop
 8004f2a:	371c      	adds	r7, #28
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr
 8004f34:	40010000 	.word	0x40010000

08004f38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b087      	sub	sp, #28
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a1b      	ldr	r3, [r3, #32]
 8004f46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a1b      	ldr	r3, [r3, #32]
 8004f52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	69db      	ldr	r3, [r3, #28]
 8004f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	021b      	lsls	r3, r3, #8
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	031b      	lsls	r3, r3, #12
 8004f8a:	693a      	ldr	r2, [r7, #16]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a10      	ldr	r2, [pc, #64]	; (8004fd4 <TIM_OC4_SetConfig+0x9c>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d109      	bne.n	8004fac <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	695b      	ldr	r3, [r3, #20]
 8004fa4:	019b      	lsls	r3, r3, #6
 8004fa6:	697a      	ldr	r2, [r7, #20]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	697a      	ldr	r2, [r7, #20]
 8004fb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	685a      	ldr	r2, [r3, #4]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	693a      	ldr	r2, [r7, #16]
 8004fc4:	621a      	str	r2, [r3, #32]
}
 8004fc6:	bf00      	nop
 8004fc8:	371c      	adds	r7, #28
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop
 8004fd4:	40010000 	.word	0x40010000

08004fd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b087      	sub	sp, #28
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	60b9      	str	r1, [r7, #8]
 8004fe2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6a1b      	ldr	r3, [r3, #32]
 8004fe8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	6a1b      	ldr	r3, [r3, #32]
 8004fee:	f023 0201 	bic.w	r2, r3, #1
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	699b      	ldr	r3, [r3, #24]
 8004ffa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005002:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	011b      	lsls	r3, r3, #4
 8005008:	693a      	ldr	r2, [r7, #16]
 800500a:	4313      	orrs	r3, r2
 800500c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	f023 030a 	bic.w	r3, r3, #10
 8005014:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005016:	697a      	ldr	r2, [r7, #20]
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	4313      	orrs	r3, r2
 800501c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	693a      	ldr	r2, [r7, #16]
 8005022:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	697a      	ldr	r2, [r7, #20]
 8005028:	621a      	str	r2, [r3, #32]
}
 800502a:	bf00      	nop
 800502c:	371c      	adds	r7, #28
 800502e:	46bd      	mov	sp, r7
 8005030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005034:	4770      	bx	lr

08005036 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005036:	b480      	push	{r7}
 8005038:	b087      	sub	sp, #28
 800503a:	af00      	add	r7, sp, #0
 800503c:	60f8      	str	r0, [r7, #12]
 800503e:	60b9      	str	r1, [r7, #8]
 8005040:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	6a1b      	ldr	r3, [r3, #32]
 8005046:	f023 0210 	bic.w	r2, r3, #16
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	699b      	ldr	r3, [r3, #24]
 8005052:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6a1b      	ldr	r3, [r3, #32]
 8005058:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005060:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	031b      	lsls	r3, r3, #12
 8005066:	697a      	ldr	r2, [r7, #20]
 8005068:	4313      	orrs	r3, r2
 800506a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005072:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	011b      	lsls	r3, r3, #4
 8005078:	693a      	ldr	r2, [r7, #16]
 800507a:	4313      	orrs	r3, r2
 800507c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	697a      	ldr	r2, [r7, #20]
 8005082:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	693a      	ldr	r2, [r7, #16]
 8005088:	621a      	str	r2, [r3, #32]
}
 800508a:	bf00      	nop
 800508c:	371c      	adds	r7, #28
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr

08005096 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005096:	b480      	push	{r7}
 8005098:	b085      	sub	sp, #20
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
 800509e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80050ae:	683a      	ldr	r2, [r7, #0]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	f043 0307 	orr.w	r3, r3, #7
 80050b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	68fa      	ldr	r2, [r7, #12]
 80050be:	609a      	str	r2, [r3, #8]
}
 80050c0:	bf00      	nop
 80050c2:	3714      	adds	r7, #20
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b087      	sub	sp, #28
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	607a      	str	r2, [r7, #4]
 80050d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	021a      	lsls	r2, r3, #8
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	431a      	orrs	r2, r3
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	697a      	ldr	r2, [r7, #20]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	697a      	ldr	r2, [r7, #20]
 80050fe:	609a      	str	r2, [r3, #8]
}
 8005100:	bf00      	nop
 8005102:	371c      	adds	r7, #28
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr

0800510c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800510c:	b480      	push	{r7}
 800510e:	b087      	sub	sp, #28
 8005110:	af00      	add	r7, sp, #0
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	f003 031f 	and.w	r3, r3, #31
 800511e:	2201      	movs	r2, #1
 8005120:	fa02 f303 	lsl.w	r3, r2, r3
 8005124:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6a1a      	ldr	r2, [r3, #32]
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	43db      	mvns	r3, r3
 800512e:	401a      	ands	r2, r3
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6a1a      	ldr	r2, [r3, #32]
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	f003 031f 	and.w	r3, r3, #31
 800513e:	6879      	ldr	r1, [r7, #4]
 8005140:	fa01 f303 	lsl.w	r3, r1, r3
 8005144:	431a      	orrs	r2, r3
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	621a      	str	r2, [r3, #32]
}
 800514a:	bf00      	nop
 800514c:	371c      	adds	r7, #28
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr
	...

08005158 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005158:	b480      	push	{r7}
 800515a:	b085      	sub	sp, #20
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005168:	2b01      	cmp	r3, #1
 800516a:	d101      	bne.n	8005170 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800516c:	2302      	movs	r3, #2
 800516e:	e050      	b.n	8005212 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2202      	movs	r2, #2
 800517c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005196:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	68fa      	ldr	r2, [r7, #12]
 800519e:	4313      	orrs	r3, r2
 80051a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	68fa      	ldr	r2, [r7, #12]
 80051a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a1c      	ldr	r2, [pc, #112]	; (8005220 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d018      	beq.n	80051e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051bc:	d013      	beq.n	80051e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a18      	ldr	r2, [pc, #96]	; (8005224 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d00e      	beq.n	80051e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a16      	ldr	r2, [pc, #88]	; (8005228 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d009      	beq.n	80051e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a15      	ldr	r2, [pc, #84]	; (800522c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d004      	beq.n	80051e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a13      	ldr	r2, [pc, #76]	; (8005230 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d10c      	bne.n	8005200 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	68ba      	ldr	r2, [r7, #8]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	68ba      	ldr	r2, [r7, #8]
 80051fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005210:	2300      	movs	r3, #0
}
 8005212:	4618      	mov	r0, r3
 8005214:	3714      	adds	r7, #20
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr
 800521e:	bf00      	nop
 8005220:	40010000 	.word	0x40010000
 8005224:	40000400 	.word	0x40000400
 8005228:	40000800 	.word	0x40000800
 800522c:	40000c00 	.word	0x40000c00
 8005230:	40014000 	.word	0x40014000

08005234 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005234:	b480      	push	{r7}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800523c:	bf00      	nop
 800523e:	370c      	adds	r7, #12
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005248:	b480      	push	{r7}
 800524a:	b083      	sub	sp, #12
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005250:	bf00      	nop
 8005252:	370c      	adds	r7, #12
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr

0800525c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b082      	sub	sp, #8
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d101      	bne.n	800526e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	e03f      	b.n	80052ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005274:	b2db      	uxtb	r3, r3
 8005276:	2b00      	cmp	r3, #0
 8005278:	d106      	bne.n	8005288 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f7fc fc0a 	bl	8001a9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2224      	movs	r2, #36	; 0x24
 800528c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	68da      	ldr	r2, [r3, #12]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800529e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f000 f829 	bl	80052f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	691a      	ldr	r2, [r3, #16]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80052b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	695a      	ldr	r2, [r3, #20]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68da      	ldr	r2, [r3, #12]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2220      	movs	r2, #32
 80052e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2220      	movs	r2, #32
 80052e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80052ec:	2300      	movs	r3, #0
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3708      	adds	r7, #8
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
	...

080052f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052fc:	b0c0      	sub	sp, #256	; 0x100
 80052fe:	af00      	add	r7, sp, #0
 8005300:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	691b      	ldr	r3, [r3, #16]
 800530c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005314:	68d9      	ldr	r1, [r3, #12]
 8005316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	ea40 0301 	orr.w	r3, r0, r1
 8005320:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005326:	689a      	ldr	r2, [r3, #8]
 8005328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800532c:	691b      	ldr	r3, [r3, #16]
 800532e:	431a      	orrs	r2, r3
 8005330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005334:	695b      	ldr	r3, [r3, #20]
 8005336:	431a      	orrs	r2, r3
 8005338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800533c:	69db      	ldr	r3, [r3, #28]
 800533e:	4313      	orrs	r3, r2
 8005340:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005350:	f021 010c 	bic.w	r1, r1, #12
 8005354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800535e:	430b      	orrs	r3, r1
 8005360:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	695b      	ldr	r3, [r3, #20]
 800536a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800536e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005372:	6999      	ldr	r1, [r3, #24]
 8005374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	ea40 0301 	orr.w	r3, r0, r1
 800537e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	4b8f      	ldr	r3, [pc, #572]	; (80055c4 <UART_SetConfig+0x2cc>)
 8005388:	429a      	cmp	r2, r3
 800538a:	d005      	beq.n	8005398 <UART_SetConfig+0xa0>
 800538c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	4b8d      	ldr	r3, [pc, #564]	; (80055c8 <UART_SetConfig+0x2d0>)
 8005394:	429a      	cmp	r2, r3
 8005396:	d104      	bne.n	80053a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005398:	f7fe ff92 	bl	80042c0 <HAL_RCC_GetPCLK2Freq>
 800539c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80053a0:	e003      	b.n	80053aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80053a2:	f7fe ff79 	bl	8004298 <HAL_RCC_GetPCLK1Freq>
 80053a6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053ae:	69db      	ldr	r3, [r3, #28]
 80053b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053b4:	f040 810c 	bne.w	80055d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80053b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053bc:	2200      	movs	r2, #0
 80053be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80053c2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80053c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80053ca:	4622      	mov	r2, r4
 80053cc:	462b      	mov	r3, r5
 80053ce:	1891      	adds	r1, r2, r2
 80053d0:	65b9      	str	r1, [r7, #88]	; 0x58
 80053d2:	415b      	adcs	r3, r3
 80053d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80053da:	4621      	mov	r1, r4
 80053dc:	eb12 0801 	adds.w	r8, r2, r1
 80053e0:	4629      	mov	r1, r5
 80053e2:	eb43 0901 	adc.w	r9, r3, r1
 80053e6:	f04f 0200 	mov.w	r2, #0
 80053ea:	f04f 0300 	mov.w	r3, #0
 80053ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80053f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80053f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80053fa:	4690      	mov	r8, r2
 80053fc:	4699      	mov	r9, r3
 80053fe:	4623      	mov	r3, r4
 8005400:	eb18 0303 	adds.w	r3, r8, r3
 8005404:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005408:	462b      	mov	r3, r5
 800540a:	eb49 0303 	adc.w	r3, r9, r3
 800540e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800541e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005422:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005426:	460b      	mov	r3, r1
 8005428:	18db      	adds	r3, r3, r3
 800542a:	653b      	str	r3, [r7, #80]	; 0x50
 800542c:	4613      	mov	r3, r2
 800542e:	eb42 0303 	adc.w	r3, r2, r3
 8005432:	657b      	str	r3, [r7, #84]	; 0x54
 8005434:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005438:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800543c:	f7fa ff20 	bl	8000280 <__aeabi_uldivmod>
 8005440:	4602      	mov	r2, r0
 8005442:	460b      	mov	r3, r1
 8005444:	4b61      	ldr	r3, [pc, #388]	; (80055cc <UART_SetConfig+0x2d4>)
 8005446:	fba3 2302 	umull	r2, r3, r3, r2
 800544a:	095b      	lsrs	r3, r3, #5
 800544c:	011c      	lsls	r4, r3, #4
 800544e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005452:	2200      	movs	r2, #0
 8005454:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005458:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800545c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005460:	4642      	mov	r2, r8
 8005462:	464b      	mov	r3, r9
 8005464:	1891      	adds	r1, r2, r2
 8005466:	64b9      	str	r1, [r7, #72]	; 0x48
 8005468:	415b      	adcs	r3, r3
 800546a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800546c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005470:	4641      	mov	r1, r8
 8005472:	eb12 0a01 	adds.w	sl, r2, r1
 8005476:	4649      	mov	r1, r9
 8005478:	eb43 0b01 	adc.w	fp, r3, r1
 800547c:	f04f 0200 	mov.w	r2, #0
 8005480:	f04f 0300 	mov.w	r3, #0
 8005484:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005488:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800548c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005490:	4692      	mov	sl, r2
 8005492:	469b      	mov	fp, r3
 8005494:	4643      	mov	r3, r8
 8005496:	eb1a 0303 	adds.w	r3, sl, r3
 800549a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800549e:	464b      	mov	r3, r9
 80054a0:	eb4b 0303 	adc.w	r3, fp, r3
 80054a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80054a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80054b4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80054b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80054bc:	460b      	mov	r3, r1
 80054be:	18db      	adds	r3, r3, r3
 80054c0:	643b      	str	r3, [r7, #64]	; 0x40
 80054c2:	4613      	mov	r3, r2
 80054c4:	eb42 0303 	adc.w	r3, r2, r3
 80054c8:	647b      	str	r3, [r7, #68]	; 0x44
 80054ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80054ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80054d2:	f7fa fed5 	bl	8000280 <__aeabi_uldivmod>
 80054d6:	4602      	mov	r2, r0
 80054d8:	460b      	mov	r3, r1
 80054da:	4611      	mov	r1, r2
 80054dc:	4b3b      	ldr	r3, [pc, #236]	; (80055cc <UART_SetConfig+0x2d4>)
 80054de:	fba3 2301 	umull	r2, r3, r3, r1
 80054e2:	095b      	lsrs	r3, r3, #5
 80054e4:	2264      	movs	r2, #100	; 0x64
 80054e6:	fb02 f303 	mul.w	r3, r2, r3
 80054ea:	1acb      	subs	r3, r1, r3
 80054ec:	00db      	lsls	r3, r3, #3
 80054ee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80054f2:	4b36      	ldr	r3, [pc, #216]	; (80055cc <UART_SetConfig+0x2d4>)
 80054f4:	fba3 2302 	umull	r2, r3, r3, r2
 80054f8:	095b      	lsrs	r3, r3, #5
 80054fa:	005b      	lsls	r3, r3, #1
 80054fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005500:	441c      	add	r4, r3
 8005502:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005506:	2200      	movs	r2, #0
 8005508:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800550c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005510:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005514:	4642      	mov	r2, r8
 8005516:	464b      	mov	r3, r9
 8005518:	1891      	adds	r1, r2, r2
 800551a:	63b9      	str	r1, [r7, #56]	; 0x38
 800551c:	415b      	adcs	r3, r3
 800551e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005520:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005524:	4641      	mov	r1, r8
 8005526:	1851      	adds	r1, r2, r1
 8005528:	6339      	str	r1, [r7, #48]	; 0x30
 800552a:	4649      	mov	r1, r9
 800552c:	414b      	adcs	r3, r1
 800552e:	637b      	str	r3, [r7, #52]	; 0x34
 8005530:	f04f 0200 	mov.w	r2, #0
 8005534:	f04f 0300 	mov.w	r3, #0
 8005538:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800553c:	4659      	mov	r1, fp
 800553e:	00cb      	lsls	r3, r1, #3
 8005540:	4651      	mov	r1, sl
 8005542:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005546:	4651      	mov	r1, sl
 8005548:	00ca      	lsls	r2, r1, #3
 800554a:	4610      	mov	r0, r2
 800554c:	4619      	mov	r1, r3
 800554e:	4603      	mov	r3, r0
 8005550:	4642      	mov	r2, r8
 8005552:	189b      	adds	r3, r3, r2
 8005554:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005558:	464b      	mov	r3, r9
 800555a:	460a      	mov	r2, r1
 800555c:	eb42 0303 	adc.w	r3, r2, r3
 8005560:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005570:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005574:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005578:	460b      	mov	r3, r1
 800557a:	18db      	adds	r3, r3, r3
 800557c:	62bb      	str	r3, [r7, #40]	; 0x28
 800557e:	4613      	mov	r3, r2
 8005580:	eb42 0303 	adc.w	r3, r2, r3
 8005584:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005586:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800558a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800558e:	f7fa fe77 	bl	8000280 <__aeabi_uldivmod>
 8005592:	4602      	mov	r2, r0
 8005594:	460b      	mov	r3, r1
 8005596:	4b0d      	ldr	r3, [pc, #52]	; (80055cc <UART_SetConfig+0x2d4>)
 8005598:	fba3 1302 	umull	r1, r3, r3, r2
 800559c:	095b      	lsrs	r3, r3, #5
 800559e:	2164      	movs	r1, #100	; 0x64
 80055a0:	fb01 f303 	mul.w	r3, r1, r3
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	00db      	lsls	r3, r3, #3
 80055a8:	3332      	adds	r3, #50	; 0x32
 80055aa:	4a08      	ldr	r2, [pc, #32]	; (80055cc <UART_SetConfig+0x2d4>)
 80055ac:	fba2 2303 	umull	r2, r3, r2, r3
 80055b0:	095b      	lsrs	r3, r3, #5
 80055b2:	f003 0207 	and.w	r2, r3, #7
 80055b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4422      	add	r2, r4
 80055be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80055c0:	e106      	b.n	80057d0 <UART_SetConfig+0x4d8>
 80055c2:	bf00      	nop
 80055c4:	40011000 	.word	0x40011000
 80055c8:	40011400 	.word	0x40011400
 80055cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80055d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055d4:	2200      	movs	r2, #0
 80055d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80055da:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80055de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80055e2:	4642      	mov	r2, r8
 80055e4:	464b      	mov	r3, r9
 80055e6:	1891      	adds	r1, r2, r2
 80055e8:	6239      	str	r1, [r7, #32]
 80055ea:	415b      	adcs	r3, r3
 80055ec:	627b      	str	r3, [r7, #36]	; 0x24
 80055ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80055f2:	4641      	mov	r1, r8
 80055f4:	1854      	adds	r4, r2, r1
 80055f6:	4649      	mov	r1, r9
 80055f8:	eb43 0501 	adc.w	r5, r3, r1
 80055fc:	f04f 0200 	mov.w	r2, #0
 8005600:	f04f 0300 	mov.w	r3, #0
 8005604:	00eb      	lsls	r3, r5, #3
 8005606:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800560a:	00e2      	lsls	r2, r4, #3
 800560c:	4614      	mov	r4, r2
 800560e:	461d      	mov	r5, r3
 8005610:	4643      	mov	r3, r8
 8005612:	18e3      	adds	r3, r4, r3
 8005614:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005618:	464b      	mov	r3, r9
 800561a:	eb45 0303 	adc.w	r3, r5, r3
 800561e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800562e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005632:	f04f 0200 	mov.w	r2, #0
 8005636:	f04f 0300 	mov.w	r3, #0
 800563a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800563e:	4629      	mov	r1, r5
 8005640:	008b      	lsls	r3, r1, #2
 8005642:	4621      	mov	r1, r4
 8005644:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005648:	4621      	mov	r1, r4
 800564a:	008a      	lsls	r2, r1, #2
 800564c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005650:	f7fa fe16 	bl	8000280 <__aeabi_uldivmod>
 8005654:	4602      	mov	r2, r0
 8005656:	460b      	mov	r3, r1
 8005658:	4b60      	ldr	r3, [pc, #384]	; (80057dc <UART_SetConfig+0x4e4>)
 800565a:	fba3 2302 	umull	r2, r3, r3, r2
 800565e:	095b      	lsrs	r3, r3, #5
 8005660:	011c      	lsls	r4, r3, #4
 8005662:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005666:	2200      	movs	r2, #0
 8005668:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800566c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005670:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005674:	4642      	mov	r2, r8
 8005676:	464b      	mov	r3, r9
 8005678:	1891      	adds	r1, r2, r2
 800567a:	61b9      	str	r1, [r7, #24]
 800567c:	415b      	adcs	r3, r3
 800567e:	61fb      	str	r3, [r7, #28]
 8005680:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005684:	4641      	mov	r1, r8
 8005686:	1851      	adds	r1, r2, r1
 8005688:	6139      	str	r1, [r7, #16]
 800568a:	4649      	mov	r1, r9
 800568c:	414b      	adcs	r3, r1
 800568e:	617b      	str	r3, [r7, #20]
 8005690:	f04f 0200 	mov.w	r2, #0
 8005694:	f04f 0300 	mov.w	r3, #0
 8005698:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800569c:	4659      	mov	r1, fp
 800569e:	00cb      	lsls	r3, r1, #3
 80056a0:	4651      	mov	r1, sl
 80056a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056a6:	4651      	mov	r1, sl
 80056a8:	00ca      	lsls	r2, r1, #3
 80056aa:	4610      	mov	r0, r2
 80056ac:	4619      	mov	r1, r3
 80056ae:	4603      	mov	r3, r0
 80056b0:	4642      	mov	r2, r8
 80056b2:	189b      	adds	r3, r3, r2
 80056b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80056b8:	464b      	mov	r3, r9
 80056ba:	460a      	mov	r2, r1
 80056bc:	eb42 0303 	adc.w	r3, r2, r3
 80056c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80056c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80056ce:	67fa      	str	r2, [r7, #124]	; 0x7c
 80056d0:	f04f 0200 	mov.w	r2, #0
 80056d4:	f04f 0300 	mov.w	r3, #0
 80056d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80056dc:	4649      	mov	r1, r9
 80056de:	008b      	lsls	r3, r1, #2
 80056e0:	4641      	mov	r1, r8
 80056e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056e6:	4641      	mov	r1, r8
 80056e8:	008a      	lsls	r2, r1, #2
 80056ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80056ee:	f7fa fdc7 	bl	8000280 <__aeabi_uldivmod>
 80056f2:	4602      	mov	r2, r0
 80056f4:	460b      	mov	r3, r1
 80056f6:	4611      	mov	r1, r2
 80056f8:	4b38      	ldr	r3, [pc, #224]	; (80057dc <UART_SetConfig+0x4e4>)
 80056fa:	fba3 2301 	umull	r2, r3, r3, r1
 80056fe:	095b      	lsrs	r3, r3, #5
 8005700:	2264      	movs	r2, #100	; 0x64
 8005702:	fb02 f303 	mul.w	r3, r2, r3
 8005706:	1acb      	subs	r3, r1, r3
 8005708:	011b      	lsls	r3, r3, #4
 800570a:	3332      	adds	r3, #50	; 0x32
 800570c:	4a33      	ldr	r2, [pc, #204]	; (80057dc <UART_SetConfig+0x4e4>)
 800570e:	fba2 2303 	umull	r2, r3, r2, r3
 8005712:	095b      	lsrs	r3, r3, #5
 8005714:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005718:	441c      	add	r4, r3
 800571a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800571e:	2200      	movs	r2, #0
 8005720:	673b      	str	r3, [r7, #112]	; 0x70
 8005722:	677a      	str	r2, [r7, #116]	; 0x74
 8005724:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005728:	4642      	mov	r2, r8
 800572a:	464b      	mov	r3, r9
 800572c:	1891      	adds	r1, r2, r2
 800572e:	60b9      	str	r1, [r7, #8]
 8005730:	415b      	adcs	r3, r3
 8005732:	60fb      	str	r3, [r7, #12]
 8005734:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005738:	4641      	mov	r1, r8
 800573a:	1851      	adds	r1, r2, r1
 800573c:	6039      	str	r1, [r7, #0]
 800573e:	4649      	mov	r1, r9
 8005740:	414b      	adcs	r3, r1
 8005742:	607b      	str	r3, [r7, #4]
 8005744:	f04f 0200 	mov.w	r2, #0
 8005748:	f04f 0300 	mov.w	r3, #0
 800574c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005750:	4659      	mov	r1, fp
 8005752:	00cb      	lsls	r3, r1, #3
 8005754:	4651      	mov	r1, sl
 8005756:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800575a:	4651      	mov	r1, sl
 800575c:	00ca      	lsls	r2, r1, #3
 800575e:	4610      	mov	r0, r2
 8005760:	4619      	mov	r1, r3
 8005762:	4603      	mov	r3, r0
 8005764:	4642      	mov	r2, r8
 8005766:	189b      	adds	r3, r3, r2
 8005768:	66bb      	str	r3, [r7, #104]	; 0x68
 800576a:	464b      	mov	r3, r9
 800576c:	460a      	mov	r2, r1
 800576e:	eb42 0303 	adc.w	r3, r2, r3
 8005772:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	663b      	str	r3, [r7, #96]	; 0x60
 800577e:	667a      	str	r2, [r7, #100]	; 0x64
 8005780:	f04f 0200 	mov.w	r2, #0
 8005784:	f04f 0300 	mov.w	r3, #0
 8005788:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800578c:	4649      	mov	r1, r9
 800578e:	008b      	lsls	r3, r1, #2
 8005790:	4641      	mov	r1, r8
 8005792:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005796:	4641      	mov	r1, r8
 8005798:	008a      	lsls	r2, r1, #2
 800579a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800579e:	f7fa fd6f 	bl	8000280 <__aeabi_uldivmod>
 80057a2:	4602      	mov	r2, r0
 80057a4:	460b      	mov	r3, r1
 80057a6:	4b0d      	ldr	r3, [pc, #52]	; (80057dc <UART_SetConfig+0x4e4>)
 80057a8:	fba3 1302 	umull	r1, r3, r3, r2
 80057ac:	095b      	lsrs	r3, r3, #5
 80057ae:	2164      	movs	r1, #100	; 0x64
 80057b0:	fb01 f303 	mul.w	r3, r1, r3
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	011b      	lsls	r3, r3, #4
 80057b8:	3332      	adds	r3, #50	; 0x32
 80057ba:	4a08      	ldr	r2, [pc, #32]	; (80057dc <UART_SetConfig+0x4e4>)
 80057bc:	fba2 2303 	umull	r2, r3, r2, r3
 80057c0:	095b      	lsrs	r3, r3, #5
 80057c2:	f003 020f 	and.w	r2, r3, #15
 80057c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4422      	add	r2, r4
 80057ce:	609a      	str	r2, [r3, #8]
}
 80057d0:	bf00      	nop
 80057d2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80057d6:	46bd      	mov	sp, r7
 80057d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057dc:	51eb851f 	.word	0x51eb851f

080057e0 <rand>:
 80057e0:	4b16      	ldr	r3, [pc, #88]	; (800583c <rand+0x5c>)
 80057e2:	b510      	push	{r4, lr}
 80057e4:	681c      	ldr	r4, [r3, #0]
 80057e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80057e8:	b9b3      	cbnz	r3, 8005818 <rand+0x38>
 80057ea:	2018      	movs	r0, #24
 80057ec:	f000 fa1c 	bl	8005c28 <malloc>
 80057f0:	4602      	mov	r2, r0
 80057f2:	6320      	str	r0, [r4, #48]	; 0x30
 80057f4:	b920      	cbnz	r0, 8005800 <rand+0x20>
 80057f6:	4b12      	ldr	r3, [pc, #72]	; (8005840 <rand+0x60>)
 80057f8:	4812      	ldr	r0, [pc, #72]	; (8005844 <rand+0x64>)
 80057fa:	2152      	movs	r1, #82	; 0x52
 80057fc:	f000 f9aa 	bl	8005b54 <__assert_func>
 8005800:	4911      	ldr	r1, [pc, #68]	; (8005848 <rand+0x68>)
 8005802:	4b12      	ldr	r3, [pc, #72]	; (800584c <rand+0x6c>)
 8005804:	e9c0 1300 	strd	r1, r3, [r0]
 8005808:	4b11      	ldr	r3, [pc, #68]	; (8005850 <rand+0x70>)
 800580a:	6083      	str	r3, [r0, #8]
 800580c:	230b      	movs	r3, #11
 800580e:	8183      	strh	r3, [r0, #12]
 8005810:	2100      	movs	r1, #0
 8005812:	2001      	movs	r0, #1
 8005814:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8005818:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800581a:	480e      	ldr	r0, [pc, #56]	; (8005854 <rand+0x74>)
 800581c:	690b      	ldr	r3, [r1, #16]
 800581e:	694c      	ldr	r4, [r1, #20]
 8005820:	4a0d      	ldr	r2, [pc, #52]	; (8005858 <rand+0x78>)
 8005822:	4358      	muls	r0, r3
 8005824:	fb02 0004 	mla	r0, r2, r4, r0
 8005828:	fba3 3202 	umull	r3, r2, r3, r2
 800582c:	3301      	adds	r3, #1
 800582e:	eb40 0002 	adc.w	r0, r0, r2
 8005832:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8005836:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800583a:	bd10      	pop	{r4, pc}
 800583c:	20000068 	.word	0x20000068
 8005840:	08006868 	.word	0x08006868
 8005844:	0800687f 	.word	0x0800687f
 8005848:	abcd330e 	.word	0xabcd330e
 800584c:	e66d1234 	.word	0xe66d1234
 8005850:	0005deec 	.word	0x0005deec
 8005854:	5851f42d 	.word	0x5851f42d
 8005858:	4c957f2d 	.word	0x4c957f2d

0800585c <std>:
 800585c:	2300      	movs	r3, #0
 800585e:	b510      	push	{r4, lr}
 8005860:	4604      	mov	r4, r0
 8005862:	e9c0 3300 	strd	r3, r3, [r0]
 8005866:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800586a:	6083      	str	r3, [r0, #8]
 800586c:	8181      	strh	r1, [r0, #12]
 800586e:	6643      	str	r3, [r0, #100]	; 0x64
 8005870:	81c2      	strh	r2, [r0, #14]
 8005872:	6183      	str	r3, [r0, #24]
 8005874:	4619      	mov	r1, r3
 8005876:	2208      	movs	r2, #8
 8005878:	305c      	adds	r0, #92	; 0x5c
 800587a:	f000 f8e2 	bl	8005a42 <memset>
 800587e:	4b05      	ldr	r3, [pc, #20]	; (8005894 <std+0x38>)
 8005880:	6263      	str	r3, [r4, #36]	; 0x24
 8005882:	4b05      	ldr	r3, [pc, #20]	; (8005898 <std+0x3c>)
 8005884:	62a3      	str	r3, [r4, #40]	; 0x28
 8005886:	4b05      	ldr	r3, [pc, #20]	; (800589c <std+0x40>)
 8005888:	62e3      	str	r3, [r4, #44]	; 0x2c
 800588a:	4b05      	ldr	r3, [pc, #20]	; (80058a0 <std+0x44>)
 800588c:	6224      	str	r4, [r4, #32]
 800588e:	6323      	str	r3, [r4, #48]	; 0x30
 8005890:	bd10      	pop	{r4, pc}
 8005892:	bf00      	nop
 8005894:	080059bd 	.word	0x080059bd
 8005898:	080059df 	.word	0x080059df
 800589c:	08005a17 	.word	0x08005a17
 80058a0:	08005a3b 	.word	0x08005a3b

080058a4 <stdio_exit_handler>:
 80058a4:	4a02      	ldr	r2, [pc, #8]	; (80058b0 <stdio_exit_handler+0xc>)
 80058a6:	4903      	ldr	r1, [pc, #12]	; (80058b4 <stdio_exit_handler+0x10>)
 80058a8:	4803      	ldr	r0, [pc, #12]	; (80058b8 <stdio_exit_handler+0x14>)
 80058aa:	f000 b869 	b.w	8005980 <_fwalk_sglue>
 80058ae:	bf00      	nop
 80058b0:	20000010 	.word	0x20000010
 80058b4:	08005e9d 	.word	0x08005e9d
 80058b8:	2000001c 	.word	0x2000001c

080058bc <cleanup_stdio>:
 80058bc:	6841      	ldr	r1, [r0, #4]
 80058be:	4b0c      	ldr	r3, [pc, #48]	; (80058f0 <cleanup_stdio+0x34>)
 80058c0:	4299      	cmp	r1, r3
 80058c2:	b510      	push	{r4, lr}
 80058c4:	4604      	mov	r4, r0
 80058c6:	d001      	beq.n	80058cc <cleanup_stdio+0x10>
 80058c8:	f000 fae8 	bl	8005e9c <_fflush_r>
 80058cc:	68a1      	ldr	r1, [r4, #8]
 80058ce:	4b09      	ldr	r3, [pc, #36]	; (80058f4 <cleanup_stdio+0x38>)
 80058d0:	4299      	cmp	r1, r3
 80058d2:	d002      	beq.n	80058da <cleanup_stdio+0x1e>
 80058d4:	4620      	mov	r0, r4
 80058d6:	f000 fae1 	bl	8005e9c <_fflush_r>
 80058da:	68e1      	ldr	r1, [r4, #12]
 80058dc:	4b06      	ldr	r3, [pc, #24]	; (80058f8 <cleanup_stdio+0x3c>)
 80058de:	4299      	cmp	r1, r3
 80058e0:	d004      	beq.n	80058ec <cleanup_stdio+0x30>
 80058e2:	4620      	mov	r0, r4
 80058e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058e8:	f000 bad8 	b.w	8005e9c <_fflush_r>
 80058ec:	bd10      	pop	{r4, pc}
 80058ee:	bf00      	nop
 80058f0:	20000270 	.word	0x20000270
 80058f4:	200002d8 	.word	0x200002d8
 80058f8:	20000340 	.word	0x20000340

080058fc <global_stdio_init.part.0>:
 80058fc:	b510      	push	{r4, lr}
 80058fe:	4b0b      	ldr	r3, [pc, #44]	; (800592c <global_stdio_init.part.0+0x30>)
 8005900:	4c0b      	ldr	r4, [pc, #44]	; (8005930 <global_stdio_init.part.0+0x34>)
 8005902:	4a0c      	ldr	r2, [pc, #48]	; (8005934 <global_stdio_init.part.0+0x38>)
 8005904:	601a      	str	r2, [r3, #0]
 8005906:	4620      	mov	r0, r4
 8005908:	2200      	movs	r2, #0
 800590a:	2104      	movs	r1, #4
 800590c:	f7ff ffa6 	bl	800585c <std>
 8005910:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005914:	2201      	movs	r2, #1
 8005916:	2109      	movs	r1, #9
 8005918:	f7ff ffa0 	bl	800585c <std>
 800591c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005920:	2202      	movs	r2, #2
 8005922:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005926:	2112      	movs	r1, #18
 8005928:	f7ff bf98 	b.w	800585c <std>
 800592c:	200003a8 	.word	0x200003a8
 8005930:	20000270 	.word	0x20000270
 8005934:	080058a5 	.word	0x080058a5

08005938 <__sfp_lock_acquire>:
 8005938:	4801      	ldr	r0, [pc, #4]	; (8005940 <__sfp_lock_acquire+0x8>)
 800593a:	f000 b8fb 	b.w	8005b34 <__retarget_lock_acquire_recursive>
 800593e:	bf00      	nop
 8005940:	200003b1 	.word	0x200003b1

08005944 <__sfp_lock_release>:
 8005944:	4801      	ldr	r0, [pc, #4]	; (800594c <__sfp_lock_release+0x8>)
 8005946:	f000 b8f6 	b.w	8005b36 <__retarget_lock_release_recursive>
 800594a:	bf00      	nop
 800594c:	200003b1 	.word	0x200003b1

08005950 <__sinit>:
 8005950:	b510      	push	{r4, lr}
 8005952:	4604      	mov	r4, r0
 8005954:	f7ff fff0 	bl	8005938 <__sfp_lock_acquire>
 8005958:	6a23      	ldr	r3, [r4, #32]
 800595a:	b11b      	cbz	r3, 8005964 <__sinit+0x14>
 800595c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005960:	f7ff bff0 	b.w	8005944 <__sfp_lock_release>
 8005964:	4b04      	ldr	r3, [pc, #16]	; (8005978 <__sinit+0x28>)
 8005966:	6223      	str	r3, [r4, #32]
 8005968:	4b04      	ldr	r3, [pc, #16]	; (800597c <__sinit+0x2c>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d1f5      	bne.n	800595c <__sinit+0xc>
 8005970:	f7ff ffc4 	bl	80058fc <global_stdio_init.part.0>
 8005974:	e7f2      	b.n	800595c <__sinit+0xc>
 8005976:	bf00      	nop
 8005978:	080058bd 	.word	0x080058bd
 800597c:	200003a8 	.word	0x200003a8

08005980 <_fwalk_sglue>:
 8005980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005984:	4607      	mov	r7, r0
 8005986:	4688      	mov	r8, r1
 8005988:	4614      	mov	r4, r2
 800598a:	2600      	movs	r6, #0
 800598c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005990:	f1b9 0901 	subs.w	r9, r9, #1
 8005994:	d505      	bpl.n	80059a2 <_fwalk_sglue+0x22>
 8005996:	6824      	ldr	r4, [r4, #0]
 8005998:	2c00      	cmp	r4, #0
 800599a:	d1f7      	bne.n	800598c <_fwalk_sglue+0xc>
 800599c:	4630      	mov	r0, r6
 800599e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059a2:	89ab      	ldrh	r3, [r5, #12]
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d907      	bls.n	80059b8 <_fwalk_sglue+0x38>
 80059a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80059ac:	3301      	adds	r3, #1
 80059ae:	d003      	beq.n	80059b8 <_fwalk_sglue+0x38>
 80059b0:	4629      	mov	r1, r5
 80059b2:	4638      	mov	r0, r7
 80059b4:	47c0      	blx	r8
 80059b6:	4306      	orrs	r6, r0
 80059b8:	3568      	adds	r5, #104	; 0x68
 80059ba:	e7e9      	b.n	8005990 <_fwalk_sglue+0x10>

080059bc <__sread>:
 80059bc:	b510      	push	{r4, lr}
 80059be:	460c      	mov	r4, r1
 80059c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059c4:	f000 f868 	bl	8005a98 <_read_r>
 80059c8:	2800      	cmp	r0, #0
 80059ca:	bfab      	itete	ge
 80059cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80059ce:	89a3      	ldrhlt	r3, [r4, #12]
 80059d0:	181b      	addge	r3, r3, r0
 80059d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80059d6:	bfac      	ite	ge
 80059d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80059da:	81a3      	strhlt	r3, [r4, #12]
 80059dc:	bd10      	pop	{r4, pc}

080059de <__swrite>:
 80059de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059e2:	461f      	mov	r7, r3
 80059e4:	898b      	ldrh	r3, [r1, #12]
 80059e6:	05db      	lsls	r3, r3, #23
 80059e8:	4605      	mov	r5, r0
 80059ea:	460c      	mov	r4, r1
 80059ec:	4616      	mov	r6, r2
 80059ee:	d505      	bpl.n	80059fc <__swrite+0x1e>
 80059f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059f4:	2302      	movs	r3, #2
 80059f6:	2200      	movs	r2, #0
 80059f8:	f000 f83c 	bl	8005a74 <_lseek_r>
 80059fc:	89a3      	ldrh	r3, [r4, #12]
 80059fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a06:	81a3      	strh	r3, [r4, #12]
 8005a08:	4632      	mov	r2, r6
 8005a0a:	463b      	mov	r3, r7
 8005a0c:	4628      	mov	r0, r5
 8005a0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a12:	f000 b853 	b.w	8005abc <_write_r>

08005a16 <__sseek>:
 8005a16:	b510      	push	{r4, lr}
 8005a18:	460c      	mov	r4, r1
 8005a1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a1e:	f000 f829 	bl	8005a74 <_lseek_r>
 8005a22:	1c43      	adds	r3, r0, #1
 8005a24:	89a3      	ldrh	r3, [r4, #12]
 8005a26:	bf15      	itete	ne
 8005a28:	6560      	strne	r0, [r4, #84]	; 0x54
 8005a2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005a2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005a32:	81a3      	strheq	r3, [r4, #12]
 8005a34:	bf18      	it	ne
 8005a36:	81a3      	strhne	r3, [r4, #12]
 8005a38:	bd10      	pop	{r4, pc}

08005a3a <__sclose>:
 8005a3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a3e:	f000 b809 	b.w	8005a54 <_close_r>

08005a42 <memset>:
 8005a42:	4402      	add	r2, r0
 8005a44:	4603      	mov	r3, r0
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d100      	bne.n	8005a4c <memset+0xa>
 8005a4a:	4770      	bx	lr
 8005a4c:	f803 1b01 	strb.w	r1, [r3], #1
 8005a50:	e7f9      	b.n	8005a46 <memset+0x4>
	...

08005a54 <_close_r>:
 8005a54:	b538      	push	{r3, r4, r5, lr}
 8005a56:	4d06      	ldr	r5, [pc, #24]	; (8005a70 <_close_r+0x1c>)
 8005a58:	2300      	movs	r3, #0
 8005a5a:	4604      	mov	r4, r0
 8005a5c:	4608      	mov	r0, r1
 8005a5e:	602b      	str	r3, [r5, #0]
 8005a60:	f7fb fe4b 	bl	80016fa <_close>
 8005a64:	1c43      	adds	r3, r0, #1
 8005a66:	d102      	bne.n	8005a6e <_close_r+0x1a>
 8005a68:	682b      	ldr	r3, [r5, #0]
 8005a6a:	b103      	cbz	r3, 8005a6e <_close_r+0x1a>
 8005a6c:	6023      	str	r3, [r4, #0]
 8005a6e:	bd38      	pop	{r3, r4, r5, pc}
 8005a70:	200003ac 	.word	0x200003ac

08005a74 <_lseek_r>:
 8005a74:	b538      	push	{r3, r4, r5, lr}
 8005a76:	4d07      	ldr	r5, [pc, #28]	; (8005a94 <_lseek_r+0x20>)
 8005a78:	4604      	mov	r4, r0
 8005a7a:	4608      	mov	r0, r1
 8005a7c:	4611      	mov	r1, r2
 8005a7e:	2200      	movs	r2, #0
 8005a80:	602a      	str	r2, [r5, #0]
 8005a82:	461a      	mov	r2, r3
 8005a84:	f7fb fe60 	bl	8001748 <_lseek>
 8005a88:	1c43      	adds	r3, r0, #1
 8005a8a:	d102      	bne.n	8005a92 <_lseek_r+0x1e>
 8005a8c:	682b      	ldr	r3, [r5, #0]
 8005a8e:	b103      	cbz	r3, 8005a92 <_lseek_r+0x1e>
 8005a90:	6023      	str	r3, [r4, #0]
 8005a92:	bd38      	pop	{r3, r4, r5, pc}
 8005a94:	200003ac 	.word	0x200003ac

08005a98 <_read_r>:
 8005a98:	b538      	push	{r3, r4, r5, lr}
 8005a9a:	4d07      	ldr	r5, [pc, #28]	; (8005ab8 <_read_r+0x20>)
 8005a9c:	4604      	mov	r4, r0
 8005a9e:	4608      	mov	r0, r1
 8005aa0:	4611      	mov	r1, r2
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	602a      	str	r2, [r5, #0]
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	f7fb fdee 	bl	8001688 <_read>
 8005aac:	1c43      	adds	r3, r0, #1
 8005aae:	d102      	bne.n	8005ab6 <_read_r+0x1e>
 8005ab0:	682b      	ldr	r3, [r5, #0]
 8005ab2:	b103      	cbz	r3, 8005ab6 <_read_r+0x1e>
 8005ab4:	6023      	str	r3, [r4, #0]
 8005ab6:	bd38      	pop	{r3, r4, r5, pc}
 8005ab8:	200003ac 	.word	0x200003ac

08005abc <_write_r>:
 8005abc:	b538      	push	{r3, r4, r5, lr}
 8005abe:	4d07      	ldr	r5, [pc, #28]	; (8005adc <_write_r+0x20>)
 8005ac0:	4604      	mov	r4, r0
 8005ac2:	4608      	mov	r0, r1
 8005ac4:	4611      	mov	r1, r2
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	602a      	str	r2, [r5, #0]
 8005aca:	461a      	mov	r2, r3
 8005acc:	f7fb fdf9 	bl	80016c2 <_write>
 8005ad0:	1c43      	adds	r3, r0, #1
 8005ad2:	d102      	bne.n	8005ada <_write_r+0x1e>
 8005ad4:	682b      	ldr	r3, [r5, #0]
 8005ad6:	b103      	cbz	r3, 8005ada <_write_r+0x1e>
 8005ad8:	6023      	str	r3, [r4, #0]
 8005ada:	bd38      	pop	{r3, r4, r5, pc}
 8005adc:	200003ac 	.word	0x200003ac

08005ae0 <__errno>:
 8005ae0:	4b01      	ldr	r3, [pc, #4]	; (8005ae8 <__errno+0x8>)
 8005ae2:	6818      	ldr	r0, [r3, #0]
 8005ae4:	4770      	bx	lr
 8005ae6:	bf00      	nop
 8005ae8:	20000068 	.word	0x20000068

08005aec <__libc_init_array>:
 8005aec:	b570      	push	{r4, r5, r6, lr}
 8005aee:	4d0d      	ldr	r5, [pc, #52]	; (8005b24 <__libc_init_array+0x38>)
 8005af0:	4c0d      	ldr	r4, [pc, #52]	; (8005b28 <__libc_init_array+0x3c>)
 8005af2:	1b64      	subs	r4, r4, r5
 8005af4:	10a4      	asrs	r4, r4, #2
 8005af6:	2600      	movs	r6, #0
 8005af8:	42a6      	cmp	r6, r4
 8005afa:	d109      	bne.n	8005b10 <__libc_init_array+0x24>
 8005afc:	4d0b      	ldr	r5, [pc, #44]	; (8005b2c <__libc_init_array+0x40>)
 8005afe:	4c0c      	ldr	r4, [pc, #48]	; (8005b30 <__libc_init_array+0x44>)
 8005b00:	f000 fe4e 	bl	80067a0 <_init>
 8005b04:	1b64      	subs	r4, r4, r5
 8005b06:	10a4      	asrs	r4, r4, #2
 8005b08:	2600      	movs	r6, #0
 8005b0a:	42a6      	cmp	r6, r4
 8005b0c:	d105      	bne.n	8005b1a <__libc_init_array+0x2e>
 8005b0e:	bd70      	pop	{r4, r5, r6, pc}
 8005b10:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b14:	4798      	blx	r3
 8005b16:	3601      	adds	r6, #1
 8005b18:	e7ee      	b.n	8005af8 <__libc_init_array+0xc>
 8005b1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b1e:	4798      	blx	r3
 8005b20:	3601      	adds	r6, #1
 8005b22:	e7f2      	b.n	8005b0a <__libc_init_array+0x1e>
 8005b24:	08006950 	.word	0x08006950
 8005b28:	08006950 	.word	0x08006950
 8005b2c:	08006950 	.word	0x08006950
 8005b30:	08006954 	.word	0x08006954

08005b34 <__retarget_lock_acquire_recursive>:
 8005b34:	4770      	bx	lr

08005b36 <__retarget_lock_release_recursive>:
 8005b36:	4770      	bx	lr

08005b38 <memcpy>:
 8005b38:	440a      	add	r2, r1
 8005b3a:	4291      	cmp	r1, r2
 8005b3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b40:	d100      	bne.n	8005b44 <memcpy+0xc>
 8005b42:	4770      	bx	lr
 8005b44:	b510      	push	{r4, lr}
 8005b46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b4e:	4291      	cmp	r1, r2
 8005b50:	d1f9      	bne.n	8005b46 <memcpy+0xe>
 8005b52:	bd10      	pop	{r4, pc}

08005b54 <__assert_func>:
 8005b54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005b56:	4614      	mov	r4, r2
 8005b58:	461a      	mov	r2, r3
 8005b5a:	4b09      	ldr	r3, [pc, #36]	; (8005b80 <__assert_func+0x2c>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4605      	mov	r5, r0
 8005b60:	68d8      	ldr	r0, [r3, #12]
 8005b62:	b14c      	cbz	r4, 8005b78 <__assert_func+0x24>
 8005b64:	4b07      	ldr	r3, [pc, #28]	; (8005b84 <__assert_func+0x30>)
 8005b66:	9100      	str	r1, [sp, #0]
 8005b68:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005b6c:	4906      	ldr	r1, [pc, #24]	; (8005b88 <__assert_func+0x34>)
 8005b6e:	462b      	mov	r3, r5
 8005b70:	f000 f9bc 	bl	8005eec <fiprintf>
 8005b74:	f000 f9dc 	bl	8005f30 <abort>
 8005b78:	4b04      	ldr	r3, [pc, #16]	; (8005b8c <__assert_func+0x38>)
 8005b7a:	461c      	mov	r4, r3
 8005b7c:	e7f3      	b.n	8005b66 <__assert_func+0x12>
 8005b7e:	bf00      	nop
 8005b80:	20000068 	.word	0x20000068
 8005b84:	080068d7 	.word	0x080068d7
 8005b88:	080068e4 	.word	0x080068e4
 8005b8c:	08006912 	.word	0x08006912

08005b90 <_free_r>:
 8005b90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b92:	2900      	cmp	r1, #0
 8005b94:	d044      	beq.n	8005c20 <_free_r+0x90>
 8005b96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b9a:	9001      	str	r0, [sp, #4]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	f1a1 0404 	sub.w	r4, r1, #4
 8005ba2:	bfb8      	it	lt
 8005ba4:	18e4      	addlt	r4, r4, r3
 8005ba6:	f000 f8e7 	bl	8005d78 <__malloc_lock>
 8005baa:	4a1e      	ldr	r2, [pc, #120]	; (8005c24 <_free_r+0x94>)
 8005bac:	9801      	ldr	r0, [sp, #4]
 8005bae:	6813      	ldr	r3, [r2, #0]
 8005bb0:	b933      	cbnz	r3, 8005bc0 <_free_r+0x30>
 8005bb2:	6063      	str	r3, [r4, #4]
 8005bb4:	6014      	str	r4, [r2, #0]
 8005bb6:	b003      	add	sp, #12
 8005bb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005bbc:	f000 b8e2 	b.w	8005d84 <__malloc_unlock>
 8005bc0:	42a3      	cmp	r3, r4
 8005bc2:	d908      	bls.n	8005bd6 <_free_r+0x46>
 8005bc4:	6825      	ldr	r5, [r4, #0]
 8005bc6:	1961      	adds	r1, r4, r5
 8005bc8:	428b      	cmp	r3, r1
 8005bca:	bf01      	itttt	eq
 8005bcc:	6819      	ldreq	r1, [r3, #0]
 8005bce:	685b      	ldreq	r3, [r3, #4]
 8005bd0:	1949      	addeq	r1, r1, r5
 8005bd2:	6021      	streq	r1, [r4, #0]
 8005bd4:	e7ed      	b.n	8005bb2 <_free_r+0x22>
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	b10b      	cbz	r3, 8005be0 <_free_r+0x50>
 8005bdc:	42a3      	cmp	r3, r4
 8005bde:	d9fa      	bls.n	8005bd6 <_free_r+0x46>
 8005be0:	6811      	ldr	r1, [r2, #0]
 8005be2:	1855      	adds	r5, r2, r1
 8005be4:	42a5      	cmp	r5, r4
 8005be6:	d10b      	bne.n	8005c00 <_free_r+0x70>
 8005be8:	6824      	ldr	r4, [r4, #0]
 8005bea:	4421      	add	r1, r4
 8005bec:	1854      	adds	r4, r2, r1
 8005bee:	42a3      	cmp	r3, r4
 8005bf0:	6011      	str	r1, [r2, #0]
 8005bf2:	d1e0      	bne.n	8005bb6 <_free_r+0x26>
 8005bf4:	681c      	ldr	r4, [r3, #0]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	6053      	str	r3, [r2, #4]
 8005bfa:	440c      	add	r4, r1
 8005bfc:	6014      	str	r4, [r2, #0]
 8005bfe:	e7da      	b.n	8005bb6 <_free_r+0x26>
 8005c00:	d902      	bls.n	8005c08 <_free_r+0x78>
 8005c02:	230c      	movs	r3, #12
 8005c04:	6003      	str	r3, [r0, #0]
 8005c06:	e7d6      	b.n	8005bb6 <_free_r+0x26>
 8005c08:	6825      	ldr	r5, [r4, #0]
 8005c0a:	1961      	adds	r1, r4, r5
 8005c0c:	428b      	cmp	r3, r1
 8005c0e:	bf04      	itt	eq
 8005c10:	6819      	ldreq	r1, [r3, #0]
 8005c12:	685b      	ldreq	r3, [r3, #4]
 8005c14:	6063      	str	r3, [r4, #4]
 8005c16:	bf04      	itt	eq
 8005c18:	1949      	addeq	r1, r1, r5
 8005c1a:	6021      	streq	r1, [r4, #0]
 8005c1c:	6054      	str	r4, [r2, #4]
 8005c1e:	e7ca      	b.n	8005bb6 <_free_r+0x26>
 8005c20:	b003      	add	sp, #12
 8005c22:	bd30      	pop	{r4, r5, pc}
 8005c24:	200003b4 	.word	0x200003b4

08005c28 <malloc>:
 8005c28:	4b02      	ldr	r3, [pc, #8]	; (8005c34 <malloc+0xc>)
 8005c2a:	4601      	mov	r1, r0
 8005c2c:	6818      	ldr	r0, [r3, #0]
 8005c2e:	f000 b823 	b.w	8005c78 <_malloc_r>
 8005c32:	bf00      	nop
 8005c34:	20000068 	.word	0x20000068

08005c38 <sbrk_aligned>:
 8005c38:	b570      	push	{r4, r5, r6, lr}
 8005c3a:	4e0e      	ldr	r6, [pc, #56]	; (8005c74 <sbrk_aligned+0x3c>)
 8005c3c:	460c      	mov	r4, r1
 8005c3e:	6831      	ldr	r1, [r6, #0]
 8005c40:	4605      	mov	r5, r0
 8005c42:	b911      	cbnz	r1, 8005c4a <sbrk_aligned+0x12>
 8005c44:	f000 f964 	bl	8005f10 <_sbrk_r>
 8005c48:	6030      	str	r0, [r6, #0]
 8005c4a:	4621      	mov	r1, r4
 8005c4c:	4628      	mov	r0, r5
 8005c4e:	f000 f95f 	bl	8005f10 <_sbrk_r>
 8005c52:	1c43      	adds	r3, r0, #1
 8005c54:	d00a      	beq.n	8005c6c <sbrk_aligned+0x34>
 8005c56:	1cc4      	adds	r4, r0, #3
 8005c58:	f024 0403 	bic.w	r4, r4, #3
 8005c5c:	42a0      	cmp	r0, r4
 8005c5e:	d007      	beq.n	8005c70 <sbrk_aligned+0x38>
 8005c60:	1a21      	subs	r1, r4, r0
 8005c62:	4628      	mov	r0, r5
 8005c64:	f000 f954 	bl	8005f10 <_sbrk_r>
 8005c68:	3001      	adds	r0, #1
 8005c6a:	d101      	bne.n	8005c70 <sbrk_aligned+0x38>
 8005c6c:	f04f 34ff 	mov.w	r4, #4294967295
 8005c70:	4620      	mov	r0, r4
 8005c72:	bd70      	pop	{r4, r5, r6, pc}
 8005c74:	200003b8 	.word	0x200003b8

08005c78 <_malloc_r>:
 8005c78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c7c:	1ccd      	adds	r5, r1, #3
 8005c7e:	f025 0503 	bic.w	r5, r5, #3
 8005c82:	3508      	adds	r5, #8
 8005c84:	2d0c      	cmp	r5, #12
 8005c86:	bf38      	it	cc
 8005c88:	250c      	movcc	r5, #12
 8005c8a:	2d00      	cmp	r5, #0
 8005c8c:	4607      	mov	r7, r0
 8005c8e:	db01      	blt.n	8005c94 <_malloc_r+0x1c>
 8005c90:	42a9      	cmp	r1, r5
 8005c92:	d905      	bls.n	8005ca0 <_malloc_r+0x28>
 8005c94:	230c      	movs	r3, #12
 8005c96:	603b      	str	r3, [r7, #0]
 8005c98:	2600      	movs	r6, #0
 8005c9a:	4630      	mov	r0, r6
 8005c9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ca0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005d74 <_malloc_r+0xfc>
 8005ca4:	f000 f868 	bl	8005d78 <__malloc_lock>
 8005ca8:	f8d8 3000 	ldr.w	r3, [r8]
 8005cac:	461c      	mov	r4, r3
 8005cae:	bb5c      	cbnz	r4, 8005d08 <_malloc_r+0x90>
 8005cb0:	4629      	mov	r1, r5
 8005cb2:	4638      	mov	r0, r7
 8005cb4:	f7ff ffc0 	bl	8005c38 <sbrk_aligned>
 8005cb8:	1c43      	adds	r3, r0, #1
 8005cba:	4604      	mov	r4, r0
 8005cbc:	d155      	bne.n	8005d6a <_malloc_r+0xf2>
 8005cbe:	f8d8 4000 	ldr.w	r4, [r8]
 8005cc2:	4626      	mov	r6, r4
 8005cc4:	2e00      	cmp	r6, #0
 8005cc6:	d145      	bne.n	8005d54 <_malloc_r+0xdc>
 8005cc8:	2c00      	cmp	r4, #0
 8005cca:	d048      	beq.n	8005d5e <_malloc_r+0xe6>
 8005ccc:	6823      	ldr	r3, [r4, #0]
 8005cce:	4631      	mov	r1, r6
 8005cd0:	4638      	mov	r0, r7
 8005cd2:	eb04 0903 	add.w	r9, r4, r3
 8005cd6:	f000 f91b 	bl	8005f10 <_sbrk_r>
 8005cda:	4581      	cmp	r9, r0
 8005cdc:	d13f      	bne.n	8005d5e <_malloc_r+0xe6>
 8005cde:	6821      	ldr	r1, [r4, #0]
 8005ce0:	1a6d      	subs	r5, r5, r1
 8005ce2:	4629      	mov	r1, r5
 8005ce4:	4638      	mov	r0, r7
 8005ce6:	f7ff ffa7 	bl	8005c38 <sbrk_aligned>
 8005cea:	3001      	adds	r0, #1
 8005cec:	d037      	beq.n	8005d5e <_malloc_r+0xe6>
 8005cee:	6823      	ldr	r3, [r4, #0]
 8005cf0:	442b      	add	r3, r5
 8005cf2:	6023      	str	r3, [r4, #0]
 8005cf4:	f8d8 3000 	ldr.w	r3, [r8]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d038      	beq.n	8005d6e <_malloc_r+0xf6>
 8005cfc:	685a      	ldr	r2, [r3, #4]
 8005cfe:	42a2      	cmp	r2, r4
 8005d00:	d12b      	bne.n	8005d5a <_malloc_r+0xe2>
 8005d02:	2200      	movs	r2, #0
 8005d04:	605a      	str	r2, [r3, #4]
 8005d06:	e00f      	b.n	8005d28 <_malloc_r+0xb0>
 8005d08:	6822      	ldr	r2, [r4, #0]
 8005d0a:	1b52      	subs	r2, r2, r5
 8005d0c:	d41f      	bmi.n	8005d4e <_malloc_r+0xd6>
 8005d0e:	2a0b      	cmp	r2, #11
 8005d10:	d917      	bls.n	8005d42 <_malloc_r+0xca>
 8005d12:	1961      	adds	r1, r4, r5
 8005d14:	42a3      	cmp	r3, r4
 8005d16:	6025      	str	r5, [r4, #0]
 8005d18:	bf18      	it	ne
 8005d1a:	6059      	strne	r1, [r3, #4]
 8005d1c:	6863      	ldr	r3, [r4, #4]
 8005d1e:	bf08      	it	eq
 8005d20:	f8c8 1000 	streq.w	r1, [r8]
 8005d24:	5162      	str	r2, [r4, r5]
 8005d26:	604b      	str	r3, [r1, #4]
 8005d28:	4638      	mov	r0, r7
 8005d2a:	f104 060b 	add.w	r6, r4, #11
 8005d2e:	f000 f829 	bl	8005d84 <__malloc_unlock>
 8005d32:	f026 0607 	bic.w	r6, r6, #7
 8005d36:	1d23      	adds	r3, r4, #4
 8005d38:	1af2      	subs	r2, r6, r3
 8005d3a:	d0ae      	beq.n	8005c9a <_malloc_r+0x22>
 8005d3c:	1b9b      	subs	r3, r3, r6
 8005d3e:	50a3      	str	r3, [r4, r2]
 8005d40:	e7ab      	b.n	8005c9a <_malloc_r+0x22>
 8005d42:	42a3      	cmp	r3, r4
 8005d44:	6862      	ldr	r2, [r4, #4]
 8005d46:	d1dd      	bne.n	8005d04 <_malloc_r+0x8c>
 8005d48:	f8c8 2000 	str.w	r2, [r8]
 8005d4c:	e7ec      	b.n	8005d28 <_malloc_r+0xb0>
 8005d4e:	4623      	mov	r3, r4
 8005d50:	6864      	ldr	r4, [r4, #4]
 8005d52:	e7ac      	b.n	8005cae <_malloc_r+0x36>
 8005d54:	4634      	mov	r4, r6
 8005d56:	6876      	ldr	r6, [r6, #4]
 8005d58:	e7b4      	b.n	8005cc4 <_malloc_r+0x4c>
 8005d5a:	4613      	mov	r3, r2
 8005d5c:	e7cc      	b.n	8005cf8 <_malloc_r+0x80>
 8005d5e:	230c      	movs	r3, #12
 8005d60:	603b      	str	r3, [r7, #0]
 8005d62:	4638      	mov	r0, r7
 8005d64:	f000 f80e 	bl	8005d84 <__malloc_unlock>
 8005d68:	e797      	b.n	8005c9a <_malloc_r+0x22>
 8005d6a:	6025      	str	r5, [r4, #0]
 8005d6c:	e7dc      	b.n	8005d28 <_malloc_r+0xb0>
 8005d6e:	605b      	str	r3, [r3, #4]
 8005d70:	deff      	udf	#255	; 0xff
 8005d72:	bf00      	nop
 8005d74:	200003b4 	.word	0x200003b4

08005d78 <__malloc_lock>:
 8005d78:	4801      	ldr	r0, [pc, #4]	; (8005d80 <__malloc_lock+0x8>)
 8005d7a:	f7ff bedb 	b.w	8005b34 <__retarget_lock_acquire_recursive>
 8005d7e:	bf00      	nop
 8005d80:	200003b0 	.word	0x200003b0

08005d84 <__malloc_unlock>:
 8005d84:	4801      	ldr	r0, [pc, #4]	; (8005d8c <__malloc_unlock+0x8>)
 8005d86:	f7ff bed6 	b.w	8005b36 <__retarget_lock_release_recursive>
 8005d8a:	bf00      	nop
 8005d8c:	200003b0 	.word	0x200003b0

08005d90 <__sflush_r>:
 8005d90:	898a      	ldrh	r2, [r1, #12]
 8005d92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d96:	4605      	mov	r5, r0
 8005d98:	0710      	lsls	r0, r2, #28
 8005d9a:	460c      	mov	r4, r1
 8005d9c:	d458      	bmi.n	8005e50 <__sflush_r+0xc0>
 8005d9e:	684b      	ldr	r3, [r1, #4]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	dc05      	bgt.n	8005db0 <__sflush_r+0x20>
 8005da4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	dc02      	bgt.n	8005db0 <__sflush_r+0x20>
 8005daa:	2000      	movs	r0, #0
 8005dac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005db0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005db2:	2e00      	cmp	r6, #0
 8005db4:	d0f9      	beq.n	8005daa <__sflush_r+0x1a>
 8005db6:	2300      	movs	r3, #0
 8005db8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005dbc:	682f      	ldr	r7, [r5, #0]
 8005dbe:	6a21      	ldr	r1, [r4, #32]
 8005dc0:	602b      	str	r3, [r5, #0]
 8005dc2:	d032      	beq.n	8005e2a <__sflush_r+0x9a>
 8005dc4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005dc6:	89a3      	ldrh	r3, [r4, #12]
 8005dc8:	075a      	lsls	r2, r3, #29
 8005dca:	d505      	bpl.n	8005dd8 <__sflush_r+0x48>
 8005dcc:	6863      	ldr	r3, [r4, #4]
 8005dce:	1ac0      	subs	r0, r0, r3
 8005dd0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005dd2:	b10b      	cbz	r3, 8005dd8 <__sflush_r+0x48>
 8005dd4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005dd6:	1ac0      	subs	r0, r0, r3
 8005dd8:	2300      	movs	r3, #0
 8005dda:	4602      	mov	r2, r0
 8005ddc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005dde:	6a21      	ldr	r1, [r4, #32]
 8005de0:	4628      	mov	r0, r5
 8005de2:	47b0      	blx	r6
 8005de4:	1c43      	adds	r3, r0, #1
 8005de6:	89a3      	ldrh	r3, [r4, #12]
 8005de8:	d106      	bne.n	8005df8 <__sflush_r+0x68>
 8005dea:	6829      	ldr	r1, [r5, #0]
 8005dec:	291d      	cmp	r1, #29
 8005dee:	d82b      	bhi.n	8005e48 <__sflush_r+0xb8>
 8005df0:	4a29      	ldr	r2, [pc, #164]	; (8005e98 <__sflush_r+0x108>)
 8005df2:	410a      	asrs	r2, r1
 8005df4:	07d6      	lsls	r6, r2, #31
 8005df6:	d427      	bmi.n	8005e48 <__sflush_r+0xb8>
 8005df8:	2200      	movs	r2, #0
 8005dfa:	6062      	str	r2, [r4, #4]
 8005dfc:	04d9      	lsls	r1, r3, #19
 8005dfe:	6922      	ldr	r2, [r4, #16]
 8005e00:	6022      	str	r2, [r4, #0]
 8005e02:	d504      	bpl.n	8005e0e <__sflush_r+0x7e>
 8005e04:	1c42      	adds	r2, r0, #1
 8005e06:	d101      	bne.n	8005e0c <__sflush_r+0x7c>
 8005e08:	682b      	ldr	r3, [r5, #0]
 8005e0a:	b903      	cbnz	r3, 8005e0e <__sflush_r+0x7e>
 8005e0c:	6560      	str	r0, [r4, #84]	; 0x54
 8005e0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e10:	602f      	str	r7, [r5, #0]
 8005e12:	2900      	cmp	r1, #0
 8005e14:	d0c9      	beq.n	8005daa <__sflush_r+0x1a>
 8005e16:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e1a:	4299      	cmp	r1, r3
 8005e1c:	d002      	beq.n	8005e24 <__sflush_r+0x94>
 8005e1e:	4628      	mov	r0, r5
 8005e20:	f7ff feb6 	bl	8005b90 <_free_r>
 8005e24:	2000      	movs	r0, #0
 8005e26:	6360      	str	r0, [r4, #52]	; 0x34
 8005e28:	e7c0      	b.n	8005dac <__sflush_r+0x1c>
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	4628      	mov	r0, r5
 8005e2e:	47b0      	blx	r6
 8005e30:	1c41      	adds	r1, r0, #1
 8005e32:	d1c8      	bne.n	8005dc6 <__sflush_r+0x36>
 8005e34:	682b      	ldr	r3, [r5, #0]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d0c5      	beq.n	8005dc6 <__sflush_r+0x36>
 8005e3a:	2b1d      	cmp	r3, #29
 8005e3c:	d001      	beq.n	8005e42 <__sflush_r+0xb2>
 8005e3e:	2b16      	cmp	r3, #22
 8005e40:	d101      	bne.n	8005e46 <__sflush_r+0xb6>
 8005e42:	602f      	str	r7, [r5, #0]
 8005e44:	e7b1      	b.n	8005daa <__sflush_r+0x1a>
 8005e46:	89a3      	ldrh	r3, [r4, #12]
 8005e48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e4c:	81a3      	strh	r3, [r4, #12]
 8005e4e:	e7ad      	b.n	8005dac <__sflush_r+0x1c>
 8005e50:	690f      	ldr	r7, [r1, #16]
 8005e52:	2f00      	cmp	r7, #0
 8005e54:	d0a9      	beq.n	8005daa <__sflush_r+0x1a>
 8005e56:	0793      	lsls	r3, r2, #30
 8005e58:	680e      	ldr	r6, [r1, #0]
 8005e5a:	bf08      	it	eq
 8005e5c:	694b      	ldreq	r3, [r1, #20]
 8005e5e:	600f      	str	r7, [r1, #0]
 8005e60:	bf18      	it	ne
 8005e62:	2300      	movne	r3, #0
 8005e64:	eba6 0807 	sub.w	r8, r6, r7
 8005e68:	608b      	str	r3, [r1, #8]
 8005e6a:	f1b8 0f00 	cmp.w	r8, #0
 8005e6e:	dd9c      	ble.n	8005daa <__sflush_r+0x1a>
 8005e70:	6a21      	ldr	r1, [r4, #32]
 8005e72:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005e74:	4643      	mov	r3, r8
 8005e76:	463a      	mov	r2, r7
 8005e78:	4628      	mov	r0, r5
 8005e7a:	47b0      	blx	r6
 8005e7c:	2800      	cmp	r0, #0
 8005e7e:	dc06      	bgt.n	8005e8e <__sflush_r+0xfe>
 8005e80:	89a3      	ldrh	r3, [r4, #12]
 8005e82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e86:	81a3      	strh	r3, [r4, #12]
 8005e88:	f04f 30ff 	mov.w	r0, #4294967295
 8005e8c:	e78e      	b.n	8005dac <__sflush_r+0x1c>
 8005e8e:	4407      	add	r7, r0
 8005e90:	eba8 0800 	sub.w	r8, r8, r0
 8005e94:	e7e9      	b.n	8005e6a <__sflush_r+0xda>
 8005e96:	bf00      	nop
 8005e98:	dfbffffe 	.word	0xdfbffffe

08005e9c <_fflush_r>:
 8005e9c:	b538      	push	{r3, r4, r5, lr}
 8005e9e:	690b      	ldr	r3, [r1, #16]
 8005ea0:	4605      	mov	r5, r0
 8005ea2:	460c      	mov	r4, r1
 8005ea4:	b913      	cbnz	r3, 8005eac <_fflush_r+0x10>
 8005ea6:	2500      	movs	r5, #0
 8005ea8:	4628      	mov	r0, r5
 8005eaa:	bd38      	pop	{r3, r4, r5, pc}
 8005eac:	b118      	cbz	r0, 8005eb6 <_fflush_r+0x1a>
 8005eae:	6a03      	ldr	r3, [r0, #32]
 8005eb0:	b90b      	cbnz	r3, 8005eb6 <_fflush_r+0x1a>
 8005eb2:	f7ff fd4d 	bl	8005950 <__sinit>
 8005eb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d0f3      	beq.n	8005ea6 <_fflush_r+0xa>
 8005ebe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005ec0:	07d0      	lsls	r0, r2, #31
 8005ec2:	d404      	bmi.n	8005ece <_fflush_r+0x32>
 8005ec4:	0599      	lsls	r1, r3, #22
 8005ec6:	d402      	bmi.n	8005ece <_fflush_r+0x32>
 8005ec8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005eca:	f7ff fe33 	bl	8005b34 <__retarget_lock_acquire_recursive>
 8005ece:	4628      	mov	r0, r5
 8005ed0:	4621      	mov	r1, r4
 8005ed2:	f7ff ff5d 	bl	8005d90 <__sflush_r>
 8005ed6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005ed8:	07da      	lsls	r2, r3, #31
 8005eda:	4605      	mov	r5, r0
 8005edc:	d4e4      	bmi.n	8005ea8 <_fflush_r+0xc>
 8005ede:	89a3      	ldrh	r3, [r4, #12]
 8005ee0:	059b      	lsls	r3, r3, #22
 8005ee2:	d4e1      	bmi.n	8005ea8 <_fflush_r+0xc>
 8005ee4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ee6:	f7ff fe26 	bl	8005b36 <__retarget_lock_release_recursive>
 8005eea:	e7dd      	b.n	8005ea8 <_fflush_r+0xc>

08005eec <fiprintf>:
 8005eec:	b40e      	push	{r1, r2, r3}
 8005eee:	b503      	push	{r0, r1, lr}
 8005ef0:	4601      	mov	r1, r0
 8005ef2:	ab03      	add	r3, sp, #12
 8005ef4:	4805      	ldr	r0, [pc, #20]	; (8005f0c <fiprintf+0x20>)
 8005ef6:	f853 2b04 	ldr.w	r2, [r3], #4
 8005efa:	6800      	ldr	r0, [r0, #0]
 8005efc:	9301      	str	r3, [sp, #4]
 8005efe:	f000 f847 	bl	8005f90 <_vfiprintf_r>
 8005f02:	b002      	add	sp, #8
 8005f04:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f08:	b003      	add	sp, #12
 8005f0a:	4770      	bx	lr
 8005f0c:	20000068 	.word	0x20000068

08005f10 <_sbrk_r>:
 8005f10:	b538      	push	{r3, r4, r5, lr}
 8005f12:	4d06      	ldr	r5, [pc, #24]	; (8005f2c <_sbrk_r+0x1c>)
 8005f14:	2300      	movs	r3, #0
 8005f16:	4604      	mov	r4, r0
 8005f18:	4608      	mov	r0, r1
 8005f1a:	602b      	str	r3, [r5, #0]
 8005f1c:	f7fb fc22 	bl	8001764 <_sbrk>
 8005f20:	1c43      	adds	r3, r0, #1
 8005f22:	d102      	bne.n	8005f2a <_sbrk_r+0x1a>
 8005f24:	682b      	ldr	r3, [r5, #0]
 8005f26:	b103      	cbz	r3, 8005f2a <_sbrk_r+0x1a>
 8005f28:	6023      	str	r3, [r4, #0]
 8005f2a:	bd38      	pop	{r3, r4, r5, pc}
 8005f2c:	200003ac 	.word	0x200003ac

08005f30 <abort>:
 8005f30:	b508      	push	{r3, lr}
 8005f32:	2006      	movs	r0, #6
 8005f34:	f000 fb94 	bl	8006660 <raise>
 8005f38:	2001      	movs	r0, #1
 8005f3a:	f7fb fb9b 	bl	8001674 <_exit>

08005f3e <__sfputc_r>:
 8005f3e:	6893      	ldr	r3, [r2, #8]
 8005f40:	3b01      	subs	r3, #1
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	b410      	push	{r4}
 8005f46:	6093      	str	r3, [r2, #8]
 8005f48:	da08      	bge.n	8005f5c <__sfputc_r+0x1e>
 8005f4a:	6994      	ldr	r4, [r2, #24]
 8005f4c:	42a3      	cmp	r3, r4
 8005f4e:	db01      	blt.n	8005f54 <__sfputc_r+0x16>
 8005f50:	290a      	cmp	r1, #10
 8005f52:	d103      	bne.n	8005f5c <__sfputc_r+0x1e>
 8005f54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f58:	f000 bac4 	b.w	80064e4 <__swbuf_r>
 8005f5c:	6813      	ldr	r3, [r2, #0]
 8005f5e:	1c58      	adds	r0, r3, #1
 8005f60:	6010      	str	r0, [r2, #0]
 8005f62:	7019      	strb	r1, [r3, #0]
 8005f64:	4608      	mov	r0, r1
 8005f66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f6a:	4770      	bx	lr

08005f6c <__sfputs_r>:
 8005f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f6e:	4606      	mov	r6, r0
 8005f70:	460f      	mov	r7, r1
 8005f72:	4614      	mov	r4, r2
 8005f74:	18d5      	adds	r5, r2, r3
 8005f76:	42ac      	cmp	r4, r5
 8005f78:	d101      	bne.n	8005f7e <__sfputs_r+0x12>
 8005f7a:	2000      	movs	r0, #0
 8005f7c:	e007      	b.n	8005f8e <__sfputs_r+0x22>
 8005f7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f82:	463a      	mov	r2, r7
 8005f84:	4630      	mov	r0, r6
 8005f86:	f7ff ffda 	bl	8005f3e <__sfputc_r>
 8005f8a:	1c43      	adds	r3, r0, #1
 8005f8c:	d1f3      	bne.n	8005f76 <__sfputs_r+0xa>
 8005f8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005f90 <_vfiprintf_r>:
 8005f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f94:	460d      	mov	r5, r1
 8005f96:	b09d      	sub	sp, #116	; 0x74
 8005f98:	4614      	mov	r4, r2
 8005f9a:	4698      	mov	r8, r3
 8005f9c:	4606      	mov	r6, r0
 8005f9e:	b118      	cbz	r0, 8005fa8 <_vfiprintf_r+0x18>
 8005fa0:	6a03      	ldr	r3, [r0, #32]
 8005fa2:	b90b      	cbnz	r3, 8005fa8 <_vfiprintf_r+0x18>
 8005fa4:	f7ff fcd4 	bl	8005950 <__sinit>
 8005fa8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005faa:	07d9      	lsls	r1, r3, #31
 8005fac:	d405      	bmi.n	8005fba <_vfiprintf_r+0x2a>
 8005fae:	89ab      	ldrh	r3, [r5, #12]
 8005fb0:	059a      	lsls	r2, r3, #22
 8005fb2:	d402      	bmi.n	8005fba <_vfiprintf_r+0x2a>
 8005fb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005fb6:	f7ff fdbd 	bl	8005b34 <__retarget_lock_acquire_recursive>
 8005fba:	89ab      	ldrh	r3, [r5, #12]
 8005fbc:	071b      	lsls	r3, r3, #28
 8005fbe:	d501      	bpl.n	8005fc4 <_vfiprintf_r+0x34>
 8005fc0:	692b      	ldr	r3, [r5, #16]
 8005fc2:	b99b      	cbnz	r3, 8005fec <_vfiprintf_r+0x5c>
 8005fc4:	4629      	mov	r1, r5
 8005fc6:	4630      	mov	r0, r6
 8005fc8:	f000 faca 	bl	8006560 <__swsetup_r>
 8005fcc:	b170      	cbz	r0, 8005fec <_vfiprintf_r+0x5c>
 8005fce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005fd0:	07dc      	lsls	r4, r3, #31
 8005fd2:	d504      	bpl.n	8005fde <_vfiprintf_r+0x4e>
 8005fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8005fd8:	b01d      	add	sp, #116	; 0x74
 8005fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fde:	89ab      	ldrh	r3, [r5, #12]
 8005fe0:	0598      	lsls	r0, r3, #22
 8005fe2:	d4f7      	bmi.n	8005fd4 <_vfiprintf_r+0x44>
 8005fe4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005fe6:	f7ff fda6 	bl	8005b36 <__retarget_lock_release_recursive>
 8005fea:	e7f3      	b.n	8005fd4 <_vfiprintf_r+0x44>
 8005fec:	2300      	movs	r3, #0
 8005fee:	9309      	str	r3, [sp, #36]	; 0x24
 8005ff0:	2320      	movs	r3, #32
 8005ff2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005ff6:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ffa:	2330      	movs	r3, #48	; 0x30
 8005ffc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80061b0 <_vfiprintf_r+0x220>
 8006000:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006004:	f04f 0901 	mov.w	r9, #1
 8006008:	4623      	mov	r3, r4
 800600a:	469a      	mov	sl, r3
 800600c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006010:	b10a      	cbz	r2, 8006016 <_vfiprintf_r+0x86>
 8006012:	2a25      	cmp	r2, #37	; 0x25
 8006014:	d1f9      	bne.n	800600a <_vfiprintf_r+0x7a>
 8006016:	ebba 0b04 	subs.w	fp, sl, r4
 800601a:	d00b      	beq.n	8006034 <_vfiprintf_r+0xa4>
 800601c:	465b      	mov	r3, fp
 800601e:	4622      	mov	r2, r4
 8006020:	4629      	mov	r1, r5
 8006022:	4630      	mov	r0, r6
 8006024:	f7ff ffa2 	bl	8005f6c <__sfputs_r>
 8006028:	3001      	adds	r0, #1
 800602a:	f000 80a9 	beq.w	8006180 <_vfiprintf_r+0x1f0>
 800602e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006030:	445a      	add	r2, fp
 8006032:	9209      	str	r2, [sp, #36]	; 0x24
 8006034:	f89a 3000 	ldrb.w	r3, [sl]
 8006038:	2b00      	cmp	r3, #0
 800603a:	f000 80a1 	beq.w	8006180 <_vfiprintf_r+0x1f0>
 800603e:	2300      	movs	r3, #0
 8006040:	f04f 32ff 	mov.w	r2, #4294967295
 8006044:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006048:	f10a 0a01 	add.w	sl, sl, #1
 800604c:	9304      	str	r3, [sp, #16]
 800604e:	9307      	str	r3, [sp, #28]
 8006050:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006054:	931a      	str	r3, [sp, #104]	; 0x68
 8006056:	4654      	mov	r4, sl
 8006058:	2205      	movs	r2, #5
 800605a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800605e:	4854      	ldr	r0, [pc, #336]	; (80061b0 <_vfiprintf_r+0x220>)
 8006060:	f7fa f8be 	bl	80001e0 <memchr>
 8006064:	9a04      	ldr	r2, [sp, #16]
 8006066:	b9d8      	cbnz	r0, 80060a0 <_vfiprintf_r+0x110>
 8006068:	06d1      	lsls	r1, r2, #27
 800606a:	bf44      	itt	mi
 800606c:	2320      	movmi	r3, #32
 800606e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006072:	0713      	lsls	r3, r2, #28
 8006074:	bf44      	itt	mi
 8006076:	232b      	movmi	r3, #43	; 0x2b
 8006078:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800607c:	f89a 3000 	ldrb.w	r3, [sl]
 8006080:	2b2a      	cmp	r3, #42	; 0x2a
 8006082:	d015      	beq.n	80060b0 <_vfiprintf_r+0x120>
 8006084:	9a07      	ldr	r2, [sp, #28]
 8006086:	4654      	mov	r4, sl
 8006088:	2000      	movs	r0, #0
 800608a:	f04f 0c0a 	mov.w	ip, #10
 800608e:	4621      	mov	r1, r4
 8006090:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006094:	3b30      	subs	r3, #48	; 0x30
 8006096:	2b09      	cmp	r3, #9
 8006098:	d94d      	bls.n	8006136 <_vfiprintf_r+0x1a6>
 800609a:	b1b0      	cbz	r0, 80060ca <_vfiprintf_r+0x13a>
 800609c:	9207      	str	r2, [sp, #28]
 800609e:	e014      	b.n	80060ca <_vfiprintf_r+0x13a>
 80060a0:	eba0 0308 	sub.w	r3, r0, r8
 80060a4:	fa09 f303 	lsl.w	r3, r9, r3
 80060a8:	4313      	orrs	r3, r2
 80060aa:	9304      	str	r3, [sp, #16]
 80060ac:	46a2      	mov	sl, r4
 80060ae:	e7d2      	b.n	8006056 <_vfiprintf_r+0xc6>
 80060b0:	9b03      	ldr	r3, [sp, #12]
 80060b2:	1d19      	adds	r1, r3, #4
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	9103      	str	r1, [sp, #12]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	bfbb      	ittet	lt
 80060bc:	425b      	neglt	r3, r3
 80060be:	f042 0202 	orrlt.w	r2, r2, #2
 80060c2:	9307      	strge	r3, [sp, #28]
 80060c4:	9307      	strlt	r3, [sp, #28]
 80060c6:	bfb8      	it	lt
 80060c8:	9204      	strlt	r2, [sp, #16]
 80060ca:	7823      	ldrb	r3, [r4, #0]
 80060cc:	2b2e      	cmp	r3, #46	; 0x2e
 80060ce:	d10c      	bne.n	80060ea <_vfiprintf_r+0x15a>
 80060d0:	7863      	ldrb	r3, [r4, #1]
 80060d2:	2b2a      	cmp	r3, #42	; 0x2a
 80060d4:	d134      	bne.n	8006140 <_vfiprintf_r+0x1b0>
 80060d6:	9b03      	ldr	r3, [sp, #12]
 80060d8:	1d1a      	adds	r2, r3, #4
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	9203      	str	r2, [sp, #12]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	bfb8      	it	lt
 80060e2:	f04f 33ff 	movlt.w	r3, #4294967295
 80060e6:	3402      	adds	r4, #2
 80060e8:	9305      	str	r3, [sp, #20]
 80060ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80061c0 <_vfiprintf_r+0x230>
 80060ee:	7821      	ldrb	r1, [r4, #0]
 80060f0:	2203      	movs	r2, #3
 80060f2:	4650      	mov	r0, sl
 80060f4:	f7fa f874 	bl	80001e0 <memchr>
 80060f8:	b138      	cbz	r0, 800610a <_vfiprintf_r+0x17a>
 80060fa:	9b04      	ldr	r3, [sp, #16]
 80060fc:	eba0 000a 	sub.w	r0, r0, sl
 8006100:	2240      	movs	r2, #64	; 0x40
 8006102:	4082      	lsls	r2, r0
 8006104:	4313      	orrs	r3, r2
 8006106:	3401      	adds	r4, #1
 8006108:	9304      	str	r3, [sp, #16]
 800610a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800610e:	4829      	ldr	r0, [pc, #164]	; (80061b4 <_vfiprintf_r+0x224>)
 8006110:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006114:	2206      	movs	r2, #6
 8006116:	f7fa f863 	bl	80001e0 <memchr>
 800611a:	2800      	cmp	r0, #0
 800611c:	d03f      	beq.n	800619e <_vfiprintf_r+0x20e>
 800611e:	4b26      	ldr	r3, [pc, #152]	; (80061b8 <_vfiprintf_r+0x228>)
 8006120:	bb1b      	cbnz	r3, 800616a <_vfiprintf_r+0x1da>
 8006122:	9b03      	ldr	r3, [sp, #12]
 8006124:	3307      	adds	r3, #7
 8006126:	f023 0307 	bic.w	r3, r3, #7
 800612a:	3308      	adds	r3, #8
 800612c:	9303      	str	r3, [sp, #12]
 800612e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006130:	443b      	add	r3, r7
 8006132:	9309      	str	r3, [sp, #36]	; 0x24
 8006134:	e768      	b.n	8006008 <_vfiprintf_r+0x78>
 8006136:	fb0c 3202 	mla	r2, ip, r2, r3
 800613a:	460c      	mov	r4, r1
 800613c:	2001      	movs	r0, #1
 800613e:	e7a6      	b.n	800608e <_vfiprintf_r+0xfe>
 8006140:	2300      	movs	r3, #0
 8006142:	3401      	adds	r4, #1
 8006144:	9305      	str	r3, [sp, #20]
 8006146:	4619      	mov	r1, r3
 8006148:	f04f 0c0a 	mov.w	ip, #10
 800614c:	4620      	mov	r0, r4
 800614e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006152:	3a30      	subs	r2, #48	; 0x30
 8006154:	2a09      	cmp	r2, #9
 8006156:	d903      	bls.n	8006160 <_vfiprintf_r+0x1d0>
 8006158:	2b00      	cmp	r3, #0
 800615a:	d0c6      	beq.n	80060ea <_vfiprintf_r+0x15a>
 800615c:	9105      	str	r1, [sp, #20]
 800615e:	e7c4      	b.n	80060ea <_vfiprintf_r+0x15a>
 8006160:	fb0c 2101 	mla	r1, ip, r1, r2
 8006164:	4604      	mov	r4, r0
 8006166:	2301      	movs	r3, #1
 8006168:	e7f0      	b.n	800614c <_vfiprintf_r+0x1bc>
 800616a:	ab03      	add	r3, sp, #12
 800616c:	9300      	str	r3, [sp, #0]
 800616e:	462a      	mov	r2, r5
 8006170:	4b12      	ldr	r3, [pc, #72]	; (80061bc <_vfiprintf_r+0x22c>)
 8006172:	a904      	add	r1, sp, #16
 8006174:	4630      	mov	r0, r6
 8006176:	f3af 8000 	nop.w
 800617a:	4607      	mov	r7, r0
 800617c:	1c78      	adds	r0, r7, #1
 800617e:	d1d6      	bne.n	800612e <_vfiprintf_r+0x19e>
 8006180:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006182:	07d9      	lsls	r1, r3, #31
 8006184:	d405      	bmi.n	8006192 <_vfiprintf_r+0x202>
 8006186:	89ab      	ldrh	r3, [r5, #12]
 8006188:	059a      	lsls	r2, r3, #22
 800618a:	d402      	bmi.n	8006192 <_vfiprintf_r+0x202>
 800618c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800618e:	f7ff fcd2 	bl	8005b36 <__retarget_lock_release_recursive>
 8006192:	89ab      	ldrh	r3, [r5, #12]
 8006194:	065b      	lsls	r3, r3, #25
 8006196:	f53f af1d 	bmi.w	8005fd4 <_vfiprintf_r+0x44>
 800619a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800619c:	e71c      	b.n	8005fd8 <_vfiprintf_r+0x48>
 800619e:	ab03      	add	r3, sp, #12
 80061a0:	9300      	str	r3, [sp, #0]
 80061a2:	462a      	mov	r2, r5
 80061a4:	4b05      	ldr	r3, [pc, #20]	; (80061bc <_vfiprintf_r+0x22c>)
 80061a6:	a904      	add	r1, sp, #16
 80061a8:	4630      	mov	r0, r6
 80061aa:	f000 f879 	bl	80062a0 <_printf_i>
 80061ae:	e7e4      	b.n	800617a <_vfiprintf_r+0x1ea>
 80061b0:	08006913 	.word	0x08006913
 80061b4:	0800691d 	.word	0x0800691d
 80061b8:	00000000 	.word	0x00000000
 80061bc:	08005f6d 	.word	0x08005f6d
 80061c0:	08006919 	.word	0x08006919

080061c4 <_printf_common>:
 80061c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061c8:	4616      	mov	r6, r2
 80061ca:	4699      	mov	r9, r3
 80061cc:	688a      	ldr	r2, [r1, #8]
 80061ce:	690b      	ldr	r3, [r1, #16]
 80061d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80061d4:	4293      	cmp	r3, r2
 80061d6:	bfb8      	it	lt
 80061d8:	4613      	movlt	r3, r2
 80061da:	6033      	str	r3, [r6, #0]
 80061dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80061e0:	4607      	mov	r7, r0
 80061e2:	460c      	mov	r4, r1
 80061e4:	b10a      	cbz	r2, 80061ea <_printf_common+0x26>
 80061e6:	3301      	adds	r3, #1
 80061e8:	6033      	str	r3, [r6, #0]
 80061ea:	6823      	ldr	r3, [r4, #0]
 80061ec:	0699      	lsls	r1, r3, #26
 80061ee:	bf42      	ittt	mi
 80061f0:	6833      	ldrmi	r3, [r6, #0]
 80061f2:	3302      	addmi	r3, #2
 80061f4:	6033      	strmi	r3, [r6, #0]
 80061f6:	6825      	ldr	r5, [r4, #0]
 80061f8:	f015 0506 	ands.w	r5, r5, #6
 80061fc:	d106      	bne.n	800620c <_printf_common+0x48>
 80061fe:	f104 0a19 	add.w	sl, r4, #25
 8006202:	68e3      	ldr	r3, [r4, #12]
 8006204:	6832      	ldr	r2, [r6, #0]
 8006206:	1a9b      	subs	r3, r3, r2
 8006208:	42ab      	cmp	r3, r5
 800620a:	dc26      	bgt.n	800625a <_printf_common+0x96>
 800620c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006210:	1e13      	subs	r3, r2, #0
 8006212:	6822      	ldr	r2, [r4, #0]
 8006214:	bf18      	it	ne
 8006216:	2301      	movne	r3, #1
 8006218:	0692      	lsls	r2, r2, #26
 800621a:	d42b      	bmi.n	8006274 <_printf_common+0xb0>
 800621c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006220:	4649      	mov	r1, r9
 8006222:	4638      	mov	r0, r7
 8006224:	47c0      	blx	r8
 8006226:	3001      	adds	r0, #1
 8006228:	d01e      	beq.n	8006268 <_printf_common+0xa4>
 800622a:	6823      	ldr	r3, [r4, #0]
 800622c:	6922      	ldr	r2, [r4, #16]
 800622e:	f003 0306 	and.w	r3, r3, #6
 8006232:	2b04      	cmp	r3, #4
 8006234:	bf02      	ittt	eq
 8006236:	68e5      	ldreq	r5, [r4, #12]
 8006238:	6833      	ldreq	r3, [r6, #0]
 800623a:	1aed      	subeq	r5, r5, r3
 800623c:	68a3      	ldr	r3, [r4, #8]
 800623e:	bf0c      	ite	eq
 8006240:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006244:	2500      	movne	r5, #0
 8006246:	4293      	cmp	r3, r2
 8006248:	bfc4      	itt	gt
 800624a:	1a9b      	subgt	r3, r3, r2
 800624c:	18ed      	addgt	r5, r5, r3
 800624e:	2600      	movs	r6, #0
 8006250:	341a      	adds	r4, #26
 8006252:	42b5      	cmp	r5, r6
 8006254:	d11a      	bne.n	800628c <_printf_common+0xc8>
 8006256:	2000      	movs	r0, #0
 8006258:	e008      	b.n	800626c <_printf_common+0xa8>
 800625a:	2301      	movs	r3, #1
 800625c:	4652      	mov	r2, sl
 800625e:	4649      	mov	r1, r9
 8006260:	4638      	mov	r0, r7
 8006262:	47c0      	blx	r8
 8006264:	3001      	adds	r0, #1
 8006266:	d103      	bne.n	8006270 <_printf_common+0xac>
 8006268:	f04f 30ff 	mov.w	r0, #4294967295
 800626c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006270:	3501      	adds	r5, #1
 8006272:	e7c6      	b.n	8006202 <_printf_common+0x3e>
 8006274:	18e1      	adds	r1, r4, r3
 8006276:	1c5a      	adds	r2, r3, #1
 8006278:	2030      	movs	r0, #48	; 0x30
 800627a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800627e:	4422      	add	r2, r4
 8006280:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006284:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006288:	3302      	adds	r3, #2
 800628a:	e7c7      	b.n	800621c <_printf_common+0x58>
 800628c:	2301      	movs	r3, #1
 800628e:	4622      	mov	r2, r4
 8006290:	4649      	mov	r1, r9
 8006292:	4638      	mov	r0, r7
 8006294:	47c0      	blx	r8
 8006296:	3001      	adds	r0, #1
 8006298:	d0e6      	beq.n	8006268 <_printf_common+0xa4>
 800629a:	3601      	adds	r6, #1
 800629c:	e7d9      	b.n	8006252 <_printf_common+0x8e>
	...

080062a0 <_printf_i>:
 80062a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062a4:	7e0f      	ldrb	r7, [r1, #24]
 80062a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80062a8:	2f78      	cmp	r7, #120	; 0x78
 80062aa:	4691      	mov	r9, r2
 80062ac:	4680      	mov	r8, r0
 80062ae:	460c      	mov	r4, r1
 80062b0:	469a      	mov	sl, r3
 80062b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80062b6:	d807      	bhi.n	80062c8 <_printf_i+0x28>
 80062b8:	2f62      	cmp	r7, #98	; 0x62
 80062ba:	d80a      	bhi.n	80062d2 <_printf_i+0x32>
 80062bc:	2f00      	cmp	r7, #0
 80062be:	f000 80d4 	beq.w	800646a <_printf_i+0x1ca>
 80062c2:	2f58      	cmp	r7, #88	; 0x58
 80062c4:	f000 80c0 	beq.w	8006448 <_printf_i+0x1a8>
 80062c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80062d0:	e03a      	b.n	8006348 <_printf_i+0xa8>
 80062d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80062d6:	2b15      	cmp	r3, #21
 80062d8:	d8f6      	bhi.n	80062c8 <_printf_i+0x28>
 80062da:	a101      	add	r1, pc, #4	; (adr r1, 80062e0 <_printf_i+0x40>)
 80062dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80062e0:	08006339 	.word	0x08006339
 80062e4:	0800634d 	.word	0x0800634d
 80062e8:	080062c9 	.word	0x080062c9
 80062ec:	080062c9 	.word	0x080062c9
 80062f0:	080062c9 	.word	0x080062c9
 80062f4:	080062c9 	.word	0x080062c9
 80062f8:	0800634d 	.word	0x0800634d
 80062fc:	080062c9 	.word	0x080062c9
 8006300:	080062c9 	.word	0x080062c9
 8006304:	080062c9 	.word	0x080062c9
 8006308:	080062c9 	.word	0x080062c9
 800630c:	08006451 	.word	0x08006451
 8006310:	08006379 	.word	0x08006379
 8006314:	0800640b 	.word	0x0800640b
 8006318:	080062c9 	.word	0x080062c9
 800631c:	080062c9 	.word	0x080062c9
 8006320:	08006473 	.word	0x08006473
 8006324:	080062c9 	.word	0x080062c9
 8006328:	08006379 	.word	0x08006379
 800632c:	080062c9 	.word	0x080062c9
 8006330:	080062c9 	.word	0x080062c9
 8006334:	08006413 	.word	0x08006413
 8006338:	682b      	ldr	r3, [r5, #0]
 800633a:	1d1a      	adds	r2, r3, #4
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	602a      	str	r2, [r5, #0]
 8006340:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006344:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006348:	2301      	movs	r3, #1
 800634a:	e09f      	b.n	800648c <_printf_i+0x1ec>
 800634c:	6820      	ldr	r0, [r4, #0]
 800634e:	682b      	ldr	r3, [r5, #0]
 8006350:	0607      	lsls	r7, r0, #24
 8006352:	f103 0104 	add.w	r1, r3, #4
 8006356:	6029      	str	r1, [r5, #0]
 8006358:	d501      	bpl.n	800635e <_printf_i+0xbe>
 800635a:	681e      	ldr	r6, [r3, #0]
 800635c:	e003      	b.n	8006366 <_printf_i+0xc6>
 800635e:	0646      	lsls	r6, r0, #25
 8006360:	d5fb      	bpl.n	800635a <_printf_i+0xba>
 8006362:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006366:	2e00      	cmp	r6, #0
 8006368:	da03      	bge.n	8006372 <_printf_i+0xd2>
 800636a:	232d      	movs	r3, #45	; 0x2d
 800636c:	4276      	negs	r6, r6
 800636e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006372:	485a      	ldr	r0, [pc, #360]	; (80064dc <_printf_i+0x23c>)
 8006374:	230a      	movs	r3, #10
 8006376:	e012      	b.n	800639e <_printf_i+0xfe>
 8006378:	682b      	ldr	r3, [r5, #0]
 800637a:	6820      	ldr	r0, [r4, #0]
 800637c:	1d19      	adds	r1, r3, #4
 800637e:	6029      	str	r1, [r5, #0]
 8006380:	0605      	lsls	r5, r0, #24
 8006382:	d501      	bpl.n	8006388 <_printf_i+0xe8>
 8006384:	681e      	ldr	r6, [r3, #0]
 8006386:	e002      	b.n	800638e <_printf_i+0xee>
 8006388:	0641      	lsls	r1, r0, #25
 800638a:	d5fb      	bpl.n	8006384 <_printf_i+0xe4>
 800638c:	881e      	ldrh	r6, [r3, #0]
 800638e:	4853      	ldr	r0, [pc, #332]	; (80064dc <_printf_i+0x23c>)
 8006390:	2f6f      	cmp	r7, #111	; 0x6f
 8006392:	bf0c      	ite	eq
 8006394:	2308      	moveq	r3, #8
 8006396:	230a      	movne	r3, #10
 8006398:	2100      	movs	r1, #0
 800639a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800639e:	6865      	ldr	r5, [r4, #4]
 80063a0:	60a5      	str	r5, [r4, #8]
 80063a2:	2d00      	cmp	r5, #0
 80063a4:	bfa2      	ittt	ge
 80063a6:	6821      	ldrge	r1, [r4, #0]
 80063a8:	f021 0104 	bicge.w	r1, r1, #4
 80063ac:	6021      	strge	r1, [r4, #0]
 80063ae:	b90e      	cbnz	r6, 80063b4 <_printf_i+0x114>
 80063b0:	2d00      	cmp	r5, #0
 80063b2:	d04b      	beq.n	800644c <_printf_i+0x1ac>
 80063b4:	4615      	mov	r5, r2
 80063b6:	fbb6 f1f3 	udiv	r1, r6, r3
 80063ba:	fb03 6711 	mls	r7, r3, r1, r6
 80063be:	5dc7      	ldrb	r7, [r0, r7]
 80063c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80063c4:	4637      	mov	r7, r6
 80063c6:	42bb      	cmp	r3, r7
 80063c8:	460e      	mov	r6, r1
 80063ca:	d9f4      	bls.n	80063b6 <_printf_i+0x116>
 80063cc:	2b08      	cmp	r3, #8
 80063ce:	d10b      	bne.n	80063e8 <_printf_i+0x148>
 80063d0:	6823      	ldr	r3, [r4, #0]
 80063d2:	07de      	lsls	r6, r3, #31
 80063d4:	d508      	bpl.n	80063e8 <_printf_i+0x148>
 80063d6:	6923      	ldr	r3, [r4, #16]
 80063d8:	6861      	ldr	r1, [r4, #4]
 80063da:	4299      	cmp	r1, r3
 80063dc:	bfde      	ittt	le
 80063de:	2330      	movle	r3, #48	; 0x30
 80063e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80063e4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80063e8:	1b52      	subs	r2, r2, r5
 80063ea:	6122      	str	r2, [r4, #16]
 80063ec:	f8cd a000 	str.w	sl, [sp]
 80063f0:	464b      	mov	r3, r9
 80063f2:	aa03      	add	r2, sp, #12
 80063f4:	4621      	mov	r1, r4
 80063f6:	4640      	mov	r0, r8
 80063f8:	f7ff fee4 	bl	80061c4 <_printf_common>
 80063fc:	3001      	adds	r0, #1
 80063fe:	d14a      	bne.n	8006496 <_printf_i+0x1f6>
 8006400:	f04f 30ff 	mov.w	r0, #4294967295
 8006404:	b004      	add	sp, #16
 8006406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800640a:	6823      	ldr	r3, [r4, #0]
 800640c:	f043 0320 	orr.w	r3, r3, #32
 8006410:	6023      	str	r3, [r4, #0]
 8006412:	4833      	ldr	r0, [pc, #204]	; (80064e0 <_printf_i+0x240>)
 8006414:	2778      	movs	r7, #120	; 0x78
 8006416:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800641a:	6823      	ldr	r3, [r4, #0]
 800641c:	6829      	ldr	r1, [r5, #0]
 800641e:	061f      	lsls	r7, r3, #24
 8006420:	f851 6b04 	ldr.w	r6, [r1], #4
 8006424:	d402      	bmi.n	800642c <_printf_i+0x18c>
 8006426:	065f      	lsls	r7, r3, #25
 8006428:	bf48      	it	mi
 800642a:	b2b6      	uxthmi	r6, r6
 800642c:	07df      	lsls	r7, r3, #31
 800642e:	bf48      	it	mi
 8006430:	f043 0320 	orrmi.w	r3, r3, #32
 8006434:	6029      	str	r1, [r5, #0]
 8006436:	bf48      	it	mi
 8006438:	6023      	strmi	r3, [r4, #0]
 800643a:	b91e      	cbnz	r6, 8006444 <_printf_i+0x1a4>
 800643c:	6823      	ldr	r3, [r4, #0]
 800643e:	f023 0320 	bic.w	r3, r3, #32
 8006442:	6023      	str	r3, [r4, #0]
 8006444:	2310      	movs	r3, #16
 8006446:	e7a7      	b.n	8006398 <_printf_i+0xf8>
 8006448:	4824      	ldr	r0, [pc, #144]	; (80064dc <_printf_i+0x23c>)
 800644a:	e7e4      	b.n	8006416 <_printf_i+0x176>
 800644c:	4615      	mov	r5, r2
 800644e:	e7bd      	b.n	80063cc <_printf_i+0x12c>
 8006450:	682b      	ldr	r3, [r5, #0]
 8006452:	6826      	ldr	r6, [r4, #0]
 8006454:	6961      	ldr	r1, [r4, #20]
 8006456:	1d18      	adds	r0, r3, #4
 8006458:	6028      	str	r0, [r5, #0]
 800645a:	0635      	lsls	r5, r6, #24
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	d501      	bpl.n	8006464 <_printf_i+0x1c4>
 8006460:	6019      	str	r1, [r3, #0]
 8006462:	e002      	b.n	800646a <_printf_i+0x1ca>
 8006464:	0670      	lsls	r0, r6, #25
 8006466:	d5fb      	bpl.n	8006460 <_printf_i+0x1c0>
 8006468:	8019      	strh	r1, [r3, #0]
 800646a:	2300      	movs	r3, #0
 800646c:	6123      	str	r3, [r4, #16]
 800646e:	4615      	mov	r5, r2
 8006470:	e7bc      	b.n	80063ec <_printf_i+0x14c>
 8006472:	682b      	ldr	r3, [r5, #0]
 8006474:	1d1a      	adds	r2, r3, #4
 8006476:	602a      	str	r2, [r5, #0]
 8006478:	681d      	ldr	r5, [r3, #0]
 800647a:	6862      	ldr	r2, [r4, #4]
 800647c:	2100      	movs	r1, #0
 800647e:	4628      	mov	r0, r5
 8006480:	f7f9 feae 	bl	80001e0 <memchr>
 8006484:	b108      	cbz	r0, 800648a <_printf_i+0x1ea>
 8006486:	1b40      	subs	r0, r0, r5
 8006488:	6060      	str	r0, [r4, #4]
 800648a:	6863      	ldr	r3, [r4, #4]
 800648c:	6123      	str	r3, [r4, #16]
 800648e:	2300      	movs	r3, #0
 8006490:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006494:	e7aa      	b.n	80063ec <_printf_i+0x14c>
 8006496:	6923      	ldr	r3, [r4, #16]
 8006498:	462a      	mov	r2, r5
 800649a:	4649      	mov	r1, r9
 800649c:	4640      	mov	r0, r8
 800649e:	47d0      	blx	sl
 80064a0:	3001      	adds	r0, #1
 80064a2:	d0ad      	beq.n	8006400 <_printf_i+0x160>
 80064a4:	6823      	ldr	r3, [r4, #0]
 80064a6:	079b      	lsls	r3, r3, #30
 80064a8:	d413      	bmi.n	80064d2 <_printf_i+0x232>
 80064aa:	68e0      	ldr	r0, [r4, #12]
 80064ac:	9b03      	ldr	r3, [sp, #12]
 80064ae:	4298      	cmp	r0, r3
 80064b0:	bfb8      	it	lt
 80064b2:	4618      	movlt	r0, r3
 80064b4:	e7a6      	b.n	8006404 <_printf_i+0x164>
 80064b6:	2301      	movs	r3, #1
 80064b8:	4632      	mov	r2, r6
 80064ba:	4649      	mov	r1, r9
 80064bc:	4640      	mov	r0, r8
 80064be:	47d0      	blx	sl
 80064c0:	3001      	adds	r0, #1
 80064c2:	d09d      	beq.n	8006400 <_printf_i+0x160>
 80064c4:	3501      	adds	r5, #1
 80064c6:	68e3      	ldr	r3, [r4, #12]
 80064c8:	9903      	ldr	r1, [sp, #12]
 80064ca:	1a5b      	subs	r3, r3, r1
 80064cc:	42ab      	cmp	r3, r5
 80064ce:	dcf2      	bgt.n	80064b6 <_printf_i+0x216>
 80064d0:	e7eb      	b.n	80064aa <_printf_i+0x20a>
 80064d2:	2500      	movs	r5, #0
 80064d4:	f104 0619 	add.w	r6, r4, #25
 80064d8:	e7f5      	b.n	80064c6 <_printf_i+0x226>
 80064da:	bf00      	nop
 80064dc:	08006924 	.word	0x08006924
 80064e0:	08006935 	.word	0x08006935

080064e4 <__swbuf_r>:
 80064e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064e6:	460e      	mov	r6, r1
 80064e8:	4614      	mov	r4, r2
 80064ea:	4605      	mov	r5, r0
 80064ec:	b118      	cbz	r0, 80064f6 <__swbuf_r+0x12>
 80064ee:	6a03      	ldr	r3, [r0, #32]
 80064f0:	b90b      	cbnz	r3, 80064f6 <__swbuf_r+0x12>
 80064f2:	f7ff fa2d 	bl	8005950 <__sinit>
 80064f6:	69a3      	ldr	r3, [r4, #24]
 80064f8:	60a3      	str	r3, [r4, #8]
 80064fa:	89a3      	ldrh	r3, [r4, #12]
 80064fc:	071a      	lsls	r2, r3, #28
 80064fe:	d525      	bpl.n	800654c <__swbuf_r+0x68>
 8006500:	6923      	ldr	r3, [r4, #16]
 8006502:	b31b      	cbz	r3, 800654c <__swbuf_r+0x68>
 8006504:	6823      	ldr	r3, [r4, #0]
 8006506:	6922      	ldr	r2, [r4, #16]
 8006508:	1a98      	subs	r0, r3, r2
 800650a:	6963      	ldr	r3, [r4, #20]
 800650c:	b2f6      	uxtb	r6, r6
 800650e:	4283      	cmp	r3, r0
 8006510:	4637      	mov	r7, r6
 8006512:	dc04      	bgt.n	800651e <__swbuf_r+0x3a>
 8006514:	4621      	mov	r1, r4
 8006516:	4628      	mov	r0, r5
 8006518:	f7ff fcc0 	bl	8005e9c <_fflush_r>
 800651c:	b9e0      	cbnz	r0, 8006558 <__swbuf_r+0x74>
 800651e:	68a3      	ldr	r3, [r4, #8]
 8006520:	3b01      	subs	r3, #1
 8006522:	60a3      	str	r3, [r4, #8]
 8006524:	6823      	ldr	r3, [r4, #0]
 8006526:	1c5a      	adds	r2, r3, #1
 8006528:	6022      	str	r2, [r4, #0]
 800652a:	701e      	strb	r6, [r3, #0]
 800652c:	6962      	ldr	r2, [r4, #20]
 800652e:	1c43      	adds	r3, r0, #1
 8006530:	429a      	cmp	r2, r3
 8006532:	d004      	beq.n	800653e <__swbuf_r+0x5a>
 8006534:	89a3      	ldrh	r3, [r4, #12]
 8006536:	07db      	lsls	r3, r3, #31
 8006538:	d506      	bpl.n	8006548 <__swbuf_r+0x64>
 800653a:	2e0a      	cmp	r6, #10
 800653c:	d104      	bne.n	8006548 <__swbuf_r+0x64>
 800653e:	4621      	mov	r1, r4
 8006540:	4628      	mov	r0, r5
 8006542:	f7ff fcab 	bl	8005e9c <_fflush_r>
 8006546:	b938      	cbnz	r0, 8006558 <__swbuf_r+0x74>
 8006548:	4638      	mov	r0, r7
 800654a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800654c:	4621      	mov	r1, r4
 800654e:	4628      	mov	r0, r5
 8006550:	f000 f806 	bl	8006560 <__swsetup_r>
 8006554:	2800      	cmp	r0, #0
 8006556:	d0d5      	beq.n	8006504 <__swbuf_r+0x20>
 8006558:	f04f 37ff 	mov.w	r7, #4294967295
 800655c:	e7f4      	b.n	8006548 <__swbuf_r+0x64>
	...

08006560 <__swsetup_r>:
 8006560:	b538      	push	{r3, r4, r5, lr}
 8006562:	4b2a      	ldr	r3, [pc, #168]	; (800660c <__swsetup_r+0xac>)
 8006564:	4605      	mov	r5, r0
 8006566:	6818      	ldr	r0, [r3, #0]
 8006568:	460c      	mov	r4, r1
 800656a:	b118      	cbz	r0, 8006574 <__swsetup_r+0x14>
 800656c:	6a03      	ldr	r3, [r0, #32]
 800656e:	b90b      	cbnz	r3, 8006574 <__swsetup_r+0x14>
 8006570:	f7ff f9ee 	bl	8005950 <__sinit>
 8006574:	89a3      	ldrh	r3, [r4, #12]
 8006576:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800657a:	0718      	lsls	r0, r3, #28
 800657c:	d422      	bmi.n	80065c4 <__swsetup_r+0x64>
 800657e:	06d9      	lsls	r1, r3, #27
 8006580:	d407      	bmi.n	8006592 <__swsetup_r+0x32>
 8006582:	2309      	movs	r3, #9
 8006584:	602b      	str	r3, [r5, #0]
 8006586:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800658a:	81a3      	strh	r3, [r4, #12]
 800658c:	f04f 30ff 	mov.w	r0, #4294967295
 8006590:	e034      	b.n	80065fc <__swsetup_r+0x9c>
 8006592:	0758      	lsls	r0, r3, #29
 8006594:	d512      	bpl.n	80065bc <__swsetup_r+0x5c>
 8006596:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006598:	b141      	cbz	r1, 80065ac <__swsetup_r+0x4c>
 800659a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800659e:	4299      	cmp	r1, r3
 80065a0:	d002      	beq.n	80065a8 <__swsetup_r+0x48>
 80065a2:	4628      	mov	r0, r5
 80065a4:	f7ff faf4 	bl	8005b90 <_free_r>
 80065a8:	2300      	movs	r3, #0
 80065aa:	6363      	str	r3, [r4, #52]	; 0x34
 80065ac:	89a3      	ldrh	r3, [r4, #12]
 80065ae:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80065b2:	81a3      	strh	r3, [r4, #12]
 80065b4:	2300      	movs	r3, #0
 80065b6:	6063      	str	r3, [r4, #4]
 80065b8:	6923      	ldr	r3, [r4, #16]
 80065ba:	6023      	str	r3, [r4, #0]
 80065bc:	89a3      	ldrh	r3, [r4, #12]
 80065be:	f043 0308 	orr.w	r3, r3, #8
 80065c2:	81a3      	strh	r3, [r4, #12]
 80065c4:	6923      	ldr	r3, [r4, #16]
 80065c6:	b94b      	cbnz	r3, 80065dc <__swsetup_r+0x7c>
 80065c8:	89a3      	ldrh	r3, [r4, #12]
 80065ca:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80065ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065d2:	d003      	beq.n	80065dc <__swsetup_r+0x7c>
 80065d4:	4621      	mov	r1, r4
 80065d6:	4628      	mov	r0, r5
 80065d8:	f000 f884 	bl	80066e4 <__smakebuf_r>
 80065dc:	89a0      	ldrh	r0, [r4, #12]
 80065de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80065e2:	f010 0301 	ands.w	r3, r0, #1
 80065e6:	d00a      	beq.n	80065fe <__swsetup_r+0x9e>
 80065e8:	2300      	movs	r3, #0
 80065ea:	60a3      	str	r3, [r4, #8]
 80065ec:	6963      	ldr	r3, [r4, #20]
 80065ee:	425b      	negs	r3, r3
 80065f0:	61a3      	str	r3, [r4, #24]
 80065f2:	6923      	ldr	r3, [r4, #16]
 80065f4:	b943      	cbnz	r3, 8006608 <__swsetup_r+0xa8>
 80065f6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80065fa:	d1c4      	bne.n	8006586 <__swsetup_r+0x26>
 80065fc:	bd38      	pop	{r3, r4, r5, pc}
 80065fe:	0781      	lsls	r1, r0, #30
 8006600:	bf58      	it	pl
 8006602:	6963      	ldrpl	r3, [r4, #20]
 8006604:	60a3      	str	r3, [r4, #8]
 8006606:	e7f4      	b.n	80065f2 <__swsetup_r+0x92>
 8006608:	2000      	movs	r0, #0
 800660a:	e7f7      	b.n	80065fc <__swsetup_r+0x9c>
 800660c:	20000068 	.word	0x20000068

08006610 <_raise_r>:
 8006610:	291f      	cmp	r1, #31
 8006612:	b538      	push	{r3, r4, r5, lr}
 8006614:	4604      	mov	r4, r0
 8006616:	460d      	mov	r5, r1
 8006618:	d904      	bls.n	8006624 <_raise_r+0x14>
 800661a:	2316      	movs	r3, #22
 800661c:	6003      	str	r3, [r0, #0]
 800661e:	f04f 30ff 	mov.w	r0, #4294967295
 8006622:	bd38      	pop	{r3, r4, r5, pc}
 8006624:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006626:	b112      	cbz	r2, 800662e <_raise_r+0x1e>
 8006628:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800662c:	b94b      	cbnz	r3, 8006642 <_raise_r+0x32>
 800662e:	4620      	mov	r0, r4
 8006630:	f000 f830 	bl	8006694 <_getpid_r>
 8006634:	462a      	mov	r2, r5
 8006636:	4601      	mov	r1, r0
 8006638:	4620      	mov	r0, r4
 800663a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800663e:	f000 b817 	b.w	8006670 <_kill_r>
 8006642:	2b01      	cmp	r3, #1
 8006644:	d00a      	beq.n	800665c <_raise_r+0x4c>
 8006646:	1c59      	adds	r1, r3, #1
 8006648:	d103      	bne.n	8006652 <_raise_r+0x42>
 800664a:	2316      	movs	r3, #22
 800664c:	6003      	str	r3, [r0, #0]
 800664e:	2001      	movs	r0, #1
 8006650:	e7e7      	b.n	8006622 <_raise_r+0x12>
 8006652:	2400      	movs	r4, #0
 8006654:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006658:	4628      	mov	r0, r5
 800665a:	4798      	blx	r3
 800665c:	2000      	movs	r0, #0
 800665e:	e7e0      	b.n	8006622 <_raise_r+0x12>

08006660 <raise>:
 8006660:	4b02      	ldr	r3, [pc, #8]	; (800666c <raise+0xc>)
 8006662:	4601      	mov	r1, r0
 8006664:	6818      	ldr	r0, [r3, #0]
 8006666:	f7ff bfd3 	b.w	8006610 <_raise_r>
 800666a:	bf00      	nop
 800666c:	20000068 	.word	0x20000068

08006670 <_kill_r>:
 8006670:	b538      	push	{r3, r4, r5, lr}
 8006672:	4d07      	ldr	r5, [pc, #28]	; (8006690 <_kill_r+0x20>)
 8006674:	2300      	movs	r3, #0
 8006676:	4604      	mov	r4, r0
 8006678:	4608      	mov	r0, r1
 800667a:	4611      	mov	r1, r2
 800667c:	602b      	str	r3, [r5, #0]
 800667e:	f7fa ffe9 	bl	8001654 <_kill>
 8006682:	1c43      	adds	r3, r0, #1
 8006684:	d102      	bne.n	800668c <_kill_r+0x1c>
 8006686:	682b      	ldr	r3, [r5, #0]
 8006688:	b103      	cbz	r3, 800668c <_kill_r+0x1c>
 800668a:	6023      	str	r3, [r4, #0]
 800668c:	bd38      	pop	{r3, r4, r5, pc}
 800668e:	bf00      	nop
 8006690:	200003ac 	.word	0x200003ac

08006694 <_getpid_r>:
 8006694:	f7fa bfd6 	b.w	8001644 <_getpid>

08006698 <__swhatbuf_r>:
 8006698:	b570      	push	{r4, r5, r6, lr}
 800669a:	460c      	mov	r4, r1
 800669c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066a0:	2900      	cmp	r1, #0
 80066a2:	b096      	sub	sp, #88	; 0x58
 80066a4:	4615      	mov	r5, r2
 80066a6:	461e      	mov	r6, r3
 80066a8:	da0d      	bge.n	80066c6 <__swhatbuf_r+0x2e>
 80066aa:	89a3      	ldrh	r3, [r4, #12]
 80066ac:	f013 0f80 	tst.w	r3, #128	; 0x80
 80066b0:	f04f 0100 	mov.w	r1, #0
 80066b4:	bf0c      	ite	eq
 80066b6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80066ba:	2340      	movne	r3, #64	; 0x40
 80066bc:	2000      	movs	r0, #0
 80066be:	6031      	str	r1, [r6, #0]
 80066c0:	602b      	str	r3, [r5, #0]
 80066c2:	b016      	add	sp, #88	; 0x58
 80066c4:	bd70      	pop	{r4, r5, r6, pc}
 80066c6:	466a      	mov	r2, sp
 80066c8:	f000 f848 	bl	800675c <_fstat_r>
 80066cc:	2800      	cmp	r0, #0
 80066ce:	dbec      	blt.n	80066aa <__swhatbuf_r+0x12>
 80066d0:	9901      	ldr	r1, [sp, #4]
 80066d2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80066d6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80066da:	4259      	negs	r1, r3
 80066dc:	4159      	adcs	r1, r3
 80066de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80066e2:	e7eb      	b.n	80066bc <__swhatbuf_r+0x24>

080066e4 <__smakebuf_r>:
 80066e4:	898b      	ldrh	r3, [r1, #12]
 80066e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80066e8:	079d      	lsls	r5, r3, #30
 80066ea:	4606      	mov	r6, r0
 80066ec:	460c      	mov	r4, r1
 80066ee:	d507      	bpl.n	8006700 <__smakebuf_r+0x1c>
 80066f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80066f4:	6023      	str	r3, [r4, #0]
 80066f6:	6123      	str	r3, [r4, #16]
 80066f8:	2301      	movs	r3, #1
 80066fa:	6163      	str	r3, [r4, #20]
 80066fc:	b002      	add	sp, #8
 80066fe:	bd70      	pop	{r4, r5, r6, pc}
 8006700:	ab01      	add	r3, sp, #4
 8006702:	466a      	mov	r2, sp
 8006704:	f7ff ffc8 	bl	8006698 <__swhatbuf_r>
 8006708:	9900      	ldr	r1, [sp, #0]
 800670a:	4605      	mov	r5, r0
 800670c:	4630      	mov	r0, r6
 800670e:	f7ff fab3 	bl	8005c78 <_malloc_r>
 8006712:	b948      	cbnz	r0, 8006728 <__smakebuf_r+0x44>
 8006714:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006718:	059a      	lsls	r2, r3, #22
 800671a:	d4ef      	bmi.n	80066fc <__smakebuf_r+0x18>
 800671c:	f023 0303 	bic.w	r3, r3, #3
 8006720:	f043 0302 	orr.w	r3, r3, #2
 8006724:	81a3      	strh	r3, [r4, #12]
 8006726:	e7e3      	b.n	80066f0 <__smakebuf_r+0xc>
 8006728:	89a3      	ldrh	r3, [r4, #12]
 800672a:	6020      	str	r0, [r4, #0]
 800672c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006730:	81a3      	strh	r3, [r4, #12]
 8006732:	9b00      	ldr	r3, [sp, #0]
 8006734:	6163      	str	r3, [r4, #20]
 8006736:	9b01      	ldr	r3, [sp, #4]
 8006738:	6120      	str	r0, [r4, #16]
 800673a:	b15b      	cbz	r3, 8006754 <__smakebuf_r+0x70>
 800673c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006740:	4630      	mov	r0, r6
 8006742:	f000 f81d 	bl	8006780 <_isatty_r>
 8006746:	b128      	cbz	r0, 8006754 <__smakebuf_r+0x70>
 8006748:	89a3      	ldrh	r3, [r4, #12]
 800674a:	f023 0303 	bic.w	r3, r3, #3
 800674e:	f043 0301 	orr.w	r3, r3, #1
 8006752:	81a3      	strh	r3, [r4, #12]
 8006754:	89a3      	ldrh	r3, [r4, #12]
 8006756:	431d      	orrs	r5, r3
 8006758:	81a5      	strh	r5, [r4, #12]
 800675a:	e7cf      	b.n	80066fc <__smakebuf_r+0x18>

0800675c <_fstat_r>:
 800675c:	b538      	push	{r3, r4, r5, lr}
 800675e:	4d07      	ldr	r5, [pc, #28]	; (800677c <_fstat_r+0x20>)
 8006760:	2300      	movs	r3, #0
 8006762:	4604      	mov	r4, r0
 8006764:	4608      	mov	r0, r1
 8006766:	4611      	mov	r1, r2
 8006768:	602b      	str	r3, [r5, #0]
 800676a:	f7fa ffd2 	bl	8001712 <_fstat>
 800676e:	1c43      	adds	r3, r0, #1
 8006770:	d102      	bne.n	8006778 <_fstat_r+0x1c>
 8006772:	682b      	ldr	r3, [r5, #0]
 8006774:	b103      	cbz	r3, 8006778 <_fstat_r+0x1c>
 8006776:	6023      	str	r3, [r4, #0]
 8006778:	bd38      	pop	{r3, r4, r5, pc}
 800677a:	bf00      	nop
 800677c:	200003ac 	.word	0x200003ac

08006780 <_isatty_r>:
 8006780:	b538      	push	{r3, r4, r5, lr}
 8006782:	4d06      	ldr	r5, [pc, #24]	; (800679c <_isatty_r+0x1c>)
 8006784:	2300      	movs	r3, #0
 8006786:	4604      	mov	r4, r0
 8006788:	4608      	mov	r0, r1
 800678a:	602b      	str	r3, [r5, #0]
 800678c:	f7fa ffd1 	bl	8001732 <_isatty>
 8006790:	1c43      	adds	r3, r0, #1
 8006792:	d102      	bne.n	800679a <_isatty_r+0x1a>
 8006794:	682b      	ldr	r3, [r5, #0]
 8006796:	b103      	cbz	r3, 800679a <_isatty_r+0x1a>
 8006798:	6023      	str	r3, [r4, #0]
 800679a:	bd38      	pop	{r3, r4, r5, pc}
 800679c:	200003ac 	.word	0x200003ac

080067a0 <_init>:
 80067a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067a2:	bf00      	nop
 80067a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067a6:	bc08      	pop	{r3}
 80067a8:	469e      	mov	lr, r3
 80067aa:	4770      	bx	lr

080067ac <_fini>:
 80067ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ae:	bf00      	nop
 80067b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067b2:	bc08      	pop	{r3}
 80067b4:	469e      	mov	lr, r3
 80067b6:	4770      	bx	lr
