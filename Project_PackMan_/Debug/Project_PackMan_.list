
Project_PackMan_.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d50  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08004ef0  08004ef0  00014ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f54  08004f54  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08004f54  08004f54  00014f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f5c  08004f5c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f5c  08004f5c  00014f5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f60  08004f60  00014f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004f64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f4  20000068  08004fcc  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000035c  08004fcc  0002035c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e7a8  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002139  00000000  00000000  0002e883  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000df8  00000000  00000000  000309c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000aeb  00000000  00000000  000317b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001841f  00000000  00000000  000322a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ffe6  00000000  00000000  0004a6c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009b7d8  00000000  00000000  0005a6a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000424c  00000000  00000000  000f5e80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000fa0cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004ed8 	.word	0x08004ed8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08004ed8 	.word	0x08004ed8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000580:	f000 fd0e 	bl	8000fa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000584:	f000 f81c 	bl	80005c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000588:	f000 f9da 	bl	8000940 <MX_GPIO_Init>
  MX_DMA_Init();
 800058c:	f000 f9b8 	bl	8000900 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000590:	f000 f98c 	bl	80008ac <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000594:	f000 f87c 	bl	8000690 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000598:	f000 f8da 	bl	8000750 <MX_TIM2_Init>
  MX_TIM3_Init();
 800059c:	f000 f92c 	bl	80007f8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  printf("Program Start");
 80005a0:	4804      	ldr	r0, [pc, #16]	; (80005b4 <main+0x38>)
 80005a2:	f003 fe25 	bl	80041f0 <iprintf>
  HAL_ADC_Start_DMA(&hadc1, dir, 2);
 80005a6:	2202      	movs	r2, #2
 80005a8:	4903      	ldr	r1, [pc, #12]	; (80005b8 <main+0x3c>)
 80005aa:	4804      	ldr	r0, [pc, #16]	; (80005bc <main+0x40>)
 80005ac:	f000 fdae 	bl	800110c <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005b0:	e7fe      	b.n	80005b0 <main+0x34>
 80005b2:	bf00      	nop
 80005b4:	08004ef0 	.word	0x08004ef0
 80005b8:	20000200 	.word	0x20000200
 80005bc:	20000084 	.word	0x20000084

080005c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b094      	sub	sp, #80	; 0x50
 80005c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c6:	f107 0320 	add.w	r3, r7, #32
 80005ca:	2230      	movs	r2, #48	; 0x30
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f003 fe63 	bl	800429a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d4:	f107 030c 	add.w	r3, r7, #12
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
 80005e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e4:	2300      	movs	r3, #0
 80005e6:	60bb      	str	r3, [r7, #8]
 80005e8:	4b27      	ldr	r3, [pc, #156]	; (8000688 <SystemClock_Config+0xc8>)
 80005ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ec:	4a26      	ldr	r2, [pc, #152]	; (8000688 <SystemClock_Config+0xc8>)
 80005ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f2:	6413      	str	r3, [r2, #64]	; 0x40
 80005f4:	4b24      	ldr	r3, [pc, #144]	; (8000688 <SystemClock_Config+0xc8>)
 80005f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005fc:	60bb      	str	r3, [r7, #8]
 80005fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000600:	2300      	movs	r3, #0
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	4b21      	ldr	r3, [pc, #132]	; (800068c <SystemClock_Config+0xcc>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a20      	ldr	r2, [pc, #128]	; (800068c <SystemClock_Config+0xcc>)
 800060a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800060e:	6013      	str	r3, [r2, #0]
 8000610:	4b1e      	ldr	r3, [pc, #120]	; (800068c <SystemClock_Config+0xcc>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800061c:	2301      	movs	r3, #1
 800061e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000620:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000624:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000626:	2302      	movs	r3, #2
 8000628:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800062a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800062e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000630:	2304      	movs	r3, #4
 8000632:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000634:	2364      	movs	r3, #100	; 0x64
 8000636:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000638:	2302      	movs	r3, #2
 800063a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800063c:	2304      	movs	r3, #4
 800063e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000640:	f107 0320 	add.w	r3, r7, #32
 8000644:	4618      	mov	r0, r3
 8000646:	f001 ff3f 	bl	80024c8 <HAL_RCC_OscConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000650:	f000 f9f0 	bl	8000a34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000654:	230f      	movs	r3, #15
 8000656:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000658:	2302      	movs	r3, #2
 800065a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000660:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000664:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000666:	2300      	movs	r3, #0
 8000668:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800066a:	f107 030c 	add.w	r3, r7, #12
 800066e:	2103      	movs	r1, #3
 8000670:	4618      	mov	r0, r3
 8000672:	f002 f9a1 	bl	80029b8 <HAL_RCC_ClockConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800067c:	f000 f9da 	bl	8000a34 <Error_Handler>
  }
}
 8000680:	bf00      	nop
 8000682:	3750      	adds	r7, #80	; 0x50
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40023800 	.word	0x40023800
 800068c:	40007000 	.word	0x40007000

08000690 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000696:	463b      	mov	r3, r7
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006a2:	4b29      	ldr	r3, [pc, #164]	; (8000748 <MX_ADC1_Init+0xb8>)
 80006a4:	4a29      	ldr	r2, [pc, #164]	; (800074c <MX_ADC1_Init+0xbc>)
 80006a6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006a8:	4b27      	ldr	r3, [pc, #156]	; (8000748 <MX_ADC1_Init+0xb8>)
 80006aa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006ae:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006b0:	4b25      	ldr	r3, [pc, #148]	; (8000748 <MX_ADC1_Init+0xb8>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80006b6:	4b24      	ldr	r3, [pc, #144]	; (8000748 <MX_ADC1_Init+0xb8>)
 80006b8:	2201      	movs	r2, #1
 80006ba:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006bc:	4b22      	ldr	r3, [pc, #136]	; (8000748 <MX_ADC1_Init+0xb8>)
 80006be:	2201      	movs	r2, #1
 80006c0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006c2:	4b21      	ldr	r3, [pc, #132]	; (8000748 <MX_ADC1_Init+0xb8>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80006ca:	4b1f      	ldr	r3, [pc, #124]	; (8000748 <MX_ADC1_Init+0xb8>)
 80006cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80006d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80006d2:	4b1d      	ldr	r3, [pc, #116]	; (8000748 <MX_ADC1_Init+0xb8>)
 80006d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006d8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006da:	4b1b      	ldr	r3, [pc, #108]	; (8000748 <MX_ADC1_Init+0xb8>)
 80006dc:	2200      	movs	r2, #0
 80006de:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80006e0:	4b19      	ldr	r3, [pc, #100]	; (8000748 <MX_ADC1_Init+0xb8>)
 80006e2:	2202      	movs	r2, #2
 80006e4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80006e6:	4b18      	ldr	r3, [pc, #96]	; (8000748 <MX_ADC1_Init+0xb8>)
 80006e8:	2201      	movs	r2, #1
 80006ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006ee:	4b16      	ldr	r3, [pc, #88]	; (8000748 <MX_ADC1_Init+0xb8>)
 80006f0:	2201      	movs	r2, #1
 80006f2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006f4:	4814      	ldr	r0, [pc, #80]	; (8000748 <MX_ADC1_Init+0xb8>)
 80006f6:	f000 fcc5 	bl	8001084 <HAL_ADC_Init>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000700:	f000 f998 	bl	8000a34 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000704:	2300      	movs	r3, #0
 8000706:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000708:	2301      	movs	r3, #1
 800070a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 800070c:	2304      	movs	r3, #4
 800070e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000710:	463b      	mov	r3, r7
 8000712:	4619      	mov	r1, r3
 8000714:	480c      	ldr	r0, [pc, #48]	; (8000748 <MX_ADC1_Init+0xb8>)
 8000716:	f000 fe07 	bl	8001328 <HAL_ADC_ConfigChannel>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000720:	f000 f988 	bl	8000a34 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000724:	2301      	movs	r3, #1
 8000726:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000728:	2302      	movs	r3, #2
 800072a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800072c:	463b      	mov	r3, r7
 800072e:	4619      	mov	r1, r3
 8000730:	4805      	ldr	r0, [pc, #20]	; (8000748 <MX_ADC1_Init+0xb8>)
 8000732:	f000 fdf9 	bl	8001328 <HAL_ADC_ConfigChannel>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 800073c:	f000 f97a 	bl	8000a34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000740:	bf00      	nop
 8000742:	3710      	adds	r7, #16
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	20000084 	.word	0x20000084
 800074c:	40012000 	.word	0x40012000

08000750 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b086      	sub	sp, #24
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000756:	f107 0308 	add.w	r3, r7, #8
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]
 8000760:	609a      	str	r2, [r3, #8]
 8000762:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000764:	463b      	mov	r3, r7
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800076c:	4b21      	ldr	r3, [pc, #132]	; (80007f4 <MX_TIM2_Init+0xa4>)
 800076e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000772:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10000-1;
 8000774:	4b1f      	ldr	r3, [pc, #124]	; (80007f4 <MX_TIM2_Init+0xa4>)
 8000776:	f242 720f 	movw	r2, #9999	; 0x270f
 800077a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800077c:	4b1d      	ldr	r3, [pc, #116]	; (80007f4 <MX_TIM2_Init+0xa4>)
 800077e:	2200      	movs	r2, #0
 8000780:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8000782:	4b1c      	ldr	r3, [pc, #112]	; (80007f4 <MX_TIM2_Init+0xa4>)
 8000784:	f242 720f 	movw	r2, #9999	; 0x270f
 8000788:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800078a:	4b1a      	ldr	r3, [pc, #104]	; (80007f4 <MX_TIM2_Init+0xa4>)
 800078c:	2200      	movs	r2, #0
 800078e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000790:	4b18      	ldr	r3, [pc, #96]	; (80007f4 <MX_TIM2_Init+0xa4>)
 8000792:	2200      	movs	r2, #0
 8000794:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000796:	4817      	ldr	r0, [pc, #92]	; (80007f4 <MX_TIM2_Init+0xa4>)
 8000798:	f002 fb2e 	bl	8002df8 <HAL_TIM_Base_Init>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80007a2:	f000 f947 	bl	8000a34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 80007a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007aa:	60bb      	str	r3, [r7, #8]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 80007ac:	2300      	movs	r3, #0
 80007ae:	60fb      	str	r3, [r7, #12]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 80007b0:	2300      	movs	r3, #0
 80007b2:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockFilter = 0;
 80007b4:	2300      	movs	r3, #0
 80007b6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007b8:	f107 0308 	add.w	r3, r7, #8
 80007bc:	4619      	mov	r1, r3
 80007be:	480d      	ldr	r0, [pc, #52]	; (80007f4 <MX_TIM2_Init+0xa4>)
 80007c0:	f002 fd82 	bl	80032c8 <HAL_TIM_ConfigClockSource>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80007ca:	f000 f933 	bl	8000a34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ce:	2300      	movs	r3, #0
 80007d0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007d2:	2300      	movs	r3, #0
 80007d4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007d6:	463b      	mov	r3, r7
 80007d8:	4619      	mov	r1, r3
 80007da:	4806      	ldr	r0, [pc, #24]	; (80007f4 <MX_TIM2_Init+0xa4>)
 80007dc:	f003 f914 	bl	8003a08 <HAL_TIMEx_MasterConfigSynchronization>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80007e6:	f000 f925 	bl	8000a34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	3718      	adds	r7, #24
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	2000012c 	.word	0x2000012c

080007f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b08a      	sub	sp, #40	; 0x28
 80007fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007fe:	f107 0320 	add.w	r3, r7, #32
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000808:	1d3b      	adds	r3, r7, #4
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
 8000812:	60da      	str	r2, [r3, #12]
 8000814:	611a      	str	r2, [r3, #16]
 8000816:	615a      	str	r2, [r3, #20]
 8000818:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800081a:	4b22      	ldr	r3, [pc, #136]	; (80008a4 <MX_TIM3_Init+0xac>)
 800081c:	4a22      	ldr	r2, [pc, #136]	; (80008a8 <MX_TIM3_Init+0xb0>)
 800081e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 290-1;
 8000820:	4b20      	ldr	r3, [pc, #128]	; (80008a4 <MX_TIM3_Init+0xac>)
 8000822:	f240 1221 	movw	r2, #289	; 0x121
 8000826:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000828:	4b1e      	ldr	r3, [pc, #120]	; (80008a4 <MX_TIM3_Init+0xac>)
 800082a:	2200      	movs	r2, #0
 800082c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 800082e:	4b1d      	ldr	r3, [pc, #116]	; (80008a4 <MX_TIM3_Init+0xac>)
 8000830:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000834:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000836:	4b1b      	ldr	r3, [pc, #108]	; (80008a4 <MX_TIM3_Init+0xac>)
 8000838:	2200      	movs	r2, #0
 800083a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800083c:	4b19      	ldr	r3, [pc, #100]	; (80008a4 <MX_TIM3_Init+0xac>)
 800083e:	2280      	movs	r2, #128	; 0x80
 8000840:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000842:	4818      	ldr	r0, [pc, #96]	; (80008a4 <MX_TIM3_Init+0xac>)
 8000844:	f002 fb27 	bl	8002e96 <HAL_TIM_PWM_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800084e:	f000 f8f1 	bl	8000a34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000852:	2300      	movs	r3, #0
 8000854:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000856:	2300      	movs	r3, #0
 8000858:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800085a:	f107 0320 	add.w	r3, r7, #32
 800085e:	4619      	mov	r1, r3
 8000860:	4810      	ldr	r0, [pc, #64]	; (80008a4 <MX_TIM3_Init+0xac>)
 8000862:	f003 f8d1 	bl	8003a08 <HAL_TIMEx_MasterConfigSynchronization>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 800086c:	f000 f8e2 	bl	8000a34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000870:	2360      	movs	r3, #96	; 0x60
 8000872:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000874:	2300      	movs	r3, #0
 8000876:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000878:	2300      	movs	r3, #0
 800087a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800087c:	2300      	movs	r3, #0
 800087e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000880:	1d3b      	adds	r3, r7, #4
 8000882:	2200      	movs	r2, #0
 8000884:	4619      	mov	r1, r3
 8000886:	4807      	ldr	r0, [pc, #28]	; (80008a4 <MX_TIM3_Init+0xac>)
 8000888:	f002 fc5c 	bl	8003144 <HAL_TIM_PWM_ConfigChannel>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000892:	f000 f8cf 	bl	8000a34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000896:	4803      	ldr	r0, [pc, #12]	; (80008a4 <MX_TIM3_Init+0xac>)
 8000898:	f000 f9e2 	bl	8000c60 <HAL_TIM_MspPostInit>

}
 800089c:	bf00      	nop
 800089e:	3728      	adds	r7, #40	; 0x28
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	20000174 	.word	0x20000174
 80008a8:	40000400 	.word	0x40000400

080008ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008b0:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <MX_USART2_UART_Init+0x4c>)
 80008b2:	4a12      	ldr	r2, [pc, #72]	; (80008fc <MX_USART2_UART_Init+0x50>)
 80008b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008b6:	4b10      	ldr	r3, [pc, #64]	; (80008f8 <MX_USART2_UART_Init+0x4c>)
 80008b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008be:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <MX_USART2_UART_Init+0x4c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008c4:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <MX_USART2_UART_Init+0x4c>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ca:	4b0b      	ldr	r3, [pc, #44]	; (80008f8 <MX_USART2_UART_Init+0x4c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008d0:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <MX_USART2_UART_Init+0x4c>)
 80008d2:	220c      	movs	r2, #12
 80008d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008d6:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <MX_USART2_UART_Init+0x4c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008dc:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <MX_USART2_UART_Init+0x4c>)
 80008de:	2200      	movs	r2, #0
 80008e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008e2:	4805      	ldr	r0, [pc, #20]	; (80008f8 <MX_USART2_UART_Init+0x4c>)
 80008e4:	f003 f912 	bl	8003b0c <HAL_UART_Init>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008ee:	f000 f8a1 	bl	8000a34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	200001bc 	.word	0x200001bc
 80008fc:	40004400 	.word	0x40004400

08000900 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	607b      	str	r3, [r7, #4]
 800090a:	4b0c      	ldr	r3, [pc, #48]	; (800093c <MX_DMA_Init+0x3c>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a0b      	ldr	r2, [pc, #44]	; (800093c <MX_DMA_Init+0x3c>)
 8000910:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
 8000916:	4b09      	ldr	r3, [pc, #36]	; (800093c <MX_DMA_Init+0x3c>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000922:	2200      	movs	r2, #0
 8000924:	2100      	movs	r1, #0
 8000926:	2038      	movs	r0, #56	; 0x38
 8000928:	f001 f889 	bl	8001a3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800092c:	2038      	movs	r0, #56	; 0x38
 800092e:	f001 f8a2 	bl	8001a76 <HAL_NVIC_EnableIRQ>

}
 8000932:	bf00      	nop
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40023800 	.word	0x40023800

08000940 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b08a      	sub	sp, #40	; 0x28
 8000944:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000946:	f107 0314 	add.w	r3, r7, #20
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	605a      	str	r2, [r3, #4]
 8000950:	609a      	str	r2, [r3, #8]
 8000952:	60da      	str	r2, [r3, #12]
 8000954:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	613b      	str	r3, [r7, #16]
 800095a:	4b33      	ldr	r3, [pc, #204]	; (8000a28 <MX_GPIO_Init+0xe8>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a32      	ldr	r2, [pc, #200]	; (8000a28 <MX_GPIO_Init+0xe8>)
 8000960:	f043 0304 	orr.w	r3, r3, #4
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b30      	ldr	r3, [pc, #192]	; (8000a28 <MX_GPIO_Init+0xe8>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0304 	and.w	r3, r3, #4
 800096e:	613b      	str	r3, [r7, #16]
 8000970:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	60fb      	str	r3, [r7, #12]
 8000976:	4b2c      	ldr	r3, [pc, #176]	; (8000a28 <MX_GPIO_Init+0xe8>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	4a2b      	ldr	r2, [pc, #172]	; (8000a28 <MX_GPIO_Init+0xe8>)
 800097c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000980:	6313      	str	r3, [r2, #48]	; 0x30
 8000982:	4b29      	ldr	r3, [pc, #164]	; (8000a28 <MX_GPIO_Init+0xe8>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	60bb      	str	r3, [r7, #8]
 8000992:	4b25      	ldr	r3, [pc, #148]	; (8000a28 <MX_GPIO_Init+0xe8>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	4a24      	ldr	r2, [pc, #144]	; (8000a28 <MX_GPIO_Init+0xe8>)
 8000998:	f043 0301 	orr.w	r3, r3, #1
 800099c:	6313      	str	r3, [r2, #48]	; 0x30
 800099e:	4b22      	ldr	r3, [pc, #136]	; (8000a28 <MX_GPIO_Init+0xe8>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	60bb      	str	r3, [r7, #8]
 80009a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	607b      	str	r3, [r7, #4]
 80009ae:	4b1e      	ldr	r3, [pc, #120]	; (8000a28 <MX_GPIO_Init+0xe8>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	4a1d      	ldr	r2, [pc, #116]	; (8000a28 <MX_GPIO_Init+0xe8>)
 80009b4:	f043 0302 	orr.w	r3, r3, #2
 80009b8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ba:	4b1b      	ldr	r3, [pc, #108]	; (8000a28 <MX_GPIO_Init+0xe8>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	f003 0302 	and.w	r3, r3, #2
 80009c2:	607b      	str	r3, [r7, #4]
 80009c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009c6:	2200      	movs	r2, #0
 80009c8:	2120      	movs	r1, #32
 80009ca:	4818      	ldr	r0, [pc, #96]	; (8000a2c <MX_GPIO_Init+0xec>)
 80009cc:	f001 fd62 	bl	8002494 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009d6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	4619      	mov	r1, r3
 80009e6:	4812      	ldr	r0, [pc, #72]	; (8000a30 <MX_GPIO_Init+0xf0>)
 80009e8:	f001 fbd0 	bl	800218c <HAL_GPIO_Init>

  /*Configure GPIO pin : Joystick_Button_Pin */
  GPIO_InitStruct.Pin = Joystick_Button_Pin;
 80009ec:	2302      	movs	r3, #2
 80009ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f0:	2300      	movs	r3, #0
 80009f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009f4:	2301      	movs	r3, #1
 80009f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Joystick_Button_GPIO_Port, &GPIO_InitStruct);
 80009f8:	f107 0314 	add.w	r3, r7, #20
 80009fc:	4619      	mov	r1, r3
 80009fe:	480c      	ldr	r0, [pc, #48]	; (8000a30 <MX_GPIO_Init+0xf0>)
 8000a00:	f001 fbc4 	bl	800218c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a04:	2320      	movs	r3, #32
 8000a06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a10:	2300      	movs	r3, #0
 8000a12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4804      	ldr	r0, [pc, #16]	; (8000a2c <MX_GPIO_Init+0xec>)
 8000a1c:	f001 fbb6 	bl	800218c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a20:	bf00      	nop
 8000a22:	3728      	adds	r7, #40	; 0x28
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40023800 	.word	0x40023800
 8000a2c:	40020000 	.word	0x40020000
 8000a30:	40020800 	.word	0x40020800

08000a34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a38:	b672      	cpsid	i
}
 8000a3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a3c:	e7fe      	b.n	8000a3c <Error_Handler+0x8>
	...

08000a40 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	607b      	str	r3, [r7, #4]
 8000a4a:	4b10      	ldr	r3, [pc, #64]	; (8000a8c <HAL_MspInit+0x4c>)
 8000a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4e:	4a0f      	ldr	r2, [pc, #60]	; (8000a8c <HAL_MspInit+0x4c>)
 8000a50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a54:	6453      	str	r3, [r2, #68]	; 0x44
 8000a56:	4b0d      	ldr	r3, [pc, #52]	; (8000a8c <HAL_MspInit+0x4c>)
 8000a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	603b      	str	r3, [r7, #0]
 8000a66:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <HAL_MspInit+0x4c>)
 8000a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6a:	4a08      	ldr	r2, [pc, #32]	; (8000a8c <HAL_MspInit+0x4c>)
 8000a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a70:	6413      	str	r3, [r2, #64]	; 0x40
 8000a72:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <HAL_MspInit+0x4c>)
 8000a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a7a:	603b      	str	r3, [r7, #0]
 8000a7c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a7e:	2007      	movs	r0, #7
 8000a80:	f000 ffd2 	bl	8001a28 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a84:	bf00      	nop
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40023800 	.word	0x40023800

08000a90 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08a      	sub	sp, #40	; 0x28
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	60da      	str	r2, [r3, #12]
 8000aa6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a2f      	ldr	r2, [pc, #188]	; (8000b6c <HAL_ADC_MspInit+0xdc>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d157      	bne.n	8000b62 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	613b      	str	r3, [r7, #16]
 8000ab6:	4b2e      	ldr	r3, [pc, #184]	; (8000b70 <HAL_ADC_MspInit+0xe0>)
 8000ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aba:	4a2d      	ldr	r2, [pc, #180]	; (8000b70 <HAL_ADC_MspInit+0xe0>)
 8000abc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ac0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ac2:	4b2b      	ldr	r3, [pc, #172]	; (8000b70 <HAL_ADC_MspInit+0xe0>)
 8000ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000aca:	613b      	str	r3, [r7, #16]
 8000acc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	4b27      	ldr	r3, [pc, #156]	; (8000b70 <HAL_ADC_MspInit+0xe0>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	4a26      	ldr	r2, [pc, #152]	; (8000b70 <HAL_ADC_MspInit+0xe0>)
 8000ad8:	f043 0301 	orr.w	r3, r3, #1
 8000adc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ade:	4b24      	ldr	r3, [pc, #144]	; (8000b70 <HAL_ADC_MspInit+0xe0>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	f003 0301 	and.w	r3, r3, #1
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = x_Value_Pin|y_Value_Pin;
 8000aea:	2303      	movs	r3, #3
 8000aec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000aee:	2303      	movs	r3, #3
 8000af0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af6:	f107 0314 	add.w	r3, r7, #20
 8000afa:	4619      	mov	r1, r3
 8000afc:	481d      	ldr	r0, [pc, #116]	; (8000b74 <HAL_ADC_MspInit+0xe4>)
 8000afe:	f001 fb45 	bl	800218c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000b02:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <HAL_ADC_MspInit+0xe8>)
 8000b04:	4a1d      	ldr	r2, [pc, #116]	; (8000b7c <HAL_ADC_MspInit+0xec>)
 8000b06:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000b08:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <HAL_ADC_MspInit+0xe8>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b0e:	4b1a      	ldr	r3, [pc, #104]	; (8000b78 <HAL_ADC_MspInit+0xe8>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b14:	4b18      	ldr	r3, [pc, #96]	; (8000b78 <HAL_ADC_MspInit+0xe8>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b1a:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <HAL_ADC_MspInit+0xe8>)
 8000b1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b20:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000b22:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <HAL_ADC_MspInit+0xe8>)
 8000b24:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b28:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000b2a:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <HAL_ADC_MspInit+0xe8>)
 8000b2c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b30:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b32:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <HAL_ADC_MspInit+0xe8>)
 8000b34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b38:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b3a:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <HAL_ADC_MspInit+0xe8>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b40:	4b0d      	ldr	r3, [pc, #52]	; (8000b78 <HAL_ADC_MspInit+0xe8>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b46:	480c      	ldr	r0, [pc, #48]	; (8000b78 <HAL_ADC_MspInit+0xe8>)
 8000b48:	f000 ffb0 	bl	8001aac <HAL_DMA_Init>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000b52:	f7ff ff6f 	bl	8000a34 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4a07      	ldr	r2, [pc, #28]	; (8000b78 <HAL_ADC_MspInit+0xe8>)
 8000b5a:	639a      	str	r2, [r3, #56]	; 0x38
 8000b5c:	4a06      	ldr	r2, [pc, #24]	; (8000b78 <HAL_ADC_MspInit+0xe8>)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b62:	bf00      	nop
 8000b64:	3728      	adds	r7, #40	; 0x28
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40012000 	.word	0x40012000
 8000b70:	40023800 	.word	0x40023800
 8000b74:	40020000 	.word	0x40020000
 8000b78:	200000cc 	.word	0x200000cc
 8000b7c:	40026410 	.word	0x40026410

08000b80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	; 0x28
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]
 8000b92:	609a      	str	r2, [r3, #8]
 8000b94:	60da      	str	r2, [r3, #12]
 8000b96:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ba0:	d134      	bne.n	8000c0c <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	613b      	str	r3, [r7, #16]
 8000ba6:	4b1b      	ldr	r3, [pc, #108]	; (8000c14 <HAL_TIM_Base_MspInit+0x94>)
 8000ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000baa:	4a1a      	ldr	r2, [pc, #104]	; (8000c14 <HAL_TIM_Base_MspInit+0x94>)
 8000bac:	f043 0301 	orr.w	r3, r3, #1
 8000bb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb2:	4b18      	ldr	r3, [pc, #96]	; (8000c14 <HAL_TIM_Base_MspInit+0x94>)
 8000bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb6:	f003 0301 	and.w	r3, r3, #1
 8000bba:	613b      	str	r3, [r7, #16]
 8000bbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	4b14      	ldr	r3, [pc, #80]	; (8000c14 <HAL_TIM_Base_MspInit+0x94>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	4a13      	ldr	r2, [pc, #76]	; (8000c14 <HAL_TIM_Base_MspInit+0x94>)
 8000bc8:	f043 0301 	orr.w	r3, r3, #1
 8000bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bce:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <HAL_TIM_Base_MspInit+0x94>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000bda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be0:	2302      	movs	r3, #2
 8000be2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be8:	2300      	movs	r3, #0
 8000bea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000bec:	2301      	movs	r3, #1
 8000bee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf0:	f107 0314 	add.w	r3, r7, #20
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4808      	ldr	r0, [pc, #32]	; (8000c18 <HAL_TIM_Base_MspInit+0x98>)
 8000bf8:	f001 fac8 	bl	800218c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	2100      	movs	r1, #0
 8000c00:	201c      	movs	r0, #28
 8000c02:	f000 ff1c 	bl	8001a3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c06:	201c      	movs	r0, #28
 8000c08:	f000 ff35 	bl	8001a76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c0c:	bf00      	nop
 8000c0e:	3728      	adds	r7, #40	; 0x28
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	40023800 	.word	0x40023800
 8000c18:	40020000 	.word	0x40020000

08000c1c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b085      	sub	sp, #20
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a0b      	ldr	r2, [pc, #44]	; (8000c58 <HAL_TIM_PWM_MspInit+0x3c>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d10d      	bne.n	8000c4a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60fb      	str	r3, [r7, #12]
 8000c32:	4b0a      	ldr	r3, [pc, #40]	; (8000c5c <HAL_TIM_PWM_MspInit+0x40>)
 8000c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c36:	4a09      	ldr	r2, [pc, #36]	; (8000c5c <HAL_TIM_PWM_MspInit+0x40>)
 8000c38:	f043 0302 	orr.w	r3, r3, #2
 8000c3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c3e:	4b07      	ldr	r3, [pc, #28]	; (8000c5c <HAL_TIM_PWM_MspInit+0x40>)
 8000c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c42:	f003 0302 	and.w	r3, r3, #2
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000c4a:	bf00      	nop
 8000c4c:	3714      	adds	r7, #20
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	40000400 	.word	0x40000400
 8000c5c:	40023800 	.word	0x40023800

08000c60 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b088      	sub	sp, #32
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c68:	f107 030c 	add.w	r3, r7, #12
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]
 8000c76:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a12      	ldr	r2, [pc, #72]	; (8000cc8 <HAL_TIM_MspPostInit+0x68>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d11d      	bne.n	8000cbe <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	60bb      	str	r3, [r7, #8]
 8000c86:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <HAL_TIM_MspPostInit+0x6c>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4a10      	ldr	r2, [pc, #64]	; (8000ccc <HAL_TIM_MspPostInit+0x6c>)
 8000c8c:	f043 0301 	orr.w	r3, r3, #1
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
 8000c92:	4b0e      	ldr	r3, [pc, #56]	; (8000ccc <HAL_TIM_MspPostInit+0x6c>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f003 0301 	and.w	r3, r3, #1
 8000c9a:	60bb      	str	r3, [r7, #8]
 8000c9c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c9e:	2340      	movs	r3, #64	; 0x40
 8000ca0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000caa:	2300      	movs	r3, #0
 8000cac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb2:	f107 030c 	add.w	r3, r7, #12
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4805      	ldr	r0, [pc, #20]	; (8000cd0 <HAL_TIM_MspPostInit+0x70>)
 8000cba:	f001 fa67 	bl	800218c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000cbe:	bf00      	nop
 8000cc0:	3720      	adds	r7, #32
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40000400 	.word	0x40000400
 8000ccc:	40023800 	.word	0x40023800
 8000cd0:	40020000 	.word	0x40020000

08000cd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b08a      	sub	sp, #40	; 0x28
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cdc:	f107 0314 	add.w	r3, r7, #20
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]
 8000cea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a19      	ldr	r2, [pc, #100]	; (8000d58 <HAL_UART_MspInit+0x84>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d12b      	bne.n	8000d4e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	613b      	str	r3, [r7, #16]
 8000cfa:	4b18      	ldr	r3, [pc, #96]	; (8000d5c <HAL_UART_MspInit+0x88>)
 8000cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfe:	4a17      	ldr	r2, [pc, #92]	; (8000d5c <HAL_UART_MspInit+0x88>)
 8000d00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d04:	6413      	str	r3, [r2, #64]	; 0x40
 8000d06:	4b15      	ldr	r3, [pc, #84]	; (8000d5c <HAL_UART_MspInit+0x88>)
 8000d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d0e:	613b      	str	r3, [r7, #16]
 8000d10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	4b11      	ldr	r3, [pc, #68]	; (8000d5c <HAL_UART_MspInit+0x88>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	4a10      	ldr	r2, [pc, #64]	; (8000d5c <HAL_UART_MspInit+0x88>)
 8000d1c:	f043 0301 	orr.w	r3, r3, #1
 8000d20:	6313      	str	r3, [r2, #48]	; 0x30
 8000d22:	4b0e      	ldr	r3, [pc, #56]	; (8000d5c <HAL_UART_MspInit+0x88>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	f003 0301 	and.w	r3, r3, #1
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d2e:	230c      	movs	r3, #12
 8000d30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d32:	2302      	movs	r3, #2
 8000d34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d3e:	2307      	movs	r3, #7
 8000d40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d42:	f107 0314 	add.w	r3, r7, #20
 8000d46:	4619      	mov	r1, r3
 8000d48:	4805      	ldr	r0, [pc, #20]	; (8000d60 <HAL_UART_MspInit+0x8c>)
 8000d4a:	f001 fa1f 	bl	800218c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d4e:	bf00      	nop
 8000d50:	3728      	adds	r7, #40	; 0x28
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40004400 	.word	0x40004400
 8000d5c:	40023800 	.word	0x40023800
 8000d60:	40020000 	.word	0x40020000

08000d64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d68:	e7fe      	b.n	8000d68 <NMI_Handler+0x4>

08000d6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d6e:	e7fe      	b.n	8000d6e <HardFault_Handler+0x4>

08000d70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d74:	e7fe      	b.n	8000d74 <MemManage_Handler+0x4>

08000d76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d76:	b480      	push	{r7}
 8000d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d7a:	e7fe      	b.n	8000d7a <BusFault_Handler+0x4>

08000d7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d80:	e7fe      	b.n	8000d80 <UsageFault_Handler+0x4>

08000d82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d82:	b480      	push	{r7}
 8000d84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr

08000d90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr

08000d9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000db0:	f000 f948 	bl	8001044 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000db4:	bf00      	nop
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000dbc:	4802      	ldr	r0, [pc, #8]	; (8000dc8 <TIM2_IRQHandler+0x10>)
 8000dbe:	f002 f8b9 	bl	8002f34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	2000012c 	.word	0x2000012c

08000dcc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000dd0:	4802      	ldr	r0, [pc, #8]	; (8000ddc <DMA2_Stream0_IRQHandler+0x10>)
 8000dd2:	f000 ff71 	bl	8001cb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	200000cc 	.word	0x200000cc

08000de0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]
 8000df0:	e00a      	b.n	8000e08 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000df2:	f3af 8000 	nop.w
 8000df6:	4601      	mov	r1, r0
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	1c5a      	adds	r2, r3, #1
 8000dfc:	60ba      	str	r2, [r7, #8]
 8000dfe:	b2ca      	uxtb	r2, r1
 8000e00:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	3301      	adds	r3, #1
 8000e06:	617b      	str	r3, [r7, #20]
 8000e08:	697a      	ldr	r2, [r7, #20]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	dbf0      	blt.n	8000df2 <_read+0x12>
  }

  return len;
 8000e10:	687b      	ldr	r3, [r7, #4]
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3718      	adds	r7, #24
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b086      	sub	sp, #24
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	60f8      	str	r0, [r7, #12]
 8000e22:	60b9      	str	r1, [r7, #8]
 8000e24:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e26:	2300      	movs	r3, #0
 8000e28:	617b      	str	r3, [r7, #20]
 8000e2a:	e009      	b.n	8000e40 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	1c5a      	adds	r2, r3, #1
 8000e30:	60ba      	str	r2, [r7, #8]
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	617b      	str	r3, [r7, #20]
 8000e40:	697a      	ldr	r2, [r7, #20]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	dbf1      	blt.n	8000e2c <_write+0x12>
  }
  return len;
 8000e48:	687b      	ldr	r3, [r7, #4]
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3718      	adds	r7, #24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <_close>:

int _close(int file)
{
 8000e52:	b480      	push	{r7}
 8000e54:	b083      	sub	sp, #12
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr

08000e6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	b083      	sub	sp, #12
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
 8000e72:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e7a:	605a      	str	r2, [r3, #4]
  return 0;
 8000e7c:	2300      	movs	r3, #0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	370c      	adds	r7, #12
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr

08000e8a <_isatty>:

int _isatty(int file)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	b083      	sub	sp, #12
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e92:	2301      	movs	r3, #1
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000eac:	2300      	movs	r3, #0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3714      	adds	r7, #20
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
	...

08000ebc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ec4:	4a14      	ldr	r2, [pc, #80]	; (8000f18 <_sbrk+0x5c>)
 8000ec6:	4b15      	ldr	r3, [pc, #84]	; (8000f1c <_sbrk+0x60>)
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ed0:	4b13      	ldr	r3, [pc, #76]	; (8000f20 <_sbrk+0x64>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d102      	bne.n	8000ede <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ed8:	4b11      	ldr	r3, [pc, #68]	; (8000f20 <_sbrk+0x64>)
 8000eda:	4a12      	ldr	r2, [pc, #72]	; (8000f24 <_sbrk+0x68>)
 8000edc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ede:	4b10      	ldr	r3, [pc, #64]	; (8000f20 <_sbrk+0x64>)
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d207      	bcs.n	8000efc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000eec:	f003 fa24 	bl	8004338 <__errno>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	220c      	movs	r2, #12
 8000ef4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8000efa:	e009      	b.n	8000f10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000efc:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <_sbrk+0x64>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f02:	4b07      	ldr	r3, [pc, #28]	; (8000f20 <_sbrk+0x64>)
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4413      	add	r3, r2
 8000f0a:	4a05      	ldr	r2, [pc, #20]	; (8000f20 <_sbrk+0x64>)
 8000f0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3718      	adds	r7, #24
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20020000 	.word	0x20020000
 8000f1c:	00000400 	.word	0x00000400
 8000f20:	20000208 	.word	0x20000208
 8000f24:	20000360 	.word	0x20000360

08000f28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f2c:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <SystemInit+0x20>)
 8000f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f32:	4a05      	ldr	r2, [pc, #20]	; (8000f48 <SystemInit+0x20>)
 8000f34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f84 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f50:	480d      	ldr	r0, [pc, #52]	; (8000f88 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f52:	490e      	ldr	r1, [pc, #56]	; (8000f8c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f54:	4a0e      	ldr	r2, [pc, #56]	; (8000f90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f58:	e002      	b.n	8000f60 <LoopCopyDataInit>

08000f5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f5e:	3304      	adds	r3, #4

08000f60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f64:	d3f9      	bcc.n	8000f5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f66:	4a0b      	ldr	r2, [pc, #44]	; (8000f94 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f68:	4c0b      	ldr	r4, [pc, #44]	; (8000f98 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f6c:	e001      	b.n	8000f72 <LoopFillZerobss>

08000f6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f70:	3204      	adds	r2, #4

08000f72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f74:	d3fb      	bcc.n	8000f6e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f76:	f7ff ffd7 	bl	8000f28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f7a:	f003 f9e3 	bl	8004344 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f7e:	f7ff fafd 	bl	800057c <main>
  bx  lr    
 8000f82:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f8c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000f90:	08004f64 	.word	0x08004f64
  ldr r2, =_sbss
 8000f94:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000f98:	2000035c 	.word	0x2000035c

08000f9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f9c:	e7fe      	b.n	8000f9c <ADC_IRQHandler>
	...

08000fa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fa4:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <HAL_Init+0x40>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a0d      	ldr	r2, [pc, #52]	; (8000fe0 <HAL_Init+0x40>)
 8000faa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fb0:	4b0b      	ldr	r3, [pc, #44]	; (8000fe0 <HAL_Init+0x40>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a0a      	ldr	r2, [pc, #40]	; (8000fe0 <HAL_Init+0x40>)
 8000fb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fbc:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <HAL_Init+0x40>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a07      	ldr	r2, [pc, #28]	; (8000fe0 <HAL_Init+0x40>)
 8000fc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc8:	2003      	movs	r0, #3
 8000fca:	f000 fd2d 	bl	8001a28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fce:	2000      	movs	r0, #0
 8000fd0:	f000 f808 	bl	8000fe4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fd4:	f7ff fd34 	bl	8000a40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40023c00 	.word	0x40023c00

08000fe4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fec:	4b12      	ldr	r3, [pc, #72]	; (8001038 <HAL_InitTick+0x54>)
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	4b12      	ldr	r3, [pc, #72]	; (800103c <HAL_InitTick+0x58>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ffa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001002:	4618      	mov	r0, r3
 8001004:	f000 fd45 	bl	8001a92 <HAL_SYSTICK_Config>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	e00e      	b.n	8001030 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2b0f      	cmp	r3, #15
 8001016:	d80a      	bhi.n	800102e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001018:	2200      	movs	r2, #0
 800101a:	6879      	ldr	r1, [r7, #4]
 800101c:	f04f 30ff 	mov.w	r0, #4294967295
 8001020:	f000 fd0d 	bl	8001a3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001024:	4a06      	ldr	r2, [pc, #24]	; (8001040 <HAL_InitTick+0x5c>)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800102a:	2300      	movs	r3, #0
 800102c:	e000      	b.n	8001030 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
}
 8001030:	4618      	mov	r0, r3
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20000000 	.word	0x20000000
 800103c:	20000008 	.word	0x20000008
 8001040:	20000004 	.word	0x20000004

08001044 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001048:	4b06      	ldr	r3, [pc, #24]	; (8001064 <HAL_IncTick+0x20>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	461a      	mov	r2, r3
 800104e:	4b06      	ldr	r3, [pc, #24]	; (8001068 <HAL_IncTick+0x24>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4413      	add	r3, r2
 8001054:	4a04      	ldr	r2, [pc, #16]	; (8001068 <HAL_IncTick+0x24>)
 8001056:	6013      	str	r3, [r2, #0]
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	20000008 	.word	0x20000008
 8001068:	2000020c 	.word	0x2000020c

0800106c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  return uwTick;
 8001070:	4b03      	ldr	r3, [pc, #12]	; (8001080 <HAL_GetTick+0x14>)
 8001072:	681b      	ldr	r3, [r3, #0]
}
 8001074:	4618      	mov	r0, r3
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	2000020c 	.word	0x2000020c

08001084 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800108c:	2300      	movs	r3, #0
 800108e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d101      	bne.n	800109a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e033      	b.n	8001102 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d109      	bne.n	80010b6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f7ff fcf4 	bl	8000a90 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2200      	movs	r2, #0
 80010ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2200      	movs	r2, #0
 80010b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ba:	f003 0310 	and.w	r3, r3, #16
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d118      	bne.n	80010f4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010ca:	f023 0302 	bic.w	r3, r3, #2
 80010ce:	f043 0202 	orr.w	r2, r3, #2
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f000 fa58 	bl	800158c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2200      	movs	r2, #0
 80010e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e6:	f023 0303 	bic.w	r3, r3, #3
 80010ea:	f043 0201 	orr.w	r2, r3, #1
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	641a      	str	r2, [r3, #64]	; 0x40
 80010f2:	e001      	b.n	80010f8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010f4:	2301      	movs	r3, #1
 80010f6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2200      	movs	r2, #0
 80010fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001100:	7bfb      	ldrb	r3, [r7, #15]
}
 8001102:	4618      	mov	r0, r3
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
	...

0800110c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af00      	add	r7, sp, #0
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	60b9      	str	r1, [r7, #8]
 8001116:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001118:	2300      	movs	r3, #0
 800111a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001122:	2b01      	cmp	r3, #1
 8001124:	d101      	bne.n	800112a <HAL_ADC_Start_DMA+0x1e>
 8001126:	2302      	movs	r3, #2
 8001128:	e0ce      	b.n	80012c8 <HAL_ADC_Start_DMA+0x1bc>
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	2201      	movs	r2, #1
 800112e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	f003 0301 	and.w	r3, r3, #1
 800113c:	2b01      	cmp	r3, #1
 800113e:	d018      	beq.n	8001172 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	689a      	ldr	r2, [r3, #8]
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f042 0201 	orr.w	r2, r2, #1
 800114e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001150:	4b5f      	ldr	r3, [pc, #380]	; (80012d0 <HAL_ADC_Start_DMA+0x1c4>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a5f      	ldr	r2, [pc, #380]	; (80012d4 <HAL_ADC_Start_DMA+0x1c8>)
 8001156:	fba2 2303 	umull	r2, r3, r2, r3
 800115a:	0c9a      	lsrs	r2, r3, #18
 800115c:	4613      	mov	r3, r2
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	4413      	add	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001164:	e002      	b.n	800116c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	3b01      	subs	r3, #1
 800116a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d1f9      	bne.n	8001166 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800117c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001180:	d107      	bne.n	8001192 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	689a      	ldr	r2, [r3, #8]
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001190:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	f003 0301 	and.w	r3, r3, #1
 800119c:	2b01      	cmp	r3, #1
 800119e:	f040 8086 	bne.w	80012ae <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80011aa:	f023 0301 	bic.w	r3, r3, #1
 80011ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d007      	beq.n	80011d4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80011cc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011e0:	d106      	bne.n	80011f0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e6:	f023 0206 	bic.w	r2, r3, #6
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	645a      	str	r2, [r3, #68]	; 0x44
 80011ee:	e002      	b.n	80011f6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	2200      	movs	r2, #0
 80011f4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	2200      	movs	r2, #0
 80011fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011fe:	4b36      	ldr	r3, [pc, #216]	; (80012d8 <HAL_ADC_Start_DMA+0x1cc>)
 8001200:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001206:	4a35      	ldr	r2, [pc, #212]	; (80012dc <HAL_ADC_Start_DMA+0x1d0>)
 8001208:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800120e:	4a34      	ldr	r2, [pc, #208]	; (80012e0 <HAL_ADC_Start_DMA+0x1d4>)
 8001210:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001216:	4a33      	ldr	r2, [pc, #204]	; (80012e4 <HAL_ADC_Start_DMA+0x1d8>)
 8001218:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001222:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	685a      	ldr	r2, [r3, #4]
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001232:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	689a      	ldr	r2, [r3, #8]
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001242:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	334c      	adds	r3, #76	; 0x4c
 800124e:	4619      	mov	r1, r3
 8001250:	68ba      	ldr	r2, [r7, #8]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f000 fcd8 	bl	8001c08 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f003 031f 	and.w	r3, r3, #31
 8001260:	2b00      	cmp	r3, #0
 8001262:	d10f      	bne.n	8001284 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d129      	bne.n	80012c6 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	689a      	ldr	r2, [r3, #8]
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001280:	609a      	str	r2, [r3, #8]
 8001282:	e020      	b.n	80012c6 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a17      	ldr	r2, [pc, #92]	; (80012e8 <HAL_ADC_Start_DMA+0x1dc>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d11b      	bne.n	80012c6 <HAL_ADC_Start_DMA+0x1ba>
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d114      	bne.n	80012c6 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	689a      	ldr	r2, [r3, #8]
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	e00b      	b.n	80012c6 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b2:	f043 0210 	orr.w	r2, r3, #16
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012be:	f043 0201 	orr.w	r2, r3, #1
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80012c6:	2300      	movs	r3, #0
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3718      	adds	r7, #24
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	20000000 	.word	0x20000000
 80012d4:	431bde83 	.word	0x431bde83
 80012d8:	40012300 	.word	0x40012300
 80012dc:	08001785 	.word	0x08001785
 80012e0:	0800183f 	.word	0x0800183f
 80012e4:	0800185b 	.word	0x0800185b
 80012e8:	40012000 	.word	0x40012000

080012ec <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001308:	bf00      	nop
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001328:	b480      	push	{r7}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001332:	2300      	movs	r3, #0
 8001334:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800133c:	2b01      	cmp	r3, #1
 800133e:	d101      	bne.n	8001344 <HAL_ADC_ConfigChannel+0x1c>
 8001340:	2302      	movs	r3, #2
 8001342:	e113      	b.n	800156c <HAL_ADC_ConfigChannel+0x244>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2201      	movs	r2, #1
 8001348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2b09      	cmp	r3, #9
 8001352:	d925      	bls.n	80013a0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	68d9      	ldr	r1, [r3, #12]
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	b29b      	uxth	r3, r3
 8001360:	461a      	mov	r2, r3
 8001362:	4613      	mov	r3, r2
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	4413      	add	r3, r2
 8001368:	3b1e      	subs	r3, #30
 800136a:	2207      	movs	r2, #7
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	43da      	mvns	r2, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	400a      	ands	r2, r1
 8001378:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	68d9      	ldr	r1, [r3, #12]
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	689a      	ldr	r2, [r3, #8]
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	b29b      	uxth	r3, r3
 800138a:	4618      	mov	r0, r3
 800138c:	4603      	mov	r3, r0
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	4403      	add	r3, r0
 8001392:	3b1e      	subs	r3, #30
 8001394:	409a      	lsls	r2, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	430a      	orrs	r2, r1
 800139c:	60da      	str	r2, [r3, #12]
 800139e:	e022      	b.n	80013e6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	6919      	ldr	r1, [r3, #16]
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	b29b      	uxth	r3, r3
 80013ac:	461a      	mov	r2, r3
 80013ae:	4613      	mov	r3, r2
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	4413      	add	r3, r2
 80013b4:	2207      	movs	r2, #7
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	43da      	mvns	r2, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	400a      	ands	r2, r1
 80013c2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	6919      	ldr	r1, [r3, #16]
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	689a      	ldr	r2, [r3, #8]
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	4618      	mov	r0, r3
 80013d6:	4603      	mov	r3, r0
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	4403      	add	r3, r0
 80013dc:	409a      	lsls	r2, r3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	430a      	orrs	r2, r1
 80013e4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	2b06      	cmp	r3, #6
 80013ec:	d824      	bhi.n	8001438 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685a      	ldr	r2, [r3, #4]
 80013f8:	4613      	mov	r3, r2
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	4413      	add	r3, r2
 80013fe:	3b05      	subs	r3, #5
 8001400:	221f      	movs	r2, #31
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	43da      	mvns	r2, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	400a      	ands	r2, r1
 800140e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	b29b      	uxth	r3, r3
 800141c:	4618      	mov	r0, r3
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685a      	ldr	r2, [r3, #4]
 8001422:	4613      	mov	r3, r2
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	4413      	add	r3, r2
 8001428:	3b05      	subs	r3, #5
 800142a:	fa00 f203 	lsl.w	r2, r0, r3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	430a      	orrs	r2, r1
 8001434:	635a      	str	r2, [r3, #52]	; 0x34
 8001436:	e04c      	b.n	80014d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	2b0c      	cmp	r3, #12
 800143e:	d824      	bhi.n	800148a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685a      	ldr	r2, [r3, #4]
 800144a:	4613      	mov	r3, r2
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	4413      	add	r3, r2
 8001450:	3b23      	subs	r3, #35	; 0x23
 8001452:	221f      	movs	r2, #31
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	43da      	mvns	r2, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	400a      	ands	r2, r1
 8001460:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	b29b      	uxth	r3, r3
 800146e:	4618      	mov	r0, r3
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685a      	ldr	r2, [r3, #4]
 8001474:	4613      	mov	r3, r2
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	4413      	add	r3, r2
 800147a:	3b23      	subs	r3, #35	; 0x23
 800147c:	fa00 f203 	lsl.w	r2, r0, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	430a      	orrs	r2, r1
 8001486:	631a      	str	r2, [r3, #48]	; 0x30
 8001488:	e023      	b.n	80014d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685a      	ldr	r2, [r3, #4]
 8001494:	4613      	mov	r3, r2
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	4413      	add	r3, r2
 800149a:	3b41      	subs	r3, #65	; 0x41
 800149c:	221f      	movs	r2, #31
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	43da      	mvns	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	400a      	ands	r2, r1
 80014aa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	4618      	mov	r0, r3
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685a      	ldr	r2, [r3, #4]
 80014be:	4613      	mov	r3, r2
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	4413      	add	r3, r2
 80014c4:	3b41      	subs	r3, #65	; 0x41
 80014c6:	fa00 f203 	lsl.w	r2, r0, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	430a      	orrs	r2, r1
 80014d0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014d2:	4b29      	ldr	r3, [pc, #164]	; (8001578 <HAL_ADC_ConfigChannel+0x250>)
 80014d4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a28      	ldr	r2, [pc, #160]	; (800157c <HAL_ADC_ConfigChannel+0x254>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d10f      	bne.n	8001500 <HAL_ADC_ConfigChannel+0x1d8>
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2b12      	cmp	r3, #18
 80014e6:	d10b      	bne.n	8001500 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a1d      	ldr	r2, [pc, #116]	; (800157c <HAL_ADC_ConfigChannel+0x254>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d12b      	bne.n	8001562 <HAL_ADC_ConfigChannel+0x23a>
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a1c      	ldr	r2, [pc, #112]	; (8001580 <HAL_ADC_ConfigChannel+0x258>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d003      	beq.n	800151c <HAL_ADC_ConfigChannel+0x1f4>
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2b11      	cmp	r3, #17
 800151a:	d122      	bne.n	8001562 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a11      	ldr	r2, [pc, #68]	; (8001580 <HAL_ADC_ConfigChannel+0x258>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d111      	bne.n	8001562 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800153e:	4b11      	ldr	r3, [pc, #68]	; (8001584 <HAL_ADC_ConfigChannel+0x25c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a11      	ldr	r2, [pc, #68]	; (8001588 <HAL_ADC_ConfigChannel+0x260>)
 8001544:	fba2 2303 	umull	r2, r3, r2, r3
 8001548:	0c9a      	lsrs	r2, r3, #18
 800154a:	4613      	mov	r3, r2
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	4413      	add	r3, r2
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001554:	e002      	b.n	800155c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	3b01      	subs	r3, #1
 800155a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d1f9      	bne.n	8001556 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2200      	movs	r2, #0
 8001566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800156a:	2300      	movs	r3, #0
}
 800156c:	4618      	mov	r0, r3
 800156e:	3714      	adds	r7, #20
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	40012300 	.word	0x40012300
 800157c:	40012000 	.word	0x40012000
 8001580:	10000012 	.word	0x10000012
 8001584:	20000000 	.word	0x20000000
 8001588:	431bde83 	.word	0x431bde83

0800158c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001594:	4b79      	ldr	r3, [pc, #484]	; (800177c <ADC_Init+0x1f0>)
 8001596:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	685a      	ldr	r2, [r3, #4]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	431a      	orrs	r2, r3
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	685a      	ldr	r2, [r3, #4]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	6859      	ldr	r1, [r3, #4]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	691b      	ldr	r3, [r3, #16]
 80015cc:	021a      	lsls	r2, r3, #8
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	430a      	orrs	r2, r1
 80015d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	685a      	ldr	r2, [r3, #4]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80015e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	6859      	ldr	r1, [r3, #4]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	689a      	ldr	r2, [r3, #8]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	430a      	orrs	r2, r1
 80015f6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	689a      	ldr	r2, [r3, #8]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001606:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	6899      	ldr	r1, [r3, #8]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	68da      	ldr	r2, [r3, #12]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	430a      	orrs	r2, r1
 8001618:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800161e:	4a58      	ldr	r2, [pc, #352]	; (8001780 <ADC_Init+0x1f4>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d022      	beq.n	800166a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	689a      	ldr	r2, [r3, #8]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001632:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	6899      	ldr	r1, [r3, #8]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	430a      	orrs	r2, r1
 8001644:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	689a      	ldr	r2, [r3, #8]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001654:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	6899      	ldr	r1, [r3, #8]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	430a      	orrs	r2, r1
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	e00f      	b.n	800168a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	689a      	ldr	r2, [r3, #8]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001678:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	689a      	ldr	r2, [r3, #8]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001688:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	689a      	ldr	r2, [r3, #8]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f022 0202 	bic.w	r2, r2, #2
 8001698:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	6899      	ldr	r1, [r3, #8]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	7e1b      	ldrb	r3, [r3, #24]
 80016a4:	005a      	lsls	r2, r3, #1
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	430a      	orrs	r2, r1
 80016ac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d01b      	beq.n	80016f0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	685a      	ldr	r2, [r3, #4]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80016c6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	685a      	ldr	r2, [r3, #4]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80016d6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	6859      	ldr	r1, [r3, #4]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e2:	3b01      	subs	r3, #1
 80016e4:	035a      	lsls	r2, r3, #13
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	430a      	orrs	r2, r1
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	e007      	b.n	8001700 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	685a      	ldr	r2, [r3, #4]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016fe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800170e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	69db      	ldr	r3, [r3, #28]
 800171a:	3b01      	subs	r3, #1
 800171c:	051a      	lsls	r2, r3, #20
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	430a      	orrs	r2, r1
 8001724:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	689a      	ldr	r2, [r3, #8]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001734:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	6899      	ldr	r1, [r3, #8]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001742:	025a      	lsls	r2, r3, #9
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	430a      	orrs	r2, r1
 800174a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	689a      	ldr	r2, [r3, #8]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800175a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	6899      	ldr	r1, [r3, #8]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	695b      	ldr	r3, [r3, #20]
 8001766:	029a      	lsls	r2, r3, #10
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	430a      	orrs	r2, r1
 800176e:	609a      	str	r2, [r3, #8]
}
 8001770:	bf00      	nop
 8001772:	3714      	adds	r7, #20
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr
 800177c:	40012300 	.word	0x40012300
 8001780:	0f000001 	.word	0x0f000001

08001784 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001790:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800179a:	2b00      	cmp	r3, #0
 800179c:	d13c      	bne.n	8001818 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d12b      	bne.n	8001810 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d127      	bne.n	8001810 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d006      	beq.n	80017dc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d119      	bne.n	8001810 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	685a      	ldr	r2, [r3, #4]
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f022 0220 	bic.w	r2, r2, #32
 80017ea:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d105      	bne.n	8001810 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001808:	f043 0201 	orr.w	r2, r3, #1
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001810:	68f8      	ldr	r0, [r7, #12]
 8001812:	f7ff fd6b 	bl	80012ec <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001816:	e00e      	b.n	8001836 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181c:	f003 0310 	and.w	r3, r3, #16
 8001820:	2b00      	cmp	r3, #0
 8001822:	d003      	beq.n	800182c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001824:	68f8      	ldr	r0, [r7, #12]
 8001826:	f7ff fd75 	bl	8001314 <HAL_ADC_ErrorCallback>
}
 800182a:	e004      	b.n	8001836 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	4798      	blx	r3
}
 8001836:	bf00      	nop
 8001838:	3710      	adds	r7, #16
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b084      	sub	sp, #16
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800184a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800184c:	68f8      	ldr	r0, [r7, #12]
 800184e:	f7ff fd57 	bl	8001300 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001852:	bf00      	nop
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800185a:	b580      	push	{r7, lr}
 800185c:	b084      	sub	sp, #16
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001866:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	2240      	movs	r2, #64	; 0x40
 800186c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001872:	f043 0204 	orr.w	r2, r3, #4
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800187a:	68f8      	ldr	r0, [r7, #12]
 800187c:	f7ff fd4a 	bl	8001314 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001880:	bf00      	nop
 8001882:	3710      	adds	r7, #16
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001888:	b480      	push	{r7}
 800188a:	b085      	sub	sp, #20
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f003 0307 	and.w	r3, r3, #7
 8001896:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001898:	4b0c      	ldr	r3, [pc, #48]	; (80018cc <__NVIC_SetPriorityGrouping+0x44>)
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800189e:	68ba      	ldr	r2, [r7, #8]
 80018a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018a4:	4013      	ands	r3, r2
 80018a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ba:	4a04      	ldr	r2, [pc, #16]	; (80018cc <__NVIC_SetPriorityGrouping+0x44>)
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	60d3      	str	r3, [r2, #12]
}
 80018c0:	bf00      	nop
 80018c2:	3714      	adds	r7, #20
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr
 80018cc:	e000ed00 	.word	0xe000ed00

080018d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018d4:	4b04      	ldr	r3, [pc, #16]	; (80018e8 <__NVIC_GetPriorityGrouping+0x18>)
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	0a1b      	lsrs	r3, r3, #8
 80018da:	f003 0307 	and.w	r3, r3, #7
}
 80018de:	4618      	mov	r0, r3
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr
 80018e8:	e000ed00 	.word	0xe000ed00

080018ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4603      	mov	r3, r0
 80018f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	db0b      	blt.n	8001916 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018fe:	79fb      	ldrb	r3, [r7, #7]
 8001900:	f003 021f 	and.w	r2, r3, #31
 8001904:	4907      	ldr	r1, [pc, #28]	; (8001924 <__NVIC_EnableIRQ+0x38>)
 8001906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190a:	095b      	lsrs	r3, r3, #5
 800190c:	2001      	movs	r0, #1
 800190e:	fa00 f202 	lsl.w	r2, r0, r2
 8001912:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001916:	bf00      	nop
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	e000e100 	.word	0xe000e100

08001928 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	6039      	str	r1, [r7, #0]
 8001932:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001934:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001938:	2b00      	cmp	r3, #0
 800193a:	db0a      	blt.n	8001952 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	b2da      	uxtb	r2, r3
 8001940:	490c      	ldr	r1, [pc, #48]	; (8001974 <__NVIC_SetPriority+0x4c>)
 8001942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001946:	0112      	lsls	r2, r2, #4
 8001948:	b2d2      	uxtb	r2, r2
 800194a:	440b      	add	r3, r1
 800194c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001950:	e00a      	b.n	8001968 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	b2da      	uxtb	r2, r3
 8001956:	4908      	ldr	r1, [pc, #32]	; (8001978 <__NVIC_SetPriority+0x50>)
 8001958:	79fb      	ldrb	r3, [r7, #7]
 800195a:	f003 030f 	and.w	r3, r3, #15
 800195e:	3b04      	subs	r3, #4
 8001960:	0112      	lsls	r2, r2, #4
 8001962:	b2d2      	uxtb	r2, r2
 8001964:	440b      	add	r3, r1
 8001966:	761a      	strb	r2, [r3, #24]
}
 8001968:	bf00      	nop
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	e000e100 	.word	0xe000e100
 8001978:	e000ed00 	.word	0xe000ed00

0800197c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800197c:	b480      	push	{r7}
 800197e:	b089      	sub	sp, #36	; 0x24
 8001980:	af00      	add	r7, sp, #0
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f003 0307 	and.w	r3, r3, #7
 800198e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	f1c3 0307 	rsb	r3, r3, #7
 8001996:	2b04      	cmp	r3, #4
 8001998:	bf28      	it	cs
 800199a:	2304      	movcs	r3, #4
 800199c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	3304      	adds	r3, #4
 80019a2:	2b06      	cmp	r3, #6
 80019a4:	d902      	bls.n	80019ac <NVIC_EncodePriority+0x30>
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	3b03      	subs	r3, #3
 80019aa:	e000      	b.n	80019ae <NVIC_EncodePriority+0x32>
 80019ac:	2300      	movs	r3, #0
 80019ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b0:	f04f 32ff 	mov.w	r2, #4294967295
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ba:	43da      	mvns	r2, r3
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	401a      	ands	r2, r3
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019c4:	f04f 31ff 	mov.w	r1, #4294967295
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	fa01 f303 	lsl.w	r3, r1, r3
 80019ce:	43d9      	mvns	r1, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d4:	4313      	orrs	r3, r2
         );
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3724      	adds	r7, #36	; 0x24
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
	...

080019e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	3b01      	subs	r3, #1
 80019f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019f4:	d301      	bcc.n	80019fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019f6:	2301      	movs	r3, #1
 80019f8:	e00f      	b.n	8001a1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019fa:	4a0a      	ldr	r2, [pc, #40]	; (8001a24 <SysTick_Config+0x40>)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	3b01      	subs	r3, #1
 8001a00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a02:	210f      	movs	r1, #15
 8001a04:	f04f 30ff 	mov.w	r0, #4294967295
 8001a08:	f7ff ff8e 	bl	8001928 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a0c:	4b05      	ldr	r3, [pc, #20]	; (8001a24 <SysTick_Config+0x40>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a12:	4b04      	ldr	r3, [pc, #16]	; (8001a24 <SysTick_Config+0x40>)
 8001a14:	2207      	movs	r2, #7
 8001a16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	e000e010 	.word	0xe000e010

08001a28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f7ff ff29 	bl	8001888 <__NVIC_SetPriorityGrouping>
}
 8001a36:	bf00      	nop
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b086      	sub	sp, #24
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	4603      	mov	r3, r0
 8001a46:	60b9      	str	r1, [r7, #8]
 8001a48:	607a      	str	r2, [r7, #4]
 8001a4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a50:	f7ff ff3e 	bl	80018d0 <__NVIC_GetPriorityGrouping>
 8001a54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	68b9      	ldr	r1, [r7, #8]
 8001a5a:	6978      	ldr	r0, [r7, #20]
 8001a5c:	f7ff ff8e 	bl	800197c <NVIC_EncodePriority>
 8001a60:	4602      	mov	r2, r0
 8001a62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a66:	4611      	mov	r1, r2
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff ff5d 	bl	8001928 <__NVIC_SetPriority>
}
 8001a6e:	bf00      	nop
 8001a70:	3718      	adds	r7, #24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b082      	sub	sp, #8
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff ff31 	bl	80018ec <__NVIC_EnableIRQ>
}
 8001a8a:	bf00      	nop
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b082      	sub	sp, #8
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f7ff ffa2 	bl	80019e4 <SysTick_Config>
 8001aa0:	4603      	mov	r3, r0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
	...

08001aac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b086      	sub	sp, #24
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001ab8:	f7ff fad8 	bl	800106c <HAL_GetTick>
 8001abc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d101      	bne.n	8001ac8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e099      	b.n	8001bfc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2202      	movs	r2, #2
 8001acc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f022 0201 	bic.w	r2, r2, #1
 8001ae6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ae8:	e00f      	b.n	8001b0a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001aea:	f7ff fabf 	bl	800106c <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2b05      	cmp	r3, #5
 8001af6:	d908      	bls.n	8001b0a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2220      	movs	r2, #32
 8001afc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2203      	movs	r2, #3
 8001b02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e078      	b.n	8001bfc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0301 	and.w	r3, r3, #1
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d1e8      	bne.n	8001aea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b20:	697a      	ldr	r2, [r7, #20]
 8001b22:	4b38      	ldr	r3, [pc, #224]	; (8001c04 <HAL_DMA_Init+0x158>)
 8001b24:	4013      	ands	r3, r2
 8001b26:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685a      	ldr	r2, [r3, #4]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b36:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	691b      	ldr	r3, [r3, #16]
 8001b3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b42:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b4e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a1b      	ldr	r3, [r3, #32]
 8001b54:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b56:	697a      	ldr	r2, [r7, #20]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b60:	2b04      	cmp	r3, #4
 8001b62:	d107      	bne.n	8001b74 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	697a      	ldr	r2, [r7, #20]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	697a      	ldr	r2, [r7, #20]
 8001b7a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	695b      	ldr	r3, [r3, #20]
 8001b82:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	f023 0307 	bic.w	r3, r3, #7
 8001b8a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b90:	697a      	ldr	r2, [r7, #20]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9a:	2b04      	cmp	r3, #4
 8001b9c:	d117      	bne.n	8001bce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba2:	697a      	ldr	r2, [r7, #20]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d00e      	beq.n	8001bce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f000 fa6f 	bl	8002094 <DMA_CheckFifoParam>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d008      	beq.n	8001bce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2240      	movs	r2, #64	; 0x40
 8001bc0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e016      	b.n	8001bfc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	697a      	ldr	r2, [r7, #20]
 8001bd4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f000 fa26 	bl	8002028 <DMA_CalcBaseAndBitshift>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001be4:	223f      	movs	r2, #63	; 0x3f
 8001be6:	409a      	lsls	r2, r3
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001bfa:	2300      	movs	r3, #0
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3718      	adds	r7, #24
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	f010803f 	.word	0xf010803f

08001c08 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
 8001c14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c16:	2300      	movs	r3, #0
 8001c18:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c1e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d101      	bne.n	8001c2e <HAL_DMA_Start_IT+0x26>
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	e040      	b.n	8001cb0 <HAL_DMA_Start_IT+0xa8>
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2201      	movs	r2, #1
 8001c32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d12f      	bne.n	8001ca2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2202      	movs	r2, #2
 8001c46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	68b9      	ldr	r1, [r7, #8]
 8001c56:	68f8      	ldr	r0, [r7, #12]
 8001c58:	f000 f9b8 	bl	8001fcc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c60:	223f      	movs	r2, #63	; 0x3f
 8001c62:	409a      	lsls	r2, r3
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f042 0216 	orr.w	r2, r2, #22
 8001c76:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d007      	beq.n	8001c90 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f042 0208 	orr.w	r2, r2, #8
 8001c8e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f042 0201 	orr.w	r2, r2, #1
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	e005      	b.n	8001cae <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001caa:	2302      	movs	r3, #2
 8001cac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001cae:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3718      	adds	r7, #24
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001cc4:	4b8e      	ldr	r3, [pc, #568]	; (8001f00 <HAL_DMA_IRQHandler+0x248>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a8e      	ldr	r2, [pc, #568]	; (8001f04 <HAL_DMA_IRQHandler+0x24c>)
 8001cca:	fba2 2303 	umull	r2, r3, r2, r3
 8001cce:	0a9b      	lsrs	r3, r3, #10
 8001cd0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ce2:	2208      	movs	r2, #8
 8001ce4:	409a      	lsls	r2, r3
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d01a      	beq.n	8001d24 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0304 	and.w	r3, r3, #4
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d013      	beq.n	8001d24 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f022 0204 	bic.w	r2, r2, #4
 8001d0a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d10:	2208      	movs	r2, #8
 8001d12:	409a      	lsls	r2, r3
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d1c:	f043 0201 	orr.w	r2, r3, #1
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d28:	2201      	movs	r2, #1
 8001d2a:	409a      	lsls	r2, r3
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	4013      	ands	r3, r2
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d012      	beq.n	8001d5a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	695b      	ldr	r3, [r3, #20]
 8001d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d00b      	beq.n	8001d5a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d46:	2201      	movs	r2, #1
 8001d48:	409a      	lsls	r2, r3
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d52:	f043 0202 	orr.w	r2, r3, #2
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d5e:	2204      	movs	r2, #4
 8001d60:	409a      	lsls	r2, r3
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	4013      	ands	r3, r2
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d012      	beq.n	8001d90 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0302 	and.w	r3, r3, #2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d00b      	beq.n	8001d90 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d7c:	2204      	movs	r2, #4
 8001d7e:	409a      	lsls	r2, r3
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d88:	f043 0204 	orr.w	r2, r3, #4
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d94:	2210      	movs	r2, #16
 8001d96:	409a      	lsls	r2, r3
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d043      	beq.n	8001e28 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0308 	and.w	r3, r3, #8
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d03c      	beq.n	8001e28 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db2:	2210      	movs	r2, #16
 8001db4:	409a      	lsls	r2, r3
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d018      	beq.n	8001dfa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d108      	bne.n	8001de8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d024      	beq.n	8001e28 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	4798      	blx	r3
 8001de6:	e01f      	b.n	8001e28 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d01b      	beq.n	8001e28 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	4798      	blx	r3
 8001df8:	e016      	b.n	8001e28 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d107      	bne.n	8001e18 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f022 0208 	bic.w	r2, r2, #8
 8001e16:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d003      	beq.n	8001e28 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e2c:	2220      	movs	r2, #32
 8001e2e:	409a      	lsls	r2, r3
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	4013      	ands	r3, r2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	f000 808f 	beq.w	8001f58 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0310 	and.w	r3, r3, #16
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	f000 8087 	beq.w	8001f58 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e4e:	2220      	movs	r2, #32
 8001e50:	409a      	lsls	r2, r3
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b05      	cmp	r3, #5
 8001e60:	d136      	bne.n	8001ed0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f022 0216 	bic.w	r2, r2, #22
 8001e70:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	695a      	ldr	r2, [r3, #20]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e80:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d103      	bne.n	8001e92 <HAL_DMA_IRQHandler+0x1da>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d007      	beq.n	8001ea2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f022 0208 	bic.w	r2, r2, #8
 8001ea0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ea6:	223f      	movs	r2, #63	; 0x3f
 8001ea8:	409a      	lsls	r2, r3
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d07e      	beq.n	8001fc4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	4798      	blx	r3
        }
        return;
 8001ece:	e079      	b.n	8001fc4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d01d      	beq.n	8001f1a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d10d      	bne.n	8001f08 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d031      	beq.n	8001f58 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	4798      	blx	r3
 8001efc:	e02c      	b.n	8001f58 <HAL_DMA_IRQHandler+0x2a0>
 8001efe:	bf00      	nop
 8001f00:	20000000 	.word	0x20000000
 8001f04:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d023      	beq.n	8001f58 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	4798      	blx	r3
 8001f18:	e01e      	b.n	8001f58 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d10f      	bne.n	8001f48 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f022 0210 	bic.w	r2, r2, #16
 8001f36:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d003      	beq.n	8001f58 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d032      	beq.n	8001fc6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f64:	f003 0301 	and.w	r3, r3, #1
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d022      	beq.n	8001fb2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2205      	movs	r2, #5
 8001f70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f022 0201 	bic.w	r2, r2, #1
 8001f82:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	3301      	adds	r3, #1
 8001f88:	60bb      	str	r3, [r7, #8]
 8001f8a:	697a      	ldr	r2, [r7, #20]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d307      	bcc.n	8001fa0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1f2      	bne.n	8001f84 <HAL_DMA_IRQHandler+0x2cc>
 8001f9e:	e000      	b.n	8001fa2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001fa0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d005      	beq.n	8001fc6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	4798      	blx	r3
 8001fc2:	e000      	b.n	8001fc6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001fc4:	bf00      	nop
    }
  }
}
 8001fc6:	3718      	adds	r7, #24
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b085      	sub	sp, #20
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	60b9      	str	r1, [r7, #8]
 8001fd6:	607a      	str	r2, [r7, #4]
 8001fd8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001fe8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	683a      	ldr	r2, [r7, #0]
 8001ff0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	2b40      	cmp	r3, #64	; 0x40
 8001ff8:	d108      	bne.n	800200c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	68ba      	ldr	r2, [r7, #8]
 8002008:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800200a:	e007      	b.n	800201c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	68ba      	ldr	r2, [r7, #8]
 8002012:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	60da      	str	r2, [r3, #12]
}
 800201c:	bf00      	nop
 800201e:	3714      	adds	r7, #20
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002028:	b480      	push	{r7}
 800202a:	b085      	sub	sp, #20
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	b2db      	uxtb	r3, r3
 8002036:	3b10      	subs	r3, #16
 8002038:	4a14      	ldr	r2, [pc, #80]	; (800208c <DMA_CalcBaseAndBitshift+0x64>)
 800203a:	fba2 2303 	umull	r2, r3, r2, r3
 800203e:	091b      	lsrs	r3, r3, #4
 8002040:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002042:	4a13      	ldr	r2, [pc, #76]	; (8002090 <DMA_CalcBaseAndBitshift+0x68>)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	4413      	add	r3, r2
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	461a      	mov	r2, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2b03      	cmp	r3, #3
 8002054:	d909      	bls.n	800206a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800205e:	f023 0303 	bic.w	r3, r3, #3
 8002062:	1d1a      	adds	r2, r3, #4
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	659a      	str	r2, [r3, #88]	; 0x58
 8002068:	e007      	b.n	800207a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002072:	f023 0303 	bic.w	r3, r3, #3
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800207e:	4618      	mov	r0, r3
 8002080:	3714      	adds	r7, #20
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	aaaaaaab 	.word	0xaaaaaaab
 8002090:	08004f18 	.word	0x08004f18

08002094 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800209c:	2300      	movs	r3, #0
 800209e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	699b      	ldr	r3, [r3, #24]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d11f      	bne.n	80020ee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	2b03      	cmp	r3, #3
 80020b2:	d856      	bhi.n	8002162 <DMA_CheckFifoParam+0xce>
 80020b4:	a201      	add	r2, pc, #4	; (adr r2, 80020bc <DMA_CheckFifoParam+0x28>)
 80020b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ba:	bf00      	nop
 80020bc:	080020cd 	.word	0x080020cd
 80020c0:	080020df 	.word	0x080020df
 80020c4:	080020cd 	.word	0x080020cd
 80020c8:	08002163 	.word	0x08002163
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d046      	beq.n	8002166 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020dc:	e043      	b.n	8002166 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80020e6:	d140      	bne.n	800216a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020ec:	e03d      	b.n	800216a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020f6:	d121      	bne.n	800213c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	2b03      	cmp	r3, #3
 80020fc:	d837      	bhi.n	800216e <DMA_CheckFifoParam+0xda>
 80020fe:	a201      	add	r2, pc, #4	; (adr r2, 8002104 <DMA_CheckFifoParam+0x70>)
 8002100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002104:	08002115 	.word	0x08002115
 8002108:	0800211b 	.word	0x0800211b
 800210c:	08002115 	.word	0x08002115
 8002110:	0800212d 	.word	0x0800212d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	73fb      	strb	r3, [r7, #15]
      break;
 8002118:	e030      	b.n	800217c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800211e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d025      	beq.n	8002172 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800212a:	e022      	b.n	8002172 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002130:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002134:	d11f      	bne.n	8002176 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800213a:	e01c      	b.n	8002176 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	2b02      	cmp	r3, #2
 8002140:	d903      	bls.n	800214a <DMA_CheckFifoParam+0xb6>
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	2b03      	cmp	r3, #3
 8002146:	d003      	beq.n	8002150 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002148:	e018      	b.n	800217c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	73fb      	strb	r3, [r7, #15]
      break;
 800214e:	e015      	b.n	800217c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002154:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d00e      	beq.n	800217a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	73fb      	strb	r3, [r7, #15]
      break;
 8002160:	e00b      	b.n	800217a <DMA_CheckFifoParam+0xe6>
      break;
 8002162:	bf00      	nop
 8002164:	e00a      	b.n	800217c <DMA_CheckFifoParam+0xe8>
      break;
 8002166:	bf00      	nop
 8002168:	e008      	b.n	800217c <DMA_CheckFifoParam+0xe8>
      break;
 800216a:	bf00      	nop
 800216c:	e006      	b.n	800217c <DMA_CheckFifoParam+0xe8>
      break;
 800216e:	bf00      	nop
 8002170:	e004      	b.n	800217c <DMA_CheckFifoParam+0xe8>
      break;
 8002172:	bf00      	nop
 8002174:	e002      	b.n	800217c <DMA_CheckFifoParam+0xe8>
      break;   
 8002176:	bf00      	nop
 8002178:	e000      	b.n	800217c <DMA_CheckFifoParam+0xe8>
      break;
 800217a:	bf00      	nop
    }
  } 
  
  return status; 
 800217c:	7bfb      	ldrb	r3, [r7, #15]
}
 800217e:	4618      	mov	r0, r3
 8002180:	3714      	adds	r7, #20
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop

0800218c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800218c:	b480      	push	{r7}
 800218e:	b089      	sub	sp, #36	; 0x24
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002196:	2300      	movs	r3, #0
 8002198:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800219a:	2300      	movs	r3, #0
 800219c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800219e:	2300      	movs	r3, #0
 80021a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021a2:	2300      	movs	r3, #0
 80021a4:	61fb      	str	r3, [r7, #28]
 80021a6:	e159      	b.n	800245c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021a8:	2201      	movs	r2, #1
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	697a      	ldr	r2, [r7, #20]
 80021b8:	4013      	ands	r3, r2
 80021ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	f040 8148 	bne.w	8002456 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f003 0303 	and.w	r3, r3, #3
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d005      	beq.n	80021de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d130      	bne.n	8002240 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	2203      	movs	r2, #3
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	43db      	mvns	r3, r3
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	4013      	ands	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	68da      	ldr	r2, [r3, #12]
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	4313      	orrs	r3, r2
 8002206:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002214:	2201      	movs	r2, #1
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	43db      	mvns	r3, r3
 800221e:	69ba      	ldr	r2, [r7, #24]
 8002220:	4013      	ands	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	091b      	lsrs	r3, r3, #4
 800222a:	f003 0201 	and.w	r2, r3, #1
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	4313      	orrs	r3, r2
 8002238:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f003 0303 	and.w	r3, r3, #3
 8002248:	2b03      	cmp	r3, #3
 800224a:	d017      	beq.n	800227c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	2203      	movs	r2, #3
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	43db      	mvns	r3, r3
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	4013      	ands	r3, r2
 8002262:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	689a      	ldr	r2, [r3, #8]
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	005b      	lsls	r3, r3, #1
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	4313      	orrs	r3, r2
 8002274:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f003 0303 	and.w	r3, r3, #3
 8002284:	2b02      	cmp	r3, #2
 8002286:	d123      	bne.n	80022d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	08da      	lsrs	r2, r3, #3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	3208      	adds	r2, #8
 8002290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002294:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	f003 0307 	and.w	r3, r3, #7
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	220f      	movs	r2, #15
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	43db      	mvns	r3, r3
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4013      	ands	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	691a      	ldr	r2, [r3, #16]
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	f003 0307 	and.w	r3, r3, #7
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	4313      	orrs	r3, r2
 80022c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	08da      	lsrs	r2, r3, #3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	3208      	adds	r2, #8
 80022ca:	69b9      	ldr	r1, [r7, #24]
 80022cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	2203      	movs	r2, #3
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	43db      	mvns	r3, r3
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	4013      	ands	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f003 0203 	and.w	r2, r3, #3
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800230c:	2b00      	cmp	r3, #0
 800230e:	f000 80a2 	beq.w	8002456 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002312:	2300      	movs	r3, #0
 8002314:	60fb      	str	r3, [r7, #12]
 8002316:	4b57      	ldr	r3, [pc, #348]	; (8002474 <HAL_GPIO_Init+0x2e8>)
 8002318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231a:	4a56      	ldr	r2, [pc, #344]	; (8002474 <HAL_GPIO_Init+0x2e8>)
 800231c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002320:	6453      	str	r3, [r2, #68]	; 0x44
 8002322:	4b54      	ldr	r3, [pc, #336]	; (8002474 <HAL_GPIO_Init+0x2e8>)
 8002324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002326:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800232a:	60fb      	str	r3, [r7, #12]
 800232c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800232e:	4a52      	ldr	r2, [pc, #328]	; (8002478 <HAL_GPIO_Init+0x2ec>)
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	089b      	lsrs	r3, r3, #2
 8002334:	3302      	adds	r3, #2
 8002336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800233a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	f003 0303 	and.w	r3, r3, #3
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	220f      	movs	r2, #15
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	43db      	mvns	r3, r3
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	4013      	ands	r3, r2
 8002350:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a49      	ldr	r2, [pc, #292]	; (800247c <HAL_GPIO_Init+0x2f0>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d019      	beq.n	800238e <HAL_GPIO_Init+0x202>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a48      	ldr	r2, [pc, #288]	; (8002480 <HAL_GPIO_Init+0x2f4>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d013      	beq.n	800238a <HAL_GPIO_Init+0x1fe>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a47      	ldr	r2, [pc, #284]	; (8002484 <HAL_GPIO_Init+0x2f8>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d00d      	beq.n	8002386 <HAL_GPIO_Init+0x1fa>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a46      	ldr	r2, [pc, #280]	; (8002488 <HAL_GPIO_Init+0x2fc>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d007      	beq.n	8002382 <HAL_GPIO_Init+0x1f6>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a45      	ldr	r2, [pc, #276]	; (800248c <HAL_GPIO_Init+0x300>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d101      	bne.n	800237e <HAL_GPIO_Init+0x1f2>
 800237a:	2304      	movs	r3, #4
 800237c:	e008      	b.n	8002390 <HAL_GPIO_Init+0x204>
 800237e:	2307      	movs	r3, #7
 8002380:	e006      	b.n	8002390 <HAL_GPIO_Init+0x204>
 8002382:	2303      	movs	r3, #3
 8002384:	e004      	b.n	8002390 <HAL_GPIO_Init+0x204>
 8002386:	2302      	movs	r3, #2
 8002388:	e002      	b.n	8002390 <HAL_GPIO_Init+0x204>
 800238a:	2301      	movs	r3, #1
 800238c:	e000      	b.n	8002390 <HAL_GPIO_Init+0x204>
 800238e:	2300      	movs	r3, #0
 8002390:	69fa      	ldr	r2, [r7, #28]
 8002392:	f002 0203 	and.w	r2, r2, #3
 8002396:	0092      	lsls	r2, r2, #2
 8002398:	4093      	lsls	r3, r2
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	4313      	orrs	r3, r2
 800239e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023a0:	4935      	ldr	r1, [pc, #212]	; (8002478 <HAL_GPIO_Init+0x2ec>)
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	089b      	lsrs	r3, r3, #2
 80023a6:	3302      	adds	r3, #2
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023ae:	4b38      	ldr	r3, [pc, #224]	; (8002490 <HAL_GPIO_Init+0x304>)
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	43db      	mvns	r3, r3
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	4013      	ands	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d003      	beq.n	80023d2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023d2:	4a2f      	ldr	r2, [pc, #188]	; (8002490 <HAL_GPIO_Init+0x304>)
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023d8:	4b2d      	ldr	r3, [pc, #180]	; (8002490 <HAL_GPIO_Init+0x304>)
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	43db      	mvns	r3, r3
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	4013      	ands	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d003      	beq.n	80023fc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023fc:	4a24      	ldr	r2, [pc, #144]	; (8002490 <HAL_GPIO_Init+0x304>)
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002402:	4b23      	ldr	r3, [pc, #140]	; (8002490 <HAL_GPIO_Init+0x304>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	43db      	mvns	r3, r3
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	4013      	ands	r3, r2
 8002410:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d003      	beq.n	8002426 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	4313      	orrs	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002426:	4a1a      	ldr	r2, [pc, #104]	; (8002490 <HAL_GPIO_Init+0x304>)
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800242c:	4b18      	ldr	r3, [pc, #96]	; (8002490 <HAL_GPIO_Init+0x304>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	43db      	mvns	r3, r3
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	4013      	ands	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d003      	beq.n	8002450 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	4313      	orrs	r3, r2
 800244e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002450:	4a0f      	ldr	r2, [pc, #60]	; (8002490 <HAL_GPIO_Init+0x304>)
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	3301      	adds	r3, #1
 800245a:	61fb      	str	r3, [r7, #28]
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	2b0f      	cmp	r3, #15
 8002460:	f67f aea2 	bls.w	80021a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002464:	bf00      	nop
 8002466:	bf00      	nop
 8002468:	3724      	adds	r7, #36	; 0x24
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	40023800 	.word	0x40023800
 8002478:	40013800 	.word	0x40013800
 800247c:	40020000 	.word	0x40020000
 8002480:	40020400 	.word	0x40020400
 8002484:	40020800 	.word	0x40020800
 8002488:	40020c00 	.word	0x40020c00
 800248c:	40021000 	.word	0x40021000
 8002490:	40013c00 	.word	0x40013c00

08002494 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	460b      	mov	r3, r1
 800249e:	807b      	strh	r3, [r7, #2]
 80024a0:	4613      	mov	r3, r2
 80024a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024a4:	787b      	ldrb	r3, [r7, #1]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d003      	beq.n	80024b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024aa:	887a      	ldrh	r2, [r7, #2]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024b0:	e003      	b.n	80024ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024b2:	887b      	ldrh	r3, [r7, #2]
 80024b4:	041a      	lsls	r2, r3, #16
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	619a      	str	r2, [r3, #24]
}
 80024ba:	bf00      	nop
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
	...

080024c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b086      	sub	sp, #24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e267      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d075      	beq.n	80025d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024e6:	4b88      	ldr	r3, [pc, #544]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f003 030c 	and.w	r3, r3, #12
 80024ee:	2b04      	cmp	r3, #4
 80024f0:	d00c      	beq.n	800250c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024f2:	4b85      	ldr	r3, [pc, #532]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024fa:	2b08      	cmp	r3, #8
 80024fc:	d112      	bne.n	8002524 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024fe:	4b82      	ldr	r3, [pc, #520]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002506:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800250a:	d10b      	bne.n	8002524 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800250c:	4b7e      	ldr	r3, [pc, #504]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d05b      	beq.n	80025d0 <HAL_RCC_OscConfig+0x108>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d157      	bne.n	80025d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e242      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800252c:	d106      	bne.n	800253c <HAL_RCC_OscConfig+0x74>
 800252e:	4b76      	ldr	r3, [pc, #472]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a75      	ldr	r2, [pc, #468]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 8002534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002538:	6013      	str	r3, [r2, #0]
 800253a:	e01d      	b.n	8002578 <HAL_RCC_OscConfig+0xb0>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002544:	d10c      	bne.n	8002560 <HAL_RCC_OscConfig+0x98>
 8002546:	4b70      	ldr	r3, [pc, #448]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a6f      	ldr	r2, [pc, #444]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 800254c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002550:	6013      	str	r3, [r2, #0]
 8002552:	4b6d      	ldr	r3, [pc, #436]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a6c      	ldr	r2, [pc, #432]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 8002558:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800255c:	6013      	str	r3, [r2, #0]
 800255e:	e00b      	b.n	8002578 <HAL_RCC_OscConfig+0xb0>
 8002560:	4b69      	ldr	r3, [pc, #420]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a68      	ldr	r2, [pc, #416]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 8002566:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800256a:	6013      	str	r3, [r2, #0]
 800256c:	4b66      	ldr	r3, [pc, #408]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a65      	ldr	r2, [pc, #404]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 8002572:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002576:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d013      	beq.n	80025a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002580:	f7fe fd74 	bl	800106c <HAL_GetTick>
 8002584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002586:	e008      	b.n	800259a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002588:	f7fe fd70 	bl	800106c <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b64      	cmp	r3, #100	; 0x64
 8002594:	d901      	bls.n	800259a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e207      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800259a:	4b5b      	ldr	r3, [pc, #364]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d0f0      	beq.n	8002588 <HAL_RCC_OscConfig+0xc0>
 80025a6:	e014      	b.n	80025d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a8:	f7fe fd60 	bl	800106c <HAL_GetTick>
 80025ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ae:	e008      	b.n	80025c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025b0:	f7fe fd5c 	bl	800106c <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b64      	cmp	r3, #100	; 0x64
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e1f3      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025c2:	4b51      	ldr	r3, [pc, #324]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1f0      	bne.n	80025b0 <HAL_RCC_OscConfig+0xe8>
 80025ce:	e000      	b.n	80025d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d063      	beq.n	80026a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025de:	4b4a      	ldr	r3, [pc, #296]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f003 030c 	and.w	r3, r3, #12
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d00b      	beq.n	8002602 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025ea:	4b47      	ldr	r3, [pc, #284]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025f2:	2b08      	cmp	r3, #8
 80025f4:	d11c      	bne.n	8002630 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025f6:	4b44      	ldr	r3, [pc, #272]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d116      	bne.n	8002630 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002602:	4b41      	ldr	r3, [pc, #260]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d005      	beq.n	800261a <HAL_RCC_OscConfig+0x152>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d001      	beq.n	800261a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e1c7      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800261a:	4b3b      	ldr	r3, [pc, #236]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	00db      	lsls	r3, r3, #3
 8002628:	4937      	ldr	r1, [pc, #220]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 800262a:	4313      	orrs	r3, r2
 800262c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800262e:	e03a      	b.n	80026a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d020      	beq.n	800267a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002638:	4b34      	ldr	r3, [pc, #208]	; (800270c <HAL_RCC_OscConfig+0x244>)
 800263a:	2201      	movs	r2, #1
 800263c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800263e:	f7fe fd15 	bl	800106c <HAL_GetTick>
 8002642:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002644:	e008      	b.n	8002658 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002646:	f7fe fd11 	bl	800106c <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	2b02      	cmp	r3, #2
 8002652:	d901      	bls.n	8002658 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e1a8      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002658:	4b2b      	ldr	r3, [pc, #172]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0302 	and.w	r3, r3, #2
 8002660:	2b00      	cmp	r3, #0
 8002662:	d0f0      	beq.n	8002646 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002664:	4b28      	ldr	r3, [pc, #160]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	691b      	ldr	r3, [r3, #16]
 8002670:	00db      	lsls	r3, r3, #3
 8002672:	4925      	ldr	r1, [pc, #148]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 8002674:	4313      	orrs	r3, r2
 8002676:	600b      	str	r3, [r1, #0]
 8002678:	e015      	b.n	80026a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800267a:	4b24      	ldr	r3, [pc, #144]	; (800270c <HAL_RCC_OscConfig+0x244>)
 800267c:	2200      	movs	r2, #0
 800267e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002680:	f7fe fcf4 	bl	800106c <HAL_GetTick>
 8002684:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002686:	e008      	b.n	800269a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002688:	f7fe fcf0 	bl	800106c <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e187      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800269a:	4b1b      	ldr	r3, [pc, #108]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1f0      	bne.n	8002688 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0308 	and.w	r3, r3, #8
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d036      	beq.n	8002720 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	695b      	ldr	r3, [r3, #20]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d016      	beq.n	80026e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026ba:	4b15      	ldr	r3, [pc, #84]	; (8002710 <HAL_RCC_OscConfig+0x248>)
 80026bc:	2201      	movs	r2, #1
 80026be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c0:	f7fe fcd4 	bl	800106c <HAL_GetTick>
 80026c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026c6:	e008      	b.n	80026da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026c8:	f7fe fcd0 	bl	800106c <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e167      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026da:	4b0b      	ldr	r3, [pc, #44]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 80026dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d0f0      	beq.n	80026c8 <HAL_RCC_OscConfig+0x200>
 80026e6:	e01b      	b.n	8002720 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026e8:	4b09      	ldr	r3, [pc, #36]	; (8002710 <HAL_RCC_OscConfig+0x248>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ee:	f7fe fcbd 	bl	800106c <HAL_GetTick>
 80026f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026f4:	e00e      	b.n	8002714 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026f6:	f7fe fcb9 	bl	800106c <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	2b02      	cmp	r3, #2
 8002702:	d907      	bls.n	8002714 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e150      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
 8002708:	40023800 	.word	0x40023800
 800270c:	42470000 	.word	0x42470000
 8002710:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002714:	4b88      	ldr	r3, [pc, #544]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 8002716:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002718:	f003 0302 	and.w	r3, r3, #2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d1ea      	bne.n	80026f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0304 	and.w	r3, r3, #4
 8002728:	2b00      	cmp	r3, #0
 800272a:	f000 8097 	beq.w	800285c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800272e:	2300      	movs	r3, #0
 8002730:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002732:	4b81      	ldr	r3, [pc, #516]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d10f      	bne.n	800275e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800273e:	2300      	movs	r3, #0
 8002740:	60bb      	str	r3, [r7, #8]
 8002742:	4b7d      	ldr	r3, [pc, #500]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 8002744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002746:	4a7c      	ldr	r2, [pc, #496]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 8002748:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800274c:	6413      	str	r3, [r2, #64]	; 0x40
 800274e:	4b7a      	ldr	r3, [pc, #488]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 8002750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002756:	60bb      	str	r3, [r7, #8]
 8002758:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800275a:	2301      	movs	r3, #1
 800275c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800275e:	4b77      	ldr	r3, [pc, #476]	; (800293c <HAL_RCC_OscConfig+0x474>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002766:	2b00      	cmp	r3, #0
 8002768:	d118      	bne.n	800279c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800276a:	4b74      	ldr	r3, [pc, #464]	; (800293c <HAL_RCC_OscConfig+0x474>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a73      	ldr	r2, [pc, #460]	; (800293c <HAL_RCC_OscConfig+0x474>)
 8002770:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002774:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002776:	f7fe fc79 	bl	800106c <HAL_GetTick>
 800277a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800277c:	e008      	b.n	8002790 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800277e:	f7fe fc75 	bl	800106c <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d901      	bls.n	8002790 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e10c      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002790:	4b6a      	ldr	r3, [pc, #424]	; (800293c <HAL_RCC_OscConfig+0x474>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002798:	2b00      	cmp	r3, #0
 800279a:	d0f0      	beq.n	800277e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d106      	bne.n	80027b2 <HAL_RCC_OscConfig+0x2ea>
 80027a4:	4b64      	ldr	r3, [pc, #400]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 80027a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a8:	4a63      	ldr	r2, [pc, #396]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 80027aa:	f043 0301 	orr.w	r3, r3, #1
 80027ae:	6713      	str	r3, [r2, #112]	; 0x70
 80027b0:	e01c      	b.n	80027ec <HAL_RCC_OscConfig+0x324>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	2b05      	cmp	r3, #5
 80027b8:	d10c      	bne.n	80027d4 <HAL_RCC_OscConfig+0x30c>
 80027ba:	4b5f      	ldr	r3, [pc, #380]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 80027bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027be:	4a5e      	ldr	r2, [pc, #376]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 80027c0:	f043 0304 	orr.w	r3, r3, #4
 80027c4:	6713      	str	r3, [r2, #112]	; 0x70
 80027c6:	4b5c      	ldr	r3, [pc, #368]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 80027c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ca:	4a5b      	ldr	r2, [pc, #364]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 80027cc:	f043 0301 	orr.w	r3, r3, #1
 80027d0:	6713      	str	r3, [r2, #112]	; 0x70
 80027d2:	e00b      	b.n	80027ec <HAL_RCC_OscConfig+0x324>
 80027d4:	4b58      	ldr	r3, [pc, #352]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 80027d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d8:	4a57      	ldr	r2, [pc, #348]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 80027da:	f023 0301 	bic.w	r3, r3, #1
 80027de:	6713      	str	r3, [r2, #112]	; 0x70
 80027e0:	4b55      	ldr	r3, [pc, #340]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 80027e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e4:	4a54      	ldr	r2, [pc, #336]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 80027e6:	f023 0304 	bic.w	r3, r3, #4
 80027ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d015      	beq.n	8002820 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f4:	f7fe fc3a 	bl	800106c <HAL_GetTick>
 80027f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027fa:	e00a      	b.n	8002812 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027fc:	f7fe fc36 	bl	800106c <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	f241 3288 	movw	r2, #5000	; 0x1388
 800280a:	4293      	cmp	r3, r2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e0cb      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002812:	4b49      	ldr	r3, [pc, #292]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 8002814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d0ee      	beq.n	80027fc <HAL_RCC_OscConfig+0x334>
 800281e:	e014      	b.n	800284a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002820:	f7fe fc24 	bl	800106c <HAL_GetTick>
 8002824:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002826:	e00a      	b.n	800283e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002828:	f7fe fc20 	bl	800106c <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	f241 3288 	movw	r2, #5000	; 0x1388
 8002836:	4293      	cmp	r3, r2
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e0b5      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800283e:	4b3e      	ldr	r3, [pc, #248]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 8002840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d1ee      	bne.n	8002828 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800284a:	7dfb      	ldrb	r3, [r7, #23]
 800284c:	2b01      	cmp	r3, #1
 800284e:	d105      	bne.n	800285c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002850:	4b39      	ldr	r3, [pc, #228]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 8002852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002854:	4a38      	ldr	r2, [pc, #224]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 8002856:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800285a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	699b      	ldr	r3, [r3, #24]
 8002860:	2b00      	cmp	r3, #0
 8002862:	f000 80a1 	beq.w	80029a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002866:	4b34      	ldr	r3, [pc, #208]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f003 030c 	and.w	r3, r3, #12
 800286e:	2b08      	cmp	r3, #8
 8002870:	d05c      	beq.n	800292c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	2b02      	cmp	r3, #2
 8002878:	d141      	bne.n	80028fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800287a:	4b31      	ldr	r3, [pc, #196]	; (8002940 <HAL_RCC_OscConfig+0x478>)
 800287c:	2200      	movs	r2, #0
 800287e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002880:	f7fe fbf4 	bl	800106c <HAL_GetTick>
 8002884:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002886:	e008      	b.n	800289a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002888:	f7fe fbf0 	bl	800106c <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b02      	cmp	r3, #2
 8002894:	d901      	bls.n	800289a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e087      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800289a:	4b27      	ldr	r3, [pc, #156]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d1f0      	bne.n	8002888 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	69da      	ldr	r2, [r3, #28]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	431a      	orrs	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b4:	019b      	lsls	r3, r3, #6
 80028b6:	431a      	orrs	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028bc:	085b      	lsrs	r3, r3, #1
 80028be:	3b01      	subs	r3, #1
 80028c0:	041b      	lsls	r3, r3, #16
 80028c2:	431a      	orrs	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c8:	061b      	lsls	r3, r3, #24
 80028ca:	491b      	ldr	r1, [pc, #108]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028d0:	4b1b      	ldr	r3, [pc, #108]	; (8002940 <HAL_RCC_OscConfig+0x478>)
 80028d2:	2201      	movs	r2, #1
 80028d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d6:	f7fe fbc9 	bl	800106c <HAL_GetTick>
 80028da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028dc:	e008      	b.n	80028f0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028de:	f7fe fbc5 	bl	800106c <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d901      	bls.n	80028f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e05c      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028f0:	4b11      	ldr	r3, [pc, #68]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d0f0      	beq.n	80028de <HAL_RCC_OscConfig+0x416>
 80028fc:	e054      	b.n	80029a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028fe:	4b10      	ldr	r3, [pc, #64]	; (8002940 <HAL_RCC_OscConfig+0x478>)
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002904:	f7fe fbb2 	bl	800106c <HAL_GetTick>
 8002908:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800290a:	e008      	b.n	800291e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800290c:	f7fe fbae 	bl	800106c <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b02      	cmp	r3, #2
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e045      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800291e:	4b06      	ldr	r3, [pc, #24]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d1f0      	bne.n	800290c <HAL_RCC_OscConfig+0x444>
 800292a:	e03d      	b.n	80029a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d107      	bne.n	8002944 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e038      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
 8002938:	40023800 	.word	0x40023800
 800293c:	40007000 	.word	0x40007000
 8002940:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002944:	4b1b      	ldr	r3, [pc, #108]	; (80029b4 <HAL_RCC_OscConfig+0x4ec>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d028      	beq.n	80029a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800295c:	429a      	cmp	r2, r3
 800295e:	d121      	bne.n	80029a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800296a:	429a      	cmp	r2, r3
 800296c:	d11a      	bne.n	80029a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800296e:	68fa      	ldr	r2, [r7, #12]
 8002970:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002974:	4013      	ands	r3, r2
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800297a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800297c:	4293      	cmp	r3, r2
 800297e:	d111      	bne.n	80029a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800298a:	085b      	lsrs	r3, r3, #1
 800298c:	3b01      	subs	r3, #1
 800298e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002990:	429a      	cmp	r2, r3
 8002992:	d107      	bne.n	80029a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800299e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d001      	beq.n	80029a8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e000      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3718      	adds	r7, #24
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	40023800 	.word	0x40023800

080029b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d101      	bne.n	80029cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e0cc      	b.n	8002b66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029cc:	4b68      	ldr	r3, [pc, #416]	; (8002b70 <HAL_RCC_ClockConfig+0x1b8>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0307 	and.w	r3, r3, #7
 80029d4:	683a      	ldr	r2, [r7, #0]
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d90c      	bls.n	80029f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029da:	4b65      	ldr	r3, [pc, #404]	; (8002b70 <HAL_RCC_ClockConfig+0x1b8>)
 80029dc:	683a      	ldr	r2, [r7, #0]
 80029de:	b2d2      	uxtb	r2, r2
 80029e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029e2:	4b63      	ldr	r3, [pc, #396]	; (8002b70 <HAL_RCC_ClockConfig+0x1b8>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0307 	and.w	r3, r3, #7
 80029ea:	683a      	ldr	r2, [r7, #0]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d001      	beq.n	80029f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e0b8      	b.n	8002b66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0302 	and.w	r3, r3, #2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d020      	beq.n	8002a42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0304 	and.w	r3, r3, #4
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d005      	beq.n	8002a18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a0c:	4b59      	ldr	r3, [pc, #356]	; (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	4a58      	ldr	r2, [pc, #352]	; (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002a12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0308 	and.w	r3, r3, #8
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d005      	beq.n	8002a30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a24:	4b53      	ldr	r3, [pc, #332]	; (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	4a52      	ldr	r2, [pc, #328]	; (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002a2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a30:	4b50      	ldr	r3, [pc, #320]	; (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	494d      	ldr	r1, [pc, #308]	; (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d044      	beq.n	8002ad8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d107      	bne.n	8002a66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a56:	4b47      	ldr	r3, [pc, #284]	; (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d119      	bne.n	8002a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e07f      	b.n	8002b66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d003      	beq.n	8002a76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a72:	2b03      	cmp	r3, #3
 8002a74:	d107      	bne.n	8002a86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a76:	4b3f      	ldr	r3, [pc, #252]	; (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d109      	bne.n	8002a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e06f      	b.n	8002b66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a86:	4b3b      	ldr	r3, [pc, #236]	; (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d101      	bne.n	8002a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e067      	b.n	8002b66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a96:	4b37      	ldr	r3, [pc, #220]	; (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f023 0203 	bic.w	r2, r3, #3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	4934      	ldr	r1, [pc, #208]	; (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002aa8:	f7fe fae0 	bl	800106c <HAL_GetTick>
 8002aac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aae:	e00a      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ab0:	f7fe fadc 	bl	800106c <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e04f      	b.n	8002b66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ac6:	4b2b      	ldr	r3, [pc, #172]	; (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f003 020c 	and.w	r2, r3, #12
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d1eb      	bne.n	8002ab0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ad8:	4b25      	ldr	r3, [pc, #148]	; (8002b70 <HAL_RCC_ClockConfig+0x1b8>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0307 	and.w	r3, r3, #7
 8002ae0:	683a      	ldr	r2, [r7, #0]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d20c      	bcs.n	8002b00 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ae6:	4b22      	ldr	r3, [pc, #136]	; (8002b70 <HAL_RCC_ClockConfig+0x1b8>)
 8002ae8:	683a      	ldr	r2, [r7, #0]
 8002aea:	b2d2      	uxtb	r2, r2
 8002aec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aee:	4b20      	ldr	r3, [pc, #128]	; (8002b70 <HAL_RCC_ClockConfig+0x1b8>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0307 	and.w	r3, r3, #7
 8002af6:	683a      	ldr	r2, [r7, #0]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d001      	beq.n	8002b00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e032      	b.n	8002b66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0304 	and.w	r3, r3, #4
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d008      	beq.n	8002b1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b0c:	4b19      	ldr	r3, [pc, #100]	; (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	4916      	ldr	r1, [pc, #88]	; (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0308 	and.w	r3, r3, #8
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d009      	beq.n	8002b3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b2a:	4b12      	ldr	r3, [pc, #72]	; (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	00db      	lsls	r3, r3, #3
 8002b38:	490e      	ldr	r1, [pc, #56]	; (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b3e:	f000 f821 	bl	8002b84 <HAL_RCC_GetSysClockFreq>
 8002b42:	4602      	mov	r2, r0
 8002b44:	4b0b      	ldr	r3, [pc, #44]	; (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	091b      	lsrs	r3, r3, #4
 8002b4a:	f003 030f 	and.w	r3, r3, #15
 8002b4e:	490a      	ldr	r1, [pc, #40]	; (8002b78 <HAL_RCC_ClockConfig+0x1c0>)
 8002b50:	5ccb      	ldrb	r3, [r1, r3]
 8002b52:	fa22 f303 	lsr.w	r3, r2, r3
 8002b56:	4a09      	ldr	r2, [pc, #36]	; (8002b7c <HAL_RCC_ClockConfig+0x1c4>)
 8002b58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b5a:	4b09      	ldr	r3, [pc, #36]	; (8002b80 <HAL_RCC_ClockConfig+0x1c8>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7fe fa40 	bl	8000fe4 <HAL_InitTick>

  return HAL_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3710      	adds	r7, #16
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	40023c00 	.word	0x40023c00
 8002b74:	40023800 	.word	0x40023800
 8002b78:	08004f00 	.word	0x08004f00
 8002b7c:	20000000 	.word	0x20000000
 8002b80:	20000004 	.word	0x20000004

08002b84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b88:	b094      	sub	sp, #80	; 0x50
 8002b8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	647b      	str	r3, [r7, #68]	; 0x44
 8002b90:	2300      	movs	r3, #0
 8002b92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b94:	2300      	movs	r3, #0
 8002b96:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b9c:	4b79      	ldr	r3, [pc, #484]	; (8002d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f003 030c 	and.w	r3, r3, #12
 8002ba4:	2b08      	cmp	r3, #8
 8002ba6:	d00d      	beq.n	8002bc4 <HAL_RCC_GetSysClockFreq+0x40>
 8002ba8:	2b08      	cmp	r3, #8
 8002baa:	f200 80e1 	bhi.w	8002d70 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d002      	beq.n	8002bb8 <HAL_RCC_GetSysClockFreq+0x34>
 8002bb2:	2b04      	cmp	r3, #4
 8002bb4:	d003      	beq.n	8002bbe <HAL_RCC_GetSysClockFreq+0x3a>
 8002bb6:	e0db      	b.n	8002d70 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bb8:	4b73      	ldr	r3, [pc, #460]	; (8002d88 <HAL_RCC_GetSysClockFreq+0x204>)
 8002bba:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002bbc:	e0db      	b.n	8002d76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bbe:	4b73      	ldr	r3, [pc, #460]	; (8002d8c <HAL_RCC_GetSysClockFreq+0x208>)
 8002bc0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002bc2:	e0d8      	b.n	8002d76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bc4:	4b6f      	ldr	r3, [pc, #444]	; (8002d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bcc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bce:	4b6d      	ldr	r3, [pc, #436]	; (8002d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d063      	beq.n	8002ca2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bda:	4b6a      	ldr	r3, [pc, #424]	; (8002d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	099b      	lsrs	r3, r3, #6
 8002be0:	2200      	movs	r2, #0
 8002be2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002be4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002be8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bec:	633b      	str	r3, [r7, #48]	; 0x30
 8002bee:	2300      	movs	r3, #0
 8002bf0:	637b      	str	r3, [r7, #52]	; 0x34
 8002bf2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002bf6:	4622      	mov	r2, r4
 8002bf8:	462b      	mov	r3, r5
 8002bfa:	f04f 0000 	mov.w	r0, #0
 8002bfe:	f04f 0100 	mov.w	r1, #0
 8002c02:	0159      	lsls	r1, r3, #5
 8002c04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c08:	0150      	lsls	r0, r2, #5
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	4621      	mov	r1, r4
 8002c10:	1a51      	subs	r1, r2, r1
 8002c12:	6139      	str	r1, [r7, #16]
 8002c14:	4629      	mov	r1, r5
 8002c16:	eb63 0301 	sbc.w	r3, r3, r1
 8002c1a:	617b      	str	r3, [r7, #20]
 8002c1c:	f04f 0200 	mov.w	r2, #0
 8002c20:	f04f 0300 	mov.w	r3, #0
 8002c24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c28:	4659      	mov	r1, fp
 8002c2a:	018b      	lsls	r3, r1, #6
 8002c2c:	4651      	mov	r1, sl
 8002c2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c32:	4651      	mov	r1, sl
 8002c34:	018a      	lsls	r2, r1, #6
 8002c36:	4651      	mov	r1, sl
 8002c38:	ebb2 0801 	subs.w	r8, r2, r1
 8002c3c:	4659      	mov	r1, fp
 8002c3e:	eb63 0901 	sbc.w	r9, r3, r1
 8002c42:	f04f 0200 	mov.w	r2, #0
 8002c46:	f04f 0300 	mov.w	r3, #0
 8002c4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c56:	4690      	mov	r8, r2
 8002c58:	4699      	mov	r9, r3
 8002c5a:	4623      	mov	r3, r4
 8002c5c:	eb18 0303 	adds.w	r3, r8, r3
 8002c60:	60bb      	str	r3, [r7, #8]
 8002c62:	462b      	mov	r3, r5
 8002c64:	eb49 0303 	adc.w	r3, r9, r3
 8002c68:	60fb      	str	r3, [r7, #12]
 8002c6a:	f04f 0200 	mov.w	r2, #0
 8002c6e:	f04f 0300 	mov.w	r3, #0
 8002c72:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c76:	4629      	mov	r1, r5
 8002c78:	024b      	lsls	r3, r1, #9
 8002c7a:	4621      	mov	r1, r4
 8002c7c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c80:	4621      	mov	r1, r4
 8002c82:	024a      	lsls	r2, r1, #9
 8002c84:	4610      	mov	r0, r2
 8002c86:	4619      	mov	r1, r3
 8002c88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c90:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c94:	f7fd faf4 	bl	8000280 <__aeabi_uldivmod>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ca0:	e058      	b.n	8002d54 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ca2:	4b38      	ldr	r3, [pc, #224]	; (8002d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	099b      	lsrs	r3, r3, #6
 8002ca8:	2200      	movs	r2, #0
 8002caa:	4618      	mov	r0, r3
 8002cac:	4611      	mov	r1, r2
 8002cae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002cb2:	623b      	str	r3, [r7, #32]
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	627b      	str	r3, [r7, #36]	; 0x24
 8002cb8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002cbc:	4642      	mov	r2, r8
 8002cbe:	464b      	mov	r3, r9
 8002cc0:	f04f 0000 	mov.w	r0, #0
 8002cc4:	f04f 0100 	mov.w	r1, #0
 8002cc8:	0159      	lsls	r1, r3, #5
 8002cca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cce:	0150      	lsls	r0, r2, #5
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	4641      	mov	r1, r8
 8002cd6:	ebb2 0a01 	subs.w	sl, r2, r1
 8002cda:	4649      	mov	r1, r9
 8002cdc:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ce0:	f04f 0200 	mov.w	r2, #0
 8002ce4:	f04f 0300 	mov.w	r3, #0
 8002ce8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002cec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002cf0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002cf4:	ebb2 040a 	subs.w	r4, r2, sl
 8002cf8:	eb63 050b 	sbc.w	r5, r3, fp
 8002cfc:	f04f 0200 	mov.w	r2, #0
 8002d00:	f04f 0300 	mov.w	r3, #0
 8002d04:	00eb      	lsls	r3, r5, #3
 8002d06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d0a:	00e2      	lsls	r2, r4, #3
 8002d0c:	4614      	mov	r4, r2
 8002d0e:	461d      	mov	r5, r3
 8002d10:	4643      	mov	r3, r8
 8002d12:	18e3      	adds	r3, r4, r3
 8002d14:	603b      	str	r3, [r7, #0]
 8002d16:	464b      	mov	r3, r9
 8002d18:	eb45 0303 	adc.w	r3, r5, r3
 8002d1c:	607b      	str	r3, [r7, #4]
 8002d1e:	f04f 0200 	mov.w	r2, #0
 8002d22:	f04f 0300 	mov.w	r3, #0
 8002d26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d2a:	4629      	mov	r1, r5
 8002d2c:	028b      	lsls	r3, r1, #10
 8002d2e:	4621      	mov	r1, r4
 8002d30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d34:	4621      	mov	r1, r4
 8002d36:	028a      	lsls	r2, r1, #10
 8002d38:	4610      	mov	r0, r2
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d3e:	2200      	movs	r2, #0
 8002d40:	61bb      	str	r3, [r7, #24]
 8002d42:	61fa      	str	r2, [r7, #28]
 8002d44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d48:	f7fd fa9a 	bl	8000280 <__aeabi_uldivmod>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	460b      	mov	r3, r1
 8002d50:	4613      	mov	r3, r2
 8002d52:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d54:	4b0b      	ldr	r3, [pc, #44]	; (8002d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	0c1b      	lsrs	r3, r3, #16
 8002d5a:	f003 0303 	and.w	r3, r3, #3
 8002d5e:	3301      	adds	r3, #1
 8002d60:	005b      	lsls	r3, r3, #1
 8002d62:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002d64:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d6e:	e002      	b.n	8002d76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d70:	4b05      	ldr	r3, [pc, #20]	; (8002d88 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d72:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3750      	adds	r7, #80	; 0x50
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d82:	bf00      	nop
 8002d84:	40023800 	.word	0x40023800
 8002d88:	00f42400 	.word	0x00f42400
 8002d8c:	007a1200 	.word	0x007a1200

08002d90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d90:	b480      	push	{r7}
 8002d92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d94:	4b03      	ldr	r3, [pc, #12]	; (8002da4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d96:	681b      	ldr	r3, [r3, #0]
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	20000000 	.word	0x20000000

08002da8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002dac:	f7ff fff0 	bl	8002d90 <HAL_RCC_GetHCLKFreq>
 8002db0:	4602      	mov	r2, r0
 8002db2:	4b05      	ldr	r3, [pc, #20]	; (8002dc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	0a9b      	lsrs	r3, r3, #10
 8002db8:	f003 0307 	and.w	r3, r3, #7
 8002dbc:	4903      	ldr	r1, [pc, #12]	; (8002dcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dbe:	5ccb      	ldrb	r3, [r1, r3]
 8002dc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	40023800 	.word	0x40023800
 8002dcc:	08004f10 	.word	0x08004f10

08002dd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002dd4:	f7ff ffdc 	bl	8002d90 <HAL_RCC_GetHCLKFreq>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	4b05      	ldr	r3, [pc, #20]	; (8002df0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	0b5b      	lsrs	r3, r3, #13
 8002de0:	f003 0307 	and.w	r3, r3, #7
 8002de4:	4903      	ldr	r1, [pc, #12]	; (8002df4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002de6:	5ccb      	ldrb	r3, [r1, r3]
 8002de8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	40023800 	.word	0x40023800
 8002df4:	08004f10 	.word	0x08004f10

08002df8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e041      	b.n	8002e8e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d106      	bne.n	8002e24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f7fd feae 	bl	8000b80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2202      	movs	r2, #2
 8002e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	3304      	adds	r3, #4
 8002e34:	4619      	mov	r1, r3
 8002e36:	4610      	mov	r0, r2
 8002e38:	f000 fb40 	bl	80034bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3708      	adds	r7, #8
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b082      	sub	sp, #8
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d101      	bne.n	8002ea8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e041      	b.n	8002f2c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d106      	bne.n	8002ec2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f7fd fead 	bl	8000c1c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2202      	movs	r2, #2
 8002ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	3304      	adds	r3, #4
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	4610      	mov	r0, r2
 8002ed6:	f000 faf1 	bl	80034bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2201      	movs	r2, #1
 8002ede:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2201      	movs	r2, #1
 8002eee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2201      	movs	r2, #1
 8002efe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2201      	movs	r2, #1
 8002f06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2201      	movs	r2, #1
 8002f16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2201      	movs	r2, #1
 8002f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3708      	adds	r7, #8
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	f003 0302 	and.w	r3, r3, #2
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d122      	bne.n	8002f90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	f003 0302 	and.w	r3, r3, #2
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d11b      	bne.n	8002f90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f06f 0202 	mvn.w	r2, #2
 8002f60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2201      	movs	r2, #1
 8002f66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	f003 0303 	and.w	r3, r3, #3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d003      	beq.n	8002f7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 fa81 	bl	800347e <HAL_TIM_IC_CaptureCallback>
 8002f7c:	e005      	b.n	8002f8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 fa73 	bl	800346a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f000 fa84 	bl	8003492 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	f003 0304 	and.w	r3, r3, #4
 8002f9a:	2b04      	cmp	r3, #4
 8002f9c:	d122      	bne.n	8002fe4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	f003 0304 	and.w	r3, r3, #4
 8002fa8:	2b04      	cmp	r3, #4
 8002faa:	d11b      	bne.n	8002fe4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f06f 0204 	mvn.w	r2, #4
 8002fb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2202      	movs	r2, #2
 8002fba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d003      	beq.n	8002fd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 fa57 	bl	800347e <HAL_TIM_IC_CaptureCallback>
 8002fd0:	e005      	b.n	8002fde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 fa49 	bl	800346a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f000 fa5a 	bl	8003492 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	f003 0308 	and.w	r3, r3, #8
 8002fee:	2b08      	cmp	r3, #8
 8002ff0:	d122      	bne.n	8003038 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	f003 0308 	and.w	r3, r3, #8
 8002ffc:	2b08      	cmp	r3, #8
 8002ffe:	d11b      	bne.n	8003038 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f06f 0208 	mvn.w	r2, #8
 8003008:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2204      	movs	r2, #4
 800300e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	69db      	ldr	r3, [r3, #28]
 8003016:	f003 0303 	and.w	r3, r3, #3
 800301a:	2b00      	cmp	r3, #0
 800301c:	d003      	beq.n	8003026 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 fa2d 	bl	800347e <HAL_TIM_IC_CaptureCallback>
 8003024:	e005      	b.n	8003032 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f000 fa1f 	bl	800346a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 fa30 	bl	8003492 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	f003 0310 	and.w	r3, r3, #16
 8003042:	2b10      	cmp	r3, #16
 8003044:	d122      	bne.n	800308c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	f003 0310 	and.w	r3, r3, #16
 8003050:	2b10      	cmp	r3, #16
 8003052:	d11b      	bne.n	800308c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f06f 0210 	mvn.w	r2, #16
 800305c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2208      	movs	r2, #8
 8003062:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	69db      	ldr	r3, [r3, #28]
 800306a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800306e:	2b00      	cmp	r3, #0
 8003070:	d003      	beq.n	800307a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 fa03 	bl	800347e <HAL_TIM_IC_CaptureCallback>
 8003078:	e005      	b.n	8003086 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f000 f9f5 	bl	800346a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f000 fa06 	bl	8003492 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	f003 0301 	and.w	r3, r3, #1
 8003096:	2b01      	cmp	r3, #1
 8003098:	d10e      	bne.n	80030b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	f003 0301 	and.w	r3, r3, #1
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d107      	bne.n	80030b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f06f 0201 	mvn.w	r2, #1
 80030b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f000 f9cf 	bl	8003456 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030c2:	2b80      	cmp	r3, #128	; 0x80
 80030c4:	d10e      	bne.n	80030e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030d0:	2b80      	cmp	r3, #128	; 0x80
 80030d2:	d107      	bne.n	80030e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80030dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f000 fd0a 	bl	8003af8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ee:	2b40      	cmp	r3, #64	; 0x40
 80030f0:	d10e      	bne.n	8003110 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030fc:	2b40      	cmp	r3, #64	; 0x40
 80030fe:	d107      	bne.n	8003110 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 f9cb 	bl	80034a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	f003 0320 	and.w	r3, r3, #32
 800311a:	2b20      	cmp	r3, #32
 800311c:	d10e      	bne.n	800313c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	f003 0320 	and.w	r3, r3, #32
 8003128:	2b20      	cmp	r3, #32
 800312a:	d107      	bne.n	800313c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f06f 0220 	mvn.w	r2, #32
 8003134:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 fcd4 	bl	8003ae4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800313c:	bf00      	nop
 800313e:	3708      	adds	r7, #8
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b086      	sub	sp, #24
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003150:	2300      	movs	r3, #0
 8003152:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800315a:	2b01      	cmp	r3, #1
 800315c:	d101      	bne.n	8003162 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800315e:	2302      	movs	r3, #2
 8003160:	e0ae      	b.n	80032c0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2201      	movs	r2, #1
 8003166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2b0c      	cmp	r3, #12
 800316e:	f200 809f 	bhi.w	80032b0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003172:	a201      	add	r2, pc, #4	; (adr r2, 8003178 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003178:	080031ad 	.word	0x080031ad
 800317c:	080032b1 	.word	0x080032b1
 8003180:	080032b1 	.word	0x080032b1
 8003184:	080032b1 	.word	0x080032b1
 8003188:	080031ed 	.word	0x080031ed
 800318c:	080032b1 	.word	0x080032b1
 8003190:	080032b1 	.word	0x080032b1
 8003194:	080032b1 	.word	0x080032b1
 8003198:	0800322f 	.word	0x0800322f
 800319c:	080032b1 	.word	0x080032b1
 80031a0:	080032b1 	.word	0x080032b1
 80031a4:	080032b1 	.word	0x080032b1
 80031a8:	0800326f 	.word	0x0800326f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68b9      	ldr	r1, [r7, #8]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f000 fa02 	bl	80035bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	699a      	ldr	r2, [r3, #24]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f042 0208 	orr.w	r2, r2, #8
 80031c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	699a      	ldr	r2, [r3, #24]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f022 0204 	bic.w	r2, r2, #4
 80031d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	6999      	ldr	r1, [r3, #24]
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	691a      	ldr	r2, [r3, #16]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	430a      	orrs	r2, r1
 80031e8:	619a      	str	r2, [r3, #24]
      break;
 80031ea:	e064      	b.n	80032b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	68b9      	ldr	r1, [r7, #8]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f000 fa48 	bl	8003688 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	699a      	ldr	r2, [r3, #24]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003206:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	699a      	ldr	r2, [r3, #24]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003216:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	6999      	ldr	r1, [r3, #24]
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	021a      	lsls	r2, r3, #8
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	430a      	orrs	r2, r1
 800322a:	619a      	str	r2, [r3, #24]
      break;
 800322c:	e043      	b.n	80032b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	68b9      	ldr	r1, [r7, #8]
 8003234:	4618      	mov	r0, r3
 8003236:	f000 fa93 	bl	8003760 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	69da      	ldr	r2, [r3, #28]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f042 0208 	orr.w	r2, r2, #8
 8003248:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	69da      	ldr	r2, [r3, #28]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f022 0204 	bic.w	r2, r2, #4
 8003258:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	69d9      	ldr	r1, [r3, #28]
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	691a      	ldr	r2, [r3, #16]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	430a      	orrs	r2, r1
 800326a:	61da      	str	r2, [r3, #28]
      break;
 800326c:	e023      	b.n	80032b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68b9      	ldr	r1, [r7, #8]
 8003274:	4618      	mov	r0, r3
 8003276:	f000 fadd 	bl	8003834 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	69da      	ldr	r2, [r3, #28]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003288:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	69da      	ldr	r2, [r3, #28]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003298:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	69d9      	ldr	r1, [r3, #28]
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	691b      	ldr	r3, [r3, #16]
 80032a4:	021a      	lsls	r2, r3, #8
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	430a      	orrs	r2, r1
 80032ac:	61da      	str	r2, [r3, #28]
      break;
 80032ae:	e002      	b.n	80032b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	75fb      	strb	r3, [r7, #23]
      break;
 80032b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80032be:	7dfb      	ldrb	r3, [r7, #23]
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3718      	adds	r7, #24
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032d2:	2300      	movs	r3, #0
 80032d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d101      	bne.n	80032e4 <HAL_TIM_ConfigClockSource+0x1c>
 80032e0:	2302      	movs	r3, #2
 80032e2:	e0b4      	b.n	800344e <HAL_TIM_ConfigClockSource+0x186>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2202      	movs	r2, #2
 80032f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003302:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800330a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68ba      	ldr	r2, [r7, #8]
 8003312:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800331c:	d03e      	beq.n	800339c <HAL_TIM_ConfigClockSource+0xd4>
 800331e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003322:	f200 8087 	bhi.w	8003434 <HAL_TIM_ConfigClockSource+0x16c>
 8003326:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800332a:	f000 8086 	beq.w	800343a <HAL_TIM_ConfigClockSource+0x172>
 800332e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003332:	d87f      	bhi.n	8003434 <HAL_TIM_ConfigClockSource+0x16c>
 8003334:	2b70      	cmp	r3, #112	; 0x70
 8003336:	d01a      	beq.n	800336e <HAL_TIM_ConfigClockSource+0xa6>
 8003338:	2b70      	cmp	r3, #112	; 0x70
 800333a:	d87b      	bhi.n	8003434 <HAL_TIM_ConfigClockSource+0x16c>
 800333c:	2b60      	cmp	r3, #96	; 0x60
 800333e:	d050      	beq.n	80033e2 <HAL_TIM_ConfigClockSource+0x11a>
 8003340:	2b60      	cmp	r3, #96	; 0x60
 8003342:	d877      	bhi.n	8003434 <HAL_TIM_ConfigClockSource+0x16c>
 8003344:	2b50      	cmp	r3, #80	; 0x50
 8003346:	d03c      	beq.n	80033c2 <HAL_TIM_ConfigClockSource+0xfa>
 8003348:	2b50      	cmp	r3, #80	; 0x50
 800334a:	d873      	bhi.n	8003434 <HAL_TIM_ConfigClockSource+0x16c>
 800334c:	2b40      	cmp	r3, #64	; 0x40
 800334e:	d058      	beq.n	8003402 <HAL_TIM_ConfigClockSource+0x13a>
 8003350:	2b40      	cmp	r3, #64	; 0x40
 8003352:	d86f      	bhi.n	8003434 <HAL_TIM_ConfigClockSource+0x16c>
 8003354:	2b30      	cmp	r3, #48	; 0x30
 8003356:	d064      	beq.n	8003422 <HAL_TIM_ConfigClockSource+0x15a>
 8003358:	2b30      	cmp	r3, #48	; 0x30
 800335a:	d86b      	bhi.n	8003434 <HAL_TIM_ConfigClockSource+0x16c>
 800335c:	2b20      	cmp	r3, #32
 800335e:	d060      	beq.n	8003422 <HAL_TIM_ConfigClockSource+0x15a>
 8003360:	2b20      	cmp	r3, #32
 8003362:	d867      	bhi.n	8003434 <HAL_TIM_ConfigClockSource+0x16c>
 8003364:	2b00      	cmp	r3, #0
 8003366:	d05c      	beq.n	8003422 <HAL_TIM_ConfigClockSource+0x15a>
 8003368:	2b10      	cmp	r3, #16
 800336a:	d05a      	beq.n	8003422 <HAL_TIM_ConfigClockSource+0x15a>
 800336c:	e062      	b.n	8003434 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6818      	ldr	r0, [r3, #0]
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	6899      	ldr	r1, [r3, #8]
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	685a      	ldr	r2, [r3, #4]
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	f000 fb23 	bl	80039c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003390:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	68ba      	ldr	r2, [r7, #8]
 8003398:	609a      	str	r2, [r3, #8]
      break;
 800339a:	e04f      	b.n	800343c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6818      	ldr	r0, [r3, #0]
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	6899      	ldr	r1, [r3, #8]
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685a      	ldr	r2, [r3, #4]
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	f000 fb0c 	bl	80039c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	689a      	ldr	r2, [r3, #8]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033be:	609a      	str	r2, [r3, #8]
      break;
 80033c0:	e03c      	b.n	800343c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6818      	ldr	r0, [r3, #0]
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	6859      	ldr	r1, [r3, #4]
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	461a      	mov	r2, r3
 80033d0:	f000 fa80 	bl	80038d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2150      	movs	r1, #80	; 0x50
 80033da:	4618      	mov	r0, r3
 80033dc:	f000 fad9 	bl	8003992 <TIM_ITRx_SetConfig>
      break;
 80033e0:	e02c      	b.n	800343c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6818      	ldr	r0, [r3, #0]
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	6859      	ldr	r1, [r3, #4]
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	461a      	mov	r2, r3
 80033f0:	f000 fa9f 	bl	8003932 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2160      	movs	r1, #96	; 0x60
 80033fa:	4618      	mov	r0, r3
 80033fc:	f000 fac9 	bl	8003992 <TIM_ITRx_SetConfig>
      break;
 8003400:	e01c      	b.n	800343c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6818      	ldr	r0, [r3, #0]
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	6859      	ldr	r1, [r3, #4]
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	461a      	mov	r2, r3
 8003410:	f000 fa60 	bl	80038d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2140      	movs	r1, #64	; 0x40
 800341a:	4618      	mov	r0, r3
 800341c:	f000 fab9 	bl	8003992 <TIM_ITRx_SetConfig>
      break;
 8003420:	e00c      	b.n	800343c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4619      	mov	r1, r3
 800342c:	4610      	mov	r0, r2
 800342e:	f000 fab0 	bl	8003992 <TIM_ITRx_SetConfig>
      break;
 8003432:	e003      	b.n	800343c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	73fb      	strb	r3, [r7, #15]
      break;
 8003438:	e000      	b.n	800343c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800343a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800344c:	7bfb      	ldrb	r3, [r7, #15]
}
 800344e:	4618      	mov	r0, r3
 8003450:	3710      	adds	r7, #16
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003456:	b480      	push	{r7}
 8003458:	b083      	sub	sp, #12
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800345e:	bf00      	nop
 8003460:	370c      	adds	r7, #12
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr

0800346a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800346a:	b480      	push	{r7}
 800346c:	b083      	sub	sp, #12
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003472:	bf00      	nop
 8003474:	370c      	adds	r7, #12
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr

0800347e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800347e:	b480      	push	{r7}
 8003480:	b083      	sub	sp, #12
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003486:	bf00      	nop
 8003488:	370c      	adds	r7, #12
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr

08003492 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003492:	b480      	push	{r7}
 8003494:	b083      	sub	sp, #12
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800349a:	bf00      	nop
 800349c:	370c      	adds	r7, #12
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr

080034a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034a6:	b480      	push	{r7}
 80034a8:	b083      	sub	sp, #12
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034ae:	bf00      	nop
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
	...

080034bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80034bc:	b480      	push	{r7}
 80034be:	b085      	sub	sp, #20
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4a34      	ldr	r2, [pc, #208]	; (80035a0 <TIM_Base_SetConfig+0xe4>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d00f      	beq.n	80034f4 <TIM_Base_SetConfig+0x38>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034da:	d00b      	beq.n	80034f4 <TIM_Base_SetConfig+0x38>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a31      	ldr	r2, [pc, #196]	; (80035a4 <TIM_Base_SetConfig+0xe8>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d007      	beq.n	80034f4 <TIM_Base_SetConfig+0x38>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4a30      	ldr	r2, [pc, #192]	; (80035a8 <TIM_Base_SetConfig+0xec>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d003      	beq.n	80034f4 <TIM_Base_SetConfig+0x38>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4a2f      	ldr	r2, [pc, #188]	; (80035ac <TIM_Base_SetConfig+0xf0>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d108      	bne.n	8003506 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	68fa      	ldr	r2, [r7, #12]
 8003502:	4313      	orrs	r3, r2
 8003504:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a25      	ldr	r2, [pc, #148]	; (80035a0 <TIM_Base_SetConfig+0xe4>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d01b      	beq.n	8003546 <TIM_Base_SetConfig+0x8a>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003514:	d017      	beq.n	8003546 <TIM_Base_SetConfig+0x8a>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a22      	ldr	r2, [pc, #136]	; (80035a4 <TIM_Base_SetConfig+0xe8>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d013      	beq.n	8003546 <TIM_Base_SetConfig+0x8a>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a21      	ldr	r2, [pc, #132]	; (80035a8 <TIM_Base_SetConfig+0xec>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d00f      	beq.n	8003546 <TIM_Base_SetConfig+0x8a>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a20      	ldr	r2, [pc, #128]	; (80035ac <TIM_Base_SetConfig+0xf0>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d00b      	beq.n	8003546 <TIM_Base_SetConfig+0x8a>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a1f      	ldr	r2, [pc, #124]	; (80035b0 <TIM_Base_SetConfig+0xf4>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d007      	beq.n	8003546 <TIM_Base_SetConfig+0x8a>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a1e      	ldr	r2, [pc, #120]	; (80035b4 <TIM_Base_SetConfig+0xf8>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d003      	beq.n	8003546 <TIM_Base_SetConfig+0x8a>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a1d      	ldr	r2, [pc, #116]	; (80035b8 <TIM_Base_SetConfig+0xfc>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d108      	bne.n	8003558 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800354c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	4313      	orrs	r3, r2
 8003556:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	4313      	orrs	r3, r2
 8003564:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	68fa      	ldr	r2, [r7, #12]
 800356a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	689a      	ldr	r2, [r3, #8]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	4a08      	ldr	r2, [pc, #32]	; (80035a0 <TIM_Base_SetConfig+0xe4>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d103      	bne.n	800358c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	691a      	ldr	r2, [r3, #16]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	615a      	str	r2, [r3, #20]
}
 8003592:	bf00      	nop
 8003594:	3714      	adds	r7, #20
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop
 80035a0:	40010000 	.word	0x40010000
 80035a4:	40000400 	.word	0x40000400
 80035a8:	40000800 	.word	0x40000800
 80035ac:	40000c00 	.word	0x40000c00
 80035b0:	40014000 	.word	0x40014000
 80035b4:	40014400 	.word	0x40014400
 80035b8:	40014800 	.word	0x40014800

080035bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035bc:	b480      	push	{r7}
 80035be:	b087      	sub	sp, #28
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a1b      	ldr	r3, [r3, #32]
 80035ca:	f023 0201 	bic.w	r2, r3, #1
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a1b      	ldr	r3, [r3, #32]
 80035d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	699b      	ldr	r3, [r3, #24]
 80035e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f023 0303 	bic.w	r3, r3, #3
 80035f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	68fa      	ldr	r2, [r7, #12]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	f023 0302 	bic.w	r3, r3, #2
 8003604:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	697a      	ldr	r2, [r7, #20]
 800360c:	4313      	orrs	r3, r2
 800360e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	4a1c      	ldr	r2, [pc, #112]	; (8003684 <TIM_OC1_SetConfig+0xc8>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d10c      	bne.n	8003632 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	f023 0308 	bic.w	r3, r3, #8
 800361e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	697a      	ldr	r2, [r7, #20]
 8003626:	4313      	orrs	r3, r2
 8003628:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	f023 0304 	bic.w	r3, r3, #4
 8003630:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a13      	ldr	r2, [pc, #76]	; (8003684 <TIM_OC1_SetConfig+0xc8>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d111      	bne.n	800365e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003640:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003648:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	695b      	ldr	r3, [r3, #20]
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	4313      	orrs	r3, r2
 8003652:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	699b      	ldr	r3, [r3, #24]
 8003658:	693a      	ldr	r2, [r7, #16]
 800365a:	4313      	orrs	r3, r2
 800365c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	693a      	ldr	r2, [r7, #16]
 8003662:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	685a      	ldr	r2, [r3, #4]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	697a      	ldr	r2, [r7, #20]
 8003676:	621a      	str	r2, [r3, #32]
}
 8003678:	bf00      	nop
 800367a:	371c      	adds	r7, #28
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr
 8003684:	40010000 	.word	0x40010000

08003688 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003688:	b480      	push	{r7}
 800368a:	b087      	sub	sp, #28
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a1b      	ldr	r3, [r3, #32]
 8003696:	f023 0210 	bic.w	r2, r3, #16
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a1b      	ldr	r3, [r3, #32]
 80036a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	699b      	ldr	r3, [r3, #24]
 80036ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	021b      	lsls	r3, r3, #8
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	f023 0320 	bic.w	r3, r3, #32
 80036d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	011b      	lsls	r3, r3, #4
 80036da:	697a      	ldr	r2, [r7, #20]
 80036dc:	4313      	orrs	r3, r2
 80036de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	4a1e      	ldr	r2, [pc, #120]	; (800375c <TIM_OC2_SetConfig+0xd4>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d10d      	bne.n	8003704 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	011b      	lsls	r3, r3, #4
 80036f6:	697a      	ldr	r2, [r7, #20]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003702:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	4a15      	ldr	r2, [pc, #84]	; (800375c <TIM_OC2_SetConfig+0xd4>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d113      	bne.n	8003734 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003712:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800371a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	695b      	ldr	r3, [r3, #20]
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	693a      	ldr	r2, [r7, #16]
 8003724:	4313      	orrs	r3, r2
 8003726:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	699b      	ldr	r3, [r3, #24]
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	4313      	orrs	r3, r2
 8003732:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	693a      	ldr	r2, [r7, #16]
 8003738:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	685a      	ldr	r2, [r3, #4]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	697a      	ldr	r2, [r7, #20]
 800374c:	621a      	str	r2, [r3, #32]
}
 800374e:	bf00      	nop
 8003750:	371c      	adds	r7, #28
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	40010000 	.word	0x40010000

08003760 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003760:	b480      	push	{r7}
 8003762:	b087      	sub	sp, #28
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a1b      	ldr	r3, [r3, #32]
 800376e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a1b      	ldr	r3, [r3, #32]
 800377a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	69db      	ldr	r3, [r3, #28]
 8003786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800378e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f023 0303 	bic.w	r3, r3, #3
 8003796:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	68fa      	ldr	r2, [r7, #12]
 800379e:	4313      	orrs	r3, r2
 80037a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80037a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	021b      	lsls	r3, r3, #8
 80037b0:	697a      	ldr	r2, [r7, #20]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a1d      	ldr	r2, [pc, #116]	; (8003830 <TIM_OC3_SetConfig+0xd0>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d10d      	bne.n	80037da <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	021b      	lsls	r3, r3, #8
 80037cc:	697a      	ldr	r2, [r7, #20]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a14      	ldr	r2, [pc, #80]	; (8003830 <TIM_OC3_SetConfig+0xd0>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d113      	bne.n	800380a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	011b      	lsls	r3, r3, #4
 80037f8:	693a      	ldr	r2, [r7, #16]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	699b      	ldr	r3, [r3, #24]
 8003802:	011b      	lsls	r3, r3, #4
 8003804:	693a      	ldr	r2, [r7, #16]
 8003806:	4313      	orrs	r3, r2
 8003808:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	693a      	ldr	r2, [r7, #16]
 800380e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	68fa      	ldr	r2, [r7, #12]
 8003814:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	685a      	ldr	r2, [r3, #4]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	697a      	ldr	r2, [r7, #20]
 8003822:	621a      	str	r2, [r3, #32]
}
 8003824:	bf00      	nop
 8003826:	371c      	adds	r7, #28
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr
 8003830:	40010000 	.word	0x40010000

08003834 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003834:	b480      	push	{r7}
 8003836:	b087      	sub	sp, #28
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a1b      	ldr	r3, [r3, #32]
 8003842:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a1b      	ldr	r3, [r3, #32]
 800384e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	69db      	ldr	r3, [r3, #28]
 800385a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003862:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800386a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	021b      	lsls	r3, r3, #8
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	4313      	orrs	r3, r2
 8003876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800387e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	031b      	lsls	r3, r3, #12
 8003886:	693a      	ldr	r2, [r7, #16]
 8003888:	4313      	orrs	r3, r2
 800388a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	4a10      	ldr	r2, [pc, #64]	; (80038d0 <TIM_OC4_SetConfig+0x9c>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d109      	bne.n	80038a8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800389a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	695b      	ldr	r3, [r3, #20]
 80038a0:	019b      	lsls	r3, r3, #6
 80038a2:	697a      	ldr	r2, [r7, #20]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	697a      	ldr	r2, [r7, #20]
 80038ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	68fa      	ldr	r2, [r7, #12]
 80038b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	685a      	ldr	r2, [r3, #4]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	693a      	ldr	r2, [r7, #16]
 80038c0:	621a      	str	r2, [r3, #32]
}
 80038c2:	bf00      	nop
 80038c4:	371c      	adds	r7, #28
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	40010000 	.word	0x40010000

080038d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b087      	sub	sp, #28
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6a1b      	ldr	r3, [r3, #32]
 80038e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6a1b      	ldr	r3, [r3, #32]
 80038ea:	f023 0201 	bic.w	r2, r3, #1
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	699b      	ldr	r3, [r3, #24]
 80038f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	011b      	lsls	r3, r3, #4
 8003904:	693a      	ldr	r2, [r7, #16]
 8003906:	4313      	orrs	r3, r2
 8003908:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	f023 030a 	bic.w	r3, r3, #10
 8003910:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003912:	697a      	ldr	r2, [r7, #20]
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	4313      	orrs	r3, r2
 8003918:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	697a      	ldr	r2, [r7, #20]
 8003924:	621a      	str	r2, [r3, #32]
}
 8003926:	bf00      	nop
 8003928:	371c      	adds	r7, #28
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr

08003932 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003932:	b480      	push	{r7}
 8003934:	b087      	sub	sp, #28
 8003936:	af00      	add	r7, sp, #0
 8003938:	60f8      	str	r0, [r7, #12]
 800393a:	60b9      	str	r1, [r7, #8]
 800393c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6a1b      	ldr	r3, [r3, #32]
 8003942:	f023 0210 	bic.w	r2, r3, #16
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6a1b      	ldr	r3, [r3, #32]
 8003954:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800395c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	031b      	lsls	r3, r3, #12
 8003962:	697a      	ldr	r2, [r7, #20]
 8003964:	4313      	orrs	r3, r2
 8003966:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800396e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	011b      	lsls	r3, r3, #4
 8003974:	693a      	ldr	r2, [r7, #16]
 8003976:	4313      	orrs	r3, r2
 8003978:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	697a      	ldr	r2, [r7, #20]
 800397e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	693a      	ldr	r2, [r7, #16]
 8003984:	621a      	str	r2, [r3, #32]
}
 8003986:	bf00      	nop
 8003988:	371c      	adds	r7, #28
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr

08003992 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003992:	b480      	push	{r7}
 8003994:	b085      	sub	sp, #20
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
 800399a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039aa:	683a      	ldr	r2, [r7, #0]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	f043 0307 	orr.w	r3, r3, #7
 80039b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	68fa      	ldr	r2, [r7, #12]
 80039ba:	609a      	str	r2, [r3, #8]
}
 80039bc:	bf00      	nop
 80039be:	3714      	adds	r7, #20
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b087      	sub	sp, #28
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	60b9      	str	r1, [r7, #8]
 80039d2:	607a      	str	r2, [r7, #4]
 80039d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	021a      	lsls	r2, r3, #8
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	431a      	orrs	r2, r3
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	697a      	ldr	r2, [r7, #20]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	697a      	ldr	r2, [r7, #20]
 80039fa:	609a      	str	r2, [r3, #8]
}
 80039fc:	bf00      	nop
 80039fe:	371c      	adds	r7, #28
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b085      	sub	sp, #20
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d101      	bne.n	8003a20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	e050      	b.n	8003ac2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2202      	movs	r2, #2
 8003a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68fa      	ldr	r2, [r7, #12]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a1c      	ldr	r2, [pc, #112]	; (8003ad0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d018      	beq.n	8003a96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a6c:	d013      	beq.n	8003a96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a18      	ldr	r2, [pc, #96]	; (8003ad4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d00e      	beq.n	8003a96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a16      	ldr	r2, [pc, #88]	; (8003ad8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d009      	beq.n	8003a96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a15      	ldr	r2, [pc, #84]	; (8003adc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d004      	beq.n	8003a96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a13      	ldr	r2, [pc, #76]	; (8003ae0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d10c      	bne.n	8003ab0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	68ba      	ldr	r2, [r7, #8]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	68ba      	ldr	r2, [r7, #8]
 8003aae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3714      	adds	r7, #20
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	40010000 	.word	0x40010000
 8003ad4:	40000400 	.word	0x40000400
 8003ad8:	40000800 	.word	0x40000800
 8003adc:	40000c00 	.word	0x40000c00
 8003ae0:	40014000 	.word	0x40014000

08003ae4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003aec:	bf00      	nop
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b00:	bf00      	nop
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d101      	bne.n	8003b1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e03f      	b.n	8003b9e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d106      	bne.n	8003b38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f7fd f8ce 	bl	8000cd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2224      	movs	r2, #36	; 0x24
 8003b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68da      	ldr	r2, [r3, #12]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f000 f829 	bl	8003ba8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	691a      	ldr	r2, [r3, #16]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	695a      	ldr	r2, [r3, #20]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	68da      	ldr	r2, [r3, #12]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2220      	movs	r2, #32
 8003b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2220      	movs	r2, #32
 8003b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3708      	adds	r7, #8
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
	...

08003ba8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ba8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bac:	b0c0      	sub	sp, #256	; 0x100
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	691b      	ldr	r3, [r3, #16]
 8003bbc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bc4:	68d9      	ldr	r1, [r3, #12]
 8003bc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	ea40 0301 	orr.w	r3, r0, r1
 8003bd0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003bd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bd6:	689a      	ldr	r2, [r3, #8]
 8003bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	431a      	orrs	r2, r3
 8003be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003be4:	695b      	ldr	r3, [r3, #20]
 8003be6:	431a      	orrs	r2, r3
 8003be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bec:	69db      	ldr	r3, [r3, #28]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003c00:	f021 010c 	bic.w	r1, r1, #12
 8003c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003c0e:	430b      	orrs	r3, r1
 8003c10:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	695b      	ldr	r3, [r3, #20]
 8003c1a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003c1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c22:	6999      	ldr	r1, [r3, #24]
 8003c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	ea40 0301 	orr.w	r3, r0, r1
 8003c2e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	4b8f      	ldr	r3, [pc, #572]	; (8003e74 <UART_SetConfig+0x2cc>)
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d005      	beq.n	8003c48 <UART_SetConfig+0xa0>
 8003c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	4b8d      	ldr	r3, [pc, #564]	; (8003e78 <UART_SetConfig+0x2d0>)
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d104      	bne.n	8003c52 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c48:	f7ff f8c2 	bl	8002dd0 <HAL_RCC_GetPCLK2Freq>
 8003c4c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003c50:	e003      	b.n	8003c5a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c52:	f7ff f8a9 	bl	8002da8 <HAL_RCC_GetPCLK1Freq>
 8003c56:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c5e:	69db      	ldr	r3, [r3, #28]
 8003c60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c64:	f040 810c 	bne.w	8003e80 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003c72:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003c76:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003c7a:	4622      	mov	r2, r4
 8003c7c:	462b      	mov	r3, r5
 8003c7e:	1891      	adds	r1, r2, r2
 8003c80:	65b9      	str	r1, [r7, #88]	; 0x58
 8003c82:	415b      	adcs	r3, r3
 8003c84:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c86:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003c8a:	4621      	mov	r1, r4
 8003c8c:	eb12 0801 	adds.w	r8, r2, r1
 8003c90:	4629      	mov	r1, r5
 8003c92:	eb43 0901 	adc.w	r9, r3, r1
 8003c96:	f04f 0200 	mov.w	r2, #0
 8003c9a:	f04f 0300 	mov.w	r3, #0
 8003c9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ca2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ca6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003caa:	4690      	mov	r8, r2
 8003cac:	4699      	mov	r9, r3
 8003cae:	4623      	mov	r3, r4
 8003cb0:	eb18 0303 	adds.w	r3, r8, r3
 8003cb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003cb8:	462b      	mov	r3, r5
 8003cba:	eb49 0303 	adc.w	r3, r9, r3
 8003cbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003cce:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003cd2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003cd6:	460b      	mov	r3, r1
 8003cd8:	18db      	adds	r3, r3, r3
 8003cda:	653b      	str	r3, [r7, #80]	; 0x50
 8003cdc:	4613      	mov	r3, r2
 8003cde:	eb42 0303 	adc.w	r3, r2, r3
 8003ce2:	657b      	str	r3, [r7, #84]	; 0x54
 8003ce4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003ce8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003cec:	f7fc fac8 	bl	8000280 <__aeabi_uldivmod>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	460b      	mov	r3, r1
 8003cf4:	4b61      	ldr	r3, [pc, #388]	; (8003e7c <UART_SetConfig+0x2d4>)
 8003cf6:	fba3 2302 	umull	r2, r3, r3, r2
 8003cfa:	095b      	lsrs	r3, r3, #5
 8003cfc:	011c      	lsls	r4, r3, #4
 8003cfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d02:	2200      	movs	r2, #0
 8003d04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d08:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003d0c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003d10:	4642      	mov	r2, r8
 8003d12:	464b      	mov	r3, r9
 8003d14:	1891      	adds	r1, r2, r2
 8003d16:	64b9      	str	r1, [r7, #72]	; 0x48
 8003d18:	415b      	adcs	r3, r3
 8003d1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d1c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003d20:	4641      	mov	r1, r8
 8003d22:	eb12 0a01 	adds.w	sl, r2, r1
 8003d26:	4649      	mov	r1, r9
 8003d28:	eb43 0b01 	adc.w	fp, r3, r1
 8003d2c:	f04f 0200 	mov.w	r2, #0
 8003d30:	f04f 0300 	mov.w	r3, #0
 8003d34:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003d38:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003d3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d40:	4692      	mov	sl, r2
 8003d42:	469b      	mov	fp, r3
 8003d44:	4643      	mov	r3, r8
 8003d46:	eb1a 0303 	adds.w	r3, sl, r3
 8003d4a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d4e:	464b      	mov	r3, r9
 8003d50:	eb4b 0303 	adc.w	r3, fp, r3
 8003d54:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003d64:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003d68:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	18db      	adds	r3, r3, r3
 8003d70:	643b      	str	r3, [r7, #64]	; 0x40
 8003d72:	4613      	mov	r3, r2
 8003d74:	eb42 0303 	adc.w	r3, r2, r3
 8003d78:	647b      	str	r3, [r7, #68]	; 0x44
 8003d7a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003d7e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003d82:	f7fc fa7d 	bl	8000280 <__aeabi_uldivmod>
 8003d86:	4602      	mov	r2, r0
 8003d88:	460b      	mov	r3, r1
 8003d8a:	4611      	mov	r1, r2
 8003d8c:	4b3b      	ldr	r3, [pc, #236]	; (8003e7c <UART_SetConfig+0x2d4>)
 8003d8e:	fba3 2301 	umull	r2, r3, r3, r1
 8003d92:	095b      	lsrs	r3, r3, #5
 8003d94:	2264      	movs	r2, #100	; 0x64
 8003d96:	fb02 f303 	mul.w	r3, r2, r3
 8003d9a:	1acb      	subs	r3, r1, r3
 8003d9c:	00db      	lsls	r3, r3, #3
 8003d9e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003da2:	4b36      	ldr	r3, [pc, #216]	; (8003e7c <UART_SetConfig+0x2d4>)
 8003da4:	fba3 2302 	umull	r2, r3, r3, r2
 8003da8:	095b      	lsrs	r3, r3, #5
 8003daa:	005b      	lsls	r3, r3, #1
 8003dac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003db0:	441c      	add	r4, r3
 8003db2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003db6:	2200      	movs	r2, #0
 8003db8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003dbc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003dc0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003dc4:	4642      	mov	r2, r8
 8003dc6:	464b      	mov	r3, r9
 8003dc8:	1891      	adds	r1, r2, r2
 8003dca:	63b9      	str	r1, [r7, #56]	; 0x38
 8003dcc:	415b      	adcs	r3, r3
 8003dce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dd0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003dd4:	4641      	mov	r1, r8
 8003dd6:	1851      	adds	r1, r2, r1
 8003dd8:	6339      	str	r1, [r7, #48]	; 0x30
 8003dda:	4649      	mov	r1, r9
 8003ddc:	414b      	adcs	r3, r1
 8003dde:	637b      	str	r3, [r7, #52]	; 0x34
 8003de0:	f04f 0200 	mov.w	r2, #0
 8003de4:	f04f 0300 	mov.w	r3, #0
 8003de8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003dec:	4659      	mov	r1, fp
 8003dee:	00cb      	lsls	r3, r1, #3
 8003df0:	4651      	mov	r1, sl
 8003df2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003df6:	4651      	mov	r1, sl
 8003df8:	00ca      	lsls	r2, r1, #3
 8003dfa:	4610      	mov	r0, r2
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	4603      	mov	r3, r0
 8003e00:	4642      	mov	r2, r8
 8003e02:	189b      	adds	r3, r3, r2
 8003e04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e08:	464b      	mov	r3, r9
 8003e0a:	460a      	mov	r2, r1
 8003e0c:	eb42 0303 	adc.w	r3, r2, r3
 8003e10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003e20:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003e24:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003e28:	460b      	mov	r3, r1
 8003e2a:	18db      	adds	r3, r3, r3
 8003e2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e2e:	4613      	mov	r3, r2
 8003e30:	eb42 0303 	adc.w	r3, r2, r3
 8003e34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e36:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e3a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003e3e:	f7fc fa1f 	bl	8000280 <__aeabi_uldivmod>
 8003e42:	4602      	mov	r2, r0
 8003e44:	460b      	mov	r3, r1
 8003e46:	4b0d      	ldr	r3, [pc, #52]	; (8003e7c <UART_SetConfig+0x2d4>)
 8003e48:	fba3 1302 	umull	r1, r3, r3, r2
 8003e4c:	095b      	lsrs	r3, r3, #5
 8003e4e:	2164      	movs	r1, #100	; 0x64
 8003e50:	fb01 f303 	mul.w	r3, r1, r3
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	00db      	lsls	r3, r3, #3
 8003e58:	3332      	adds	r3, #50	; 0x32
 8003e5a:	4a08      	ldr	r2, [pc, #32]	; (8003e7c <UART_SetConfig+0x2d4>)
 8003e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e60:	095b      	lsrs	r3, r3, #5
 8003e62:	f003 0207 	and.w	r2, r3, #7
 8003e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4422      	add	r2, r4
 8003e6e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003e70:	e106      	b.n	8004080 <UART_SetConfig+0x4d8>
 8003e72:	bf00      	nop
 8003e74:	40011000 	.word	0x40011000
 8003e78:	40011400 	.word	0x40011400
 8003e7c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e84:	2200      	movs	r2, #0
 8003e86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003e8a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003e8e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003e92:	4642      	mov	r2, r8
 8003e94:	464b      	mov	r3, r9
 8003e96:	1891      	adds	r1, r2, r2
 8003e98:	6239      	str	r1, [r7, #32]
 8003e9a:	415b      	adcs	r3, r3
 8003e9c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e9e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ea2:	4641      	mov	r1, r8
 8003ea4:	1854      	adds	r4, r2, r1
 8003ea6:	4649      	mov	r1, r9
 8003ea8:	eb43 0501 	adc.w	r5, r3, r1
 8003eac:	f04f 0200 	mov.w	r2, #0
 8003eb0:	f04f 0300 	mov.w	r3, #0
 8003eb4:	00eb      	lsls	r3, r5, #3
 8003eb6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003eba:	00e2      	lsls	r2, r4, #3
 8003ebc:	4614      	mov	r4, r2
 8003ebe:	461d      	mov	r5, r3
 8003ec0:	4643      	mov	r3, r8
 8003ec2:	18e3      	adds	r3, r4, r3
 8003ec4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003ec8:	464b      	mov	r3, r9
 8003eca:	eb45 0303 	adc.w	r3, r5, r3
 8003ece:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003ede:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003ee2:	f04f 0200 	mov.w	r2, #0
 8003ee6:	f04f 0300 	mov.w	r3, #0
 8003eea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003eee:	4629      	mov	r1, r5
 8003ef0:	008b      	lsls	r3, r1, #2
 8003ef2:	4621      	mov	r1, r4
 8003ef4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ef8:	4621      	mov	r1, r4
 8003efa:	008a      	lsls	r2, r1, #2
 8003efc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003f00:	f7fc f9be 	bl	8000280 <__aeabi_uldivmod>
 8003f04:	4602      	mov	r2, r0
 8003f06:	460b      	mov	r3, r1
 8003f08:	4b60      	ldr	r3, [pc, #384]	; (800408c <UART_SetConfig+0x4e4>)
 8003f0a:	fba3 2302 	umull	r2, r3, r3, r2
 8003f0e:	095b      	lsrs	r3, r3, #5
 8003f10:	011c      	lsls	r4, r3, #4
 8003f12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f16:	2200      	movs	r2, #0
 8003f18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003f1c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003f20:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003f24:	4642      	mov	r2, r8
 8003f26:	464b      	mov	r3, r9
 8003f28:	1891      	adds	r1, r2, r2
 8003f2a:	61b9      	str	r1, [r7, #24]
 8003f2c:	415b      	adcs	r3, r3
 8003f2e:	61fb      	str	r3, [r7, #28]
 8003f30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f34:	4641      	mov	r1, r8
 8003f36:	1851      	adds	r1, r2, r1
 8003f38:	6139      	str	r1, [r7, #16]
 8003f3a:	4649      	mov	r1, r9
 8003f3c:	414b      	adcs	r3, r1
 8003f3e:	617b      	str	r3, [r7, #20]
 8003f40:	f04f 0200 	mov.w	r2, #0
 8003f44:	f04f 0300 	mov.w	r3, #0
 8003f48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f4c:	4659      	mov	r1, fp
 8003f4e:	00cb      	lsls	r3, r1, #3
 8003f50:	4651      	mov	r1, sl
 8003f52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f56:	4651      	mov	r1, sl
 8003f58:	00ca      	lsls	r2, r1, #3
 8003f5a:	4610      	mov	r0, r2
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	4603      	mov	r3, r0
 8003f60:	4642      	mov	r2, r8
 8003f62:	189b      	adds	r3, r3, r2
 8003f64:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f68:	464b      	mov	r3, r9
 8003f6a:	460a      	mov	r2, r1
 8003f6c:	eb42 0303 	adc.w	r3, r2, r3
 8003f70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f7e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003f80:	f04f 0200 	mov.w	r2, #0
 8003f84:	f04f 0300 	mov.w	r3, #0
 8003f88:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003f8c:	4649      	mov	r1, r9
 8003f8e:	008b      	lsls	r3, r1, #2
 8003f90:	4641      	mov	r1, r8
 8003f92:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f96:	4641      	mov	r1, r8
 8003f98:	008a      	lsls	r2, r1, #2
 8003f9a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003f9e:	f7fc f96f 	bl	8000280 <__aeabi_uldivmod>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	4611      	mov	r1, r2
 8003fa8:	4b38      	ldr	r3, [pc, #224]	; (800408c <UART_SetConfig+0x4e4>)
 8003faa:	fba3 2301 	umull	r2, r3, r3, r1
 8003fae:	095b      	lsrs	r3, r3, #5
 8003fb0:	2264      	movs	r2, #100	; 0x64
 8003fb2:	fb02 f303 	mul.w	r3, r2, r3
 8003fb6:	1acb      	subs	r3, r1, r3
 8003fb8:	011b      	lsls	r3, r3, #4
 8003fba:	3332      	adds	r3, #50	; 0x32
 8003fbc:	4a33      	ldr	r2, [pc, #204]	; (800408c <UART_SetConfig+0x4e4>)
 8003fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc2:	095b      	lsrs	r3, r3, #5
 8003fc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fc8:	441c      	add	r4, r3
 8003fca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fce:	2200      	movs	r2, #0
 8003fd0:	673b      	str	r3, [r7, #112]	; 0x70
 8003fd2:	677a      	str	r2, [r7, #116]	; 0x74
 8003fd4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003fd8:	4642      	mov	r2, r8
 8003fda:	464b      	mov	r3, r9
 8003fdc:	1891      	adds	r1, r2, r2
 8003fde:	60b9      	str	r1, [r7, #8]
 8003fe0:	415b      	adcs	r3, r3
 8003fe2:	60fb      	str	r3, [r7, #12]
 8003fe4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003fe8:	4641      	mov	r1, r8
 8003fea:	1851      	adds	r1, r2, r1
 8003fec:	6039      	str	r1, [r7, #0]
 8003fee:	4649      	mov	r1, r9
 8003ff0:	414b      	adcs	r3, r1
 8003ff2:	607b      	str	r3, [r7, #4]
 8003ff4:	f04f 0200 	mov.w	r2, #0
 8003ff8:	f04f 0300 	mov.w	r3, #0
 8003ffc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004000:	4659      	mov	r1, fp
 8004002:	00cb      	lsls	r3, r1, #3
 8004004:	4651      	mov	r1, sl
 8004006:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800400a:	4651      	mov	r1, sl
 800400c:	00ca      	lsls	r2, r1, #3
 800400e:	4610      	mov	r0, r2
 8004010:	4619      	mov	r1, r3
 8004012:	4603      	mov	r3, r0
 8004014:	4642      	mov	r2, r8
 8004016:	189b      	adds	r3, r3, r2
 8004018:	66bb      	str	r3, [r7, #104]	; 0x68
 800401a:	464b      	mov	r3, r9
 800401c:	460a      	mov	r2, r1
 800401e:	eb42 0303 	adc.w	r3, r2, r3
 8004022:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	663b      	str	r3, [r7, #96]	; 0x60
 800402e:	667a      	str	r2, [r7, #100]	; 0x64
 8004030:	f04f 0200 	mov.w	r2, #0
 8004034:	f04f 0300 	mov.w	r3, #0
 8004038:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800403c:	4649      	mov	r1, r9
 800403e:	008b      	lsls	r3, r1, #2
 8004040:	4641      	mov	r1, r8
 8004042:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004046:	4641      	mov	r1, r8
 8004048:	008a      	lsls	r2, r1, #2
 800404a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800404e:	f7fc f917 	bl	8000280 <__aeabi_uldivmod>
 8004052:	4602      	mov	r2, r0
 8004054:	460b      	mov	r3, r1
 8004056:	4b0d      	ldr	r3, [pc, #52]	; (800408c <UART_SetConfig+0x4e4>)
 8004058:	fba3 1302 	umull	r1, r3, r3, r2
 800405c:	095b      	lsrs	r3, r3, #5
 800405e:	2164      	movs	r1, #100	; 0x64
 8004060:	fb01 f303 	mul.w	r3, r1, r3
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	011b      	lsls	r3, r3, #4
 8004068:	3332      	adds	r3, #50	; 0x32
 800406a:	4a08      	ldr	r2, [pc, #32]	; (800408c <UART_SetConfig+0x4e4>)
 800406c:	fba2 2303 	umull	r2, r3, r2, r3
 8004070:	095b      	lsrs	r3, r3, #5
 8004072:	f003 020f 	and.w	r2, r3, #15
 8004076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4422      	add	r2, r4
 800407e:	609a      	str	r2, [r3, #8]
}
 8004080:	bf00      	nop
 8004082:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004086:	46bd      	mov	sp, r7
 8004088:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800408c:	51eb851f 	.word	0x51eb851f

08004090 <std>:
 8004090:	2300      	movs	r3, #0
 8004092:	b510      	push	{r4, lr}
 8004094:	4604      	mov	r4, r0
 8004096:	e9c0 3300 	strd	r3, r3, [r0]
 800409a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800409e:	6083      	str	r3, [r0, #8]
 80040a0:	8181      	strh	r1, [r0, #12]
 80040a2:	6643      	str	r3, [r0, #100]	; 0x64
 80040a4:	81c2      	strh	r2, [r0, #14]
 80040a6:	6183      	str	r3, [r0, #24]
 80040a8:	4619      	mov	r1, r3
 80040aa:	2208      	movs	r2, #8
 80040ac:	305c      	adds	r0, #92	; 0x5c
 80040ae:	f000 f8f4 	bl	800429a <memset>
 80040b2:	4b05      	ldr	r3, [pc, #20]	; (80040c8 <std+0x38>)
 80040b4:	6263      	str	r3, [r4, #36]	; 0x24
 80040b6:	4b05      	ldr	r3, [pc, #20]	; (80040cc <std+0x3c>)
 80040b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80040ba:	4b05      	ldr	r3, [pc, #20]	; (80040d0 <std+0x40>)
 80040bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80040be:	4b05      	ldr	r3, [pc, #20]	; (80040d4 <std+0x44>)
 80040c0:	6224      	str	r4, [r4, #32]
 80040c2:	6323      	str	r3, [r4, #48]	; 0x30
 80040c4:	bd10      	pop	{r4, pc}
 80040c6:	bf00      	nop
 80040c8:	08004215 	.word	0x08004215
 80040cc:	08004237 	.word	0x08004237
 80040d0:	0800426f 	.word	0x0800426f
 80040d4:	08004293 	.word	0x08004293

080040d8 <stdio_exit_handler>:
 80040d8:	4a02      	ldr	r2, [pc, #8]	; (80040e4 <stdio_exit_handler+0xc>)
 80040da:	4903      	ldr	r1, [pc, #12]	; (80040e8 <stdio_exit_handler+0x10>)
 80040dc:	4803      	ldr	r0, [pc, #12]	; (80040ec <stdio_exit_handler+0x14>)
 80040de:	f000 b869 	b.w	80041b4 <_fwalk_sglue>
 80040e2:	bf00      	nop
 80040e4:	2000000c 	.word	0x2000000c
 80040e8:	08004c35 	.word	0x08004c35
 80040ec:	20000018 	.word	0x20000018

080040f0 <cleanup_stdio>:
 80040f0:	6841      	ldr	r1, [r0, #4]
 80040f2:	4b0c      	ldr	r3, [pc, #48]	; (8004124 <cleanup_stdio+0x34>)
 80040f4:	4299      	cmp	r1, r3
 80040f6:	b510      	push	{r4, lr}
 80040f8:	4604      	mov	r4, r0
 80040fa:	d001      	beq.n	8004100 <cleanup_stdio+0x10>
 80040fc:	f000 fd9a 	bl	8004c34 <_fflush_r>
 8004100:	68a1      	ldr	r1, [r4, #8]
 8004102:	4b09      	ldr	r3, [pc, #36]	; (8004128 <cleanup_stdio+0x38>)
 8004104:	4299      	cmp	r1, r3
 8004106:	d002      	beq.n	800410e <cleanup_stdio+0x1e>
 8004108:	4620      	mov	r0, r4
 800410a:	f000 fd93 	bl	8004c34 <_fflush_r>
 800410e:	68e1      	ldr	r1, [r4, #12]
 8004110:	4b06      	ldr	r3, [pc, #24]	; (800412c <cleanup_stdio+0x3c>)
 8004112:	4299      	cmp	r1, r3
 8004114:	d004      	beq.n	8004120 <cleanup_stdio+0x30>
 8004116:	4620      	mov	r0, r4
 8004118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800411c:	f000 bd8a 	b.w	8004c34 <_fflush_r>
 8004120:	bd10      	pop	{r4, pc}
 8004122:	bf00      	nop
 8004124:	20000210 	.word	0x20000210
 8004128:	20000278 	.word	0x20000278
 800412c:	200002e0 	.word	0x200002e0

08004130 <global_stdio_init.part.0>:
 8004130:	b510      	push	{r4, lr}
 8004132:	4b0b      	ldr	r3, [pc, #44]	; (8004160 <global_stdio_init.part.0+0x30>)
 8004134:	4c0b      	ldr	r4, [pc, #44]	; (8004164 <global_stdio_init.part.0+0x34>)
 8004136:	4a0c      	ldr	r2, [pc, #48]	; (8004168 <global_stdio_init.part.0+0x38>)
 8004138:	601a      	str	r2, [r3, #0]
 800413a:	4620      	mov	r0, r4
 800413c:	2200      	movs	r2, #0
 800413e:	2104      	movs	r1, #4
 8004140:	f7ff ffa6 	bl	8004090 <std>
 8004144:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004148:	2201      	movs	r2, #1
 800414a:	2109      	movs	r1, #9
 800414c:	f7ff ffa0 	bl	8004090 <std>
 8004150:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004154:	2202      	movs	r2, #2
 8004156:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800415a:	2112      	movs	r1, #18
 800415c:	f7ff bf98 	b.w	8004090 <std>
 8004160:	20000348 	.word	0x20000348
 8004164:	20000210 	.word	0x20000210
 8004168:	080040d9 	.word	0x080040d9

0800416c <__sfp_lock_acquire>:
 800416c:	4801      	ldr	r0, [pc, #4]	; (8004174 <__sfp_lock_acquire+0x8>)
 800416e:	f000 b90d 	b.w	800438c <__retarget_lock_acquire_recursive>
 8004172:	bf00      	nop
 8004174:	20000351 	.word	0x20000351

08004178 <__sfp_lock_release>:
 8004178:	4801      	ldr	r0, [pc, #4]	; (8004180 <__sfp_lock_release+0x8>)
 800417a:	f000 b908 	b.w	800438e <__retarget_lock_release_recursive>
 800417e:	bf00      	nop
 8004180:	20000351 	.word	0x20000351

08004184 <__sinit>:
 8004184:	b510      	push	{r4, lr}
 8004186:	4604      	mov	r4, r0
 8004188:	f7ff fff0 	bl	800416c <__sfp_lock_acquire>
 800418c:	6a23      	ldr	r3, [r4, #32]
 800418e:	b11b      	cbz	r3, 8004198 <__sinit+0x14>
 8004190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004194:	f7ff bff0 	b.w	8004178 <__sfp_lock_release>
 8004198:	4b04      	ldr	r3, [pc, #16]	; (80041ac <__sinit+0x28>)
 800419a:	6223      	str	r3, [r4, #32]
 800419c:	4b04      	ldr	r3, [pc, #16]	; (80041b0 <__sinit+0x2c>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d1f5      	bne.n	8004190 <__sinit+0xc>
 80041a4:	f7ff ffc4 	bl	8004130 <global_stdio_init.part.0>
 80041a8:	e7f2      	b.n	8004190 <__sinit+0xc>
 80041aa:	bf00      	nop
 80041ac:	080040f1 	.word	0x080040f1
 80041b0:	20000348 	.word	0x20000348

080041b4 <_fwalk_sglue>:
 80041b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041b8:	4607      	mov	r7, r0
 80041ba:	4688      	mov	r8, r1
 80041bc:	4614      	mov	r4, r2
 80041be:	2600      	movs	r6, #0
 80041c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80041c4:	f1b9 0901 	subs.w	r9, r9, #1
 80041c8:	d505      	bpl.n	80041d6 <_fwalk_sglue+0x22>
 80041ca:	6824      	ldr	r4, [r4, #0]
 80041cc:	2c00      	cmp	r4, #0
 80041ce:	d1f7      	bne.n	80041c0 <_fwalk_sglue+0xc>
 80041d0:	4630      	mov	r0, r6
 80041d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041d6:	89ab      	ldrh	r3, [r5, #12]
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d907      	bls.n	80041ec <_fwalk_sglue+0x38>
 80041dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80041e0:	3301      	adds	r3, #1
 80041e2:	d003      	beq.n	80041ec <_fwalk_sglue+0x38>
 80041e4:	4629      	mov	r1, r5
 80041e6:	4638      	mov	r0, r7
 80041e8:	47c0      	blx	r8
 80041ea:	4306      	orrs	r6, r0
 80041ec:	3568      	adds	r5, #104	; 0x68
 80041ee:	e7e9      	b.n	80041c4 <_fwalk_sglue+0x10>

080041f0 <iprintf>:
 80041f0:	b40f      	push	{r0, r1, r2, r3}
 80041f2:	b507      	push	{r0, r1, r2, lr}
 80041f4:	4906      	ldr	r1, [pc, #24]	; (8004210 <iprintf+0x20>)
 80041f6:	ab04      	add	r3, sp, #16
 80041f8:	6808      	ldr	r0, [r1, #0]
 80041fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80041fe:	6881      	ldr	r1, [r0, #8]
 8004200:	9301      	str	r3, [sp, #4]
 8004202:	f000 f9e7 	bl	80045d4 <_vfiprintf_r>
 8004206:	b003      	add	sp, #12
 8004208:	f85d eb04 	ldr.w	lr, [sp], #4
 800420c:	b004      	add	sp, #16
 800420e:	4770      	bx	lr
 8004210:	20000064 	.word	0x20000064

08004214 <__sread>:
 8004214:	b510      	push	{r4, lr}
 8004216:	460c      	mov	r4, r1
 8004218:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800421c:	f000 f868 	bl	80042f0 <_read_r>
 8004220:	2800      	cmp	r0, #0
 8004222:	bfab      	itete	ge
 8004224:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004226:	89a3      	ldrhlt	r3, [r4, #12]
 8004228:	181b      	addge	r3, r3, r0
 800422a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800422e:	bfac      	ite	ge
 8004230:	6563      	strge	r3, [r4, #84]	; 0x54
 8004232:	81a3      	strhlt	r3, [r4, #12]
 8004234:	bd10      	pop	{r4, pc}

08004236 <__swrite>:
 8004236:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800423a:	461f      	mov	r7, r3
 800423c:	898b      	ldrh	r3, [r1, #12]
 800423e:	05db      	lsls	r3, r3, #23
 8004240:	4605      	mov	r5, r0
 8004242:	460c      	mov	r4, r1
 8004244:	4616      	mov	r6, r2
 8004246:	d505      	bpl.n	8004254 <__swrite+0x1e>
 8004248:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800424c:	2302      	movs	r3, #2
 800424e:	2200      	movs	r2, #0
 8004250:	f000 f83c 	bl	80042cc <_lseek_r>
 8004254:	89a3      	ldrh	r3, [r4, #12]
 8004256:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800425a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800425e:	81a3      	strh	r3, [r4, #12]
 8004260:	4632      	mov	r2, r6
 8004262:	463b      	mov	r3, r7
 8004264:	4628      	mov	r0, r5
 8004266:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800426a:	f000 b853 	b.w	8004314 <_write_r>

0800426e <__sseek>:
 800426e:	b510      	push	{r4, lr}
 8004270:	460c      	mov	r4, r1
 8004272:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004276:	f000 f829 	bl	80042cc <_lseek_r>
 800427a:	1c43      	adds	r3, r0, #1
 800427c:	89a3      	ldrh	r3, [r4, #12]
 800427e:	bf15      	itete	ne
 8004280:	6560      	strne	r0, [r4, #84]	; 0x54
 8004282:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004286:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800428a:	81a3      	strheq	r3, [r4, #12]
 800428c:	bf18      	it	ne
 800428e:	81a3      	strhne	r3, [r4, #12]
 8004290:	bd10      	pop	{r4, pc}

08004292 <__sclose>:
 8004292:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004296:	f000 b809 	b.w	80042ac <_close_r>

0800429a <memset>:
 800429a:	4402      	add	r2, r0
 800429c:	4603      	mov	r3, r0
 800429e:	4293      	cmp	r3, r2
 80042a0:	d100      	bne.n	80042a4 <memset+0xa>
 80042a2:	4770      	bx	lr
 80042a4:	f803 1b01 	strb.w	r1, [r3], #1
 80042a8:	e7f9      	b.n	800429e <memset+0x4>
	...

080042ac <_close_r>:
 80042ac:	b538      	push	{r3, r4, r5, lr}
 80042ae:	4d06      	ldr	r5, [pc, #24]	; (80042c8 <_close_r+0x1c>)
 80042b0:	2300      	movs	r3, #0
 80042b2:	4604      	mov	r4, r0
 80042b4:	4608      	mov	r0, r1
 80042b6:	602b      	str	r3, [r5, #0]
 80042b8:	f7fc fdcb 	bl	8000e52 <_close>
 80042bc:	1c43      	adds	r3, r0, #1
 80042be:	d102      	bne.n	80042c6 <_close_r+0x1a>
 80042c0:	682b      	ldr	r3, [r5, #0]
 80042c2:	b103      	cbz	r3, 80042c6 <_close_r+0x1a>
 80042c4:	6023      	str	r3, [r4, #0]
 80042c6:	bd38      	pop	{r3, r4, r5, pc}
 80042c8:	2000034c 	.word	0x2000034c

080042cc <_lseek_r>:
 80042cc:	b538      	push	{r3, r4, r5, lr}
 80042ce:	4d07      	ldr	r5, [pc, #28]	; (80042ec <_lseek_r+0x20>)
 80042d0:	4604      	mov	r4, r0
 80042d2:	4608      	mov	r0, r1
 80042d4:	4611      	mov	r1, r2
 80042d6:	2200      	movs	r2, #0
 80042d8:	602a      	str	r2, [r5, #0]
 80042da:	461a      	mov	r2, r3
 80042dc:	f7fc fde0 	bl	8000ea0 <_lseek>
 80042e0:	1c43      	adds	r3, r0, #1
 80042e2:	d102      	bne.n	80042ea <_lseek_r+0x1e>
 80042e4:	682b      	ldr	r3, [r5, #0]
 80042e6:	b103      	cbz	r3, 80042ea <_lseek_r+0x1e>
 80042e8:	6023      	str	r3, [r4, #0]
 80042ea:	bd38      	pop	{r3, r4, r5, pc}
 80042ec:	2000034c 	.word	0x2000034c

080042f0 <_read_r>:
 80042f0:	b538      	push	{r3, r4, r5, lr}
 80042f2:	4d07      	ldr	r5, [pc, #28]	; (8004310 <_read_r+0x20>)
 80042f4:	4604      	mov	r4, r0
 80042f6:	4608      	mov	r0, r1
 80042f8:	4611      	mov	r1, r2
 80042fa:	2200      	movs	r2, #0
 80042fc:	602a      	str	r2, [r5, #0]
 80042fe:	461a      	mov	r2, r3
 8004300:	f7fc fd6e 	bl	8000de0 <_read>
 8004304:	1c43      	adds	r3, r0, #1
 8004306:	d102      	bne.n	800430e <_read_r+0x1e>
 8004308:	682b      	ldr	r3, [r5, #0]
 800430a:	b103      	cbz	r3, 800430e <_read_r+0x1e>
 800430c:	6023      	str	r3, [r4, #0]
 800430e:	bd38      	pop	{r3, r4, r5, pc}
 8004310:	2000034c 	.word	0x2000034c

08004314 <_write_r>:
 8004314:	b538      	push	{r3, r4, r5, lr}
 8004316:	4d07      	ldr	r5, [pc, #28]	; (8004334 <_write_r+0x20>)
 8004318:	4604      	mov	r4, r0
 800431a:	4608      	mov	r0, r1
 800431c:	4611      	mov	r1, r2
 800431e:	2200      	movs	r2, #0
 8004320:	602a      	str	r2, [r5, #0]
 8004322:	461a      	mov	r2, r3
 8004324:	f7fc fd79 	bl	8000e1a <_write>
 8004328:	1c43      	adds	r3, r0, #1
 800432a:	d102      	bne.n	8004332 <_write_r+0x1e>
 800432c:	682b      	ldr	r3, [r5, #0]
 800432e:	b103      	cbz	r3, 8004332 <_write_r+0x1e>
 8004330:	6023      	str	r3, [r4, #0]
 8004332:	bd38      	pop	{r3, r4, r5, pc}
 8004334:	2000034c 	.word	0x2000034c

08004338 <__errno>:
 8004338:	4b01      	ldr	r3, [pc, #4]	; (8004340 <__errno+0x8>)
 800433a:	6818      	ldr	r0, [r3, #0]
 800433c:	4770      	bx	lr
 800433e:	bf00      	nop
 8004340:	20000064 	.word	0x20000064

08004344 <__libc_init_array>:
 8004344:	b570      	push	{r4, r5, r6, lr}
 8004346:	4d0d      	ldr	r5, [pc, #52]	; (800437c <__libc_init_array+0x38>)
 8004348:	4c0d      	ldr	r4, [pc, #52]	; (8004380 <__libc_init_array+0x3c>)
 800434a:	1b64      	subs	r4, r4, r5
 800434c:	10a4      	asrs	r4, r4, #2
 800434e:	2600      	movs	r6, #0
 8004350:	42a6      	cmp	r6, r4
 8004352:	d109      	bne.n	8004368 <__libc_init_array+0x24>
 8004354:	4d0b      	ldr	r5, [pc, #44]	; (8004384 <__libc_init_array+0x40>)
 8004356:	4c0c      	ldr	r4, [pc, #48]	; (8004388 <__libc_init_array+0x44>)
 8004358:	f000 fdbe 	bl	8004ed8 <_init>
 800435c:	1b64      	subs	r4, r4, r5
 800435e:	10a4      	asrs	r4, r4, #2
 8004360:	2600      	movs	r6, #0
 8004362:	42a6      	cmp	r6, r4
 8004364:	d105      	bne.n	8004372 <__libc_init_array+0x2e>
 8004366:	bd70      	pop	{r4, r5, r6, pc}
 8004368:	f855 3b04 	ldr.w	r3, [r5], #4
 800436c:	4798      	blx	r3
 800436e:	3601      	adds	r6, #1
 8004370:	e7ee      	b.n	8004350 <__libc_init_array+0xc>
 8004372:	f855 3b04 	ldr.w	r3, [r5], #4
 8004376:	4798      	blx	r3
 8004378:	3601      	adds	r6, #1
 800437a:	e7f2      	b.n	8004362 <__libc_init_array+0x1e>
 800437c:	08004f5c 	.word	0x08004f5c
 8004380:	08004f5c 	.word	0x08004f5c
 8004384:	08004f5c 	.word	0x08004f5c
 8004388:	08004f60 	.word	0x08004f60

0800438c <__retarget_lock_acquire_recursive>:
 800438c:	4770      	bx	lr

0800438e <__retarget_lock_release_recursive>:
 800438e:	4770      	bx	lr

08004390 <_free_r>:
 8004390:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004392:	2900      	cmp	r1, #0
 8004394:	d044      	beq.n	8004420 <_free_r+0x90>
 8004396:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800439a:	9001      	str	r0, [sp, #4]
 800439c:	2b00      	cmp	r3, #0
 800439e:	f1a1 0404 	sub.w	r4, r1, #4
 80043a2:	bfb8      	it	lt
 80043a4:	18e4      	addlt	r4, r4, r3
 80043a6:	f000 f8df 	bl	8004568 <__malloc_lock>
 80043aa:	4a1e      	ldr	r2, [pc, #120]	; (8004424 <_free_r+0x94>)
 80043ac:	9801      	ldr	r0, [sp, #4]
 80043ae:	6813      	ldr	r3, [r2, #0]
 80043b0:	b933      	cbnz	r3, 80043c0 <_free_r+0x30>
 80043b2:	6063      	str	r3, [r4, #4]
 80043b4:	6014      	str	r4, [r2, #0]
 80043b6:	b003      	add	sp, #12
 80043b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80043bc:	f000 b8da 	b.w	8004574 <__malloc_unlock>
 80043c0:	42a3      	cmp	r3, r4
 80043c2:	d908      	bls.n	80043d6 <_free_r+0x46>
 80043c4:	6825      	ldr	r5, [r4, #0]
 80043c6:	1961      	adds	r1, r4, r5
 80043c8:	428b      	cmp	r3, r1
 80043ca:	bf01      	itttt	eq
 80043cc:	6819      	ldreq	r1, [r3, #0]
 80043ce:	685b      	ldreq	r3, [r3, #4]
 80043d0:	1949      	addeq	r1, r1, r5
 80043d2:	6021      	streq	r1, [r4, #0]
 80043d4:	e7ed      	b.n	80043b2 <_free_r+0x22>
 80043d6:	461a      	mov	r2, r3
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	b10b      	cbz	r3, 80043e0 <_free_r+0x50>
 80043dc:	42a3      	cmp	r3, r4
 80043de:	d9fa      	bls.n	80043d6 <_free_r+0x46>
 80043e0:	6811      	ldr	r1, [r2, #0]
 80043e2:	1855      	adds	r5, r2, r1
 80043e4:	42a5      	cmp	r5, r4
 80043e6:	d10b      	bne.n	8004400 <_free_r+0x70>
 80043e8:	6824      	ldr	r4, [r4, #0]
 80043ea:	4421      	add	r1, r4
 80043ec:	1854      	adds	r4, r2, r1
 80043ee:	42a3      	cmp	r3, r4
 80043f0:	6011      	str	r1, [r2, #0]
 80043f2:	d1e0      	bne.n	80043b6 <_free_r+0x26>
 80043f4:	681c      	ldr	r4, [r3, #0]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	6053      	str	r3, [r2, #4]
 80043fa:	440c      	add	r4, r1
 80043fc:	6014      	str	r4, [r2, #0]
 80043fe:	e7da      	b.n	80043b6 <_free_r+0x26>
 8004400:	d902      	bls.n	8004408 <_free_r+0x78>
 8004402:	230c      	movs	r3, #12
 8004404:	6003      	str	r3, [r0, #0]
 8004406:	e7d6      	b.n	80043b6 <_free_r+0x26>
 8004408:	6825      	ldr	r5, [r4, #0]
 800440a:	1961      	adds	r1, r4, r5
 800440c:	428b      	cmp	r3, r1
 800440e:	bf04      	itt	eq
 8004410:	6819      	ldreq	r1, [r3, #0]
 8004412:	685b      	ldreq	r3, [r3, #4]
 8004414:	6063      	str	r3, [r4, #4]
 8004416:	bf04      	itt	eq
 8004418:	1949      	addeq	r1, r1, r5
 800441a:	6021      	streq	r1, [r4, #0]
 800441c:	6054      	str	r4, [r2, #4]
 800441e:	e7ca      	b.n	80043b6 <_free_r+0x26>
 8004420:	b003      	add	sp, #12
 8004422:	bd30      	pop	{r4, r5, pc}
 8004424:	20000354 	.word	0x20000354

08004428 <sbrk_aligned>:
 8004428:	b570      	push	{r4, r5, r6, lr}
 800442a:	4e0e      	ldr	r6, [pc, #56]	; (8004464 <sbrk_aligned+0x3c>)
 800442c:	460c      	mov	r4, r1
 800442e:	6831      	ldr	r1, [r6, #0]
 8004430:	4605      	mov	r5, r0
 8004432:	b911      	cbnz	r1, 800443a <sbrk_aligned+0x12>
 8004434:	f000 fcbc 	bl	8004db0 <_sbrk_r>
 8004438:	6030      	str	r0, [r6, #0]
 800443a:	4621      	mov	r1, r4
 800443c:	4628      	mov	r0, r5
 800443e:	f000 fcb7 	bl	8004db0 <_sbrk_r>
 8004442:	1c43      	adds	r3, r0, #1
 8004444:	d00a      	beq.n	800445c <sbrk_aligned+0x34>
 8004446:	1cc4      	adds	r4, r0, #3
 8004448:	f024 0403 	bic.w	r4, r4, #3
 800444c:	42a0      	cmp	r0, r4
 800444e:	d007      	beq.n	8004460 <sbrk_aligned+0x38>
 8004450:	1a21      	subs	r1, r4, r0
 8004452:	4628      	mov	r0, r5
 8004454:	f000 fcac 	bl	8004db0 <_sbrk_r>
 8004458:	3001      	adds	r0, #1
 800445a:	d101      	bne.n	8004460 <sbrk_aligned+0x38>
 800445c:	f04f 34ff 	mov.w	r4, #4294967295
 8004460:	4620      	mov	r0, r4
 8004462:	bd70      	pop	{r4, r5, r6, pc}
 8004464:	20000358 	.word	0x20000358

08004468 <_malloc_r>:
 8004468:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800446c:	1ccd      	adds	r5, r1, #3
 800446e:	f025 0503 	bic.w	r5, r5, #3
 8004472:	3508      	adds	r5, #8
 8004474:	2d0c      	cmp	r5, #12
 8004476:	bf38      	it	cc
 8004478:	250c      	movcc	r5, #12
 800447a:	2d00      	cmp	r5, #0
 800447c:	4607      	mov	r7, r0
 800447e:	db01      	blt.n	8004484 <_malloc_r+0x1c>
 8004480:	42a9      	cmp	r1, r5
 8004482:	d905      	bls.n	8004490 <_malloc_r+0x28>
 8004484:	230c      	movs	r3, #12
 8004486:	603b      	str	r3, [r7, #0]
 8004488:	2600      	movs	r6, #0
 800448a:	4630      	mov	r0, r6
 800448c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004490:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004564 <_malloc_r+0xfc>
 8004494:	f000 f868 	bl	8004568 <__malloc_lock>
 8004498:	f8d8 3000 	ldr.w	r3, [r8]
 800449c:	461c      	mov	r4, r3
 800449e:	bb5c      	cbnz	r4, 80044f8 <_malloc_r+0x90>
 80044a0:	4629      	mov	r1, r5
 80044a2:	4638      	mov	r0, r7
 80044a4:	f7ff ffc0 	bl	8004428 <sbrk_aligned>
 80044a8:	1c43      	adds	r3, r0, #1
 80044aa:	4604      	mov	r4, r0
 80044ac:	d155      	bne.n	800455a <_malloc_r+0xf2>
 80044ae:	f8d8 4000 	ldr.w	r4, [r8]
 80044b2:	4626      	mov	r6, r4
 80044b4:	2e00      	cmp	r6, #0
 80044b6:	d145      	bne.n	8004544 <_malloc_r+0xdc>
 80044b8:	2c00      	cmp	r4, #0
 80044ba:	d048      	beq.n	800454e <_malloc_r+0xe6>
 80044bc:	6823      	ldr	r3, [r4, #0]
 80044be:	4631      	mov	r1, r6
 80044c0:	4638      	mov	r0, r7
 80044c2:	eb04 0903 	add.w	r9, r4, r3
 80044c6:	f000 fc73 	bl	8004db0 <_sbrk_r>
 80044ca:	4581      	cmp	r9, r0
 80044cc:	d13f      	bne.n	800454e <_malloc_r+0xe6>
 80044ce:	6821      	ldr	r1, [r4, #0]
 80044d0:	1a6d      	subs	r5, r5, r1
 80044d2:	4629      	mov	r1, r5
 80044d4:	4638      	mov	r0, r7
 80044d6:	f7ff ffa7 	bl	8004428 <sbrk_aligned>
 80044da:	3001      	adds	r0, #1
 80044dc:	d037      	beq.n	800454e <_malloc_r+0xe6>
 80044de:	6823      	ldr	r3, [r4, #0]
 80044e0:	442b      	add	r3, r5
 80044e2:	6023      	str	r3, [r4, #0]
 80044e4:	f8d8 3000 	ldr.w	r3, [r8]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d038      	beq.n	800455e <_malloc_r+0xf6>
 80044ec:	685a      	ldr	r2, [r3, #4]
 80044ee:	42a2      	cmp	r2, r4
 80044f0:	d12b      	bne.n	800454a <_malloc_r+0xe2>
 80044f2:	2200      	movs	r2, #0
 80044f4:	605a      	str	r2, [r3, #4]
 80044f6:	e00f      	b.n	8004518 <_malloc_r+0xb0>
 80044f8:	6822      	ldr	r2, [r4, #0]
 80044fa:	1b52      	subs	r2, r2, r5
 80044fc:	d41f      	bmi.n	800453e <_malloc_r+0xd6>
 80044fe:	2a0b      	cmp	r2, #11
 8004500:	d917      	bls.n	8004532 <_malloc_r+0xca>
 8004502:	1961      	adds	r1, r4, r5
 8004504:	42a3      	cmp	r3, r4
 8004506:	6025      	str	r5, [r4, #0]
 8004508:	bf18      	it	ne
 800450a:	6059      	strne	r1, [r3, #4]
 800450c:	6863      	ldr	r3, [r4, #4]
 800450e:	bf08      	it	eq
 8004510:	f8c8 1000 	streq.w	r1, [r8]
 8004514:	5162      	str	r2, [r4, r5]
 8004516:	604b      	str	r3, [r1, #4]
 8004518:	4638      	mov	r0, r7
 800451a:	f104 060b 	add.w	r6, r4, #11
 800451e:	f000 f829 	bl	8004574 <__malloc_unlock>
 8004522:	f026 0607 	bic.w	r6, r6, #7
 8004526:	1d23      	adds	r3, r4, #4
 8004528:	1af2      	subs	r2, r6, r3
 800452a:	d0ae      	beq.n	800448a <_malloc_r+0x22>
 800452c:	1b9b      	subs	r3, r3, r6
 800452e:	50a3      	str	r3, [r4, r2]
 8004530:	e7ab      	b.n	800448a <_malloc_r+0x22>
 8004532:	42a3      	cmp	r3, r4
 8004534:	6862      	ldr	r2, [r4, #4]
 8004536:	d1dd      	bne.n	80044f4 <_malloc_r+0x8c>
 8004538:	f8c8 2000 	str.w	r2, [r8]
 800453c:	e7ec      	b.n	8004518 <_malloc_r+0xb0>
 800453e:	4623      	mov	r3, r4
 8004540:	6864      	ldr	r4, [r4, #4]
 8004542:	e7ac      	b.n	800449e <_malloc_r+0x36>
 8004544:	4634      	mov	r4, r6
 8004546:	6876      	ldr	r6, [r6, #4]
 8004548:	e7b4      	b.n	80044b4 <_malloc_r+0x4c>
 800454a:	4613      	mov	r3, r2
 800454c:	e7cc      	b.n	80044e8 <_malloc_r+0x80>
 800454e:	230c      	movs	r3, #12
 8004550:	603b      	str	r3, [r7, #0]
 8004552:	4638      	mov	r0, r7
 8004554:	f000 f80e 	bl	8004574 <__malloc_unlock>
 8004558:	e797      	b.n	800448a <_malloc_r+0x22>
 800455a:	6025      	str	r5, [r4, #0]
 800455c:	e7dc      	b.n	8004518 <_malloc_r+0xb0>
 800455e:	605b      	str	r3, [r3, #4]
 8004560:	deff      	udf	#255	; 0xff
 8004562:	bf00      	nop
 8004564:	20000354 	.word	0x20000354

08004568 <__malloc_lock>:
 8004568:	4801      	ldr	r0, [pc, #4]	; (8004570 <__malloc_lock+0x8>)
 800456a:	f7ff bf0f 	b.w	800438c <__retarget_lock_acquire_recursive>
 800456e:	bf00      	nop
 8004570:	20000350 	.word	0x20000350

08004574 <__malloc_unlock>:
 8004574:	4801      	ldr	r0, [pc, #4]	; (800457c <__malloc_unlock+0x8>)
 8004576:	f7ff bf0a 	b.w	800438e <__retarget_lock_release_recursive>
 800457a:	bf00      	nop
 800457c:	20000350 	.word	0x20000350

08004580 <__sfputc_r>:
 8004580:	6893      	ldr	r3, [r2, #8]
 8004582:	3b01      	subs	r3, #1
 8004584:	2b00      	cmp	r3, #0
 8004586:	b410      	push	{r4}
 8004588:	6093      	str	r3, [r2, #8]
 800458a:	da08      	bge.n	800459e <__sfputc_r+0x1e>
 800458c:	6994      	ldr	r4, [r2, #24]
 800458e:	42a3      	cmp	r3, r4
 8004590:	db01      	blt.n	8004596 <__sfputc_r+0x16>
 8004592:	290a      	cmp	r1, #10
 8004594:	d103      	bne.n	800459e <__sfputc_r+0x1e>
 8004596:	f85d 4b04 	ldr.w	r4, [sp], #4
 800459a:	f000 bb73 	b.w	8004c84 <__swbuf_r>
 800459e:	6813      	ldr	r3, [r2, #0]
 80045a0:	1c58      	adds	r0, r3, #1
 80045a2:	6010      	str	r0, [r2, #0]
 80045a4:	7019      	strb	r1, [r3, #0]
 80045a6:	4608      	mov	r0, r1
 80045a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80045ac:	4770      	bx	lr

080045ae <__sfputs_r>:
 80045ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045b0:	4606      	mov	r6, r0
 80045b2:	460f      	mov	r7, r1
 80045b4:	4614      	mov	r4, r2
 80045b6:	18d5      	adds	r5, r2, r3
 80045b8:	42ac      	cmp	r4, r5
 80045ba:	d101      	bne.n	80045c0 <__sfputs_r+0x12>
 80045bc:	2000      	movs	r0, #0
 80045be:	e007      	b.n	80045d0 <__sfputs_r+0x22>
 80045c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045c4:	463a      	mov	r2, r7
 80045c6:	4630      	mov	r0, r6
 80045c8:	f7ff ffda 	bl	8004580 <__sfputc_r>
 80045cc:	1c43      	adds	r3, r0, #1
 80045ce:	d1f3      	bne.n	80045b8 <__sfputs_r+0xa>
 80045d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080045d4 <_vfiprintf_r>:
 80045d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045d8:	460d      	mov	r5, r1
 80045da:	b09d      	sub	sp, #116	; 0x74
 80045dc:	4614      	mov	r4, r2
 80045de:	4698      	mov	r8, r3
 80045e0:	4606      	mov	r6, r0
 80045e2:	b118      	cbz	r0, 80045ec <_vfiprintf_r+0x18>
 80045e4:	6a03      	ldr	r3, [r0, #32]
 80045e6:	b90b      	cbnz	r3, 80045ec <_vfiprintf_r+0x18>
 80045e8:	f7ff fdcc 	bl	8004184 <__sinit>
 80045ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80045ee:	07d9      	lsls	r1, r3, #31
 80045f0:	d405      	bmi.n	80045fe <_vfiprintf_r+0x2a>
 80045f2:	89ab      	ldrh	r3, [r5, #12]
 80045f4:	059a      	lsls	r2, r3, #22
 80045f6:	d402      	bmi.n	80045fe <_vfiprintf_r+0x2a>
 80045f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80045fa:	f7ff fec7 	bl	800438c <__retarget_lock_acquire_recursive>
 80045fe:	89ab      	ldrh	r3, [r5, #12]
 8004600:	071b      	lsls	r3, r3, #28
 8004602:	d501      	bpl.n	8004608 <_vfiprintf_r+0x34>
 8004604:	692b      	ldr	r3, [r5, #16]
 8004606:	b99b      	cbnz	r3, 8004630 <_vfiprintf_r+0x5c>
 8004608:	4629      	mov	r1, r5
 800460a:	4630      	mov	r0, r6
 800460c:	f000 fb78 	bl	8004d00 <__swsetup_r>
 8004610:	b170      	cbz	r0, 8004630 <_vfiprintf_r+0x5c>
 8004612:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004614:	07dc      	lsls	r4, r3, #31
 8004616:	d504      	bpl.n	8004622 <_vfiprintf_r+0x4e>
 8004618:	f04f 30ff 	mov.w	r0, #4294967295
 800461c:	b01d      	add	sp, #116	; 0x74
 800461e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004622:	89ab      	ldrh	r3, [r5, #12]
 8004624:	0598      	lsls	r0, r3, #22
 8004626:	d4f7      	bmi.n	8004618 <_vfiprintf_r+0x44>
 8004628:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800462a:	f7ff feb0 	bl	800438e <__retarget_lock_release_recursive>
 800462e:	e7f3      	b.n	8004618 <_vfiprintf_r+0x44>
 8004630:	2300      	movs	r3, #0
 8004632:	9309      	str	r3, [sp, #36]	; 0x24
 8004634:	2320      	movs	r3, #32
 8004636:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800463a:	f8cd 800c 	str.w	r8, [sp, #12]
 800463e:	2330      	movs	r3, #48	; 0x30
 8004640:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80047f4 <_vfiprintf_r+0x220>
 8004644:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004648:	f04f 0901 	mov.w	r9, #1
 800464c:	4623      	mov	r3, r4
 800464e:	469a      	mov	sl, r3
 8004650:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004654:	b10a      	cbz	r2, 800465a <_vfiprintf_r+0x86>
 8004656:	2a25      	cmp	r2, #37	; 0x25
 8004658:	d1f9      	bne.n	800464e <_vfiprintf_r+0x7a>
 800465a:	ebba 0b04 	subs.w	fp, sl, r4
 800465e:	d00b      	beq.n	8004678 <_vfiprintf_r+0xa4>
 8004660:	465b      	mov	r3, fp
 8004662:	4622      	mov	r2, r4
 8004664:	4629      	mov	r1, r5
 8004666:	4630      	mov	r0, r6
 8004668:	f7ff ffa1 	bl	80045ae <__sfputs_r>
 800466c:	3001      	adds	r0, #1
 800466e:	f000 80a9 	beq.w	80047c4 <_vfiprintf_r+0x1f0>
 8004672:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004674:	445a      	add	r2, fp
 8004676:	9209      	str	r2, [sp, #36]	; 0x24
 8004678:	f89a 3000 	ldrb.w	r3, [sl]
 800467c:	2b00      	cmp	r3, #0
 800467e:	f000 80a1 	beq.w	80047c4 <_vfiprintf_r+0x1f0>
 8004682:	2300      	movs	r3, #0
 8004684:	f04f 32ff 	mov.w	r2, #4294967295
 8004688:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800468c:	f10a 0a01 	add.w	sl, sl, #1
 8004690:	9304      	str	r3, [sp, #16]
 8004692:	9307      	str	r3, [sp, #28]
 8004694:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004698:	931a      	str	r3, [sp, #104]	; 0x68
 800469a:	4654      	mov	r4, sl
 800469c:	2205      	movs	r2, #5
 800469e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046a2:	4854      	ldr	r0, [pc, #336]	; (80047f4 <_vfiprintf_r+0x220>)
 80046a4:	f7fb fd9c 	bl	80001e0 <memchr>
 80046a8:	9a04      	ldr	r2, [sp, #16]
 80046aa:	b9d8      	cbnz	r0, 80046e4 <_vfiprintf_r+0x110>
 80046ac:	06d1      	lsls	r1, r2, #27
 80046ae:	bf44      	itt	mi
 80046b0:	2320      	movmi	r3, #32
 80046b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80046b6:	0713      	lsls	r3, r2, #28
 80046b8:	bf44      	itt	mi
 80046ba:	232b      	movmi	r3, #43	; 0x2b
 80046bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80046c0:	f89a 3000 	ldrb.w	r3, [sl]
 80046c4:	2b2a      	cmp	r3, #42	; 0x2a
 80046c6:	d015      	beq.n	80046f4 <_vfiprintf_r+0x120>
 80046c8:	9a07      	ldr	r2, [sp, #28]
 80046ca:	4654      	mov	r4, sl
 80046cc:	2000      	movs	r0, #0
 80046ce:	f04f 0c0a 	mov.w	ip, #10
 80046d2:	4621      	mov	r1, r4
 80046d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80046d8:	3b30      	subs	r3, #48	; 0x30
 80046da:	2b09      	cmp	r3, #9
 80046dc:	d94d      	bls.n	800477a <_vfiprintf_r+0x1a6>
 80046de:	b1b0      	cbz	r0, 800470e <_vfiprintf_r+0x13a>
 80046e0:	9207      	str	r2, [sp, #28]
 80046e2:	e014      	b.n	800470e <_vfiprintf_r+0x13a>
 80046e4:	eba0 0308 	sub.w	r3, r0, r8
 80046e8:	fa09 f303 	lsl.w	r3, r9, r3
 80046ec:	4313      	orrs	r3, r2
 80046ee:	9304      	str	r3, [sp, #16]
 80046f0:	46a2      	mov	sl, r4
 80046f2:	e7d2      	b.n	800469a <_vfiprintf_r+0xc6>
 80046f4:	9b03      	ldr	r3, [sp, #12]
 80046f6:	1d19      	adds	r1, r3, #4
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	9103      	str	r1, [sp, #12]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	bfbb      	ittet	lt
 8004700:	425b      	neglt	r3, r3
 8004702:	f042 0202 	orrlt.w	r2, r2, #2
 8004706:	9307      	strge	r3, [sp, #28]
 8004708:	9307      	strlt	r3, [sp, #28]
 800470a:	bfb8      	it	lt
 800470c:	9204      	strlt	r2, [sp, #16]
 800470e:	7823      	ldrb	r3, [r4, #0]
 8004710:	2b2e      	cmp	r3, #46	; 0x2e
 8004712:	d10c      	bne.n	800472e <_vfiprintf_r+0x15a>
 8004714:	7863      	ldrb	r3, [r4, #1]
 8004716:	2b2a      	cmp	r3, #42	; 0x2a
 8004718:	d134      	bne.n	8004784 <_vfiprintf_r+0x1b0>
 800471a:	9b03      	ldr	r3, [sp, #12]
 800471c:	1d1a      	adds	r2, r3, #4
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	9203      	str	r2, [sp, #12]
 8004722:	2b00      	cmp	r3, #0
 8004724:	bfb8      	it	lt
 8004726:	f04f 33ff 	movlt.w	r3, #4294967295
 800472a:	3402      	adds	r4, #2
 800472c:	9305      	str	r3, [sp, #20]
 800472e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004804 <_vfiprintf_r+0x230>
 8004732:	7821      	ldrb	r1, [r4, #0]
 8004734:	2203      	movs	r2, #3
 8004736:	4650      	mov	r0, sl
 8004738:	f7fb fd52 	bl	80001e0 <memchr>
 800473c:	b138      	cbz	r0, 800474e <_vfiprintf_r+0x17a>
 800473e:	9b04      	ldr	r3, [sp, #16]
 8004740:	eba0 000a 	sub.w	r0, r0, sl
 8004744:	2240      	movs	r2, #64	; 0x40
 8004746:	4082      	lsls	r2, r0
 8004748:	4313      	orrs	r3, r2
 800474a:	3401      	adds	r4, #1
 800474c:	9304      	str	r3, [sp, #16]
 800474e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004752:	4829      	ldr	r0, [pc, #164]	; (80047f8 <_vfiprintf_r+0x224>)
 8004754:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004758:	2206      	movs	r2, #6
 800475a:	f7fb fd41 	bl	80001e0 <memchr>
 800475e:	2800      	cmp	r0, #0
 8004760:	d03f      	beq.n	80047e2 <_vfiprintf_r+0x20e>
 8004762:	4b26      	ldr	r3, [pc, #152]	; (80047fc <_vfiprintf_r+0x228>)
 8004764:	bb1b      	cbnz	r3, 80047ae <_vfiprintf_r+0x1da>
 8004766:	9b03      	ldr	r3, [sp, #12]
 8004768:	3307      	adds	r3, #7
 800476a:	f023 0307 	bic.w	r3, r3, #7
 800476e:	3308      	adds	r3, #8
 8004770:	9303      	str	r3, [sp, #12]
 8004772:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004774:	443b      	add	r3, r7
 8004776:	9309      	str	r3, [sp, #36]	; 0x24
 8004778:	e768      	b.n	800464c <_vfiprintf_r+0x78>
 800477a:	fb0c 3202 	mla	r2, ip, r2, r3
 800477e:	460c      	mov	r4, r1
 8004780:	2001      	movs	r0, #1
 8004782:	e7a6      	b.n	80046d2 <_vfiprintf_r+0xfe>
 8004784:	2300      	movs	r3, #0
 8004786:	3401      	adds	r4, #1
 8004788:	9305      	str	r3, [sp, #20]
 800478a:	4619      	mov	r1, r3
 800478c:	f04f 0c0a 	mov.w	ip, #10
 8004790:	4620      	mov	r0, r4
 8004792:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004796:	3a30      	subs	r2, #48	; 0x30
 8004798:	2a09      	cmp	r2, #9
 800479a:	d903      	bls.n	80047a4 <_vfiprintf_r+0x1d0>
 800479c:	2b00      	cmp	r3, #0
 800479e:	d0c6      	beq.n	800472e <_vfiprintf_r+0x15a>
 80047a0:	9105      	str	r1, [sp, #20]
 80047a2:	e7c4      	b.n	800472e <_vfiprintf_r+0x15a>
 80047a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80047a8:	4604      	mov	r4, r0
 80047aa:	2301      	movs	r3, #1
 80047ac:	e7f0      	b.n	8004790 <_vfiprintf_r+0x1bc>
 80047ae:	ab03      	add	r3, sp, #12
 80047b0:	9300      	str	r3, [sp, #0]
 80047b2:	462a      	mov	r2, r5
 80047b4:	4b12      	ldr	r3, [pc, #72]	; (8004800 <_vfiprintf_r+0x22c>)
 80047b6:	a904      	add	r1, sp, #16
 80047b8:	4630      	mov	r0, r6
 80047ba:	f3af 8000 	nop.w
 80047be:	4607      	mov	r7, r0
 80047c0:	1c78      	adds	r0, r7, #1
 80047c2:	d1d6      	bne.n	8004772 <_vfiprintf_r+0x19e>
 80047c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80047c6:	07d9      	lsls	r1, r3, #31
 80047c8:	d405      	bmi.n	80047d6 <_vfiprintf_r+0x202>
 80047ca:	89ab      	ldrh	r3, [r5, #12]
 80047cc:	059a      	lsls	r2, r3, #22
 80047ce:	d402      	bmi.n	80047d6 <_vfiprintf_r+0x202>
 80047d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80047d2:	f7ff fddc 	bl	800438e <__retarget_lock_release_recursive>
 80047d6:	89ab      	ldrh	r3, [r5, #12]
 80047d8:	065b      	lsls	r3, r3, #25
 80047da:	f53f af1d 	bmi.w	8004618 <_vfiprintf_r+0x44>
 80047de:	9809      	ldr	r0, [sp, #36]	; 0x24
 80047e0:	e71c      	b.n	800461c <_vfiprintf_r+0x48>
 80047e2:	ab03      	add	r3, sp, #12
 80047e4:	9300      	str	r3, [sp, #0]
 80047e6:	462a      	mov	r2, r5
 80047e8:	4b05      	ldr	r3, [pc, #20]	; (8004800 <_vfiprintf_r+0x22c>)
 80047ea:	a904      	add	r1, sp, #16
 80047ec:	4630      	mov	r0, r6
 80047ee:	f000 f879 	bl	80048e4 <_printf_i>
 80047f2:	e7e4      	b.n	80047be <_vfiprintf_r+0x1ea>
 80047f4:	08004f20 	.word	0x08004f20
 80047f8:	08004f2a 	.word	0x08004f2a
 80047fc:	00000000 	.word	0x00000000
 8004800:	080045af 	.word	0x080045af
 8004804:	08004f26 	.word	0x08004f26

08004808 <_printf_common>:
 8004808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800480c:	4616      	mov	r6, r2
 800480e:	4699      	mov	r9, r3
 8004810:	688a      	ldr	r2, [r1, #8]
 8004812:	690b      	ldr	r3, [r1, #16]
 8004814:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004818:	4293      	cmp	r3, r2
 800481a:	bfb8      	it	lt
 800481c:	4613      	movlt	r3, r2
 800481e:	6033      	str	r3, [r6, #0]
 8004820:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004824:	4607      	mov	r7, r0
 8004826:	460c      	mov	r4, r1
 8004828:	b10a      	cbz	r2, 800482e <_printf_common+0x26>
 800482a:	3301      	adds	r3, #1
 800482c:	6033      	str	r3, [r6, #0]
 800482e:	6823      	ldr	r3, [r4, #0]
 8004830:	0699      	lsls	r1, r3, #26
 8004832:	bf42      	ittt	mi
 8004834:	6833      	ldrmi	r3, [r6, #0]
 8004836:	3302      	addmi	r3, #2
 8004838:	6033      	strmi	r3, [r6, #0]
 800483a:	6825      	ldr	r5, [r4, #0]
 800483c:	f015 0506 	ands.w	r5, r5, #6
 8004840:	d106      	bne.n	8004850 <_printf_common+0x48>
 8004842:	f104 0a19 	add.w	sl, r4, #25
 8004846:	68e3      	ldr	r3, [r4, #12]
 8004848:	6832      	ldr	r2, [r6, #0]
 800484a:	1a9b      	subs	r3, r3, r2
 800484c:	42ab      	cmp	r3, r5
 800484e:	dc26      	bgt.n	800489e <_printf_common+0x96>
 8004850:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004854:	1e13      	subs	r3, r2, #0
 8004856:	6822      	ldr	r2, [r4, #0]
 8004858:	bf18      	it	ne
 800485a:	2301      	movne	r3, #1
 800485c:	0692      	lsls	r2, r2, #26
 800485e:	d42b      	bmi.n	80048b8 <_printf_common+0xb0>
 8004860:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004864:	4649      	mov	r1, r9
 8004866:	4638      	mov	r0, r7
 8004868:	47c0      	blx	r8
 800486a:	3001      	adds	r0, #1
 800486c:	d01e      	beq.n	80048ac <_printf_common+0xa4>
 800486e:	6823      	ldr	r3, [r4, #0]
 8004870:	6922      	ldr	r2, [r4, #16]
 8004872:	f003 0306 	and.w	r3, r3, #6
 8004876:	2b04      	cmp	r3, #4
 8004878:	bf02      	ittt	eq
 800487a:	68e5      	ldreq	r5, [r4, #12]
 800487c:	6833      	ldreq	r3, [r6, #0]
 800487e:	1aed      	subeq	r5, r5, r3
 8004880:	68a3      	ldr	r3, [r4, #8]
 8004882:	bf0c      	ite	eq
 8004884:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004888:	2500      	movne	r5, #0
 800488a:	4293      	cmp	r3, r2
 800488c:	bfc4      	itt	gt
 800488e:	1a9b      	subgt	r3, r3, r2
 8004890:	18ed      	addgt	r5, r5, r3
 8004892:	2600      	movs	r6, #0
 8004894:	341a      	adds	r4, #26
 8004896:	42b5      	cmp	r5, r6
 8004898:	d11a      	bne.n	80048d0 <_printf_common+0xc8>
 800489a:	2000      	movs	r0, #0
 800489c:	e008      	b.n	80048b0 <_printf_common+0xa8>
 800489e:	2301      	movs	r3, #1
 80048a0:	4652      	mov	r2, sl
 80048a2:	4649      	mov	r1, r9
 80048a4:	4638      	mov	r0, r7
 80048a6:	47c0      	blx	r8
 80048a8:	3001      	adds	r0, #1
 80048aa:	d103      	bne.n	80048b4 <_printf_common+0xac>
 80048ac:	f04f 30ff 	mov.w	r0, #4294967295
 80048b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048b4:	3501      	adds	r5, #1
 80048b6:	e7c6      	b.n	8004846 <_printf_common+0x3e>
 80048b8:	18e1      	adds	r1, r4, r3
 80048ba:	1c5a      	adds	r2, r3, #1
 80048bc:	2030      	movs	r0, #48	; 0x30
 80048be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80048c2:	4422      	add	r2, r4
 80048c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80048c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80048cc:	3302      	adds	r3, #2
 80048ce:	e7c7      	b.n	8004860 <_printf_common+0x58>
 80048d0:	2301      	movs	r3, #1
 80048d2:	4622      	mov	r2, r4
 80048d4:	4649      	mov	r1, r9
 80048d6:	4638      	mov	r0, r7
 80048d8:	47c0      	blx	r8
 80048da:	3001      	adds	r0, #1
 80048dc:	d0e6      	beq.n	80048ac <_printf_common+0xa4>
 80048de:	3601      	adds	r6, #1
 80048e0:	e7d9      	b.n	8004896 <_printf_common+0x8e>
	...

080048e4 <_printf_i>:
 80048e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048e8:	7e0f      	ldrb	r7, [r1, #24]
 80048ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80048ec:	2f78      	cmp	r7, #120	; 0x78
 80048ee:	4691      	mov	r9, r2
 80048f0:	4680      	mov	r8, r0
 80048f2:	460c      	mov	r4, r1
 80048f4:	469a      	mov	sl, r3
 80048f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80048fa:	d807      	bhi.n	800490c <_printf_i+0x28>
 80048fc:	2f62      	cmp	r7, #98	; 0x62
 80048fe:	d80a      	bhi.n	8004916 <_printf_i+0x32>
 8004900:	2f00      	cmp	r7, #0
 8004902:	f000 80d4 	beq.w	8004aae <_printf_i+0x1ca>
 8004906:	2f58      	cmp	r7, #88	; 0x58
 8004908:	f000 80c0 	beq.w	8004a8c <_printf_i+0x1a8>
 800490c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004910:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004914:	e03a      	b.n	800498c <_printf_i+0xa8>
 8004916:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800491a:	2b15      	cmp	r3, #21
 800491c:	d8f6      	bhi.n	800490c <_printf_i+0x28>
 800491e:	a101      	add	r1, pc, #4	; (adr r1, 8004924 <_printf_i+0x40>)
 8004920:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004924:	0800497d 	.word	0x0800497d
 8004928:	08004991 	.word	0x08004991
 800492c:	0800490d 	.word	0x0800490d
 8004930:	0800490d 	.word	0x0800490d
 8004934:	0800490d 	.word	0x0800490d
 8004938:	0800490d 	.word	0x0800490d
 800493c:	08004991 	.word	0x08004991
 8004940:	0800490d 	.word	0x0800490d
 8004944:	0800490d 	.word	0x0800490d
 8004948:	0800490d 	.word	0x0800490d
 800494c:	0800490d 	.word	0x0800490d
 8004950:	08004a95 	.word	0x08004a95
 8004954:	080049bd 	.word	0x080049bd
 8004958:	08004a4f 	.word	0x08004a4f
 800495c:	0800490d 	.word	0x0800490d
 8004960:	0800490d 	.word	0x0800490d
 8004964:	08004ab7 	.word	0x08004ab7
 8004968:	0800490d 	.word	0x0800490d
 800496c:	080049bd 	.word	0x080049bd
 8004970:	0800490d 	.word	0x0800490d
 8004974:	0800490d 	.word	0x0800490d
 8004978:	08004a57 	.word	0x08004a57
 800497c:	682b      	ldr	r3, [r5, #0]
 800497e:	1d1a      	adds	r2, r3, #4
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	602a      	str	r2, [r5, #0]
 8004984:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004988:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800498c:	2301      	movs	r3, #1
 800498e:	e09f      	b.n	8004ad0 <_printf_i+0x1ec>
 8004990:	6820      	ldr	r0, [r4, #0]
 8004992:	682b      	ldr	r3, [r5, #0]
 8004994:	0607      	lsls	r7, r0, #24
 8004996:	f103 0104 	add.w	r1, r3, #4
 800499a:	6029      	str	r1, [r5, #0]
 800499c:	d501      	bpl.n	80049a2 <_printf_i+0xbe>
 800499e:	681e      	ldr	r6, [r3, #0]
 80049a0:	e003      	b.n	80049aa <_printf_i+0xc6>
 80049a2:	0646      	lsls	r6, r0, #25
 80049a4:	d5fb      	bpl.n	800499e <_printf_i+0xba>
 80049a6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80049aa:	2e00      	cmp	r6, #0
 80049ac:	da03      	bge.n	80049b6 <_printf_i+0xd2>
 80049ae:	232d      	movs	r3, #45	; 0x2d
 80049b0:	4276      	negs	r6, r6
 80049b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049b6:	485a      	ldr	r0, [pc, #360]	; (8004b20 <_printf_i+0x23c>)
 80049b8:	230a      	movs	r3, #10
 80049ba:	e012      	b.n	80049e2 <_printf_i+0xfe>
 80049bc:	682b      	ldr	r3, [r5, #0]
 80049be:	6820      	ldr	r0, [r4, #0]
 80049c0:	1d19      	adds	r1, r3, #4
 80049c2:	6029      	str	r1, [r5, #0]
 80049c4:	0605      	lsls	r5, r0, #24
 80049c6:	d501      	bpl.n	80049cc <_printf_i+0xe8>
 80049c8:	681e      	ldr	r6, [r3, #0]
 80049ca:	e002      	b.n	80049d2 <_printf_i+0xee>
 80049cc:	0641      	lsls	r1, r0, #25
 80049ce:	d5fb      	bpl.n	80049c8 <_printf_i+0xe4>
 80049d0:	881e      	ldrh	r6, [r3, #0]
 80049d2:	4853      	ldr	r0, [pc, #332]	; (8004b20 <_printf_i+0x23c>)
 80049d4:	2f6f      	cmp	r7, #111	; 0x6f
 80049d6:	bf0c      	ite	eq
 80049d8:	2308      	moveq	r3, #8
 80049da:	230a      	movne	r3, #10
 80049dc:	2100      	movs	r1, #0
 80049de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80049e2:	6865      	ldr	r5, [r4, #4]
 80049e4:	60a5      	str	r5, [r4, #8]
 80049e6:	2d00      	cmp	r5, #0
 80049e8:	bfa2      	ittt	ge
 80049ea:	6821      	ldrge	r1, [r4, #0]
 80049ec:	f021 0104 	bicge.w	r1, r1, #4
 80049f0:	6021      	strge	r1, [r4, #0]
 80049f2:	b90e      	cbnz	r6, 80049f8 <_printf_i+0x114>
 80049f4:	2d00      	cmp	r5, #0
 80049f6:	d04b      	beq.n	8004a90 <_printf_i+0x1ac>
 80049f8:	4615      	mov	r5, r2
 80049fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80049fe:	fb03 6711 	mls	r7, r3, r1, r6
 8004a02:	5dc7      	ldrb	r7, [r0, r7]
 8004a04:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004a08:	4637      	mov	r7, r6
 8004a0a:	42bb      	cmp	r3, r7
 8004a0c:	460e      	mov	r6, r1
 8004a0e:	d9f4      	bls.n	80049fa <_printf_i+0x116>
 8004a10:	2b08      	cmp	r3, #8
 8004a12:	d10b      	bne.n	8004a2c <_printf_i+0x148>
 8004a14:	6823      	ldr	r3, [r4, #0]
 8004a16:	07de      	lsls	r6, r3, #31
 8004a18:	d508      	bpl.n	8004a2c <_printf_i+0x148>
 8004a1a:	6923      	ldr	r3, [r4, #16]
 8004a1c:	6861      	ldr	r1, [r4, #4]
 8004a1e:	4299      	cmp	r1, r3
 8004a20:	bfde      	ittt	le
 8004a22:	2330      	movle	r3, #48	; 0x30
 8004a24:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004a28:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004a2c:	1b52      	subs	r2, r2, r5
 8004a2e:	6122      	str	r2, [r4, #16]
 8004a30:	f8cd a000 	str.w	sl, [sp]
 8004a34:	464b      	mov	r3, r9
 8004a36:	aa03      	add	r2, sp, #12
 8004a38:	4621      	mov	r1, r4
 8004a3a:	4640      	mov	r0, r8
 8004a3c:	f7ff fee4 	bl	8004808 <_printf_common>
 8004a40:	3001      	adds	r0, #1
 8004a42:	d14a      	bne.n	8004ada <_printf_i+0x1f6>
 8004a44:	f04f 30ff 	mov.w	r0, #4294967295
 8004a48:	b004      	add	sp, #16
 8004a4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a4e:	6823      	ldr	r3, [r4, #0]
 8004a50:	f043 0320 	orr.w	r3, r3, #32
 8004a54:	6023      	str	r3, [r4, #0]
 8004a56:	4833      	ldr	r0, [pc, #204]	; (8004b24 <_printf_i+0x240>)
 8004a58:	2778      	movs	r7, #120	; 0x78
 8004a5a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004a5e:	6823      	ldr	r3, [r4, #0]
 8004a60:	6829      	ldr	r1, [r5, #0]
 8004a62:	061f      	lsls	r7, r3, #24
 8004a64:	f851 6b04 	ldr.w	r6, [r1], #4
 8004a68:	d402      	bmi.n	8004a70 <_printf_i+0x18c>
 8004a6a:	065f      	lsls	r7, r3, #25
 8004a6c:	bf48      	it	mi
 8004a6e:	b2b6      	uxthmi	r6, r6
 8004a70:	07df      	lsls	r7, r3, #31
 8004a72:	bf48      	it	mi
 8004a74:	f043 0320 	orrmi.w	r3, r3, #32
 8004a78:	6029      	str	r1, [r5, #0]
 8004a7a:	bf48      	it	mi
 8004a7c:	6023      	strmi	r3, [r4, #0]
 8004a7e:	b91e      	cbnz	r6, 8004a88 <_printf_i+0x1a4>
 8004a80:	6823      	ldr	r3, [r4, #0]
 8004a82:	f023 0320 	bic.w	r3, r3, #32
 8004a86:	6023      	str	r3, [r4, #0]
 8004a88:	2310      	movs	r3, #16
 8004a8a:	e7a7      	b.n	80049dc <_printf_i+0xf8>
 8004a8c:	4824      	ldr	r0, [pc, #144]	; (8004b20 <_printf_i+0x23c>)
 8004a8e:	e7e4      	b.n	8004a5a <_printf_i+0x176>
 8004a90:	4615      	mov	r5, r2
 8004a92:	e7bd      	b.n	8004a10 <_printf_i+0x12c>
 8004a94:	682b      	ldr	r3, [r5, #0]
 8004a96:	6826      	ldr	r6, [r4, #0]
 8004a98:	6961      	ldr	r1, [r4, #20]
 8004a9a:	1d18      	adds	r0, r3, #4
 8004a9c:	6028      	str	r0, [r5, #0]
 8004a9e:	0635      	lsls	r5, r6, #24
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	d501      	bpl.n	8004aa8 <_printf_i+0x1c4>
 8004aa4:	6019      	str	r1, [r3, #0]
 8004aa6:	e002      	b.n	8004aae <_printf_i+0x1ca>
 8004aa8:	0670      	lsls	r0, r6, #25
 8004aaa:	d5fb      	bpl.n	8004aa4 <_printf_i+0x1c0>
 8004aac:	8019      	strh	r1, [r3, #0]
 8004aae:	2300      	movs	r3, #0
 8004ab0:	6123      	str	r3, [r4, #16]
 8004ab2:	4615      	mov	r5, r2
 8004ab4:	e7bc      	b.n	8004a30 <_printf_i+0x14c>
 8004ab6:	682b      	ldr	r3, [r5, #0]
 8004ab8:	1d1a      	adds	r2, r3, #4
 8004aba:	602a      	str	r2, [r5, #0]
 8004abc:	681d      	ldr	r5, [r3, #0]
 8004abe:	6862      	ldr	r2, [r4, #4]
 8004ac0:	2100      	movs	r1, #0
 8004ac2:	4628      	mov	r0, r5
 8004ac4:	f7fb fb8c 	bl	80001e0 <memchr>
 8004ac8:	b108      	cbz	r0, 8004ace <_printf_i+0x1ea>
 8004aca:	1b40      	subs	r0, r0, r5
 8004acc:	6060      	str	r0, [r4, #4]
 8004ace:	6863      	ldr	r3, [r4, #4]
 8004ad0:	6123      	str	r3, [r4, #16]
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ad8:	e7aa      	b.n	8004a30 <_printf_i+0x14c>
 8004ada:	6923      	ldr	r3, [r4, #16]
 8004adc:	462a      	mov	r2, r5
 8004ade:	4649      	mov	r1, r9
 8004ae0:	4640      	mov	r0, r8
 8004ae2:	47d0      	blx	sl
 8004ae4:	3001      	adds	r0, #1
 8004ae6:	d0ad      	beq.n	8004a44 <_printf_i+0x160>
 8004ae8:	6823      	ldr	r3, [r4, #0]
 8004aea:	079b      	lsls	r3, r3, #30
 8004aec:	d413      	bmi.n	8004b16 <_printf_i+0x232>
 8004aee:	68e0      	ldr	r0, [r4, #12]
 8004af0:	9b03      	ldr	r3, [sp, #12]
 8004af2:	4298      	cmp	r0, r3
 8004af4:	bfb8      	it	lt
 8004af6:	4618      	movlt	r0, r3
 8004af8:	e7a6      	b.n	8004a48 <_printf_i+0x164>
 8004afa:	2301      	movs	r3, #1
 8004afc:	4632      	mov	r2, r6
 8004afe:	4649      	mov	r1, r9
 8004b00:	4640      	mov	r0, r8
 8004b02:	47d0      	blx	sl
 8004b04:	3001      	adds	r0, #1
 8004b06:	d09d      	beq.n	8004a44 <_printf_i+0x160>
 8004b08:	3501      	adds	r5, #1
 8004b0a:	68e3      	ldr	r3, [r4, #12]
 8004b0c:	9903      	ldr	r1, [sp, #12]
 8004b0e:	1a5b      	subs	r3, r3, r1
 8004b10:	42ab      	cmp	r3, r5
 8004b12:	dcf2      	bgt.n	8004afa <_printf_i+0x216>
 8004b14:	e7eb      	b.n	8004aee <_printf_i+0x20a>
 8004b16:	2500      	movs	r5, #0
 8004b18:	f104 0619 	add.w	r6, r4, #25
 8004b1c:	e7f5      	b.n	8004b0a <_printf_i+0x226>
 8004b1e:	bf00      	nop
 8004b20:	08004f31 	.word	0x08004f31
 8004b24:	08004f42 	.word	0x08004f42

08004b28 <__sflush_r>:
 8004b28:	898a      	ldrh	r2, [r1, #12]
 8004b2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b2e:	4605      	mov	r5, r0
 8004b30:	0710      	lsls	r0, r2, #28
 8004b32:	460c      	mov	r4, r1
 8004b34:	d458      	bmi.n	8004be8 <__sflush_r+0xc0>
 8004b36:	684b      	ldr	r3, [r1, #4]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	dc05      	bgt.n	8004b48 <__sflush_r+0x20>
 8004b3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	dc02      	bgt.n	8004b48 <__sflush_r+0x20>
 8004b42:	2000      	movs	r0, #0
 8004b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b4a:	2e00      	cmp	r6, #0
 8004b4c:	d0f9      	beq.n	8004b42 <__sflush_r+0x1a>
 8004b4e:	2300      	movs	r3, #0
 8004b50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004b54:	682f      	ldr	r7, [r5, #0]
 8004b56:	6a21      	ldr	r1, [r4, #32]
 8004b58:	602b      	str	r3, [r5, #0]
 8004b5a:	d032      	beq.n	8004bc2 <__sflush_r+0x9a>
 8004b5c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004b5e:	89a3      	ldrh	r3, [r4, #12]
 8004b60:	075a      	lsls	r2, r3, #29
 8004b62:	d505      	bpl.n	8004b70 <__sflush_r+0x48>
 8004b64:	6863      	ldr	r3, [r4, #4]
 8004b66:	1ac0      	subs	r0, r0, r3
 8004b68:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004b6a:	b10b      	cbz	r3, 8004b70 <__sflush_r+0x48>
 8004b6c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004b6e:	1ac0      	subs	r0, r0, r3
 8004b70:	2300      	movs	r3, #0
 8004b72:	4602      	mov	r2, r0
 8004b74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b76:	6a21      	ldr	r1, [r4, #32]
 8004b78:	4628      	mov	r0, r5
 8004b7a:	47b0      	blx	r6
 8004b7c:	1c43      	adds	r3, r0, #1
 8004b7e:	89a3      	ldrh	r3, [r4, #12]
 8004b80:	d106      	bne.n	8004b90 <__sflush_r+0x68>
 8004b82:	6829      	ldr	r1, [r5, #0]
 8004b84:	291d      	cmp	r1, #29
 8004b86:	d82b      	bhi.n	8004be0 <__sflush_r+0xb8>
 8004b88:	4a29      	ldr	r2, [pc, #164]	; (8004c30 <__sflush_r+0x108>)
 8004b8a:	410a      	asrs	r2, r1
 8004b8c:	07d6      	lsls	r6, r2, #31
 8004b8e:	d427      	bmi.n	8004be0 <__sflush_r+0xb8>
 8004b90:	2200      	movs	r2, #0
 8004b92:	6062      	str	r2, [r4, #4]
 8004b94:	04d9      	lsls	r1, r3, #19
 8004b96:	6922      	ldr	r2, [r4, #16]
 8004b98:	6022      	str	r2, [r4, #0]
 8004b9a:	d504      	bpl.n	8004ba6 <__sflush_r+0x7e>
 8004b9c:	1c42      	adds	r2, r0, #1
 8004b9e:	d101      	bne.n	8004ba4 <__sflush_r+0x7c>
 8004ba0:	682b      	ldr	r3, [r5, #0]
 8004ba2:	b903      	cbnz	r3, 8004ba6 <__sflush_r+0x7e>
 8004ba4:	6560      	str	r0, [r4, #84]	; 0x54
 8004ba6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ba8:	602f      	str	r7, [r5, #0]
 8004baa:	2900      	cmp	r1, #0
 8004bac:	d0c9      	beq.n	8004b42 <__sflush_r+0x1a>
 8004bae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004bb2:	4299      	cmp	r1, r3
 8004bb4:	d002      	beq.n	8004bbc <__sflush_r+0x94>
 8004bb6:	4628      	mov	r0, r5
 8004bb8:	f7ff fbea 	bl	8004390 <_free_r>
 8004bbc:	2000      	movs	r0, #0
 8004bbe:	6360      	str	r0, [r4, #52]	; 0x34
 8004bc0:	e7c0      	b.n	8004b44 <__sflush_r+0x1c>
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	4628      	mov	r0, r5
 8004bc6:	47b0      	blx	r6
 8004bc8:	1c41      	adds	r1, r0, #1
 8004bca:	d1c8      	bne.n	8004b5e <__sflush_r+0x36>
 8004bcc:	682b      	ldr	r3, [r5, #0]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d0c5      	beq.n	8004b5e <__sflush_r+0x36>
 8004bd2:	2b1d      	cmp	r3, #29
 8004bd4:	d001      	beq.n	8004bda <__sflush_r+0xb2>
 8004bd6:	2b16      	cmp	r3, #22
 8004bd8:	d101      	bne.n	8004bde <__sflush_r+0xb6>
 8004bda:	602f      	str	r7, [r5, #0]
 8004bdc:	e7b1      	b.n	8004b42 <__sflush_r+0x1a>
 8004bde:	89a3      	ldrh	r3, [r4, #12]
 8004be0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004be4:	81a3      	strh	r3, [r4, #12]
 8004be6:	e7ad      	b.n	8004b44 <__sflush_r+0x1c>
 8004be8:	690f      	ldr	r7, [r1, #16]
 8004bea:	2f00      	cmp	r7, #0
 8004bec:	d0a9      	beq.n	8004b42 <__sflush_r+0x1a>
 8004bee:	0793      	lsls	r3, r2, #30
 8004bf0:	680e      	ldr	r6, [r1, #0]
 8004bf2:	bf08      	it	eq
 8004bf4:	694b      	ldreq	r3, [r1, #20]
 8004bf6:	600f      	str	r7, [r1, #0]
 8004bf8:	bf18      	it	ne
 8004bfa:	2300      	movne	r3, #0
 8004bfc:	eba6 0807 	sub.w	r8, r6, r7
 8004c00:	608b      	str	r3, [r1, #8]
 8004c02:	f1b8 0f00 	cmp.w	r8, #0
 8004c06:	dd9c      	ble.n	8004b42 <__sflush_r+0x1a>
 8004c08:	6a21      	ldr	r1, [r4, #32]
 8004c0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004c0c:	4643      	mov	r3, r8
 8004c0e:	463a      	mov	r2, r7
 8004c10:	4628      	mov	r0, r5
 8004c12:	47b0      	blx	r6
 8004c14:	2800      	cmp	r0, #0
 8004c16:	dc06      	bgt.n	8004c26 <__sflush_r+0xfe>
 8004c18:	89a3      	ldrh	r3, [r4, #12]
 8004c1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c1e:	81a3      	strh	r3, [r4, #12]
 8004c20:	f04f 30ff 	mov.w	r0, #4294967295
 8004c24:	e78e      	b.n	8004b44 <__sflush_r+0x1c>
 8004c26:	4407      	add	r7, r0
 8004c28:	eba8 0800 	sub.w	r8, r8, r0
 8004c2c:	e7e9      	b.n	8004c02 <__sflush_r+0xda>
 8004c2e:	bf00      	nop
 8004c30:	dfbffffe 	.word	0xdfbffffe

08004c34 <_fflush_r>:
 8004c34:	b538      	push	{r3, r4, r5, lr}
 8004c36:	690b      	ldr	r3, [r1, #16]
 8004c38:	4605      	mov	r5, r0
 8004c3a:	460c      	mov	r4, r1
 8004c3c:	b913      	cbnz	r3, 8004c44 <_fflush_r+0x10>
 8004c3e:	2500      	movs	r5, #0
 8004c40:	4628      	mov	r0, r5
 8004c42:	bd38      	pop	{r3, r4, r5, pc}
 8004c44:	b118      	cbz	r0, 8004c4e <_fflush_r+0x1a>
 8004c46:	6a03      	ldr	r3, [r0, #32]
 8004c48:	b90b      	cbnz	r3, 8004c4e <_fflush_r+0x1a>
 8004c4a:	f7ff fa9b 	bl	8004184 <__sinit>
 8004c4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d0f3      	beq.n	8004c3e <_fflush_r+0xa>
 8004c56:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004c58:	07d0      	lsls	r0, r2, #31
 8004c5a:	d404      	bmi.n	8004c66 <_fflush_r+0x32>
 8004c5c:	0599      	lsls	r1, r3, #22
 8004c5e:	d402      	bmi.n	8004c66 <_fflush_r+0x32>
 8004c60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c62:	f7ff fb93 	bl	800438c <__retarget_lock_acquire_recursive>
 8004c66:	4628      	mov	r0, r5
 8004c68:	4621      	mov	r1, r4
 8004c6a:	f7ff ff5d 	bl	8004b28 <__sflush_r>
 8004c6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c70:	07da      	lsls	r2, r3, #31
 8004c72:	4605      	mov	r5, r0
 8004c74:	d4e4      	bmi.n	8004c40 <_fflush_r+0xc>
 8004c76:	89a3      	ldrh	r3, [r4, #12]
 8004c78:	059b      	lsls	r3, r3, #22
 8004c7a:	d4e1      	bmi.n	8004c40 <_fflush_r+0xc>
 8004c7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c7e:	f7ff fb86 	bl	800438e <__retarget_lock_release_recursive>
 8004c82:	e7dd      	b.n	8004c40 <_fflush_r+0xc>

08004c84 <__swbuf_r>:
 8004c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c86:	460e      	mov	r6, r1
 8004c88:	4614      	mov	r4, r2
 8004c8a:	4605      	mov	r5, r0
 8004c8c:	b118      	cbz	r0, 8004c96 <__swbuf_r+0x12>
 8004c8e:	6a03      	ldr	r3, [r0, #32]
 8004c90:	b90b      	cbnz	r3, 8004c96 <__swbuf_r+0x12>
 8004c92:	f7ff fa77 	bl	8004184 <__sinit>
 8004c96:	69a3      	ldr	r3, [r4, #24]
 8004c98:	60a3      	str	r3, [r4, #8]
 8004c9a:	89a3      	ldrh	r3, [r4, #12]
 8004c9c:	071a      	lsls	r2, r3, #28
 8004c9e:	d525      	bpl.n	8004cec <__swbuf_r+0x68>
 8004ca0:	6923      	ldr	r3, [r4, #16]
 8004ca2:	b31b      	cbz	r3, 8004cec <__swbuf_r+0x68>
 8004ca4:	6823      	ldr	r3, [r4, #0]
 8004ca6:	6922      	ldr	r2, [r4, #16]
 8004ca8:	1a98      	subs	r0, r3, r2
 8004caa:	6963      	ldr	r3, [r4, #20]
 8004cac:	b2f6      	uxtb	r6, r6
 8004cae:	4283      	cmp	r3, r0
 8004cb0:	4637      	mov	r7, r6
 8004cb2:	dc04      	bgt.n	8004cbe <__swbuf_r+0x3a>
 8004cb4:	4621      	mov	r1, r4
 8004cb6:	4628      	mov	r0, r5
 8004cb8:	f7ff ffbc 	bl	8004c34 <_fflush_r>
 8004cbc:	b9e0      	cbnz	r0, 8004cf8 <__swbuf_r+0x74>
 8004cbe:	68a3      	ldr	r3, [r4, #8]
 8004cc0:	3b01      	subs	r3, #1
 8004cc2:	60a3      	str	r3, [r4, #8]
 8004cc4:	6823      	ldr	r3, [r4, #0]
 8004cc6:	1c5a      	adds	r2, r3, #1
 8004cc8:	6022      	str	r2, [r4, #0]
 8004cca:	701e      	strb	r6, [r3, #0]
 8004ccc:	6962      	ldr	r2, [r4, #20]
 8004cce:	1c43      	adds	r3, r0, #1
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d004      	beq.n	8004cde <__swbuf_r+0x5a>
 8004cd4:	89a3      	ldrh	r3, [r4, #12]
 8004cd6:	07db      	lsls	r3, r3, #31
 8004cd8:	d506      	bpl.n	8004ce8 <__swbuf_r+0x64>
 8004cda:	2e0a      	cmp	r6, #10
 8004cdc:	d104      	bne.n	8004ce8 <__swbuf_r+0x64>
 8004cde:	4621      	mov	r1, r4
 8004ce0:	4628      	mov	r0, r5
 8004ce2:	f7ff ffa7 	bl	8004c34 <_fflush_r>
 8004ce6:	b938      	cbnz	r0, 8004cf8 <__swbuf_r+0x74>
 8004ce8:	4638      	mov	r0, r7
 8004cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cec:	4621      	mov	r1, r4
 8004cee:	4628      	mov	r0, r5
 8004cf0:	f000 f806 	bl	8004d00 <__swsetup_r>
 8004cf4:	2800      	cmp	r0, #0
 8004cf6:	d0d5      	beq.n	8004ca4 <__swbuf_r+0x20>
 8004cf8:	f04f 37ff 	mov.w	r7, #4294967295
 8004cfc:	e7f4      	b.n	8004ce8 <__swbuf_r+0x64>
	...

08004d00 <__swsetup_r>:
 8004d00:	b538      	push	{r3, r4, r5, lr}
 8004d02:	4b2a      	ldr	r3, [pc, #168]	; (8004dac <__swsetup_r+0xac>)
 8004d04:	4605      	mov	r5, r0
 8004d06:	6818      	ldr	r0, [r3, #0]
 8004d08:	460c      	mov	r4, r1
 8004d0a:	b118      	cbz	r0, 8004d14 <__swsetup_r+0x14>
 8004d0c:	6a03      	ldr	r3, [r0, #32]
 8004d0e:	b90b      	cbnz	r3, 8004d14 <__swsetup_r+0x14>
 8004d10:	f7ff fa38 	bl	8004184 <__sinit>
 8004d14:	89a3      	ldrh	r3, [r4, #12]
 8004d16:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004d1a:	0718      	lsls	r0, r3, #28
 8004d1c:	d422      	bmi.n	8004d64 <__swsetup_r+0x64>
 8004d1e:	06d9      	lsls	r1, r3, #27
 8004d20:	d407      	bmi.n	8004d32 <__swsetup_r+0x32>
 8004d22:	2309      	movs	r3, #9
 8004d24:	602b      	str	r3, [r5, #0]
 8004d26:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004d2a:	81a3      	strh	r3, [r4, #12]
 8004d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d30:	e034      	b.n	8004d9c <__swsetup_r+0x9c>
 8004d32:	0758      	lsls	r0, r3, #29
 8004d34:	d512      	bpl.n	8004d5c <__swsetup_r+0x5c>
 8004d36:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d38:	b141      	cbz	r1, 8004d4c <__swsetup_r+0x4c>
 8004d3a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d3e:	4299      	cmp	r1, r3
 8004d40:	d002      	beq.n	8004d48 <__swsetup_r+0x48>
 8004d42:	4628      	mov	r0, r5
 8004d44:	f7ff fb24 	bl	8004390 <_free_r>
 8004d48:	2300      	movs	r3, #0
 8004d4a:	6363      	str	r3, [r4, #52]	; 0x34
 8004d4c:	89a3      	ldrh	r3, [r4, #12]
 8004d4e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004d52:	81a3      	strh	r3, [r4, #12]
 8004d54:	2300      	movs	r3, #0
 8004d56:	6063      	str	r3, [r4, #4]
 8004d58:	6923      	ldr	r3, [r4, #16]
 8004d5a:	6023      	str	r3, [r4, #0]
 8004d5c:	89a3      	ldrh	r3, [r4, #12]
 8004d5e:	f043 0308 	orr.w	r3, r3, #8
 8004d62:	81a3      	strh	r3, [r4, #12]
 8004d64:	6923      	ldr	r3, [r4, #16]
 8004d66:	b94b      	cbnz	r3, 8004d7c <__swsetup_r+0x7c>
 8004d68:	89a3      	ldrh	r3, [r4, #12]
 8004d6a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004d6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d72:	d003      	beq.n	8004d7c <__swsetup_r+0x7c>
 8004d74:	4621      	mov	r1, r4
 8004d76:	4628      	mov	r0, r5
 8004d78:	f000 f850 	bl	8004e1c <__smakebuf_r>
 8004d7c:	89a0      	ldrh	r0, [r4, #12]
 8004d7e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004d82:	f010 0301 	ands.w	r3, r0, #1
 8004d86:	d00a      	beq.n	8004d9e <__swsetup_r+0x9e>
 8004d88:	2300      	movs	r3, #0
 8004d8a:	60a3      	str	r3, [r4, #8]
 8004d8c:	6963      	ldr	r3, [r4, #20]
 8004d8e:	425b      	negs	r3, r3
 8004d90:	61a3      	str	r3, [r4, #24]
 8004d92:	6923      	ldr	r3, [r4, #16]
 8004d94:	b943      	cbnz	r3, 8004da8 <__swsetup_r+0xa8>
 8004d96:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004d9a:	d1c4      	bne.n	8004d26 <__swsetup_r+0x26>
 8004d9c:	bd38      	pop	{r3, r4, r5, pc}
 8004d9e:	0781      	lsls	r1, r0, #30
 8004da0:	bf58      	it	pl
 8004da2:	6963      	ldrpl	r3, [r4, #20]
 8004da4:	60a3      	str	r3, [r4, #8]
 8004da6:	e7f4      	b.n	8004d92 <__swsetup_r+0x92>
 8004da8:	2000      	movs	r0, #0
 8004daa:	e7f7      	b.n	8004d9c <__swsetup_r+0x9c>
 8004dac:	20000064 	.word	0x20000064

08004db0 <_sbrk_r>:
 8004db0:	b538      	push	{r3, r4, r5, lr}
 8004db2:	4d06      	ldr	r5, [pc, #24]	; (8004dcc <_sbrk_r+0x1c>)
 8004db4:	2300      	movs	r3, #0
 8004db6:	4604      	mov	r4, r0
 8004db8:	4608      	mov	r0, r1
 8004dba:	602b      	str	r3, [r5, #0]
 8004dbc:	f7fc f87e 	bl	8000ebc <_sbrk>
 8004dc0:	1c43      	adds	r3, r0, #1
 8004dc2:	d102      	bne.n	8004dca <_sbrk_r+0x1a>
 8004dc4:	682b      	ldr	r3, [r5, #0]
 8004dc6:	b103      	cbz	r3, 8004dca <_sbrk_r+0x1a>
 8004dc8:	6023      	str	r3, [r4, #0]
 8004dca:	bd38      	pop	{r3, r4, r5, pc}
 8004dcc:	2000034c 	.word	0x2000034c

08004dd0 <__swhatbuf_r>:
 8004dd0:	b570      	push	{r4, r5, r6, lr}
 8004dd2:	460c      	mov	r4, r1
 8004dd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dd8:	2900      	cmp	r1, #0
 8004dda:	b096      	sub	sp, #88	; 0x58
 8004ddc:	4615      	mov	r5, r2
 8004dde:	461e      	mov	r6, r3
 8004de0:	da0d      	bge.n	8004dfe <__swhatbuf_r+0x2e>
 8004de2:	89a3      	ldrh	r3, [r4, #12]
 8004de4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004de8:	f04f 0100 	mov.w	r1, #0
 8004dec:	bf0c      	ite	eq
 8004dee:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004df2:	2340      	movne	r3, #64	; 0x40
 8004df4:	2000      	movs	r0, #0
 8004df6:	6031      	str	r1, [r6, #0]
 8004df8:	602b      	str	r3, [r5, #0]
 8004dfa:	b016      	add	sp, #88	; 0x58
 8004dfc:	bd70      	pop	{r4, r5, r6, pc}
 8004dfe:	466a      	mov	r2, sp
 8004e00:	f000 f848 	bl	8004e94 <_fstat_r>
 8004e04:	2800      	cmp	r0, #0
 8004e06:	dbec      	blt.n	8004de2 <__swhatbuf_r+0x12>
 8004e08:	9901      	ldr	r1, [sp, #4]
 8004e0a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004e0e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004e12:	4259      	negs	r1, r3
 8004e14:	4159      	adcs	r1, r3
 8004e16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e1a:	e7eb      	b.n	8004df4 <__swhatbuf_r+0x24>

08004e1c <__smakebuf_r>:
 8004e1c:	898b      	ldrh	r3, [r1, #12]
 8004e1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004e20:	079d      	lsls	r5, r3, #30
 8004e22:	4606      	mov	r6, r0
 8004e24:	460c      	mov	r4, r1
 8004e26:	d507      	bpl.n	8004e38 <__smakebuf_r+0x1c>
 8004e28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004e2c:	6023      	str	r3, [r4, #0]
 8004e2e:	6123      	str	r3, [r4, #16]
 8004e30:	2301      	movs	r3, #1
 8004e32:	6163      	str	r3, [r4, #20]
 8004e34:	b002      	add	sp, #8
 8004e36:	bd70      	pop	{r4, r5, r6, pc}
 8004e38:	ab01      	add	r3, sp, #4
 8004e3a:	466a      	mov	r2, sp
 8004e3c:	f7ff ffc8 	bl	8004dd0 <__swhatbuf_r>
 8004e40:	9900      	ldr	r1, [sp, #0]
 8004e42:	4605      	mov	r5, r0
 8004e44:	4630      	mov	r0, r6
 8004e46:	f7ff fb0f 	bl	8004468 <_malloc_r>
 8004e4a:	b948      	cbnz	r0, 8004e60 <__smakebuf_r+0x44>
 8004e4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e50:	059a      	lsls	r2, r3, #22
 8004e52:	d4ef      	bmi.n	8004e34 <__smakebuf_r+0x18>
 8004e54:	f023 0303 	bic.w	r3, r3, #3
 8004e58:	f043 0302 	orr.w	r3, r3, #2
 8004e5c:	81a3      	strh	r3, [r4, #12]
 8004e5e:	e7e3      	b.n	8004e28 <__smakebuf_r+0xc>
 8004e60:	89a3      	ldrh	r3, [r4, #12]
 8004e62:	6020      	str	r0, [r4, #0]
 8004e64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e68:	81a3      	strh	r3, [r4, #12]
 8004e6a:	9b00      	ldr	r3, [sp, #0]
 8004e6c:	6163      	str	r3, [r4, #20]
 8004e6e:	9b01      	ldr	r3, [sp, #4]
 8004e70:	6120      	str	r0, [r4, #16]
 8004e72:	b15b      	cbz	r3, 8004e8c <__smakebuf_r+0x70>
 8004e74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e78:	4630      	mov	r0, r6
 8004e7a:	f000 f81d 	bl	8004eb8 <_isatty_r>
 8004e7e:	b128      	cbz	r0, 8004e8c <__smakebuf_r+0x70>
 8004e80:	89a3      	ldrh	r3, [r4, #12]
 8004e82:	f023 0303 	bic.w	r3, r3, #3
 8004e86:	f043 0301 	orr.w	r3, r3, #1
 8004e8a:	81a3      	strh	r3, [r4, #12]
 8004e8c:	89a3      	ldrh	r3, [r4, #12]
 8004e8e:	431d      	orrs	r5, r3
 8004e90:	81a5      	strh	r5, [r4, #12]
 8004e92:	e7cf      	b.n	8004e34 <__smakebuf_r+0x18>

08004e94 <_fstat_r>:
 8004e94:	b538      	push	{r3, r4, r5, lr}
 8004e96:	4d07      	ldr	r5, [pc, #28]	; (8004eb4 <_fstat_r+0x20>)
 8004e98:	2300      	movs	r3, #0
 8004e9a:	4604      	mov	r4, r0
 8004e9c:	4608      	mov	r0, r1
 8004e9e:	4611      	mov	r1, r2
 8004ea0:	602b      	str	r3, [r5, #0]
 8004ea2:	f7fb ffe2 	bl	8000e6a <_fstat>
 8004ea6:	1c43      	adds	r3, r0, #1
 8004ea8:	d102      	bne.n	8004eb0 <_fstat_r+0x1c>
 8004eaa:	682b      	ldr	r3, [r5, #0]
 8004eac:	b103      	cbz	r3, 8004eb0 <_fstat_r+0x1c>
 8004eae:	6023      	str	r3, [r4, #0]
 8004eb0:	bd38      	pop	{r3, r4, r5, pc}
 8004eb2:	bf00      	nop
 8004eb4:	2000034c 	.word	0x2000034c

08004eb8 <_isatty_r>:
 8004eb8:	b538      	push	{r3, r4, r5, lr}
 8004eba:	4d06      	ldr	r5, [pc, #24]	; (8004ed4 <_isatty_r+0x1c>)
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	4604      	mov	r4, r0
 8004ec0:	4608      	mov	r0, r1
 8004ec2:	602b      	str	r3, [r5, #0]
 8004ec4:	f7fb ffe1 	bl	8000e8a <_isatty>
 8004ec8:	1c43      	adds	r3, r0, #1
 8004eca:	d102      	bne.n	8004ed2 <_isatty_r+0x1a>
 8004ecc:	682b      	ldr	r3, [r5, #0]
 8004ece:	b103      	cbz	r3, 8004ed2 <_isatty_r+0x1a>
 8004ed0:	6023      	str	r3, [r4, #0]
 8004ed2:	bd38      	pop	{r3, r4, r5, pc}
 8004ed4:	2000034c 	.word	0x2000034c

08004ed8 <_init>:
 8004ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eda:	bf00      	nop
 8004edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ede:	bc08      	pop	{r3}
 8004ee0:	469e      	mov	lr, r3
 8004ee2:	4770      	bx	lr

08004ee4 <_fini>:
 8004ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ee6:	bf00      	nop
 8004ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eea:	bc08      	pop	{r3}
 8004eec:	469e      	mov	lr, r3
 8004eee:	4770      	bx	lr
