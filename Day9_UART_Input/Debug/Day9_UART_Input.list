
Day9_UART_Input.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ddc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d4  08003f7c  08003f7c  00013f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004150  08004150  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08004150  08004150  00014150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004158  08004158  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004158  08004158  00014158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800415c  0800415c  0001415c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004160  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  20000068  080041c8  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000021c  080041c8  0002021c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000806a  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000015cb  00000000  00000000  00028145  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006e0  00000000  00000000  00029710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000534  00000000  00000000  00029df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016249  00000000  00000000  0002a324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008911  00000000  00000000  0004056d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000873a6  00000000  00000000  00048e7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002698  00000000  00000000  000d0224  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000d28bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003f64 	.word	0x08003f64

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08003f64 	.word	0x08003f64

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <__io_putchar>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
int __io_putchar(int ch)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, &ch, 1, 10);
 8000584:	1d39      	adds	r1, r7, #4
 8000586:	230a      	movs	r3, #10
 8000588:	2201      	movs	r2, #1
 800058a:	4804      	ldr	r0, [pc, #16]	; (800059c <__io_putchar+0x20>)
 800058c:	f001 fac5 	bl	8001b1a <HAL_UART_Transmit>
	return ch;
 8000590:	687b      	ldr	r3, [r7, #4]
}
 8000592:	4618      	mov	r0, r3
 8000594:	3708      	adds	r7, #8
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	20000084 	.word	0x20000084

080005a0 <__io_getchar>:
int __io_getchar(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
	int ch;
	while(1)
	{
		if(HAL_UART_Receive(&huart2, &ch, 1, 10) == HAL_OK)
 80005a6:	1d39      	adds	r1, r7, #4
 80005a8:	230a      	movs	r3, #10
 80005aa:	2201      	movs	r2, #1
 80005ac:	4813      	ldr	r0, [pc, #76]	; (80005fc <__io_getchar+0x5c>)
 80005ae:	f001 fb46 	bl	8001c3e <HAL_UART_Receive>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d000      	beq.n	80005ba <__io_getchar+0x1a>
 80005b8:	e7f5      	b.n	80005a6 <__io_getchar+0x6>
		break;
 80005ba:	bf00      	nop
	}
	if (ch == '\b')
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	2b08      	cmp	r3, #8
 80005c0:	d106      	bne.n	80005d0 <__io_getchar+0x30>
	{
		HAL_UART_Transmit(&huart2, "\r", 3, 10); // \b \b : 총 세 글자이기때문에 3
 80005c2:	230a      	movs	r3, #10
 80005c4:	2203      	movs	r2, #3
 80005c6:	490e      	ldr	r1, [pc, #56]	; (8000600 <__io_getchar+0x60>)
 80005c8:	480c      	ldr	r0, [pc, #48]	; (80005fc <__io_getchar+0x5c>)
 80005ca:	f001 faa6 	bl	8001b1a <HAL_UART_Transmit>
 80005ce:	e00f      	b.n	80005f0 <__io_getchar+0x50>
	}

	else if(ch == '\n')
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	2b0a      	cmp	r3, #10
 80005d4:	d106      	bne.n	80005e4 <__io_getchar+0x44>
	{
		HAL_UART_Transmit(&huart2, "\r\n", 2, 10);
 80005d6:	230a      	movs	r3, #10
 80005d8:	2202      	movs	r2, #2
 80005da:	490a      	ldr	r1, [pc, #40]	; (8000604 <__io_getchar+0x64>)
 80005dc:	4807      	ldr	r0, [pc, #28]	; (80005fc <__io_getchar+0x5c>)
 80005de:	f001 fa9c 	bl	8001b1a <HAL_UART_Transmit>
 80005e2:	e005      	b.n	80005f0 <__io_getchar+0x50>
	}
	else HAL_UART_Transmit(&huart2, &ch, 1, 10);
 80005e4:	1d39      	adds	r1, r7, #4
 80005e6:	230a      	movs	r3, #10
 80005e8:	2201      	movs	r2, #1
 80005ea:	4804      	ldr	r0, [pc, #16]	; (80005fc <__io_getchar+0x5c>)
 80005ec:	f001 fa95 	bl	8001b1a <HAL_UART_Transmit>

	return ch;
 80005f0:	687b      	ldr	r3, [r7, #4]
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	3708      	adds	r7, #8
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	20000084 	.word	0x20000084
 8000600:	08003f7c 	.word	0x08003f7c
 8000604:	08003f80 	.word	0x08003f80

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060e:	f000 faa9 	bl	8000b64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000612:	f000 f827 	bl	8000664 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000616:	f000 f8b7 	bl	8000788 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800061a:	f000 f88b 	bl	8000734 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Program Start! \r\n");
 800061e:	480c      	ldr	r0, [pc, #48]	; (8000650 <main+0x48>)
 8000620:	f001 ffa8 	bl	8002574 <puts>
  setbuf(stdin, NULL);
 8000624:	4b0b      	ldr	r3, [pc, #44]	; (8000654 <main+0x4c>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	685b      	ldr	r3, [r3, #4]
 800062a:	2100      	movs	r1, #0
 800062c:	4618      	mov	r0, r3
 800062e:	f001 ffbb 	bl	80025a8 <setbuf>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	int i;
	printf("Press numeric key and [Enter]....\r\n"); // 숫자 키를 입력하라고 프롬포트 내보내 줌.
 8000632:	4809      	ldr	r0, [pc, #36]	; (8000658 <main+0x50>)
 8000634:	f001 ff9e 	bl	8002574 <puts>
	scanf("%d", &i);
 8000638:	1d3b      	adds	r3, r7, #4
 800063a:	4619      	mov	r1, r3
 800063c:	4807      	ldr	r0, [pc, #28]	; (800065c <main+0x54>)
 800063e:	f001 ffa1 	bl	8002584 <iscanf>
	printf("You Pressed [%d] value.\r\n", i);
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	4619      	mov	r1, r3
 8000646:	4806      	ldr	r0, [pc, #24]	; (8000660 <main+0x58>)
 8000648:	f001 ff2e 	bl	80024a8 <iprintf>
  {
 800064c:	e7f1      	b.n	8000632 <main+0x2a>
 800064e:	bf00      	nop
 8000650:	08003f84 	.word	0x08003f84
 8000654:	20000064 	.word	0x20000064
 8000658:	08003f98 	.word	0x08003f98
 800065c:	08003fbc 	.word	0x08003fbc
 8000660:	08003fc0 	.word	0x08003fc0

08000664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b094      	sub	sp, #80	; 0x50
 8000668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066a:	f107 0320 	add.w	r3, r7, #32
 800066e:	2230      	movs	r2, #48	; 0x30
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f002 f926 	bl	80028c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000678:	f107 030c 	add.w	r3, r7, #12
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000688:	2300      	movs	r3, #0
 800068a:	60bb      	str	r3, [r7, #8]
 800068c:	4b27      	ldr	r3, [pc, #156]	; (800072c <SystemClock_Config+0xc8>)
 800068e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000690:	4a26      	ldr	r2, [pc, #152]	; (800072c <SystemClock_Config+0xc8>)
 8000692:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000696:	6413      	str	r3, [r2, #64]	; 0x40
 8000698:	4b24      	ldr	r3, [pc, #144]	; (800072c <SystemClock_Config+0xc8>)
 800069a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800069c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a0:	60bb      	str	r3, [r7, #8]
 80006a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a4:	2300      	movs	r3, #0
 80006a6:	607b      	str	r3, [r7, #4]
 80006a8:	4b21      	ldr	r3, [pc, #132]	; (8000730 <SystemClock_Config+0xcc>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a20      	ldr	r2, [pc, #128]	; (8000730 <SystemClock_Config+0xcc>)
 80006ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006b2:	6013      	str	r3, [r2, #0]
 80006b4:	4b1e      	ldr	r3, [pc, #120]	; (8000730 <SystemClock_Config+0xcc>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006c0:	2301      	movs	r3, #1
 80006c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006c4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ca:	2302      	movs	r3, #2
 80006cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006d4:	2304      	movs	r3, #4
 80006d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80006d8:	2364      	movs	r3, #100	; 0x64
 80006da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006dc:	2302      	movs	r3, #2
 80006de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006e0:	2304      	movs	r3, #4
 80006e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e4:	f107 0320 	add.w	r3, r7, #32
 80006e8:	4618      	mov	r0, r3
 80006ea:	f000 fd31 	bl	8001150 <HAL_RCC_OscConfig>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006f4:	f000 f8b6 	bl	8000864 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f8:	230f      	movs	r3, #15
 80006fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fc:	2302      	movs	r3, #2
 80006fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000708:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800070a:	2300      	movs	r3, #0
 800070c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800070e:	f107 030c 	add.w	r3, r7, #12
 8000712:	2103      	movs	r1, #3
 8000714:	4618      	mov	r0, r3
 8000716:	f000 ff93 	bl	8001640 <HAL_RCC_ClockConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000720:	f000 f8a0 	bl	8000864 <Error_Handler>
  }
}
 8000724:	bf00      	nop
 8000726:	3750      	adds	r7, #80	; 0x50
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40023800 	.word	0x40023800
 8000730:	40007000 	.word	0x40007000

08000734 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000738:	4b11      	ldr	r3, [pc, #68]	; (8000780 <MX_USART2_UART_Init+0x4c>)
 800073a:	4a12      	ldr	r2, [pc, #72]	; (8000784 <MX_USART2_UART_Init+0x50>)
 800073c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800073e:	4b10      	ldr	r3, [pc, #64]	; (8000780 <MX_USART2_UART_Init+0x4c>)
 8000740:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000744:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000746:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <MX_USART2_UART_Init+0x4c>)
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800074c:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <MX_USART2_UART_Init+0x4c>)
 800074e:	2200      	movs	r2, #0
 8000750:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000752:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <MX_USART2_UART_Init+0x4c>)
 8000754:	2200      	movs	r2, #0
 8000756:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000758:	4b09      	ldr	r3, [pc, #36]	; (8000780 <MX_USART2_UART_Init+0x4c>)
 800075a:	220c      	movs	r2, #12
 800075c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800075e:	4b08      	ldr	r3, [pc, #32]	; (8000780 <MX_USART2_UART_Init+0x4c>)
 8000760:	2200      	movs	r2, #0
 8000762:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000764:	4b06      	ldr	r3, [pc, #24]	; (8000780 <MX_USART2_UART_Init+0x4c>)
 8000766:	2200      	movs	r2, #0
 8000768:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800076a:	4805      	ldr	r0, [pc, #20]	; (8000780 <MX_USART2_UART_Init+0x4c>)
 800076c:	f001 f988 	bl	8001a80 <HAL_UART_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000776:	f000 f875 	bl	8000864 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20000084 	.word	0x20000084
 8000784:	40004400 	.word	0x40004400

08000788 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b08a      	sub	sp, #40	; 0x28
 800078c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078e:	f107 0314 	add.w	r3, r7, #20
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	60da      	str	r2, [r3, #12]
 800079c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	613b      	str	r3, [r7, #16]
 80007a2:	4b2d      	ldr	r3, [pc, #180]	; (8000858 <MX_GPIO_Init+0xd0>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a2c      	ldr	r2, [pc, #176]	; (8000858 <MX_GPIO_Init+0xd0>)
 80007a8:	f043 0304 	orr.w	r3, r3, #4
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b2a      	ldr	r3, [pc, #168]	; (8000858 <MX_GPIO_Init+0xd0>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0304 	and.w	r3, r3, #4
 80007b6:	613b      	str	r3, [r7, #16]
 80007b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	60fb      	str	r3, [r7, #12]
 80007be:	4b26      	ldr	r3, [pc, #152]	; (8000858 <MX_GPIO_Init+0xd0>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a25      	ldr	r2, [pc, #148]	; (8000858 <MX_GPIO_Init+0xd0>)
 80007c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b23      	ldr	r3, [pc, #140]	; (8000858 <MX_GPIO_Init+0xd0>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	60bb      	str	r3, [r7, #8]
 80007da:	4b1f      	ldr	r3, [pc, #124]	; (8000858 <MX_GPIO_Init+0xd0>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a1e      	ldr	r2, [pc, #120]	; (8000858 <MX_GPIO_Init+0xd0>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b1c      	ldr	r3, [pc, #112]	; (8000858 <MX_GPIO_Init+0xd0>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	607b      	str	r3, [r7, #4]
 80007f6:	4b18      	ldr	r3, [pc, #96]	; (8000858 <MX_GPIO_Init+0xd0>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a17      	ldr	r2, [pc, #92]	; (8000858 <MX_GPIO_Init+0xd0>)
 80007fc:	f043 0302 	orr.w	r3, r3, #2
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b15      	ldr	r3, [pc, #84]	; (8000858 <MX_GPIO_Init+0xd0>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0302 	and.w	r3, r3, #2
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800080e:	2200      	movs	r2, #0
 8000810:	2120      	movs	r1, #32
 8000812:	4812      	ldr	r0, [pc, #72]	; (800085c <MX_GPIO_Init+0xd4>)
 8000814:	f000 fc82 	bl	800111c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000818:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800081c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800081e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000822:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000828:	f107 0314 	add.w	r3, r7, #20
 800082c:	4619      	mov	r1, r3
 800082e:	480c      	ldr	r0, [pc, #48]	; (8000860 <MX_GPIO_Init+0xd8>)
 8000830:	f000 faf0 	bl	8000e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000834:	2320      	movs	r3, #32
 8000836:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000838:	2301      	movs	r3, #1
 800083a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000840:	2300      	movs	r3, #0
 8000842:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000844:	f107 0314 	add.w	r3, r7, #20
 8000848:	4619      	mov	r1, r3
 800084a:	4804      	ldr	r0, [pc, #16]	; (800085c <MX_GPIO_Init+0xd4>)
 800084c:	f000 fae2 	bl	8000e14 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000850:	bf00      	nop
 8000852:	3728      	adds	r7, #40	; 0x28
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	40023800 	.word	0x40023800
 800085c:	40020000 	.word	0x40020000
 8000860:	40020800 	.word	0x40020800

08000864 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000868:	b672      	cpsid	i
}
 800086a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800086c:	e7fe      	b.n	800086c <Error_Handler+0x8>
	...

08000870 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	607b      	str	r3, [r7, #4]
 800087a:	4b10      	ldr	r3, [pc, #64]	; (80008bc <HAL_MspInit+0x4c>)
 800087c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800087e:	4a0f      	ldr	r2, [pc, #60]	; (80008bc <HAL_MspInit+0x4c>)
 8000880:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000884:	6453      	str	r3, [r2, #68]	; 0x44
 8000886:	4b0d      	ldr	r3, [pc, #52]	; (80008bc <HAL_MspInit+0x4c>)
 8000888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800088a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	603b      	str	r3, [r7, #0]
 8000896:	4b09      	ldr	r3, [pc, #36]	; (80008bc <HAL_MspInit+0x4c>)
 8000898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089a:	4a08      	ldr	r2, [pc, #32]	; (80008bc <HAL_MspInit+0x4c>)
 800089c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a0:	6413      	str	r3, [r2, #64]	; 0x40
 80008a2:	4b06      	ldr	r3, [pc, #24]	; (80008bc <HAL_MspInit+0x4c>)
 80008a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008aa:	603b      	str	r3, [r7, #0]
 80008ac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008ae:	2007      	movs	r0, #7
 80008b0:	f000 fa7c 	bl	8000dac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008b4:	bf00      	nop
 80008b6:	3708      	adds	r7, #8
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	40023800 	.word	0x40023800

080008c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08a      	sub	sp, #40	; 0x28
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c8:	f107 0314 	add.w	r3, r7, #20
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
 80008d2:	609a      	str	r2, [r3, #8]
 80008d4:	60da      	str	r2, [r3, #12]
 80008d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a19      	ldr	r2, [pc, #100]	; (8000944 <HAL_UART_MspInit+0x84>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d12b      	bne.n	800093a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	613b      	str	r3, [r7, #16]
 80008e6:	4b18      	ldr	r3, [pc, #96]	; (8000948 <HAL_UART_MspInit+0x88>)
 80008e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ea:	4a17      	ldr	r2, [pc, #92]	; (8000948 <HAL_UART_MspInit+0x88>)
 80008ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008f0:	6413      	str	r3, [r2, #64]	; 0x40
 80008f2:	4b15      	ldr	r3, [pc, #84]	; (8000948 <HAL_UART_MspInit+0x88>)
 80008f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008fa:	613b      	str	r3, [r7, #16]
 80008fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	60fb      	str	r3, [r7, #12]
 8000902:	4b11      	ldr	r3, [pc, #68]	; (8000948 <HAL_UART_MspInit+0x88>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a10      	ldr	r2, [pc, #64]	; (8000948 <HAL_UART_MspInit+0x88>)
 8000908:	f043 0301 	orr.w	r3, r3, #1
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <HAL_UART_MspInit+0x88>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800091a:	230c      	movs	r3, #12
 800091c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091e:	2302      	movs	r3, #2
 8000920:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000926:	2303      	movs	r3, #3
 8000928:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800092a:	2307      	movs	r3, #7
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092e:	f107 0314 	add.w	r3, r7, #20
 8000932:	4619      	mov	r1, r3
 8000934:	4805      	ldr	r0, [pc, #20]	; (800094c <HAL_UART_MspInit+0x8c>)
 8000936:	f000 fa6d 	bl	8000e14 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800093a:	bf00      	nop
 800093c:	3728      	adds	r7, #40	; 0x28
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40004400 	.word	0x40004400
 8000948:	40023800 	.word	0x40023800
 800094c:	40020000 	.word	0x40020000

08000950 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000954:	e7fe      	b.n	8000954 <NMI_Handler+0x4>

08000956 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800095a:	e7fe      	b.n	800095a <HardFault_Handler+0x4>

0800095c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000960:	e7fe      	b.n	8000960 <MemManage_Handler+0x4>

08000962 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000966:	e7fe      	b.n	8000966 <BusFault_Handler+0x4>

08000968 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800096c:	e7fe      	b.n	800096c <UsageFault_Handler+0x4>

0800096e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800096e:	b480      	push	{r7}
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000972:	bf00      	nop
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr

0800097c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr

0800098a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800098e:	bf00      	nop
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800099c:	f000 f934 	bl	8000c08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009a0:	bf00      	nop
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b086      	sub	sp, #24
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	60f8      	str	r0, [r7, #12]
 80009ac:	60b9      	str	r1, [r7, #8]
 80009ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009b0:	2300      	movs	r3, #0
 80009b2:	617b      	str	r3, [r7, #20]
 80009b4:	e00a      	b.n	80009cc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009b6:	f7ff fdf3 	bl	80005a0 <__io_getchar>
 80009ba:	4601      	mov	r1, r0
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	1c5a      	adds	r2, r3, #1
 80009c0:	60ba      	str	r2, [r7, #8]
 80009c2:	b2ca      	uxtb	r2, r1
 80009c4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	3301      	adds	r3, #1
 80009ca:	617b      	str	r3, [r7, #20]
 80009cc:	697a      	ldr	r2, [r7, #20]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	429a      	cmp	r2, r3
 80009d2:	dbf0      	blt.n	80009b6 <_read+0x12>
  }

  return len;
 80009d4:	687b      	ldr	r3, [r7, #4]
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3718      	adds	r7, #24
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}

080009de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009de:	b580      	push	{r7, lr}
 80009e0:	b086      	sub	sp, #24
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	60f8      	str	r0, [r7, #12]
 80009e6:	60b9      	str	r1, [r7, #8]
 80009e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ea:	2300      	movs	r3, #0
 80009ec:	617b      	str	r3, [r7, #20]
 80009ee:	e009      	b.n	8000a04 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	1c5a      	adds	r2, r3, #1
 80009f4:	60ba      	str	r2, [r7, #8]
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff fdbf 	bl	800057c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	3301      	adds	r3, #1
 8000a02:	617b      	str	r3, [r7, #20]
 8000a04:	697a      	ldr	r2, [r7, #20]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	dbf1      	blt.n	80009f0 <_write+0x12>
  }
  return len;
 8000a0c:	687b      	ldr	r3, [r7, #4]
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3718      	adds	r7, #24
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}

08000a16 <_close>:

int _close(int file)
{
 8000a16:	b480      	push	{r7}
 8000a18:	b083      	sub	sp, #12
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	370c      	adds	r7, #12
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr

08000a2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	b083      	sub	sp, #12
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	6078      	str	r0, [r7, #4]
 8000a36:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a3e:	605a      	str	r2, [r3, #4]
  return 0;
 8000a40:	2300      	movs	r3, #0
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr

08000a4e <_isatty>:

int _isatty(int file)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	b083      	sub	sp, #12
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a56:	2301      	movs	r3, #1
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	370c      	adds	r7, #12
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr

08000a64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	60f8      	str	r0, [r7, #12]
 8000a6c:	60b9      	str	r1, [r7, #8]
 8000a6e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a70:	2300      	movs	r3, #0
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3714      	adds	r7, #20
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
	...

08000a80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b086      	sub	sp, #24
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a88:	4a14      	ldr	r2, [pc, #80]	; (8000adc <_sbrk+0x5c>)
 8000a8a:	4b15      	ldr	r3, [pc, #84]	; (8000ae0 <_sbrk+0x60>)
 8000a8c:	1ad3      	subs	r3, r2, r3
 8000a8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a94:	4b13      	ldr	r3, [pc, #76]	; (8000ae4 <_sbrk+0x64>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d102      	bne.n	8000aa2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a9c:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <_sbrk+0x64>)
 8000a9e:	4a12      	ldr	r2, [pc, #72]	; (8000ae8 <_sbrk+0x68>)
 8000aa0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aa2:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <_sbrk+0x64>)
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	693a      	ldr	r2, [r7, #16]
 8000aac:	429a      	cmp	r2, r3
 8000aae:	d207      	bcs.n	8000ac0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ab0:	f001 ff56 	bl	8002960 <__errno>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	220c      	movs	r2, #12
 8000ab8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000aba:	f04f 33ff 	mov.w	r3, #4294967295
 8000abe:	e009      	b.n	8000ad4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ac0:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <_sbrk+0x64>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ac6:	4b07      	ldr	r3, [pc, #28]	; (8000ae4 <_sbrk+0x64>)
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4413      	add	r3, r2
 8000ace:	4a05      	ldr	r2, [pc, #20]	; (8000ae4 <_sbrk+0x64>)
 8000ad0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ad2:	68fb      	ldr	r3, [r7, #12]
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3718      	adds	r7, #24
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	20020000 	.word	0x20020000
 8000ae0:	00000400 	.word	0x00000400
 8000ae4:	200000c8 	.word	0x200000c8
 8000ae8:	20000220 	.word	0x20000220

08000aec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000af0:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <SystemInit+0x20>)
 8000af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000af6:	4a05      	ldr	r2, [pc, #20]	; (8000b0c <SystemInit+0x20>)
 8000af8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000afc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	e000ed00 	.word	0xe000ed00

08000b10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b48 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b14:	480d      	ldr	r0, [pc, #52]	; (8000b4c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b16:	490e      	ldr	r1, [pc, #56]	; (8000b50 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b18:	4a0e      	ldr	r2, [pc, #56]	; (8000b54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b1c:	e002      	b.n	8000b24 <LoopCopyDataInit>

08000b1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b22:	3304      	adds	r3, #4

08000b24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b28:	d3f9      	bcc.n	8000b1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b2a:	4a0b      	ldr	r2, [pc, #44]	; (8000b58 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b2c:	4c0b      	ldr	r4, [pc, #44]	; (8000b5c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b30:	e001      	b.n	8000b36 <LoopFillZerobss>

08000b32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b34:	3204      	adds	r2, #4

08000b36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b38:	d3fb      	bcc.n	8000b32 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b3a:	f7ff ffd7 	bl	8000aec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b3e:	f001 ff15 	bl	800296c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b42:	f7ff fd61 	bl	8000608 <main>
  bx  lr    
 8000b46:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b50:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000b54:	08004160 	.word	0x08004160
  ldr r2, =_sbss
 8000b58:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000b5c:	2000021c 	.word	0x2000021c

08000b60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b60:	e7fe      	b.n	8000b60 <ADC_IRQHandler>
	...

08000b64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b68:	4b0e      	ldr	r3, [pc, #56]	; (8000ba4 <HAL_Init+0x40>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a0d      	ldr	r2, [pc, #52]	; (8000ba4 <HAL_Init+0x40>)
 8000b6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b74:	4b0b      	ldr	r3, [pc, #44]	; (8000ba4 <HAL_Init+0x40>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a0a      	ldr	r2, [pc, #40]	; (8000ba4 <HAL_Init+0x40>)
 8000b7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b80:	4b08      	ldr	r3, [pc, #32]	; (8000ba4 <HAL_Init+0x40>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a07      	ldr	r2, [pc, #28]	; (8000ba4 <HAL_Init+0x40>)
 8000b86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b8c:	2003      	movs	r0, #3
 8000b8e:	f000 f90d 	bl	8000dac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b92:	2000      	movs	r0, #0
 8000b94:	f000 f808 	bl	8000ba8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b98:	f7ff fe6a 	bl	8000870 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b9c:	2300      	movs	r3, #0
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40023c00 	.word	0x40023c00

08000ba8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bb0:	4b12      	ldr	r3, [pc, #72]	; (8000bfc <HAL_InitTick+0x54>)
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	4b12      	ldr	r3, [pc, #72]	; (8000c00 <HAL_InitTick+0x58>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	4619      	mov	r1, r3
 8000bba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f000 f917 	bl	8000dfa <HAL_SYSTICK_Config>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	e00e      	b.n	8000bf4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	2b0f      	cmp	r3, #15
 8000bda:	d80a      	bhi.n	8000bf2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bdc:	2200      	movs	r2, #0
 8000bde:	6879      	ldr	r1, [r7, #4]
 8000be0:	f04f 30ff 	mov.w	r0, #4294967295
 8000be4:	f000 f8ed 	bl	8000dc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000be8:	4a06      	ldr	r2, [pc, #24]	; (8000c04 <HAL_InitTick+0x5c>)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	e000      	b.n	8000bf4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bf2:	2301      	movs	r3, #1
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3708      	adds	r7, #8
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	20000000 	.word	0x20000000
 8000c00:	20000008 	.word	0x20000008
 8000c04:	20000004 	.word	0x20000004

08000c08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c0c:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <HAL_IncTick+0x20>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	461a      	mov	r2, r3
 8000c12:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <HAL_IncTick+0x24>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4413      	add	r3, r2
 8000c18:	4a04      	ldr	r2, [pc, #16]	; (8000c2c <HAL_IncTick+0x24>)
 8000c1a:	6013      	str	r3, [r2, #0]
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	20000008 	.word	0x20000008
 8000c2c:	200000cc 	.word	0x200000cc

08000c30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  return uwTick;
 8000c34:	4b03      	ldr	r3, [pc, #12]	; (8000c44 <HAL_GetTick+0x14>)
 8000c36:	681b      	ldr	r3, [r3, #0]
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	200000cc 	.word	0x200000cc

08000c48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b085      	sub	sp, #20
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	f003 0307 	and.w	r3, r3, #7
 8000c56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c58:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <__NVIC_SetPriorityGrouping+0x44>)
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c5e:	68ba      	ldr	r2, [r7, #8]
 8000c60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c64:	4013      	ands	r3, r2
 8000c66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c7a:	4a04      	ldr	r2, [pc, #16]	; (8000c8c <__NVIC_SetPriorityGrouping+0x44>)
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	60d3      	str	r3, [r2, #12]
}
 8000c80:	bf00      	nop
 8000c82:	3714      	adds	r7, #20
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	e000ed00 	.word	0xe000ed00

08000c90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c94:	4b04      	ldr	r3, [pc, #16]	; (8000ca8 <__NVIC_GetPriorityGrouping+0x18>)
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	0a1b      	lsrs	r3, r3, #8
 8000c9a:	f003 0307 	and.w	r3, r3, #7
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	6039      	str	r1, [r7, #0]
 8000cb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	db0a      	blt.n	8000cd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	b2da      	uxtb	r2, r3
 8000cc4:	490c      	ldr	r1, [pc, #48]	; (8000cf8 <__NVIC_SetPriority+0x4c>)
 8000cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cca:	0112      	lsls	r2, r2, #4
 8000ccc:	b2d2      	uxtb	r2, r2
 8000cce:	440b      	add	r3, r1
 8000cd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cd4:	e00a      	b.n	8000cec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	b2da      	uxtb	r2, r3
 8000cda:	4908      	ldr	r1, [pc, #32]	; (8000cfc <__NVIC_SetPriority+0x50>)
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	f003 030f 	and.w	r3, r3, #15
 8000ce2:	3b04      	subs	r3, #4
 8000ce4:	0112      	lsls	r2, r2, #4
 8000ce6:	b2d2      	uxtb	r2, r2
 8000ce8:	440b      	add	r3, r1
 8000cea:	761a      	strb	r2, [r3, #24]
}
 8000cec:	bf00      	nop
 8000cee:	370c      	adds	r7, #12
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	e000e100 	.word	0xe000e100
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b089      	sub	sp, #36	; 0x24
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	60b9      	str	r1, [r7, #8]
 8000d0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	f003 0307 	and.w	r3, r3, #7
 8000d12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	f1c3 0307 	rsb	r3, r3, #7
 8000d1a:	2b04      	cmp	r3, #4
 8000d1c:	bf28      	it	cs
 8000d1e:	2304      	movcs	r3, #4
 8000d20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	3304      	adds	r3, #4
 8000d26:	2b06      	cmp	r3, #6
 8000d28:	d902      	bls.n	8000d30 <NVIC_EncodePriority+0x30>
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	3b03      	subs	r3, #3
 8000d2e:	e000      	b.n	8000d32 <NVIC_EncodePriority+0x32>
 8000d30:	2300      	movs	r3, #0
 8000d32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d34:	f04f 32ff 	mov.w	r2, #4294967295
 8000d38:	69bb      	ldr	r3, [r7, #24]
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	43da      	mvns	r2, r3
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	401a      	ands	r2, r3
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d48:	f04f 31ff 	mov.w	r1, #4294967295
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d52:	43d9      	mvns	r1, r3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d58:	4313      	orrs	r3, r2
         );
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3724      	adds	r7, #36	; 0x24
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
	...

08000d68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	3b01      	subs	r3, #1
 8000d74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d78:	d301      	bcc.n	8000d7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e00f      	b.n	8000d9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d7e:	4a0a      	ldr	r2, [pc, #40]	; (8000da8 <SysTick_Config+0x40>)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	3b01      	subs	r3, #1
 8000d84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d86:	210f      	movs	r1, #15
 8000d88:	f04f 30ff 	mov.w	r0, #4294967295
 8000d8c:	f7ff ff8e 	bl	8000cac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d90:	4b05      	ldr	r3, [pc, #20]	; (8000da8 <SysTick_Config+0x40>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d96:	4b04      	ldr	r3, [pc, #16]	; (8000da8 <SysTick_Config+0x40>)
 8000d98:	2207      	movs	r2, #7
 8000d9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d9c:	2300      	movs	r3, #0
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	e000e010 	.word	0xe000e010

08000dac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000db4:	6878      	ldr	r0, [r7, #4]
 8000db6:	f7ff ff47 	bl	8000c48 <__NVIC_SetPriorityGrouping>
}
 8000dba:	bf00      	nop
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b086      	sub	sp, #24
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	4603      	mov	r3, r0
 8000dca:	60b9      	str	r1, [r7, #8]
 8000dcc:	607a      	str	r2, [r7, #4]
 8000dce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dd4:	f7ff ff5c 	bl	8000c90 <__NVIC_GetPriorityGrouping>
 8000dd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dda:	687a      	ldr	r2, [r7, #4]
 8000ddc:	68b9      	ldr	r1, [r7, #8]
 8000dde:	6978      	ldr	r0, [r7, #20]
 8000de0:	f7ff ff8e 	bl	8000d00 <NVIC_EncodePriority>
 8000de4:	4602      	mov	r2, r0
 8000de6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dea:	4611      	mov	r1, r2
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff ff5d 	bl	8000cac <__NVIC_SetPriority>
}
 8000df2:	bf00      	nop
 8000df4:	3718      	adds	r7, #24
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b082      	sub	sp, #8
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	f7ff ffb0 	bl	8000d68 <SysTick_Config>
 8000e08:	4603      	mov	r3, r0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
	...

08000e14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b089      	sub	sp, #36	; 0x24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e22:	2300      	movs	r3, #0
 8000e24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e26:	2300      	movs	r3, #0
 8000e28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	61fb      	str	r3, [r7, #28]
 8000e2e:	e159      	b.n	80010e4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e30:	2201      	movs	r2, #1
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	697a      	ldr	r2, [r7, #20]
 8000e40:	4013      	ands	r3, r2
 8000e42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e44:	693a      	ldr	r2, [r7, #16]
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	f040 8148 	bne.w	80010de <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	f003 0303 	and.w	r3, r3, #3
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d005      	beq.n	8000e66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e62:	2b02      	cmp	r3, #2
 8000e64:	d130      	bne.n	8000ec8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	689b      	ldr	r3, [r3, #8]
 8000e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	2203      	movs	r2, #3
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	43db      	mvns	r3, r3
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	68da      	ldr	r2, [r3, #12]
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	43db      	mvns	r3, r3
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	091b      	lsrs	r3, r3, #4
 8000eb2:	f003 0201 	and.w	r2, r3, #1
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f003 0303 	and.w	r3, r3, #3
 8000ed0:	2b03      	cmp	r3, #3
 8000ed2:	d017      	beq.n	8000f04 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	2203      	movs	r2, #3
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	689a      	ldr	r2, [r3, #8]
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f003 0303 	and.w	r3, r3, #3
 8000f0c:	2b02      	cmp	r3, #2
 8000f0e:	d123      	bne.n	8000f58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	08da      	lsrs	r2, r3, #3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	3208      	adds	r2, #8
 8000f18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	f003 0307 	and.w	r3, r3, #7
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	220f      	movs	r2, #15
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	69ba      	ldr	r2, [r7, #24]
 8000f30:	4013      	ands	r3, r2
 8000f32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	691a      	ldr	r2, [r3, #16]
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	f003 0307 	and.w	r3, r3, #7
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	08da      	lsrs	r2, r3, #3
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	3208      	adds	r2, #8
 8000f52:	69b9      	ldr	r1, [r7, #24]
 8000f54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	2203      	movs	r2, #3
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f003 0203 	and.w	r2, r3, #3
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	f000 80a2 	beq.w	80010de <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60fb      	str	r3, [r7, #12]
 8000f9e:	4b57      	ldr	r3, [pc, #348]	; (80010fc <HAL_GPIO_Init+0x2e8>)
 8000fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa2:	4a56      	ldr	r2, [pc, #344]	; (80010fc <HAL_GPIO_Init+0x2e8>)
 8000fa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fa8:	6453      	str	r3, [r2, #68]	; 0x44
 8000faa:	4b54      	ldr	r3, [pc, #336]	; (80010fc <HAL_GPIO_Init+0x2e8>)
 8000fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fb6:	4a52      	ldr	r2, [pc, #328]	; (8001100 <HAL_GPIO_Init+0x2ec>)
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	089b      	lsrs	r3, r3, #2
 8000fbc:	3302      	adds	r3, #2
 8000fbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	f003 0303 	and.w	r3, r3, #3
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	220f      	movs	r2, #15
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a49      	ldr	r2, [pc, #292]	; (8001104 <HAL_GPIO_Init+0x2f0>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d019      	beq.n	8001016 <HAL_GPIO_Init+0x202>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a48      	ldr	r2, [pc, #288]	; (8001108 <HAL_GPIO_Init+0x2f4>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d013      	beq.n	8001012 <HAL_GPIO_Init+0x1fe>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a47      	ldr	r2, [pc, #284]	; (800110c <HAL_GPIO_Init+0x2f8>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d00d      	beq.n	800100e <HAL_GPIO_Init+0x1fa>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a46      	ldr	r2, [pc, #280]	; (8001110 <HAL_GPIO_Init+0x2fc>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d007      	beq.n	800100a <HAL_GPIO_Init+0x1f6>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a45      	ldr	r2, [pc, #276]	; (8001114 <HAL_GPIO_Init+0x300>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d101      	bne.n	8001006 <HAL_GPIO_Init+0x1f2>
 8001002:	2304      	movs	r3, #4
 8001004:	e008      	b.n	8001018 <HAL_GPIO_Init+0x204>
 8001006:	2307      	movs	r3, #7
 8001008:	e006      	b.n	8001018 <HAL_GPIO_Init+0x204>
 800100a:	2303      	movs	r3, #3
 800100c:	e004      	b.n	8001018 <HAL_GPIO_Init+0x204>
 800100e:	2302      	movs	r3, #2
 8001010:	e002      	b.n	8001018 <HAL_GPIO_Init+0x204>
 8001012:	2301      	movs	r3, #1
 8001014:	e000      	b.n	8001018 <HAL_GPIO_Init+0x204>
 8001016:	2300      	movs	r3, #0
 8001018:	69fa      	ldr	r2, [r7, #28]
 800101a:	f002 0203 	and.w	r2, r2, #3
 800101e:	0092      	lsls	r2, r2, #2
 8001020:	4093      	lsls	r3, r2
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	4313      	orrs	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001028:	4935      	ldr	r1, [pc, #212]	; (8001100 <HAL_GPIO_Init+0x2ec>)
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	089b      	lsrs	r3, r3, #2
 800102e:	3302      	adds	r3, #2
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001036:	4b38      	ldr	r3, [pc, #224]	; (8001118 <HAL_GPIO_Init+0x304>)
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	43db      	mvns	r3, r3
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	4013      	ands	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800104e:	2b00      	cmp	r3, #0
 8001050:	d003      	beq.n	800105a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	4313      	orrs	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800105a:	4a2f      	ldr	r2, [pc, #188]	; (8001118 <HAL_GPIO_Init+0x304>)
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001060:	4b2d      	ldr	r3, [pc, #180]	; (8001118 <HAL_GPIO_Init+0x304>)
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	43db      	mvns	r3, r3
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	4013      	ands	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001078:	2b00      	cmp	r3, #0
 800107a:	d003      	beq.n	8001084 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	4313      	orrs	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001084:	4a24      	ldr	r2, [pc, #144]	; (8001118 <HAL_GPIO_Init+0x304>)
 8001086:	69bb      	ldr	r3, [r7, #24]
 8001088:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800108a:	4b23      	ldr	r3, [pc, #140]	; (8001118 <HAL_GPIO_Init+0x304>)
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	43db      	mvns	r3, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4013      	ands	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d003      	beq.n	80010ae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010ae:	4a1a      	ldr	r2, [pc, #104]	; (8001118 <HAL_GPIO_Init+0x304>)
 80010b0:	69bb      	ldr	r3, [r7, #24]
 80010b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010b4:	4b18      	ldr	r3, [pc, #96]	; (8001118 <HAL_GPIO_Init+0x304>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	43db      	mvns	r3, r3
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	4013      	ands	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d003      	beq.n	80010d8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010d8:	4a0f      	ldr	r2, [pc, #60]	; (8001118 <HAL_GPIO_Init+0x304>)
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	3301      	adds	r3, #1
 80010e2:	61fb      	str	r3, [r7, #28]
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	2b0f      	cmp	r3, #15
 80010e8:	f67f aea2 	bls.w	8000e30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010ec:	bf00      	nop
 80010ee:	bf00      	nop
 80010f0:	3724      	adds	r7, #36	; 0x24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	40023800 	.word	0x40023800
 8001100:	40013800 	.word	0x40013800
 8001104:	40020000 	.word	0x40020000
 8001108:	40020400 	.word	0x40020400
 800110c:	40020800 	.word	0x40020800
 8001110:	40020c00 	.word	0x40020c00
 8001114:	40021000 	.word	0x40021000
 8001118:	40013c00 	.word	0x40013c00

0800111c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	460b      	mov	r3, r1
 8001126:	807b      	strh	r3, [r7, #2]
 8001128:	4613      	mov	r3, r2
 800112a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800112c:	787b      	ldrb	r3, [r7, #1]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d003      	beq.n	800113a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001132:	887a      	ldrh	r2, [r7, #2]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001138:	e003      	b.n	8001142 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800113a:	887b      	ldrh	r3, [r7, #2]
 800113c:	041a      	lsls	r2, r3, #16
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	619a      	str	r2, [r3, #24]
}
 8001142:	bf00      	nop
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
	...

08001150 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d101      	bne.n	8001162 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e267      	b.n	8001632 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	2b00      	cmp	r3, #0
 800116c:	d075      	beq.n	800125a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800116e:	4b88      	ldr	r3, [pc, #544]	; (8001390 <HAL_RCC_OscConfig+0x240>)
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	f003 030c 	and.w	r3, r3, #12
 8001176:	2b04      	cmp	r3, #4
 8001178:	d00c      	beq.n	8001194 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800117a:	4b85      	ldr	r3, [pc, #532]	; (8001390 <HAL_RCC_OscConfig+0x240>)
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001182:	2b08      	cmp	r3, #8
 8001184:	d112      	bne.n	80011ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001186:	4b82      	ldr	r3, [pc, #520]	; (8001390 <HAL_RCC_OscConfig+0x240>)
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800118e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001192:	d10b      	bne.n	80011ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001194:	4b7e      	ldr	r3, [pc, #504]	; (8001390 <HAL_RCC_OscConfig+0x240>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800119c:	2b00      	cmp	r3, #0
 800119e:	d05b      	beq.n	8001258 <HAL_RCC_OscConfig+0x108>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d157      	bne.n	8001258 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011a8:	2301      	movs	r3, #1
 80011aa:	e242      	b.n	8001632 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011b4:	d106      	bne.n	80011c4 <HAL_RCC_OscConfig+0x74>
 80011b6:	4b76      	ldr	r3, [pc, #472]	; (8001390 <HAL_RCC_OscConfig+0x240>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a75      	ldr	r2, [pc, #468]	; (8001390 <HAL_RCC_OscConfig+0x240>)
 80011bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011c0:	6013      	str	r3, [r2, #0]
 80011c2:	e01d      	b.n	8001200 <HAL_RCC_OscConfig+0xb0>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011cc:	d10c      	bne.n	80011e8 <HAL_RCC_OscConfig+0x98>
 80011ce:	4b70      	ldr	r3, [pc, #448]	; (8001390 <HAL_RCC_OscConfig+0x240>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a6f      	ldr	r2, [pc, #444]	; (8001390 <HAL_RCC_OscConfig+0x240>)
 80011d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011d8:	6013      	str	r3, [r2, #0]
 80011da:	4b6d      	ldr	r3, [pc, #436]	; (8001390 <HAL_RCC_OscConfig+0x240>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a6c      	ldr	r2, [pc, #432]	; (8001390 <HAL_RCC_OscConfig+0x240>)
 80011e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011e4:	6013      	str	r3, [r2, #0]
 80011e6:	e00b      	b.n	8001200 <HAL_RCC_OscConfig+0xb0>
 80011e8:	4b69      	ldr	r3, [pc, #420]	; (8001390 <HAL_RCC_OscConfig+0x240>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a68      	ldr	r2, [pc, #416]	; (8001390 <HAL_RCC_OscConfig+0x240>)
 80011ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011f2:	6013      	str	r3, [r2, #0]
 80011f4:	4b66      	ldr	r3, [pc, #408]	; (8001390 <HAL_RCC_OscConfig+0x240>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a65      	ldr	r2, [pc, #404]	; (8001390 <HAL_RCC_OscConfig+0x240>)
 80011fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d013      	beq.n	8001230 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001208:	f7ff fd12 	bl	8000c30 <HAL_GetTick>
 800120c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800120e:	e008      	b.n	8001222 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001210:	f7ff fd0e 	bl	8000c30 <HAL_GetTick>
 8001214:	4602      	mov	r2, r0
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	2b64      	cmp	r3, #100	; 0x64
 800121c:	d901      	bls.n	8001222 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800121e:	2303      	movs	r3, #3
 8001220:	e207      	b.n	8001632 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001222:	4b5b      	ldr	r3, [pc, #364]	; (8001390 <HAL_RCC_OscConfig+0x240>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d0f0      	beq.n	8001210 <HAL_RCC_OscConfig+0xc0>
 800122e:	e014      	b.n	800125a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001230:	f7ff fcfe 	bl	8000c30 <HAL_GetTick>
 8001234:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001236:	e008      	b.n	800124a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001238:	f7ff fcfa 	bl	8000c30 <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	2b64      	cmp	r3, #100	; 0x64
 8001244:	d901      	bls.n	800124a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001246:	2303      	movs	r3, #3
 8001248:	e1f3      	b.n	8001632 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800124a:	4b51      	ldr	r3, [pc, #324]	; (8001390 <HAL_RCC_OscConfig+0x240>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d1f0      	bne.n	8001238 <HAL_RCC_OscConfig+0xe8>
 8001256:	e000      	b.n	800125a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001258:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	2b00      	cmp	r3, #0
 8001264:	d063      	beq.n	800132e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001266:	4b4a      	ldr	r3, [pc, #296]	; (8001390 <HAL_RCC_OscConfig+0x240>)
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	f003 030c 	and.w	r3, r3, #12
 800126e:	2b00      	cmp	r3, #0
 8001270:	d00b      	beq.n	800128a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001272:	4b47      	ldr	r3, [pc, #284]	; (8001390 <HAL_RCC_OscConfig+0x240>)
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800127a:	2b08      	cmp	r3, #8
 800127c:	d11c      	bne.n	80012b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800127e:	4b44      	ldr	r3, [pc, #272]	; (8001390 <HAL_RCC_OscConfig+0x240>)
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d116      	bne.n	80012b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800128a:	4b41      	ldr	r3, [pc, #260]	; (8001390 <HAL_RCC_OscConfig+0x240>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	2b00      	cmp	r3, #0
 8001294:	d005      	beq.n	80012a2 <HAL_RCC_OscConfig+0x152>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	2b01      	cmp	r3, #1
 800129c:	d001      	beq.n	80012a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e1c7      	b.n	8001632 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012a2:	4b3b      	ldr	r3, [pc, #236]	; (8001390 <HAL_RCC_OscConfig+0x240>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	691b      	ldr	r3, [r3, #16]
 80012ae:	00db      	lsls	r3, r3, #3
 80012b0:	4937      	ldr	r1, [pc, #220]	; (8001390 <HAL_RCC_OscConfig+0x240>)
 80012b2:	4313      	orrs	r3, r2
 80012b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012b6:	e03a      	b.n	800132e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d020      	beq.n	8001302 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012c0:	4b34      	ldr	r3, [pc, #208]	; (8001394 <HAL_RCC_OscConfig+0x244>)
 80012c2:	2201      	movs	r2, #1
 80012c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c6:	f7ff fcb3 	bl	8000c30 <HAL_GetTick>
 80012ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012cc:	e008      	b.n	80012e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012ce:	f7ff fcaf 	bl	8000c30 <HAL_GetTick>
 80012d2:	4602      	mov	r2, r0
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d901      	bls.n	80012e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80012dc:	2303      	movs	r3, #3
 80012de:	e1a8      	b.n	8001632 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012e0:	4b2b      	ldr	r3, [pc, #172]	; (8001390 <HAL_RCC_OscConfig+0x240>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f003 0302 	and.w	r3, r3, #2
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d0f0      	beq.n	80012ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ec:	4b28      	ldr	r3, [pc, #160]	; (8001390 <HAL_RCC_OscConfig+0x240>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	691b      	ldr	r3, [r3, #16]
 80012f8:	00db      	lsls	r3, r3, #3
 80012fa:	4925      	ldr	r1, [pc, #148]	; (8001390 <HAL_RCC_OscConfig+0x240>)
 80012fc:	4313      	orrs	r3, r2
 80012fe:	600b      	str	r3, [r1, #0]
 8001300:	e015      	b.n	800132e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001302:	4b24      	ldr	r3, [pc, #144]	; (8001394 <HAL_RCC_OscConfig+0x244>)
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001308:	f7ff fc92 	bl	8000c30 <HAL_GetTick>
 800130c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800130e:	e008      	b.n	8001322 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001310:	f7ff fc8e 	bl	8000c30 <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	2b02      	cmp	r3, #2
 800131c:	d901      	bls.n	8001322 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	e187      	b.n	8001632 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001322:	4b1b      	ldr	r3, [pc, #108]	; (8001390 <HAL_RCC_OscConfig+0x240>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	2b00      	cmp	r3, #0
 800132c:	d1f0      	bne.n	8001310 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 0308 	and.w	r3, r3, #8
 8001336:	2b00      	cmp	r3, #0
 8001338:	d036      	beq.n	80013a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	695b      	ldr	r3, [r3, #20]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d016      	beq.n	8001370 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001342:	4b15      	ldr	r3, [pc, #84]	; (8001398 <HAL_RCC_OscConfig+0x248>)
 8001344:	2201      	movs	r2, #1
 8001346:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001348:	f7ff fc72 	bl	8000c30 <HAL_GetTick>
 800134c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800134e:	e008      	b.n	8001362 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001350:	f7ff fc6e 	bl	8000c30 <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	2b02      	cmp	r3, #2
 800135c:	d901      	bls.n	8001362 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e167      	b.n	8001632 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001362:	4b0b      	ldr	r3, [pc, #44]	; (8001390 <HAL_RCC_OscConfig+0x240>)
 8001364:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001366:	f003 0302 	and.w	r3, r3, #2
 800136a:	2b00      	cmp	r3, #0
 800136c:	d0f0      	beq.n	8001350 <HAL_RCC_OscConfig+0x200>
 800136e:	e01b      	b.n	80013a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001370:	4b09      	ldr	r3, [pc, #36]	; (8001398 <HAL_RCC_OscConfig+0x248>)
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001376:	f7ff fc5b 	bl	8000c30 <HAL_GetTick>
 800137a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800137c:	e00e      	b.n	800139c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800137e:	f7ff fc57 	bl	8000c30 <HAL_GetTick>
 8001382:	4602      	mov	r2, r0
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	2b02      	cmp	r3, #2
 800138a:	d907      	bls.n	800139c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800138c:	2303      	movs	r3, #3
 800138e:	e150      	b.n	8001632 <HAL_RCC_OscConfig+0x4e2>
 8001390:	40023800 	.word	0x40023800
 8001394:	42470000 	.word	0x42470000
 8001398:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800139c:	4b88      	ldr	r3, [pc, #544]	; (80015c0 <HAL_RCC_OscConfig+0x470>)
 800139e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013a0:	f003 0302 	and.w	r3, r3, #2
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d1ea      	bne.n	800137e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 0304 	and.w	r3, r3, #4
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	f000 8097 	beq.w	80014e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013b6:	2300      	movs	r3, #0
 80013b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013ba:	4b81      	ldr	r3, [pc, #516]	; (80015c0 <HAL_RCC_OscConfig+0x470>)
 80013bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d10f      	bne.n	80013e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	60bb      	str	r3, [r7, #8]
 80013ca:	4b7d      	ldr	r3, [pc, #500]	; (80015c0 <HAL_RCC_OscConfig+0x470>)
 80013cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ce:	4a7c      	ldr	r2, [pc, #496]	; (80015c0 <HAL_RCC_OscConfig+0x470>)
 80013d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d4:	6413      	str	r3, [r2, #64]	; 0x40
 80013d6:	4b7a      	ldr	r3, [pc, #488]	; (80015c0 <HAL_RCC_OscConfig+0x470>)
 80013d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013de:	60bb      	str	r3, [r7, #8]
 80013e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013e2:	2301      	movs	r3, #1
 80013e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013e6:	4b77      	ldr	r3, [pc, #476]	; (80015c4 <HAL_RCC_OscConfig+0x474>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d118      	bne.n	8001424 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013f2:	4b74      	ldr	r3, [pc, #464]	; (80015c4 <HAL_RCC_OscConfig+0x474>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a73      	ldr	r2, [pc, #460]	; (80015c4 <HAL_RCC_OscConfig+0x474>)
 80013f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013fe:	f7ff fc17 	bl	8000c30 <HAL_GetTick>
 8001402:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001404:	e008      	b.n	8001418 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001406:	f7ff fc13 	bl	8000c30 <HAL_GetTick>
 800140a:	4602      	mov	r2, r0
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	2b02      	cmp	r3, #2
 8001412:	d901      	bls.n	8001418 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	e10c      	b.n	8001632 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001418:	4b6a      	ldr	r3, [pc, #424]	; (80015c4 <HAL_RCC_OscConfig+0x474>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001420:	2b00      	cmp	r3, #0
 8001422:	d0f0      	beq.n	8001406 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	2b01      	cmp	r3, #1
 800142a:	d106      	bne.n	800143a <HAL_RCC_OscConfig+0x2ea>
 800142c:	4b64      	ldr	r3, [pc, #400]	; (80015c0 <HAL_RCC_OscConfig+0x470>)
 800142e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001430:	4a63      	ldr	r2, [pc, #396]	; (80015c0 <HAL_RCC_OscConfig+0x470>)
 8001432:	f043 0301 	orr.w	r3, r3, #1
 8001436:	6713      	str	r3, [r2, #112]	; 0x70
 8001438:	e01c      	b.n	8001474 <HAL_RCC_OscConfig+0x324>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	2b05      	cmp	r3, #5
 8001440:	d10c      	bne.n	800145c <HAL_RCC_OscConfig+0x30c>
 8001442:	4b5f      	ldr	r3, [pc, #380]	; (80015c0 <HAL_RCC_OscConfig+0x470>)
 8001444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001446:	4a5e      	ldr	r2, [pc, #376]	; (80015c0 <HAL_RCC_OscConfig+0x470>)
 8001448:	f043 0304 	orr.w	r3, r3, #4
 800144c:	6713      	str	r3, [r2, #112]	; 0x70
 800144e:	4b5c      	ldr	r3, [pc, #368]	; (80015c0 <HAL_RCC_OscConfig+0x470>)
 8001450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001452:	4a5b      	ldr	r2, [pc, #364]	; (80015c0 <HAL_RCC_OscConfig+0x470>)
 8001454:	f043 0301 	orr.w	r3, r3, #1
 8001458:	6713      	str	r3, [r2, #112]	; 0x70
 800145a:	e00b      	b.n	8001474 <HAL_RCC_OscConfig+0x324>
 800145c:	4b58      	ldr	r3, [pc, #352]	; (80015c0 <HAL_RCC_OscConfig+0x470>)
 800145e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001460:	4a57      	ldr	r2, [pc, #348]	; (80015c0 <HAL_RCC_OscConfig+0x470>)
 8001462:	f023 0301 	bic.w	r3, r3, #1
 8001466:	6713      	str	r3, [r2, #112]	; 0x70
 8001468:	4b55      	ldr	r3, [pc, #340]	; (80015c0 <HAL_RCC_OscConfig+0x470>)
 800146a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800146c:	4a54      	ldr	r2, [pc, #336]	; (80015c0 <HAL_RCC_OscConfig+0x470>)
 800146e:	f023 0304 	bic.w	r3, r3, #4
 8001472:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d015      	beq.n	80014a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800147c:	f7ff fbd8 	bl	8000c30 <HAL_GetTick>
 8001480:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001482:	e00a      	b.n	800149a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001484:	f7ff fbd4 	bl	8000c30 <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001492:	4293      	cmp	r3, r2
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e0cb      	b.n	8001632 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800149a:	4b49      	ldr	r3, [pc, #292]	; (80015c0 <HAL_RCC_OscConfig+0x470>)
 800149c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d0ee      	beq.n	8001484 <HAL_RCC_OscConfig+0x334>
 80014a6:	e014      	b.n	80014d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014a8:	f7ff fbc2 	bl	8000c30 <HAL_GetTick>
 80014ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014ae:	e00a      	b.n	80014c6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014b0:	f7ff fbbe 	bl	8000c30 <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80014be:	4293      	cmp	r3, r2
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e0b5      	b.n	8001632 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014c6:	4b3e      	ldr	r3, [pc, #248]	; (80015c0 <HAL_RCC_OscConfig+0x470>)
 80014c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d1ee      	bne.n	80014b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80014d2:	7dfb      	ldrb	r3, [r7, #23]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d105      	bne.n	80014e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014d8:	4b39      	ldr	r3, [pc, #228]	; (80015c0 <HAL_RCC_OscConfig+0x470>)
 80014da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014dc:	4a38      	ldr	r2, [pc, #224]	; (80015c0 <HAL_RCC_OscConfig+0x470>)
 80014de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014e2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	699b      	ldr	r3, [r3, #24]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	f000 80a1 	beq.w	8001630 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014ee:	4b34      	ldr	r3, [pc, #208]	; (80015c0 <HAL_RCC_OscConfig+0x470>)
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	f003 030c 	and.w	r3, r3, #12
 80014f6:	2b08      	cmp	r3, #8
 80014f8:	d05c      	beq.n	80015b4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	699b      	ldr	r3, [r3, #24]
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d141      	bne.n	8001586 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001502:	4b31      	ldr	r3, [pc, #196]	; (80015c8 <HAL_RCC_OscConfig+0x478>)
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001508:	f7ff fb92 	bl	8000c30 <HAL_GetTick>
 800150c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800150e:	e008      	b.n	8001522 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001510:	f7ff fb8e 	bl	8000c30 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	2b02      	cmp	r3, #2
 800151c:	d901      	bls.n	8001522 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e087      	b.n	8001632 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001522:	4b27      	ldr	r3, [pc, #156]	; (80015c0 <HAL_RCC_OscConfig+0x470>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d1f0      	bne.n	8001510 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	69da      	ldr	r2, [r3, #28]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6a1b      	ldr	r3, [r3, #32]
 8001536:	431a      	orrs	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800153c:	019b      	lsls	r3, r3, #6
 800153e:	431a      	orrs	r2, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001544:	085b      	lsrs	r3, r3, #1
 8001546:	3b01      	subs	r3, #1
 8001548:	041b      	lsls	r3, r3, #16
 800154a:	431a      	orrs	r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001550:	061b      	lsls	r3, r3, #24
 8001552:	491b      	ldr	r1, [pc, #108]	; (80015c0 <HAL_RCC_OscConfig+0x470>)
 8001554:	4313      	orrs	r3, r2
 8001556:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001558:	4b1b      	ldr	r3, [pc, #108]	; (80015c8 <HAL_RCC_OscConfig+0x478>)
 800155a:	2201      	movs	r2, #1
 800155c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800155e:	f7ff fb67 	bl	8000c30 <HAL_GetTick>
 8001562:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001564:	e008      	b.n	8001578 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001566:	f7ff fb63 	bl	8000c30 <HAL_GetTick>
 800156a:	4602      	mov	r2, r0
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	2b02      	cmp	r3, #2
 8001572:	d901      	bls.n	8001578 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	e05c      	b.n	8001632 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001578:	4b11      	ldr	r3, [pc, #68]	; (80015c0 <HAL_RCC_OscConfig+0x470>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001580:	2b00      	cmp	r3, #0
 8001582:	d0f0      	beq.n	8001566 <HAL_RCC_OscConfig+0x416>
 8001584:	e054      	b.n	8001630 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001586:	4b10      	ldr	r3, [pc, #64]	; (80015c8 <HAL_RCC_OscConfig+0x478>)
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800158c:	f7ff fb50 	bl	8000c30 <HAL_GetTick>
 8001590:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001592:	e008      	b.n	80015a6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001594:	f7ff fb4c 	bl	8000c30 <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e045      	b.n	8001632 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015a6:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <HAL_RCC_OscConfig+0x470>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d1f0      	bne.n	8001594 <HAL_RCC_OscConfig+0x444>
 80015b2:	e03d      	b.n	8001630 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d107      	bne.n	80015cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e038      	b.n	8001632 <HAL_RCC_OscConfig+0x4e2>
 80015c0:	40023800 	.word	0x40023800
 80015c4:	40007000 	.word	0x40007000
 80015c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80015cc:	4b1b      	ldr	r3, [pc, #108]	; (800163c <HAL_RCC_OscConfig+0x4ec>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	699b      	ldr	r3, [r3, #24]
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d028      	beq.n	800162c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d121      	bne.n	800162c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d11a      	bne.n	800162c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015f6:	68fa      	ldr	r2, [r7, #12]
 80015f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80015fc:	4013      	ands	r3, r2
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001602:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001604:	4293      	cmp	r3, r2
 8001606:	d111      	bne.n	800162c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001612:	085b      	lsrs	r3, r3, #1
 8001614:	3b01      	subs	r3, #1
 8001616:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001618:	429a      	cmp	r2, r3
 800161a:	d107      	bne.n	800162c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001626:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001628:	429a      	cmp	r2, r3
 800162a:	d001      	beq.n	8001630 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e000      	b.n	8001632 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	3718      	adds	r7, #24
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40023800 	.word	0x40023800

08001640 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d101      	bne.n	8001654 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e0cc      	b.n	80017ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001654:	4b68      	ldr	r3, [pc, #416]	; (80017f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0307 	and.w	r3, r3, #7
 800165c:	683a      	ldr	r2, [r7, #0]
 800165e:	429a      	cmp	r2, r3
 8001660:	d90c      	bls.n	800167c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001662:	4b65      	ldr	r3, [pc, #404]	; (80017f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001664:	683a      	ldr	r2, [r7, #0]
 8001666:	b2d2      	uxtb	r2, r2
 8001668:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800166a:	4b63      	ldr	r3, [pc, #396]	; (80017f8 <HAL_RCC_ClockConfig+0x1b8>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0307 	and.w	r3, r3, #7
 8001672:	683a      	ldr	r2, [r7, #0]
 8001674:	429a      	cmp	r2, r3
 8001676:	d001      	beq.n	800167c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e0b8      	b.n	80017ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0302 	and.w	r3, r3, #2
 8001684:	2b00      	cmp	r3, #0
 8001686:	d020      	beq.n	80016ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0304 	and.w	r3, r3, #4
 8001690:	2b00      	cmp	r3, #0
 8001692:	d005      	beq.n	80016a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001694:	4b59      	ldr	r3, [pc, #356]	; (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	4a58      	ldr	r2, [pc, #352]	; (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 800169a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800169e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0308 	and.w	r3, r3, #8
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d005      	beq.n	80016b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016ac:	4b53      	ldr	r3, [pc, #332]	; (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	4a52      	ldr	r2, [pc, #328]	; (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 80016b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016b8:	4b50      	ldr	r3, [pc, #320]	; (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	494d      	ldr	r1, [pc, #308]	; (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 80016c6:	4313      	orrs	r3, r2
 80016c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d044      	beq.n	8001760 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d107      	bne.n	80016ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016de:	4b47      	ldr	r3, [pc, #284]	; (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d119      	bne.n	800171e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e07f      	b.n	80017ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d003      	beq.n	80016fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016fa:	2b03      	cmp	r3, #3
 80016fc:	d107      	bne.n	800170e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016fe:	4b3f      	ldr	r3, [pc, #252]	; (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d109      	bne.n	800171e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e06f      	b.n	80017ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800170e:	4b3b      	ldr	r3, [pc, #236]	; (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	2b00      	cmp	r3, #0
 8001718:	d101      	bne.n	800171e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e067      	b.n	80017ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800171e:	4b37      	ldr	r3, [pc, #220]	; (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	f023 0203 	bic.w	r2, r3, #3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	4934      	ldr	r1, [pc, #208]	; (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 800172c:	4313      	orrs	r3, r2
 800172e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001730:	f7ff fa7e 	bl	8000c30 <HAL_GetTick>
 8001734:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001736:	e00a      	b.n	800174e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001738:	f7ff fa7a 	bl	8000c30 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	f241 3288 	movw	r2, #5000	; 0x1388
 8001746:	4293      	cmp	r3, r2
 8001748:	d901      	bls.n	800174e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e04f      	b.n	80017ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800174e:	4b2b      	ldr	r3, [pc, #172]	; (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f003 020c 	and.w	r2, r3, #12
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	429a      	cmp	r2, r3
 800175e:	d1eb      	bne.n	8001738 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001760:	4b25      	ldr	r3, [pc, #148]	; (80017f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0307 	and.w	r3, r3, #7
 8001768:	683a      	ldr	r2, [r7, #0]
 800176a:	429a      	cmp	r2, r3
 800176c:	d20c      	bcs.n	8001788 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800176e:	4b22      	ldr	r3, [pc, #136]	; (80017f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001770:	683a      	ldr	r2, [r7, #0]
 8001772:	b2d2      	uxtb	r2, r2
 8001774:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001776:	4b20      	ldr	r3, [pc, #128]	; (80017f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	683a      	ldr	r2, [r7, #0]
 8001780:	429a      	cmp	r2, r3
 8001782:	d001      	beq.n	8001788 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e032      	b.n	80017ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0304 	and.w	r3, r3, #4
 8001790:	2b00      	cmp	r3, #0
 8001792:	d008      	beq.n	80017a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001794:	4b19      	ldr	r3, [pc, #100]	; (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	4916      	ldr	r1, [pc, #88]	; (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 80017a2:	4313      	orrs	r3, r2
 80017a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0308 	and.w	r3, r3, #8
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d009      	beq.n	80017c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017b2:	4b12      	ldr	r3, [pc, #72]	; (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	691b      	ldr	r3, [r3, #16]
 80017be:	00db      	lsls	r3, r3, #3
 80017c0:	490e      	ldr	r1, [pc, #56]	; (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 80017c2:	4313      	orrs	r3, r2
 80017c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017c6:	f000 f821 	bl	800180c <HAL_RCC_GetSysClockFreq>
 80017ca:	4602      	mov	r2, r0
 80017cc:	4b0b      	ldr	r3, [pc, #44]	; (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	091b      	lsrs	r3, r3, #4
 80017d2:	f003 030f 	and.w	r3, r3, #15
 80017d6:	490a      	ldr	r1, [pc, #40]	; (8001800 <HAL_RCC_ClockConfig+0x1c0>)
 80017d8:	5ccb      	ldrb	r3, [r1, r3]
 80017da:	fa22 f303 	lsr.w	r3, r2, r3
 80017de:	4a09      	ldr	r2, [pc, #36]	; (8001804 <HAL_RCC_ClockConfig+0x1c4>)
 80017e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80017e2:	4b09      	ldr	r3, [pc, #36]	; (8001808 <HAL_RCC_ClockConfig+0x1c8>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7ff f9de 	bl	8000ba8 <HAL_InitTick>

  return HAL_OK;
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40023c00 	.word	0x40023c00
 80017fc:	40023800 	.word	0x40023800
 8001800:	08003fe8 	.word	0x08003fe8
 8001804:	20000000 	.word	0x20000000
 8001808:	20000004 	.word	0x20000004

0800180c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800180c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001810:	b094      	sub	sp, #80	; 0x50
 8001812:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001814:	2300      	movs	r3, #0
 8001816:	647b      	str	r3, [r7, #68]	; 0x44
 8001818:	2300      	movs	r3, #0
 800181a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800181c:	2300      	movs	r3, #0
 800181e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001820:	2300      	movs	r3, #0
 8001822:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001824:	4b79      	ldr	r3, [pc, #484]	; (8001a0c <HAL_RCC_GetSysClockFreq+0x200>)
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	f003 030c 	and.w	r3, r3, #12
 800182c:	2b08      	cmp	r3, #8
 800182e:	d00d      	beq.n	800184c <HAL_RCC_GetSysClockFreq+0x40>
 8001830:	2b08      	cmp	r3, #8
 8001832:	f200 80e1 	bhi.w	80019f8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001836:	2b00      	cmp	r3, #0
 8001838:	d002      	beq.n	8001840 <HAL_RCC_GetSysClockFreq+0x34>
 800183a:	2b04      	cmp	r3, #4
 800183c:	d003      	beq.n	8001846 <HAL_RCC_GetSysClockFreq+0x3a>
 800183e:	e0db      	b.n	80019f8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001840:	4b73      	ldr	r3, [pc, #460]	; (8001a10 <HAL_RCC_GetSysClockFreq+0x204>)
 8001842:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001844:	e0db      	b.n	80019fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001846:	4b73      	ldr	r3, [pc, #460]	; (8001a14 <HAL_RCC_GetSysClockFreq+0x208>)
 8001848:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800184a:	e0d8      	b.n	80019fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800184c:	4b6f      	ldr	r3, [pc, #444]	; (8001a0c <HAL_RCC_GetSysClockFreq+0x200>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001854:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001856:	4b6d      	ldr	r3, [pc, #436]	; (8001a0c <HAL_RCC_GetSysClockFreq+0x200>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d063      	beq.n	800192a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001862:	4b6a      	ldr	r3, [pc, #424]	; (8001a0c <HAL_RCC_GetSysClockFreq+0x200>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	099b      	lsrs	r3, r3, #6
 8001868:	2200      	movs	r2, #0
 800186a:	63bb      	str	r3, [r7, #56]	; 0x38
 800186c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800186e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001870:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001874:	633b      	str	r3, [r7, #48]	; 0x30
 8001876:	2300      	movs	r3, #0
 8001878:	637b      	str	r3, [r7, #52]	; 0x34
 800187a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800187e:	4622      	mov	r2, r4
 8001880:	462b      	mov	r3, r5
 8001882:	f04f 0000 	mov.w	r0, #0
 8001886:	f04f 0100 	mov.w	r1, #0
 800188a:	0159      	lsls	r1, r3, #5
 800188c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001890:	0150      	lsls	r0, r2, #5
 8001892:	4602      	mov	r2, r0
 8001894:	460b      	mov	r3, r1
 8001896:	4621      	mov	r1, r4
 8001898:	1a51      	subs	r1, r2, r1
 800189a:	6139      	str	r1, [r7, #16]
 800189c:	4629      	mov	r1, r5
 800189e:	eb63 0301 	sbc.w	r3, r3, r1
 80018a2:	617b      	str	r3, [r7, #20]
 80018a4:	f04f 0200 	mov.w	r2, #0
 80018a8:	f04f 0300 	mov.w	r3, #0
 80018ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80018b0:	4659      	mov	r1, fp
 80018b2:	018b      	lsls	r3, r1, #6
 80018b4:	4651      	mov	r1, sl
 80018b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018ba:	4651      	mov	r1, sl
 80018bc:	018a      	lsls	r2, r1, #6
 80018be:	4651      	mov	r1, sl
 80018c0:	ebb2 0801 	subs.w	r8, r2, r1
 80018c4:	4659      	mov	r1, fp
 80018c6:	eb63 0901 	sbc.w	r9, r3, r1
 80018ca:	f04f 0200 	mov.w	r2, #0
 80018ce:	f04f 0300 	mov.w	r3, #0
 80018d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80018d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018de:	4690      	mov	r8, r2
 80018e0:	4699      	mov	r9, r3
 80018e2:	4623      	mov	r3, r4
 80018e4:	eb18 0303 	adds.w	r3, r8, r3
 80018e8:	60bb      	str	r3, [r7, #8]
 80018ea:	462b      	mov	r3, r5
 80018ec:	eb49 0303 	adc.w	r3, r9, r3
 80018f0:	60fb      	str	r3, [r7, #12]
 80018f2:	f04f 0200 	mov.w	r2, #0
 80018f6:	f04f 0300 	mov.w	r3, #0
 80018fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80018fe:	4629      	mov	r1, r5
 8001900:	024b      	lsls	r3, r1, #9
 8001902:	4621      	mov	r1, r4
 8001904:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001908:	4621      	mov	r1, r4
 800190a:	024a      	lsls	r2, r1, #9
 800190c:	4610      	mov	r0, r2
 800190e:	4619      	mov	r1, r3
 8001910:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001912:	2200      	movs	r2, #0
 8001914:	62bb      	str	r3, [r7, #40]	; 0x28
 8001916:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001918:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800191c:	f7fe fcb0 	bl	8000280 <__aeabi_uldivmod>
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	4613      	mov	r3, r2
 8001926:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001928:	e058      	b.n	80019dc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800192a:	4b38      	ldr	r3, [pc, #224]	; (8001a0c <HAL_RCC_GetSysClockFreq+0x200>)
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	099b      	lsrs	r3, r3, #6
 8001930:	2200      	movs	r2, #0
 8001932:	4618      	mov	r0, r3
 8001934:	4611      	mov	r1, r2
 8001936:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800193a:	623b      	str	r3, [r7, #32]
 800193c:	2300      	movs	r3, #0
 800193e:	627b      	str	r3, [r7, #36]	; 0x24
 8001940:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001944:	4642      	mov	r2, r8
 8001946:	464b      	mov	r3, r9
 8001948:	f04f 0000 	mov.w	r0, #0
 800194c:	f04f 0100 	mov.w	r1, #0
 8001950:	0159      	lsls	r1, r3, #5
 8001952:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001956:	0150      	lsls	r0, r2, #5
 8001958:	4602      	mov	r2, r0
 800195a:	460b      	mov	r3, r1
 800195c:	4641      	mov	r1, r8
 800195e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001962:	4649      	mov	r1, r9
 8001964:	eb63 0b01 	sbc.w	fp, r3, r1
 8001968:	f04f 0200 	mov.w	r2, #0
 800196c:	f04f 0300 	mov.w	r3, #0
 8001970:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001974:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001978:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800197c:	ebb2 040a 	subs.w	r4, r2, sl
 8001980:	eb63 050b 	sbc.w	r5, r3, fp
 8001984:	f04f 0200 	mov.w	r2, #0
 8001988:	f04f 0300 	mov.w	r3, #0
 800198c:	00eb      	lsls	r3, r5, #3
 800198e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001992:	00e2      	lsls	r2, r4, #3
 8001994:	4614      	mov	r4, r2
 8001996:	461d      	mov	r5, r3
 8001998:	4643      	mov	r3, r8
 800199a:	18e3      	adds	r3, r4, r3
 800199c:	603b      	str	r3, [r7, #0]
 800199e:	464b      	mov	r3, r9
 80019a0:	eb45 0303 	adc.w	r3, r5, r3
 80019a4:	607b      	str	r3, [r7, #4]
 80019a6:	f04f 0200 	mov.w	r2, #0
 80019aa:	f04f 0300 	mov.w	r3, #0
 80019ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80019b2:	4629      	mov	r1, r5
 80019b4:	028b      	lsls	r3, r1, #10
 80019b6:	4621      	mov	r1, r4
 80019b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019bc:	4621      	mov	r1, r4
 80019be:	028a      	lsls	r2, r1, #10
 80019c0:	4610      	mov	r0, r2
 80019c2:	4619      	mov	r1, r3
 80019c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019c6:	2200      	movs	r2, #0
 80019c8:	61bb      	str	r3, [r7, #24]
 80019ca:	61fa      	str	r2, [r7, #28]
 80019cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019d0:	f7fe fc56 	bl	8000280 <__aeabi_uldivmod>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	4613      	mov	r3, r2
 80019da:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80019dc:	4b0b      	ldr	r3, [pc, #44]	; (8001a0c <HAL_RCC_GetSysClockFreq+0x200>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	0c1b      	lsrs	r3, r3, #16
 80019e2:	f003 0303 	and.w	r3, r3, #3
 80019e6:	3301      	adds	r3, #1
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80019ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80019ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80019f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80019f6:	e002      	b.n	80019fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019f8:	4b05      	ldr	r3, [pc, #20]	; (8001a10 <HAL_RCC_GetSysClockFreq+0x204>)
 80019fa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80019fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3750      	adds	r7, #80	; 0x50
 8001a04:	46bd      	mov	sp, r7
 8001a06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	00f42400 	.word	0x00f42400
 8001a14:	007a1200 	.word	0x007a1200

08001a18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a1c:	4b03      	ldr	r3, [pc, #12]	; (8001a2c <HAL_RCC_GetHCLKFreq+0x14>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	20000000 	.word	0x20000000

08001a30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a34:	f7ff fff0 	bl	8001a18 <HAL_RCC_GetHCLKFreq>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	4b05      	ldr	r3, [pc, #20]	; (8001a50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	0a9b      	lsrs	r3, r3, #10
 8001a40:	f003 0307 	and.w	r3, r3, #7
 8001a44:	4903      	ldr	r1, [pc, #12]	; (8001a54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a46:	5ccb      	ldrb	r3, [r1, r3]
 8001a48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	40023800 	.word	0x40023800
 8001a54:	08003ff8 	.word	0x08003ff8

08001a58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a5c:	f7ff ffdc 	bl	8001a18 <HAL_RCC_GetHCLKFreq>
 8001a60:	4602      	mov	r2, r0
 8001a62:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	0b5b      	lsrs	r3, r3, #13
 8001a68:	f003 0307 	and.w	r3, r3, #7
 8001a6c:	4903      	ldr	r1, [pc, #12]	; (8001a7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a6e:	5ccb      	ldrb	r3, [r1, r3]
 8001a70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	40023800 	.word	0x40023800
 8001a7c:	08003ff8 	.word	0x08003ff8

08001a80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d101      	bne.n	8001a92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e03f      	b.n	8001b12 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d106      	bne.n	8001aac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f7fe ff0a 	bl	80008c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2224      	movs	r2, #36	; 0x24
 8001ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	68da      	ldr	r2, [r3, #12]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ac2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f000 f9cb 	bl	8001e60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	691a      	ldr	r2, [r3, #16]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ad8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	695a      	ldr	r2, [r3, #20]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ae8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	68da      	ldr	r2, [r3, #12]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001af8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2220      	movs	r2, #32
 8001b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2220      	movs	r2, #32
 8001b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b08a      	sub	sp, #40	; 0x28
 8001b1e:	af02      	add	r7, sp, #8
 8001b20:	60f8      	str	r0, [r7, #12]
 8001b22:	60b9      	str	r1, [r7, #8]
 8001b24:	603b      	str	r3, [r7, #0]
 8001b26:	4613      	mov	r3, r2
 8001b28:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	2b20      	cmp	r3, #32
 8001b38:	d17c      	bne.n	8001c34 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d002      	beq.n	8001b46 <HAL_UART_Transmit+0x2c>
 8001b40:	88fb      	ldrh	r3, [r7, #6]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d101      	bne.n	8001b4a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e075      	b.n	8001c36 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d101      	bne.n	8001b58 <HAL_UART_Transmit+0x3e>
 8001b54:	2302      	movs	r3, #2
 8001b56:	e06e      	b.n	8001c36 <HAL_UART_Transmit+0x11c>
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2200      	movs	r2, #0
 8001b64:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2221      	movs	r2, #33	; 0x21
 8001b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001b6e:	f7ff f85f 	bl	8000c30 <HAL_GetTick>
 8001b72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	88fa      	ldrh	r2, [r7, #6]
 8001b78:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	88fa      	ldrh	r2, [r7, #6]
 8001b7e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b88:	d108      	bne.n	8001b9c <HAL_UART_Transmit+0x82>
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	691b      	ldr	r3, [r3, #16]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d104      	bne.n	8001b9c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	61bb      	str	r3, [r7, #24]
 8001b9a:	e003      	b.n	8001ba4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001bac:	e02a      	b.n	8001c04 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	9300      	str	r3, [sp, #0]
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	2180      	movs	r1, #128	; 0x80
 8001bb8:	68f8      	ldr	r0, [r7, #12]
 8001bba:	f000 f8e2 	bl	8001d82 <UART_WaitOnFlagUntilTimeout>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e036      	b.n	8001c36 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d10b      	bne.n	8001be6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	881b      	ldrh	r3, [r3, #0]
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001bdc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	3302      	adds	r3, #2
 8001be2:	61bb      	str	r3, [r7, #24]
 8001be4:	e007      	b.n	8001bf6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	781a      	ldrb	r2, [r3, #0]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	3b01      	subs	r3, #1
 8001bfe:	b29a      	uxth	r2, r3
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1cf      	bne.n	8001bae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	9300      	str	r3, [sp, #0]
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	2200      	movs	r2, #0
 8001c16:	2140      	movs	r1, #64	; 0x40
 8001c18:	68f8      	ldr	r0, [r7, #12]
 8001c1a:	f000 f8b2 	bl	8001d82 <UART_WaitOnFlagUntilTimeout>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e006      	b.n	8001c36 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2220      	movs	r2, #32
 8001c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001c30:	2300      	movs	r3, #0
 8001c32:	e000      	b.n	8001c36 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001c34:	2302      	movs	r3, #2
  }
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3720      	adds	r7, #32
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b08a      	sub	sp, #40	; 0x28
 8001c42:	af02      	add	r7, sp, #8
 8001c44:	60f8      	str	r0, [r7, #12]
 8001c46:	60b9      	str	r1, [r7, #8]
 8001c48:	603b      	str	r3, [r7, #0]
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b20      	cmp	r3, #32
 8001c5c:	f040 808c 	bne.w	8001d78 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d002      	beq.n	8001c6c <HAL_UART_Receive+0x2e>
 8001c66:	88fb      	ldrh	r3, [r7, #6]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d101      	bne.n	8001c70 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e084      	b.n	8001d7a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d101      	bne.n	8001c7e <HAL_UART_Receive+0x40>
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	e07d      	b.n	8001d7a <HAL_UART_Receive+0x13c>
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2201      	movs	r2, #1
 8001c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2222      	movs	r2, #34	; 0x22
 8001c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2200      	movs	r2, #0
 8001c98:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001c9a:	f7fe ffc9 	bl	8000c30 <HAL_GetTick>
 8001c9e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	88fa      	ldrh	r2, [r7, #6]
 8001ca4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	88fa      	ldrh	r2, [r7, #6]
 8001caa:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cb4:	d108      	bne.n	8001cc8 <HAL_UART_Receive+0x8a>
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	691b      	ldr	r3, [r3, #16]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d104      	bne.n	8001cc8 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	61bb      	str	r3, [r7, #24]
 8001cc6:	e003      	b.n	8001cd0 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001cd8:	e043      	b.n	8001d62 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	9300      	str	r3, [sp, #0]
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	2120      	movs	r1, #32
 8001ce4:	68f8      	ldr	r0, [r7, #12]
 8001ce6:	f000 f84c 	bl	8001d82 <UART_WaitOnFlagUntilTimeout>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e042      	b.n	8001d7a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d10c      	bne.n	8001d14 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	3302      	adds	r3, #2
 8001d10:	61bb      	str	r3, [r7, #24]
 8001d12:	e01f      	b.n	8001d54 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d1c:	d007      	beq.n	8001d2e <HAL_UART_Receive+0xf0>
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d10a      	bne.n	8001d3c <HAL_UART_Receive+0xfe>
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d106      	bne.n	8001d3c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	b2da      	uxtb	r2, r3
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	701a      	strb	r2, [r3, #0]
 8001d3a:	e008      	b.n	8001d4e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d48:	b2da      	uxtb	r2, r3
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	3301      	adds	r3, #1
 8001d52:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	b29a      	uxth	r2, r3
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d1b6      	bne.n	8001cda <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2220      	movs	r2, #32
 8001d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8001d74:	2300      	movs	r3, #0
 8001d76:	e000      	b.n	8001d7a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8001d78:	2302      	movs	r3, #2
  }
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3720      	adds	r7, #32
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b090      	sub	sp, #64	; 0x40
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	60f8      	str	r0, [r7, #12]
 8001d8a:	60b9      	str	r1, [r7, #8]
 8001d8c:	603b      	str	r3, [r7, #0]
 8001d8e:	4613      	mov	r3, r2
 8001d90:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d92:	e050      	b.n	8001e36 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d9a:	d04c      	beq.n	8001e36 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001d9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d007      	beq.n	8001db2 <UART_WaitOnFlagUntilTimeout+0x30>
 8001da2:	f7fe ff45 	bl	8000c30 <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d241      	bcs.n	8001e36 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	330c      	adds	r3, #12
 8001db8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dbc:	e853 3f00 	ldrex	r3, [r3]
 8001dc0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	330c      	adds	r3, #12
 8001dd0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001dd2:	637a      	str	r2, [r7, #52]	; 0x34
 8001dd4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001dd6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001dd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001dda:	e841 2300 	strex	r3, r2, [r1]
 8001dde:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1e5      	bne.n	8001db2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	3314      	adds	r3, #20
 8001dec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	e853 3f00 	ldrex	r3, [r3]
 8001df4:	613b      	str	r3, [r7, #16]
   return(result);
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	f023 0301 	bic.w	r3, r3, #1
 8001dfc:	63bb      	str	r3, [r7, #56]	; 0x38
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	3314      	adds	r3, #20
 8001e04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e06:	623a      	str	r2, [r7, #32]
 8001e08:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e0a:	69f9      	ldr	r1, [r7, #28]
 8001e0c:	6a3a      	ldr	r2, [r7, #32]
 8001e0e:	e841 2300 	strex	r3, r2, [r1]
 8001e12:	61bb      	str	r3, [r7, #24]
   return(result);
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d1e5      	bne.n	8001de6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2220      	movs	r2, #32
 8001e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2220      	movs	r2, #32
 8001e26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e00f      	b.n	8001e56 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	68ba      	ldr	r2, [r7, #8]
 8001e42:	429a      	cmp	r2, r3
 8001e44:	bf0c      	ite	eq
 8001e46:	2301      	moveq	r3, #1
 8001e48:	2300      	movne	r3, #0
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	79fb      	ldrb	r3, [r7, #7]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d09f      	beq.n	8001d94 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3740      	adds	r7, #64	; 0x40
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
	...

08001e60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e64:	b0c0      	sub	sp, #256	; 0x100
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	691b      	ldr	r3, [r3, #16]
 8001e74:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e7c:	68d9      	ldr	r1, [r3, #12]
 8001e7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	ea40 0301 	orr.w	r3, r0, r1
 8001e88:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001e8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e8e:	689a      	ldr	r2, [r3, #8]
 8001e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	431a      	orrs	r2, r3
 8001e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e9c:	695b      	ldr	r3, [r3, #20]
 8001e9e:	431a      	orrs	r2, r3
 8001ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ea4:	69db      	ldr	r3, [r3, #28]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001eb8:	f021 010c 	bic.w	r1, r1, #12
 8001ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001ec6:	430b      	orrs	r3, r1
 8001ec8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	695b      	ldr	r3, [r3, #20]
 8001ed2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001ed6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001eda:	6999      	ldr	r1, [r3, #24]
 8001edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	ea40 0301 	orr.w	r3, r0, r1
 8001ee6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	4b8f      	ldr	r3, [pc, #572]	; (800212c <UART_SetConfig+0x2cc>)
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d005      	beq.n	8001f00 <UART_SetConfig+0xa0>
 8001ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	4b8d      	ldr	r3, [pc, #564]	; (8002130 <UART_SetConfig+0x2d0>)
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d104      	bne.n	8001f0a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001f00:	f7ff fdaa 	bl	8001a58 <HAL_RCC_GetPCLK2Freq>
 8001f04:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001f08:	e003      	b.n	8001f12 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001f0a:	f7ff fd91 	bl	8001a30 <HAL_RCC_GetPCLK1Freq>
 8001f0e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f16:	69db      	ldr	r3, [r3, #28]
 8001f18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f1c:	f040 810c 	bne.w	8002138 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001f20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f24:	2200      	movs	r2, #0
 8001f26:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001f2a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001f2e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001f32:	4622      	mov	r2, r4
 8001f34:	462b      	mov	r3, r5
 8001f36:	1891      	adds	r1, r2, r2
 8001f38:	65b9      	str	r1, [r7, #88]	; 0x58
 8001f3a:	415b      	adcs	r3, r3
 8001f3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001f3e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001f42:	4621      	mov	r1, r4
 8001f44:	eb12 0801 	adds.w	r8, r2, r1
 8001f48:	4629      	mov	r1, r5
 8001f4a:	eb43 0901 	adc.w	r9, r3, r1
 8001f4e:	f04f 0200 	mov.w	r2, #0
 8001f52:	f04f 0300 	mov.w	r3, #0
 8001f56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f62:	4690      	mov	r8, r2
 8001f64:	4699      	mov	r9, r3
 8001f66:	4623      	mov	r3, r4
 8001f68:	eb18 0303 	adds.w	r3, r8, r3
 8001f6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001f70:	462b      	mov	r3, r5
 8001f72:	eb49 0303 	adc.w	r3, r9, r3
 8001f76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001f86:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001f8a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001f8e:	460b      	mov	r3, r1
 8001f90:	18db      	adds	r3, r3, r3
 8001f92:	653b      	str	r3, [r7, #80]	; 0x50
 8001f94:	4613      	mov	r3, r2
 8001f96:	eb42 0303 	adc.w	r3, r2, r3
 8001f9a:	657b      	str	r3, [r7, #84]	; 0x54
 8001f9c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001fa0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001fa4:	f7fe f96c 	bl	8000280 <__aeabi_uldivmod>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	460b      	mov	r3, r1
 8001fac:	4b61      	ldr	r3, [pc, #388]	; (8002134 <UART_SetConfig+0x2d4>)
 8001fae:	fba3 2302 	umull	r2, r3, r3, r2
 8001fb2:	095b      	lsrs	r3, r3, #5
 8001fb4:	011c      	lsls	r4, r3, #4
 8001fb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001fc0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001fc4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001fc8:	4642      	mov	r2, r8
 8001fca:	464b      	mov	r3, r9
 8001fcc:	1891      	adds	r1, r2, r2
 8001fce:	64b9      	str	r1, [r7, #72]	; 0x48
 8001fd0:	415b      	adcs	r3, r3
 8001fd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001fd4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001fd8:	4641      	mov	r1, r8
 8001fda:	eb12 0a01 	adds.w	sl, r2, r1
 8001fde:	4649      	mov	r1, r9
 8001fe0:	eb43 0b01 	adc.w	fp, r3, r1
 8001fe4:	f04f 0200 	mov.w	r2, #0
 8001fe8:	f04f 0300 	mov.w	r3, #0
 8001fec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001ff0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001ff4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001ff8:	4692      	mov	sl, r2
 8001ffa:	469b      	mov	fp, r3
 8001ffc:	4643      	mov	r3, r8
 8001ffe:	eb1a 0303 	adds.w	r3, sl, r3
 8002002:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002006:	464b      	mov	r3, r9
 8002008:	eb4b 0303 	adc.w	r3, fp, r3
 800200c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800201c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002020:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002024:	460b      	mov	r3, r1
 8002026:	18db      	adds	r3, r3, r3
 8002028:	643b      	str	r3, [r7, #64]	; 0x40
 800202a:	4613      	mov	r3, r2
 800202c:	eb42 0303 	adc.w	r3, r2, r3
 8002030:	647b      	str	r3, [r7, #68]	; 0x44
 8002032:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002036:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800203a:	f7fe f921 	bl	8000280 <__aeabi_uldivmod>
 800203e:	4602      	mov	r2, r0
 8002040:	460b      	mov	r3, r1
 8002042:	4611      	mov	r1, r2
 8002044:	4b3b      	ldr	r3, [pc, #236]	; (8002134 <UART_SetConfig+0x2d4>)
 8002046:	fba3 2301 	umull	r2, r3, r3, r1
 800204a:	095b      	lsrs	r3, r3, #5
 800204c:	2264      	movs	r2, #100	; 0x64
 800204e:	fb02 f303 	mul.w	r3, r2, r3
 8002052:	1acb      	subs	r3, r1, r3
 8002054:	00db      	lsls	r3, r3, #3
 8002056:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800205a:	4b36      	ldr	r3, [pc, #216]	; (8002134 <UART_SetConfig+0x2d4>)
 800205c:	fba3 2302 	umull	r2, r3, r3, r2
 8002060:	095b      	lsrs	r3, r3, #5
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002068:	441c      	add	r4, r3
 800206a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800206e:	2200      	movs	r2, #0
 8002070:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002074:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002078:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800207c:	4642      	mov	r2, r8
 800207e:	464b      	mov	r3, r9
 8002080:	1891      	adds	r1, r2, r2
 8002082:	63b9      	str	r1, [r7, #56]	; 0x38
 8002084:	415b      	adcs	r3, r3
 8002086:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002088:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800208c:	4641      	mov	r1, r8
 800208e:	1851      	adds	r1, r2, r1
 8002090:	6339      	str	r1, [r7, #48]	; 0x30
 8002092:	4649      	mov	r1, r9
 8002094:	414b      	adcs	r3, r1
 8002096:	637b      	str	r3, [r7, #52]	; 0x34
 8002098:	f04f 0200 	mov.w	r2, #0
 800209c:	f04f 0300 	mov.w	r3, #0
 80020a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80020a4:	4659      	mov	r1, fp
 80020a6:	00cb      	lsls	r3, r1, #3
 80020a8:	4651      	mov	r1, sl
 80020aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80020ae:	4651      	mov	r1, sl
 80020b0:	00ca      	lsls	r2, r1, #3
 80020b2:	4610      	mov	r0, r2
 80020b4:	4619      	mov	r1, r3
 80020b6:	4603      	mov	r3, r0
 80020b8:	4642      	mov	r2, r8
 80020ba:	189b      	adds	r3, r3, r2
 80020bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80020c0:	464b      	mov	r3, r9
 80020c2:	460a      	mov	r2, r1
 80020c4:	eb42 0303 	adc.w	r3, r2, r3
 80020c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80020cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80020d8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80020dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80020e0:	460b      	mov	r3, r1
 80020e2:	18db      	adds	r3, r3, r3
 80020e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80020e6:	4613      	mov	r3, r2
 80020e8:	eb42 0303 	adc.w	r3, r2, r3
 80020ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80020f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80020f6:	f7fe f8c3 	bl	8000280 <__aeabi_uldivmod>
 80020fa:	4602      	mov	r2, r0
 80020fc:	460b      	mov	r3, r1
 80020fe:	4b0d      	ldr	r3, [pc, #52]	; (8002134 <UART_SetConfig+0x2d4>)
 8002100:	fba3 1302 	umull	r1, r3, r3, r2
 8002104:	095b      	lsrs	r3, r3, #5
 8002106:	2164      	movs	r1, #100	; 0x64
 8002108:	fb01 f303 	mul.w	r3, r1, r3
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	3332      	adds	r3, #50	; 0x32
 8002112:	4a08      	ldr	r2, [pc, #32]	; (8002134 <UART_SetConfig+0x2d4>)
 8002114:	fba2 2303 	umull	r2, r3, r2, r3
 8002118:	095b      	lsrs	r3, r3, #5
 800211a:	f003 0207 	and.w	r2, r3, #7
 800211e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4422      	add	r2, r4
 8002126:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002128:	e106      	b.n	8002338 <UART_SetConfig+0x4d8>
 800212a:	bf00      	nop
 800212c:	40011000 	.word	0x40011000
 8002130:	40011400 	.word	0x40011400
 8002134:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002138:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800213c:	2200      	movs	r2, #0
 800213e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002142:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002146:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800214a:	4642      	mov	r2, r8
 800214c:	464b      	mov	r3, r9
 800214e:	1891      	adds	r1, r2, r2
 8002150:	6239      	str	r1, [r7, #32]
 8002152:	415b      	adcs	r3, r3
 8002154:	627b      	str	r3, [r7, #36]	; 0x24
 8002156:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800215a:	4641      	mov	r1, r8
 800215c:	1854      	adds	r4, r2, r1
 800215e:	4649      	mov	r1, r9
 8002160:	eb43 0501 	adc.w	r5, r3, r1
 8002164:	f04f 0200 	mov.w	r2, #0
 8002168:	f04f 0300 	mov.w	r3, #0
 800216c:	00eb      	lsls	r3, r5, #3
 800216e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002172:	00e2      	lsls	r2, r4, #3
 8002174:	4614      	mov	r4, r2
 8002176:	461d      	mov	r5, r3
 8002178:	4643      	mov	r3, r8
 800217a:	18e3      	adds	r3, r4, r3
 800217c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002180:	464b      	mov	r3, r9
 8002182:	eb45 0303 	adc.w	r3, r5, r3
 8002186:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800218a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002196:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800219a:	f04f 0200 	mov.w	r2, #0
 800219e:	f04f 0300 	mov.w	r3, #0
 80021a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80021a6:	4629      	mov	r1, r5
 80021a8:	008b      	lsls	r3, r1, #2
 80021aa:	4621      	mov	r1, r4
 80021ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80021b0:	4621      	mov	r1, r4
 80021b2:	008a      	lsls	r2, r1, #2
 80021b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80021b8:	f7fe f862 	bl	8000280 <__aeabi_uldivmod>
 80021bc:	4602      	mov	r2, r0
 80021be:	460b      	mov	r3, r1
 80021c0:	4b60      	ldr	r3, [pc, #384]	; (8002344 <UART_SetConfig+0x4e4>)
 80021c2:	fba3 2302 	umull	r2, r3, r3, r2
 80021c6:	095b      	lsrs	r3, r3, #5
 80021c8:	011c      	lsls	r4, r3, #4
 80021ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80021ce:	2200      	movs	r2, #0
 80021d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80021d4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80021d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80021dc:	4642      	mov	r2, r8
 80021de:	464b      	mov	r3, r9
 80021e0:	1891      	adds	r1, r2, r2
 80021e2:	61b9      	str	r1, [r7, #24]
 80021e4:	415b      	adcs	r3, r3
 80021e6:	61fb      	str	r3, [r7, #28]
 80021e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021ec:	4641      	mov	r1, r8
 80021ee:	1851      	adds	r1, r2, r1
 80021f0:	6139      	str	r1, [r7, #16]
 80021f2:	4649      	mov	r1, r9
 80021f4:	414b      	adcs	r3, r1
 80021f6:	617b      	str	r3, [r7, #20]
 80021f8:	f04f 0200 	mov.w	r2, #0
 80021fc:	f04f 0300 	mov.w	r3, #0
 8002200:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002204:	4659      	mov	r1, fp
 8002206:	00cb      	lsls	r3, r1, #3
 8002208:	4651      	mov	r1, sl
 800220a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800220e:	4651      	mov	r1, sl
 8002210:	00ca      	lsls	r2, r1, #3
 8002212:	4610      	mov	r0, r2
 8002214:	4619      	mov	r1, r3
 8002216:	4603      	mov	r3, r0
 8002218:	4642      	mov	r2, r8
 800221a:	189b      	adds	r3, r3, r2
 800221c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002220:	464b      	mov	r3, r9
 8002222:	460a      	mov	r2, r1
 8002224:	eb42 0303 	adc.w	r3, r2, r3
 8002228:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800222c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	2200      	movs	r2, #0
 8002234:	67bb      	str	r3, [r7, #120]	; 0x78
 8002236:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002238:	f04f 0200 	mov.w	r2, #0
 800223c:	f04f 0300 	mov.w	r3, #0
 8002240:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002244:	4649      	mov	r1, r9
 8002246:	008b      	lsls	r3, r1, #2
 8002248:	4641      	mov	r1, r8
 800224a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800224e:	4641      	mov	r1, r8
 8002250:	008a      	lsls	r2, r1, #2
 8002252:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002256:	f7fe f813 	bl	8000280 <__aeabi_uldivmod>
 800225a:	4602      	mov	r2, r0
 800225c:	460b      	mov	r3, r1
 800225e:	4611      	mov	r1, r2
 8002260:	4b38      	ldr	r3, [pc, #224]	; (8002344 <UART_SetConfig+0x4e4>)
 8002262:	fba3 2301 	umull	r2, r3, r3, r1
 8002266:	095b      	lsrs	r3, r3, #5
 8002268:	2264      	movs	r2, #100	; 0x64
 800226a:	fb02 f303 	mul.w	r3, r2, r3
 800226e:	1acb      	subs	r3, r1, r3
 8002270:	011b      	lsls	r3, r3, #4
 8002272:	3332      	adds	r3, #50	; 0x32
 8002274:	4a33      	ldr	r2, [pc, #204]	; (8002344 <UART_SetConfig+0x4e4>)
 8002276:	fba2 2303 	umull	r2, r3, r2, r3
 800227a:	095b      	lsrs	r3, r3, #5
 800227c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002280:	441c      	add	r4, r3
 8002282:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002286:	2200      	movs	r2, #0
 8002288:	673b      	str	r3, [r7, #112]	; 0x70
 800228a:	677a      	str	r2, [r7, #116]	; 0x74
 800228c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002290:	4642      	mov	r2, r8
 8002292:	464b      	mov	r3, r9
 8002294:	1891      	adds	r1, r2, r2
 8002296:	60b9      	str	r1, [r7, #8]
 8002298:	415b      	adcs	r3, r3
 800229a:	60fb      	str	r3, [r7, #12]
 800229c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80022a0:	4641      	mov	r1, r8
 80022a2:	1851      	adds	r1, r2, r1
 80022a4:	6039      	str	r1, [r7, #0]
 80022a6:	4649      	mov	r1, r9
 80022a8:	414b      	adcs	r3, r1
 80022aa:	607b      	str	r3, [r7, #4]
 80022ac:	f04f 0200 	mov.w	r2, #0
 80022b0:	f04f 0300 	mov.w	r3, #0
 80022b4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80022b8:	4659      	mov	r1, fp
 80022ba:	00cb      	lsls	r3, r1, #3
 80022bc:	4651      	mov	r1, sl
 80022be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80022c2:	4651      	mov	r1, sl
 80022c4:	00ca      	lsls	r2, r1, #3
 80022c6:	4610      	mov	r0, r2
 80022c8:	4619      	mov	r1, r3
 80022ca:	4603      	mov	r3, r0
 80022cc:	4642      	mov	r2, r8
 80022ce:	189b      	adds	r3, r3, r2
 80022d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80022d2:	464b      	mov	r3, r9
 80022d4:	460a      	mov	r2, r1
 80022d6:	eb42 0303 	adc.w	r3, r2, r3
 80022da:	66fb      	str	r3, [r7, #108]	; 0x6c
 80022dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	663b      	str	r3, [r7, #96]	; 0x60
 80022e6:	667a      	str	r2, [r7, #100]	; 0x64
 80022e8:	f04f 0200 	mov.w	r2, #0
 80022ec:	f04f 0300 	mov.w	r3, #0
 80022f0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80022f4:	4649      	mov	r1, r9
 80022f6:	008b      	lsls	r3, r1, #2
 80022f8:	4641      	mov	r1, r8
 80022fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80022fe:	4641      	mov	r1, r8
 8002300:	008a      	lsls	r2, r1, #2
 8002302:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002306:	f7fd ffbb 	bl	8000280 <__aeabi_uldivmod>
 800230a:	4602      	mov	r2, r0
 800230c:	460b      	mov	r3, r1
 800230e:	4b0d      	ldr	r3, [pc, #52]	; (8002344 <UART_SetConfig+0x4e4>)
 8002310:	fba3 1302 	umull	r1, r3, r3, r2
 8002314:	095b      	lsrs	r3, r3, #5
 8002316:	2164      	movs	r1, #100	; 0x64
 8002318:	fb01 f303 	mul.w	r3, r1, r3
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	011b      	lsls	r3, r3, #4
 8002320:	3332      	adds	r3, #50	; 0x32
 8002322:	4a08      	ldr	r2, [pc, #32]	; (8002344 <UART_SetConfig+0x4e4>)
 8002324:	fba2 2303 	umull	r2, r3, r2, r3
 8002328:	095b      	lsrs	r3, r3, #5
 800232a:	f003 020f 	and.w	r2, r3, #15
 800232e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4422      	add	r2, r4
 8002336:	609a      	str	r2, [r3, #8]
}
 8002338:	bf00      	nop
 800233a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800233e:	46bd      	mov	sp, r7
 8002340:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002344:	51eb851f 	.word	0x51eb851f

08002348 <std>:
 8002348:	2300      	movs	r3, #0
 800234a:	b510      	push	{r4, lr}
 800234c:	4604      	mov	r4, r0
 800234e:	e9c0 3300 	strd	r3, r3, [r0]
 8002352:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002356:	6083      	str	r3, [r0, #8]
 8002358:	8181      	strh	r1, [r0, #12]
 800235a:	6643      	str	r3, [r0, #100]	; 0x64
 800235c:	81c2      	strh	r2, [r0, #14]
 800235e:	6183      	str	r3, [r0, #24]
 8002360:	4619      	mov	r1, r3
 8002362:	2208      	movs	r2, #8
 8002364:	305c      	adds	r0, #92	; 0x5c
 8002366:	f000 faad 	bl	80028c4 <memset>
 800236a:	4b05      	ldr	r3, [pc, #20]	; (8002380 <std+0x38>)
 800236c:	6263      	str	r3, [r4, #36]	; 0x24
 800236e:	4b05      	ldr	r3, [pc, #20]	; (8002384 <std+0x3c>)
 8002370:	62a3      	str	r3, [r4, #40]	; 0x28
 8002372:	4b05      	ldr	r3, [pc, #20]	; (8002388 <std+0x40>)
 8002374:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002376:	4b05      	ldr	r3, [pc, #20]	; (800238c <std+0x44>)
 8002378:	6224      	str	r4, [r4, #32]
 800237a:	6323      	str	r3, [r4, #48]	; 0x30
 800237c:	bd10      	pop	{r4, pc}
 800237e:	bf00      	nop
 8002380:	08002715 	.word	0x08002715
 8002384:	08002737 	.word	0x08002737
 8002388:	0800276f 	.word	0x0800276f
 800238c:	08002793 	.word	0x08002793

08002390 <stdio_exit_handler>:
 8002390:	4a02      	ldr	r2, [pc, #8]	; (800239c <stdio_exit_handler+0xc>)
 8002392:	4903      	ldr	r1, [pc, #12]	; (80023a0 <stdio_exit_handler+0x10>)
 8002394:	4803      	ldr	r0, [pc, #12]	; (80023a4 <stdio_exit_handler+0x14>)
 8002396:	f000 b869 	b.w	800246c <_fwalk_sglue>
 800239a:	bf00      	nop
 800239c:	2000000c 	.word	0x2000000c
 80023a0:	08003875 	.word	0x08003875
 80023a4:	20000018 	.word	0x20000018

080023a8 <cleanup_stdio>:
 80023a8:	6841      	ldr	r1, [r0, #4]
 80023aa:	4b0c      	ldr	r3, [pc, #48]	; (80023dc <cleanup_stdio+0x34>)
 80023ac:	4299      	cmp	r1, r3
 80023ae:	b510      	push	{r4, lr}
 80023b0:	4604      	mov	r4, r0
 80023b2:	d001      	beq.n	80023b8 <cleanup_stdio+0x10>
 80023b4:	f001 fa5e 	bl	8003874 <_fflush_r>
 80023b8:	68a1      	ldr	r1, [r4, #8]
 80023ba:	4b09      	ldr	r3, [pc, #36]	; (80023e0 <cleanup_stdio+0x38>)
 80023bc:	4299      	cmp	r1, r3
 80023be:	d002      	beq.n	80023c6 <cleanup_stdio+0x1e>
 80023c0:	4620      	mov	r0, r4
 80023c2:	f001 fa57 	bl	8003874 <_fflush_r>
 80023c6:	68e1      	ldr	r1, [r4, #12]
 80023c8:	4b06      	ldr	r3, [pc, #24]	; (80023e4 <cleanup_stdio+0x3c>)
 80023ca:	4299      	cmp	r1, r3
 80023cc:	d004      	beq.n	80023d8 <cleanup_stdio+0x30>
 80023ce:	4620      	mov	r0, r4
 80023d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80023d4:	f001 ba4e 	b.w	8003874 <_fflush_r>
 80023d8:	bd10      	pop	{r4, pc}
 80023da:	bf00      	nop
 80023dc:	200000d0 	.word	0x200000d0
 80023e0:	20000138 	.word	0x20000138
 80023e4:	200001a0 	.word	0x200001a0

080023e8 <global_stdio_init.part.0>:
 80023e8:	b510      	push	{r4, lr}
 80023ea:	4b0b      	ldr	r3, [pc, #44]	; (8002418 <global_stdio_init.part.0+0x30>)
 80023ec:	4c0b      	ldr	r4, [pc, #44]	; (800241c <global_stdio_init.part.0+0x34>)
 80023ee:	4a0c      	ldr	r2, [pc, #48]	; (8002420 <global_stdio_init.part.0+0x38>)
 80023f0:	601a      	str	r2, [r3, #0]
 80023f2:	4620      	mov	r0, r4
 80023f4:	2200      	movs	r2, #0
 80023f6:	2104      	movs	r1, #4
 80023f8:	f7ff ffa6 	bl	8002348 <std>
 80023fc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002400:	2201      	movs	r2, #1
 8002402:	2109      	movs	r1, #9
 8002404:	f7ff ffa0 	bl	8002348 <std>
 8002408:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800240c:	2202      	movs	r2, #2
 800240e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002412:	2112      	movs	r1, #18
 8002414:	f7ff bf98 	b.w	8002348 <std>
 8002418:	20000208 	.word	0x20000208
 800241c:	200000d0 	.word	0x200000d0
 8002420:	08002391 	.word	0x08002391

08002424 <__sfp_lock_acquire>:
 8002424:	4801      	ldr	r0, [pc, #4]	; (800242c <__sfp_lock_acquire+0x8>)
 8002426:	f000 bac5 	b.w	80029b4 <__retarget_lock_acquire_recursive>
 800242a:	bf00      	nop
 800242c:	20000211 	.word	0x20000211

08002430 <__sfp_lock_release>:
 8002430:	4801      	ldr	r0, [pc, #4]	; (8002438 <__sfp_lock_release+0x8>)
 8002432:	f000 bac0 	b.w	80029b6 <__retarget_lock_release_recursive>
 8002436:	bf00      	nop
 8002438:	20000211 	.word	0x20000211

0800243c <__sinit>:
 800243c:	b510      	push	{r4, lr}
 800243e:	4604      	mov	r4, r0
 8002440:	f7ff fff0 	bl	8002424 <__sfp_lock_acquire>
 8002444:	6a23      	ldr	r3, [r4, #32]
 8002446:	b11b      	cbz	r3, 8002450 <__sinit+0x14>
 8002448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800244c:	f7ff bff0 	b.w	8002430 <__sfp_lock_release>
 8002450:	4b04      	ldr	r3, [pc, #16]	; (8002464 <__sinit+0x28>)
 8002452:	6223      	str	r3, [r4, #32]
 8002454:	4b04      	ldr	r3, [pc, #16]	; (8002468 <__sinit+0x2c>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d1f5      	bne.n	8002448 <__sinit+0xc>
 800245c:	f7ff ffc4 	bl	80023e8 <global_stdio_init.part.0>
 8002460:	e7f2      	b.n	8002448 <__sinit+0xc>
 8002462:	bf00      	nop
 8002464:	080023a9 	.word	0x080023a9
 8002468:	20000208 	.word	0x20000208

0800246c <_fwalk_sglue>:
 800246c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002470:	4607      	mov	r7, r0
 8002472:	4688      	mov	r8, r1
 8002474:	4614      	mov	r4, r2
 8002476:	2600      	movs	r6, #0
 8002478:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800247c:	f1b9 0901 	subs.w	r9, r9, #1
 8002480:	d505      	bpl.n	800248e <_fwalk_sglue+0x22>
 8002482:	6824      	ldr	r4, [r4, #0]
 8002484:	2c00      	cmp	r4, #0
 8002486:	d1f7      	bne.n	8002478 <_fwalk_sglue+0xc>
 8002488:	4630      	mov	r0, r6
 800248a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800248e:	89ab      	ldrh	r3, [r5, #12]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d907      	bls.n	80024a4 <_fwalk_sglue+0x38>
 8002494:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002498:	3301      	adds	r3, #1
 800249a:	d003      	beq.n	80024a4 <_fwalk_sglue+0x38>
 800249c:	4629      	mov	r1, r5
 800249e:	4638      	mov	r0, r7
 80024a0:	47c0      	blx	r8
 80024a2:	4306      	orrs	r6, r0
 80024a4:	3568      	adds	r5, #104	; 0x68
 80024a6:	e7e9      	b.n	800247c <_fwalk_sglue+0x10>

080024a8 <iprintf>:
 80024a8:	b40f      	push	{r0, r1, r2, r3}
 80024aa:	b507      	push	{r0, r1, r2, lr}
 80024ac:	4906      	ldr	r1, [pc, #24]	; (80024c8 <iprintf+0x20>)
 80024ae:	ab04      	add	r3, sp, #16
 80024b0:	6808      	ldr	r0, [r1, #0]
 80024b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80024b6:	6881      	ldr	r1, [r0, #8]
 80024b8:	9301      	str	r3, [sp, #4]
 80024ba:	f000 fba7 	bl	8002c0c <_vfiprintf_r>
 80024be:	b003      	add	sp, #12
 80024c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80024c4:	b004      	add	sp, #16
 80024c6:	4770      	bx	lr
 80024c8:	20000064 	.word	0x20000064

080024cc <_puts_r>:
 80024cc:	6a03      	ldr	r3, [r0, #32]
 80024ce:	b570      	push	{r4, r5, r6, lr}
 80024d0:	6884      	ldr	r4, [r0, #8]
 80024d2:	4605      	mov	r5, r0
 80024d4:	460e      	mov	r6, r1
 80024d6:	b90b      	cbnz	r3, 80024dc <_puts_r+0x10>
 80024d8:	f7ff ffb0 	bl	800243c <__sinit>
 80024dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80024de:	07db      	lsls	r3, r3, #31
 80024e0:	d405      	bmi.n	80024ee <_puts_r+0x22>
 80024e2:	89a3      	ldrh	r3, [r4, #12]
 80024e4:	0598      	lsls	r0, r3, #22
 80024e6:	d402      	bmi.n	80024ee <_puts_r+0x22>
 80024e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80024ea:	f000 fa63 	bl	80029b4 <__retarget_lock_acquire_recursive>
 80024ee:	89a3      	ldrh	r3, [r4, #12]
 80024f0:	0719      	lsls	r1, r3, #28
 80024f2:	d513      	bpl.n	800251c <_puts_r+0x50>
 80024f4:	6923      	ldr	r3, [r4, #16]
 80024f6:	b18b      	cbz	r3, 800251c <_puts_r+0x50>
 80024f8:	3e01      	subs	r6, #1
 80024fa:	68a3      	ldr	r3, [r4, #8]
 80024fc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002500:	3b01      	subs	r3, #1
 8002502:	60a3      	str	r3, [r4, #8]
 8002504:	b9e9      	cbnz	r1, 8002542 <_puts_r+0x76>
 8002506:	2b00      	cmp	r3, #0
 8002508:	da2e      	bge.n	8002568 <_puts_r+0x9c>
 800250a:	4622      	mov	r2, r4
 800250c:	210a      	movs	r1, #10
 800250e:	4628      	mov	r0, r5
 8002510:	f000 f943 	bl	800279a <__swbuf_r>
 8002514:	3001      	adds	r0, #1
 8002516:	d007      	beq.n	8002528 <_puts_r+0x5c>
 8002518:	250a      	movs	r5, #10
 800251a:	e007      	b.n	800252c <_puts_r+0x60>
 800251c:	4621      	mov	r1, r4
 800251e:	4628      	mov	r0, r5
 8002520:	f000 f978 	bl	8002814 <__swsetup_r>
 8002524:	2800      	cmp	r0, #0
 8002526:	d0e7      	beq.n	80024f8 <_puts_r+0x2c>
 8002528:	f04f 35ff 	mov.w	r5, #4294967295
 800252c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800252e:	07da      	lsls	r2, r3, #31
 8002530:	d405      	bmi.n	800253e <_puts_r+0x72>
 8002532:	89a3      	ldrh	r3, [r4, #12]
 8002534:	059b      	lsls	r3, r3, #22
 8002536:	d402      	bmi.n	800253e <_puts_r+0x72>
 8002538:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800253a:	f000 fa3c 	bl	80029b6 <__retarget_lock_release_recursive>
 800253e:	4628      	mov	r0, r5
 8002540:	bd70      	pop	{r4, r5, r6, pc}
 8002542:	2b00      	cmp	r3, #0
 8002544:	da04      	bge.n	8002550 <_puts_r+0x84>
 8002546:	69a2      	ldr	r2, [r4, #24]
 8002548:	429a      	cmp	r2, r3
 800254a:	dc06      	bgt.n	800255a <_puts_r+0x8e>
 800254c:	290a      	cmp	r1, #10
 800254e:	d004      	beq.n	800255a <_puts_r+0x8e>
 8002550:	6823      	ldr	r3, [r4, #0]
 8002552:	1c5a      	adds	r2, r3, #1
 8002554:	6022      	str	r2, [r4, #0]
 8002556:	7019      	strb	r1, [r3, #0]
 8002558:	e7cf      	b.n	80024fa <_puts_r+0x2e>
 800255a:	4622      	mov	r2, r4
 800255c:	4628      	mov	r0, r5
 800255e:	f000 f91c 	bl	800279a <__swbuf_r>
 8002562:	3001      	adds	r0, #1
 8002564:	d1c9      	bne.n	80024fa <_puts_r+0x2e>
 8002566:	e7df      	b.n	8002528 <_puts_r+0x5c>
 8002568:	6823      	ldr	r3, [r4, #0]
 800256a:	250a      	movs	r5, #10
 800256c:	1c5a      	adds	r2, r3, #1
 800256e:	6022      	str	r2, [r4, #0]
 8002570:	701d      	strb	r5, [r3, #0]
 8002572:	e7db      	b.n	800252c <_puts_r+0x60>

08002574 <puts>:
 8002574:	4b02      	ldr	r3, [pc, #8]	; (8002580 <puts+0xc>)
 8002576:	4601      	mov	r1, r0
 8002578:	6818      	ldr	r0, [r3, #0]
 800257a:	f7ff bfa7 	b.w	80024cc <_puts_r>
 800257e:	bf00      	nop
 8002580:	20000064 	.word	0x20000064

08002584 <iscanf>:
 8002584:	b40f      	push	{r0, r1, r2, r3}
 8002586:	b507      	push	{r0, r1, r2, lr}
 8002588:	4906      	ldr	r1, [pc, #24]	; (80025a4 <iscanf+0x20>)
 800258a:	ab04      	add	r3, sp, #16
 800258c:	6808      	ldr	r0, [r1, #0]
 800258e:	f853 2b04 	ldr.w	r2, [r3], #4
 8002592:	6841      	ldr	r1, [r0, #4]
 8002594:	9301      	str	r3, [sp, #4]
 8002596:	f000 ff85 	bl	80034a4 <_vfiscanf_r>
 800259a:	b003      	add	sp, #12
 800259c:	f85d eb04 	ldr.w	lr, [sp], #4
 80025a0:	b004      	add	sp, #16
 80025a2:	4770      	bx	lr
 80025a4:	20000064 	.word	0x20000064

080025a8 <setbuf>:
 80025a8:	fab1 f281 	clz	r2, r1
 80025ac:	0952      	lsrs	r2, r2, #5
 80025ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025b2:	0052      	lsls	r2, r2, #1
 80025b4:	f000 b800 	b.w	80025b8 <setvbuf>

080025b8 <setvbuf>:
 80025b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80025bc:	461d      	mov	r5, r3
 80025be:	4b54      	ldr	r3, [pc, #336]	; (8002710 <setvbuf+0x158>)
 80025c0:	681f      	ldr	r7, [r3, #0]
 80025c2:	4604      	mov	r4, r0
 80025c4:	460e      	mov	r6, r1
 80025c6:	4690      	mov	r8, r2
 80025c8:	b127      	cbz	r7, 80025d4 <setvbuf+0x1c>
 80025ca:	6a3b      	ldr	r3, [r7, #32]
 80025cc:	b913      	cbnz	r3, 80025d4 <setvbuf+0x1c>
 80025ce:	4638      	mov	r0, r7
 80025d0:	f7ff ff34 	bl	800243c <__sinit>
 80025d4:	f1b8 0f02 	cmp.w	r8, #2
 80025d8:	d006      	beq.n	80025e8 <setvbuf+0x30>
 80025da:	f1b8 0f01 	cmp.w	r8, #1
 80025de:	f200 8094 	bhi.w	800270a <setvbuf+0x152>
 80025e2:	2d00      	cmp	r5, #0
 80025e4:	f2c0 8091 	blt.w	800270a <setvbuf+0x152>
 80025e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80025ea:	07da      	lsls	r2, r3, #31
 80025ec:	d405      	bmi.n	80025fa <setvbuf+0x42>
 80025ee:	89a3      	ldrh	r3, [r4, #12]
 80025f0:	059b      	lsls	r3, r3, #22
 80025f2:	d402      	bmi.n	80025fa <setvbuf+0x42>
 80025f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80025f6:	f000 f9dd 	bl	80029b4 <__retarget_lock_acquire_recursive>
 80025fa:	4621      	mov	r1, r4
 80025fc:	4638      	mov	r0, r7
 80025fe:	f001 f939 	bl	8003874 <_fflush_r>
 8002602:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002604:	b141      	cbz	r1, 8002618 <setvbuf+0x60>
 8002606:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800260a:	4299      	cmp	r1, r3
 800260c:	d002      	beq.n	8002614 <setvbuf+0x5c>
 800260e:	4638      	mov	r0, r7
 8002610:	f000 f9d2 	bl	80029b8 <_free_r>
 8002614:	2300      	movs	r3, #0
 8002616:	6363      	str	r3, [r4, #52]	; 0x34
 8002618:	2300      	movs	r3, #0
 800261a:	61a3      	str	r3, [r4, #24]
 800261c:	6063      	str	r3, [r4, #4]
 800261e:	89a3      	ldrh	r3, [r4, #12]
 8002620:	0618      	lsls	r0, r3, #24
 8002622:	d503      	bpl.n	800262c <setvbuf+0x74>
 8002624:	6921      	ldr	r1, [r4, #16]
 8002626:	4638      	mov	r0, r7
 8002628:	f000 f9c6 	bl	80029b8 <_free_r>
 800262c:	89a3      	ldrh	r3, [r4, #12]
 800262e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8002632:	f023 0303 	bic.w	r3, r3, #3
 8002636:	f1b8 0f02 	cmp.w	r8, #2
 800263a:	81a3      	strh	r3, [r4, #12]
 800263c:	d05f      	beq.n	80026fe <setvbuf+0x146>
 800263e:	ab01      	add	r3, sp, #4
 8002640:	466a      	mov	r2, sp
 8002642:	4621      	mov	r1, r4
 8002644:	4638      	mov	r0, r7
 8002646:	f001 f93d 	bl	80038c4 <__swhatbuf_r>
 800264a:	89a3      	ldrh	r3, [r4, #12]
 800264c:	4318      	orrs	r0, r3
 800264e:	81a0      	strh	r0, [r4, #12]
 8002650:	bb2d      	cbnz	r5, 800269e <setvbuf+0xe6>
 8002652:	9d00      	ldr	r5, [sp, #0]
 8002654:	4628      	mov	r0, r5
 8002656:	f000 f9fb 	bl	8002a50 <malloc>
 800265a:	4606      	mov	r6, r0
 800265c:	2800      	cmp	r0, #0
 800265e:	d150      	bne.n	8002702 <setvbuf+0x14a>
 8002660:	f8dd 9000 	ldr.w	r9, [sp]
 8002664:	45a9      	cmp	r9, r5
 8002666:	d13e      	bne.n	80026e6 <setvbuf+0x12e>
 8002668:	f04f 35ff 	mov.w	r5, #4294967295
 800266c:	2200      	movs	r2, #0
 800266e:	60a2      	str	r2, [r4, #8]
 8002670:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8002674:	6022      	str	r2, [r4, #0]
 8002676:	6122      	str	r2, [r4, #16]
 8002678:	2201      	movs	r2, #1
 800267a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800267e:	6162      	str	r2, [r4, #20]
 8002680:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002682:	f043 0302 	orr.w	r3, r3, #2
 8002686:	07d1      	lsls	r1, r2, #31
 8002688:	81a3      	strh	r3, [r4, #12]
 800268a:	d404      	bmi.n	8002696 <setvbuf+0xde>
 800268c:	059b      	lsls	r3, r3, #22
 800268e:	d402      	bmi.n	8002696 <setvbuf+0xde>
 8002690:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002692:	f000 f990 	bl	80029b6 <__retarget_lock_release_recursive>
 8002696:	4628      	mov	r0, r5
 8002698:	b003      	add	sp, #12
 800269a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800269e:	2e00      	cmp	r6, #0
 80026a0:	d0d8      	beq.n	8002654 <setvbuf+0x9c>
 80026a2:	6a3b      	ldr	r3, [r7, #32]
 80026a4:	b913      	cbnz	r3, 80026ac <setvbuf+0xf4>
 80026a6:	4638      	mov	r0, r7
 80026a8:	f7ff fec8 	bl	800243c <__sinit>
 80026ac:	f1b8 0f01 	cmp.w	r8, #1
 80026b0:	bf08      	it	eq
 80026b2:	89a3      	ldrheq	r3, [r4, #12]
 80026b4:	6026      	str	r6, [r4, #0]
 80026b6:	bf04      	itt	eq
 80026b8:	f043 0301 	orreq.w	r3, r3, #1
 80026bc:	81a3      	strheq	r3, [r4, #12]
 80026be:	89a3      	ldrh	r3, [r4, #12]
 80026c0:	f013 0208 	ands.w	r2, r3, #8
 80026c4:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80026c8:	d01d      	beq.n	8002706 <setvbuf+0x14e>
 80026ca:	07da      	lsls	r2, r3, #31
 80026cc:	bf41      	itttt	mi
 80026ce:	2200      	movmi	r2, #0
 80026d0:	426d      	negmi	r5, r5
 80026d2:	60a2      	strmi	r2, [r4, #8]
 80026d4:	61a5      	strmi	r5, [r4, #24]
 80026d6:	bf58      	it	pl
 80026d8:	60a5      	strpl	r5, [r4, #8]
 80026da:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80026dc:	f015 0501 	ands.w	r5, r5, #1
 80026e0:	d0d4      	beq.n	800268c <setvbuf+0xd4>
 80026e2:	2500      	movs	r5, #0
 80026e4:	e7d7      	b.n	8002696 <setvbuf+0xde>
 80026e6:	4648      	mov	r0, r9
 80026e8:	f000 f9b2 	bl	8002a50 <malloc>
 80026ec:	4606      	mov	r6, r0
 80026ee:	2800      	cmp	r0, #0
 80026f0:	d0ba      	beq.n	8002668 <setvbuf+0xb0>
 80026f2:	89a3      	ldrh	r3, [r4, #12]
 80026f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026f8:	81a3      	strh	r3, [r4, #12]
 80026fa:	464d      	mov	r5, r9
 80026fc:	e7d1      	b.n	80026a2 <setvbuf+0xea>
 80026fe:	2500      	movs	r5, #0
 8002700:	e7b4      	b.n	800266c <setvbuf+0xb4>
 8002702:	46a9      	mov	r9, r5
 8002704:	e7f5      	b.n	80026f2 <setvbuf+0x13a>
 8002706:	60a2      	str	r2, [r4, #8]
 8002708:	e7e7      	b.n	80026da <setvbuf+0x122>
 800270a:	f04f 35ff 	mov.w	r5, #4294967295
 800270e:	e7c2      	b.n	8002696 <setvbuf+0xde>
 8002710:	20000064 	.word	0x20000064

08002714 <__sread>:
 8002714:	b510      	push	{r4, lr}
 8002716:	460c      	mov	r4, r1
 8002718:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800271c:	f000 f8fc 	bl	8002918 <_read_r>
 8002720:	2800      	cmp	r0, #0
 8002722:	bfab      	itete	ge
 8002724:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002726:	89a3      	ldrhlt	r3, [r4, #12]
 8002728:	181b      	addge	r3, r3, r0
 800272a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800272e:	bfac      	ite	ge
 8002730:	6563      	strge	r3, [r4, #84]	; 0x54
 8002732:	81a3      	strhlt	r3, [r4, #12]
 8002734:	bd10      	pop	{r4, pc}

08002736 <__swrite>:
 8002736:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800273a:	461f      	mov	r7, r3
 800273c:	898b      	ldrh	r3, [r1, #12]
 800273e:	05db      	lsls	r3, r3, #23
 8002740:	4605      	mov	r5, r0
 8002742:	460c      	mov	r4, r1
 8002744:	4616      	mov	r6, r2
 8002746:	d505      	bpl.n	8002754 <__swrite+0x1e>
 8002748:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800274c:	2302      	movs	r3, #2
 800274e:	2200      	movs	r2, #0
 8002750:	f000 f8d0 	bl	80028f4 <_lseek_r>
 8002754:	89a3      	ldrh	r3, [r4, #12]
 8002756:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800275a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800275e:	81a3      	strh	r3, [r4, #12]
 8002760:	4632      	mov	r2, r6
 8002762:	463b      	mov	r3, r7
 8002764:	4628      	mov	r0, r5
 8002766:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800276a:	f000 b8e7 	b.w	800293c <_write_r>

0800276e <__sseek>:
 800276e:	b510      	push	{r4, lr}
 8002770:	460c      	mov	r4, r1
 8002772:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002776:	f000 f8bd 	bl	80028f4 <_lseek_r>
 800277a:	1c43      	adds	r3, r0, #1
 800277c:	89a3      	ldrh	r3, [r4, #12]
 800277e:	bf15      	itete	ne
 8002780:	6560      	strne	r0, [r4, #84]	; 0x54
 8002782:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002786:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800278a:	81a3      	strheq	r3, [r4, #12]
 800278c:	bf18      	it	ne
 800278e:	81a3      	strhne	r3, [r4, #12]
 8002790:	bd10      	pop	{r4, pc}

08002792 <__sclose>:
 8002792:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002796:	f000 b89d 	b.w	80028d4 <_close_r>

0800279a <__swbuf_r>:
 800279a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800279c:	460e      	mov	r6, r1
 800279e:	4614      	mov	r4, r2
 80027a0:	4605      	mov	r5, r0
 80027a2:	b118      	cbz	r0, 80027ac <__swbuf_r+0x12>
 80027a4:	6a03      	ldr	r3, [r0, #32]
 80027a6:	b90b      	cbnz	r3, 80027ac <__swbuf_r+0x12>
 80027a8:	f7ff fe48 	bl	800243c <__sinit>
 80027ac:	69a3      	ldr	r3, [r4, #24]
 80027ae:	60a3      	str	r3, [r4, #8]
 80027b0:	89a3      	ldrh	r3, [r4, #12]
 80027b2:	071a      	lsls	r2, r3, #28
 80027b4:	d525      	bpl.n	8002802 <__swbuf_r+0x68>
 80027b6:	6923      	ldr	r3, [r4, #16]
 80027b8:	b31b      	cbz	r3, 8002802 <__swbuf_r+0x68>
 80027ba:	6823      	ldr	r3, [r4, #0]
 80027bc:	6922      	ldr	r2, [r4, #16]
 80027be:	1a98      	subs	r0, r3, r2
 80027c0:	6963      	ldr	r3, [r4, #20]
 80027c2:	b2f6      	uxtb	r6, r6
 80027c4:	4283      	cmp	r3, r0
 80027c6:	4637      	mov	r7, r6
 80027c8:	dc04      	bgt.n	80027d4 <__swbuf_r+0x3a>
 80027ca:	4621      	mov	r1, r4
 80027cc:	4628      	mov	r0, r5
 80027ce:	f001 f851 	bl	8003874 <_fflush_r>
 80027d2:	b9e0      	cbnz	r0, 800280e <__swbuf_r+0x74>
 80027d4:	68a3      	ldr	r3, [r4, #8]
 80027d6:	3b01      	subs	r3, #1
 80027d8:	60a3      	str	r3, [r4, #8]
 80027da:	6823      	ldr	r3, [r4, #0]
 80027dc:	1c5a      	adds	r2, r3, #1
 80027de:	6022      	str	r2, [r4, #0]
 80027e0:	701e      	strb	r6, [r3, #0]
 80027e2:	6962      	ldr	r2, [r4, #20]
 80027e4:	1c43      	adds	r3, r0, #1
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d004      	beq.n	80027f4 <__swbuf_r+0x5a>
 80027ea:	89a3      	ldrh	r3, [r4, #12]
 80027ec:	07db      	lsls	r3, r3, #31
 80027ee:	d506      	bpl.n	80027fe <__swbuf_r+0x64>
 80027f0:	2e0a      	cmp	r6, #10
 80027f2:	d104      	bne.n	80027fe <__swbuf_r+0x64>
 80027f4:	4621      	mov	r1, r4
 80027f6:	4628      	mov	r0, r5
 80027f8:	f001 f83c 	bl	8003874 <_fflush_r>
 80027fc:	b938      	cbnz	r0, 800280e <__swbuf_r+0x74>
 80027fe:	4638      	mov	r0, r7
 8002800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002802:	4621      	mov	r1, r4
 8002804:	4628      	mov	r0, r5
 8002806:	f000 f805 	bl	8002814 <__swsetup_r>
 800280a:	2800      	cmp	r0, #0
 800280c:	d0d5      	beq.n	80027ba <__swbuf_r+0x20>
 800280e:	f04f 37ff 	mov.w	r7, #4294967295
 8002812:	e7f4      	b.n	80027fe <__swbuf_r+0x64>

08002814 <__swsetup_r>:
 8002814:	b538      	push	{r3, r4, r5, lr}
 8002816:	4b2a      	ldr	r3, [pc, #168]	; (80028c0 <__swsetup_r+0xac>)
 8002818:	4605      	mov	r5, r0
 800281a:	6818      	ldr	r0, [r3, #0]
 800281c:	460c      	mov	r4, r1
 800281e:	b118      	cbz	r0, 8002828 <__swsetup_r+0x14>
 8002820:	6a03      	ldr	r3, [r0, #32]
 8002822:	b90b      	cbnz	r3, 8002828 <__swsetup_r+0x14>
 8002824:	f7ff fe0a 	bl	800243c <__sinit>
 8002828:	89a3      	ldrh	r3, [r4, #12]
 800282a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800282e:	0718      	lsls	r0, r3, #28
 8002830:	d422      	bmi.n	8002878 <__swsetup_r+0x64>
 8002832:	06d9      	lsls	r1, r3, #27
 8002834:	d407      	bmi.n	8002846 <__swsetup_r+0x32>
 8002836:	2309      	movs	r3, #9
 8002838:	602b      	str	r3, [r5, #0]
 800283a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800283e:	81a3      	strh	r3, [r4, #12]
 8002840:	f04f 30ff 	mov.w	r0, #4294967295
 8002844:	e034      	b.n	80028b0 <__swsetup_r+0x9c>
 8002846:	0758      	lsls	r0, r3, #29
 8002848:	d512      	bpl.n	8002870 <__swsetup_r+0x5c>
 800284a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800284c:	b141      	cbz	r1, 8002860 <__swsetup_r+0x4c>
 800284e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002852:	4299      	cmp	r1, r3
 8002854:	d002      	beq.n	800285c <__swsetup_r+0x48>
 8002856:	4628      	mov	r0, r5
 8002858:	f000 f8ae 	bl	80029b8 <_free_r>
 800285c:	2300      	movs	r3, #0
 800285e:	6363      	str	r3, [r4, #52]	; 0x34
 8002860:	89a3      	ldrh	r3, [r4, #12]
 8002862:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002866:	81a3      	strh	r3, [r4, #12]
 8002868:	2300      	movs	r3, #0
 800286a:	6063      	str	r3, [r4, #4]
 800286c:	6923      	ldr	r3, [r4, #16]
 800286e:	6023      	str	r3, [r4, #0]
 8002870:	89a3      	ldrh	r3, [r4, #12]
 8002872:	f043 0308 	orr.w	r3, r3, #8
 8002876:	81a3      	strh	r3, [r4, #12]
 8002878:	6923      	ldr	r3, [r4, #16]
 800287a:	b94b      	cbnz	r3, 8002890 <__swsetup_r+0x7c>
 800287c:	89a3      	ldrh	r3, [r4, #12]
 800287e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002882:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002886:	d003      	beq.n	8002890 <__swsetup_r+0x7c>
 8002888:	4621      	mov	r1, r4
 800288a:	4628      	mov	r0, r5
 800288c:	f001 f840 	bl	8003910 <__smakebuf_r>
 8002890:	89a0      	ldrh	r0, [r4, #12]
 8002892:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002896:	f010 0301 	ands.w	r3, r0, #1
 800289a:	d00a      	beq.n	80028b2 <__swsetup_r+0x9e>
 800289c:	2300      	movs	r3, #0
 800289e:	60a3      	str	r3, [r4, #8]
 80028a0:	6963      	ldr	r3, [r4, #20]
 80028a2:	425b      	negs	r3, r3
 80028a4:	61a3      	str	r3, [r4, #24]
 80028a6:	6923      	ldr	r3, [r4, #16]
 80028a8:	b943      	cbnz	r3, 80028bc <__swsetup_r+0xa8>
 80028aa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80028ae:	d1c4      	bne.n	800283a <__swsetup_r+0x26>
 80028b0:	bd38      	pop	{r3, r4, r5, pc}
 80028b2:	0781      	lsls	r1, r0, #30
 80028b4:	bf58      	it	pl
 80028b6:	6963      	ldrpl	r3, [r4, #20]
 80028b8:	60a3      	str	r3, [r4, #8]
 80028ba:	e7f4      	b.n	80028a6 <__swsetup_r+0x92>
 80028bc:	2000      	movs	r0, #0
 80028be:	e7f7      	b.n	80028b0 <__swsetup_r+0x9c>
 80028c0:	20000064 	.word	0x20000064

080028c4 <memset>:
 80028c4:	4402      	add	r2, r0
 80028c6:	4603      	mov	r3, r0
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d100      	bne.n	80028ce <memset+0xa>
 80028cc:	4770      	bx	lr
 80028ce:	f803 1b01 	strb.w	r1, [r3], #1
 80028d2:	e7f9      	b.n	80028c8 <memset+0x4>

080028d4 <_close_r>:
 80028d4:	b538      	push	{r3, r4, r5, lr}
 80028d6:	4d06      	ldr	r5, [pc, #24]	; (80028f0 <_close_r+0x1c>)
 80028d8:	2300      	movs	r3, #0
 80028da:	4604      	mov	r4, r0
 80028dc:	4608      	mov	r0, r1
 80028de:	602b      	str	r3, [r5, #0]
 80028e0:	f7fe f899 	bl	8000a16 <_close>
 80028e4:	1c43      	adds	r3, r0, #1
 80028e6:	d102      	bne.n	80028ee <_close_r+0x1a>
 80028e8:	682b      	ldr	r3, [r5, #0]
 80028ea:	b103      	cbz	r3, 80028ee <_close_r+0x1a>
 80028ec:	6023      	str	r3, [r4, #0]
 80028ee:	bd38      	pop	{r3, r4, r5, pc}
 80028f0:	2000020c 	.word	0x2000020c

080028f4 <_lseek_r>:
 80028f4:	b538      	push	{r3, r4, r5, lr}
 80028f6:	4d07      	ldr	r5, [pc, #28]	; (8002914 <_lseek_r+0x20>)
 80028f8:	4604      	mov	r4, r0
 80028fa:	4608      	mov	r0, r1
 80028fc:	4611      	mov	r1, r2
 80028fe:	2200      	movs	r2, #0
 8002900:	602a      	str	r2, [r5, #0]
 8002902:	461a      	mov	r2, r3
 8002904:	f7fe f8ae 	bl	8000a64 <_lseek>
 8002908:	1c43      	adds	r3, r0, #1
 800290a:	d102      	bne.n	8002912 <_lseek_r+0x1e>
 800290c:	682b      	ldr	r3, [r5, #0]
 800290e:	b103      	cbz	r3, 8002912 <_lseek_r+0x1e>
 8002910:	6023      	str	r3, [r4, #0]
 8002912:	bd38      	pop	{r3, r4, r5, pc}
 8002914:	2000020c 	.word	0x2000020c

08002918 <_read_r>:
 8002918:	b538      	push	{r3, r4, r5, lr}
 800291a:	4d07      	ldr	r5, [pc, #28]	; (8002938 <_read_r+0x20>)
 800291c:	4604      	mov	r4, r0
 800291e:	4608      	mov	r0, r1
 8002920:	4611      	mov	r1, r2
 8002922:	2200      	movs	r2, #0
 8002924:	602a      	str	r2, [r5, #0]
 8002926:	461a      	mov	r2, r3
 8002928:	f7fe f83c 	bl	80009a4 <_read>
 800292c:	1c43      	adds	r3, r0, #1
 800292e:	d102      	bne.n	8002936 <_read_r+0x1e>
 8002930:	682b      	ldr	r3, [r5, #0]
 8002932:	b103      	cbz	r3, 8002936 <_read_r+0x1e>
 8002934:	6023      	str	r3, [r4, #0]
 8002936:	bd38      	pop	{r3, r4, r5, pc}
 8002938:	2000020c 	.word	0x2000020c

0800293c <_write_r>:
 800293c:	b538      	push	{r3, r4, r5, lr}
 800293e:	4d07      	ldr	r5, [pc, #28]	; (800295c <_write_r+0x20>)
 8002940:	4604      	mov	r4, r0
 8002942:	4608      	mov	r0, r1
 8002944:	4611      	mov	r1, r2
 8002946:	2200      	movs	r2, #0
 8002948:	602a      	str	r2, [r5, #0]
 800294a:	461a      	mov	r2, r3
 800294c:	f7fe f847 	bl	80009de <_write>
 8002950:	1c43      	adds	r3, r0, #1
 8002952:	d102      	bne.n	800295a <_write_r+0x1e>
 8002954:	682b      	ldr	r3, [r5, #0]
 8002956:	b103      	cbz	r3, 800295a <_write_r+0x1e>
 8002958:	6023      	str	r3, [r4, #0]
 800295a:	bd38      	pop	{r3, r4, r5, pc}
 800295c:	2000020c 	.word	0x2000020c

08002960 <__errno>:
 8002960:	4b01      	ldr	r3, [pc, #4]	; (8002968 <__errno+0x8>)
 8002962:	6818      	ldr	r0, [r3, #0]
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	20000064 	.word	0x20000064

0800296c <__libc_init_array>:
 800296c:	b570      	push	{r4, r5, r6, lr}
 800296e:	4d0d      	ldr	r5, [pc, #52]	; (80029a4 <__libc_init_array+0x38>)
 8002970:	4c0d      	ldr	r4, [pc, #52]	; (80029a8 <__libc_init_array+0x3c>)
 8002972:	1b64      	subs	r4, r4, r5
 8002974:	10a4      	asrs	r4, r4, #2
 8002976:	2600      	movs	r6, #0
 8002978:	42a6      	cmp	r6, r4
 800297a:	d109      	bne.n	8002990 <__libc_init_array+0x24>
 800297c:	4d0b      	ldr	r5, [pc, #44]	; (80029ac <__libc_init_array+0x40>)
 800297e:	4c0c      	ldr	r4, [pc, #48]	; (80029b0 <__libc_init_array+0x44>)
 8002980:	f001 faf0 	bl	8003f64 <_init>
 8002984:	1b64      	subs	r4, r4, r5
 8002986:	10a4      	asrs	r4, r4, #2
 8002988:	2600      	movs	r6, #0
 800298a:	42a6      	cmp	r6, r4
 800298c:	d105      	bne.n	800299a <__libc_init_array+0x2e>
 800298e:	bd70      	pop	{r4, r5, r6, pc}
 8002990:	f855 3b04 	ldr.w	r3, [r5], #4
 8002994:	4798      	blx	r3
 8002996:	3601      	adds	r6, #1
 8002998:	e7ee      	b.n	8002978 <__libc_init_array+0xc>
 800299a:	f855 3b04 	ldr.w	r3, [r5], #4
 800299e:	4798      	blx	r3
 80029a0:	3601      	adds	r6, #1
 80029a2:	e7f2      	b.n	800298a <__libc_init_array+0x1e>
 80029a4:	08004158 	.word	0x08004158
 80029a8:	08004158 	.word	0x08004158
 80029ac:	08004158 	.word	0x08004158
 80029b0:	0800415c 	.word	0x0800415c

080029b4 <__retarget_lock_acquire_recursive>:
 80029b4:	4770      	bx	lr

080029b6 <__retarget_lock_release_recursive>:
 80029b6:	4770      	bx	lr

080029b8 <_free_r>:
 80029b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80029ba:	2900      	cmp	r1, #0
 80029bc:	d044      	beq.n	8002a48 <_free_r+0x90>
 80029be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80029c2:	9001      	str	r0, [sp, #4]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	f1a1 0404 	sub.w	r4, r1, #4
 80029ca:	bfb8      	it	lt
 80029cc:	18e4      	addlt	r4, r4, r3
 80029ce:	f000 f8e7 	bl	8002ba0 <__malloc_lock>
 80029d2:	4a1e      	ldr	r2, [pc, #120]	; (8002a4c <_free_r+0x94>)
 80029d4:	9801      	ldr	r0, [sp, #4]
 80029d6:	6813      	ldr	r3, [r2, #0]
 80029d8:	b933      	cbnz	r3, 80029e8 <_free_r+0x30>
 80029da:	6063      	str	r3, [r4, #4]
 80029dc:	6014      	str	r4, [r2, #0]
 80029de:	b003      	add	sp, #12
 80029e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80029e4:	f000 b8e2 	b.w	8002bac <__malloc_unlock>
 80029e8:	42a3      	cmp	r3, r4
 80029ea:	d908      	bls.n	80029fe <_free_r+0x46>
 80029ec:	6825      	ldr	r5, [r4, #0]
 80029ee:	1961      	adds	r1, r4, r5
 80029f0:	428b      	cmp	r3, r1
 80029f2:	bf01      	itttt	eq
 80029f4:	6819      	ldreq	r1, [r3, #0]
 80029f6:	685b      	ldreq	r3, [r3, #4]
 80029f8:	1949      	addeq	r1, r1, r5
 80029fa:	6021      	streq	r1, [r4, #0]
 80029fc:	e7ed      	b.n	80029da <_free_r+0x22>
 80029fe:	461a      	mov	r2, r3
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	b10b      	cbz	r3, 8002a08 <_free_r+0x50>
 8002a04:	42a3      	cmp	r3, r4
 8002a06:	d9fa      	bls.n	80029fe <_free_r+0x46>
 8002a08:	6811      	ldr	r1, [r2, #0]
 8002a0a:	1855      	adds	r5, r2, r1
 8002a0c:	42a5      	cmp	r5, r4
 8002a0e:	d10b      	bne.n	8002a28 <_free_r+0x70>
 8002a10:	6824      	ldr	r4, [r4, #0]
 8002a12:	4421      	add	r1, r4
 8002a14:	1854      	adds	r4, r2, r1
 8002a16:	42a3      	cmp	r3, r4
 8002a18:	6011      	str	r1, [r2, #0]
 8002a1a:	d1e0      	bne.n	80029de <_free_r+0x26>
 8002a1c:	681c      	ldr	r4, [r3, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	6053      	str	r3, [r2, #4]
 8002a22:	440c      	add	r4, r1
 8002a24:	6014      	str	r4, [r2, #0]
 8002a26:	e7da      	b.n	80029de <_free_r+0x26>
 8002a28:	d902      	bls.n	8002a30 <_free_r+0x78>
 8002a2a:	230c      	movs	r3, #12
 8002a2c:	6003      	str	r3, [r0, #0]
 8002a2e:	e7d6      	b.n	80029de <_free_r+0x26>
 8002a30:	6825      	ldr	r5, [r4, #0]
 8002a32:	1961      	adds	r1, r4, r5
 8002a34:	428b      	cmp	r3, r1
 8002a36:	bf04      	itt	eq
 8002a38:	6819      	ldreq	r1, [r3, #0]
 8002a3a:	685b      	ldreq	r3, [r3, #4]
 8002a3c:	6063      	str	r3, [r4, #4]
 8002a3e:	bf04      	itt	eq
 8002a40:	1949      	addeq	r1, r1, r5
 8002a42:	6021      	streq	r1, [r4, #0]
 8002a44:	6054      	str	r4, [r2, #4]
 8002a46:	e7ca      	b.n	80029de <_free_r+0x26>
 8002a48:	b003      	add	sp, #12
 8002a4a:	bd30      	pop	{r4, r5, pc}
 8002a4c:	20000214 	.word	0x20000214

08002a50 <malloc>:
 8002a50:	4b02      	ldr	r3, [pc, #8]	; (8002a5c <malloc+0xc>)
 8002a52:	4601      	mov	r1, r0
 8002a54:	6818      	ldr	r0, [r3, #0]
 8002a56:	f000 b823 	b.w	8002aa0 <_malloc_r>
 8002a5a:	bf00      	nop
 8002a5c:	20000064 	.word	0x20000064

08002a60 <sbrk_aligned>:
 8002a60:	b570      	push	{r4, r5, r6, lr}
 8002a62:	4e0e      	ldr	r6, [pc, #56]	; (8002a9c <sbrk_aligned+0x3c>)
 8002a64:	460c      	mov	r4, r1
 8002a66:	6831      	ldr	r1, [r6, #0]
 8002a68:	4605      	mov	r5, r0
 8002a6a:	b911      	cbnz	r1, 8002a72 <sbrk_aligned+0x12>
 8002a6c:	f001 f92c 	bl	8003cc8 <_sbrk_r>
 8002a70:	6030      	str	r0, [r6, #0]
 8002a72:	4621      	mov	r1, r4
 8002a74:	4628      	mov	r0, r5
 8002a76:	f001 f927 	bl	8003cc8 <_sbrk_r>
 8002a7a:	1c43      	adds	r3, r0, #1
 8002a7c:	d00a      	beq.n	8002a94 <sbrk_aligned+0x34>
 8002a7e:	1cc4      	adds	r4, r0, #3
 8002a80:	f024 0403 	bic.w	r4, r4, #3
 8002a84:	42a0      	cmp	r0, r4
 8002a86:	d007      	beq.n	8002a98 <sbrk_aligned+0x38>
 8002a88:	1a21      	subs	r1, r4, r0
 8002a8a:	4628      	mov	r0, r5
 8002a8c:	f001 f91c 	bl	8003cc8 <_sbrk_r>
 8002a90:	3001      	adds	r0, #1
 8002a92:	d101      	bne.n	8002a98 <sbrk_aligned+0x38>
 8002a94:	f04f 34ff 	mov.w	r4, #4294967295
 8002a98:	4620      	mov	r0, r4
 8002a9a:	bd70      	pop	{r4, r5, r6, pc}
 8002a9c:	20000218 	.word	0x20000218

08002aa0 <_malloc_r>:
 8002aa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002aa4:	1ccd      	adds	r5, r1, #3
 8002aa6:	f025 0503 	bic.w	r5, r5, #3
 8002aaa:	3508      	adds	r5, #8
 8002aac:	2d0c      	cmp	r5, #12
 8002aae:	bf38      	it	cc
 8002ab0:	250c      	movcc	r5, #12
 8002ab2:	2d00      	cmp	r5, #0
 8002ab4:	4607      	mov	r7, r0
 8002ab6:	db01      	blt.n	8002abc <_malloc_r+0x1c>
 8002ab8:	42a9      	cmp	r1, r5
 8002aba:	d905      	bls.n	8002ac8 <_malloc_r+0x28>
 8002abc:	230c      	movs	r3, #12
 8002abe:	603b      	str	r3, [r7, #0]
 8002ac0:	2600      	movs	r6, #0
 8002ac2:	4630      	mov	r0, r6
 8002ac4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002ac8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002b9c <_malloc_r+0xfc>
 8002acc:	f000 f868 	bl	8002ba0 <__malloc_lock>
 8002ad0:	f8d8 3000 	ldr.w	r3, [r8]
 8002ad4:	461c      	mov	r4, r3
 8002ad6:	bb5c      	cbnz	r4, 8002b30 <_malloc_r+0x90>
 8002ad8:	4629      	mov	r1, r5
 8002ada:	4638      	mov	r0, r7
 8002adc:	f7ff ffc0 	bl	8002a60 <sbrk_aligned>
 8002ae0:	1c43      	adds	r3, r0, #1
 8002ae2:	4604      	mov	r4, r0
 8002ae4:	d155      	bne.n	8002b92 <_malloc_r+0xf2>
 8002ae6:	f8d8 4000 	ldr.w	r4, [r8]
 8002aea:	4626      	mov	r6, r4
 8002aec:	2e00      	cmp	r6, #0
 8002aee:	d145      	bne.n	8002b7c <_malloc_r+0xdc>
 8002af0:	2c00      	cmp	r4, #0
 8002af2:	d048      	beq.n	8002b86 <_malloc_r+0xe6>
 8002af4:	6823      	ldr	r3, [r4, #0]
 8002af6:	4631      	mov	r1, r6
 8002af8:	4638      	mov	r0, r7
 8002afa:	eb04 0903 	add.w	r9, r4, r3
 8002afe:	f001 f8e3 	bl	8003cc8 <_sbrk_r>
 8002b02:	4581      	cmp	r9, r0
 8002b04:	d13f      	bne.n	8002b86 <_malloc_r+0xe6>
 8002b06:	6821      	ldr	r1, [r4, #0]
 8002b08:	1a6d      	subs	r5, r5, r1
 8002b0a:	4629      	mov	r1, r5
 8002b0c:	4638      	mov	r0, r7
 8002b0e:	f7ff ffa7 	bl	8002a60 <sbrk_aligned>
 8002b12:	3001      	adds	r0, #1
 8002b14:	d037      	beq.n	8002b86 <_malloc_r+0xe6>
 8002b16:	6823      	ldr	r3, [r4, #0]
 8002b18:	442b      	add	r3, r5
 8002b1a:	6023      	str	r3, [r4, #0]
 8002b1c:	f8d8 3000 	ldr.w	r3, [r8]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d038      	beq.n	8002b96 <_malloc_r+0xf6>
 8002b24:	685a      	ldr	r2, [r3, #4]
 8002b26:	42a2      	cmp	r2, r4
 8002b28:	d12b      	bne.n	8002b82 <_malloc_r+0xe2>
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	605a      	str	r2, [r3, #4]
 8002b2e:	e00f      	b.n	8002b50 <_malloc_r+0xb0>
 8002b30:	6822      	ldr	r2, [r4, #0]
 8002b32:	1b52      	subs	r2, r2, r5
 8002b34:	d41f      	bmi.n	8002b76 <_malloc_r+0xd6>
 8002b36:	2a0b      	cmp	r2, #11
 8002b38:	d917      	bls.n	8002b6a <_malloc_r+0xca>
 8002b3a:	1961      	adds	r1, r4, r5
 8002b3c:	42a3      	cmp	r3, r4
 8002b3e:	6025      	str	r5, [r4, #0]
 8002b40:	bf18      	it	ne
 8002b42:	6059      	strne	r1, [r3, #4]
 8002b44:	6863      	ldr	r3, [r4, #4]
 8002b46:	bf08      	it	eq
 8002b48:	f8c8 1000 	streq.w	r1, [r8]
 8002b4c:	5162      	str	r2, [r4, r5]
 8002b4e:	604b      	str	r3, [r1, #4]
 8002b50:	4638      	mov	r0, r7
 8002b52:	f104 060b 	add.w	r6, r4, #11
 8002b56:	f000 f829 	bl	8002bac <__malloc_unlock>
 8002b5a:	f026 0607 	bic.w	r6, r6, #7
 8002b5e:	1d23      	adds	r3, r4, #4
 8002b60:	1af2      	subs	r2, r6, r3
 8002b62:	d0ae      	beq.n	8002ac2 <_malloc_r+0x22>
 8002b64:	1b9b      	subs	r3, r3, r6
 8002b66:	50a3      	str	r3, [r4, r2]
 8002b68:	e7ab      	b.n	8002ac2 <_malloc_r+0x22>
 8002b6a:	42a3      	cmp	r3, r4
 8002b6c:	6862      	ldr	r2, [r4, #4]
 8002b6e:	d1dd      	bne.n	8002b2c <_malloc_r+0x8c>
 8002b70:	f8c8 2000 	str.w	r2, [r8]
 8002b74:	e7ec      	b.n	8002b50 <_malloc_r+0xb0>
 8002b76:	4623      	mov	r3, r4
 8002b78:	6864      	ldr	r4, [r4, #4]
 8002b7a:	e7ac      	b.n	8002ad6 <_malloc_r+0x36>
 8002b7c:	4634      	mov	r4, r6
 8002b7e:	6876      	ldr	r6, [r6, #4]
 8002b80:	e7b4      	b.n	8002aec <_malloc_r+0x4c>
 8002b82:	4613      	mov	r3, r2
 8002b84:	e7cc      	b.n	8002b20 <_malloc_r+0x80>
 8002b86:	230c      	movs	r3, #12
 8002b88:	603b      	str	r3, [r7, #0]
 8002b8a:	4638      	mov	r0, r7
 8002b8c:	f000 f80e 	bl	8002bac <__malloc_unlock>
 8002b90:	e797      	b.n	8002ac2 <_malloc_r+0x22>
 8002b92:	6025      	str	r5, [r4, #0]
 8002b94:	e7dc      	b.n	8002b50 <_malloc_r+0xb0>
 8002b96:	605b      	str	r3, [r3, #4]
 8002b98:	deff      	udf	#255	; 0xff
 8002b9a:	bf00      	nop
 8002b9c:	20000214 	.word	0x20000214

08002ba0 <__malloc_lock>:
 8002ba0:	4801      	ldr	r0, [pc, #4]	; (8002ba8 <__malloc_lock+0x8>)
 8002ba2:	f7ff bf07 	b.w	80029b4 <__retarget_lock_acquire_recursive>
 8002ba6:	bf00      	nop
 8002ba8:	20000210 	.word	0x20000210

08002bac <__malloc_unlock>:
 8002bac:	4801      	ldr	r0, [pc, #4]	; (8002bb4 <__malloc_unlock+0x8>)
 8002bae:	f7ff bf02 	b.w	80029b6 <__retarget_lock_release_recursive>
 8002bb2:	bf00      	nop
 8002bb4:	20000210 	.word	0x20000210

08002bb8 <__sfputc_r>:
 8002bb8:	6893      	ldr	r3, [r2, #8]
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	b410      	push	{r4}
 8002bc0:	6093      	str	r3, [r2, #8]
 8002bc2:	da08      	bge.n	8002bd6 <__sfputc_r+0x1e>
 8002bc4:	6994      	ldr	r4, [r2, #24]
 8002bc6:	42a3      	cmp	r3, r4
 8002bc8:	db01      	blt.n	8002bce <__sfputc_r+0x16>
 8002bca:	290a      	cmp	r1, #10
 8002bcc:	d103      	bne.n	8002bd6 <__sfputc_r+0x1e>
 8002bce:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002bd2:	f7ff bde2 	b.w	800279a <__swbuf_r>
 8002bd6:	6813      	ldr	r3, [r2, #0]
 8002bd8:	1c58      	adds	r0, r3, #1
 8002bda:	6010      	str	r0, [r2, #0]
 8002bdc:	7019      	strb	r1, [r3, #0]
 8002bde:	4608      	mov	r0, r1
 8002be0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002be4:	4770      	bx	lr

08002be6 <__sfputs_r>:
 8002be6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002be8:	4606      	mov	r6, r0
 8002bea:	460f      	mov	r7, r1
 8002bec:	4614      	mov	r4, r2
 8002bee:	18d5      	adds	r5, r2, r3
 8002bf0:	42ac      	cmp	r4, r5
 8002bf2:	d101      	bne.n	8002bf8 <__sfputs_r+0x12>
 8002bf4:	2000      	movs	r0, #0
 8002bf6:	e007      	b.n	8002c08 <__sfputs_r+0x22>
 8002bf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002bfc:	463a      	mov	r2, r7
 8002bfe:	4630      	mov	r0, r6
 8002c00:	f7ff ffda 	bl	8002bb8 <__sfputc_r>
 8002c04:	1c43      	adds	r3, r0, #1
 8002c06:	d1f3      	bne.n	8002bf0 <__sfputs_r+0xa>
 8002c08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002c0c <_vfiprintf_r>:
 8002c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c10:	460d      	mov	r5, r1
 8002c12:	b09d      	sub	sp, #116	; 0x74
 8002c14:	4614      	mov	r4, r2
 8002c16:	4698      	mov	r8, r3
 8002c18:	4606      	mov	r6, r0
 8002c1a:	b118      	cbz	r0, 8002c24 <_vfiprintf_r+0x18>
 8002c1c:	6a03      	ldr	r3, [r0, #32]
 8002c1e:	b90b      	cbnz	r3, 8002c24 <_vfiprintf_r+0x18>
 8002c20:	f7ff fc0c 	bl	800243c <__sinit>
 8002c24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002c26:	07d9      	lsls	r1, r3, #31
 8002c28:	d405      	bmi.n	8002c36 <_vfiprintf_r+0x2a>
 8002c2a:	89ab      	ldrh	r3, [r5, #12]
 8002c2c:	059a      	lsls	r2, r3, #22
 8002c2e:	d402      	bmi.n	8002c36 <_vfiprintf_r+0x2a>
 8002c30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002c32:	f7ff febf 	bl	80029b4 <__retarget_lock_acquire_recursive>
 8002c36:	89ab      	ldrh	r3, [r5, #12]
 8002c38:	071b      	lsls	r3, r3, #28
 8002c3a:	d501      	bpl.n	8002c40 <_vfiprintf_r+0x34>
 8002c3c:	692b      	ldr	r3, [r5, #16]
 8002c3e:	b99b      	cbnz	r3, 8002c68 <_vfiprintf_r+0x5c>
 8002c40:	4629      	mov	r1, r5
 8002c42:	4630      	mov	r0, r6
 8002c44:	f7ff fde6 	bl	8002814 <__swsetup_r>
 8002c48:	b170      	cbz	r0, 8002c68 <_vfiprintf_r+0x5c>
 8002c4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002c4c:	07dc      	lsls	r4, r3, #31
 8002c4e:	d504      	bpl.n	8002c5a <_vfiprintf_r+0x4e>
 8002c50:	f04f 30ff 	mov.w	r0, #4294967295
 8002c54:	b01d      	add	sp, #116	; 0x74
 8002c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c5a:	89ab      	ldrh	r3, [r5, #12]
 8002c5c:	0598      	lsls	r0, r3, #22
 8002c5e:	d4f7      	bmi.n	8002c50 <_vfiprintf_r+0x44>
 8002c60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002c62:	f7ff fea8 	bl	80029b6 <__retarget_lock_release_recursive>
 8002c66:	e7f3      	b.n	8002c50 <_vfiprintf_r+0x44>
 8002c68:	2300      	movs	r3, #0
 8002c6a:	9309      	str	r3, [sp, #36]	; 0x24
 8002c6c:	2320      	movs	r3, #32
 8002c6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002c72:	f8cd 800c 	str.w	r8, [sp, #12]
 8002c76:	2330      	movs	r3, #48	; 0x30
 8002c78:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8002e2c <_vfiprintf_r+0x220>
 8002c7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002c80:	f04f 0901 	mov.w	r9, #1
 8002c84:	4623      	mov	r3, r4
 8002c86:	469a      	mov	sl, r3
 8002c88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002c8c:	b10a      	cbz	r2, 8002c92 <_vfiprintf_r+0x86>
 8002c8e:	2a25      	cmp	r2, #37	; 0x25
 8002c90:	d1f9      	bne.n	8002c86 <_vfiprintf_r+0x7a>
 8002c92:	ebba 0b04 	subs.w	fp, sl, r4
 8002c96:	d00b      	beq.n	8002cb0 <_vfiprintf_r+0xa4>
 8002c98:	465b      	mov	r3, fp
 8002c9a:	4622      	mov	r2, r4
 8002c9c:	4629      	mov	r1, r5
 8002c9e:	4630      	mov	r0, r6
 8002ca0:	f7ff ffa1 	bl	8002be6 <__sfputs_r>
 8002ca4:	3001      	adds	r0, #1
 8002ca6:	f000 80a9 	beq.w	8002dfc <_vfiprintf_r+0x1f0>
 8002caa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002cac:	445a      	add	r2, fp
 8002cae:	9209      	str	r2, [sp, #36]	; 0x24
 8002cb0:	f89a 3000 	ldrb.w	r3, [sl]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	f000 80a1 	beq.w	8002dfc <_vfiprintf_r+0x1f0>
 8002cba:	2300      	movs	r3, #0
 8002cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8002cc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002cc4:	f10a 0a01 	add.w	sl, sl, #1
 8002cc8:	9304      	str	r3, [sp, #16]
 8002cca:	9307      	str	r3, [sp, #28]
 8002ccc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002cd0:	931a      	str	r3, [sp, #104]	; 0x68
 8002cd2:	4654      	mov	r4, sl
 8002cd4:	2205      	movs	r2, #5
 8002cd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002cda:	4854      	ldr	r0, [pc, #336]	; (8002e2c <_vfiprintf_r+0x220>)
 8002cdc:	f7fd fa80 	bl	80001e0 <memchr>
 8002ce0:	9a04      	ldr	r2, [sp, #16]
 8002ce2:	b9d8      	cbnz	r0, 8002d1c <_vfiprintf_r+0x110>
 8002ce4:	06d1      	lsls	r1, r2, #27
 8002ce6:	bf44      	itt	mi
 8002ce8:	2320      	movmi	r3, #32
 8002cea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002cee:	0713      	lsls	r3, r2, #28
 8002cf0:	bf44      	itt	mi
 8002cf2:	232b      	movmi	r3, #43	; 0x2b
 8002cf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002cf8:	f89a 3000 	ldrb.w	r3, [sl]
 8002cfc:	2b2a      	cmp	r3, #42	; 0x2a
 8002cfe:	d015      	beq.n	8002d2c <_vfiprintf_r+0x120>
 8002d00:	9a07      	ldr	r2, [sp, #28]
 8002d02:	4654      	mov	r4, sl
 8002d04:	2000      	movs	r0, #0
 8002d06:	f04f 0c0a 	mov.w	ip, #10
 8002d0a:	4621      	mov	r1, r4
 8002d0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002d10:	3b30      	subs	r3, #48	; 0x30
 8002d12:	2b09      	cmp	r3, #9
 8002d14:	d94d      	bls.n	8002db2 <_vfiprintf_r+0x1a6>
 8002d16:	b1b0      	cbz	r0, 8002d46 <_vfiprintf_r+0x13a>
 8002d18:	9207      	str	r2, [sp, #28]
 8002d1a:	e014      	b.n	8002d46 <_vfiprintf_r+0x13a>
 8002d1c:	eba0 0308 	sub.w	r3, r0, r8
 8002d20:	fa09 f303 	lsl.w	r3, r9, r3
 8002d24:	4313      	orrs	r3, r2
 8002d26:	9304      	str	r3, [sp, #16]
 8002d28:	46a2      	mov	sl, r4
 8002d2a:	e7d2      	b.n	8002cd2 <_vfiprintf_r+0xc6>
 8002d2c:	9b03      	ldr	r3, [sp, #12]
 8002d2e:	1d19      	adds	r1, r3, #4
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	9103      	str	r1, [sp, #12]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	bfbb      	ittet	lt
 8002d38:	425b      	neglt	r3, r3
 8002d3a:	f042 0202 	orrlt.w	r2, r2, #2
 8002d3e:	9307      	strge	r3, [sp, #28]
 8002d40:	9307      	strlt	r3, [sp, #28]
 8002d42:	bfb8      	it	lt
 8002d44:	9204      	strlt	r2, [sp, #16]
 8002d46:	7823      	ldrb	r3, [r4, #0]
 8002d48:	2b2e      	cmp	r3, #46	; 0x2e
 8002d4a:	d10c      	bne.n	8002d66 <_vfiprintf_r+0x15a>
 8002d4c:	7863      	ldrb	r3, [r4, #1]
 8002d4e:	2b2a      	cmp	r3, #42	; 0x2a
 8002d50:	d134      	bne.n	8002dbc <_vfiprintf_r+0x1b0>
 8002d52:	9b03      	ldr	r3, [sp, #12]
 8002d54:	1d1a      	adds	r2, r3, #4
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	9203      	str	r2, [sp, #12]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	bfb8      	it	lt
 8002d5e:	f04f 33ff 	movlt.w	r3, #4294967295
 8002d62:	3402      	adds	r4, #2
 8002d64:	9305      	str	r3, [sp, #20]
 8002d66:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8002e3c <_vfiprintf_r+0x230>
 8002d6a:	7821      	ldrb	r1, [r4, #0]
 8002d6c:	2203      	movs	r2, #3
 8002d6e:	4650      	mov	r0, sl
 8002d70:	f7fd fa36 	bl	80001e0 <memchr>
 8002d74:	b138      	cbz	r0, 8002d86 <_vfiprintf_r+0x17a>
 8002d76:	9b04      	ldr	r3, [sp, #16]
 8002d78:	eba0 000a 	sub.w	r0, r0, sl
 8002d7c:	2240      	movs	r2, #64	; 0x40
 8002d7e:	4082      	lsls	r2, r0
 8002d80:	4313      	orrs	r3, r2
 8002d82:	3401      	adds	r4, #1
 8002d84:	9304      	str	r3, [sp, #16]
 8002d86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d8a:	4829      	ldr	r0, [pc, #164]	; (8002e30 <_vfiprintf_r+0x224>)
 8002d8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002d90:	2206      	movs	r2, #6
 8002d92:	f7fd fa25 	bl	80001e0 <memchr>
 8002d96:	2800      	cmp	r0, #0
 8002d98:	d03f      	beq.n	8002e1a <_vfiprintf_r+0x20e>
 8002d9a:	4b26      	ldr	r3, [pc, #152]	; (8002e34 <_vfiprintf_r+0x228>)
 8002d9c:	bb1b      	cbnz	r3, 8002de6 <_vfiprintf_r+0x1da>
 8002d9e:	9b03      	ldr	r3, [sp, #12]
 8002da0:	3307      	adds	r3, #7
 8002da2:	f023 0307 	bic.w	r3, r3, #7
 8002da6:	3308      	adds	r3, #8
 8002da8:	9303      	str	r3, [sp, #12]
 8002daa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002dac:	443b      	add	r3, r7
 8002dae:	9309      	str	r3, [sp, #36]	; 0x24
 8002db0:	e768      	b.n	8002c84 <_vfiprintf_r+0x78>
 8002db2:	fb0c 3202 	mla	r2, ip, r2, r3
 8002db6:	460c      	mov	r4, r1
 8002db8:	2001      	movs	r0, #1
 8002dba:	e7a6      	b.n	8002d0a <_vfiprintf_r+0xfe>
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	3401      	adds	r4, #1
 8002dc0:	9305      	str	r3, [sp, #20]
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	f04f 0c0a 	mov.w	ip, #10
 8002dc8:	4620      	mov	r0, r4
 8002dca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002dce:	3a30      	subs	r2, #48	; 0x30
 8002dd0:	2a09      	cmp	r2, #9
 8002dd2:	d903      	bls.n	8002ddc <_vfiprintf_r+0x1d0>
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d0c6      	beq.n	8002d66 <_vfiprintf_r+0x15a>
 8002dd8:	9105      	str	r1, [sp, #20]
 8002dda:	e7c4      	b.n	8002d66 <_vfiprintf_r+0x15a>
 8002ddc:	fb0c 2101 	mla	r1, ip, r1, r2
 8002de0:	4604      	mov	r4, r0
 8002de2:	2301      	movs	r3, #1
 8002de4:	e7f0      	b.n	8002dc8 <_vfiprintf_r+0x1bc>
 8002de6:	ab03      	add	r3, sp, #12
 8002de8:	9300      	str	r3, [sp, #0]
 8002dea:	462a      	mov	r2, r5
 8002dec:	4b12      	ldr	r3, [pc, #72]	; (8002e38 <_vfiprintf_r+0x22c>)
 8002dee:	a904      	add	r1, sp, #16
 8002df0:	4630      	mov	r0, r6
 8002df2:	f3af 8000 	nop.w
 8002df6:	4607      	mov	r7, r0
 8002df8:	1c78      	adds	r0, r7, #1
 8002dfa:	d1d6      	bne.n	8002daa <_vfiprintf_r+0x19e>
 8002dfc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002dfe:	07d9      	lsls	r1, r3, #31
 8002e00:	d405      	bmi.n	8002e0e <_vfiprintf_r+0x202>
 8002e02:	89ab      	ldrh	r3, [r5, #12]
 8002e04:	059a      	lsls	r2, r3, #22
 8002e06:	d402      	bmi.n	8002e0e <_vfiprintf_r+0x202>
 8002e08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002e0a:	f7ff fdd4 	bl	80029b6 <__retarget_lock_release_recursive>
 8002e0e:	89ab      	ldrh	r3, [r5, #12]
 8002e10:	065b      	lsls	r3, r3, #25
 8002e12:	f53f af1d 	bmi.w	8002c50 <_vfiprintf_r+0x44>
 8002e16:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002e18:	e71c      	b.n	8002c54 <_vfiprintf_r+0x48>
 8002e1a:	ab03      	add	r3, sp, #12
 8002e1c:	9300      	str	r3, [sp, #0]
 8002e1e:	462a      	mov	r2, r5
 8002e20:	4b05      	ldr	r3, [pc, #20]	; (8002e38 <_vfiprintf_r+0x22c>)
 8002e22:	a904      	add	r1, sp, #16
 8002e24:	4630      	mov	r0, r6
 8002e26:	f000 f879 	bl	8002f1c <_printf_i>
 8002e2a:	e7e4      	b.n	8002df6 <_vfiprintf_r+0x1ea>
 8002e2c:	08004000 	.word	0x08004000
 8002e30:	0800400a 	.word	0x0800400a
 8002e34:	00000000 	.word	0x00000000
 8002e38:	08002be7 	.word	0x08002be7
 8002e3c:	08004006 	.word	0x08004006

08002e40 <_printf_common>:
 8002e40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e44:	4616      	mov	r6, r2
 8002e46:	4699      	mov	r9, r3
 8002e48:	688a      	ldr	r2, [r1, #8]
 8002e4a:	690b      	ldr	r3, [r1, #16]
 8002e4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002e50:	4293      	cmp	r3, r2
 8002e52:	bfb8      	it	lt
 8002e54:	4613      	movlt	r3, r2
 8002e56:	6033      	str	r3, [r6, #0]
 8002e58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002e5c:	4607      	mov	r7, r0
 8002e5e:	460c      	mov	r4, r1
 8002e60:	b10a      	cbz	r2, 8002e66 <_printf_common+0x26>
 8002e62:	3301      	adds	r3, #1
 8002e64:	6033      	str	r3, [r6, #0]
 8002e66:	6823      	ldr	r3, [r4, #0]
 8002e68:	0699      	lsls	r1, r3, #26
 8002e6a:	bf42      	ittt	mi
 8002e6c:	6833      	ldrmi	r3, [r6, #0]
 8002e6e:	3302      	addmi	r3, #2
 8002e70:	6033      	strmi	r3, [r6, #0]
 8002e72:	6825      	ldr	r5, [r4, #0]
 8002e74:	f015 0506 	ands.w	r5, r5, #6
 8002e78:	d106      	bne.n	8002e88 <_printf_common+0x48>
 8002e7a:	f104 0a19 	add.w	sl, r4, #25
 8002e7e:	68e3      	ldr	r3, [r4, #12]
 8002e80:	6832      	ldr	r2, [r6, #0]
 8002e82:	1a9b      	subs	r3, r3, r2
 8002e84:	42ab      	cmp	r3, r5
 8002e86:	dc26      	bgt.n	8002ed6 <_printf_common+0x96>
 8002e88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002e8c:	1e13      	subs	r3, r2, #0
 8002e8e:	6822      	ldr	r2, [r4, #0]
 8002e90:	bf18      	it	ne
 8002e92:	2301      	movne	r3, #1
 8002e94:	0692      	lsls	r2, r2, #26
 8002e96:	d42b      	bmi.n	8002ef0 <_printf_common+0xb0>
 8002e98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002e9c:	4649      	mov	r1, r9
 8002e9e:	4638      	mov	r0, r7
 8002ea0:	47c0      	blx	r8
 8002ea2:	3001      	adds	r0, #1
 8002ea4:	d01e      	beq.n	8002ee4 <_printf_common+0xa4>
 8002ea6:	6823      	ldr	r3, [r4, #0]
 8002ea8:	6922      	ldr	r2, [r4, #16]
 8002eaa:	f003 0306 	and.w	r3, r3, #6
 8002eae:	2b04      	cmp	r3, #4
 8002eb0:	bf02      	ittt	eq
 8002eb2:	68e5      	ldreq	r5, [r4, #12]
 8002eb4:	6833      	ldreq	r3, [r6, #0]
 8002eb6:	1aed      	subeq	r5, r5, r3
 8002eb8:	68a3      	ldr	r3, [r4, #8]
 8002eba:	bf0c      	ite	eq
 8002ebc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ec0:	2500      	movne	r5, #0
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	bfc4      	itt	gt
 8002ec6:	1a9b      	subgt	r3, r3, r2
 8002ec8:	18ed      	addgt	r5, r5, r3
 8002eca:	2600      	movs	r6, #0
 8002ecc:	341a      	adds	r4, #26
 8002ece:	42b5      	cmp	r5, r6
 8002ed0:	d11a      	bne.n	8002f08 <_printf_common+0xc8>
 8002ed2:	2000      	movs	r0, #0
 8002ed4:	e008      	b.n	8002ee8 <_printf_common+0xa8>
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	4652      	mov	r2, sl
 8002eda:	4649      	mov	r1, r9
 8002edc:	4638      	mov	r0, r7
 8002ede:	47c0      	blx	r8
 8002ee0:	3001      	adds	r0, #1
 8002ee2:	d103      	bne.n	8002eec <_printf_common+0xac>
 8002ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002eec:	3501      	adds	r5, #1
 8002eee:	e7c6      	b.n	8002e7e <_printf_common+0x3e>
 8002ef0:	18e1      	adds	r1, r4, r3
 8002ef2:	1c5a      	adds	r2, r3, #1
 8002ef4:	2030      	movs	r0, #48	; 0x30
 8002ef6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002efa:	4422      	add	r2, r4
 8002efc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002f00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002f04:	3302      	adds	r3, #2
 8002f06:	e7c7      	b.n	8002e98 <_printf_common+0x58>
 8002f08:	2301      	movs	r3, #1
 8002f0a:	4622      	mov	r2, r4
 8002f0c:	4649      	mov	r1, r9
 8002f0e:	4638      	mov	r0, r7
 8002f10:	47c0      	blx	r8
 8002f12:	3001      	adds	r0, #1
 8002f14:	d0e6      	beq.n	8002ee4 <_printf_common+0xa4>
 8002f16:	3601      	adds	r6, #1
 8002f18:	e7d9      	b.n	8002ece <_printf_common+0x8e>
	...

08002f1c <_printf_i>:
 8002f1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002f20:	7e0f      	ldrb	r7, [r1, #24]
 8002f22:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002f24:	2f78      	cmp	r7, #120	; 0x78
 8002f26:	4691      	mov	r9, r2
 8002f28:	4680      	mov	r8, r0
 8002f2a:	460c      	mov	r4, r1
 8002f2c:	469a      	mov	sl, r3
 8002f2e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002f32:	d807      	bhi.n	8002f44 <_printf_i+0x28>
 8002f34:	2f62      	cmp	r7, #98	; 0x62
 8002f36:	d80a      	bhi.n	8002f4e <_printf_i+0x32>
 8002f38:	2f00      	cmp	r7, #0
 8002f3a:	f000 80d4 	beq.w	80030e6 <_printf_i+0x1ca>
 8002f3e:	2f58      	cmp	r7, #88	; 0x58
 8002f40:	f000 80c0 	beq.w	80030c4 <_printf_i+0x1a8>
 8002f44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002f4c:	e03a      	b.n	8002fc4 <_printf_i+0xa8>
 8002f4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002f52:	2b15      	cmp	r3, #21
 8002f54:	d8f6      	bhi.n	8002f44 <_printf_i+0x28>
 8002f56:	a101      	add	r1, pc, #4	; (adr r1, 8002f5c <_printf_i+0x40>)
 8002f58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002f5c:	08002fb5 	.word	0x08002fb5
 8002f60:	08002fc9 	.word	0x08002fc9
 8002f64:	08002f45 	.word	0x08002f45
 8002f68:	08002f45 	.word	0x08002f45
 8002f6c:	08002f45 	.word	0x08002f45
 8002f70:	08002f45 	.word	0x08002f45
 8002f74:	08002fc9 	.word	0x08002fc9
 8002f78:	08002f45 	.word	0x08002f45
 8002f7c:	08002f45 	.word	0x08002f45
 8002f80:	08002f45 	.word	0x08002f45
 8002f84:	08002f45 	.word	0x08002f45
 8002f88:	080030cd 	.word	0x080030cd
 8002f8c:	08002ff5 	.word	0x08002ff5
 8002f90:	08003087 	.word	0x08003087
 8002f94:	08002f45 	.word	0x08002f45
 8002f98:	08002f45 	.word	0x08002f45
 8002f9c:	080030ef 	.word	0x080030ef
 8002fa0:	08002f45 	.word	0x08002f45
 8002fa4:	08002ff5 	.word	0x08002ff5
 8002fa8:	08002f45 	.word	0x08002f45
 8002fac:	08002f45 	.word	0x08002f45
 8002fb0:	0800308f 	.word	0x0800308f
 8002fb4:	682b      	ldr	r3, [r5, #0]
 8002fb6:	1d1a      	adds	r2, r3, #4
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	602a      	str	r2, [r5, #0]
 8002fbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002fc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e09f      	b.n	8003108 <_printf_i+0x1ec>
 8002fc8:	6820      	ldr	r0, [r4, #0]
 8002fca:	682b      	ldr	r3, [r5, #0]
 8002fcc:	0607      	lsls	r7, r0, #24
 8002fce:	f103 0104 	add.w	r1, r3, #4
 8002fd2:	6029      	str	r1, [r5, #0]
 8002fd4:	d501      	bpl.n	8002fda <_printf_i+0xbe>
 8002fd6:	681e      	ldr	r6, [r3, #0]
 8002fd8:	e003      	b.n	8002fe2 <_printf_i+0xc6>
 8002fda:	0646      	lsls	r6, r0, #25
 8002fdc:	d5fb      	bpl.n	8002fd6 <_printf_i+0xba>
 8002fde:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002fe2:	2e00      	cmp	r6, #0
 8002fe4:	da03      	bge.n	8002fee <_printf_i+0xd2>
 8002fe6:	232d      	movs	r3, #45	; 0x2d
 8002fe8:	4276      	negs	r6, r6
 8002fea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002fee:	485a      	ldr	r0, [pc, #360]	; (8003158 <_printf_i+0x23c>)
 8002ff0:	230a      	movs	r3, #10
 8002ff2:	e012      	b.n	800301a <_printf_i+0xfe>
 8002ff4:	682b      	ldr	r3, [r5, #0]
 8002ff6:	6820      	ldr	r0, [r4, #0]
 8002ff8:	1d19      	adds	r1, r3, #4
 8002ffa:	6029      	str	r1, [r5, #0]
 8002ffc:	0605      	lsls	r5, r0, #24
 8002ffe:	d501      	bpl.n	8003004 <_printf_i+0xe8>
 8003000:	681e      	ldr	r6, [r3, #0]
 8003002:	e002      	b.n	800300a <_printf_i+0xee>
 8003004:	0641      	lsls	r1, r0, #25
 8003006:	d5fb      	bpl.n	8003000 <_printf_i+0xe4>
 8003008:	881e      	ldrh	r6, [r3, #0]
 800300a:	4853      	ldr	r0, [pc, #332]	; (8003158 <_printf_i+0x23c>)
 800300c:	2f6f      	cmp	r7, #111	; 0x6f
 800300e:	bf0c      	ite	eq
 8003010:	2308      	moveq	r3, #8
 8003012:	230a      	movne	r3, #10
 8003014:	2100      	movs	r1, #0
 8003016:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800301a:	6865      	ldr	r5, [r4, #4]
 800301c:	60a5      	str	r5, [r4, #8]
 800301e:	2d00      	cmp	r5, #0
 8003020:	bfa2      	ittt	ge
 8003022:	6821      	ldrge	r1, [r4, #0]
 8003024:	f021 0104 	bicge.w	r1, r1, #4
 8003028:	6021      	strge	r1, [r4, #0]
 800302a:	b90e      	cbnz	r6, 8003030 <_printf_i+0x114>
 800302c:	2d00      	cmp	r5, #0
 800302e:	d04b      	beq.n	80030c8 <_printf_i+0x1ac>
 8003030:	4615      	mov	r5, r2
 8003032:	fbb6 f1f3 	udiv	r1, r6, r3
 8003036:	fb03 6711 	mls	r7, r3, r1, r6
 800303a:	5dc7      	ldrb	r7, [r0, r7]
 800303c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003040:	4637      	mov	r7, r6
 8003042:	42bb      	cmp	r3, r7
 8003044:	460e      	mov	r6, r1
 8003046:	d9f4      	bls.n	8003032 <_printf_i+0x116>
 8003048:	2b08      	cmp	r3, #8
 800304a:	d10b      	bne.n	8003064 <_printf_i+0x148>
 800304c:	6823      	ldr	r3, [r4, #0]
 800304e:	07de      	lsls	r6, r3, #31
 8003050:	d508      	bpl.n	8003064 <_printf_i+0x148>
 8003052:	6923      	ldr	r3, [r4, #16]
 8003054:	6861      	ldr	r1, [r4, #4]
 8003056:	4299      	cmp	r1, r3
 8003058:	bfde      	ittt	le
 800305a:	2330      	movle	r3, #48	; 0x30
 800305c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003060:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003064:	1b52      	subs	r2, r2, r5
 8003066:	6122      	str	r2, [r4, #16]
 8003068:	f8cd a000 	str.w	sl, [sp]
 800306c:	464b      	mov	r3, r9
 800306e:	aa03      	add	r2, sp, #12
 8003070:	4621      	mov	r1, r4
 8003072:	4640      	mov	r0, r8
 8003074:	f7ff fee4 	bl	8002e40 <_printf_common>
 8003078:	3001      	adds	r0, #1
 800307a:	d14a      	bne.n	8003112 <_printf_i+0x1f6>
 800307c:	f04f 30ff 	mov.w	r0, #4294967295
 8003080:	b004      	add	sp, #16
 8003082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003086:	6823      	ldr	r3, [r4, #0]
 8003088:	f043 0320 	orr.w	r3, r3, #32
 800308c:	6023      	str	r3, [r4, #0]
 800308e:	4833      	ldr	r0, [pc, #204]	; (800315c <_printf_i+0x240>)
 8003090:	2778      	movs	r7, #120	; 0x78
 8003092:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003096:	6823      	ldr	r3, [r4, #0]
 8003098:	6829      	ldr	r1, [r5, #0]
 800309a:	061f      	lsls	r7, r3, #24
 800309c:	f851 6b04 	ldr.w	r6, [r1], #4
 80030a0:	d402      	bmi.n	80030a8 <_printf_i+0x18c>
 80030a2:	065f      	lsls	r7, r3, #25
 80030a4:	bf48      	it	mi
 80030a6:	b2b6      	uxthmi	r6, r6
 80030a8:	07df      	lsls	r7, r3, #31
 80030aa:	bf48      	it	mi
 80030ac:	f043 0320 	orrmi.w	r3, r3, #32
 80030b0:	6029      	str	r1, [r5, #0]
 80030b2:	bf48      	it	mi
 80030b4:	6023      	strmi	r3, [r4, #0]
 80030b6:	b91e      	cbnz	r6, 80030c0 <_printf_i+0x1a4>
 80030b8:	6823      	ldr	r3, [r4, #0]
 80030ba:	f023 0320 	bic.w	r3, r3, #32
 80030be:	6023      	str	r3, [r4, #0]
 80030c0:	2310      	movs	r3, #16
 80030c2:	e7a7      	b.n	8003014 <_printf_i+0xf8>
 80030c4:	4824      	ldr	r0, [pc, #144]	; (8003158 <_printf_i+0x23c>)
 80030c6:	e7e4      	b.n	8003092 <_printf_i+0x176>
 80030c8:	4615      	mov	r5, r2
 80030ca:	e7bd      	b.n	8003048 <_printf_i+0x12c>
 80030cc:	682b      	ldr	r3, [r5, #0]
 80030ce:	6826      	ldr	r6, [r4, #0]
 80030d0:	6961      	ldr	r1, [r4, #20]
 80030d2:	1d18      	adds	r0, r3, #4
 80030d4:	6028      	str	r0, [r5, #0]
 80030d6:	0635      	lsls	r5, r6, #24
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	d501      	bpl.n	80030e0 <_printf_i+0x1c4>
 80030dc:	6019      	str	r1, [r3, #0]
 80030de:	e002      	b.n	80030e6 <_printf_i+0x1ca>
 80030e0:	0670      	lsls	r0, r6, #25
 80030e2:	d5fb      	bpl.n	80030dc <_printf_i+0x1c0>
 80030e4:	8019      	strh	r1, [r3, #0]
 80030e6:	2300      	movs	r3, #0
 80030e8:	6123      	str	r3, [r4, #16]
 80030ea:	4615      	mov	r5, r2
 80030ec:	e7bc      	b.n	8003068 <_printf_i+0x14c>
 80030ee:	682b      	ldr	r3, [r5, #0]
 80030f0:	1d1a      	adds	r2, r3, #4
 80030f2:	602a      	str	r2, [r5, #0]
 80030f4:	681d      	ldr	r5, [r3, #0]
 80030f6:	6862      	ldr	r2, [r4, #4]
 80030f8:	2100      	movs	r1, #0
 80030fa:	4628      	mov	r0, r5
 80030fc:	f7fd f870 	bl	80001e0 <memchr>
 8003100:	b108      	cbz	r0, 8003106 <_printf_i+0x1ea>
 8003102:	1b40      	subs	r0, r0, r5
 8003104:	6060      	str	r0, [r4, #4]
 8003106:	6863      	ldr	r3, [r4, #4]
 8003108:	6123      	str	r3, [r4, #16]
 800310a:	2300      	movs	r3, #0
 800310c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003110:	e7aa      	b.n	8003068 <_printf_i+0x14c>
 8003112:	6923      	ldr	r3, [r4, #16]
 8003114:	462a      	mov	r2, r5
 8003116:	4649      	mov	r1, r9
 8003118:	4640      	mov	r0, r8
 800311a:	47d0      	blx	sl
 800311c:	3001      	adds	r0, #1
 800311e:	d0ad      	beq.n	800307c <_printf_i+0x160>
 8003120:	6823      	ldr	r3, [r4, #0]
 8003122:	079b      	lsls	r3, r3, #30
 8003124:	d413      	bmi.n	800314e <_printf_i+0x232>
 8003126:	68e0      	ldr	r0, [r4, #12]
 8003128:	9b03      	ldr	r3, [sp, #12]
 800312a:	4298      	cmp	r0, r3
 800312c:	bfb8      	it	lt
 800312e:	4618      	movlt	r0, r3
 8003130:	e7a6      	b.n	8003080 <_printf_i+0x164>
 8003132:	2301      	movs	r3, #1
 8003134:	4632      	mov	r2, r6
 8003136:	4649      	mov	r1, r9
 8003138:	4640      	mov	r0, r8
 800313a:	47d0      	blx	sl
 800313c:	3001      	adds	r0, #1
 800313e:	d09d      	beq.n	800307c <_printf_i+0x160>
 8003140:	3501      	adds	r5, #1
 8003142:	68e3      	ldr	r3, [r4, #12]
 8003144:	9903      	ldr	r1, [sp, #12]
 8003146:	1a5b      	subs	r3, r3, r1
 8003148:	42ab      	cmp	r3, r5
 800314a:	dcf2      	bgt.n	8003132 <_printf_i+0x216>
 800314c:	e7eb      	b.n	8003126 <_printf_i+0x20a>
 800314e:	2500      	movs	r5, #0
 8003150:	f104 0619 	add.w	r6, r4, #25
 8003154:	e7f5      	b.n	8003142 <_printf_i+0x226>
 8003156:	bf00      	nop
 8003158:	08004011 	.word	0x08004011
 800315c:	08004022 	.word	0x08004022

08003160 <__svfiscanf_r>:
 8003160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003164:	461d      	mov	r5, r3
 8003166:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8003168:	07df      	lsls	r7, r3, #31
 800316a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800316e:	4606      	mov	r6, r0
 8003170:	460c      	mov	r4, r1
 8003172:	4692      	mov	sl, r2
 8003174:	d405      	bmi.n	8003182 <__svfiscanf_r+0x22>
 8003176:	898b      	ldrh	r3, [r1, #12]
 8003178:	0598      	lsls	r0, r3, #22
 800317a:	d402      	bmi.n	8003182 <__svfiscanf_r+0x22>
 800317c:	6d88      	ldr	r0, [r1, #88]	; 0x58
 800317e:	f7ff fc19 	bl	80029b4 <__retarget_lock_acquire_recursive>
 8003182:	2300      	movs	r3, #0
 8003184:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 8003188:	4baa      	ldr	r3, [pc, #680]	; (8003434 <__svfiscanf_r+0x2d4>)
 800318a:	93a0      	str	r3, [sp, #640]	; 0x280
 800318c:	f10d 0804 	add.w	r8, sp, #4
 8003190:	4ba9      	ldr	r3, [pc, #676]	; (8003438 <__svfiscanf_r+0x2d8>)
 8003192:	4faa      	ldr	r7, [pc, #680]	; (800343c <__svfiscanf_r+0x2dc>)
 8003194:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 8003440 <__svfiscanf_r+0x2e0>
 8003198:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800319c:	93a1      	str	r3, [sp, #644]	; 0x284
 800319e:	9500      	str	r5, [sp, #0]
 80031a0:	f89a 3000 	ldrb.w	r3, [sl]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f000 8170 	beq.w	800348a <__svfiscanf_r+0x32a>
 80031aa:	5cf9      	ldrb	r1, [r7, r3]
 80031ac:	f011 0108 	ands.w	r1, r1, #8
 80031b0:	f10a 0501 	add.w	r5, sl, #1
 80031b4:	d019      	beq.n	80031ea <__svfiscanf_r+0x8a>
 80031b6:	6863      	ldr	r3, [r4, #4]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	dd0f      	ble.n	80031dc <__svfiscanf_r+0x7c>
 80031bc:	6823      	ldr	r3, [r4, #0]
 80031be:	781a      	ldrb	r2, [r3, #0]
 80031c0:	5cba      	ldrb	r2, [r7, r2]
 80031c2:	0711      	lsls	r1, r2, #28
 80031c4:	d401      	bmi.n	80031ca <__svfiscanf_r+0x6a>
 80031c6:	46aa      	mov	sl, r5
 80031c8:	e7ea      	b.n	80031a0 <__svfiscanf_r+0x40>
 80031ca:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80031cc:	3201      	adds	r2, #1
 80031ce:	9245      	str	r2, [sp, #276]	; 0x114
 80031d0:	6862      	ldr	r2, [r4, #4]
 80031d2:	3301      	adds	r3, #1
 80031d4:	3a01      	subs	r2, #1
 80031d6:	6062      	str	r2, [r4, #4]
 80031d8:	6023      	str	r3, [r4, #0]
 80031da:	e7ec      	b.n	80031b6 <__svfiscanf_r+0x56>
 80031dc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80031de:	4621      	mov	r1, r4
 80031e0:	4630      	mov	r0, r6
 80031e2:	4798      	blx	r3
 80031e4:	2800      	cmp	r0, #0
 80031e6:	d0e9      	beq.n	80031bc <__svfiscanf_r+0x5c>
 80031e8:	e7ed      	b.n	80031c6 <__svfiscanf_r+0x66>
 80031ea:	2b25      	cmp	r3, #37	; 0x25
 80031ec:	d012      	beq.n	8003214 <__svfiscanf_r+0xb4>
 80031ee:	469a      	mov	sl, r3
 80031f0:	6863      	ldr	r3, [r4, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	f340 8093 	ble.w	800331e <__svfiscanf_r+0x1be>
 80031f8:	6822      	ldr	r2, [r4, #0]
 80031fa:	7813      	ldrb	r3, [r2, #0]
 80031fc:	4553      	cmp	r3, sl
 80031fe:	f040 8144 	bne.w	800348a <__svfiscanf_r+0x32a>
 8003202:	6863      	ldr	r3, [r4, #4]
 8003204:	3b01      	subs	r3, #1
 8003206:	6063      	str	r3, [r4, #4]
 8003208:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800320a:	3201      	adds	r2, #1
 800320c:	3301      	adds	r3, #1
 800320e:	6022      	str	r2, [r4, #0]
 8003210:	9345      	str	r3, [sp, #276]	; 0x114
 8003212:	e7d8      	b.n	80031c6 <__svfiscanf_r+0x66>
 8003214:	9141      	str	r1, [sp, #260]	; 0x104
 8003216:	9143      	str	r1, [sp, #268]	; 0x10c
 8003218:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800321c:	2b2a      	cmp	r3, #42	; 0x2a
 800321e:	bf02      	ittt	eq
 8003220:	2310      	moveq	r3, #16
 8003222:	9341      	streq	r3, [sp, #260]	; 0x104
 8003224:	f10a 0502 	addeq.w	r5, sl, #2
 8003228:	220a      	movs	r2, #10
 800322a:	46aa      	mov	sl, r5
 800322c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8003230:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8003234:	2b09      	cmp	r3, #9
 8003236:	d91d      	bls.n	8003274 <__svfiscanf_r+0x114>
 8003238:	4881      	ldr	r0, [pc, #516]	; (8003440 <__svfiscanf_r+0x2e0>)
 800323a:	2203      	movs	r2, #3
 800323c:	f7fc ffd0 	bl	80001e0 <memchr>
 8003240:	b138      	cbz	r0, 8003252 <__svfiscanf_r+0xf2>
 8003242:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003244:	eba0 0009 	sub.w	r0, r0, r9
 8003248:	2301      	movs	r3, #1
 800324a:	4083      	lsls	r3, r0
 800324c:	4313      	orrs	r3, r2
 800324e:	9341      	str	r3, [sp, #260]	; 0x104
 8003250:	4655      	mov	r5, sl
 8003252:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003256:	2b78      	cmp	r3, #120	; 0x78
 8003258:	d807      	bhi.n	800326a <__svfiscanf_r+0x10a>
 800325a:	2b57      	cmp	r3, #87	; 0x57
 800325c:	d811      	bhi.n	8003282 <__svfiscanf_r+0x122>
 800325e:	2b25      	cmp	r3, #37	; 0x25
 8003260:	d0c5      	beq.n	80031ee <__svfiscanf_r+0x8e>
 8003262:	d857      	bhi.n	8003314 <__svfiscanf_r+0x1b4>
 8003264:	2b00      	cmp	r3, #0
 8003266:	f000 80c6 	beq.w	80033f6 <__svfiscanf_r+0x296>
 800326a:	2303      	movs	r3, #3
 800326c:	9347      	str	r3, [sp, #284]	; 0x11c
 800326e:	230a      	movs	r3, #10
 8003270:	9342      	str	r3, [sp, #264]	; 0x108
 8003272:	e07f      	b.n	8003374 <__svfiscanf_r+0x214>
 8003274:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8003276:	fb02 1103 	mla	r1, r2, r3, r1
 800327a:	3930      	subs	r1, #48	; 0x30
 800327c:	9143      	str	r1, [sp, #268]	; 0x10c
 800327e:	4655      	mov	r5, sl
 8003280:	e7d3      	b.n	800322a <__svfiscanf_r+0xca>
 8003282:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8003286:	2a20      	cmp	r2, #32
 8003288:	d8ef      	bhi.n	800326a <__svfiscanf_r+0x10a>
 800328a:	a101      	add	r1, pc, #4	; (adr r1, 8003290 <__svfiscanf_r+0x130>)
 800328c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003290:	08003357 	.word	0x08003357
 8003294:	0800326b 	.word	0x0800326b
 8003298:	0800326b 	.word	0x0800326b
 800329c:	080033b5 	.word	0x080033b5
 80032a0:	0800326b 	.word	0x0800326b
 80032a4:	0800326b 	.word	0x0800326b
 80032a8:	0800326b 	.word	0x0800326b
 80032ac:	0800326b 	.word	0x0800326b
 80032b0:	0800326b 	.word	0x0800326b
 80032b4:	0800326b 	.word	0x0800326b
 80032b8:	0800326b 	.word	0x0800326b
 80032bc:	080033cb 	.word	0x080033cb
 80032c0:	080033b1 	.word	0x080033b1
 80032c4:	0800331b 	.word	0x0800331b
 80032c8:	0800331b 	.word	0x0800331b
 80032cc:	0800331b 	.word	0x0800331b
 80032d0:	0800326b 	.word	0x0800326b
 80032d4:	0800336d 	.word	0x0800336d
 80032d8:	0800326b 	.word	0x0800326b
 80032dc:	0800326b 	.word	0x0800326b
 80032e0:	0800326b 	.word	0x0800326b
 80032e4:	0800326b 	.word	0x0800326b
 80032e8:	080033db 	.word	0x080033db
 80032ec:	080033a9 	.word	0x080033a9
 80032f0:	0800334f 	.word	0x0800334f
 80032f4:	0800326b 	.word	0x0800326b
 80032f8:	0800326b 	.word	0x0800326b
 80032fc:	080033d7 	.word	0x080033d7
 8003300:	0800326b 	.word	0x0800326b
 8003304:	080033b1 	.word	0x080033b1
 8003308:	0800326b 	.word	0x0800326b
 800330c:	0800326b 	.word	0x0800326b
 8003310:	08003357 	.word	0x08003357
 8003314:	3b45      	subs	r3, #69	; 0x45
 8003316:	2b02      	cmp	r3, #2
 8003318:	d8a7      	bhi.n	800326a <__svfiscanf_r+0x10a>
 800331a:	2305      	movs	r3, #5
 800331c:	e029      	b.n	8003372 <__svfiscanf_r+0x212>
 800331e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003320:	4621      	mov	r1, r4
 8003322:	4630      	mov	r0, r6
 8003324:	4798      	blx	r3
 8003326:	2800      	cmp	r0, #0
 8003328:	f43f af66 	beq.w	80031f8 <__svfiscanf_r+0x98>
 800332c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800332e:	07da      	lsls	r2, r3, #31
 8003330:	f140 80a3 	bpl.w	800347a <__svfiscanf_r+0x31a>
 8003334:	9844      	ldr	r0, [sp, #272]	; 0x110
 8003336:	2800      	cmp	r0, #0
 8003338:	d066      	beq.n	8003408 <__svfiscanf_r+0x2a8>
 800333a:	89a3      	ldrh	r3, [r4, #12]
 800333c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003340:	bf18      	it	ne
 8003342:	f04f 30ff 	movne.w	r0, #4294967295
 8003346:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800334a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800334e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003350:	f042 0220 	orr.w	r2, r2, #32
 8003354:	9241      	str	r2, [sp, #260]	; 0x104
 8003356:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003358:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800335c:	9241      	str	r2, [sp, #260]	; 0x104
 800335e:	2210      	movs	r2, #16
 8003360:	2b6f      	cmp	r3, #111	; 0x6f
 8003362:	9242      	str	r2, [sp, #264]	; 0x108
 8003364:	bf34      	ite	cc
 8003366:	2303      	movcc	r3, #3
 8003368:	2304      	movcs	r3, #4
 800336a:	e002      	b.n	8003372 <__svfiscanf_r+0x212>
 800336c:	2300      	movs	r3, #0
 800336e:	9342      	str	r3, [sp, #264]	; 0x108
 8003370:	2303      	movs	r3, #3
 8003372:	9347      	str	r3, [sp, #284]	; 0x11c
 8003374:	6863      	ldr	r3, [r4, #4]
 8003376:	2b00      	cmp	r3, #0
 8003378:	dd49      	ble.n	800340e <__svfiscanf_r+0x2ae>
 800337a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800337c:	065b      	lsls	r3, r3, #25
 800337e:	d404      	bmi.n	800338a <__svfiscanf_r+0x22a>
 8003380:	6823      	ldr	r3, [r4, #0]
 8003382:	781a      	ldrb	r2, [r3, #0]
 8003384:	5cba      	ldrb	r2, [r7, r2]
 8003386:	0710      	lsls	r0, r2, #28
 8003388:	d448      	bmi.n	800341c <__svfiscanf_r+0x2bc>
 800338a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800338c:	2b02      	cmp	r3, #2
 800338e:	dc60      	bgt.n	8003452 <__svfiscanf_r+0x2f2>
 8003390:	466b      	mov	r3, sp
 8003392:	4622      	mov	r2, r4
 8003394:	a941      	add	r1, sp, #260	; 0x104
 8003396:	4630      	mov	r0, r6
 8003398:	f000 f898 	bl	80034cc <_scanf_chars>
 800339c:	2801      	cmp	r0, #1
 800339e:	d074      	beq.n	800348a <__svfiscanf_r+0x32a>
 80033a0:	2802      	cmp	r0, #2
 80033a2:	f47f af10 	bne.w	80031c6 <__svfiscanf_r+0x66>
 80033a6:	e7c1      	b.n	800332c <__svfiscanf_r+0x1cc>
 80033a8:	2308      	movs	r3, #8
 80033aa:	9342      	str	r3, [sp, #264]	; 0x108
 80033ac:	2304      	movs	r3, #4
 80033ae:	e7e0      	b.n	8003372 <__svfiscanf_r+0x212>
 80033b0:	220a      	movs	r2, #10
 80033b2:	e7d5      	b.n	8003360 <__svfiscanf_r+0x200>
 80033b4:	4629      	mov	r1, r5
 80033b6:	4640      	mov	r0, r8
 80033b8:	f000 fb6c 	bl	8003a94 <__sccl>
 80033bc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80033be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033c2:	9341      	str	r3, [sp, #260]	; 0x104
 80033c4:	4605      	mov	r5, r0
 80033c6:	2301      	movs	r3, #1
 80033c8:	e7d3      	b.n	8003372 <__svfiscanf_r+0x212>
 80033ca:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80033cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033d0:	9341      	str	r3, [sp, #260]	; 0x104
 80033d2:	2300      	movs	r3, #0
 80033d4:	e7cd      	b.n	8003372 <__svfiscanf_r+0x212>
 80033d6:	2302      	movs	r3, #2
 80033d8:	e7cb      	b.n	8003372 <__svfiscanf_r+0x212>
 80033da:	9841      	ldr	r0, [sp, #260]	; 0x104
 80033dc:	06c3      	lsls	r3, r0, #27
 80033de:	f53f aef2 	bmi.w	80031c6 <__svfiscanf_r+0x66>
 80033e2:	9b00      	ldr	r3, [sp, #0]
 80033e4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80033e6:	1d19      	adds	r1, r3, #4
 80033e8:	9100      	str	r1, [sp, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	07c0      	lsls	r0, r0, #31
 80033ee:	bf4c      	ite	mi
 80033f0:	801a      	strhmi	r2, [r3, #0]
 80033f2:	601a      	strpl	r2, [r3, #0]
 80033f4:	e6e7      	b.n	80031c6 <__svfiscanf_r+0x66>
 80033f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80033f8:	07d8      	lsls	r0, r3, #31
 80033fa:	d405      	bmi.n	8003408 <__svfiscanf_r+0x2a8>
 80033fc:	89a3      	ldrh	r3, [r4, #12]
 80033fe:	0599      	lsls	r1, r3, #22
 8003400:	d402      	bmi.n	8003408 <__svfiscanf_r+0x2a8>
 8003402:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003404:	f7ff fad7 	bl	80029b6 <__retarget_lock_release_recursive>
 8003408:	f04f 30ff 	mov.w	r0, #4294967295
 800340c:	e79b      	b.n	8003346 <__svfiscanf_r+0x1e6>
 800340e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003410:	4621      	mov	r1, r4
 8003412:	4630      	mov	r0, r6
 8003414:	4798      	blx	r3
 8003416:	2800      	cmp	r0, #0
 8003418:	d0af      	beq.n	800337a <__svfiscanf_r+0x21a>
 800341a:	e787      	b.n	800332c <__svfiscanf_r+0x1cc>
 800341c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800341e:	3201      	adds	r2, #1
 8003420:	9245      	str	r2, [sp, #276]	; 0x114
 8003422:	6862      	ldr	r2, [r4, #4]
 8003424:	3a01      	subs	r2, #1
 8003426:	2a00      	cmp	r2, #0
 8003428:	6062      	str	r2, [r4, #4]
 800342a:	dd0b      	ble.n	8003444 <__svfiscanf_r+0x2e4>
 800342c:	3301      	adds	r3, #1
 800342e:	6023      	str	r3, [r4, #0]
 8003430:	e7a6      	b.n	8003380 <__svfiscanf_r+0x220>
 8003432:	bf00      	nop
 8003434:	08003b7b 	.word	0x08003b7b
 8003438:	080039a5 	.word	0x080039a5
 800343c:	0800404f 	.word	0x0800404f
 8003440:	08004006 	.word	0x08004006
 8003444:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003446:	4621      	mov	r1, r4
 8003448:	4630      	mov	r0, r6
 800344a:	4798      	blx	r3
 800344c:	2800      	cmp	r0, #0
 800344e:	d097      	beq.n	8003380 <__svfiscanf_r+0x220>
 8003450:	e76c      	b.n	800332c <__svfiscanf_r+0x1cc>
 8003452:	2b04      	cmp	r3, #4
 8003454:	dc06      	bgt.n	8003464 <__svfiscanf_r+0x304>
 8003456:	466b      	mov	r3, sp
 8003458:	4622      	mov	r2, r4
 800345a:	a941      	add	r1, sp, #260	; 0x104
 800345c:	4630      	mov	r0, r6
 800345e:	f000 f88f 	bl	8003580 <_scanf_i>
 8003462:	e79b      	b.n	800339c <__svfiscanf_r+0x23c>
 8003464:	4b0e      	ldr	r3, [pc, #56]	; (80034a0 <__svfiscanf_r+0x340>)
 8003466:	2b00      	cmp	r3, #0
 8003468:	f43f aead 	beq.w	80031c6 <__svfiscanf_r+0x66>
 800346c:	466b      	mov	r3, sp
 800346e:	4622      	mov	r2, r4
 8003470:	a941      	add	r1, sp, #260	; 0x104
 8003472:	4630      	mov	r0, r6
 8003474:	f3af 8000 	nop.w
 8003478:	e790      	b.n	800339c <__svfiscanf_r+0x23c>
 800347a:	89a3      	ldrh	r3, [r4, #12]
 800347c:	0599      	lsls	r1, r3, #22
 800347e:	f53f af59 	bmi.w	8003334 <__svfiscanf_r+0x1d4>
 8003482:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003484:	f7ff fa97 	bl	80029b6 <__retarget_lock_release_recursive>
 8003488:	e754      	b.n	8003334 <__svfiscanf_r+0x1d4>
 800348a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800348c:	07da      	lsls	r2, r3, #31
 800348e:	d405      	bmi.n	800349c <__svfiscanf_r+0x33c>
 8003490:	89a3      	ldrh	r3, [r4, #12]
 8003492:	059b      	lsls	r3, r3, #22
 8003494:	d402      	bmi.n	800349c <__svfiscanf_r+0x33c>
 8003496:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003498:	f7ff fa8d 	bl	80029b6 <__retarget_lock_release_recursive>
 800349c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800349e:	e752      	b.n	8003346 <__svfiscanf_r+0x1e6>
 80034a0:	00000000 	.word	0x00000000

080034a4 <_vfiscanf_r>:
 80034a4:	b530      	push	{r4, r5, lr}
 80034a6:	4604      	mov	r4, r0
 80034a8:	b085      	sub	sp, #20
 80034aa:	b148      	cbz	r0, 80034c0 <_vfiscanf_r+0x1c>
 80034ac:	6a05      	ldr	r5, [r0, #32]
 80034ae:	b93d      	cbnz	r5, 80034c0 <_vfiscanf_r+0x1c>
 80034b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80034b4:	9101      	str	r1, [sp, #4]
 80034b6:	f7fe ffc1 	bl	800243c <__sinit>
 80034ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80034be:	9901      	ldr	r1, [sp, #4]
 80034c0:	4620      	mov	r0, r4
 80034c2:	b005      	add	sp, #20
 80034c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80034c8:	f7ff be4a 	b.w	8003160 <__svfiscanf_r>

080034cc <_scanf_chars>:
 80034cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034d0:	4615      	mov	r5, r2
 80034d2:	688a      	ldr	r2, [r1, #8]
 80034d4:	4680      	mov	r8, r0
 80034d6:	460c      	mov	r4, r1
 80034d8:	b932      	cbnz	r2, 80034e8 <_scanf_chars+0x1c>
 80034da:	698a      	ldr	r2, [r1, #24]
 80034dc:	2a00      	cmp	r2, #0
 80034de:	bf0c      	ite	eq
 80034e0:	2201      	moveq	r2, #1
 80034e2:	f04f 32ff 	movne.w	r2, #4294967295
 80034e6:	608a      	str	r2, [r1, #8]
 80034e8:	6822      	ldr	r2, [r4, #0]
 80034ea:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800357c <_scanf_chars+0xb0>
 80034ee:	06d1      	lsls	r1, r2, #27
 80034f0:	bf5f      	itttt	pl
 80034f2:	681a      	ldrpl	r2, [r3, #0]
 80034f4:	1d11      	addpl	r1, r2, #4
 80034f6:	6019      	strpl	r1, [r3, #0]
 80034f8:	6816      	ldrpl	r6, [r2, #0]
 80034fa:	2700      	movs	r7, #0
 80034fc:	69a0      	ldr	r0, [r4, #24]
 80034fe:	b188      	cbz	r0, 8003524 <_scanf_chars+0x58>
 8003500:	2801      	cmp	r0, #1
 8003502:	d107      	bne.n	8003514 <_scanf_chars+0x48>
 8003504:	682a      	ldr	r2, [r5, #0]
 8003506:	7811      	ldrb	r1, [r2, #0]
 8003508:	6962      	ldr	r2, [r4, #20]
 800350a:	5c52      	ldrb	r2, [r2, r1]
 800350c:	b952      	cbnz	r2, 8003524 <_scanf_chars+0x58>
 800350e:	2f00      	cmp	r7, #0
 8003510:	d031      	beq.n	8003576 <_scanf_chars+0xaa>
 8003512:	e022      	b.n	800355a <_scanf_chars+0x8e>
 8003514:	2802      	cmp	r0, #2
 8003516:	d120      	bne.n	800355a <_scanf_chars+0x8e>
 8003518:	682b      	ldr	r3, [r5, #0]
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8003520:	071b      	lsls	r3, r3, #28
 8003522:	d41a      	bmi.n	800355a <_scanf_chars+0x8e>
 8003524:	6823      	ldr	r3, [r4, #0]
 8003526:	06da      	lsls	r2, r3, #27
 8003528:	bf5e      	ittt	pl
 800352a:	682b      	ldrpl	r3, [r5, #0]
 800352c:	781b      	ldrbpl	r3, [r3, #0]
 800352e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8003532:	682a      	ldr	r2, [r5, #0]
 8003534:	686b      	ldr	r3, [r5, #4]
 8003536:	3201      	adds	r2, #1
 8003538:	602a      	str	r2, [r5, #0]
 800353a:	68a2      	ldr	r2, [r4, #8]
 800353c:	3b01      	subs	r3, #1
 800353e:	3a01      	subs	r2, #1
 8003540:	606b      	str	r3, [r5, #4]
 8003542:	3701      	adds	r7, #1
 8003544:	60a2      	str	r2, [r4, #8]
 8003546:	b142      	cbz	r2, 800355a <_scanf_chars+0x8e>
 8003548:	2b00      	cmp	r3, #0
 800354a:	dcd7      	bgt.n	80034fc <_scanf_chars+0x30>
 800354c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003550:	4629      	mov	r1, r5
 8003552:	4640      	mov	r0, r8
 8003554:	4798      	blx	r3
 8003556:	2800      	cmp	r0, #0
 8003558:	d0d0      	beq.n	80034fc <_scanf_chars+0x30>
 800355a:	6823      	ldr	r3, [r4, #0]
 800355c:	f013 0310 	ands.w	r3, r3, #16
 8003560:	d105      	bne.n	800356e <_scanf_chars+0xa2>
 8003562:	68e2      	ldr	r2, [r4, #12]
 8003564:	3201      	adds	r2, #1
 8003566:	60e2      	str	r2, [r4, #12]
 8003568:	69a2      	ldr	r2, [r4, #24]
 800356a:	b102      	cbz	r2, 800356e <_scanf_chars+0xa2>
 800356c:	7033      	strb	r3, [r6, #0]
 800356e:	6923      	ldr	r3, [r4, #16]
 8003570:	443b      	add	r3, r7
 8003572:	6123      	str	r3, [r4, #16]
 8003574:	2000      	movs	r0, #0
 8003576:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800357a:	bf00      	nop
 800357c:	0800404f 	.word	0x0800404f

08003580 <_scanf_i>:
 8003580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003584:	4698      	mov	r8, r3
 8003586:	4b74      	ldr	r3, [pc, #464]	; (8003758 <_scanf_i+0x1d8>)
 8003588:	460c      	mov	r4, r1
 800358a:	4682      	mov	sl, r0
 800358c:	4616      	mov	r6, r2
 800358e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003592:	b087      	sub	sp, #28
 8003594:	ab03      	add	r3, sp, #12
 8003596:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800359a:	4b70      	ldr	r3, [pc, #448]	; (800375c <_scanf_i+0x1dc>)
 800359c:	69a1      	ldr	r1, [r4, #24]
 800359e:	4a70      	ldr	r2, [pc, #448]	; (8003760 <_scanf_i+0x1e0>)
 80035a0:	2903      	cmp	r1, #3
 80035a2:	bf18      	it	ne
 80035a4:	461a      	movne	r2, r3
 80035a6:	68a3      	ldr	r3, [r4, #8]
 80035a8:	9201      	str	r2, [sp, #4]
 80035aa:	1e5a      	subs	r2, r3, #1
 80035ac:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80035b0:	bf88      	it	hi
 80035b2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80035b6:	4627      	mov	r7, r4
 80035b8:	bf82      	ittt	hi
 80035ba:	eb03 0905 	addhi.w	r9, r3, r5
 80035be:	f240 135d 	movwhi	r3, #349	; 0x15d
 80035c2:	60a3      	strhi	r3, [r4, #8]
 80035c4:	f857 3b1c 	ldr.w	r3, [r7], #28
 80035c8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80035cc:	bf98      	it	ls
 80035ce:	f04f 0900 	movls.w	r9, #0
 80035d2:	6023      	str	r3, [r4, #0]
 80035d4:	463d      	mov	r5, r7
 80035d6:	f04f 0b00 	mov.w	fp, #0
 80035da:	6831      	ldr	r1, [r6, #0]
 80035dc:	ab03      	add	r3, sp, #12
 80035de:	7809      	ldrb	r1, [r1, #0]
 80035e0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80035e4:	2202      	movs	r2, #2
 80035e6:	f7fc fdfb 	bl	80001e0 <memchr>
 80035ea:	b328      	cbz	r0, 8003638 <_scanf_i+0xb8>
 80035ec:	f1bb 0f01 	cmp.w	fp, #1
 80035f0:	d159      	bne.n	80036a6 <_scanf_i+0x126>
 80035f2:	6862      	ldr	r2, [r4, #4]
 80035f4:	b92a      	cbnz	r2, 8003602 <_scanf_i+0x82>
 80035f6:	6822      	ldr	r2, [r4, #0]
 80035f8:	2308      	movs	r3, #8
 80035fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035fe:	6063      	str	r3, [r4, #4]
 8003600:	6022      	str	r2, [r4, #0]
 8003602:	6822      	ldr	r2, [r4, #0]
 8003604:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8003608:	6022      	str	r2, [r4, #0]
 800360a:	68a2      	ldr	r2, [r4, #8]
 800360c:	1e51      	subs	r1, r2, #1
 800360e:	60a1      	str	r1, [r4, #8]
 8003610:	b192      	cbz	r2, 8003638 <_scanf_i+0xb8>
 8003612:	6832      	ldr	r2, [r6, #0]
 8003614:	1c51      	adds	r1, r2, #1
 8003616:	6031      	str	r1, [r6, #0]
 8003618:	7812      	ldrb	r2, [r2, #0]
 800361a:	f805 2b01 	strb.w	r2, [r5], #1
 800361e:	6872      	ldr	r2, [r6, #4]
 8003620:	3a01      	subs	r2, #1
 8003622:	2a00      	cmp	r2, #0
 8003624:	6072      	str	r2, [r6, #4]
 8003626:	dc07      	bgt.n	8003638 <_scanf_i+0xb8>
 8003628:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800362c:	4631      	mov	r1, r6
 800362e:	4650      	mov	r0, sl
 8003630:	4790      	blx	r2
 8003632:	2800      	cmp	r0, #0
 8003634:	f040 8085 	bne.w	8003742 <_scanf_i+0x1c2>
 8003638:	f10b 0b01 	add.w	fp, fp, #1
 800363c:	f1bb 0f03 	cmp.w	fp, #3
 8003640:	d1cb      	bne.n	80035da <_scanf_i+0x5a>
 8003642:	6863      	ldr	r3, [r4, #4]
 8003644:	b90b      	cbnz	r3, 800364a <_scanf_i+0xca>
 8003646:	230a      	movs	r3, #10
 8003648:	6063      	str	r3, [r4, #4]
 800364a:	6863      	ldr	r3, [r4, #4]
 800364c:	4945      	ldr	r1, [pc, #276]	; (8003764 <_scanf_i+0x1e4>)
 800364e:	6960      	ldr	r0, [r4, #20]
 8003650:	1ac9      	subs	r1, r1, r3
 8003652:	f000 fa1f 	bl	8003a94 <__sccl>
 8003656:	f04f 0b00 	mov.w	fp, #0
 800365a:	68a3      	ldr	r3, [r4, #8]
 800365c:	6822      	ldr	r2, [r4, #0]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d03d      	beq.n	80036de <_scanf_i+0x15e>
 8003662:	6831      	ldr	r1, [r6, #0]
 8003664:	6960      	ldr	r0, [r4, #20]
 8003666:	f891 c000 	ldrb.w	ip, [r1]
 800366a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800366e:	2800      	cmp	r0, #0
 8003670:	d035      	beq.n	80036de <_scanf_i+0x15e>
 8003672:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8003676:	d124      	bne.n	80036c2 <_scanf_i+0x142>
 8003678:	0510      	lsls	r0, r2, #20
 800367a:	d522      	bpl.n	80036c2 <_scanf_i+0x142>
 800367c:	f10b 0b01 	add.w	fp, fp, #1
 8003680:	f1b9 0f00 	cmp.w	r9, #0
 8003684:	d003      	beq.n	800368e <_scanf_i+0x10e>
 8003686:	3301      	adds	r3, #1
 8003688:	f109 39ff 	add.w	r9, r9, #4294967295
 800368c:	60a3      	str	r3, [r4, #8]
 800368e:	6873      	ldr	r3, [r6, #4]
 8003690:	3b01      	subs	r3, #1
 8003692:	2b00      	cmp	r3, #0
 8003694:	6073      	str	r3, [r6, #4]
 8003696:	dd1b      	ble.n	80036d0 <_scanf_i+0x150>
 8003698:	6833      	ldr	r3, [r6, #0]
 800369a:	3301      	adds	r3, #1
 800369c:	6033      	str	r3, [r6, #0]
 800369e:	68a3      	ldr	r3, [r4, #8]
 80036a0:	3b01      	subs	r3, #1
 80036a2:	60a3      	str	r3, [r4, #8]
 80036a4:	e7d9      	b.n	800365a <_scanf_i+0xda>
 80036a6:	f1bb 0f02 	cmp.w	fp, #2
 80036aa:	d1ae      	bne.n	800360a <_scanf_i+0x8a>
 80036ac:	6822      	ldr	r2, [r4, #0]
 80036ae:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80036b2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80036b6:	d1bf      	bne.n	8003638 <_scanf_i+0xb8>
 80036b8:	2310      	movs	r3, #16
 80036ba:	6063      	str	r3, [r4, #4]
 80036bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036c0:	e7a2      	b.n	8003608 <_scanf_i+0x88>
 80036c2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80036c6:	6022      	str	r2, [r4, #0]
 80036c8:	780b      	ldrb	r3, [r1, #0]
 80036ca:	f805 3b01 	strb.w	r3, [r5], #1
 80036ce:	e7de      	b.n	800368e <_scanf_i+0x10e>
 80036d0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80036d4:	4631      	mov	r1, r6
 80036d6:	4650      	mov	r0, sl
 80036d8:	4798      	blx	r3
 80036da:	2800      	cmp	r0, #0
 80036dc:	d0df      	beq.n	800369e <_scanf_i+0x11e>
 80036de:	6823      	ldr	r3, [r4, #0]
 80036e0:	05d9      	lsls	r1, r3, #23
 80036e2:	d50d      	bpl.n	8003700 <_scanf_i+0x180>
 80036e4:	42bd      	cmp	r5, r7
 80036e6:	d909      	bls.n	80036fc <_scanf_i+0x17c>
 80036e8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80036ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80036f0:	4632      	mov	r2, r6
 80036f2:	4650      	mov	r0, sl
 80036f4:	4798      	blx	r3
 80036f6:	f105 39ff 	add.w	r9, r5, #4294967295
 80036fa:	464d      	mov	r5, r9
 80036fc:	42bd      	cmp	r5, r7
 80036fe:	d028      	beq.n	8003752 <_scanf_i+0x1d2>
 8003700:	6822      	ldr	r2, [r4, #0]
 8003702:	f012 0210 	ands.w	r2, r2, #16
 8003706:	d113      	bne.n	8003730 <_scanf_i+0x1b0>
 8003708:	702a      	strb	r2, [r5, #0]
 800370a:	6863      	ldr	r3, [r4, #4]
 800370c:	9e01      	ldr	r6, [sp, #4]
 800370e:	4639      	mov	r1, r7
 8003710:	4650      	mov	r0, sl
 8003712:	47b0      	blx	r6
 8003714:	f8d8 3000 	ldr.w	r3, [r8]
 8003718:	6821      	ldr	r1, [r4, #0]
 800371a:	1d1a      	adds	r2, r3, #4
 800371c:	f8c8 2000 	str.w	r2, [r8]
 8003720:	f011 0f20 	tst.w	r1, #32
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	d00f      	beq.n	8003748 <_scanf_i+0x1c8>
 8003728:	6018      	str	r0, [r3, #0]
 800372a:	68e3      	ldr	r3, [r4, #12]
 800372c:	3301      	adds	r3, #1
 800372e:	60e3      	str	r3, [r4, #12]
 8003730:	6923      	ldr	r3, [r4, #16]
 8003732:	1bed      	subs	r5, r5, r7
 8003734:	445d      	add	r5, fp
 8003736:	442b      	add	r3, r5
 8003738:	6123      	str	r3, [r4, #16]
 800373a:	2000      	movs	r0, #0
 800373c:	b007      	add	sp, #28
 800373e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003742:	f04f 0b00 	mov.w	fp, #0
 8003746:	e7ca      	b.n	80036de <_scanf_i+0x15e>
 8003748:	07ca      	lsls	r2, r1, #31
 800374a:	bf4c      	ite	mi
 800374c:	8018      	strhmi	r0, [r3, #0]
 800374e:	6018      	strpl	r0, [r3, #0]
 8003750:	e7eb      	b.n	800372a <_scanf_i+0x1aa>
 8003752:	2001      	movs	r0, #1
 8003754:	e7f2      	b.n	800373c <_scanf_i+0x1bc>
 8003756:	bf00      	nop
 8003758:	08003fdc 	.word	0x08003fdc
 800375c:	08003f51 	.word	0x08003f51
 8003760:	08003e69 	.word	0x08003e69
 8003764:	08004043 	.word	0x08004043

08003768 <__sflush_r>:
 8003768:	898a      	ldrh	r2, [r1, #12]
 800376a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800376e:	4605      	mov	r5, r0
 8003770:	0710      	lsls	r0, r2, #28
 8003772:	460c      	mov	r4, r1
 8003774:	d458      	bmi.n	8003828 <__sflush_r+0xc0>
 8003776:	684b      	ldr	r3, [r1, #4]
 8003778:	2b00      	cmp	r3, #0
 800377a:	dc05      	bgt.n	8003788 <__sflush_r+0x20>
 800377c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800377e:	2b00      	cmp	r3, #0
 8003780:	dc02      	bgt.n	8003788 <__sflush_r+0x20>
 8003782:	2000      	movs	r0, #0
 8003784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003788:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800378a:	2e00      	cmp	r6, #0
 800378c:	d0f9      	beq.n	8003782 <__sflush_r+0x1a>
 800378e:	2300      	movs	r3, #0
 8003790:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003794:	682f      	ldr	r7, [r5, #0]
 8003796:	6a21      	ldr	r1, [r4, #32]
 8003798:	602b      	str	r3, [r5, #0]
 800379a:	d032      	beq.n	8003802 <__sflush_r+0x9a>
 800379c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800379e:	89a3      	ldrh	r3, [r4, #12]
 80037a0:	075a      	lsls	r2, r3, #29
 80037a2:	d505      	bpl.n	80037b0 <__sflush_r+0x48>
 80037a4:	6863      	ldr	r3, [r4, #4]
 80037a6:	1ac0      	subs	r0, r0, r3
 80037a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80037aa:	b10b      	cbz	r3, 80037b0 <__sflush_r+0x48>
 80037ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80037ae:	1ac0      	subs	r0, r0, r3
 80037b0:	2300      	movs	r3, #0
 80037b2:	4602      	mov	r2, r0
 80037b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80037b6:	6a21      	ldr	r1, [r4, #32]
 80037b8:	4628      	mov	r0, r5
 80037ba:	47b0      	blx	r6
 80037bc:	1c43      	adds	r3, r0, #1
 80037be:	89a3      	ldrh	r3, [r4, #12]
 80037c0:	d106      	bne.n	80037d0 <__sflush_r+0x68>
 80037c2:	6829      	ldr	r1, [r5, #0]
 80037c4:	291d      	cmp	r1, #29
 80037c6:	d82b      	bhi.n	8003820 <__sflush_r+0xb8>
 80037c8:	4a29      	ldr	r2, [pc, #164]	; (8003870 <__sflush_r+0x108>)
 80037ca:	410a      	asrs	r2, r1
 80037cc:	07d6      	lsls	r6, r2, #31
 80037ce:	d427      	bmi.n	8003820 <__sflush_r+0xb8>
 80037d0:	2200      	movs	r2, #0
 80037d2:	6062      	str	r2, [r4, #4]
 80037d4:	04d9      	lsls	r1, r3, #19
 80037d6:	6922      	ldr	r2, [r4, #16]
 80037d8:	6022      	str	r2, [r4, #0]
 80037da:	d504      	bpl.n	80037e6 <__sflush_r+0x7e>
 80037dc:	1c42      	adds	r2, r0, #1
 80037de:	d101      	bne.n	80037e4 <__sflush_r+0x7c>
 80037e0:	682b      	ldr	r3, [r5, #0]
 80037e2:	b903      	cbnz	r3, 80037e6 <__sflush_r+0x7e>
 80037e4:	6560      	str	r0, [r4, #84]	; 0x54
 80037e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80037e8:	602f      	str	r7, [r5, #0]
 80037ea:	2900      	cmp	r1, #0
 80037ec:	d0c9      	beq.n	8003782 <__sflush_r+0x1a>
 80037ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80037f2:	4299      	cmp	r1, r3
 80037f4:	d002      	beq.n	80037fc <__sflush_r+0x94>
 80037f6:	4628      	mov	r0, r5
 80037f8:	f7ff f8de 	bl	80029b8 <_free_r>
 80037fc:	2000      	movs	r0, #0
 80037fe:	6360      	str	r0, [r4, #52]	; 0x34
 8003800:	e7c0      	b.n	8003784 <__sflush_r+0x1c>
 8003802:	2301      	movs	r3, #1
 8003804:	4628      	mov	r0, r5
 8003806:	47b0      	blx	r6
 8003808:	1c41      	adds	r1, r0, #1
 800380a:	d1c8      	bne.n	800379e <__sflush_r+0x36>
 800380c:	682b      	ldr	r3, [r5, #0]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d0c5      	beq.n	800379e <__sflush_r+0x36>
 8003812:	2b1d      	cmp	r3, #29
 8003814:	d001      	beq.n	800381a <__sflush_r+0xb2>
 8003816:	2b16      	cmp	r3, #22
 8003818:	d101      	bne.n	800381e <__sflush_r+0xb6>
 800381a:	602f      	str	r7, [r5, #0]
 800381c:	e7b1      	b.n	8003782 <__sflush_r+0x1a>
 800381e:	89a3      	ldrh	r3, [r4, #12]
 8003820:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003824:	81a3      	strh	r3, [r4, #12]
 8003826:	e7ad      	b.n	8003784 <__sflush_r+0x1c>
 8003828:	690f      	ldr	r7, [r1, #16]
 800382a:	2f00      	cmp	r7, #0
 800382c:	d0a9      	beq.n	8003782 <__sflush_r+0x1a>
 800382e:	0793      	lsls	r3, r2, #30
 8003830:	680e      	ldr	r6, [r1, #0]
 8003832:	bf08      	it	eq
 8003834:	694b      	ldreq	r3, [r1, #20]
 8003836:	600f      	str	r7, [r1, #0]
 8003838:	bf18      	it	ne
 800383a:	2300      	movne	r3, #0
 800383c:	eba6 0807 	sub.w	r8, r6, r7
 8003840:	608b      	str	r3, [r1, #8]
 8003842:	f1b8 0f00 	cmp.w	r8, #0
 8003846:	dd9c      	ble.n	8003782 <__sflush_r+0x1a>
 8003848:	6a21      	ldr	r1, [r4, #32]
 800384a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800384c:	4643      	mov	r3, r8
 800384e:	463a      	mov	r2, r7
 8003850:	4628      	mov	r0, r5
 8003852:	47b0      	blx	r6
 8003854:	2800      	cmp	r0, #0
 8003856:	dc06      	bgt.n	8003866 <__sflush_r+0xfe>
 8003858:	89a3      	ldrh	r3, [r4, #12]
 800385a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800385e:	81a3      	strh	r3, [r4, #12]
 8003860:	f04f 30ff 	mov.w	r0, #4294967295
 8003864:	e78e      	b.n	8003784 <__sflush_r+0x1c>
 8003866:	4407      	add	r7, r0
 8003868:	eba8 0800 	sub.w	r8, r8, r0
 800386c:	e7e9      	b.n	8003842 <__sflush_r+0xda>
 800386e:	bf00      	nop
 8003870:	dfbffffe 	.word	0xdfbffffe

08003874 <_fflush_r>:
 8003874:	b538      	push	{r3, r4, r5, lr}
 8003876:	690b      	ldr	r3, [r1, #16]
 8003878:	4605      	mov	r5, r0
 800387a:	460c      	mov	r4, r1
 800387c:	b913      	cbnz	r3, 8003884 <_fflush_r+0x10>
 800387e:	2500      	movs	r5, #0
 8003880:	4628      	mov	r0, r5
 8003882:	bd38      	pop	{r3, r4, r5, pc}
 8003884:	b118      	cbz	r0, 800388e <_fflush_r+0x1a>
 8003886:	6a03      	ldr	r3, [r0, #32]
 8003888:	b90b      	cbnz	r3, 800388e <_fflush_r+0x1a>
 800388a:	f7fe fdd7 	bl	800243c <__sinit>
 800388e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d0f3      	beq.n	800387e <_fflush_r+0xa>
 8003896:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003898:	07d0      	lsls	r0, r2, #31
 800389a:	d404      	bmi.n	80038a6 <_fflush_r+0x32>
 800389c:	0599      	lsls	r1, r3, #22
 800389e:	d402      	bmi.n	80038a6 <_fflush_r+0x32>
 80038a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80038a2:	f7ff f887 	bl	80029b4 <__retarget_lock_acquire_recursive>
 80038a6:	4628      	mov	r0, r5
 80038a8:	4621      	mov	r1, r4
 80038aa:	f7ff ff5d 	bl	8003768 <__sflush_r>
 80038ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80038b0:	07da      	lsls	r2, r3, #31
 80038b2:	4605      	mov	r5, r0
 80038b4:	d4e4      	bmi.n	8003880 <_fflush_r+0xc>
 80038b6:	89a3      	ldrh	r3, [r4, #12]
 80038b8:	059b      	lsls	r3, r3, #22
 80038ba:	d4e1      	bmi.n	8003880 <_fflush_r+0xc>
 80038bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80038be:	f7ff f87a 	bl	80029b6 <__retarget_lock_release_recursive>
 80038c2:	e7dd      	b.n	8003880 <_fflush_r+0xc>

080038c4 <__swhatbuf_r>:
 80038c4:	b570      	push	{r4, r5, r6, lr}
 80038c6:	460c      	mov	r4, r1
 80038c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038cc:	2900      	cmp	r1, #0
 80038ce:	b096      	sub	sp, #88	; 0x58
 80038d0:	4615      	mov	r5, r2
 80038d2:	461e      	mov	r6, r3
 80038d4:	da0d      	bge.n	80038f2 <__swhatbuf_r+0x2e>
 80038d6:	89a3      	ldrh	r3, [r4, #12]
 80038d8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80038dc:	f04f 0100 	mov.w	r1, #0
 80038e0:	bf0c      	ite	eq
 80038e2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80038e6:	2340      	movne	r3, #64	; 0x40
 80038e8:	2000      	movs	r0, #0
 80038ea:	6031      	str	r1, [r6, #0]
 80038ec:	602b      	str	r3, [r5, #0]
 80038ee:	b016      	add	sp, #88	; 0x58
 80038f0:	bd70      	pop	{r4, r5, r6, pc}
 80038f2:	466a      	mov	r2, sp
 80038f4:	f000 f9c6 	bl	8003c84 <_fstat_r>
 80038f8:	2800      	cmp	r0, #0
 80038fa:	dbec      	blt.n	80038d6 <__swhatbuf_r+0x12>
 80038fc:	9901      	ldr	r1, [sp, #4]
 80038fe:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003902:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003906:	4259      	negs	r1, r3
 8003908:	4159      	adcs	r1, r3
 800390a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800390e:	e7eb      	b.n	80038e8 <__swhatbuf_r+0x24>

08003910 <__smakebuf_r>:
 8003910:	898b      	ldrh	r3, [r1, #12]
 8003912:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003914:	079d      	lsls	r5, r3, #30
 8003916:	4606      	mov	r6, r0
 8003918:	460c      	mov	r4, r1
 800391a:	d507      	bpl.n	800392c <__smakebuf_r+0x1c>
 800391c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003920:	6023      	str	r3, [r4, #0]
 8003922:	6123      	str	r3, [r4, #16]
 8003924:	2301      	movs	r3, #1
 8003926:	6163      	str	r3, [r4, #20]
 8003928:	b002      	add	sp, #8
 800392a:	bd70      	pop	{r4, r5, r6, pc}
 800392c:	ab01      	add	r3, sp, #4
 800392e:	466a      	mov	r2, sp
 8003930:	f7ff ffc8 	bl	80038c4 <__swhatbuf_r>
 8003934:	9900      	ldr	r1, [sp, #0]
 8003936:	4605      	mov	r5, r0
 8003938:	4630      	mov	r0, r6
 800393a:	f7ff f8b1 	bl	8002aa0 <_malloc_r>
 800393e:	b948      	cbnz	r0, 8003954 <__smakebuf_r+0x44>
 8003940:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003944:	059a      	lsls	r2, r3, #22
 8003946:	d4ef      	bmi.n	8003928 <__smakebuf_r+0x18>
 8003948:	f023 0303 	bic.w	r3, r3, #3
 800394c:	f043 0302 	orr.w	r3, r3, #2
 8003950:	81a3      	strh	r3, [r4, #12]
 8003952:	e7e3      	b.n	800391c <__smakebuf_r+0xc>
 8003954:	89a3      	ldrh	r3, [r4, #12]
 8003956:	6020      	str	r0, [r4, #0]
 8003958:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800395c:	81a3      	strh	r3, [r4, #12]
 800395e:	9b00      	ldr	r3, [sp, #0]
 8003960:	6163      	str	r3, [r4, #20]
 8003962:	9b01      	ldr	r3, [sp, #4]
 8003964:	6120      	str	r0, [r4, #16]
 8003966:	b15b      	cbz	r3, 8003980 <__smakebuf_r+0x70>
 8003968:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800396c:	4630      	mov	r0, r6
 800396e:	f000 f99b 	bl	8003ca8 <_isatty_r>
 8003972:	b128      	cbz	r0, 8003980 <__smakebuf_r+0x70>
 8003974:	89a3      	ldrh	r3, [r4, #12]
 8003976:	f023 0303 	bic.w	r3, r3, #3
 800397a:	f043 0301 	orr.w	r3, r3, #1
 800397e:	81a3      	strh	r3, [r4, #12]
 8003980:	89a3      	ldrh	r3, [r4, #12]
 8003982:	431d      	orrs	r5, r3
 8003984:	81a5      	strh	r5, [r4, #12]
 8003986:	e7cf      	b.n	8003928 <__smakebuf_r+0x18>

08003988 <lflush>:
 8003988:	898b      	ldrh	r3, [r1, #12]
 800398a:	f003 0309 	and.w	r3, r3, #9
 800398e:	2b09      	cmp	r3, #9
 8003990:	d103      	bne.n	800399a <lflush+0x12>
 8003992:	4b03      	ldr	r3, [pc, #12]	; (80039a0 <lflush+0x18>)
 8003994:	6818      	ldr	r0, [r3, #0]
 8003996:	f7ff bf6d 	b.w	8003874 <_fflush_r>
 800399a:	2000      	movs	r0, #0
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop
 80039a0:	20000064 	.word	0x20000064

080039a4 <__srefill_r>:
 80039a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039a6:	460c      	mov	r4, r1
 80039a8:	4605      	mov	r5, r0
 80039aa:	b118      	cbz	r0, 80039b4 <__srefill_r+0x10>
 80039ac:	6a03      	ldr	r3, [r0, #32]
 80039ae:	b90b      	cbnz	r3, 80039b4 <__srefill_r+0x10>
 80039b0:	f7fe fd44 	bl	800243c <__sinit>
 80039b4:	2300      	movs	r3, #0
 80039b6:	6063      	str	r3, [r4, #4]
 80039b8:	89a3      	ldrh	r3, [r4, #12]
 80039ba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80039be:	069e      	lsls	r6, r3, #26
 80039c0:	d502      	bpl.n	80039c8 <__srefill_r+0x24>
 80039c2:	f04f 30ff 	mov.w	r0, #4294967295
 80039c6:	e05c      	b.n	8003a82 <__srefill_r+0xde>
 80039c8:	0758      	lsls	r0, r3, #29
 80039ca:	d448      	bmi.n	8003a5e <__srefill_r+0xba>
 80039cc:	06d9      	lsls	r1, r3, #27
 80039ce:	d405      	bmi.n	80039dc <__srefill_r+0x38>
 80039d0:	2309      	movs	r3, #9
 80039d2:	602b      	str	r3, [r5, #0]
 80039d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80039d8:	81a3      	strh	r3, [r4, #12]
 80039da:	e7f2      	b.n	80039c2 <__srefill_r+0x1e>
 80039dc:	071a      	lsls	r2, r3, #28
 80039de:	d50b      	bpl.n	80039f8 <__srefill_r+0x54>
 80039e0:	4621      	mov	r1, r4
 80039e2:	4628      	mov	r0, r5
 80039e4:	f7ff ff46 	bl	8003874 <_fflush_r>
 80039e8:	2800      	cmp	r0, #0
 80039ea:	d1ea      	bne.n	80039c2 <__srefill_r+0x1e>
 80039ec:	89a3      	ldrh	r3, [r4, #12]
 80039ee:	60a0      	str	r0, [r4, #8]
 80039f0:	f023 0308 	bic.w	r3, r3, #8
 80039f4:	81a3      	strh	r3, [r4, #12]
 80039f6:	61a0      	str	r0, [r4, #24]
 80039f8:	89a3      	ldrh	r3, [r4, #12]
 80039fa:	f043 0304 	orr.w	r3, r3, #4
 80039fe:	81a3      	strh	r3, [r4, #12]
 8003a00:	6923      	ldr	r3, [r4, #16]
 8003a02:	b91b      	cbnz	r3, 8003a0c <__srefill_r+0x68>
 8003a04:	4621      	mov	r1, r4
 8003a06:	4628      	mov	r0, r5
 8003a08:	f7ff ff82 	bl	8003910 <__smakebuf_r>
 8003a0c:	89a6      	ldrh	r6, [r4, #12]
 8003a0e:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8003a12:	07b3      	lsls	r3, r6, #30
 8003a14:	d00f      	beq.n	8003a36 <__srefill_r+0x92>
 8003a16:	2301      	movs	r3, #1
 8003a18:	4a1b      	ldr	r2, [pc, #108]	; (8003a88 <__srefill_r+0xe4>)
 8003a1a:	491c      	ldr	r1, [pc, #112]	; (8003a8c <__srefill_r+0xe8>)
 8003a1c:	481c      	ldr	r0, [pc, #112]	; (8003a90 <__srefill_r+0xec>)
 8003a1e:	81a3      	strh	r3, [r4, #12]
 8003a20:	f006 0609 	and.w	r6, r6, #9
 8003a24:	f7fe fd22 	bl	800246c <_fwalk_sglue>
 8003a28:	2e09      	cmp	r6, #9
 8003a2a:	81a7      	strh	r7, [r4, #12]
 8003a2c:	d103      	bne.n	8003a36 <__srefill_r+0x92>
 8003a2e:	4621      	mov	r1, r4
 8003a30:	4628      	mov	r0, r5
 8003a32:	f7ff fe99 	bl	8003768 <__sflush_r>
 8003a36:	6922      	ldr	r2, [r4, #16]
 8003a38:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003a3a:	6963      	ldr	r3, [r4, #20]
 8003a3c:	6a21      	ldr	r1, [r4, #32]
 8003a3e:	6022      	str	r2, [r4, #0]
 8003a40:	4628      	mov	r0, r5
 8003a42:	47b0      	blx	r6
 8003a44:	2800      	cmp	r0, #0
 8003a46:	6060      	str	r0, [r4, #4]
 8003a48:	dc1c      	bgt.n	8003a84 <__srefill_r+0xe0>
 8003a4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a4e:	bf17      	itett	ne
 8003a50:	2200      	movne	r2, #0
 8003a52:	f043 0320 	orreq.w	r3, r3, #32
 8003a56:	6062      	strne	r2, [r4, #4]
 8003a58:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8003a5c:	e7bc      	b.n	80039d8 <__srefill_r+0x34>
 8003a5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003a60:	2900      	cmp	r1, #0
 8003a62:	d0cd      	beq.n	8003a00 <__srefill_r+0x5c>
 8003a64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003a68:	4299      	cmp	r1, r3
 8003a6a:	d002      	beq.n	8003a72 <__srefill_r+0xce>
 8003a6c:	4628      	mov	r0, r5
 8003a6e:	f7fe ffa3 	bl	80029b8 <_free_r>
 8003a72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a74:	6063      	str	r3, [r4, #4]
 8003a76:	2000      	movs	r0, #0
 8003a78:	6360      	str	r0, [r4, #52]	; 0x34
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d0c0      	beq.n	8003a00 <__srefill_r+0x5c>
 8003a7e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003a80:	6023      	str	r3, [r4, #0]
 8003a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a84:	2000      	movs	r0, #0
 8003a86:	e7fc      	b.n	8003a82 <__srefill_r+0xde>
 8003a88:	2000000c 	.word	0x2000000c
 8003a8c:	08003989 	.word	0x08003989
 8003a90:	20000018 	.word	0x20000018

08003a94 <__sccl>:
 8003a94:	b570      	push	{r4, r5, r6, lr}
 8003a96:	780b      	ldrb	r3, [r1, #0]
 8003a98:	4604      	mov	r4, r0
 8003a9a:	2b5e      	cmp	r3, #94	; 0x5e
 8003a9c:	bf0b      	itete	eq
 8003a9e:	784b      	ldrbeq	r3, [r1, #1]
 8003aa0:	1c4a      	addne	r2, r1, #1
 8003aa2:	1c8a      	addeq	r2, r1, #2
 8003aa4:	2100      	movne	r1, #0
 8003aa6:	bf08      	it	eq
 8003aa8:	2101      	moveq	r1, #1
 8003aaa:	3801      	subs	r0, #1
 8003aac:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8003ab0:	f800 1f01 	strb.w	r1, [r0, #1]!
 8003ab4:	42a8      	cmp	r0, r5
 8003ab6:	d1fb      	bne.n	8003ab0 <__sccl+0x1c>
 8003ab8:	b90b      	cbnz	r3, 8003abe <__sccl+0x2a>
 8003aba:	1e50      	subs	r0, r2, #1
 8003abc:	bd70      	pop	{r4, r5, r6, pc}
 8003abe:	f081 0101 	eor.w	r1, r1, #1
 8003ac2:	54e1      	strb	r1, [r4, r3]
 8003ac4:	4610      	mov	r0, r2
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	f812 5b01 	ldrb.w	r5, [r2], #1
 8003acc:	2d2d      	cmp	r5, #45	; 0x2d
 8003ace:	d005      	beq.n	8003adc <__sccl+0x48>
 8003ad0:	2d5d      	cmp	r5, #93	; 0x5d
 8003ad2:	d016      	beq.n	8003b02 <__sccl+0x6e>
 8003ad4:	2d00      	cmp	r5, #0
 8003ad6:	d0f1      	beq.n	8003abc <__sccl+0x28>
 8003ad8:	462b      	mov	r3, r5
 8003ada:	e7f2      	b.n	8003ac2 <__sccl+0x2e>
 8003adc:	7846      	ldrb	r6, [r0, #1]
 8003ade:	2e5d      	cmp	r6, #93	; 0x5d
 8003ae0:	d0fa      	beq.n	8003ad8 <__sccl+0x44>
 8003ae2:	42b3      	cmp	r3, r6
 8003ae4:	dcf8      	bgt.n	8003ad8 <__sccl+0x44>
 8003ae6:	3002      	adds	r0, #2
 8003ae8:	461a      	mov	r2, r3
 8003aea:	3201      	adds	r2, #1
 8003aec:	4296      	cmp	r6, r2
 8003aee:	54a1      	strb	r1, [r4, r2]
 8003af0:	dcfb      	bgt.n	8003aea <__sccl+0x56>
 8003af2:	1af2      	subs	r2, r6, r3
 8003af4:	3a01      	subs	r2, #1
 8003af6:	1c5d      	adds	r5, r3, #1
 8003af8:	42b3      	cmp	r3, r6
 8003afa:	bfa8      	it	ge
 8003afc:	2200      	movge	r2, #0
 8003afe:	18ab      	adds	r3, r5, r2
 8003b00:	e7e1      	b.n	8003ac6 <__sccl+0x32>
 8003b02:	4610      	mov	r0, r2
 8003b04:	e7da      	b.n	8003abc <__sccl+0x28>

08003b06 <__submore>:
 8003b06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b0a:	460c      	mov	r4, r1
 8003b0c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8003b0e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003b12:	4299      	cmp	r1, r3
 8003b14:	d11d      	bne.n	8003b52 <__submore+0x4c>
 8003b16:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003b1a:	f7fe ffc1 	bl	8002aa0 <_malloc_r>
 8003b1e:	b918      	cbnz	r0, 8003b28 <__submore+0x22>
 8003b20:	f04f 30ff 	mov.w	r0, #4294967295
 8003b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b2c:	63a3      	str	r3, [r4, #56]	; 0x38
 8003b2e:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8003b32:	6360      	str	r0, [r4, #52]	; 0x34
 8003b34:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8003b38:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8003b3c:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8003b40:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8003b44:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8003b48:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8003b4c:	6020      	str	r0, [r4, #0]
 8003b4e:	2000      	movs	r0, #0
 8003b50:	e7e8      	b.n	8003b24 <__submore+0x1e>
 8003b52:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8003b54:	0077      	lsls	r7, r6, #1
 8003b56:	463a      	mov	r2, r7
 8003b58:	f000 f8d4 	bl	8003d04 <_realloc_r>
 8003b5c:	4605      	mov	r5, r0
 8003b5e:	2800      	cmp	r0, #0
 8003b60:	d0de      	beq.n	8003b20 <__submore+0x1a>
 8003b62:	eb00 0806 	add.w	r8, r0, r6
 8003b66:	4601      	mov	r1, r0
 8003b68:	4632      	mov	r2, r6
 8003b6a:	4640      	mov	r0, r8
 8003b6c:	f000 f8bc 	bl	8003ce8 <memcpy>
 8003b70:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8003b74:	f8c4 8000 	str.w	r8, [r4]
 8003b78:	e7e9      	b.n	8003b4e <__submore+0x48>

08003b7a <_ungetc_r>:
 8003b7a:	b570      	push	{r4, r5, r6, lr}
 8003b7c:	4614      	mov	r4, r2
 8003b7e:	1c4a      	adds	r2, r1, #1
 8003b80:	4606      	mov	r6, r0
 8003b82:	460d      	mov	r5, r1
 8003b84:	d103      	bne.n	8003b8e <_ungetc_r+0x14>
 8003b86:	f04f 35ff 	mov.w	r5, #4294967295
 8003b8a:	4628      	mov	r0, r5
 8003b8c:	bd70      	pop	{r4, r5, r6, pc}
 8003b8e:	b118      	cbz	r0, 8003b98 <_ungetc_r+0x1e>
 8003b90:	6a03      	ldr	r3, [r0, #32]
 8003b92:	b90b      	cbnz	r3, 8003b98 <_ungetc_r+0x1e>
 8003b94:	f7fe fc52 	bl	800243c <__sinit>
 8003b98:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003b9a:	07db      	lsls	r3, r3, #31
 8003b9c:	d405      	bmi.n	8003baa <_ungetc_r+0x30>
 8003b9e:	89a3      	ldrh	r3, [r4, #12]
 8003ba0:	0598      	lsls	r0, r3, #22
 8003ba2:	d402      	bmi.n	8003baa <_ungetc_r+0x30>
 8003ba4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ba6:	f7fe ff05 	bl	80029b4 <__retarget_lock_acquire_recursive>
 8003baa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003bae:	f023 0320 	bic.w	r3, r3, #32
 8003bb2:	0759      	lsls	r1, r3, #29
 8003bb4:	81a3      	strh	r3, [r4, #12]
 8003bb6:	b29a      	uxth	r2, r3
 8003bb8:	d423      	bmi.n	8003c02 <_ungetc_r+0x88>
 8003bba:	06d3      	lsls	r3, r2, #27
 8003bbc:	d409      	bmi.n	8003bd2 <_ungetc_r+0x58>
 8003bbe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003bc0:	07dd      	lsls	r5, r3, #31
 8003bc2:	d4e0      	bmi.n	8003b86 <_ungetc_r+0xc>
 8003bc4:	f412 7f00 	tst.w	r2, #512	; 0x200
 8003bc8:	d1dd      	bne.n	8003b86 <_ungetc_r+0xc>
 8003bca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003bcc:	f7fe fef3 	bl	80029b6 <__retarget_lock_release_recursive>
 8003bd0:	e7d9      	b.n	8003b86 <_ungetc_r+0xc>
 8003bd2:	0710      	lsls	r0, r2, #28
 8003bd4:	d511      	bpl.n	8003bfa <_ungetc_r+0x80>
 8003bd6:	4621      	mov	r1, r4
 8003bd8:	4630      	mov	r0, r6
 8003bda:	f7ff fe4b 	bl	8003874 <_fflush_r>
 8003bde:	b130      	cbz	r0, 8003bee <_ungetc_r+0x74>
 8003be0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003be2:	07d9      	lsls	r1, r3, #31
 8003be4:	d4cf      	bmi.n	8003b86 <_ungetc_r+0xc>
 8003be6:	89a3      	ldrh	r3, [r4, #12]
 8003be8:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003bec:	e7ec      	b.n	8003bc8 <_ungetc_r+0x4e>
 8003bee:	89a3      	ldrh	r3, [r4, #12]
 8003bf0:	60a0      	str	r0, [r4, #8]
 8003bf2:	f023 0308 	bic.w	r3, r3, #8
 8003bf6:	81a3      	strh	r3, [r4, #12]
 8003bf8:	61a0      	str	r0, [r4, #24]
 8003bfa:	89a3      	ldrh	r3, [r4, #12]
 8003bfc:	f043 0304 	orr.w	r3, r3, #4
 8003c00:	81a3      	strh	r3, [r4, #12]
 8003c02:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003c04:	6862      	ldr	r2, [r4, #4]
 8003c06:	b2ed      	uxtb	r5, r5
 8003c08:	b1d3      	cbz	r3, 8003c40 <_ungetc_r+0xc6>
 8003c0a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	dc05      	bgt.n	8003c1c <_ungetc_r+0xa2>
 8003c10:	4621      	mov	r1, r4
 8003c12:	4630      	mov	r0, r6
 8003c14:	f7ff ff77 	bl	8003b06 <__submore>
 8003c18:	2800      	cmp	r0, #0
 8003c1a:	d1e1      	bne.n	8003be0 <_ungetc_r+0x66>
 8003c1c:	6823      	ldr	r3, [r4, #0]
 8003c1e:	1e5a      	subs	r2, r3, #1
 8003c20:	6022      	str	r2, [r4, #0]
 8003c22:	f803 5c01 	strb.w	r5, [r3, #-1]
 8003c26:	6863      	ldr	r3, [r4, #4]
 8003c28:	3301      	adds	r3, #1
 8003c2a:	6063      	str	r3, [r4, #4]
 8003c2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003c2e:	07da      	lsls	r2, r3, #31
 8003c30:	d4ab      	bmi.n	8003b8a <_ungetc_r+0x10>
 8003c32:	89a3      	ldrh	r3, [r4, #12]
 8003c34:	059b      	lsls	r3, r3, #22
 8003c36:	d4a8      	bmi.n	8003b8a <_ungetc_r+0x10>
 8003c38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c3a:	f7fe febc 	bl	80029b6 <__retarget_lock_release_recursive>
 8003c3e:	e7a4      	b.n	8003b8a <_ungetc_r+0x10>
 8003c40:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8003c42:	6920      	ldr	r0, [r4, #16]
 8003c44:	6823      	ldr	r3, [r4, #0]
 8003c46:	f001 0101 	and.w	r1, r1, #1
 8003c4a:	b160      	cbz	r0, 8003c66 <_ungetc_r+0xec>
 8003c4c:	4298      	cmp	r0, r3
 8003c4e:	d20a      	bcs.n	8003c66 <_ungetc_r+0xec>
 8003c50:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8003c54:	42a8      	cmp	r0, r5
 8003c56:	d106      	bne.n	8003c66 <_ungetc_r+0xec>
 8003c58:	3b01      	subs	r3, #1
 8003c5a:	3201      	adds	r2, #1
 8003c5c:	6023      	str	r3, [r4, #0]
 8003c5e:	6062      	str	r2, [r4, #4]
 8003c60:	2900      	cmp	r1, #0
 8003c62:	d192      	bne.n	8003b8a <_ungetc_r+0x10>
 8003c64:	e7e5      	b.n	8003c32 <_ungetc_r+0xb8>
 8003c66:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8003c6a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003c6e:	6363      	str	r3, [r4, #52]	; 0x34
 8003c70:	2303      	movs	r3, #3
 8003c72:	63a3      	str	r3, [r4, #56]	; 0x38
 8003c74:	4623      	mov	r3, r4
 8003c76:	f803 5f46 	strb.w	r5, [r3, #70]!
 8003c7a:	6023      	str	r3, [r4, #0]
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	6063      	str	r3, [r4, #4]
 8003c80:	e7ee      	b.n	8003c60 <_ungetc_r+0xe6>
	...

08003c84 <_fstat_r>:
 8003c84:	b538      	push	{r3, r4, r5, lr}
 8003c86:	4d07      	ldr	r5, [pc, #28]	; (8003ca4 <_fstat_r+0x20>)
 8003c88:	2300      	movs	r3, #0
 8003c8a:	4604      	mov	r4, r0
 8003c8c:	4608      	mov	r0, r1
 8003c8e:	4611      	mov	r1, r2
 8003c90:	602b      	str	r3, [r5, #0]
 8003c92:	f7fc fecc 	bl	8000a2e <_fstat>
 8003c96:	1c43      	adds	r3, r0, #1
 8003c98:	d102      	bne.n	8003ca0 <_fstat_r+0x1c>
 8003c9a:	682b      	ldr	r3, [r5, #0]
 8003c9c:	b103      	cbz	r3, 8003ca0 <_fstat_r+0x1c>
 8003c9e:	6023      	str	r3, [r4, #0]
 8003ca0:	bd38      	pop	{r3, r4, r5, pc}
 8003ca2:	bf00      	nop
 8003ca4:	2000020c 	.word	0x2000020c

08003ca8 <_isatty_r>:
 8003ca8:	b538      	push	{r3, r4, r5, lr}
 8003caa:	4d06      	ldr	r5, [pc, #24]	; (8003cc4 <_isatty_r+0x1c>)
 8003cac:	2300      	movs	r3, #0
 8003cae:	4604      	mov	r4, r0
 8003cb0:	4608      	mov	r0, r1
 8003cb2:	602b      	str	r3, [r5, #0]
 8003cb4:	f7fc fecb 	bl	8000a4e <_isatty>
 8003cb8:	1c43      	adds	r3, r0, #1
 8003cba:	d102      	bne.n	8003cc2 <_isatty_r+0x1a>
 8003cbc:	682b      	ldr	r3, [r5, #0]
 8003cbe:	b103      	cbz	r3, 8003cc2 <_isatty_r+0x1a>
 8003cc0:	6023      	str	r3, [r4, #0]
 8003cc2:	bd38      	pop	{r3, r4, r5, pc}
 8003cc4:	2000020c 	.word	0x2000020c

08003cc8 <_sbrk_r>:
 8003cc8:	b538      	push	{r3, r4, r5, lr}
 8003cca:	4d06      	ldr	r5, [pc, #24]	; (8003ce4 <_sbrk_r+0x1c>)
 8003ccc:	2300      	movs	r3, #0
 8003cce:	4604      	mov	r4, r0
 8003cd0:	4608      	mov	r0, r1
 8003cd2:	602b      	str	r3, [r5, #0]
 8003cd4:	f7fc fed4 	bl	8000a80 <_sbrk>
 8003cd8:	1c43      	adds	r3, r0, #1
 8003cda:	d102      	bne.n	8003ce2 <_sbrk_r+0x1a>
 8003cdc:	682b      	ldr	r3, [r5, #0]
 8003cde:	b103      	cbz	r3, 8003ce2 <_sbrk_r+0x1a>
 8003ce0:	6023      	str	r3, [r4, #0]
 8003ce2:	bd38      	pop	{r3, r4, r5, pc}
 8003ce4:	2000020c 	.word	0x2000020c

08003ce8 <memcpy>:
 8003ce8:	440a      	add	r2, r1
 8003cea:	4291      	cmp	r1, r2
 8003cec:	f100 33ff 	add.w	r3, r0, #4294967295
 8003cf0:	d100      	bne.n	8003cf4 <memcpy+0xc>
 8003cf2:	4770      	bx	lr
 8003cf4:	b510      	push	{r4, lr}
 8003cf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003cfa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003cfe:	4291      	cmp	r1, r2
 8003d00:	d1f9      	bne.n	8003cf6 <memcpy+0xe>
 8003d02:	bd10      	pop	{r4, pc}

08003d04 <_realloc_r>:
 8003d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d08:	4680      	mov	r8, r0
 8003d0a:	4614      	mov	r4, r2
 8003d0c:	460e      	mov	r6, r1
 8003d0e:	b921      	cbnz	r1, 8003d1a <_realloc_r+0x16>
 8003d10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d14:	4611      	mov	r1, r2
 8003d16:	f7fe bec3 	b.w	8002aa0 <_malloc_r>
 8003d1a:	b92a      	cbnz	r2, 8003d28 <_realloc_r+0x24>
 8003d1c:	f7fe fe4c 	bl	80029b8 <_free_r>
 8003d20:	4625      	mov	r5, r4
 8003d22:	4628      	mov	r0, r5
 8003d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d28:	f000 f914 	bl	8003f54 <_malloc_usable_size_r>
 8003d2c:	4284      	cmp	r4, r0
 8003d2e:	4607      	mov	r7, r0
 8003d30:	d802      	bhi.n	8003d38 <_realloc_r+0x34>
 8003d32:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003d36:	d812      	bhi.n	8003d5e <_realloc_r+0x5a>
 8003d38:	4621      	mov	r1, r4
 8003d3a:	4640      	mov	r0, r8
 8003d3c:	f7fe feb0 	bl	8002aa0 <_malloc_r>
 8003d40:	4605      	mov	r5, r0
 8003d42:	2800      	cmp	r0, #0
 8003d44:	d0ed      	beq.n	8003d22 <_realloc_r+0x1e>
 8003d46:	42bc      	cmp	r4, r7
 8003d48:	4622      	mov	r2, r4
 8003d4a:	4631      	mov	r1, r6
 8003d4c:	bf28      	it	cs
 8003d4e:	463a      	movcs	r2, r7
 8003d50:	f7ff ffca 	bl	8003ce8 <memcpy>
 8003d54:	4631      	mov	r1, r6
 8003d56:	4640      	mov	r0, r8
 8003d58:	f7fe fe2e 	bl	80029b8 <_free_r>
 8003d5c:	e7e1      	b.n	8003d22 <_realloc_r+0x1e>
 8003d5e:	4635      	mov	r5, r6
 8003d60:	e7df      	b.n	8003d22 <_realloc_r+0x1e>
	...

08003d64 <_strtol_l.constprop.0>:
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d6a:	d001      	beq.n	8003d70 <_strtol_l.constprop.0+0xc>
 8003d6c:	2b24      	cmp	r3, #36	; 0x24
 8003d6e:	d906      	bls.n	8003d7e <_strtol_l.constprop.0+0x1a>
 8003d70:	f7fe fdf6 	bl	8002960 <__errno>
 8003d74:	2316      	movs	r3, #22
 8003d76:	6003      	str	r3, [r0, #0]
 8003d78:	2000      	movs	r0, #0
 8003d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d7e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8003e64 <_strtol_l.constprop.0+0x100>
 8003d82:	460d      	mov	r5, r1
 8003d84:	462e      	mov	r6, r5
 8003d86:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003d8a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8003d8e:	f017 0708 	ands.w	r7, r7, #8
 8003d92:	d1f7      	bne.n	8003d84 <_strtol_l.constprop.0+0x20>
 8003d94:	2c2d      	cmp	r4, #45	; 0x2d
 8003d96:	d132      	bne.n	8003dfe <_strtol_l.constprop.0+0x9a>
 8003d98:	782c      	ldrb	r4, [r5, #0]
 8003d9a:	2701      	movs	r7, #1
 8003d9c:	1cb5      	adds	r5, r6, #2
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d05b      	beq.n	8003e5a <_strtol_l.constprop.0+0xf6>
 8003da2:	2b10      	cmp	r3, #16
 8003da4:	d109      	bne.n	8003dba <_strtol_l.constprop.0+0x56>
 8003da6:	2c30      	cmp	r4, #48	; 0x30
 8003da8:	d107      	bne.n	8003dba <_strtol_l.constprop.0+0x56>
 8003daa:	782c      	ldrb	r4, [r5, #0]
 8003dac:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8003db0:	2c58      	cmp	r4, #88	; 0x58
 8003db2:	d14d      	bne.n	8003e50 <_strtol_l.constprop.0+0xec>
 8003db4:	786c      	ldrb	r4, [r5, #1]
 8003db6:	2310      	movs	r3, #16
 8003db8:	3502      	adds	r5, #2
 8003dba:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8003dbe:	f108 38ff 	add.w	r8, r8, #4294967295
 8003dc2:	f04f 0e00 	mov.w	lr, #0
 8003dc6:	fbb8 f9f3 	udiv	r9, r8, r3
 8003dca:	4676      	mov	r6, lr
 8003dcc:	fb03 8a19 	mls	sl, r3, r9, r8
 8003dd0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8003dd4:	f1bc 0f09 	cmp.w	ip, #9
 8003dd8:	d816      	bhi.n	8003e08 <_strtol_l.constprop.0+0xa4>
 8003dda:	4664      	mov	r4, ip
 8003ddc:	42a3      	cmp	r3, r4
 8003dde:	dd24      	ble.n	8003e2a <_strtol_l.constprop.0+0xc6>
 8003de0:	f1be 3fff 	cmp.w	lr, #4294967295
 8003de4:	d008      	beq.n	8003df8 <_strtol_l.constprop.0+0x94>
 8003de6:	45b1      	cmp	r9, r6
 8003de8:	d31c      	bcc.n	8003e24 <_strtol_l.constprop.0+0xc0>
 8003dea:	d101      	bne.n	8003df0 <_strtol_l.constprop.0+0x8c>
 8003dec:	45a2      	cmp	sl, r4
 8003dee:	db19      	blt.n	8003e24 <_strtol_l.constprop.0+0xc0>
 8003df0:	fb06 4603 	mla	r6, r6, r3, r4
 8003df4:	f04f 0e01 	mov.w	lr, #1
 8003df8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003dfc:	e7e8      	b.n	8003dd0 <_strtol_l.constprop.0+0x6c>
 8003dfe:	2c2b      	cmp	r4, #43	; 0x2b
 8003e00:	bf04      	itt	eq
 8003e02:	782c      	ldrbeq	r4, [r5, #0]
 8003e04:	1cb5      	addeq	r5, r6, #2
 8003e06:	e7ca      	b.n	8003d9e <_strtol_l.constprop.0+0x3a>
 8003e08:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8003e0c:	f1bc 0f19 	cmp.w	ip, #25
 8003e10:	d801      	bhi.n	8003e16 <_strtol_l.constprop.0+0xb2>
 8003e12:	3c37      	subs	r4, #55	; 0x37
 8003e14:	e7e2      	b.n	8003ddc <_strtol_l.constprop.0+0x78>
 8003e16:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8003e1a:	f1bc 0f19 	cmp.w	ip, #25
 8003e1e:	d804      	bhi.n	8003e2a <_strtol_l.constprop.0+0xc6>
 8003e20:	3c57      	subs	r4, #87	; 0x57
 8003e22:	e7db      	b.n	8003ddc <_strtol_l.constprop.0+0x78>
 8003e24:	f04f 3eff 	mov.w	lr, #4294967295
 8003e28:	e7e6      	b.n	8003df8 <_strtol_l.constprop.0+0x94>
 8003e2a:	f1be 3fff 	cmp.w	lr, #4294967295
 8003e2e:	d105      	bne.n	8003e3c <_strtol_l.constprop.0+0xd8>
 8003e30:	2322      	movs	r3, #34	; 0x22
 8003e32:	6003      	str	r3, [r0, #0]
 8003e34:	4646      	mov	r6, r8
 8003e36:	b942      	cbnz	r2, 8003e4a <_strtol_l.constprop.0+0xe6>
 8003e38:	4630      	mov	r0, r6
 8003e3a:	e79e      	b.n	8003d7a <_strtol_l.constprop.0+0x16>
 8003e3c:	b107      	cbz	r7, 8003e40 <_strtol_l.constprop.0+0xdc>
 8003e3e:	4276      	negs	r6, r6
 8003e40:	2a00      	cmp	r2, #0
 8003e42:	d0f9      	beq.n	8003e38 <_strtol_l.constprop.0+0xd4>
 8003e44:	f1be 0f00 	cmp.w	lr, #0
 8003e48:	d000      	beq.n	8003e4c <_strtol_l.constprop.0+0xe8>
 8003e4a:	1e69      	subs	r1, r5, #1
 8003e4c:	6011      	str	r1, [r2, #0]
 8003e4e:	e7f3      	b.n	8003e38 <_strtol_l.constprop.0+0xd4>
 8003e50:	2430      	movs	r4, #48	; 0x30
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d1b1      	bne.n	8003dba <_strtol_l.constprop.0+0x56>
 8003e56:	2308      	movs	r3, #8
 8003e58:	e7af      	b.n	8003dba <_strtol_l.constprop.0+0x56>
 8003e5a:	2c30      	cmp	r4, #48	; 0x30
 8003e5c:	d0a5      	beq.n	8003daa <_strtol_l.constprop.0+0x46>
 8003e5e:	230a      	movs	r3, #10
 8003e60:	e7ab      	b.n	8003dba <_strtol_l.constprop.0+0x56>
 8003e62:	bf00      	nop
 8003e64:	0800404f 	.word	0x0800404f

08003e68 <_strtol_r>:
 8003e68:	f7ff bf7c 	b.w	8003d64 <_strtol_l.constprop.0>

08003e6c <_strtoul_l.constprop.0>:
 8003e6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003e70:	4f36      	ldr	r7, [pc, #216]	; (8003f4c <_strtoul_l.constprop.0+0xe0>)
 8003e72:	4686      	mov	lr, r0
 8003e74:	460d      	mov	r5, r1
 8003e76:	4628      	mov	r0, r5
 8003e78:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003e7c:	5d3e      	ldrb	r6, [r7, r4]
 8003e7e:	f016 0608 	ands.w	r6, r6, #8
 8003e82:	d1f8      	bne.n	8003e76 <_strtoul_l.constprop.0+0xa>
 8003e84:	2c2d      	cmp	r4, #45	; 0x2d
 8003e86:	d130      	bne.n	8003eea <_strtoul_l.constprop.0+0x7e>
 8003e88:	782c      	ldrb	r4, [r5, #0]
 8003e8a:	2601      	movs	r6, #1
 8003e8c:	1c85      	adds	r5, r0, #2
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d057      	beq.n	8003f42 <_strtoul_l.constprop.0+0xd6>
 8003e92:	2b10      	cmp	r3, #16
 8003e94:	d109      	bne.n	8003eaa <_strtoul_l.constprop.0+0x3e>
 8003e96:	2c30      	cmp	r4, #48	; 0x30
 8003e98:	d107      	bne.n	8003eaa <_strtoul_l.constprop.0+0x3e>
 8003e9a:	7828      	ldrb	r0, [r5, #0]
 8003e9c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8003ea0:	2858      	cmp	r0, #88	; 0x58
 8003ea2:	d149      	bne.n	8003f38 <_strtoul_l.constprop.0+0xcc>
 8003ea4:	786c      	ldrb	r4, [r5, #1]
 8003ea6:	2310      	movs	r3, #16
 8003ea8:	3502      	adds	r5, #2
 8003eaa:	f04f 38ff 	mov.w	r8, #4294967295
 8003eae:	2700      	movs	r7, #0
 8003eb0:	fbb8 f8f3 	udiv	r8, r8, r3
 8003eb4:	fb03 f908 	mul.w	r9, r3, r8
 8003eb8:	ea6f 0909 	mvn.w	r9, r9
 8003ebc:	4638      	mov	r0, r7
 8003ebe:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8003ec2:	f1bc 0f09 	cmp.w	ip, #9
 8003ec6:	d815      	bhi.n	8003ef4 <_strtoul_l.constprop.0+0x88>
 8003ec8:	4664      	mov	r4, ip
 8003eca:	42a3      	cmp	r3, r4
 8003ecc:	dd23      	ble.n	8003f16 <_strtoul_l.constprop.0+0xaa>
 8003ece:	f1b7 3fff 	cmp.w	r7, #4294967295
 8003ed2:	d007      	beq.n	8003ee4 <_strtoul_l.constprop.0+0x78>
 8003ed4:	4580      	cmp	r8, r0
 8003ed6:	d31b      	bcc.n	8003f10 <_strtoul_l.constprop.0+0xa4>
 8003ed8:	d101      	bne.n	8003ede <_strtoul_l.constprop.0+0x72>
 8003eda:	45a1      	cmp	r9, r4
 8003edc:	db18      	blt.n	8003f10 <_strtoul_l.constprop.0+0xa4>
 8003ede:	fb00 4003 	mla	r0, r0, r3, r4
 8003ee2:	2701      	movs	r7, #1
 8003ee4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003ee8:	e7e9      	b.n	8003ebe <_strtoul_l.constprop.0+0x52>
 8003eea:	2c2b      	cmp	r4, #43	; 0x2b
 8003eec:	bf04      	itt	eq
 8003eee:	782c      	ldrbeq	r4, [r5, #0]
 8003ef0:	1c85      	addeq	r5, r0, #2
 8003ef2:	e7cc      	b.n	8003e8e <_strtoul_l.constprop.0+0x22>
 8003ef4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8003ef8:	f1bc 0f19 	cmp.w	ip, #25
 8003efc:	d801      	bhi.n	8003f02 <_strtoul_l.constprop.0+0x96>
 8003efe:	3c37      	subs	r4, #55	; 0x37
 8003f00:	e7e3      	b.n	8003eca <_strtoul_l.constprop.0+0x5e>
 8003f02:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8003f06:	f1bc 0f19 	cmp.w	ip, #25
 8003f0a:	d804      	bhi.n	8003f16 <_strtoul_l.constprop.0+0xaa>
 8003f0c:	3c57      	subs	r4, #87	; 0x57
 8003f0e:	e7dc      	b.n	8003eca <_strtoul_l.constprop.0+0x5e>
 8003f10:	f04f 37ff 	mov.w	r7, #4294967295
 8003f14:	e7e6      	b.n	8003ee4 <_strtoul_l.constprop.0+0x78>
 8003f16:	1c7b      	adds	r3, r7, #1
 8003f18:	d106      	bne.n	8003f28 <_strtoul_l.constprop.0+0xbc>
 8003f1a:	2322      	movs	r3, #34	; 0x22
 8003f1c:	f8ce 3000 	str.w	r3, [lr]
 8003f20:	4638      	mov	r0, r7
 8003f22:	b932      	cbnz	r2, 8003f32 <_strtoul_l.constprop.0+0xc6>
 8003f24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003f28:	b106      	cbz	r6, 8003f2c <_strtoul_l.constprop.0+0xc0>
 8003f2a:	4240      	negs	r0, r0
 8003f2c:	2a00      	cmp	r2, #0
 8003f2e:	d0f9      	beq.n	8003f24 <_strtoul_l.constprop.0+0xb8>
 8003f30:	b107      	cbz	r7, 8003f34 <_strtoul_l.constprop.0+0xc8>
 8003f32:	1e69      	subs	r1, r5, #1
 8003f34:	6011      	str	r1, [r2, #0]
 8003f36:	e7f5      	b.n	8003f24 <_strtoul_l.constprop.0+0xb8>
 8003f38:	2430      	movs	r4, #48	; 0x30
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1b5      	bne.n	8003eaa <_strtoul_l.constprop.0+0x3e>
 8003f3e:	2308      	movs	r3, #8
 8003f40:	e7b3      	b.n	8003eaa <_strtoul_l.constprop.0+0x3e>
 8003f42:	2c30      	cmp	r4, #48	; 0x30
 8003f44:	d0a9      	beq.n	8003e9a <_strtoul_l.constprop.0+0x2e>
 8003f46:	230a      	movs	r3, #10
 8003f48:	e7af      	b.n	8003eaa <_strtoul_l.constprop.0+0x3e>
 8003f4a:	bf00      	nop
 8003f4c:	0800404f 	.word	0x0800404f

08003f50 <_strtoul_r>:
 8003f50:	f7ff bf8c 	b.w	8003e6c <_strtoul_l.constprop.0>

08003f54 <_malloc_usable_size_r>:
 8003f54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f58:	1f18      	subs	r0, r3, #4
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	bfbc      	itt	lt
 8003f5e:	580b      	ldrlt	r3, [r1, r0]
 8003f60:	18c0      	addlt	r0, r0, r3
 8003f62:	4770      	bx	lr

08003f64 <_init>:
 8003f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f66:	bf00      	nop
 8003f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f6a:	bc08      	pop	{r3}
 8003f6c:	469e      	mov	lr, r3
 8003f6e:	4770      	bx	lr

08003f70 <_fini>:
 8003f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f72:	bf00      	nop
 8003f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f76:	bc08      	pop	{r3}
 8003f78:	469e      	mov	lr, r3
 8003f7a:	4770      	bx	lr
