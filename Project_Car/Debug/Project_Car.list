
Project_Car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000565c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080057fc  080057fc  000157fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800586c  0800586c  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  0800586c  0800586c  0001586c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005874  08005874  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005874  08005874  00015874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005878  08005878  00015878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800587c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000320  20000068  080058e4  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000388  080058e4  00020388  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000eaef  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002587  00000000  00000000  0002ebca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d70  00000000  00000000  00031158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a69  00000000  00000000  00031ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017b98  00000000  00000000  00032931  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010fca  00000000  00000000  0004a4c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008fcb2  00000000  00000000  0005b493  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003e40  00000000  00000000  000eb148  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000eef88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080057e4 	.word	0x080057e4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	080057e4 	.word	0x080057e4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <delay_us>:
 *      Author: Wooseong Jung
 */
#include "delay.h"

void delay_us(uint16_t us)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	80fb      	strh	r3, [r7, #6]
	// __HAL_TIM_SET_COUNTER() 함수는 타이머를 원하는 숫자로 설정하는 함수
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8000586:	4b09      	ldr	r3, [pc, #36]	; (80005ac <delay_us+0x30>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	2200      	movs	r2, #0
 800058c:	625a      	str	r2, [r3, #36]	; 0x24

	// 타이머 값을 받아와야
    while((__HAL_TIM_GET_COUNTER(&htim3)) < us);
 800058e:	bf00      	nop
 8000590:	4b06      	ldr	r3, [pc, #24]	; (80005ac <delay_us+0x30>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000596:	88fb      	ldrh	r3, [r7, #6]
 8000598:	429a      	cmp	r2, r3
 800059a:	d3f9      	bcc.n	8000590 <delay_us+0x14>
}
 800059c:	bf00      	nop
 800059e:	bf00      	nop
 80005a0:	370c      	adds	r7, #12
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	200000bc 	.word	0x200000bc

080005b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80005b6:	2300      	movs	r3, #0
 80005b8:	607b      	str	r3, [r7, #4]
 80005ba:	4b0c      	ldr	r3, [pc, #48]	; (80005ec <MX_DMA_Init+0x3c>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	4a0b      	ldr	r2, [pc, #44]	; (80005ec <MX_DMA_Init+0x3c>)
 80005c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005c4:	6313      	str	r3, [r2, #48]	; 0x30
 80005c6:	4b09      	ldr	r3, [pc, #36]	; (80005ec <MX_DMA_Init+0x3c>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80005d2:	2200      	movs	r2, #0
 80005d4:	2100      	movs	r1, #0
 80005d6:	203a      	movs	r0, #58	; 0x3a
 80005d8:	f001 f88f 	bl	80016fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80005dc:	203a      	movs	r0, #58	; 0x3a
 80005de:	f001 f8a8 	bl	8001732 <HAL_NVIC_EnableIRQ>

}
 80005e2:	bf00      	nop
 80005e4:	3708      	adds	r7, #8
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40023800 	.word	0x40023800

080005f0 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b08a      	sub	sp, #40	; 0x28
 80005f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f6:	f107 0314 	add.w	r3, r7, #20
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	605a      	str	r2, [r3, #4]
 8000600:	609a      	str	r2, [r3, #8]
 8000602:	60da      	str	r2, [r3, #12]
 8000604:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000606:	2300      	movs	r3, #0
 8000608:	613b      	str	r3, [r7, #16]
 800060a:	4b38      	ldr	r3, [pc, #224]	; (80006ec <MX_GPIO_Init+0xfc>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	4a37      	ldr	r2, [pc, #220]	; (80006ec <MX_GPIO_Init+0xfc>)
 8000610:	f043 0304 	orr.w	r3, r3, #4
 8000614:	6313      	str	r3, [r2, #48]	; 0x30
 8000616:	4b35      	ldr	r3, [pc, #212]	; (80006ec <MX_GPIO_Init+0xfc>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	f003 0304 	and.w	r3, r3, #4
 800061e:	613b      	str	r3, [r7, #16]
 8000620:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000622:	2300      	movs	r3, #0
 8000624:	60fb      	str	r3, [r7, #12]
 8000626:	4b31      	ldr	r3, [pc, #196]	; (80006ec <MX_GPIO_Init+0xfc>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	4a30      	ldr	r2, [pc, #192]	; (80006ec <MX_GPIO_Init+0xfc>)
 800062c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000630:	6313      	str	r3, [r2, #48]	; 0x30
 8000632:	4b2e      	ldr	r3, [pc, #184]	; (80006ec <MX_GPIO_Init+0xfc>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800063a:	60fb      	str	r3, [r7, #12]
 800063c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800063e:	2300      	movs	r3, #0
 8000640:	60bb      	str	r3, [r7, #8]
 8000642:	4b2a      	ldr	r3, [pc, #168]	; (80006ec <MX_GPIO_Init+0xfc>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	4a29      	ldr	r2, [pc, #164]	; (80006ec <MX_GPIO_Init+0xfc>)
 8000648:	f043 0301 	orr.w	r3, r3, #1
 800064c:	6313      	str	r3, [r2, #48]	; 0x30
 800064e:	4b27      	ldr	r3, [pc, #156]	; (80006ec <MX_GPIO_Init+0xfc>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	f003 0301 	and.w	r3, r3, #1
 8000656:	60bb      	str	r3, [r7, #8]
 8000658:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800065a:	2300      	movs	r3, #0
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	4b23      	ldr	r3, [pc, #140]	; (80006ec <MX_GPIO_Init+0xfc>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	4a22      	ldr	r2, [pc, #136]	; (80006ec <MX_GPIO_Init+0xfc>)
 8000664:	f043 0302 	orr.w	r3, r3, #2
 8000668:	6313      	str	r3, [r2, #48]	; 0x30
 800066a:	4b20      	ldr	r3, [pc, #128]	; (80006ec <MX_GPIO_Init+0xfc>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	f003 0302 	and.w	r3, r3, #2
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TRIG_R_Pin|TRIG_M_Pin, GPIO_PIN_RESET);
 8000676:	2200      	movs	r2, #0
 8000678:	2130      	movs	r1, #48	; 0x30
 800067a:	481d      	ldr	r0, [pc, #116]	; (80006f0 <MX_GPIO_Init+0x100>)
 800067c:	f001 fd68 	bl	8002150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIG_L_GPIO_Port, TRIG_L_Pin, GPIO_PIN_RESET);
 8000680:	2200      	movs	r2, #0
 8000682:	2104      	movs	r1, #4
 8000684:	481b      	ldr	r0, [pc, #108]	; (80006f4 <MX_GPIO_Init+0x104>)
 8000686:	f001 fd63 	bl	8002150 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800068a:	230c      	movs	r3, #12
 800068c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800068e:	2302      	movs	r3, #2
 8000690:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000692:	2300      	movs	r3, #0
 8000694:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000696:	2303      	movs	r3, #3
 8000698:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800069a:	2307      	movs	r3, #7
 800069c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800069e:	f107 0314 	add.w	r3, r7, #20
 80006a2:	4619      	mov	r1, r3
 80006a4:	4814      	ldr	r0, [pc, #80]	; (80006f8 <MX_GPIO_Init+0x108>)
 80006a6:	f001 fbcf 	bl	8001e48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = TRIG_R_Pin|TRIG_M_Pin;
 80006aa:	2330      	movs	r3, #48	; 0x30
 80006ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ae:	2301      	movs	r3, #1
 80006b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b2:	2300      	movs	r3, #0
 80006b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006b6:	2302      	movs	r3, #2
 80006b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ba:	f107 0314 	add.w	r3, r7, #20
 80006be:	4619      	mov	r1, r3
 80006c0:	480b      	ldr	r0, [pc, #44]	; (80006f0 <MX_GPIO_Init+0x100>)
 80006c2:	f001 fbc1 	bl	8001e48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TRIG_L_Pin;
 80006c6:	2304      	movs	r3, #4
 80006c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ca:	2301      	movs	r3, #1
 80006cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ce:	2300      	movs	r3, #0
 80006d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006d2:	2302      	movs	r3, #2
 80006d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TRIG_L_GPIO_Port, &GPIO_InitStruct);
 80006d6:	f107 0314 	add.w	r3, r7, #20
 80006da:	4619      	mov	r1, r3
 80006dc:	4805      	ldr	r0, [pc, #20]	; (80006f4 <MX_GPIO_Init+0x104>)
 80006de:	f001 fbb3 	bl	8001e48 <HAL_GPIO_Init>

}
 80006e2:	bf00      	nop
 80006e4:	3728      	adds	r7, #40	; 0x28
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40023800 	.word	0x40023800
 80006f0:	40020800 	.word	0x40020800
 80006f4:	40020400 	.word	0x40020400
 80006f8:	40020000 	.word	0x40020000

080006fc <HCSR04_Read>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void HCSR04_Read(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_L_PORT, TRIG_L_PIN, 1); // Trig Pin High
 8000700:	2201      	movs	r2, #1
 8000702:	2104      	movs	r1, #4
 8000704:	481c      	ldr	r0, [pc, #112]	; (8000778 <HCSR04_Read+0x7c>)
 8000706:	f001 fd23 	bl	8002150 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TRIG_M_PORT, TRIG_M_PIN, 1); // Trig Pin High
 800070a:	2201      	movs	r2, #1
 800070c:	2120      	movs	r1, #32
 800070e:	481b      	ldr	r0, [pc, #108]	; (800077c <HCSR04_Read+0x80>)
 8000710:	f001 fd1e 	bl	8002150 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TRIG_R_PORT, TRIG_R_PIN, 1); // Trig Pin High
 8000714:	2201      	movs	r2, #1
 8000716:	2110      	movs	r1, #16
 8000718:	4818      	ldr	r0, [pc, #96]	; (800077c <HCSR04_Read+0x80>)
 800071a:	f001 fd19 	bl	8002150 <HAL_GPIO_WritePin>
	delay_us(10);							   // Delay 10us
 800071e:	200a      	movs	r0, #10
 8000720:	f7ff ff2c 	bl	800057c <delay_us>
	HAL_GPIO_WritePin(TRIG_L_PORT, TRIG_L_PIN, 0); // Trig Pin High
 8000724:	2200      	movs	r2, #0
 8000726:	2104      	movs	r1, #4
 8000728:	4813      	ldr	r0, [pc, #76]	; (8000778 <HCSR04_Read+0x7c>)
 800072a:	f001 fd11 	bl	8002150 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TRIG_M_PORT, TRIG_M_PIN, 0); // Trig Pin High
 800072e:	2200      	movs	r2, #0
 8000730:	2120      	movs	r1, #32
 8000732:	4812      	ldr	r0, [pc, #72]	; (800077c <HCSR04_Read+0x80>)
 8000734:	f001 fd0c 	bl	8002150 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TRIG_R_PORT, TRIG_R_PIN, 0); // Trig Pin High
 8000738:	2200      	movs	r2, #0
 800073a:	2110      	movs	r1, #16
 800073c:	480f      	ldr	r0, [pc, #60]	; (800077c <HCSR04_Read+0x80>)
 800073e:	f001 fd07 	bl	8002150 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC1); // Set Timer Enable
 8000742:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <HCSR04_Read+0x84>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	68da      	ldr	r2, [r3, #12]
 8000748:	4b0d      	ldr	r3, [pc, #52]	; (8000780 <HCSR04_Read+0x84>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f042 0202 	orr.w	r2, r2, #2
 8000750:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC2); // Set Timer Enable
 8000752:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <HCSR04_Read+0x84>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	68da      	ldr	r2, [r3, #12]
 8000758:	4b09      	ldr	r3, [pc, #36]	; (8000780 <HCSR04_Read+0x84>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f042 0204 	orr.w	r2, r2, #4
 8000760:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC3); // Set Timer Enable
 8000762:	4b07      	ldr	r3, [pc, #28]	; (8000780 <HCSR04_Read+0x84>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	68da      	ldr	r2, [r3, #12]
 8000768:	4b05      	ldr	r3, [pc, #20]	; (8000780 <HCSR04_Read+0x84>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f042 0208 	orr.w	r2, r2, #8
 8000770:	60da      	str	r2, [r3, #12]
}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40020400 	.word	0x40020400
 800077c:	40020800 	.word	0x40020800
 8000780:	200000bc 	.word	0x200000bc

08000784 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) // 만약 ?��?��?��?�� ?��?�� 채널?���?,(?��리�? 1�? 채널?�� ?��기로 ?��?��)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	7f1b      	ldrb	r3, [r3, #28]
 8000790:	2b01      	cmp	r3, #1
 8000792:	d16d      	bne.n	8000870 <HAL_TIM_IC_CaptureCallback+0xec>
	{
		if(captureFlag_L == 0) // �? 번째 캡쳐�? ?���? ?��?��?���?,(Falling Edge�? 발생?���? ?��?��?���?,)
 8000794:	4b90      	ldr	r3, [pc, #576]	; (80009d8 <HAL_TIM_IC_CaptureCallback+0x254>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d11a      	bne.n	80007d2 <HAL_TIM_IC_CaptureCallback+0x4e>
		{
			INC_Value_L1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // �? 번째 Value�? ?��?��?��.
 800079c:	2100      	movs	r1, #0
 800079e:	6878      	ldr	r0, [r7, #4]
 80007a0:	f002 fed2 	bl	8003548 <HAL_TIM_ReadCapturedValue>
 80007a4:	4603      	mov	r3, r0
 80007a6:	4a8d      	ldr	r2, [pc, #564]	; (80009dc <HAL_TIM_IC_CaptureCallback+0x258>)
 80007a8:	6013      	str	r3, [r2, #0]
			captureFlag_L = 1; // �? 번째 캡쳐 ?���?
 80007aa:	4b8b      	ldr	r3, [pc, #556]	; (80009d8 <HAL_TIM_IC_CaptureCallback+0x254>)
 80007ac:	2201      	movs	r2, #1
 80007ae:	701a      	strb	r2, [r3, #0]

			// Polarity �?�?(Rising -> Falling)
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING); // Echo Falling?�� 캡쳐?��?�� ?���?�?
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	6a1a      	ldr	r2, [r3, #32]
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	f022 020a 	bic.w	r2, r2, #10
 80007be:	621a      	str	r2, [r3, #32]
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	6a1a      	ldr	r2, [r3, #32]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	f042 0202 	orr.w	r2, r2, #2
 80007ce:	621a      	str	r2, [r3, #32]
 80007d0:	e04e      	b.n	8000870 <HAL_TIM_IC_CaptureCallback+0xec>
		}
		else if(captureFlag_L == 1) // 만약 �? 번�?? 캡쳐�? ?���? ?��료됐?���?,
 80007d2:	4b81      	ldr	r3, [pc, #516]	; (80009d8 <HAL_TIM_IC_CaptureCallback+0x254>)
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	d14a      	bne.n	8000870 <HAL_TIM_IC_CaptureCallback+0xec>
		{
			INC_Value_L2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80007da:	2100      	movs	r1, #0
 80007dc:	6878      	ldr	r0, [r7, #4]
 80007de:	f002 feb3 	bl	8003548 <HAL_TIM_ReadCapturedValue>
 80007e2:	4603      	mov	r3, r0
 80007e4:	4a7e      	ldr	r2, [pc, #504]	; (80009e0 <HAL_TIM_IC_CaptureCallback+0x25c>)
 80007e6:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(&htim3, 0); // reset Counter
 80007e8:	4b7e      	ldr	r3, [pc, #504]	; (80009e4 <HAL_TIM_IC_CaptureCallback+0x260>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2200      	movs	r2, #0
 80007ee:	625a      	str	r2, [r3, #36]	; 0x24

			if(INC_Value_L2 > INC_Value_L1)
 80007f0:	4b7b      	ldr	r3, [pc, #492]	; (80009e0 <HAL_TIM_IC_CaptureCallback+0x25c>)
 80007f2:	681a      	ldr	r2, [r3, #0]
 80007f4:	4b79      	ldr	r3, [pc, #484]	; (80009dc <HAL_TIM_IC_CaptureCallback+0x258>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	429a      	cmp	r2, r3
 80007fa:	d907      	bls.n	800080c <HAL_TIM_IC_CaptureCallback+0x88>
			{
				echoTime_L = INC_Value_L2 - INC_Value_L1;
 80007fc:	4b78      	ldr	r3, [pc, #480]	; (80009e0 <HAL_TIM_IC_CaptureCallback+0x25c>)
 80007fe:	681a      	ldr	r2, [r3, #0]
 8000800:	4b76      	ldr	r3, [pc, #472]	; (80009dc <HAL_TIM_IC_CaptureCallback+0x258>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	1ad3      	subs	r3, r2, r3
 8000806:	4a78      	ldr	r2, [pc, #480]	; (80009e8 <HAL_TIM_IC_CaptureCallback+0x264>)
 8000808:	6013      	str	r3, [r2, #0]
 800080a:	e00f      	b.n	800082c <HAL_TIM_IC_CaptureCallback+0xa8>
			}
			else if(INC_Value_L1 > INC_Value_L2) // 거리�? ?���? 길면, INC_Value2 �? Overflow?��?�� count�? 0?���? ?�� ?��?��?��?�� INC_Value1보다 ?��?���? ?�� ?��?��.
 800080c:	4b73      	ldr	r3, [pc, #460]	; (80009dc <HAL_TIM_IC_CaptureCallback+0x258>)
 800080e:	681a      	ldr	r2, [r3, #0]
 8000810:	4b73      	ldr	r3, [pc, #460]	; (80009e0 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	429a      	cmp	r2, r3
 8000816:	d909      	bls.n	800082c <HAL_TIM_IC_CaptureCallback+0xa8>
			{
				echoTime_L = (0xffff - INC_Value_L1) + INC_Value_L2;
 8000818:	4b71      	ldr	r3, [pc, #452]	; (80009e0 <HAL_TIM_IC_CaptureCallback+0x25c>)
 800081a:	681a      	ldr	r2, [r3, #0]
 800081c:	4b6f      	ldr	r3, [pc, #444]	; (80009dc <HAL_TIM_IC_CaptureCallback+0x258>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	1ad3      	subs	r3, r2, r3
 8000822:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000826:	33ff      	adds	r3, #255	; 0xff
 8000828:	4a6f      	ldr	r2, [pc, #444]	; (80009e8 <HAL_TIM_IC_CaptureCallback+0x264>)
 800082a:	6013      	str	r3, [r2, #0]
			}
			distance_L = echoTime_L / 58;
 800082c:	4b6e      	ldr	r3, [pc, #440]	; (80009e8 <HAL_TIM_IC_CaptureCallback+0x264>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a6e      	ldr	r2, [pc, #440]	; (80009ec <HAL_TIM_IC_CaptureCallback+0x268>)
 8000832:	fba2 2303 	umull	r2, r3, r2, r3
 8000836:	095b      	lsrs	r3, r3, #5
 8000838:	b2da      	uxtb	r2, r3
 800083a:	4b6d      	ldr	r3, [pc, #436]	; (80009f0 <HAL_TIM_IC_CaptureCallback+0x26c>)
 800083c:	701a      	strb	r2, [r3, #0]
			captureFlag_L = 0;
 800083e:	4b66      	ldr	r3, [pc, #408]	; (80009d8 <HAL_TIM_IC_CaptureCallback+0x254>)
 8000840:	2200      	movs	r2, #0
 8000842:	701a      	strb	r2, [r3, #0]

			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING); // ?��?�� Echo High�? 캡쳐?��?���? ?��?��
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	6a1a      	ldr	r2, [r3, #32]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	f022 020a 	bic.w	r2, r2, #10
 8000852:	621a      	str	r2, [r3, #32]
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681a      	ldr	r2, [r3, #0]
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	6a12      	ldr	r2, [r2, #32]
 800085e:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC1);
 8000860:	4b60      	ldr	r3, [pc, #384]	; (80009e4 <HAL_TIM_IC_CaptureCallback+0x260>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	68da      	ldr	r2, [r3, #12]
 8000866:	4b5f      	ldr	r3, [pc, #380]	; (80009e4 <HAL_TIM_IC_CaptureCallback+0x260>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	f022 0202 	bic.w	r2, r2, #2
 800086e:	60da      	str	r2, [r3, #12]
		}
	}
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) // 만약 ?��?��?��?�� ?��?�� 채널?���?,(?��리�? 1�? 채널?�� ?��기로 ?��?��)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	7f1b      	ldrb	r3, [r3, #28]
 8000874:	2b02      	cmp	r3, #2
 8000876:	d16d      	bne.n	8000954 <HAL_TIM_IC_CaptureCallback+0x1d0>
	{
		if(captureFlag_M == 0) // �? 번째 캡쳐�? ?���? ?��?��?���?,(Falling Edge�? 발생?���? ?��?��?���?,)
 8000878:	4b5e      	ldr	r3, [pc, #376]	; (80009f4 <HAL_TIM_IC_CaptureCallback+0x270>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d11a      	bne.n	80008b6 <HAL_TIM_IC_CaptureCallback+0x132>
		{
			INC_Value_M1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2); // �? 번째 Value�? ?��?��?��.
 8000880:	2104      	movs	r1, #4
 8000882:	6878      	ldr	r0, [r7, #4]
 8000884:	f002 fe60 	bl	8003548 <HAL_TIM_ReadCapturedValue>
 8000888:	4603      	mov	r3, r0
 800088a:	4a5b      	ldr	r2, [pc, #364]	; (80009f8 <HAL_TIM_IC_CaptureCallback+0x274>)
 800088c:	6013      	str	r3, [r2, #0]
			captureFlag_M = 1; // �? 번째 캡쳐 ?���?
 800088e:	4b59      	ldr	r3, [pc, #356]	; (80009f4 <HAL_TIM_IC_CaptureCallback+0x270>)
 8000890:	2201      	movs	r2, #1
 8000892:	701a      	strb	r2, [r3, #0]

			// Polarity �?�?(Rising -> Falling)
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING); // Echo Falling?�� 캡쳐?��?�� ?���?�?
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	6a1a      	ldr	r2, [r3, #32]
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80008a2:	621a      	str	r2, [r3, #32]
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	6a1a      	ldr	r2, [r3, #32]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	f042 0220 	orr.w	r2, r2, #32
 80008b2:	621a      	str	r2, [r3, #32]
 80008b4:	e04e      	b.n	8000954 <HAL_TIM_IC_CaptureCallback+0x1d0>
		}
		else if(captureFlag_M == 1) // 만약 �? 번�?? 캡쳐�? ?���? ?��료됐?���?,
 80008b6:	4b4f      	ldr	r3, [pc, #316]	; (80009f4 <HAL_TIM_IC_CaptureCallback+0x270>)
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	2b01      	cmp	r3, #1
 80008bc:	d14a      	bne.n	8000954 <HAL_TIM_IC_CaptureCallback+0x1d0>
		{
			INC_Value_M2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80008be:	2104      	movs	r1, #4
 80008c0:	6878      	ldr	r0, [r7, #4]
 80008c2:	f002 fe41 	bl	8003548 <HAL_TIM_ReadCapturedValue>
 80008c6:	4603      	mov	r3, r0
 80008c8:	4a4c      	ldr	r2, [pc, #304]	; (80009fc <HAL_TIM_IC_CaptureCallback+0x278>)
 80008ca:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(&htim3, 0); // reset Counter
 80008cc:	4b45      	ldr	r3, [pc, #276]	; (80009e4 <HAL_TIM_IC_CaptureCallback+0x260>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	2200      	movs	r2, #0
 80008d2:	625a      	str	r2, [r3, #36]	; 0x24

			if(INC_Value_M2 > INC_Value_M1)
 80008d4:	4b49      	ldr	r3, [pc, #292]	; (80009fc <HAL_TIM_IC_CaptureCallback+0x278>)
 80008d6:	681a      	ldr	r2, [r3, #0]
 80008d8:	4b47      	ldr	r3, [pc, #284]	; (80009f8 <HAL_TIM_IC_CaptureCallback+0x274>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	429a      	cmp	r2, r3
 80008de:	d907      	bls.n	80008f0 <HAL_TIM_IC_CaptureCallback+0x16c>
			{
				echoTime_M = INC_Value_M2 - INC_Value_M1;
 80008e0:	4b46      	ldr	r3, [pc, #280]	; (80009fc <HAL_TIM_IC_CaptureCallback+0x278>)
 80008e2:	681a      	ldr	r2, [r3, #0]
 80008e4:	4b44      	ldr	r3, [pc, #272]	; (80009f8 <HAL_TIM_IC_CaptureCallback+0x274>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	1ad3      	subs	r3, r2, r3
 80008ea:	4a45      	ldr	r2, [pc, #276]	; (8000a00 <HAL_TIM_IC_CaptureCallback+0x27c>)
 80008ec:	6013      	str	r3, [r2, #0]
 80008ee:	e00f      	b.n	8000910 <HAL_TIM_IC_CaptureCallback+0x18c>
			}
			else if(INC_Value_M1 > INC_Value_M2) // 거리�? ?���? 길면, INC_Value2 �? Overflow?��?�� count�? 0?���? ?�� ?��?��?��?�� INC_Value1보다 ?��?���? ?�� ?��?��.
 80008f0:	4b41      	ldr	r3, [pc, #260]	; (80009f8 <HAL_TIM_IC_CaptureCallback+0x274>)
 80008f2:	681a      	ldr	r2, [r3, #0]
 80008f4:	4b41      	ldr	r3, [pc, #260]	; (80009fc <HAL_TIM_IC_CaptureCallback+0x278>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	429a      	cmp	r2, r3
 80008fa:	d909      	bls.n	8000910 <HAL_TIM_IC_CaptureCallback+0x18c>
			{
				echoTime_M = (0xffff - INC_Value_M1) + INC_Value_M2;
 80008fc:	4b3f      	ldr	r3, [pc, #252]	; (80009fc <HAL_TIM_IC_CaptureCallback+0x278>)
 80008fe:	681a      	ldr	r2, [r3, #0]
 8000900:	4b3d      	ldr	r3, [pc, #244]	; (80009f8 <HAL_TIM_IC_CaptureCallback+0x274>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	1ad3      	subs	r3, r2, r3
 8000906:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800090a:	33ff      	adds	r3, #255	; 0xff
 800090c:	4a3c      	ldr	r2, [pc, #240]	; (8000a00 <HAL_TIM_IC_CaptureCallback+0x27c>)
 800090e:	6013      	str	r3, [r2, #0]
			}
			distance_M = echoTime_M / 58;
 8000910:	4b3b      	ldr	r3, [pc, #236]	; (8000a00 <HAL_TIM_IC_CaptureCallback+0x27c>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a35      	ldr	r2, [pc, #212]	; (80009ec <HAL_TIM_IC_CaptureCallback+0x268>)
 8000916:	fba2 2303 	umull	r2, r3, r2, r3
 800091a:	095b      	lsrs	r3, r3, #5
 800091c:	b2da      	uxtb	r2, r3
 800091e:	4b39      	ldr	r3, [pc, #228]	; (8000a04 <HAL_TIM_IC_CaptureCallback+0x280>)
 8000920:	701a      	strb	r2, [r3, #0]
			captureFlag_M = 0;
 8000922:	4b34      	ldr	r3, [pc, #208]	; (80009f4 <HAL_TIM_IC_CaptureCallback+0x270>)
 8000924:	2200      	movs	r2, #0
 8000926:	701a      	strb	r2, [r3, #0]

			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING); // ?��?�� Echo High�? 캡쳐?��?���? ?��?��
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	6a1a      	ldr	r2, [r3, #32]
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8000936:	621a      	str	r2, [r3, #32]
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681a      	ldr	r2, [r3, #0]
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	6a12      	ldr	r2, [r2, #32]
 8000942:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC2);
 8000944:	4b27      	ldr	r3, [pc, #156]	; (80009e4 <HAL_TIM_IC_CaptureCallback+0x260>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	68da      	ldr	r2, [r3, #12]
 800094a:	4b26      	ldr	r3, [pc, #152]	; (80009e4 <HAL_TIM_IC_CaptureCallback+0x260>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	f022 0204 	bic.w	r2, r2, #4
 8000952:	60da      	str	r2, [r3, #12]
		}
	}
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) // 만약 ?��?��?��?�� ?��?�� 채널?���?,(?��리�? 1�? 채널?�� ?��기로 ?��?��)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	7f1b      	ldrb	r3, [r3, #28]
 8000958:	2b04      	cmp	r3, #4
 800095a:	f040 808f 	bne.w	8000a7c <HAL_TIM_IC_CaptureCallback+0x2f8>
	{
		if(captureFlag_R == 0) // �? 번째 캡쳐�? ?���? ?��?��?���?,(Falling Edge�? 발생?���? ?��?��?���?,)
 800095e:	4b2a      	ldr	r3, [pc, #168]	; (8000a08 <HAL_TIM_IC_CaptureCallback+0x284>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d11a      	bne.n	800099c <HAL_TIM_IC_CaptureCallback+0x218>
		{
			INC_Value_R1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3); // �? 번째 Value�? ?��?��?��.
 8000966:	2108      	movs	r1, #8
 8000968:	6878      	ldr	r0, [r7, #4]
 800096a:	f002 fded 	bl	8003548 <HAL_TIM_ReadCapturedValue>
 800096e:	4603      	mov	r3, r0
 8000970:	4a26      	ldr	r2, [pc, #152]	; (8000a0c <HAL_TIM_IC_CaptureCallback+0x288>)
 8000972:	6013      	str	r3, [r2, #0]
			captureFlag_R = 1; // �? 번째 캡쳐 ?���?
 8000974:	4b24      	ldr	r3, [pc, #144]	; (8000a08 <HAL_TIM_IC_CaptureCallback+0x284>)
 8000976:	2201      	movs	r2, #1
 8000978:	701a      	strb	r2, [r3, #0]

			// Polarity �?�?(Rising -> Falling)
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_FALLING); // Echo Falling?�� 캡쳐?��?�� ?���?�?
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	6a1a      	ldr	r2, [r3, #32]
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 8000988:	621a      	str	r2, [r3, #32]
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	6a1a      	ldr	r2, [r3, #32]
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000998:	621a      	str	r2, [r3, #32]

			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING); // ?��?�� Echo High�? 캡쳐?��?���? ?��?��
			__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC3);
		}
	}
}
 800099a:	e06f      	b.n	8000a7c <HAL_TIM_IC_CaptureCallback+0x2f8>
		else if(captureFlag_R == 1) // 만약 �? 번�?? 캡쳐�? ?���? ?��료됐?���?,
 800099c:	4b1a      	ldr	r3, [pc, #104]	; (8000a08 <HAL_TIM_IC_CaptureCallback+0x284>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	2b01      	cmp	r3, #1
 80009a2:	d16b      	bne.n	8000a7c <HAL_TIM_IC_CaptureCallback+0x2f8>
			INC_Value_R2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 80009a4:	2108      	movs	r1, #8
 80009a6:	6878      	ldr	r0, [r7, #4]
 80009a8:	f002 fdce 	bl	8003548 <HAL_TIM_ReadCapturedValue>
 80009ac:	4603      	mov	r3, r0
 80009ae:	4a18      	ldr	r2, [pc, #96]	; (8000a10 <HAL_TIM_IC_CaptureCallback+0x28c>)
 80009b0:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(&htim3, 0); // reset Counter
 80009b2:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <HAL_TIM_IC_CaptureCallback+0x260>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	2200      	movs	r2, #0
 80009b8:	625a      	str	r2, [r3, #36]	; 0x24
			if(INC_Value_R2 > INC_Value_R1)
 80009ba:	4b15      	ldr	r3, [pc, #84]	; (8000a10 <HAL_TIM_IC_CaptureCallback+0x28c>)
 80009bc:	681a      	ldr	r2, [r3, #0]
 80009be:	4b13      	ldr	r3, [pc, #76]	; (8000a0c <HAL_TIM_IC_CaptureCallback+0x288>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	429a      	cmp	r2, r3
 80009c4:	d928      	bls.n	8000a18 <HAL_TIM_IC_CaptureCallback+0x294>
				echoTime_R = INC_Value_R2 - INC_Value_R1;
 80009c6:	4b12      	ldr	r3, [pc, #72]	; (8000a10 <HAL_TIM_IC_CaptureCallback+0x28c>)
 80009c8:	681a      	ldr	r2, [r3, #0]
 80009ca:	4b10      	ldr	r3, [pc, #64]	; (8000a0c <HAL_TIM_IC_CaptureCallback+0x288>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	1ad3      	subs	r3, r2, r3
 80009d0:	4a10      	ldr	r2, [pc, #64]	; (8000a14 <HAL_TIM_IC_CaptureCallback+0x290>)
 80009d2:	6013      	str	r3, [r2, #0]
 80009d4:	e030      	b.n	8000a38 <HAL_TIM_IC_CaptureCallback+0x2b4>
 80009d6:	bf00      	nop
 80009d8:	20000090 	.word	0x20000090
 80009dc:	20000084 	.word	0x20000084
 80009e0:	20000088 	.word	0x20000088
 80009e4:	200000bc 	.word	0x200000bc
 80009e8:	2000008c 	.word	0x2000008c
 80009ec:	8d3dcb09 	.word	0x8d3dcb09
 80009f0:	20000091 	.word	0x20000091
 80009f4:	200000a0 	.word	0x200000a0
 80009f8:	20000094 	.word	0x20000094
 80009fc:	20000098 	.word	0x20000098
 8000a00:	2000009c 	.word	0x2000009c
 8000a04:	200000a1 	.word	0x200000a1
 8000a08:	200000b0 	.word	0x200000b0
 8000a0c:	200000a4 	.word	0x200000a4
 8000a10:	200000a8 	.word	0x200000a8
 8000a14:	200000ac 	.word	0x200000ac
			else if(INC_Value_R1 > INC_Value_R2) // 거리�? ?���? 길면, INC_Value2 �? Overflow?��?�� count�? 0?���? ?�� ?��?��?��?�� INC_Value1보다 ?��?���? ?�� ?��?��.
 8000a18:	4b1a      	ldr	r3, [pc, #104]	; (8000a84 <HAL_TIM_IC_CaptureCallback+0x300>)
 8000a1a:	681a      	ldr	r2, [r3, #0]
 8000a1c:	4b1a      	ldr	r3, [pc, #104]	; (8000a88 <HAL_TIM_IC_CaptureCallback+0x304>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	429a      	cmp	r2, r3
 8000a22:	d909      	bls.n	8000a38 <HAL_TIM_IC_CaptureCallback+0x2b4>
				echoTime_R = (0xffff - INC_Value_R1) + INC_Value_R2;
 8000a24:	4b18      	ldr	r3, [pc, #96]	; (8000a88 <HAL_TIM_IC_CaptureCallback+0x304>)
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	4b16      	ldr	r3, [pc, #88]	; (8000a84 <HAL_TIM_IC_CaptureCallback+0x300>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	1ad3      	subs	r3, r2, r3
 8000a2e:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000a32:	33ff      	adds	r3, #255	; 0xff
 8000a34:	4a15      	ldr	r2, [pc, #84]	; (8000a8c <HAL_TIM_IC_CaptureCallback+0x308>)
 8000a36:	6013      	str	r3, [r2, #0]
			distance_R = echoTime_R / 58;
 8000a38:	4b14      	ldr	r3, [pc, #80]	; (8000a8c <HAL_TIM_IC_CaptureCallback+0x308>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a14      	ldr	r2, [pc, #80]	; (8000a90 <HAL_TIM_IC_CaptureCallback+0x30c>)
 8000a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a42:	095b      	lsrs	r3, r3, #5
 8000a44:	b2da      	uxtb	r2, r3
 8000a46:	4b13      	ldr	r3, [pc, #76]	; (8000a94 <HAL_TIM_IC_CaptureCallback+0x310>)
 8000a48:	701a      	strb	r2, [r3, #0]
			captureFlag_R = 0;
 8000a4a:	4b13      	ldr	r3, [pc, #76]	; (8000a98 <HAL_TIM_IC_CaptureCallback+0x314>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING); // ?��?�� Echo High�? 캡쳐?��?���? ?��?��
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	6a1a      	ldr	r2, [r3, #32]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 8000a5e:	621a      	str	r2, [r3, #32]
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681a      	ldr	r2, [r3, #0]
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	6a12      	ldr	r2, [r2, #32]
 8000a6a:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC3);
 8000a6c:	4b0b      	ldr	r3, [pc, #44]	; (8000a9c <HAL_TIM_IC_CaptureCallback+0x318>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	68da      	ldr	r2, [r3, #12]
 8000a72:	4b0a      	ldr	r3, [pc, #40]	; (8000a9c <HAL_TIM_IC_CaptureCallback+0x318>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	f022 0208 	bic.w	r2, r2, #8
 8000a7a:	60da      	str	r2, [r3, #12]
}
 8000a7c:	bf00      	nop
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	200000a4 	.word	0x200000a4
 8000a88:	200000a8 	.word	0x200000a8
 8000a8c:	200000ac 	.word	0x200000ac
 8000a90:	8d3dcb09 	.word	0x8d3dcb09
 8000a94:	200000b1 	.word	0x200000b1
 8000a98:	200000b0 	.word	0x200000b0
 8000a9c:	200000bc 	.word	0x200000bc

08000aa0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aa4:	f000 fcb8 	bl	8001418 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aa8:	f000 f83c 	bl	8000b24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aac:	f7ff fda0 	bl	80005f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ab0:	f7ff fd7e 	bl	80005b0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000ab4:	f000 fbe0 	bl	8001278 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000ab8:	f000 f9be 	bl	8000e38 <MX_TIM3_Init>
  MX_TIM10_Init();
 8000abc:	f000 fa42 	bl	8000f44 <MX_TIM10_Init>
  MX_TIM11_Init();
 8000ac0:	f000 fa8e 	bl	8000fe0 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	4810      	ldr	r0, [pc, #64]	; (8000b08 <main+0x68>)
 8000ac8:	f002 f8f6 	bl	8002cb8 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8000acc:	2104      	movs	r1, #4
 8000ace:	480e      	ldr	r0, [pc, #56]	; (8000b08 <main+0x68>)
 8000ad0:	f002 f8f2 	bl	8002cb8 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3);
 8000ad4:	2108      	movs	r1, #8
 8000ad6:	480c      	ldr	r0, [pc, #48]	; (8000b08 <main+0x68>)
 8000ad8:	f002 f8ee 	bl	8002cb8 <HAL_TIM_IC_Start_IT>
  HAL_UART_Receive_DMA(&huart1, buf, sizeof(buf));
 8000adc:	2201      	movs	r2, #1
 8000ade:	490b      	ldr	r1, [pc, #44]	; (8000b0c <main+0x6c>)
 8000ae0:	480b      	ldr	r0, [pc, #44]	; (8000b10 <main+0x70>)
 8000ae2:	f003 fa56 	bl	8003f92 <HAL_UART_Receive_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HCSR04_Read();
 8000ae6:	f7ff fe09 	bl	80006fc <HCSR04_Read>
	  printf("L : %d, M : %d, R : %d\r\n", distance_L, distance_M, distance_R);
 8000aea:	4b0a      	ldr	r3, [pc, #40]	; (8000b14 <main+0x74>)
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	4619      	mov	r1, r3
 8000af0:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <main+0x78>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	461a      	mov	r2, r3
 8000af6:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <main+0x7c>)
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	4809      	ldr	r0, [pc, #36]	; (8000b20 <main+0x80>)
 8000afc:	f003 fffc 	bl	8004af8 <iprintf>
	  HAL_Delay(200);
 8000b00:	20c8      	movs	r0, #200	; 0xc8
 8000b02:	f000 fcfb 	bl	80014fc <HAL_Delay>
	  HCSR04_Read();
 8000b06:	e7ee      	b.n	8000ae6 <main+0x46>
 8000b08:	200000bc 	.word	0x200000bc
 8000b0c:	200000b4 	.word	0x200000b4
 8000b10:	20000194 	.word	0x20000194
 8000b14:	20000091 	.word	0x20000091
 8000b18:	200000a1 	.word	0x200000a1
 8000b1c:	200000b1 	.word	0x200000b1
 8000b20:	080057fc 	.word	0x080057fc

08000b24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b094      	sub	sp, #80	; 0x50
 8000b28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b2a:	f107 0320 	add.w	r3, r7, #32
 8000b2e:	2230      	movs	r2, #48	; 0x30
 8000b30:	2100      	movs	r1, #0
 8000b32:	4618      	mov	r0, r3
 8000b34:	f004 f835 	bl	8004ba2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b38:	f107 030c 	add.w	r3, r7, #12
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]
 8000b46:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b48:	2300      	movs	r3, #0
 8000b4a:	60bb      	str	r3, [r7, #8]
 8000b4c:	4b27      	ldr	r3, [pc, #156]	; (8000bec <SystemClock_Config+0xc8>)
 8000b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b50:	4a26      	ldr	r2, [pc, #152]	; (8000bec <SystemClock_Config+0xc8>)
 8000b52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b56:	6413      	str	r3, [r2, #64]	; 0x40
 8000b58:	4b24      	ldr	r3, [pc, #144]	; (8000bec <SystemClock_Config+0xc8>)
 8000b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b60:	60bb      	str	r3, [r7, #8]
 8000b62:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b64:	2300      	movs	r3, #0
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	4b21      	ldr	r3, [pc, #132]	; (8000bf0 <SystemClock_Config+0xcc>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a20      	ldr	r2, [pc, #128]	; (8000bf0 <SystemClock_Config+0xcc>)
 8000b6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b72:	6013      	str	r3, [r2, #0]
 8000b74:	4b1e      	ldr	r3, [pc, #120]	; (8000bf0 <SystemClock_Config+0xcc>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b7c:	607b      	str	r3, [r7, #4]
 8000b7e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b80:	2301      	movs	r3, #1
 8000b82:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b8e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b92:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b94:	2304      	movs	r3, #4
 8000b96:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000b98:	2364      	movs	r3, #100	; 0x64
 8000b9a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ba0:	2304      	movs	r3, #4
 8000ba2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba4:	f107 0320 	add.w	r3, r7, #32
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f001 faeb 	bl	8002184 <HAL_RCC_OscConfig>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000bb4:	f000 f81e 	bl	8000bf4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bb8:	230f      	movs	r3, #15
 8000bba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bc8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000bce:	f107 030c 	add.w	r3, r7, #12
 8000bd2:	2103      	movs	r1, #3
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f001 fd4d 	bl	8002674 <HAL_RCC_ClockConfig>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000be0:	f000 f808 	bl	8000bf4 <Error_Handler>
  }
}
 8000be4:	bf00      	nop
 8000be6:	3750      	adds	r7, #80	; 0x50
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	40023800 	.word	0x40023800
 8000bf0:	40007000 	.word	0x40007000

08000bf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf8:	b672      	cpsid	i
}
 8000bfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <Error_Handler+0x8>
	...

08000c00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	607b      	str	r3, [r7, #4]
 8000c0a:	4b10      	ldr	r3, [pc, #64]	; (8000c4c <HAL_MspInit+0x4c>)
 8000c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0e:	4a0f      	ldr	r2, [pc, #60]	; (8000c4c <HAL_MspInit+0x4c>)
 8000c10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c14:	6453      	str	r3, [r2, #68]	; 0x44
 8000c16:	4b0d      	ldr	r3, [pc, #52]	; (8000c4c <HAL_MspInit+0x4c>)
 8000c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c1e:	607b      	str	r3, [r7, #4]
 8000c20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	603b      	str	r3, [r7, #0]
 8000c26:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <HAL_MspInit+0x4c>)
 8000c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2a:	4a08      	ldr	r2, [pc, #32]	; (8000c4c <HAL_MspInit+0x4c>)
 8000c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c30:	6413      	str	r3, [r2, #64]	; 0x40
 8000c32:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <HAL_MspInit+0x4c>)
 8000c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c3a:	603b      	str	r3, [r7, #0]
 8000c3c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c3e:	2007      	movs	r0, #7
 8000c40:	f000 fd50 	bl	80016e4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c44:	bf00      	nop
 8000c46:	3708      	adds	r7, #8
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	40023800 	.word	0x40023800

08000c50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c54:	e7fe      	b.n	8000c54 <NMI_Handler+0x4>

08000c56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c56:	b480      	push	{r7}
 8000c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c5a:	e7fe      	b.n	8000c5a <HardFault_Handler+0x4>

08000c5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c60:	e7fe      	b.n	8000c60 <MemManage_Handler+0x4>

08000c62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c62:	b480      	push	{r7}
 8000c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c66:	e7fe      	b.n	8000c66 <BusFault_Handler+0x4>

08000c68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c6c:	e7fe      	b.n	8000c6c <UsageFault_Handler+0x4>

08000c6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr

08000c8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr

08000c98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c9c:	f000 fc0e 	bl	80014bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000ca8:	4802      	ldr	r0, [pc, #8]	; (8000cb4 <TIM3_IRQHandler+0x10>)
 8000caa:	f002 f91f 	bl	8002eec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	200000bc 	.word	0x200000bc

08000cb8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000cbc:	4802      	ldr	r0, [pc, #8]	; (8000cc8 <DMA2_Stream2_IRQHandler+0x10>)
 8000cbe:	f000 fe59 	bl	8001974 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	200001d8 	.word	0x200001d8

08000ccc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b086      	sub	sp, #24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	60f8      	str	r0, [r7, #12]
 8000cd4:	60b9      	str	r1, [r7, #8]
 8000cd6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cd8:	2300      	movs	r3, #0
 8000cda:	617b      	str	r3, [r7, #20]
 8000cdc:	e00a      	b.n	8000cf4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cde:	f3af 8000 	nop.w
 8000ce2:	4601      	mov	r1, r0
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	1c5a      	adds	r2, r3, #1
 8000ce8:	60ba      	str	r2, [r7, #8]
 8000cea:	b2ca      	uxtb	r2, r1
 8000cec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	617b      	str	r3, [r7, #20]
 8000cf4:	697a      	ldr	r2, [r7, #20]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	dbf0      	blt.n	8000cde <_read+0x12>
  }

  return len;
 8000cfc:	687b      	ldr	r3, [r7, #4]
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3718      	adds	r7, #24
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b086      	sub	sp, #24
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	60f8      	str	r0, [r7, #12]
 8000d0e:	60b9      	str	r1, [r7, #8]
 8000d10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d12:	2300      	movs	r3, #0
 8000d14:	617b      	str	r3, [r7, #20]
 8000d16:	e009      	b.n	8000d2c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	1c5a      	adds	r2, r3, #1
 8000d1c:	60ba      	str	r2, [r7, #8]
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	4618      	mov	r0, r3
 8000d22:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	3301      	adds	r3, #1
 8000d2a:	617b      	str	r3, [r7, #20]
 8000d2c:	697a      	ldr	r2, [r7, #20]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	dbf1      	blt.n	8000d18 <_write+0x12>
  }
  return len;
 8000d34:	687b      	ldr	r3, [r7, #4]
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3718      	adds	r7, #24
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <_close>:

int _close(int file)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	b083      	sub	sp, #12
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr

08000d56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d56:	b480      	push	{r7}
 8000d58:	b083      	sub	sp, #12
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
 8000d5e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d66:	605a      	str	r2, [r3, #4]
  return 0;
 8000d68:	2300      	movs	r3, #0
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	370c      	adds	r7, #12
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr

08000d76 <_isatty>:

int _isatty(int file)
{
 8000d76:	b480      	push	{r7}
 8000d78:	b083      	sub	sp, #12
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d7e:	2301      	movs	r3, #1
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b085      	sub	sp, #20
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	60f8      	str	r0, [r7, #12]
 8000d94:	60b9      	str	r1, [r7, #8]
 8000d96:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d98:	2300      	movs	r3, #0
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3714      	adds	r7, #20
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
	...

08000da8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000db0:	4a14      	ldr	r2, [pc, #80]	; (8000e04 <_sbrk+0x5c>)
 8000db2:	4b15      	ldr	r3, [pc, #84]	; (8000e08 <_sbrk+0x60>)
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dbc:	4b13      	ldr	r3, [pc, #76]	; (8000e0c <_sbrk+0x64>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d102      	bne.n	8000dca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dc4:	4b11      	ldr	r3, [pc, #68]	; (8000e0c <_sbrk+0x64>)
 8000dc6:	4a12      	ldr	r2, [pc, #72]	; (8000e10 <_sbrk+0x68>)
 8000dc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dca:	4b10      	ldr	r3, [pc, #64]	; (8000e0c <_sbrk+0x64>)
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d207      	bcs.n	8000de8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dd8:	f003 ff32 	bl	8004c40 <__errno>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	220c      	movs	r2, #12
 8000de0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000de2:	f04f 33ff 	mov.w	r3, #4294967295
 8000de6:	e009      	b.n	8000dfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000de8:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <_sbrk+0x64>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dee:	4b07      	ldr	r3, [pc, #28]	; (8000e0c <_sbrk+0x64>)
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4413      	add	r3, r2
 8000df6:	4a05      	ldr	r2, [pc, #20]	; (8000e0c <_sbrk+0x64>)
 8000df8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dfa:	68fb      	ldr	r3, [r7, #12]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3718      	adds	r7, #24
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	20020000 	.word	0x20020000
 8000e08:	00000400 	.word	0x00000400
 8000e0c:	200000b8 	.word	0x200000b8
 8000e10:	20000388 	.word	0x20000388

08000e14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e18:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <SystemInit+0x20>)
 8000e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e1e:	4a05      	ldr	r2, [pc, #20]	; (8000e34 <SystemInit+0x20>)
 8000e20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e28:	bf00      	nop
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <MX_TIM3_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b08a      	sub	sp, #40	; 0x28
 8000e3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e3e:	f107 0318 	add.w	r3, r7, #24
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	605a      	str	r2, [r3, #4]
 8000e48:	609a      	str	r2, [r3, #8]
 8000e4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e4c:	f107 0310 	add.w	r3, r7, #16
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000e56:	463b      	mov	r3, r7
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e62:	4b36      	ldr	r3, [pc, #216]	; (8000f3c <MX_TIM3_Init+0x104>)
 8000e64:	4a36      	ldr	r2, [pc, #216]	; (8000f40 <MX_TIM3_Init+0x108>)
 8000e66:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8000e68:	4b34      	ldr	r3, [pc, #208]	; (8000f3c <MX_TIM3_Init+0x104>)
 8000e6a:	2263      	movs	r2, #99	; 0x63
 8000e6c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e6e:	4b33      	ldr	r3, [pc, #204]	; (8000f3c <MX_TIM3_Init+0x104>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000e74:	4b31      	ldr	r3, [pc, #196]	; (8000f3c <MX_TIM3_Init+0x104>)
 8000e76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e7a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e7c:	4b2f      	ldr	r3, [pc, #188]	; (8000f3c <MX_TIM3_Init+0x104>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e82:	4b2e      	ldr	r3, [pc, #184]	; (8000f3c <MX_TIM3_Init+0x104>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e88:	482c      	ldr	r0, [pc, #176]	; (8000f3c <MX_TIM3_Init+0x104>)
 8000e8a:	f001 fe13 	bl	8002ab4 <HAL_TIM_Base_Init>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8000e94:	f7ff feae 	bl	8000bf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e9c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e9e:	f107 0318 	add.w	r3, r7, #24
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4825      	ldr	r0, [pc, #148]	; (8000f3c <MX_TIM3_Init+0x104>)
 8000ea6:	f002 fa87 	bl	80033b8 <HAL_TIM_ConfigClockSource>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000eb0:	f7ff fea0 	bl	8000bf4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000eb4:	4821      	ldr	r0, [pc, #132]	; (8000f3c <MX_TIM3_Init+0x104>)
 8000eb6:	f001 fea5 	bl	8002c04 <HAL_TIM_IC_Init>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000ec0:	f7ff fe98 	bl	8000bf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ecc:	f107 0310 	add.w	r3, r7, #16
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	481a      	ldr	r0, [pc, #104]	; (8000f3c <MX_TIM3_Init+0x104>)
 8000ed4:	f002 ff8e 	bl	8003df4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8000ede:	f7ff fe89 	bl	8000bf4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000eea:	2300      	movs	r3, #0
 8000eec:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000ef2:	463b      	mov	r3, r7
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4810      	ldr	r0, [pc, #64]	; (8000f3c <MX_TIM3_Init+0x104>)
 8000efa:	f002 f8ff 	bl	80030fc <HAL_TIM_IC_ConfigChannel>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8000f04:	f7ff fe76 	bl	8000bf4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000f08:	463b      	mov	r3, r7
 8000f0a:	2204      	movs	r2, #4
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	480b      	ldr	r0, [pc, #44]	; (8000f3c <MX_TIM3_Init+0x104>)
 8000f10:	f002 f8f4 	bl	80030fc <HAL_TIM_IC_ConfigChannel>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8000f1a:	f7ff fe6b 	bl	8000bf4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000f1e:	463b      	mov	r3, r7
 8000f20:	2208      	movs	r2, #8
 8000f22:	4619      	mov	r1, r3
 8000f24:	4805      	ldr	r0, [pc, #20]	; (8000f3c <MX_TIM3_Init+0x104>)
 8000f26:	f002 f8e9 	bl	80030fc <HAL_TIM_IC_ConfigChannel>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_TIM3_Init+0xfc>
  {
    Error_Handler();
 8000f30:	f7ff fe60 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000f34:	bf00      	nop
 8000f36:	3728      	adds	r7, #40	; 0x28
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	200000bc 	.word	0x200000bc
 8000f40:	40000400 	.word	0x40000400

08000f44 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b088      	sub	sp, #32
 8000f48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f4a:	1d3b      	adds	r3, r7, #4
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]
 8000f58:	615a      	str	r2, [r3, #20]
 8000f5a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000f5c:	4b1e      	ldr	r3, [pc, #120]	; (8000fd8 <MX_TIM10_Init+0x94>)
 8000f5e:	4a1f      	ldr	r2, [pc, #124]	; (8000fdc <MX_TIM10_Init+0x98>)
 8000f60:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 10000-1;
 8000f62:	4b1d      	ldr	r3, [pc, #116]	; (8000fd8 <MX_TIM10_Init+0x94>)
 8000f64:	f242 720f 	movw	r2, #9999	; 0x270f
 8000f68:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f6a:	4b1b      	ldr	r3, [pc, #108]	; (8000fd8 <MX_TIM10_Init+0x94>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000-1;
 8000f70:	4b19      	ldr	r3, [pc, #100]	; (8000fd8 <MX_TIM10_Init+0x94>)
 8000f72:	f242 720f 	movw	r2, #9999	; 0x270f
 8000f76:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f78:	4b17      	ldr	r3, [pc, #92]	; (8000fd8 <MX_TIM10_Init+0x94>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f7e:	4b16      	ldr	r3, [pc, #88]	; (8000fd8 <MX_TIM10_Init+0x94>)
 8000f80:	2280      	movs	r2, #128	; 0x80
 8000f82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000f84:	4814      	ldr	r0, [pc, #80]	; (8000fd8 <MX_TIM10_Init+0x94>)
 8000f86:	f001 fd95 	bl	8002ab4 <HAL_TIM_Base_Init>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_TIM10_Init+0x50>
  {
    Error_Handler();
 8000f90:	f7ff fe30 	bl	8000bf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8000f94:	4810      	ldr	r0, [pc, #64]	; (8000fd8 <MX_TIM10_Init+0x94>)
 8000f96:	f001 fddc 	bl	8002b52 <HAL_TIM_PWM_Init>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_TIM10_Init+0x60>
  {
    Error_Handler();
 8000fa0:	f7ff fe28 	bl	8000bf4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fa4:	2360      	movs	r3, #96	; 0x60
 8000fa6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fac:	2300      	movs	r3, #0
 8000fae:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fb4:	1d3b      	adds	r3, r7, #4
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4807      	ldr	r0, [pc, #28]	; (8000fd8 <MX_TIM10_Init+0x94>)
 8000fbc:	f002 f93a 	bl	8003234 <HAL_TIM_PWM_ConfigChannel>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_TIM10_Init+0x86>
  {
    Error_Handler();
 8000fc6:	f7ff fe15 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8000fca:	4803      	ldr	r0, [pc, #12]	; (8000fd8 <MX_TIM10_Init+0x94>)
 8000fcc:	f000 f8f2 	bl	80011b4 <HAL_TIM_MspPostInit>

}
 8000fd0:	bf00      	nop
 8000fd2:	3720      	adds	r7, #32
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	20000104 	.word	0x20000104
 8000fdc:	40014400 	.word	0x40014400

08000fe0 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b088      	sub	sp, #32
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fe6:	1d3b      	adds	r3, r7, #4
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]
 8000ff2:	611a      	str	r2, [r3, #16]
 8000ff4:	615a      	str	r2, [r3, #20]
 8000ff6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000ff8:	4b1e      	ldr	r3, [pc, #120]	; (8001074 <MX_TIM11_Init+0x94>)
 8000ffa:	4a1f      	ldr	r2, [pc, #124]	; (8001078 <MX_TIM11_Init+0x98>)
 8000ffc:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 10000-1;
 8000ffe:	4b1d      	ldr	r3, [pc, #116]	; (8001074 <MX_TIM11_Init+0x94>)
 8001000:	f242 720f 	movw	r2, #9999	; 0x270f
 8001004:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001006:	4b1b      	ldr	r3, [pc, #108]	; (8001074 <MX_TIM11_Init+0x94>)
 8001008:	2200      	movs	r2, #0
 800100a:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 10000-1;
 800100c:	4b19      	ldr	r3, [pc, #100]	; (8001074 <MX_TIM11_Init+0x94>)
 800100e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001012:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001014:	4b17      	ldr	r3, [pc, #92]	; (8001074 <MX_TIM11_Init+0x94>)
 8001016:	2200      	movs	r2, #0
 8001018:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800101a:	4b16      	ldr	r3, [pc, #88]	; (8001074 <MX_TIM11_Init+0x94>)
 800101c:	2280      	movs	r2, #128	; 0x80
 800101e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001020:	4814      	ldr	r0, [pc, #80]	; (8001074 <MX_TIM11_Init+0x94>)
 8001022:	f001 fd47 	bl	8002ab4 <HAL_TIM_Base_Init>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_TIM11_Init+0x50>
  {
    Error_Handler();
 800102c:	f7ff fde2 	bl	8000bf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8001030:	4810      	ldr	r0, [pc, #64]	; (8001074 <MX_TIM11_Init+0x94>)
 8001032:	f001 fd8e 	bl	8002b52 <HAL_TIM_PWM_Init>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_TIM11_Init+0x60>
  {
    Error_Handler();
 800103c:	f7ff fdda 	bl	8000bf4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001040:	2360      	movs	r3, #96	; 0x60
 8001042:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001044:	2300      	movs	r3, #0
 8001046:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001048:	2300      	movs	r3, #0
 800104a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001050:	1d3b      	adds	r3, r7, #4
 8001052:	2200      	movs	r2, #0
 8001054:	4619      	mov	r1, r3
 8001056:	4807      	ldr	r0, [pc, #28]	; (8001074 <MX_TIM11_Init+0x94>)
 8001058:	f002 f8ec 	bl	8003234 <HAL_TIM_PWM_ConfigChannel>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_TIM11_Init+0x86>
  {
    Error_Handler();
 8001062:	f7ff fdc7 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8001066:	4803      	ldr	r0, [pc, #12]	; (8001074 <MX_TIM11_Init+0x94>)
 8001068:	f000 f8a4 	bl	80011b4 <HAL_TIM_MspPostInit>

}
 800106c:	bf00      	nop
 800106e:	3720      	adds	r7, #32
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	2000014c 	.word	0x2000014c
 8001078:	40014800 	.word	0x40014800

0800107c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b08c      	sub	sp, #48	; 0x30
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001084:	f107 031c 	add.w	r3, r7, #28
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a40      	ldr	r2, [pc, #256]	; (800119c <HAL_TIM_Base_MspInit+0x120>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d152      	bne.n	8001144 <HAL_TIM_Base_MspInit+0xc8>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	61bb      	str	r3, [r7, #24]
 80010a2:	4b3f      	ldr	r3, [pc, #252]	; (80011a0 <HAL_TIM_Base_MspInit+0x124>)
 80010a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a6:	4a3e      	ldr	r2, [pc, #248]	; (80011a0 <HAL_TIM_Base_MspInit+0x124>)
 80010a8:	f043 0302 	orr.w	r3, r3, #2
 80010ac:	6413      	str	r3, [r2, #64]	; 0x40
 80010ae:	4b3c      	ldr	r3, [pc, #240]	; (80011a0 <HAL_TIM_Base_MspInit+0x124>)
 80010b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b2:	f003 0302 	and.w	r3, r3, #2
 80010b6:	61bb      	str	r3, [r7, #24]
 80010b8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	617b      	str	r3, [r7, #20]
 80010be:	4b38      	ldr	r3, [pc, #224]	; (80011a0 <HAL_TIM_Base_MspInit+0x124>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	4a37      	ldr	r2, [pc, #220]	; (80011a0 <HAL_TIM_Base_MspInit+0x124>)
 80010c4:	f043 0301 	orr.w	r3, r3, #1
 80010c8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ca:	4b35      	ldr	r3, [pc, #212]	; (80011a0 <HAL_TIM_Base_MspInit+0x124>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	617b      	str	r3, [r7, #20]
 80010d4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	613b      	str	r3, [r7, #16]
 80010da:	4b31      	ldr	r3, [pc, #196]	; (80011a0 <HAL_TIM_Base_MspInit+0x124>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	4a30      	ldr	r2, [pc, #192]	; (80011a0 <HAL_TIM_Base_MspInit+0x124>)
 80010e0:	f043 0302 	orr.w	r3, r3, #2
 80010e4:	6313      	str	r3, [r2, #48]	; 0x30
 80010e6:	4b2e      	ldr	r3, [pc, #184]	; (80011a0 <HAL_TIM_Base_MspInit+0x124>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	f003 0302 	and.w	r3, r3, #2
 80010ee:	613b      	str	r3, [r7, #16]
 80010f0:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010f2:	23c0      	movs	r3, #192	; 0xc0
 80010f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f6:	2302      	movs	r3, #2
 80010f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fe:	2300      	movs	r3, #0
 8001100:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001102:	2302      	movs	r3, #2
 8001104:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001106:	f107 031c 	add.w	r3, r7, #28
 800110a:	4619      	mov	r1, r3
 800110c:	4825      	ldr	r0, [pc, #148]	; (80011a4 <HAL_TIM_Base_MspInit+0x128>)
 800110e:	f000 fe9b 	bl	8001e48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001112:	2301      	movs	r3, #1
 8001114:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001116:	2302      	movs	r3, #2
 8001118:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111e:	2300      	movs	r3, #0
 8001120:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001122:	2302      	movs	r3, #2
 8001124:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001126:	f107 031c 	add.w	r3, r7, #28
 800112a:	4619      	mov	r1, r3
 800112c:	481e      	ldr	r0, [pc, #120]	; (80011a8 <HAL_TIM_Base_MspInit+0x12c>)
 800112e:	f000 fe8b 	bl	8001e48 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001132:	2200      	movs	r2, #0
 8001134:	2100      	movs	r1, #0
 8001136:	201d      	movs	r0, #29
 8001138:	f000 fadf 	bl	80016fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800113c:	201d      	movs	r0, #29
 800113e:	f000 faf8 	bl	8001732 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8001142:	e026      	b.n	8001192 <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM10)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a18      	ldr	r2, [pc, #96]	; (80011ac <HAL_TIM_Base_MspInit+0x130>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d10e      	bne.n	800116c <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	60fb      	str	r3, [r7, #12]
 8001152:	4b13      	ldr	r3, [pc, #76]	; (80011a0 <HAL_TIM_Base_MspInit+0x124>)
 8001154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001156:	4a12      	ldr	r2, [pc, #72]	; (80011a0 <HAL_TIM_Base_MspInit+0x124>)
 8001158:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800115c:	6453      	str	r3, [r2, #68]	; 0x44
 800115e:	4b10      	ldr	r3, [pc, #64]	; (80011a0 <HAL_TIM_Base_MspInit+0x124>)
 8001160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	68fb      	ldr	r3, [r7, #12]
}
 800116a:	e012      	b.n	8001192 <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM11)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a0f      	ldr	r2, [pc, #60]	; (80011b0 <HAL_TIM_Base_MspInit+0x134>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d10d      	bne.n	8001192 <HAL_TIM_Base_MspInit+0x116>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	60bb      	str	r3, [r7, #8]
 800117a:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <HAL_TIM_Base_MspInit+0x124>)
 800117c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117e:	4a08      	ldr	r2, [pc, #32]	; (80011a0 <HAL_TIM_Base_MspInit+0x124>)
 8001180:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001184:	6453      	str	r3, [r2, #68]	; 0x44
 8001186:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <HAL_TIM_Base_MspInit+0x124>)
 8001188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800118e:	60bb      	str	r3, [r7, #8]
 8001190:	68bb      	ldr	r3, [r7, #8]
}
 8001192:	bf00      	nop
 8001194:	3730      	adds	r7, #48	; 0x30
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40000400 	.word	0x40000400
 80011a0:	40023800 	.word	0x40023800
 80011a4:	40020000 	.word	0x40020000
 80011a8:	40020400 	.word	0x40020400
 80011ac:	40014400 	.word	0x40014400
 80011b0:	40014800 	.word	0x40014800

080011b4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b08a      	sub	sp, #40	; 0x28
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011bc:	f107 0314 	add.w	r3, r7, #20
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]
 80011ca:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM10)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a25      	ldr	r2, [pc, #148]	; (8001268 <HAL_TIM_MspPostInit+0xb4>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d11f      	bne.n	8001216 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM10_MspPostInit 0 */

  /* USER CODE END TIM10_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	613b      	str	r3, [r7, #16]
 80011da:	4b24      	ldr	r3, [pc, #144]	; (800126c <HAL_TIM_MspPostInit+0xb8>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	4a23      	ldr	r2, [pc, #140]	; (800126c <HAL_TIM_MspPostInit+0xb8>)
 80011e0:	f043 0302 	orr.w	r3, r3, #2
 80011e4:	6313      	str	r3, [r2, #48]	; 0x30
 80011e6:	4b21      	ldr	r3, [pc, #132]	; (800126c <HAL_TIM_MspPostInit+0xb8>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	f003 0302 	and.w	r3, r3, #2
 80011ee:	613b      	str	r3, [r7, #16]
 80011f0:	693b      	ldr	r3, [r7, #16]
    /**TIM10 GPIO Configuration
    PB8     ------> TIM10_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80011f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f8:	2302      	movs	r3, #2
 80011fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001200:	2300      	movs	r3, #0
 8001202:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001204:	2303      	movs	r3, #3
 8001206:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001208:	f107 0314 	add.w	r3, r7, #20
 800120c:	4619      	mov	r1, r3
 800120e:	4818      	ldr	r0, [pc, #96]	; (8001270 <HAL_TIM_MspPostInit+0xbc>)
 8001210:	f000 fe1a 	bl	8001e48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8001214:	e023      	b.n	800125e <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM11)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a16      	ldr	r2, [pc, #88]	; (8001274 <HAL_TIM_MspPostInit+0xc0>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d11e      	bne.n	800125e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001220:	2300      	movs	r3, #0
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	4b11      	ldr	r3, [pc, #68]	; (800126c <HAL_TIM_MspPostInit+0xb8>)
 8001226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001228:	4a10      	ldr	r2, [pc, #64]	; (800126c <HAL_TIM_MspPostInit+0xb8>)
 800122a:	f043 0302 	orr.w	r3, r3, #2
 800122e:	6313      	str	r3, [r2, #48]	; 0x30
 8001230:	4b0e      	ldr	r3, [pc, #56]	; (800126c <HAL_TIM_MspPostInit+0xb8>)
 8001232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001234:	f003 0302 	and.w	r3, r3, #2
 8001238:	60fb      	str	r3, [r7, #12]
 800123a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800123c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001240:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001242:	2302      	movs	r3, #2
 8001244:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	2300      	movs	r3, #0
 8001248:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124a:	2300      	movs	r3, #0
 800124c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 800124e:	2303      	movs	r3, #3
 8001250:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001252:	f107 0314 	add.w	r3, r7, #20
 8001256:	4619      	mov	r1, r3
 8001258:	4805      	ldr	r0, [pc, #20]	; (8001270 <HAL_TIM_MspPostInit+0xbc>)
 800125a:	f000 fdf5 	bl	8001e48 <HAL_GPIO_Init>
}
 800125e:	bf00      	nop
 8001260:	3728      	adds	r7, #40	; 0x28
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40014400 	.word	0x40014400
 800126c:	40023800 	.word	0x40023800
 8001270:	40020400 	.word	0x40020400
 8001274:	40014800 	.word	0x40014800

08001278 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800127c:	4b11      	ldr	r3, [pc, #68]	; (80012c4 <MX_USART1_UART_Init+0x4c>)
 800127e:	4a12      	ldr	r2, [pc, #72]	; (80012c8 <MX_USART1_UART_Init+0x50>)
 8001280:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001282:	4b10      	ldr	r3, [pc, #64]	; (80012c4 <MX_USART1_UART_Init+0x4c>)
 8001284:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001288:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800128a:	4b0e      	ldr	r3, [pc, #56]	; (80012c4 <MX_USART1_UART_Init+0x4c>)
 800128c:	2200      	movs	r2, #0
 800128e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001290:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <MX_USART1_UART_Init+0x4c>)
 8001292:	2200      	movs	r2, #0
 8001294:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001296:	4b0b      	ldr	r3, [pc, #44]	; (80012c4 <MX_USART1_UART_Init+0x4c>)
 8001298:	2200      	movs	r2, #0
 800129a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800129c:	4b09      	ldr	r3, [pc, #36]	; (80012c4 <MX_USART1_UART_Init+0x4c>)
 800129e:	220c      	movs	r2, #12
 80012a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012a2:	4b08      	ldr	r3, [pc, #32]	; (80012c4 <MX_USART1_UART_Init+0x4c>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012a8:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <MX_USART1_UART_Init+0x4c>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012ae:	4805      	ldr	r0, [pc, #20]	; (80012c4 <MX_USART1_UART_Init+0x4c>)
 80012b0:	f002 fe22 	bl	8003ef8 <HAL_UART_Init>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80012ba:	f7ff fc9b 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	20000194 	.word	0x20000194
 80012c8:	40011000 	.word	0x40011000

080012cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b08a      	sub	sp, #40	; 0x28
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d4:	f107 0314 	add.w	r3, r7, #20
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]
 80012e2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a31      	ldr	r2, [pc, #196]	; (80013b0 <HAL_UART_MspInit+0xe4>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d15b      	bne.n	80013a6 <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	613b      	str	r3, [r7, #16]
 80012f2:	4b30      	ldr	r3, [pc, #192]	; (80013b4 <HAL_UART_MspInit+0xe8>)
 80012f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f6:	4a2f      	ldr	r2, [pc, #188]	; (80013b4 <HAL_UART_MspInit+0xe8>)
 80012f8:	f043 0310 	orr.w	r3, r3, #16
 80012fc:	6453      	str	r3, [r2, #68]	; 0x44
 80012fe:	4b2d      	ldr	r3, [pc, #180]	; (80013b4 <HAL_UART_MspInit+0xe8>)
 8001300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001302:	f003 0310 	and.w	r3, r3, #16
 8001306:	613b      	str	r3, [r7, #16]
 8001308:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	60fb      	str	r3, [r7, #12]
 800130e:	4b29      	ldr	r3, [pc, #164]	; (80013b4 <HAL_UART_MspInit+0xe8>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	4a28      	ldr	r2, [pc, #160]	; (80013b4 <HAL_UART_MspInit+0xe8>)
 8001314:	f043 0301 	orr.w	r3, r3, #1
 8001318:	6313      	str	r3, [r2, #48]	; 0x30
 800131a:	4b26      	ldr	r3, [pc, #152]	; (80013b4 <HAL_UART_MspInit+0xe8>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001326:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800132a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132c:	2302      	movs	r3, #2
 800132e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	2300      	movs	r3, #0
 8001332:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001334:	2303      	movs	r3, #3
 8001336:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001338:	2307      	movs	r3, #7
 800133a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133c:	f107 0314 	add.w	r3, r7, #20
 8001340:	4619      	mov	r1, r3
 8001342:	481d      	ldr	r0, [pc, #116]	; (80013b8 <HAL_UART_MspInit+0xec>)
 8001344:	f000 fd80 	bl	8001e48 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001348:	4b1c      	ldr	r3, [pc, #112]	; (80013bc <HAL_UART_MspInit+0xf0>)
 800134a:	4a1d      	ldr	r2, [pc, #116]	; (80013c0 <HAL_UART_MspInit+0xf4>)
 800134c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800134e:	4b1b      	ldr	r3, [pc, #108]	; (80013bc <HAL_UART_MspInit+0xf0>)
 8001350:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001354:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001356:	4b19      	ldr	r3, [pc, #100]	; (80013bc <HAL_UART_MspInit+0xf0>)
 8001358:	2200      	movs	r2, #0
 800135a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800135c:	4b17      	ldr	r3, [pc, #92]	; (80013bc <HAL_UART_MspInit+0xf0>)
 800135e:	2200      	movs	r2, #0
 8001360:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001362:	4b16      	ldr	r3, [pc, #88]	; (80013bc <HAL_UART_MspInit+0xf0>)
 8001364:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001368:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800136a:	4b14      	ldr	r3, [pc, #80]	; (80013bc <HAL_UART_MspInit+0xf0>)
 800136c:	2200      	movs	r2, #0
 800136e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001370:	4b12      	ldr	r3, [pc, #72]	; (80013bc <HAL_UART_MspInit+0xf0>)
 8001372:	2200      	movs	r2, #0
 8001374:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001376:	4b11      	ldr	r3, [pc, #68]	; (80013bc <HAL_UART_MspInit+0xf0>)
 8001378:	f44f 7280 	mov.w	r2, #256	; 0x100
 800137c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800137e:	4b0f      	ldr	r3, [pc, #60]	; (80013bc <HAL_UART_MspInit+0xf0>)
 8001380:	2200      	movs	r2, #0
 8001382:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001384:	4b0d      	ldr	r3, [pc, #52]	; (80013bc <HAL_UART_MspInit+0xf0>)
 8001386:	2200      	movs	r2, #0
 8001388:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800138a:	480c      	ldr	r0, [pc, #48]	; (80013bc <HAL_UART_MspInit+0xf0>)
 800138c:	f000 f9ec 	bl	8001768 <HAL_DMA_Init>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001396:	f7ff fc2d 	bl	8000bf4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a07      	ldr	r2, [pc, #28]	; (80013bc <HAL_UART_MspInit+0xf0>)
 800139e:	639a      	str	r2, [r3, #56]	; 0x38
 80013a0:	4a06      	ldr	r2, [pc, #24]	; (80013bc <HAL_UART_MspInit+0xf0>)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80013a6:	bf00      	nop
 80013a8:	3728      	adds	r7, #40	; 0x28
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	40011000 	.word	0x40011000
 80013b4:	40023800 	.word	0x40023800
 80013b8:	40020000 	.word	0x40020000
 80013bc:	200001d8 	.word	0x200001d8
 80013c0:	40026440 	.word	0x40026440

080013c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80013c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013c8:	480d      	ldr	r0, [pc, #52]	; (8001400 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013ca:	490e      	ldr	r1, [pc, #56]	; (8001404 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013cc:	4a0e      	ldr	r2, [pc, #56]	; (8001408 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013d0:	e002      	b.n	80013d8 <LoopCopyDataInit>

080013d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013d6:	3304      	adds	r3, #4

080013d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013dc:	d3f9      	bcc.n	80013d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013de:	4a0b      	ldr	r2, [pc, #44]	; (800140c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013e0:	4c0b      	ldr	r4, [pc, #44]	; (8001410 <LoopFillZerobss+0x26>)
  movs r3, #0
 80013e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013e4:	e001      	b.n	80013ea <LoopFillZerobss>

080013e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013e8:	3204      	adds	r2, #4

080013ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013ec:	d3fb      	bcc.n	80013e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013ee:	f7ff fd11 	bl	8000e14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013f2:	f003 fc2b 	bl	8004c4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013f6:	f7ff fb53 	bl	8000aa0 <main>
  bx  lr    
 80013fa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80013fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001400:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001404:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001408:	0800587c 	.word	0x0800587c
  ldr r2, =_sbss
 800140c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001410:	20000388 	.word	0x20000388

08001414 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001414:	e7fe      	b.n	8001414 <ADC_IRQHandler>
	...

08001418 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800141c:	4b0e      	ldr	r3, [pc, #56]	; (8001458 <HAL_Init+0x40>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a0d      	ldr	r2, [pc, #52]	; (8001458 <HAL_Init+0x40>)
 8001422:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001426:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001428:	4b0b      	ldr	r3, [pc, #44]	; (8001458 <HAL_Init+0x40>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a0a      	ldr	r2, [pc, #40]	; (8001458 <HAL_Init+0x40>)
 800142e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001432:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001434:	4b08      	ldr	r3, [pc, #32]	; (8001458 <HAL_Init+0x40>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a07      	ldr	r2, [pc, #28]	; (8001458 <HAL_Init+0x40>)
 800143a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800143e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001440:	2003      	movs	r0, #3
 8001442:	f000 f94f 	bl	80016e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001446:	2000      	movs	r0, #0
 8001448:	f000 f808 	bl	800145c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800144c:	f7ff fbd8 	bl	8000c00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	40023c00 	.word	0x40023c00

0800145c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001464:	4b12      	ldr	r3, [pc, #72]	; (80014b0 <HAL_InitTick+0x54>)
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	4b12      	ldr	r3, [pc, #72]	; (80014b4 <HAL_InitTick+0x58>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	4619      	mov	r1, r3
 800146e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001472:	fbb3 f3f1 	udiv	r3, r3, r1
 8001476:	fbb2 f3f3 	udiv	r3, r2, r3
 800147a:	4618      	mov	r0, r3
 800147c:	f000 f967 	bl	800174e <HAL_SYSTICK_Config>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e00e      	b.n	80014a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2b0f      	cmp	r3, #15
 800148e:	d80a      	bhi.n	80014a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001490:	2200      	movs	r2, #0
 8001492:	6879      	ldr	r1, [r7, #4]
 8001494:	f04f 30ff 	mov.w	r0, #4294967295
 8001498:	f000 f92f 	bl	80016fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800149c:	4a06      	ldr	r2, [pc, #24]	; (80014b8 <HAL_InitTick+0x5c>)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014a2:	2300      	movs	r3, #0
 80014a4:	e000      	b.n	80014a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20000000 	.word	0x20000000
 80014b4:	20000008 	.word	0x20000008
 80014b8:	20000004 	.word	0x20000004

080014bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014c0:	4b06      	ldr	r3, [pc, #24]	; (80014dc <HAL_IncTick+0x20>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	461a      	mov	r2, r3
 80014c6:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <HAL_IncTick+0x24>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4413      	add	r3, r2
 80014cc:	4a04      	ldr	r2, [pc, #16]	; (80014e0 <HAL_IncTick+0x24>)
 80014ce:	6013      	str	r3, [r2, #0]
}
 80014d0:	bf00      	nop
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	20000008 	.word	0x20000008
 80014e0:	20000238 	.word	0x20000238

080014e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  return uwTick;
 80014e8:	4b03      	ldr	r3, [pc, #12]	; (80014f8 <HAL_GetTick+0x14>)
 80014ea:	681b      	ldr	r3, [r3, #0]
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	20000238 	.word	0x20000238

080014fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001504:	f7ff ffee 	bl	80014e4 <HAL_GetTick>
 8001508:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001514:	d005      	beq.n	8001522 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001516:	4b0a      	ldr	r3, [pc, #40]	; (8001540 <HAL_Delay+0x44>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	461a      	mov	r2, r3
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	4413      	add	r3, r2
 8001520:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001522:	bf00      	nop
 8001524:	f7ff ffde 	bl	80014e4 <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	68fa      	ldr	r2, [r7, #12]
 8001530:	429a      	cmp	r2, r3
 8001532:	d8f7      	bhi.n	8001524 <HAL_Delay+0x28>
  {
  }
}
 8001534:	bf00      	nop
 8001536:	bf00      	nop
 8001538:	3710      	adds	r7, #16
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	20000008 	.word	0x20000008

08001544 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f003 0307 	and.w	r3, r3, #7
 8001552:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001554:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <__NVIC_SetPriorityGrouping+0x44>)
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800155a:	68ba      	ldr	r2, [r7, #8]
 800155c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001560:	4013      	ands	r3, r2
 8001562:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800156c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001570:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001574:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001576:	4a04      	ldr	r2, [pc, #16]	; (8001588 <__NVIC_SetPriorityGrouping+0x44>)
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	60d3      	str	r3, [r2, #12]
}
 800157c:	bf00      	nop
 800157e:	3714      	adds	r7, #20
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	e000ed00 	.word	0xe000ed00

0800158c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001590:	4b04      	ldr	r3, [pc, #16]	; (80015a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	0a1b      	lsrs	r3, r3, #8
 8001596:	f003 0307 	and.w	r3, r3, #7
}
 800159a:	4618      	mov	r0, r3
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	e000ed00 	.word	0xe000ed00

080015a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	db0b      	blt.n	80015d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ba:	79fb      	ldrb	r3, [r7, #7]
 80015bc:	f003 021f 	and.w	r2, r3, #31
 80015c0:	4907      	ldr	r1, [pc, #28]	; (80015e0 <__NVIC_EnableIRQ+0x38>)
 80015c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c6:	095b      	lsrs	r3, r3, #5
 80015c8:	2001      	movs	r0, #1
 80015ca:	fa00 f202 	lsl.w	r2, r0, r2
 80015ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	e000e100 	.word	0xe000e100

080015e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	6039      	str	r1, [r7, #0]
 80015ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	db0a      	blt.n	800160e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	b2da      	uxtb	r2, r3
 80015fc:	490c      	ldr	r1, [pc, #48]	; (8001630 <__NVIC_SetPriority+0x4c>)
 80015fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001602:	0112      	lsls	r2, r2, #4
 8001604:	b2d2      	uxtb	r2, r2
 8001606:	440b      	add	r3, r1
 8001608:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800160c:	e00a      	b.n	8001624 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	b2da      	uxtb	r2, r3
 8001612:	4908      	ldr	r1, [pc, #32]	; (8001634 <__NVIC_SetPriority+0x50>)
 8001614:	79fb      	ldrb	r3, [r7, #7]
 8001616:	f003 030f 	and.w	r3, r3, #15
 800161a:	3b04      	subs	r3, #4
 800161c:	0112      	lsls	r2, r2, #4
 800161e:	b2d2      	uxtb	r2, r2
 8001620:	440b      	add	r3, r1
 8001622:	761a      	strb	r2, [r3, #24]
}
 8001624:	bf00      	nop
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	e000e100 	.word	0xe000e100
 8001634:	e000ed00 	.word	0xe000ed00

08001638 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001638:	b480      	push	{r7}
 800163a:	b089      	sub	sp, #36	; 0x24
 800163c:	af00      	add	r7, sp, #0
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	60b9      	str	r1, [r7, #8]
 8001642:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f003 0307 	and.w	r3, r3, #7
 800164a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	f1c3 0307 	rsb	r3, r3, #7
 8001652:	2b04      	cmp	r3, #4
 8001654:	bf28      	it	cs
 8001656:	2304      	movcs	r3, #4
 8001658:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	3304      	adds	r3, #4
 800165e:	2b06      	cmp	r3, #6
 8001660:	d902      	bls.n	8001668 <NVIC_EncodePriority+0x30>
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	3b03      	subs	r3, #3
 8001666:	e000      	b.n	800166a <NVIC_EncodePriority+0x32>
 8001668:	2300      	movs	r3, #0
 800166a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800166c:	f04f 32ff 	mov.w	r2, #4294967295
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	fa02 f303 	lsl.w	r3, r2, r3
 8001676:	43da      	mvns	r2, r3
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	401a      	ands	r2, r3
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001680:	f04f 31ff 	mov.w	r1, #4294967295
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	fa01 f303 	lsl.w	r3, r1, r3
 800168a:	43d9      	mvns	r1, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001690:	4313      	orrs	r3, r2
         );
}
 8001692:	4618      	mov	r0, r3
 8001694:	3724      	adds	r7, #36	; 0x24
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
	...

080016a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3b01      	subs	r3, #1
 80016ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016b0:	d301      	bcc.n	80016b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016b2:	2301      	movs	r3, #1
 80016b4:	e00f      	b.n	80016d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016b6:	4a0a      	ldr	r2, [pc, #40]	; (80016e0 <SysTick_Config+0x40>)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	3b01      	subs	r3, #1
 80016bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016be:	210f      	movs	r1, #15
 80016c0:	f04f 30ff 	mov.w	r0, #4294967295
 80016c4:	f7ff ff8e 	bl	80015e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016c8:	4b05      	ldr	r3, [pc, #20]	; (80016e0 <SysTick_Config+0x40>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ce:	4b04      	ldr	r3, [pc, #16]	; (80016e0 <SysTick_Config+0x40>)
 80016d0:	2207      	movs	r2, #7
 80016d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	e000e010 	.word	0xe000e010

080016e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f7ff ff29 	bl	8001544 <__NVIC_SetPriorityGrouping>
}
 80016f2:	bf00      	nop
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b086      	sub	sp, #24
 80016fe:	af00      	add	r7, sp, #0
 8001700:	4603      	mov	r3, r0
 8001702:	60b9      	str	r1, [r7, #8]
 8001704:	607a      	str	r2, [r7, #4]
 8001706:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001708:	2300      	movs	r3, #0
 800170a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800170c:	f7ff ff3e 	bl	800158c <__NVIC_GetPriorityGrouping>
 8001710:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	68b9      	ldr	r1, [r7, #8]
 8001716:	6978      	ldr	r0, [r7, #20]
 8001718:	f7ff ff8e 	bl	8001638 <NVIC_EncodePriority>
 800171c:	4602      	mov	r2, r0
 800171e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001722:	4611      	mov	r1, r2
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff ff5d 	bl	80015e4 <__NVIC_SetPriority>
}
 800172a:	bf00      	nop
 800172c:	3718      	adds	r7, #24
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	b082      	sub	sp, #8
 8001736:	af00      	add	r7, sp, #0
 8001738:	4603      	mov	r3, r0
 800173a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800173c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff ff31 	bl	80015a8 <__NVIC_EnableIRQ>
}
 8001746:	bf00      	nop
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	b082      	sub	sp, #8
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f7ff ffa2 	bl	80016a0 <SysTick_Config>
 800175c:	4603      	mov	r3, r0
}
 800175e:	4618      	mov	r0, r3
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
	...

08001768 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001770:	2300      	movs	r3, #0
 8001772:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001774:	f7ff feb6 	bl	80014e4 <HAL_GetTick>
 8001778:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d101      	bne.n	8001784 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e099      	b.n	80018b8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2202      	movs	r2, #2
 8001788:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2200      	movs	r2, #0
 8001790:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f022 0201 	bic.w	r2, r2, #1
 80017a2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017a4:	e00f      	b.n	80017c6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017a6:	f7ff fe9d 	bl	80014e4 <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	2b05      	cmp	r3, #5
 80017b2:	d908      	bls.n	80017c6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2220      	movs	r2, #32
 80017b8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2203      	movs	r2, #3
 80017be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e078      	b.n	80018b8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0301 	and.w	r3, r3, #1
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d1e8      	bne.n	80017a6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80017dc:	697a      	ldr	r2, [r7, #20]
 80017de:	4b38      	ldr	r3, [pc, #224]	; (80018c0 <HAL_DMA_Init+0x158>)
 80017e0:	4013      	ands	r3, r2
 80017e2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685a      	ldr	r2, [r3, #4]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	691b      	ldr	r3, [r3, #16]
 80017f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800180a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6a1b      	ldr	r3, [r3, #32]
 8001810:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001812:	697a      	ldr	r2, [r7, #20]
 8001814:	4313      	orrs	r3, r2
 8001816:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181c:	2b04      	cmp	r3, #4
 800181e:	d107      	bne.n	8001830 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001828:	4313      	orrs	r3, r2
 800182a:	697a      	ldr	r2, [r7, #20]
 800182c:	4313      	orrs	r3, r2
 800182e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	697a      	ldr	r2, [r7, #20]
 8001836:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	695b      	ldr	r3, [r3, #20]
 800183e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	f023 0307 	bic.w	r3, r3, #7
 8001846:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800184c:	697a      	ldr	r2, [r7, #20]
 800184e:	4313      	orrs	r3, r2
 8001850:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001856:	2b04      	cmp	r3, #4
 8001858:	d117      	bne.n	800188a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800185e:	697a      	ldr	r2, [r7, #20]
 8001860:	4313      	orrs	r3, r2
 8001862:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001868:	2b00      	cmp	r3, #0
 800186a:	d00e      	beq.n	800188a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f000 fa6f 	bl	8001d50 <DMA_CheckFifoParam>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d008      	beq.n	800188a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2240      	movs	r2, #64	; 0x40
 800187c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2201      	movs	r2, #1
 8001882:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001886:	2301      	movs	r3, #1
 8001888:	e016      	b.n	80018b8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	697a      	ldr	r2, [r7, #20]
 8001890:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f000 fa26 	bl	8001ce4 <DMA_CalcBaseAndBitshift>
 8001898:	4603      	mov	r3, r0
 800189a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018a0:	223f      	movs	r2, #63	; 0x3f
 80018a2:	409a      	lsls	r2, r3
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2200      	movs	r2, #0
 80018ac:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2201      	movs	r2, #1
 80018b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80018b6:	2300      	movs	r3, #0
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3718      	adds	r7, #24
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	f010803f 	.word	0xf010803f

080018c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b086      	sub	sp, #24
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	60f8      	str	r0, [r7, #12]
 80018cc:	60b9      	str	r1, [r7, #8]
 80018ce:	607a      	str	r2, [r7, #4]
 80018d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018d2:	2300      	movs	r3, #0
 80018d4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018da:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d101      	bne.n	80018ea <HAL_DMA_Start_IT+0x26>
 80018e6:	2302      	movs	r3, #2
 80018e8:	e040      	b.n	800196c <HAL_DMA_Start_IT+0xa8>
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	2201      	movs	r2, #1
 80018ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d12f      	bne.n	800195e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2202      	movs	r2, #2
 8001902:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2200      	movs	r2, #0
 800190a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	68b9      	ldr	r1, [r7, #8]
 8001912:	68f8      	ldr	r0, [r7, #12]
 8001914:	f000 f9b8 	bl	8001c88 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800191c:	223f      	movs	r2, #63	; 0x3f
 800191e:	409a      	lsls	r2, r3
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f042 0216 	orr.w	r2, r2, #22
 8001932:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001938:	2b00      	cmp	r3, #0
 800193a:	d007      	beq.n	800194c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f042 0208 	orr.w	r2, r2, #8
 800194a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f042 0201 	orr.w	r2, r2, #1
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	e005      	b.n	800196a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2200      	movs	r2, #0
 8001962:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001966:	2302      	movs	r3, #2
 8001968:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800196a:	7dfb      	ldrb	r3, [r7, #23]
}
 800196c:	4618      	mov	r0, r3
 800196e:	3718      	adds	r7, #24
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}

08001974 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800197c:	2300      	movs	r3, #0
 800197e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001980:	4b8e      	ldr	r3, [pc, #568]	; (8001bbc <HAL_DMA_IRQHandler+0x248>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a8e      	ldr	r2, [pc, #568]	; (8001bc0 <HAL_DMA_IRQHandler+0x24c>)
 8001986:	fba2 2303 	umull	r2, r3, r2, r3
 800198a:	0a9b      	lsrs	r3, r3, #10
 800198c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001992:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800199e:	2208      	movs	r2, #8
 80019a0:	409a      	lsls	r2, r3
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	4013      	ands	r3, r2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d01a      	beq.n	80019e0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0304 	and.w	r3, r3, #4
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d013      	beq.n	80019e0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f022 0204 	bic.w	r2, r2, #4
 80019c6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019cc:	2208      	movs	r2, #8
 80019ce:	409a      	lsls	r2, r3
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019d8:	f043 0201 	orr.w	r2, r3, #1
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019e4:	2201      	movs	r2, #1
 80019e6:	409a      	lsls	r2, r3
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	4013      	ands	r3, r2
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d012      	beq.n	8001a16 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	695b      	ldr	r3, [r3, #20]
 80019f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d00b      	beq.n	8001a16 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a02:	2201      	movs	r2, #1
 8001a04:	409a      	lsls	r2, r3
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a0e:	f043 0202 	orr.w	r2, r3, #2
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a1a:	2204      	movs	r2, #4
 8001a1c:	409a      	lsls	r2, r3
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	4013      	ands	r3, r2
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d012      	beq.n	8001a4c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0302 	and.w	r3, r3, #2
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d00b      	beq.n	8001a4c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a38:	2204      	movs	r2, #4
 8001a3a:	409a      	lsls	r2, r3
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a44:	f043 0204 	orr.w	r2, r3, #4
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a50:	2210      	movs	r2, #16
 8001a52:	409a      	lsls	r2, r3
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	4013      	ands	r3, r2
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d043      	beq.n	8001ae4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0308 	and.w	r3, r3, #8
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d03c      	beq.n	8001ae4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a6e:	2210      	movs	r2, #16
 8001a70:	409a      	lsls	r2, r3
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d018      	beq.n	8001ab6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d108      	bne.n	8001aa4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d024      	beq.n	8001ae4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	4798      	blx	r3
 8001aa2:	e01f      	b.n	8001ae4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d01b      	beq.n	8001ae4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	4798      	blx	r3
 8001ab4:	e016      	b.n	8001ae4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d107      	bne.n	8001ad4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f022 0208 	bic.w	r2, r2, #8
 8001ad2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d003      	beq.n	8001ae4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ae8:	2220      	movs	r2, #32
 8001aea:	409a      	lsls	r2, r3
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	4013      	ands	r3, r2
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	f000 808f 	beq.w	8001c14 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0310 	and.w	r3, r3, #16
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	f000 8087 	beq.w	8001c14 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b0a:	2220      	movs	r2, #32
 8001b0c:	409a      	lsls	r2, r3
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	2b05      	cmp	r3, #5
 8001b1c:	d136      	bne.n	8001b8c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f022 0216 	bic.w	r2, r2, #22
 8001b2c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	695a      	ldr	r2, [r3, #20]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b3c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d103      	bne.n	8001b4e <HAL_DMA_IRQHandler+0x1da>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d007      	beq.n	8001b5e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f022 0208 	bic.w	r2, r2, #8
 8001b5c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b62:	223f      	movs	r2, #63	; 0x3f
 8001b64:	409a      	lsls	r2, r3
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d07e      	beq.n	8001c80 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	4798      	blx	r3
        }
        return;
 8001b8a:	e079      	b.n	8001c80 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d01d      	beq.n	8001bd6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d10d      	bne.n	8001bc4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d031      	beq.n	8001c14 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	4798      	blx	r3
 8001bb8:	e02c      	b.n	8001c14 <HAL_DMA_IRQHandler+0x2a0>
 8001bba:	bf00      	nop
 8001bbc:	20000000 	.word	0x20000000
 8001bc0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d023      	beq.n	8001c14 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	4798      	blx	r3
 8001bd4:	e01e      	b.n	8001c14 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d10f      	bne.n	8001c04 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f022 0210 	bic.w	r2, r2, #16
 8001bf2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d003      	beq.n	8001c14 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d032      	beq.n	8001c82 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c20:	f003 0301 	and.w	r3, r3, #1
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d022      	beq.n	8001c6e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2205      	movs	r2, #5
 8001c2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f022 0201 	bic.w	r2, r2, #1
 8001c3e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	3301      	adds	r3, #1
 8001c44:	60bb      	str	r3, [r7, #8]
 8001c46:	697a      	ldr	r2, [r7, #20]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d307      	bcc.n	8001c5c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d1f2      	bne.n	8001c40 <HAL_DMA_IRQHandler+0x2cc>
 8001c5a:	e000      	b.n	8001c5e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001c5c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2201      	movs	r2, #1
 8001c62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d005      	beq.n	8001c82 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	4798      	blx	r3
 8001c7e:	e000      	b.n	8001c82 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001c80:	bf00      	nop
    }
  }
}
 8001c82:	3718      	adds	r7, #24
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b085      	sub	sp, #20
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
 8001c94:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ca4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	683a      	ldr	r2, [r7, #0]
 8001cac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	2b40      	cmp	r3, #64	; 0x40
 8001cb4:	d108      	bne.n	8001cc8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	68ba      	ldr	r2, [r7, #8]
 8001cc4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001cc6:	e007      	b.n	8001cd8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	68ba      	ldr	r2, [r7, #8]
 8001cce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	60da      	str	r2, [r3, #12]
}
 8001cd8:	bf00      	nop
 8001cda:	3714      	adds	r7, #20
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	3b10      	subs	r3, #16
 8001cf4:	4a14      	ldr	r2, [pc, #80]	; (8001d48 <DMA_CalcBaseAndBitshift+0x64>)
 8001cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cfa:	091b      	lsrs	r3, r3, #4
 8001cfc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001cfe:	4a13      	ldr	r2, [pc, #76]	; (8001d4c <DMA_CalcBaseAndBitshift+0x68>)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	4413      	add	r3, r2
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	461a      	mov	r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2b03      	cmp	r3, #3
 8001d10:	d909      	bls.n	8001d26 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d1a:	f023 0303 	bic.w	r3, r3, #3
 8001d1e:	1d1a      	adds	r2, r3, #4
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	659a      	str	r2, [r3, #88]	; 0x58
 8001d24:	e007      	b.n	8001d36 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d2e:	f023 0303 	bic.w	r3, r3, #3
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3714      	adds	r7, #20
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	aaaaaaab 	.word	0xaaaaaaab
 8001d4c:	08005830 	.word	0x08005830

08001d50 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d60:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	699b      	ldr	r3, [r3, #24]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d11f      	bne.n	8001daa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	2b03      	cmp	r3, #3
 8001d6e:	d856      	bhi.n	8001e1e <DMA_CheckFifoParam+0xce>
 8001d70:	a201      	add	r2, pc, #4	; (adr r2, 8001d78 <DMA_CheckFifoParam+0x28>)
 8001d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d76:	bf00      	nop
 8001d78:	08001d89 	.word	0x08001d89
 8001d7c:	08001d9b 	.word	0x08001d9b
 8001d80:	08001d89 	.word	0x08001d89
 8001d84:	08001e1f 	.word	0x08001e1f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d046      	beq.n	8001e22 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d98:	e043      	b.n	8001e22 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d9e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001da2:	d140      	bne.n	8001e26 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001da8:	e03d      	b.n	8001e26 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	699b      	ldr	r3, [r3, #24]
 8001dae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001db2:	d121      	bne.n	8001df8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	2b03      	cmp	r3, #3
 8001db8:	d837      	bhi.n	8001e2a <DMA_CheckFifoParam+0xda>
 8001dba:	a201      	add	r2, pc, #4	; (adr r2, 8001dc0 <DMA_CheckFifoParam+0x70>)
 8001dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dc0:	08001dd1 	.word	0x08001dd1
 8001dc4:	08001dd7 	.word	0x08001dd7
 8001dc8:	08001dd1 	.word	0x08001dd1
 8001dcc:	08001de9 	.word	0x08001de9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	73fb      	strb	r3, [r7, #15]
      break;
 8001dd4:	e030      	b.n	8001e38 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d025      	beq.n	8001e2e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001de6:	e022      	b.n	8001e2e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001df0:	d11f      	bne.n	8001e32 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001df6:	e01c      	b.n	8001e32 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d903      	bls.n	8001e06 <DMA_CheckFifoParam+0xb6>
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	2b03      	cmp	r3, #3
 8001e02:	d003      	beq.n	8001e0c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001e04:	e018      	b.n	8001e38 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	73fb      	strb	r3, [r7, #15]
      break;
 8001e0a:	e015      	b.n	8001e38 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d00e      	beq.n	8001e36 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	73fb      	strb	r3, [r7, #15]
      break;
 8001e1c:	e00b      	b.n	8001e36 <DMA_CheckFifoParam+0xe6>
      break;
 8001e1e:	bf00      	nop
 8001e20:	e00a      	b.n	8001e38 <DMA_CheckFifoParam+0xe8>
      break;
 8001e22:	bf00      	nop
 8001e24:	e008      	b.n	8001e38 <DMA_CheckFifoParam+0xe8>
      break;
 8001e26:	bf00      	nop
 8001e28:	e006      	b.n	8001e38 <DMA_CheckFifoParam+0xe8>
      break;
 8001e2a:	bf00      	nop
 8001e2c:	e004      	b.n	8001e38 <DMA_CheckFifoParam+0xe8>
      break;
 8001e2e:	bf00      	nop
 8001e30:	e002      	b.n	8001e38 <DMA_CheckFifoParam+0xe8>
      break;   
 8001e32:	bf00      	nop
 8001e34:	e000      	b.n	8001e38 <DMA_CheckFifoParam+0xe8>
      break;
 8001e36:	bf00      	nop
    }
  } 
  
  return status; 
 8001e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3714      	adds	r7, #20
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop

08001e48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b089      	sub	sp, #36	; 0x24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e52:	2300      	movs	r3, #0
 8001e54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e56:	2300      	movs	r3, #0
 8001e58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e5e:	2300      	movs	r3, #0
 8001e60:	61fb      	str	r3, [r7, #28]
 8001e62:	e159      	b.n	8002118 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e64:	2201      	movs	r2, #1
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	697a      	ldr	r2, [r7, #20]
 8001e74:	4013      	ands	r3, r2
 8001e76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e78:	693a      	ldr	r2, [r7, #16]
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	f040 8148 	bne.w	8002112 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f003 0303 	and.w	r3, r3, #3
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d005      	beq.n	8001e9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d130      	bne.n	8001efc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	2203      	movs	r2, #3
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	43db      	mvns	r3, r3
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	68da      	ldr	r2, [r3, #12]
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	43db      	mvns	r3, r3
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	4013      	ands	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	091b      	lsrs	r3, r3, #4
 8001ee6:	f003 0201 	and.w	r2, r3, #1
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f003 0303 	and.w	r3, r3, #3
 8001f04:	2b03      	cmp	r3, #3
 8001f06:	d017      	beq.n	8001f38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	2203      	movs	r2, #3
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	689a      	ldr	r2, [r3, #8]
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f003 0303 	and.w	r3, r3, #3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d123      	bne.n	8001f8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	08da      	lsrs	r2, r3, #3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	3208      	adds	r2, #8
 8001f4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	f003 0307 	and.w	r3, r3, #7
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	220f      	movs	r2, #15
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	43db      	mvns	r3, r3
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	4013      	ands	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	691a      	ldr	r2, [r3, #16]
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	f003 0307 	and.w	r3, r3, #7
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	08da      	lsrs	r2, r3, #3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	3208      	adds	r2, #8
 8001f86:	69b9      	ldr	r1, [r7, #24]
 8001f88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	2203      	movs	r2, #3
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f003 0203 	and.w	r2, r3, #3
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	f000 80a2 	beq.w	8002112 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fce:	2300      	movs	r3, #0
 8001fd0:	60fb      	str	r3, [r7, #12]
 8001fd2:	4b57      	ldr	r3, [pc, #348]	; (8002130 <HAL_GPIO_Init+0x2e8>)
 8001fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd6:	4a56      	ldr	r2, [pc, #344]	; (8002130 <HAL_GPIO_Init+0x2e8>)
 8001fd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fdc:	6453      	str	r3, [r2, #68]	; 0x44
 8001fde:	4b54      	ldr	r3, [pc, #336]	; (8002130 <HAL_GPIO_Init+0x2e8>)
 8001fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fe6:	60fb      	str	r3, [r7, #12]
 8001fe8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fea:	4a52      	ldr	r2, [pc, #328]	; (8002134 <HAL_GPIO_Init+0x2ec>)
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	089b      	lsrs	r3, r3, #2
 8001ff0:	3302      	adds	r3, #2
 8001ff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	f003 0303 	and.w	r3, r3, #3
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	220f      	movs	r2, #15
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	43db      	mvns	r3, r3
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	4013      	ands	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a49      	ldr	r2, [pc, #292]	; (8002138 <HAL_GPIO_Init+0x2f0>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d019      	beq.n	800204a <HAL_GPIO_Init+0x202>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a48      	ldr	r2, [pc, #288]	; (800213c <HAL_GPIO_Init+0x2f4>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d013      	beq.n	8002046 <HAL_GPIO_Init+0x1fe>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a47      	ldr	r2, [pc, #284]	; (8002140 <HAL_GPIO_Init+0x2f8>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d00d      	beq.n	8002042 <HAL_GPIO_Init+0x1fa>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a46      	ldr	r2, [pc, #280]	; (8002144 <HAL_GPIO_Init+0x2fc>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d007      	beq.n	800203e <HAL_GPIO_Init+0x1f6>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a45      	ldr	r2, [pc, #276]	; (8002148 <HAL_GPIO_Init+0x300>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d101      	bne.n	800203a <HAL_GPIO_Init+0x1f2>
 8002036:	2304      	movs	r3, #4
 8002038:	e008      	b.n	800204c <HAL_GPIO_Init+0x204>
 800203a:	2307      	movs	r3, #7
 800203c:	e006      	b.n	800204c <HAL_GPIO_Init+0x204>
 800203e:	2303      	movs	r3, #3
 8002040:	e004      	b.n	800204c <HAL_GPIO_Init+0x204>
 8002042:	2302      	movs	r3, #2
 8002044:	e002      	b.n	800204c <HAL_GPIO_Init+0x204>
 8002046:	2301      	movs	r3, #1
 8002048:	e000      	b.n	800204c <HAL_GPIO_Init+0x204>
 800204a:	2300      	movs	r3, #0
 800204c:	69fa      	ldr	r2, [r7, #28]
 800204e:	f002 0203 	and.w	r2, r2, #3
 8002052:	0092      	lsls	r2, r2, #2
 8002054:	4093      	lsls	r3, r2
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	4313      	orrs	r3, r2
 800205a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800205c:	4935      	ldr	r1, [pc, #212]	; (8002134 <HAL_GPIO_Init+0x2ec>)
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	089b      	lsrs	r3, r3, #2
 8002062:	3302      	adds	r3, #2
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800206a:	4b38      	ldr	r3, [pc, #224]	; (800214c <HAL_GPIO_Init+0x304>)
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	43db      	mvns	r3, r3
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	4013      	ands	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d003      	beq.n	800208e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002086:	69ba      	ldr	r2, [r7, #24]
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	4313      	orrs	r3, r2
 800208c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800208e:	4a2f      	ldr	r2, [pc, #188]	; (800214c <HAL_GPIO_Init+0x304>)
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002094:	4b2d      	ldr	r3, [pc, #180]	; (800214c <HAL_GPIO_Init+0x304>)
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	43db      	mvns	r3, r3
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	4013      	ands	r3, r2
 80020a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d003      	beq.n	80020b8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020b8:	4a24      	ldr	r2, [pc, #144]	; (800214c <HAL_GPIO_Init+0x304>)
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020be:	4b23      	ldr	r3, [pc, #140]	; (800214c <HAL_GPIO_Init+0x304>)
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	43db      	mvns	r3, r3
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	4013      	ands	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d003      	beq.n	80020e2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	4313      	orrs	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020e2:	4a1a      	ldr	r2, [pc, #104]	; (800214c <HAL_GPIO_Init+0x304>)
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020e8:	4b18      	ldr	r3, [pc, #96]	; (800214c <HAL_GPIO_Init+0x304>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	43db      	mvns	r3, r3
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	4013      	ands	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d003      	beq.n	800210c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	4313      	orrs	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800210c:	4a0f      	ldr	r2, [pc, #60]	; (800214c <HAL_GPIO_Init+0x304>)
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	3301      	adds	r3, #1
 8002116:	61fb      	str	r3, [r7, #28]
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	2b0f      	cmp	r3, #15
 800211c:	f67f aea2 	bls.w	8001e64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002120:	bf00      	nop
 8002122:	bf00      	nop
 8002124:	3724      	adds	r7, #36	; 0x24
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	40023800 	.word	0x40023800
 8002134:	40013800 	.word	0x40013800
 8002138:	40020000 	.word	0x40020000
 800213c:	40020400 	.word	0x40020400
 8002140:	40020800 	.word	0x40020800
 8002144:	40020c00 	.word	0x40020c00
 8002148:	40021000 	.word	0x40021000
 800214c:	40013c00 	.word	0x40013c00

08002150 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	460b      	mov	r3, r1
 800215a:	807b      	strh	r3, [r7, #2]
 800215c:	4613      	mov	r3, r2
 800215e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002160:	787b      	ldrb	r3, [r7, #1]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d003      	beq.n	800216e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002166:	887a      	ldrh	r2, [r7, #2]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800216c:	e003      	b.n	8002176 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800216e:	887b      	ldrh	r3, [r7, #2]
 8002170:	041a      	lsls	r2, r3, #16
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	619a      	str	r2, [r3, #24]
}
 8002176:	bf00      	nop
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
	...

08002184 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b086      	sub	sp, #24
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d101      	bne.n	8002196 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e267      	b.n	8002666 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d075      	beq.n	800228e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021a2:	4b88      	ldr	r3, [pc, #544]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f003 030c 	and.w	r3, r3, #12
 80021aa:	2b04      	cmp	r3, #4
 80021ac:	d00c      	beq.n	80021c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021ae:	4b85      	ldr	r3, [pc, #532]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021b6:	2b08      	cmp	r3, #8
 80021b8:	d112      	bne.n	80021e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021ba:	4b82      	ldr	r3, [pc, #520]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021c6:	d10b      	bne.n	80021e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021c8:	4b7e      	ldr	r3, [pc, #504]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d05b      	beq.n	800228c <HAL_RCC_OscConfig+0x108>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d157      	bne.n	800228c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e242      	b.n	8002666 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021e8:	d106      	bne.n	80021f8 <HAL_RCC_OscConfig+0x74>
 80021ea:	4b76      	ldr	r3, [pc, #472]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a75      	ldr	r2, [pc, #468]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 80021f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021f4:	6013      	str	r3, [r2, #0]
 80021f6:	e01d      	b.n	8002234 <HAL_RCC_OscConfig+0xb0>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002200:	d10c      	bne.n	800221c <HAL_RCC_OscConfig+0x98>
 8002202:	4b70      	ldr	r3, [pc, #448]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a6f      	ldr	r2, [pc, #444]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 8002208:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800220c:	6013      	str	r3, [r2, #0]
 800220e:	4b6d      	ldr	r3, [pc, #436]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a6c      	ldr	r2, [pc, #432]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 8002214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002218:	6013      	str	r3, [r2, #0]
 800221a:	e00b      	b.n	8002234 <HAL_RCC_OscConfig+0xb0>
 800221c:	4b69      	ldr	r3, [pc, #420]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a68      	ldr	r2, [pc, #416]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 8002222:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002226:	6013      	str	r3, [r2, #0]
 8002228:	4b66      	ldr	r3, [pc, #408]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a65      	ldr	r2, [pc, #404]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 800222e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002232:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d013      	beq.n	8002264 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800223c:	f7ff f952 	bl	80014e4 <HAL_GetTick>
 8002240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002242:	e008      	b.n	8002256 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002244:	f7ff f94e 	bl	80014e4 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b64      	cmp	r3, #100	; 0x64
 8002250:	d901      	bls.n	8002256 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e207      	b.n	8002666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002256:	4b5b      	ldr	r3, [pc, #364]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d0f0      	beq.n	8002244 <HAL_RCC_OscConfig+0xc0>
 8002262:	e014      	b.n	800228e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002264:	f7ff f93e 	bl	80014e4 <HAL_GetTick>
 8002268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800226c:	f7ff f93a 	bl	80014e4 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b64      	cmp	r3, #100	; 0x64
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e1f3      	b.n	8002666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800227e:	4b51      	ldr	r3, [pc, #324]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d1f0      	bne.n	800226c <HAL_RCC_OscConfig+0xe8>
 800228a:	e000      	b.n	800228e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800228c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0302 	and.w	r3, r3, #2
 8002296:	2b00      	cmp	r3, #0
 8002298:	d063      	beq.n	8002362 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800229a:	4b4a      	ldr	r3, [pc, #296]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	f003 030c 	and.w	r3, r3, #12
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d00b      	beq.n	80022be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022a6:	4b47      	ldr	r3, [pc, #284]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022ae:	2b08      	cmp	r3, #8
 80022b0:	d11c      	bne.n	80022ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022b2:	4b44      	ldr	r3, [pc, #272]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d116      	bne.n	80022ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022be:	4b41      	ldr	r3, [pc, #260]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d005      	beq.n	80022d6 <HAL_RCC_OscConfig+0x152>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d001      	beq.n	80022d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e1c7      	b.n	8002666 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022d6:	4b3b      	ldr	r3, [pc, #236]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	00db      	lsls	r3, r3, #3
 80022e4:	4937      	ldr	r1, [pc, #220]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ea:	e03a      	b.n	8002362 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d020      	beq.n	8002336 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022f4:	4b34      	ldr	r3, [pc, #208]	; (80023c8 <HAL_RCC_OscConfig+0x244>)
 80022f6:	2201      	movs	r2, #1
 80022f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022fa:	f7ff f8f3 	bl	80014e4 <HAL_GetTick>
 80022fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002300:	e008      	b.n	8002314 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002302:	f7ff f8ef 	bl	80014e4 <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	2b02      	cmp	r3, #2
 800230e:	d901      	bls.n	8002314 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e1a8      	b.n	8002666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002314:	4b2b      	ldr	r3, [pc, #172]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0302 	and.w	r3, r3, #2
 800231c:	2b00      	cmp	r3, #0
 800231e:	d0f0      	beq.n	8002302 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002320:	4b28      	ldr	r3, [pc, #160]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	00db      	lsls	r3, r3, #3
 800232e:	4925      	ldr	r1, [pc, #148]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 8002330:	4313      	orrs	r3, r2
 8002332:	600b      	str	r3, [r1, #0]
 8002334:	e015      	b.n	8002362 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002336:	4b24      	ldr	r3, [pc, #144]	; (80023c8 <HAL_RCC_OscConfig+0x244>)
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800233c:	f7ff f8d2 	bl	80014e4 <HAL_GetTick>
 8002340:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002342:	e008      	b.n	8002356 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002344:	f7ff f8ce 	bl	80014e4 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	2b02      	cmp	r3, #2
 8002350:	d901      	bls.n	8002356 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e187      	b.n	8002666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002356:	4b1b      	ldr	r3, [pc, #108]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d1f0      	bne.n	8002344 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0308 	and.w	r3, r3, #8
 800236a:	2b00      	cmp	r3, #0
 800236c:	d036      	beq.n	80023dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d016      	beq.n	80023a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002376:	4b15      	ldr	r3, [pc, #84]	; (80023cc <HAL_RCC_OscConfig+0x248>)
 8002378:	2201      	movs	r2, #1
 800237a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800237c:	f7ff f8b2 	bl	80014e4 <HAL_GetTick>
 8002380:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002384:	f7ff f8ae 	bl	80014e4 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b02      	cmp	r3, #2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e167      	b.n	8002666 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002396:	4b0b      	ldr	r3, [pc, #44]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 8002398:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d0f0      	beq.n	8002384 <HAL_RCC_OscConfig+0x200>
 80023a2:	e01b      	b.n	80023dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023a4:	4b09      	ldr	r3, [pc, #36]	; (80023cc <HAL_RCC_OscConfig+0x248>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023aa:	f7ff f89b 	bl	80014e4 <HAL_GetTick>
 80023ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023b0:	e00e      	b.n	80023d0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023b2:	f7ff f897 	bl	80014e4 <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d907      	bls.n	80023d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e150      	b.n	8002666 <HAL_RCC_OscConfig+0x4e2>
 80023c4:	40023800 	.word	0x40023800
 80023c8:	42470000 	.word	0x42470000
 80023cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023d0:	4b88      	ldr	r3, [pc, #544]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 80023d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023d4:	f003 0302 	and.w	r3, r3, #2
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d1ea      	bne.n	80023b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0304 	and.w	r3, r3, #4
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	f000 8097 	beq.w	8002518 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023ea:	2300      	movs	r3, #0
 80023ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023ee:	4b81      	ldr	r3, [pc, #516]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 80023f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d10f      	bne.n	800241a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023fa:	2300      	movs	r3, #0
 80023fc:	60bb      	str	r3, [r7, #8]
 80023fe:	4b7d      	ldr	r3, [pc, #500]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 8002400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002402:	4a7c      	ldr	r2, [pc, #496]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 8002404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002408:	6413      	str	r3, [r2, #64]	; 0x40
 800240a:	4b7a      	ldr	r3, [pc, #488]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 800240c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002412:	60bb      	str	r3, [r7, #8]
 8002414:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002416:	2301      	movs	r3, #1
 8002418:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800241a:	4b77      	ldr	r3, [pc, #476]	; (80025f8 <HAL_RCC_OscConfig+0x474>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002422:	2b00      	cmp	r3, #0
 8002424:	d118      	bne.n	8002458 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002426:	4b74      	ldr	r3, [pc, #464]	; (80025f8 <HAL_RCC_OscConfig+0x474>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a73      	ldr	r2, [pc, #460]	; (80025f8 <HAL_RCC_OscConfig+0x474>)
 800242c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002430:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002432:	f7ff f857 	bl	80014e4 <HAL_GetTick>
 8002436:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002438:	e008      	b.n	800244c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800243a:	f7ff f853 	bl	80014e4 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b02      	cmp	r3, #2
 8002446:	d901      	bls.n	800244c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e10c      	b.n	8002666 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800244c:	4b6a      	ldr	r3, [pc, #424]	; (80025f8 <HAL_RCC_OscConfig+0x474>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002454:	2b00      	cmp	r3, #0
 8002456:	d0f0      	beq.n	800243a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d106      	bne.n	800246e <HAL_RCC_OscConfig+0x2ea>
 8002460:	4b64      	ldr	r3, [pc, #400]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 8002462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002464:	4a63      	ldr	r2, [pc, #396]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 8002466:	f043 0301 	orr.w	r3, r3, #1
 800246a:	6713      	str	r3, [r2, #112]	; 0x70
 800246c:	e01c      	b.n	80024a8 <HAL_RCC_OscConfig+0x324>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	2b05      	cmp	r3, #5
 8002474:	d10c      	bne.n	8002490 <HAL_RCC_OscConfig+0x30c>
 8002476:	4b5f      	ldr	r3, [pc, #380]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 8002478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800247a:	4a5e      	ldr	r2, [pc, #376]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 800247c:	f043 0304 	orr.w	r3, r3, #4
 8002480:	6713      	str	r3, [r2, #112]	; 0x70
 8002482:	4b5c      	ldr	r3, [pc, #368]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 8002484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002486:	4a5b      	ldr	r2, [pc, #364]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 8002488:	f043 0301 	orr.w	r3, r3, #1
 800248c:	6713      	str	r3, [r2, #112]	; 0x70
 800248e:	e00b      	b.n	80024a8 <HAL_RCC_OscConfig+0x324>
 8002490:	4b58      	ldr	r3, [pc, #352]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 8002492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002494:	4a57      	ldr	r2, [pc, #348]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 8002496:	f023 0301 	bic.w	r3, r3, #1
 800249a:	6713      	str	r3, [r2, #112]	; 0x70
 800249c:	4b55      	ldr	r3, [pc, #340]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 800249e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a0:	4a54      	ldr	r2, [pc, #336]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 80024a2:	f023 0304 	bic.w	r3, r3, #4
 80024a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d015      	beq.n	80024dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024b0:	f7ff f818 	bl	80014e4 <HAL_GetTick>
 80024b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024b6:	e00a      	b.n	80024ce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024b8:	f7ff f814 	bl	80014e4 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e0cb      	b.n	8002666 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ce:	4b49      	ldr	r3, [pc, #292]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 80024d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d0ee      	beq.n	80024b8 <HAL_RCC_OscConfig+0x334>
 80024da:	e014      	b.n	8002506 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024dc:	f7ff f802 	bl	80014e4 <HAL_GetTick>
 80024e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024e2:	e00a      	b.n	80024fa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024e4:	f7fe fffe 	bl	80014e4 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e0b5      	b.n	8002666 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024fa:	4b3e      	ldr	r3, [pc, #248]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 80024fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1ee      	bne.n	80024e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002506:	7dfb      	ldrb	r3, [r7, #23]
 8002508:	2b01      	cmp	r3, #1
 800250a:	d105      	bne.n	8002518 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800250c:	4b39      	ldr	r3, [pc, #228]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 800250e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002510:	4a38      	ldr	r2, [pc, #224]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 8002512:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002516:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	2b00      	cmp	r3, #0
 800251e:	f000 80a1 	beq.w	8002664 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002522:	4b34      	ldr	r3, [pc, #208]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f003 030c 	and.w	r3, r3, #12
 800252a:	2b08      	cmp	r3, #8
 800252c:	d05c      	beq.n	80025e8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	2b02      	cmp	r3, #2
 8002534:	d141      	bne.n	80025ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002536:	4b31      	ldr	r3, [pc, #196]	; (80025fc <HAL_RCC_OscConfig+0x478>)
 8002538:	2200      	movs	r2, #0
 800253a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800253c:	f7fe ffd2 	bl	80014e4 <HAL_GetTick>
 8002540:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002542:	e008      	b.n	8002556 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002544:	f7fe ffce 	bl	80014e4 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b02      	cmp	r3, #2
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e087      	b.n	8002666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002556:	4b27      	ldr	r3, [pc, #156]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d1f0      	bne.n	8002544 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	69da      	ldr	r2, [r3, #28]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a1b      	ldr	r3, [r3, #32]
 800256a:	431a      	orrs	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002570:	019b      	lsls	r3, r3, #6
 8002572:	431a      	orrs	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002578:	085b      	lsrs	r3, r3, #1
 800257a:	3b01      	subs	r3, #1
 800257c:	041b      	lsls	r3, r3, #16
 800257e:	431a      	orrs	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002584:	061b      	lsls	r3, r3, #24
 8002586:	491b      	ldr	r1, [pc, #108]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 8002588:	4313      	orrs	r3, r2
 800258a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800258c:	4b1b      	ldr	r3, [pc, #108]	; (80025fc <HAL_RCC_OscConfig+0x478>)
 800258e:	2201      	movs	r2, #1
 8002590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002592:	f7fe ffa7 	bl	80014e4 <HAL_GetTick>
 8002596:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002598:	e008      	b.n	80025ac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800259a:	f7fe ffa3 	bl	80014e4 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e05c      	b.n	8002666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ac:	4b11      	ldr	r3, [pc, #68]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d0f0      	beq.n	800259a <HAL_RCC_OscConfig+0x416>
 80025b8:	e054      	b.n	8002664 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ba:	4b10      	ldr	r3, [pc, #64]	; (80025fc <HAL_RCC_OscConfig+0x478>)
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c0:	f7fe ff90 	bl	80014e4 <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025c8:	f7fe ff8c 	bl	80014e4 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e045      	b.n	8002666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025da:	4b06      	ldr	r3, [pc, #24]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d1f0      	bne.n	80025c8 <HAL_RCC_OscConfig+0x444>
 80025e6:	e03d      	b.n	8002664 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d107      	bne.n	8002600 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e038      	b.n	8002666 <HAL_RCC_OscConfig+0x4e2>
 80025f4:	40023800 	.word	0x40023800
 80025f8:	40007000 	.word	0x40007000
 80025fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002600:	4b1b      	ldr	r3, [pc, #108]	; (8002670 <HAL_RCC_OscConfig+0x4ec>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	699b      	ldr	r3, [r3, #24]
 800260a:	2b01      	cmp	r3, #1
 800260c:	d028      	beq.n	8002660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002618:	429a      	cmp	r2, r3
 800261a:	d121      	bne.n	8002660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002626:	429a      	cmp	r2, r3
 8002628:	d11a      	bne.n	8002660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800262a:	68fa      	ldr	r2, [r7, #12]
 800262c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002630:	4013      	ands	r3, r2
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002636:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002638:	4293      	cmp	r3, r2
 800263a:	d111      	bne.n	8002660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002646:	085b      	lsrs	r3, r3, #1
 8002648:	3b01      	subs	r3, #1
 800264a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800264c:	429a      	cmp	r2, r3
 800264e:	d107      	bne.n	8002660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800265a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800265c:	429a      	cmp	r2, r3
 800265e:	d001      	beq.n	8002664 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e000      	b.n	8002666 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3718      	adds	r7, #24
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	40023800 	.word	0x40023800

08002674 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d101      	bne.n	8002688 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e0cc      	b.n	8002822 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002688:	4b68      	ldr	r3, [pc, #416]	; (800282c <HAL_RCC_ClockConfig+0x1b8>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0307 	and.w	r3, r3, #7
 8002690:	683a      	ldr	r2, [r7, #0]
 8002692:	429a      	cmp	r2, r3
 8002694:	d90c      	bls.n	80026b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002696:	4b65      	ldr	r3, [pc, #404]	; (800282c <HAL_RCC_ClockConfig+0x1b8>)
 8002698:	683a      	ldr	r2, [r7, #0]
 800269a:	b2d2      	uxtb	r2, r2
 800269c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800269e:	4b63      	ldr	r3, [pc, #396]	; (800282c <HAL_RCC_ClockConfig+0x1b8>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0307 	and.w	r3, r3, #7
 80026a6:	683a      	ldr	r2, [r7, #0]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d001      	beq.n	80026b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e0b8      	b.n	8002822 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0302 	and.w	r3, r3, #2
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d020      	beq.n	80026fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0304 	and.w	r3, r3, #4
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d005      	beq.n	80026d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026c8:	4b59      	ldr	r3, [pc, #356]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	4a58      	ldr	r2, [pc, #352]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 80026ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80026d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0308 	and.w	r3, r3, #8
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d005      	beq.n	80026ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026e0:	4b53      	ldr	r3, [pc, #332]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	4a52      	ldr	r2, [pc, #328]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 80026e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80026ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026ec:	4b50      	ldr	r3, [pc, #320]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	494d      	ldr	r1, [pc, #308]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	2b00      	cmp	r3, #0
 8002708:	d044      	beq.n	8002794 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d107      	bne.n	8002722 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002712:	4b47      	ldr	r3, [pc, #284]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d119      	bne.n	8002752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e07f      	b.n	8002822 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	2b02      	cmp	r3, #2
 8002728:	d003      	beq.n	8002732 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800272e:	2b03      	cmp	r3, #3
 8002730:	d107      	bne.n	8002742 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002732:	4b3f      	ldr	r3, [pc, #252]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d109      	bne.n	8002752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e06f      	b.n	8002822 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002742:	4b3b      	ldr	r3, [pc, #236]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e067      	b.n	8002822 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002752:	4b37      	ldr	r3, [pc, #220]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f023 0203 	bic.w	r2, r3, #3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	4934      	ldr	r1, [pc, #208]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 8002760:	4313      	orrs	r3, r2
 8002762:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002764:	f7fe febe 	bl	80014e4 <HAL_GetTick>
 8002768:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800276a:	e00a      	b.n	8002782 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800276c:	f7fe feba 	bl	80014e4 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	f241 3288 	movw	r2, #5000	; 0x1388
 800277a:	4293      	cmp	r3, r2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e04f      	b.n	8002822 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002782:	4b2b      	ldr	r3, [pc, #172]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f003 020c 	and.w	r2, r3, #12
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	429a      	cmp	r2, r3
 8002792:	d1eb      	bne.n	800276c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002794:	4b25      	ldr	r3, [pc, #148]	; (800282c <HAL_RCC_ClockConfig+0x1b8>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0307 	and.w	r3, r3, #7
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	429a      	cmp	r2, r3
 80027a0:	d20c      	bcs.n	80027bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027a2:	4b22      	ldr	r3, [pc, #136]	; (800282c <HAL_RCC_ClockConfig+0x1b8>)
 80027a4:	683a      	ldr	r2, [r7, #0]
 80027a6:	b2d2      	uxtb	r2, r2
 80027a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027aa:	4b20      	ldr	r3, [pc, #128]	; (800282c <HAL_RCC_ClockConfig+0x1b8>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0307 	and.w	r3, r3, #7
 80027b2:	683a      	ldr	r2, [r7, #0]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d001      	beq.n	80027bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e032      	b.n	8002822 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0304 	and.w	r3, r3, #4
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d008      	beq.n	80027da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027c8:	4b19      	ldr	r3, [pc, #100]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	4916      	ldr	r1, [pc, #88]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0308 	and.w	r3, r3, #8
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d009      	beq.n	80027fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027e6:	4b12      	ldr	r3, [pc, #72]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	691b      	ldr	r3, [r3, #16]
 80027f2:	00db      	lsls	r3, r3, #3
 80027f4:	490e      	ldr	r1, [pc, #56]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027fa:	f000 f821 	bl	8002840 <HAL_RCC_GetSysClockFreq>
 80027fe:	4602      	mov	r2, r0
 8002800:	4b0b      	ldr	r3, [pc, #44]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	091b      	lsrs	r3, r3, #4
 8002806:	f003 030f 	and.w	r3, r3, #15
 800280a:	490a      	ldr	r1, [pc, #40]	; (8002834 <HAL_RCC_ClockConfig+0x1c0>)
 800280c:	5ccb      	ldrb	r3, [r1, r3]
 800280e:	fa22 f303 	lsr.w	r3, r2, r3
 8002812:	4a09      	ldr	r2, [pc, #36]	; (8002838 <HAL_RCC_ClockConfig+0x1c4>)
 8002814:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002816:	4b09      	ldr	r3, [pc, #36]	; (800283c <HAL_RCC_ClockConfig+0x1c8>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4618      	mov	r0, r3
 800281c:	f7fe fe1e 	bl	800145c <HAL_InitTick>

  return HAL_OK;
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3710      	adds	r7, #16
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	40023c00 	.word	0x40023c00
 8002830:	40023800 	.word	0x40023800
 8002834:	08005818 	.word	0x08005818
 8002838:	20000000 	.word	0x20000000
 800283c:	20000004 	.word	0x20000004

08002840 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002840:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002844:	b094      	sub	sp, #80	; 0x50
 8002846:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002848:	2300      	movs	r3, #0
 800284a:	647b      	str	r3, [r7, #68]	; 0x44
 800284c:	2300      	movs	r3, #0
 800284e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002850:	2300      	movs	r3, #0
 8002852:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002854:	2300      	movs	r3, #0
 8002856:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002858:	4b79      	ldr	r3, [pc, #484]	; (8002a40 <HAL_RCC_GetSysClockFreq+0x200>)
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f003 030c 	and.w	r3, r3, #12
 8002860:	2b08      	cmp	r3, #8
 8002862:	d00d      	beq.n	8002880 <HAL_RCC_GetSysClockFreq+0x40>
 8002864:	2b08      	cmp	r3, #8
 8002866:	f200 80e1 	bhi.w	8002a2c <HAL_RCC_GetSysClockFreq+0x1ec>
 800286a:	2b00      	cmp	r3, #0
 800286c:	d002      	beq.n	8002874 <HAL_RCC_GetSysClockFreq+0x34>
 800286e:	2b04      	cmp	r3, #4
 8002870:	d003      	beq.n	800287a <HAL_RCC_GetSysClockFreq+0x3a>
 8002872:	e0db      	b.n	8002a2c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002874:	4b73      	ldr	r3, [pc, #460]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x204>)
 8002876:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002878:	e0db      	b.n	8002a32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800287a:	4b73      	ldr	r3, [pc, #460]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x208>)
 800287c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800287e:	e0d8      	b.n	8002a32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002880:	4b6f      	ldr	r3, [pc, #444]	; (8002a40 <HAL_RCC_GetSysClockFreq+0x200>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002888:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800288a:	4b6d      	ldr	r3, [pc, #436]	; (8002a40 <HAL_RCC_GetSysClockFreq+0x200>)
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d063      	beq.n	800295e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002896:	4b6a      	ldr	r3, [pc, #424]	; (8002a40 <HAL_RCC_GetSysClockFreq+0x200>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	099b      	lsrs	r3, r3, #6
 800289c:	2200      	movs	r2, #0
 800289e:	63bb      	str	r3, [r7, #56]	; 0x38
 80028a0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80028a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028a8:	633b      	str	r3, [r7, #48]	; 0x30
 80028aa:	2300      	movs	r3, #0
 80028ac:	637b      	str	r3, [r7, #52]	; 0x34
 80028ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80028b2:	4622      	mov	r2, r4
 80028b4:	462b      	mov	r3, r5
 80028b6:	f04f 0000 	mov.w	r0, #0
 80028ba:	f04f 0100 	mov.w	r1, #0
 80028be:	0159      	lsls	r1, r3, #5
 80028c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028c4:	0150      	lsls	r0, r2, #5
 80028c6:	4602      	mov	r2, r0
 80028c8:	460b      	mov	r3, r1
 80028ca:	4621      	mov	r1, r4
 80028cc:	1a51      	subs	r1, r2, r1
 80028ce:	6139      	str	r1, [r7, #16]
 80028d0:	4629      	mov	r1, r5
 80028d2:	eb63 0301 	sbc.w	r3, r3, r1
 80028d6:	617b      	str	r3, [r7, #20]
 80028d8:	f04f 0200 	mov.w	r2, #0
 80028dc:	f04f 0300 	mov.w	r3, #0
 80028e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80028e4:	4659      	mov	r1, fp
 80028e6:	018b      	lsls	r3, r1, #6
 80028e8:	4651      	mov	r1, sl
 80028ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028ee:	4651      	mov	r1, sl
 80028f0:	018a      	lsls	r2, r1, #6
 80028f2:	4651      	mov	r1, sl
 80028f4:	ebb2 0801 	subs.w	r8, r2, r1
 80028f8:	4659      	mov	r1, fp
 80028fa:	eb63 0901 	sbc.w	r9, r3, r1
 80028fe:	f04f 0200 	mov.w	r2, #0
 8002902:	f04f 0300 	mov.w	r3, #0
 8002906:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800290a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800290e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002912:	4690      	mov	r8, r2
 8002914:	4699      	mov	r9, r3
 8002916:	4623      	mov	r3, r4
 8002918:	eb18 0303 	adds.w	r3, r8, r3
 800291c:	60bb      	str	r3, [r7, #8]
 800291e:	462b      	mov	r3, r5
 8002920:	eb49 0303 	adc.w	r3, r9, r3
 8002924:	60fb      	str	r3, [r7, #12]
 8002926:	f04f 0200 	mov.w	r2, #0
 800292a:	f04f 0300 	mov.w	r3, #0
 800292e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002932:	4629      	mov	r1, r5
 8002934:	024b      	lsls	r3, r1, #9
 8002936:	4621      	mov	r1, r4
 8002938:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800293c:	4621      	mov	r1, r4
 800293e:	024a      	lsls	r2, r1, #9
 8002940:	4610      	mov	r0, r2
 8002942:	4619      	mov	r1, r3
 8002944:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002946:	2200      	movs	r2, #0
 8002948:	62bb      	str	r3, [r7, #40]	; 0x28
 800294a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800294c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002950:	f7fd fc96 	bl	8000280 <__aeabi_uldivmod>
 8002954:	4602      	mov	r2, r0
 8002956:	460b      	mov	r3, r1
 8002958:	4613      	mov	r3, r2
 800295a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800295c:	e058      	b.n	8002a10 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800295e:	4b38      	ldr	r3, [pc, #224]	; (8002a40 <HAL_RCC_GetSysClockFreq+0x200>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	099b      	lsrs	r3, r3, #6
 8002964:	2200      	movs	r2, #0
 8002966:	4618      	mov	r0, r3
 8002968:	4611      	mov	r1, r2
 800296a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800296e:	623b      	str	r3, [r7, #32]
 8002970:	2300      	movs	r3, #0
 8002972:	627b      	str	r3, [r7, #36]	; 0x24
 8002974:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002978:	4642      	mov	r2, r8
 800297a:	464b      	mov	r3, r9
 800297c:	f04f 0000 	mov.w	r0, #0
 8002980:	f04f 0100 	mov.w	r1, #0
 8002984:	0159      	lsls	r1, r3, #5
 8002986:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800298a:	0150      	lsls	r0, r2, #5
 800298c:	4602      	mov	r2, r0
 800298e:	460b      	mov	r3, r1
 8002990:	4641      	mov	r1, r8
 8002992:	ebb2 0a01 	subs.w	sl, r2, r1
 8002996:	4649      	mov	r1, r9
 8002998:	eb63 0b01 	sbc.w	fp, r3, r1
 800299c:	f04f 0200 	mov.w	r2, #0
 80029a0:	f04f 0300 	mov.w	r3, #0
 80029a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80029a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80029ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80029b0:	ebb2 040a 	subs.w	r4, r2, sl
 80029b4:	eb63 050b 	sbc.w	r5, r3, fp
 80029b8:	f04f 0200 	mov.w	r2, #0
 80029bc:	f04f 0300 	mov.w	r3, #0
 80029c0:	00eb      	lsls	r3, r5, #3
 80029c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029c6:	00e2      	lsls	r2, r4, #3
 80029c8:	4614      	mov	r4, r2
 80029ca:	461d      	mov	r5, r3
 80029cc:	4643      	mov	r3, r8
 80029ce:	18e3      	adds	r3, r4, r3
 80029d0:	603b      	str	r3, [r7, #0]
 80029d2:	464b      	mov	r3, r9
 80029d4:	eb45 0303 	adc.w	r3, r5, r3
 80029d8:	607b      	str	r3, [r7, #4]
 80029da:	f04f 0200 	mov.w	r2, #0
 80029de:	f04f 0300 	mov.w	r3, #0
 80029e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029e6:	4629      	mov	r1, r5
 80029e8:	028b      	lsls	r3, r1, #10
 80029ea:	4621      	mov	r1, r4
 80029ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029f0:	4621      	mov	r1, r4
 80029f2:	028a      	lsls	r2, r1, #10
 80029f4:	4610      	mov	r0, r2
 80029f6:	4619      	mov	r1, r3
 80029f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029fa:	2200      	movs	r2, #0
 80029fc:	61bb      	str	r3, [r7, #24]
 80029fe:	61fa      	str	r2, [r7, #28]
 8002a00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a04:	f7fd fc3c 	bl	8000280 <__aeabi_uldivmod>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a10:	4b0b      	ldr	r3, [pc, #44]	; (8002a40 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	0c1b      	lsrs	r3, r3, #16
 8002a16:	f003 0303 	and.w	r3, r3, #3
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	005b      	lsls	r3, r3, #1
 8002a1e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002a20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a28:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a2a:	e002      	b.n	8002a32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a2c:	4b05      	ldr	r3, [pc, #20]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a2e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3750      	adds	r7, #80	; 0x50
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a3e:	bf00      	nop
 8002a40:	40023800 	.word	0x40023800
 8002a44:	00f42400 	.word	0x00f42400
 8002a48:	007a1200 	.word	0x007a1200

08002a4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a50:	4b03      	ldr	r3, [pc, #12]	; (8002a60 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a52:	681b      	ldr	r3, [r3, #0]
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	20000000 	.word	0x20000000

08002a64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a68:	f7ff fff0 	bl	8002a4c <HAL_RCC_GetHCLKFreq>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	4b05      	ldr	r3, [pc, #20]	; (8002a84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	0a9b      	lsrs	r3, r3, #10
 8002a74:	f003 0307 	and.w	r3, r3, #7
 8002a78:	4903      	ldr	r1, [pc, #12]	; (8002a88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a7a:	5ccb      	ldrb	r3, [r1, r3]
 8002a7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	40023800 	.word	0x40023800
 8002a88:	08005828 	.word	0x08005828

08002a8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002a90:	f7ff ffdc 	bl	8002a4c <HAL_RCC_GetHCLKFreq>
 8002a94:	4602      	mov	r2, r0
 8002a96:	4b05      	ldr	r3, [pc, #20]	; (8002aac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	0b5b      	lsrs	r3, r3, #13
 8002a9c:	f003 0307 	and.w	r3, r3, #7
 8002aa0:	4903      	ldr	r1, [pc, #12]	; (8002ab0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002aa2:	5ccb      	ldrb	r3, [r1, r3]
 8002aa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	40023800 	.word	0x40023800
 8002ab0:	08005828 	.word	0x08005828

08002ab4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d101      	bne.n	8002ac6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e041      	b.n	8002b4a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d106      	bne.n	8002ae0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f7fe face 	bl	800107c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2202      	movs	r2, #2
 8002ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	3304      	adds	r3, #4
 8002af0:	4619      	mov	r1, r3
 8002af2:	4610      	mov	r0, r2
 8002af4:	f000 fd94 	bl	8003620 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b082      	sub	sp, #8
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d101      	bne.n	8002b64 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e041      	b.n	8002be8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d106      	bne.n	8002b7e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f000 f839 	bl	8002bf0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2202      	movs	r2, #2
 8002b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	3304      	adds	r3, #4
 8002b8e:	4619      	mov	r1, r3
 8002b90:	4610      	mov	r0, r2
 8002b92:	f000 fd45 	bl	8003620 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2201      	movs	r2, #1
 8002bba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2201      	movs	r2, #1
 8002be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002be6:	2300      	movs	r3, #0
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3708      	adds	r7, #8
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002bf8:	bf00      	nop
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e041      	b.n	8002c9a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d106      	bne.n	8002c30 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 f839 	bl	8002ca2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2202      	movs	r2, #2
 8002c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	3304      	adds	r3, #4
 8002c40:	4619      	mov	r1, r3
 8002c42:	4610      	mov	r0, r2
 8002c44:	f000 fcec 	bl	8003620 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3708      	adds	r7, #8
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002ca2:	b480      	push	{r7}
 8002ca4:	b083      	sub	sp, #12
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002caa:	bf00      	nop
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
	...

08002cb8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d104      	bne.n	8002cd6 <HAL_TIM_IC_Start_IT+0x1e>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	e013      	b.n	8002cfe <HAL_TIM_IC_Start_IT+0x46>
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	2b04      	cmp	r3, #4
 8002cda:	d104      	bne.n	8002ce6 <HAL_TIM_IC_Start_IT+0x2e>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	e00b      	b.n	8002cfe <HAL_TIM_IC_Start_IT+0x46>
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	2b08      	cmp	r3, #8
 8002cea:	d104      	bne.n	8002cf6 <HAL_TIM_IC_Start_IT+0x3e>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	e003      	b.n	8002cfe <HAL_TIM_IC_Start_IT+0x46>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d104      	bne.n	8002d10 <HAL_TIM_IC_Start_IT+0x58>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	e013      	b.n	8002d38 <HAL_TIM_IC_Start_IT+0x80>
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	2b04      	cmp	r3, #4
 8002d14:	d104      	bne.n	8002d20 <HAL_TIM_IC_Start_IT+0x68>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	e00b      	b.n	8002d38 <HAL_TIM_IC_Start_IT+0x80>
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	2b08      	cmp	r3, #8
 8002d24:	d104      	bne.n	8002d30 <HAL_TIM_IC_Start_IT+0x78>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	e003      	b.n	8002d38 <HAL_TIM_IC_Start_IT+0x80>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d3a:	7bbb      	ldrb	r3, [r7, #14]
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d102      	bne.n	8002d46 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002d40:	7b7b      	ldrb	r3, [r7, #13]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d001      	beq.n	8002d4a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e0c2      	b.n	8002ed0 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d104      	bne.n	8002d5a <HAL_TIM_IC_Start_IT+0xa2>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2202      	movs	r2, #2
 8002d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d58:	e013      	b.n	8002d82 <HAL_TIM_IC_Start_IT+0xca>
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	2b04      	cmp	r3, #4
 8002d5e:	d104      	bne.n	8002d6a <HAL_TIM_IC_Start_IT+0xb2>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2202      	movs	r2, #2
 8002d64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d68:	e00b      	b.n	8002d82 <HAL_TIM_IC_Start_IT+0xca>
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	2b08      	cmp	r3, #8
 8002d6e:	d104      	bne.n	8002d7a <HAL_TIM_IC_Start_IT+0xc2>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2202      	movs	r2, #2
 8002d74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d78:	e003      	b.n	8002d82 <HAL_TIM_IC_Start_IT+0xca>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2202      	movs	r2, #2
 8002d7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d104      	bne.n	8002d92 <HAL_TIM_IC_Start_IT+0xda>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2202      	movs	r2, #2
 8002d8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d90:	e013      	b.n	8002dba <HAL_TIM_IC_Start_IT+0x102>
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	2b04      	cmp	r3, #4
 8002d96:	d104      	bne.n	8002da2 <HAL_TIM_IC_Start_IT+0xea>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2202      	movs	r2, #2
 8002d9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002da0:	e00b      	b.n	8002dba <HAL_TIM_IC_Start_IT+0x102>
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	2b08      	cmp	r3, #8
 8002da6:	d104      	bne.n	8002db2 <HAL_TIM_IC_Start_IT+0xfa>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2202      	movs	r2, #2
 8002dac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002db0:	e003      	b.n	8002dba <HAL_TIM_IC_Start_IT+0x102>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2202      	movs	r2, #2
 8002db6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	2b0c      	cmp	r3, #12
 8002dbe:	d841      	bhi.n	8002e44 <HAL_TIM_IC_Start_IT+0x18c>
 8002dc0:	a201      	add	r2, pc, #4	; (adr r2, 8002dc8 <HAL_TIM_IC_Start_IT+0x110>)
 8002dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dc6:	bf00      	nop
 8002dc8:	08002dfd 	.word	0x08002dfd
 8002dcc:	08002e45 	.word	0x08002e45
 8002dd0:	08002e45 	.word	0x08002e45
 8002dd4:	08002e45 	.word	0x08002e45
 8002dd8:	08002e0f 	.word	0x08002e0f
 8002ddc:	08002e45 	.word	0x08002e45
 8002de0:	08002e45 	.word	0x08002e45
 8002de4:	08002e45 	.word	0x08002e45
 8002de8:	08002e21 	.word	0x08002e21
 8002dec:	08002e45 	.word	0x08002e45
 8002df0:	08002e45 	.word	0x08002e45
 8002df4:	08002e45 	.word	0x08002e45
 8002df8:	08002e33 	.word	0x08002e33
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68da      	ldr	r2, [r3, #12]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f042 0202 	orr.w	r2, r2, #2
 8002e0a:	60da      	str	r2, [r3, #12]
      break;
 8002e0c:	e01d      	b.n	8002e4a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	68da      	ldr	r2, [r3, #12]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f042 0204 	orr.w	r2, r2, #4
 8002e1c:	60da      	str	r2, [r3, #12]
      break;
 8002e1e:	e014      	b.n	8002e4a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	68da      	ldr	r2, [r3, #12]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f042 0208 	orr.w	r2, r2, #8
 8002e2e:	60da      	str	r2, [r3, #12]
      break;
 8002e30:	e00b      	b.n	8002e4a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68da      	ldr	r2, [r3, #12]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f042 0210 	orr.w	r2, r2, #16
 8002e40:	60da      	str	r2, [r3, #12]
      break;
 8002e42:	e002      	b.n	8002e4a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	73fb      	strb	r3, [r7, #15]
      break;
 8002e48:	bf00      	nop
  }

  if (status == HAL_OK)
 8002e4a:	7bfb      	ldrb	r3, [r7, #15]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d13e      	bne.n	8002ece <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2201      	movs	r2, #1
 8002e56:	6839      	ldr	r1, [r7, #0]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f000 ffa5 	bl	8003da8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a1d      	ldr	r2, [pc, #116]	; (8002ed8 <HAL_TIM_IC_Start_IT+0x220>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d018      	beq.n	8002e9a <HAL_TIM_IC_Start_IT+0x1e2>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e70:	d013      	beq.n	8002e9a <HAL_TIM_IC_Start_IT+0x1e2>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a19      	ldr	r2, [pc, #100]	; (8002edc <HAL_TIM_IC_Start_IT+0x224>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d00e      	beq.n	8002e9a <HAL_TIM_IC_Start_IT+0x1e2>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a17      	ldr	r2, [pc, #92]	; (8002ee0 <HAL_TIM_IC_Start_IT+0x228>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d009      	beq.n	8002e9a <HAL_TIM_IC_Start_IT+0x1e2>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a16      	ldr	r2, [pc, #88]	; (8002ee4 <HAL_TIM_IC_Start_IT+0x22c>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d004      	beq.n	8002e9a <HAL_TIM_IC_Start_IT+0x1e2>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a14      	ldr	r2, [pc, #80]	; (8002ee8 <HAL_TIM_IC_Start_IT+0x230>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d111      	bne.n	8002ebe <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f003 0307 	and.w	r3, r3, #7
 8002ea4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	2b06      	cmp	r3, #6
 8002eaa:	d010      	beq.n	8002ece <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f042 0201 	orr.w	r2, r2, #1
 8002eba:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ebc:	e007      	b.n	8002ece <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f042 0201 	orr.w	r2, r2, #1
 8002ecc:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3710      	adds	r7, #16
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	40010000 	.word	0x40010000
 8002edc:	40000400 	.word	0x40000400
 8002ee0:	40000800 	.word	0x40000800
 8002ee4:	40000c00 	.word	0x40000c00
 8002ee8:	40014000 	.word	0x40014000

08002eec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d122      	bne.n	8002f48 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d11b      	bne.n	8002f48 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f06f 0202 	mvn.w	r2, #2
 8002f18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	f003 0303 	and.w	r3, r3, #3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d003      	beq.n	8002f36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f7fd fc28 	bl	8000784 <HAL_TIM_IC_CaptureCallback>
 8002f34:	e005      	b.n	8002f42 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 fb54 	bl	80035e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f000 fb5b 	bl	80035f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	f003 0304 	and.w	r3, r3, #4
 8002f52:	2b04      	cmp	r3, #4
 8002f54:	d122      	bne.n	8002f9c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	f003 0304 	and.w	r3, r3, #4
 8002f60:	2b04      	cmp	r3, #4
 8002f62:	d11b      	bne.n	8002f9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f06f 0204 	mvn.w	r2, #4
 8002f6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2202      	movs	r2, #2
 8002f72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d003      	beq.n	8002f8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f7fd fbfe 	bl	8000784 <HAL_TIM_IC_CaptureCallback>
 8002f88:	e005      	b.n	8002f96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 fb2a 	bl	80035e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f000 fb31 	bl	80035f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	f003 0308 	and.w	r3, r3, #8
 8002fa6:	2b08      	cmp	r3, #8
 8002fa8:	d122      	bne.n	8002ff0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	f003 0308 	and.w	r3, r3, #8
 8002fb4:	2b08      	cmp	r3, #8
 8002fb6:	d11b      	bne.n	8002ff0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f06f 0208 	mvn.w	r2, #8
 8002fc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2204      	movs	r2, #4
 8002fc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	69db      	ldr	r3, [r3, #28]
 8002fce:	f003 0303 	and.w	r3, r3, #3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f7fd fbd4 	bl	8000784 <HAL_TIM_IC_CaptureCallback>
 8002fdc:	e005      	b.n	8002fea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 fb00 	bl	80035e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f000 fb07 	bl	80035f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	f003 0310 	and.w	r3, r3, #16
 8002ffa:	2b10      	cmp	r3, #16
 8002ffc:	d122      	bne.n	8003044 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	f003 0310 	and.w	r3, r3, #16
 8003008:	2b10      	cmp	r3, #16
 800300a:	d11b      	bne.n	8003044 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f06f 0210 	mvn.w	r2, #16
 8003014:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2208      	movs	r2, #8
 800301a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003026:	2b00      	cmp	r3, #0
 8003028:	d003      	beq.n	8003032 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f7fd fbaa 	bl	8000784 <HAL_TIM_IC_CaptureCallback>
 8003030:	e005      	b.n	800303e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f000 fad6 	bl	80035e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f000 fadd 	bl	80035f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	2b01      	cmp	r3, #1
 8003050:	d10e      	bne.n	8003070 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	f003 0301 	and.w	r3, r3, #1
 800305c:	2b01      	cmp	r3, #1
 800305e:	d107      	bne.n	8003070 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f06f 0201 	mvn.w	r2, #1
 8003068:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 fab0 	bl	80035d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800307a:	2b80      	cmp	r3, #128	; 0x80
 800307c:	d10e      	bne.n	800309c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003088:	2b80      	cmp	r3, #128	; 0x80
 800308a:	d107      	bne.n	800309c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 ff24 	bl	8003ee4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030a6:	2b40      	cmp	r3, #64	; 0x40
 80030a8:	d10e      	bne.n	80030c8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030b4:	2b40      	cmp	r3, #64	; 0x40
 80030b6:	d107      	bne.n	80030c8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80030c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f000 faa2 	bl	800360c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	f003 0320 	and.w	r3, r3, #32
 80030d2:	2b20      	cmp	r3, #32
 80030d4:	d10e      	bne.n	80030f4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	f003 0320 	and.w	r3, r3, #32
 80030e0:	2b20      	cmp	r3, #32
 80030e2:	d107      	bne.n	80030f4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f06f 0220 	mvn.w	r2, #32
 80030ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 feee 	bl	8003ed0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030f4:	bf00      	nop
 80030f6:	3708      	adds	r7, #8
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b086      	sub	sp, #24
 8003100:	af00      	add	r7, sp, #0
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	60b9      	str	r1, [r7, #8]
 8003106:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003108:	2300      	movs	r3, #0
 800310a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003112:	2b01      	cmp	r3, #1
 8003114:	d101      	bne.n	800311a <HAL_TIM_IC_ConfigChannel+0x1e>
 8003116:	2302      	movs	r3, #2
 8003118:	e088      	b.n	800322c <HAL_TIM_IC_ConfigChannel+0x130>
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2201      	movs	r2, #1
 800311e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d11b      	bne.n	8003160 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6818      	ldr	r0, [r3, #0]
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	6819      	ldr	r1, [r3, #0]
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	685a      	ldr	r2, [r3, #4]
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	f000 fc7e 	bl	8003a38 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	699a      	ldr	r2, [r3, #24]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f022 020c 	bic.w	r2, r2, #12
 800314a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	6999      	ldr	r1, [r3, #24]
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	689a      	ldr	r2, [r3, #8]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	430a      	orrs	r2, r1
 800315c:	619a      	str	r2, [r3, #24]
 800315e:	e060      	b.n	8003222 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2b04      	cmp	r3, #4
 8003164:	d11c      	bne.n	80031a0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6818      	ldr	r0, [r3, #0]
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	6819      	ldr	r1, [r3, #0]
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	685a      	ldr	r2, [r3, #4]
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	f000 fcf6 	bl	8003b66 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	699a      	ldr	r2, [r3, #24]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003188:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	6999      	ldr	r1, [r3, #24]
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	021a      	lsls	r2, r3, #8
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	430a      	orrs	r2, r1
 800319c:	619a      	str	r2, [r3, #24]
 800319e:	e040      	b.n	8003222 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2b08      	cmp	r3, #8
 80031a4:	d11b      	bne.n	80031de <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6818      	ldr	r0, [r3, #0]
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	6819      	ldr	r1, [r3, #0]
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	685a      	ldr	r2, [r3, #4]
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	f000 fd43 	bl	8003c40 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	69da      	ldr	r2, [r3, #28]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f022 020c 	bic.w	r2, r2, #12
 80031c8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	69d9      	ldr	r1, [r3, #28]
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	689a      	ldr	r2, [r3, #8]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	430a      	orrs	r2, r1
 80031da:	61da      	str	r2, [r3, #28]
 80031dc:	e021      	b.n	8003222 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2b0c      	cmp	r3, #12
 80031e2:	d11c      	bne.n	800321e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6818      	ldr	r0, [r3, #0]
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	6819      	ldr	r1, [r3, #0]
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	685a      	ldr	r2, [r3, #4]
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	f000 fd60 	bl	8003cb8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	69da      	ldr	r2, [r3, #28]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003206:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	69d9      	ldr	r1, [r3, #28]
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	021a      	lsls	r2, r3, #8
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	430a      	orrs	r2, r1
 800321a:	61da      	str	r2, [r3, #28]
 800321c:	e001      	b.n	8003222 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800322a:	7dfb      	ldrb	r3, [r7, #23]
}
 800322c:	4618      	mov	r0, r3
 800322e:	3718      	adds	r7, #24
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b086      	sub	sp, #24
 8003238:	af00      	add	r7, sp, #0
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003240:	2300      	movs	r3, #0
 8003242:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800324a:	2b01      	cmp	r3, #1
 800324c:	d101      	bne.n	8003252 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800324e:	2302      	movs	r3, #2
 8003250:	e0ae      	b.n	80033b0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2201      	movs	r2, #1
 8003256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2b0c      	cmp	r3, #12
 800325e:	f200 809f 	bhi.w	80033a0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003262:	a201      	add	r2, pc, #4	; (adr r2, 8003268 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003268:	0800329d 	.word	0x0800329d
 800326c:	080033a1 	.word	0x080033a1
 8003270:	080033a1 	.word	0x080033a1
 8003274:	080033a1 	.word	0x080033a1
 8003278:	080032dd 	.word	0x080032dd
 800327c:	080033a1 	.word	0x080033a1
 8003280:	080033a1 	.word	0x080033a1
 8003284:	080033a1 	.word	0x080033a1
 8003288:	0800331f 	.word	0x0800331f
 800328c:	080033a1 	.word	0x080033a1
 8003290:	080033a1 	.word	0x080033a1
 8003294:	080033a1 	.word	0x080033a1
 8003298:	0800335f 	.word	0x0800335f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68b9      	ldr	r1, [r7, #8]
 80032a2:	4618      	mov	r0, r3
 80032a4:	f000 fa3c 	bl	8003720 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	699a      	ldr	r2, [r3, #24]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f042 0208 	orr.w	r2, r2, #8
 80032b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	699a      	ldr	r2, [r3, #24]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f022 0204 	bic.w	r2, r2, #4
 80032c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	6999      	ldr	r1, [r3, #24]
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	691a      	ldr	r2, [r3, #16]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	430a      	orrs	r2, r1
 80032d8:	619a      	str	r2, [r3, #24]
      break;
 80032da:	e064      	b.n	80033a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68b9      	ldr	r1, [r7, #8]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f000 fa82 	bl	80037ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	699a      	ldr	r2, [r3, #24]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	699a      	ldr	r2, [r3, #24]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003306:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	6999      	ldr	r1, [r3, #24]
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	021a      	lsls	r2, r3, #8
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	430a      	orrs	r2, r1
 800331a:	619a      	str	r2, [r3, #24]
      break;
 800331c:	e043      	b.n	80033a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	68b9      	ldr	r1, [r7, #8]
 8003324:	4618      	mov	r0, r3
 8003326:	f000 facd 	bl	80038c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	69da      	ldr	r2, [r3, #28]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f042 0208 	orr.w	r2, r2, #8
 8003338:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	69da      	ldr	r2, [r3, #28]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f022 0204 	bic.w	r2, r2, #4
 8003348:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	69d9      	ldr	r1, [r3, #28]
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	691a      	ldr	r2, [r3, #16]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	430a      	orrs	r2, r1
 800335a:	61da      	str	r2, [r3, #28]
      break;
 800335c:	e023      	b.n	80033a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	68b9      	ldr	r1, [r7, #8]
 8003364:	4618      	mov	r0, r3
 8003366:	f000 fb17 	bl	8003998 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	69da      	ldr	r2, [r3, #28]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003378:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	69da      	ldr	r2, [r3, #28]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003388:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	69d9      	ldr	r1, [r3, #28]
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	691b      	ldr	r3, [r3, #16]
 8003394:	021a      	lsls	r2, r3, #8
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	430a      	orrs	r2, r1
 800339c:	61da      	str	r2, [r3, #28]
      break;
 800339e:	e002      	b.n	80033a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	75fb      	strb	r3, [r7, #23]
      break;
 80033a4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80033ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3718      	adds	r7, #24
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033c2:	2300      	movs	r3, #0
 80033c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d101      	bne.n	80033d4 <HAL_TIM_ConfigClockSource+0x1c>
 80033d0:	2302      	movs	r3, #2
 80033d2:	e0b4      	b.n	800353e <HAL_TIM_ConfigClockSource+0x186>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2202      	movs	r2, #2
 80033e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80033f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68ba      	ldr	r2, [r7, #8]
 8003402:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800340c:	d03e      	beq.n	800348c <HAL_TIM_ConfigClockSource+0xd4>
 800340e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003412:	f200 8087 	bhi.w	8003524 <HAL_TIM_ConfigClockSource+0x16c>
 8003416:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800341a:	f000 8086 	beq.w	800352a <HAL_TIM_ConfigClockSource+0x172>
 800341e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003422:	d87f      	bhi.n	8003524 <HAL_TIM_ConfigClockSource+0x16c>
 8003424:	2b70      	cmp	r3, #112	; 0x70
 8003426:	d01a      	beq.n	800345e <HAL_TIM_ConfigClockSource+0xa6>
 8003428:	2b70      	cmp	r3, #112	; 0x70
 800342a:	d87b      	bhi.n	8003524 <HAL_TIM_ConfigClockSource+0x16c>
 800342c:	2b60      	cmp	r3, #96	; 0x60
 800342e:	d050      	beq.n	80034d2 <HAL_TIM_ConfigClockSource+0x11a>
 8003430:	2b60      	cmp	r3, #96	; 0x60
 8003432:	d877      	bhi.n	8003524 <HAL_TIM_ConfigClockSource+0x16c>
 8003434:	2b50      	cmp	r3, #80	; 0x50
 8003436:	d03c      	beq.n	80034b2 <HAL_TIM_ConfigClockSource+0xfa>
 8003438:	2b50      	cmp	r3, #80	; 0x50
 800343a:	d873      	bhi.n	8003524 <HAL_TIM_ConfigClockSource+0x16c>
 800343c:	2b40      	cmp	r3, #64	; 0x40
 800343e:	d058      	beq.n	80034f2 <HAL_TIM_ConfigClockSource+0x13a>
 8003440:	2b40      	cmp	r3, #64	; 0x40
 8003442:	d86f      	bhi.n	8003524 <HAL_TIM_ConfigClockSource+0x16c>
 8003444:	2b30      	cmp	r3, #48	; 0x30
 8003446:	d064      	beq.n	8003512 <HAL_TIM_ConfigClockSource+0x15a>
 8003448:	2b30      	cmp	r3, #48	; 0x30
 800344a:	d86b      	bhi.n	8003524 <HAL_TIM_ConfigClockSource+0x16c>
 800344c:	2b20      	cmp	r3, #32
 800344e:	d060      	beq.n	8003512 <HAL_TIM_ConfigClockSource+0x15a>
 8003450:	2b20      	cmp	r3, #32
 8003452:	d867      	bhi.n	8003524 <HAL_TIM_ConfigClockSource+0x16c>
 8003454:	2b00      	cmp	r3, #0
 8003456:	d05c      	beq.n	8003512 <HAL_TIM_ConfigClockSource+0x15a>
 8003458:	2b10      	cmp	r3, #16
 800345a:	d05a      	beq.n	8003512 <HAL_TIM_ConfigClockSource+0x15a>
 800345c:	e062      	b.n	8003524 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6818      	ldr	r0, [r3, #0]
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	6899      	ldr	r1, [r3, #8]
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	685a      	ldr	r2, [r3, #4]
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	f000 fc7b 	bl	8003d68 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003480:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68ba      	ldr	r2, [r7, #8]
 8003488:	609a      	str	r2, [r3, #8]
      break;
 800348a:	e04f      	b.n	800352c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6818      	ldr	r0, [r3, #0]
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	6899      	ldr	r1, [r3, #8]
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	685a      	ldr	r2, [r3, #4]
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	f000 fc64 	bl	8003d68 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	689a      	ldr	r2, [r3, #8]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034ae:	609a      	str	r2, [r3, #8]
      break;
 80034b0:	e03c      	b.n	800352c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6818      	ldr	r0, [r3, #0]
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	6859      	ldr	r1, [r3, #4]
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	461a      	mov	r2, r3
 80034c0:	f000 fb22 	bl	8003b08 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2150      	movs	r1, #80	; 0x50
 80034ca:	4618      	mov	r0, r3
 80034cc:	f000 fc31 	bl	8003d32 <TIM_ITRx_SetConfig>
      break;
 80034d0:	e02c      	b.n	800352c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6818      	ldr	r0, [r3, #0]
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	6859      	ldr	r1, [r3, #4]
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	461a      	mov	r2, r3
 80034e0:	f000 fb7e 	bl	8003be0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2160      	movs	r1, #96	; 0x60
 80034ea:	4618      	mov	r0, r3
 80034ec:	f000 fc21 	bl	8003d32 <TIM_ITRx_SetConfig>
      break;
 80034f0:	e01c      	b.n	800352c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6818      	ldr	r0, [r3, #0]
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	6859      	ldr	r1, [r3, #4]
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	461a      	mov	r2, r3
 8003500:	f000 fb02 	bl	8003b08 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2140      	movs	r1, #64	; 0x40
 800350a:	4618      	mov	r0, r3
 800350c:	f000 fc11 	bl	8003d32 <TIM_ITRx_SetConfig>
      break;
 8003510:	e00c      	b.n	800352c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4619      	mov	r1, r3
 800351c:	4610      	mov	r0, r2
 800351e:	f000 fc08 	bl	8003d32 <TIM_ITRx_SetConfig>
      break;
 8003522:	e003      	b.n	800352c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	73fb      	strb	r3, [r7, #15]
      break;
 8003528:	e000      	b.n	800352c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800352a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800353c:	7bfb      	ldrb	r3, [r7, #15]
}
 800353e:	4618      	mov	r0, r3
 8003540:	3710      	adds	r7, #16
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
	...

08003548 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003548:	b480      	push	{r7}
 800354a:	b085      	sub	sp, #20
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003552:	2300      	movs	r3, #0
 8003554:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	2b0c      	cmp	r3, #12
 800355a:	d831      	bhi.n	80035c0 <HAL_TIM_ReadCapturedValue+0x78>
 800355c:	a201      	add	r2, pc, #4	; (adr r2, 8003564 <HAL_TIM_ReadCapturedValue+0x1c>)
 800355e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003562:	bf00      	nop
 8003564:	08003599 	.word	0x08003599
 8003568:	080035c1 	.word	0x080035c1
 800356c:	080035c1 	.word	0x080035c1
 8003570:	080035c1 	.word	0x080035c1
 8003574:	080035a3 	.word	0x080035a3
 8003578:	080035c1 	.word	0x080035c1
 800357c:	080035c1 	.word	0x080035c1
 8003580:	080035c1 	.word	0x080035c1
 8003584:	080035ad 	.word	0x080035ad
 8003588:	080035c1 	.word	0x080035c1
 800358c:	080035c1 	.word	0x080035c1
 8003590:	080035c1 	.word	0x080035c1
 8003594:	080035b7 	.word	0x080035b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800359e:	60fb      	str	r3, [r7, #12]

      break;
 80035a0:	e00f      	b.n	80035c2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a8:	60fb      	str	r3, [r7, #12]

      break;
 80035aa:	e00a      	b.n	80035c2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035b2:	60fb      	str	r3, [r7, #12]

      break;
 80035b4:	e005      	b.n	80035c2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035bc:	60fb      	str	r3, [r7, #12]

      break;
 80035be:	e000      	b.n	80035c2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80035c0:	bf00      	nop
  }

  return tmpreg;
 80035c2:	68fb      	ldr	r3, [r7, #12]
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3714      	adds	r7, #20
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80035d8:	bf00      	nop
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035ec:	bf00      	nop
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003600:	bf00      	nop
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003614:	bf00      	nop
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	4a34      	ldr	r2, [pc, #208]	; (8003704 <TIM_Base_SetConfig+0xe4>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d00f      	beq.n	8003658 <TIM_Base_SetConfig+0x38>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800363e:	d00b      	beq.n	8003658 <TIM_Base_SetConfig+0x38>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4a31      	ldr	r2, [pc, #196]	; (8003708 <TIM_Base_SetConfig+0xe8>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d007      	beq.n	8003658 <TIM_Base_SetConfig+0x38>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4a30      	ldr	r2, [pc, #192]	; (800370c <TIM_Base_SetConfig+0xec>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d003      	beq.n	8003658 <TIM_Base_SetConfig+0x38>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a2f      	ldr	r2, [pc, #188]	; (8003710 <TIM_Base_SetConfig+0xf0>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d108      	bne.n	800366a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800365e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	68fa      	ldr	r2, [r7, #12]
 8003666:	4313      	orrs	r3, r2
 8003668:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a25      	ldr	r2, [pc, #148]	; (8003704 <TIM_Base_SetConfig+0xe4>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d01b      	beq.n	80036aa <TIM_Base_SetConfig+0x8a>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003678:	d017      	beq.n	80036aa <TIM_Base_SetConfig+0x8a>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a22      	ldr	r2, [pc, #136]	; (8003708 <TIM_Base_SetConfig+0xe8>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d013      	beq.n	80036aa <TIM_Base_SetConfig+0x8a>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a21      	ldr	r2, [pc, #132]	; (800370c <TIM_Base_SetConfig+0xec>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d00f      	beq.n	80036aa <TIM_Base_SetConfig+0x8a>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a20      	ldr	r2, [pc, #128]	; (8003710 <TIM_Base_SetConfig+0xf0>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d00b      	beq.n	80036aa <TIM_Base_SetConfig+0x8a>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a1f      	ldr	r2, [pc, #124]	; (8003714 <TIM_Base_SetConfig+0xf4>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d007      	beq.n	80036aa <TIM_Base_SetConfig+0x8a>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a1e      	ldr	r2, [pc, #120]	; (8003718 <TIM_Base_SetConfig+0xf8>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d003      	beq.n	80036aa <TIM_Base_SetConfig+0x8a>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4a1d      	ldr	r2, [pc, #116]	; (800371c <TIM_Base_SetConfig+0xfc>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d108      	bne.n	80036bc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	68fa      	ldr	r2, [r7, #12]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	695b      	ldr	r3, [r3, #20]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	68fa      	ldr	r2, [r7, #12]
 80036ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	689a      	ldr	r2, [r3, #8]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	4a08      	ldr	r2, [pc, #32]	; (8003704 <TIM_Base_SetConfig+0xe4>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d103      	bne.n	80036f0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	691a      	ldr	r2, [r3, #16]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	615a      	str	r2, [r3, #20]
}
 80036f6:	bf00      	nop
 80036f8:	3714      	adds	r7, #20
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	40010000 	.word	0x40010000
 8003708:	40000400 	.word	0x40000400
 800370c:	40000800 	.word	0x40000800
 8003710:	40000c00 	.word	0x40000c00
 8003714:	40014000 	.word	0x40014000
 8003718:	40014400 	.word	0x40014400
 800371c:	40014800 	.word	0x40014800

08003720 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003720:	b480      	push	{r7}
 8003722:	b087      	sub	sp, #28
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a1b      	ldr	r3, [r3, #32]
 800372e:	f023 0201 	bic.w	r2, r3, #1
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a1b      	ldr	r3, [r3, #32]
 800373a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	699b      	ldr	r3, [r3, #24]
 8003746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800374e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f023 0303 	bic.w	r3, r3, #3
 8003756:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	4313      	orrs	r3, r2
 8003760:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	f023 0302 	bic.w	r3, r3, #2
 8003768:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	697a      	ldr	r2, [r7, #20]
 8003770:	4313      	orrs	r3, r2
 8003772:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a1c      	ldr	r2, [pc, #112]	; (80037e8 <TIM_OC1_SetConfig+0xc8>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d10c      	bne.n	8003796 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	f023 0308 	bic.w	r3, r3, #8
 8003782:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	697a      	ldr	r2, [r7, #20]
 800378a:	4313      	orrs	r3, r2
 800378c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	f023 0304 	bic.w	r3, r3, #4
 8003794:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a13      	ldr	r2, [pc, #76]	; (80037e8 <TIM_OC1_SetConfig+0xc8>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d111      	bne.n	80037c2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80037ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	695b      	ldr	r3, [r3, #20]
 80037b2:	693a      	ldr	r2, [r7, #16]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	699b      	ldr	r3, [r3, #24]
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	4313      	orrs	r3, r2
 80037c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	693a      	ldr	r2, [r7, #16]
 80037c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	685a      	ldr	r2, [r3, #4]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	697a      	ldr	r2, [r7, #20]
 80037da:	621a      	str	r2, [r3, #32]
}
 80037dc:	bf00      	nop
 80037de:	371c      	adds	r7, #28
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr
 80037e8:	40010000 	.word	0x40010000

080037ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b087      	sub	sp, #28
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a1b      	ldr	r3, [r3, #32]
 80037fa:	f023 0210 	bic.w	r2, r3, #16
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a1b      	ldr	r3, [r3, #32]
 8003806:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800381a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003822:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	021b      	lsls	r3, r3, #8
 800382a:	68fa      	ldr	r2, [r7, #12]
 800382c:	4313      	orrs	r3, r2
 800382e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	f023 0320 	bic.w	r3, r3, #32
 8003836:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	011b      	lsls	r3, r3, #4
 800383e:	697a      	ldr	r2, [r7, #20]
 8003840:	4313      	orrs	r3, r2
 8003842:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4a1e      	ldr	r2, [pc, #120]	; (80038c0 <TIM_OC2_SetConfig+0xd4>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d10d      	bne.n	8003868 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003852:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	011b      	lsls	r3, r3, #4
 800385a:	697a      	ldr	r2, [r7, #20]
 800385c:	4313      	orrs	r3, r2
 800385e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003866:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4a15      	ldr	r2, [pc, #84]	; (80038c0 <TIM_OC2_SetConfig+0xd4>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d113      	bne.n	8003898 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003876:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800387e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	695b      	ldr	r3, [r3, #20]
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	693a      	ldr	r2, [r7, #16]
 8003888:	4313      	orrs	r3, r2
 800388a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	4313      	orrs	r3, r2
 8003896:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	693a      	ldr	r2, [r7, #16]
 800389c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	685a      	ldr	r2, [r3, #4]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	697a      	ldr	r2, [r7, #20]
 80038b0:	621a      	str	r2, [r3, #32]
}
 80038b2:	bf00      	nop
 80038b4:	371c      	adds	r7, #28
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop
 80038c0:	40010000 	.word	0x40010000

080038c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b087      	sub	sp, #28
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a1b      	ldr	r3, [r3, #32]
 80038d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a1b      	ldr	r3, [r3, #32]
 80038de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	69db      	ldr	r3, [r3, #28]
 80038ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f023 0303 	bic.w	r3, r3, #3
 80038fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68fa      	ldr	r2, [r7, #12]
 8003902:	4313      	orrs	r3, r2
 8003904:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800390c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	021b      	lsls	r3, r3, #8
 8003914:	697a      	ldr	r2, [r7, #20]
 8003916:	4313      	orrs	r3, r2
 8003918:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a1d      	ldr	r2, [pc, #116]	; (8003994 <TIM_OC3_SetConfig+0xd0>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d10d      	bne.n	800393e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003928:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	021b      	lsls	r3, r3, #8
 8003930:	697a      	ldr	r2, [r7, #20]
 8003932:	4313      	orrs	r3, r2
 8003934:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800393c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a14      	ldr	r2, [pc, #80]	; (8003994 <TIM_OC3_SetConfig+0xd0>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d113      	bne.n	800396e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800394c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003954:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	695b      	ldr	r3, [r3, #20]
 800395a:	011b      	lsls	r3, r3, #4
 800395c:	693a      	ldr	r2, [r7, #16]
 800395e:	4313      	orrs	r3, r2
 8003960:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	011b      	lsls	r3, r3, #4
 8003968:	693a      	ldr	r2, [r7, #16]
 800396a:	4313      	orrs	r3, r2
 800396c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	693a      	ldr	r2, [r7, #16]
 8003972:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	68fa      	ldr	r2, [r7, #12]
 8003978:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	685a      	ldr	r2, [r3, #4]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	697a      	ldr	r2, [r7, #20]
 8003986:	621a      	str	r2, [r3, #32]
}
 8003988:	bf00      	nop
 800398a:	371c      	adds	r7, #28
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr
 8003994:	40010000 	.word	0x40010000

08003998 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003998:	b480      	push	{r7}
 800399a:	b087      	sub	sp, #28
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a1b      	ldr	r3, [r3, #32]
 80039a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	69db      	ldr	r3, [r3, #28]
 80039be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	021b      	lsls	r3, r3, #8
 80039d6:	68fa      	ldr	r2, [r7, #12]
 80039d8:	4313      	orrs	r3, r2
 80039da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	031b      	lsls	r3, r3, #12
 80039ea:	693a      	ldr	r2, [r7, #16]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4a10      	ldr	r2, [pc, #64]	; (8003a34 <TIM_OC4_SetConfig+0x9c>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d109      	bne.n	8003a0c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	695b      	ldr	r3, [r3, #20]
 8003a04:	019b      	lsls	r3, r3, #6
 8003a06:	697a      	ldr	r2, [r7, #20]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	697a      	ldr	r2, [r7, #20]
 8003a10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	68fa      	ldr	r2, [r7, #12]
 8003a16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	685a      	ldr	r2, [r3, #4]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	693a      	ldr	r2, [r7, #16]
 8003a24:	621a      	str	r2, [r3, #32]
}
 8003a26:	bf00      	nop
 8003a28:	371c      	adds	r7, #28
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	40010000 	.word	0x40010000

08003a38 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b087      	sub	sp, #28
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	607a      	str	r2, [r7, #4]
 8003a44:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6a1b      	ldr	r3, [r3, #32]
 8003a4a:	f023 0201 	bic.w	r2, r3, #1
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	699b      	ldr	r3, [r3, #24]
 8003a56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6a1b      	ldr	r3, [r3, #32]
 8003a5c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	4a24      	ldr	r2, [pc, #144]	; (8003af4 <TIM_TI1_SetConfig+0xbc>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d013      	beq.n	8003a8e <TIM_TI1_SetConfig+0x56>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a6c:	d00f      	beq.n	8003a8e <TIM_TI1_SetConfig+0x56>
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	4a21      	ldr	r2, [pc, #132]	; (8003af8 <TIM_TI1_SetConfig+0xc0>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d00b      	beq.n	8003a8e <TIM_TI1_SetConfig+0x56>
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	4a20      	ldr	r2, [pc, #128]	; (8003afc <TIM_TI1_SetConfig+0xc4>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d007      	beq.n	8003a8e <TIM_TI1_SetConfig+0x56>
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	4a1f      	ldr	r2, [pc, #124]	; (8003b00 <TIM_TI1_SetConfig+0xc8>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d003      	beq.n	8003a8e <TIM_TI1_SetConfig+0x56>
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	4a1e      	ldr	r2, [pc, #120]	; (8003b04 <TIM_TI1_SetConfig+0xcc>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d101      	bne.n	8003a92 <TIM_TI1_SetConfig+0x5a>
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e000      	b.n	8003a94 <TIM_TI1_SetConfig+0x5c>
 8003a92:	2300      	movs	r3, #0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d008      	beq.n	8003aaa <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	f023 0303 	bic.w	r3, r3, #3
 8003a9e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003aa0:	697a      	ldr	r2, [r7, #20]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	617b      	str	r3, [r7, #20]
 8003aa8:	e003      	b.n	8003ab2 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	f043 0301 	orr.w	r3, r3, #1
 8003ab0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ab8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	011b      	lsls	r3, r3, #4
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	697a      	ldr	r2, [r7, #20]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	f023 030a 	bic.w	r3, r3, #10
 8003acc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	f003 030a 	and.w	r3, r3, #10
 8003ad4:	693a      	ldr	r2, [r7, #16]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	697a      	ldr	r2, [r7, #20]
 8003ade:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	693a      	ldr	r2, [r7, #16]
 8003ae4:	621a      	str	r2, [r3, #32]
}
 8003ae6:	bf00      	nop
 8003ae8:	371c      	adds	r7, #28
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	40010000 	.word	0x40010000
 8003af8:	40000400 	.word	0x40000400
 8003afc:	40000800 	.word	0x40000800
 8003b00:	40000c00 	.word	0x40000c00
 8003b04:	40014000 	.word	0x40014000

08003b08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b087      	sub	sp, #28
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6a1b      	ldr	r3, [r3, #32]
 8003b18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6a1b      	ldr	r3, [r3, #32]
 8003b1e:	f023 0201 	bic.w	r2, r3, #1
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	699b      	ldr	r3, [r3, #24]
 8003b2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	011b      	lsls	r3, r3, #4
 8003b38:	693a      	ldr	r2, [r7, #16]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	f023 030a 	bic.w	r3, r3, #10
 8003b44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b46:	697a      	ldr	r2, [r7, #20]
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	693a      	ldr	r2, [r7, #16]
 8003b52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	697a      	ldr	r2, [r7, #20]
 8003b58:	621a      	str	r2, [r3, #32]
}
 8003b5a:	bf00      	nop
 8003b5c:	371c      	adds	r7, #28
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr

08003b66 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003b66:	b480      	push	{r7}
 8003b68:	b087      	sub	sp, #28
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	60f8      	str	r0, [r7, #12]
 8003b6e:	60b9      	str	r1, [r7, #8]
 8003b70:	607a      	str	r2, [r7, #4]
 8003b72:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6a1b      	ldr	r3, [r3, #32]
 8003b78:	f023 0210 	bic.w	r2, r3, #16
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	699b      	ldr	r3, [r3, #24]
 8003b84:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6a1b      	ldr	r3, [r3, #32]
 8003b8a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b92:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	021b      	lsls	r3, r3, #8
 8003b98:	697a      	ldr	r2, [r7, #20]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ba4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	031b      	lsls	r3, r3, #12
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	697a      	ldr	r2, [r7, #20]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003bb8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	011b      	lsls	r3, r3, #4
 8003bbe:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003bc2:	693a      	ldr	r2, [r7, #16]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	697a      	ldr	r2, [r7, #20]
 8003bcc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	693a      	ldr	r2, [r7, #16]
 8003bd2:	621a      	str	r2, [r3, #32]
}
 8003bd4:	bf00      	nop
 8003bd6:	371c      	adds	r7, #28
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b087      	sub	sp, #28
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6a1b      	ldr	r3, [r3, #32]
 8003bf0:	f023 0210 	bic.w	r2, r3, #16
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	699b      	ldr	r3, [r3, #24]
 8003bfc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6a1b      	ldr	r3, [r3, #32]
 8003c02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c0a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	031b      	lsls	r3, r3, #12
 8003c10:	697a      	ldr	r2, [r7, #20]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c1c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	011b      	lsls	r3, r3, #4
 8003c22:	693a      	ldr	r2, [r7, #16]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	697a      	ldr	r2, [r7, #20]
 8003c2c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	693a      	ldr	r2, [r7, #16]
 8003c32:	621a      	str	r2, [r3, #32]
}
 8003c34:	bf00      	nop
 8003c36:	371c      	adds	r7, #28
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr

08003c40 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b087      	sub	sp, #28
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	60b9      	str	r1, [r7, #8]
 8003c4a:	607a      	str	r2, [r7, #4]
 8003c4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6a1b      	ldr	r3, [r3, #32]
 8003c52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	69db      	ldr	r3, [r3, #28]
 8003c5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6a1b      	ldr	r3, [r3, #32]
 8003c64:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	f023 0303 	bic.w	r3, r3, #3
 8003c6c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003c6e:	697a      	ldr	r2, [r7, #20]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c7c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	011b      	lsls	r3, r3, #4
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	697a      	ldr	r2, [r7, #20]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003c90:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	021b      	lsls	r3, r3, #8
 8003c96:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003c9a:	693a      	ldr	r2, [r7, #16]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	697a      	ldr	r2, [r7, #20]
 8003ca4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	693a      	ldr	r2, [r7, #16]
 8003caa:	621a      	str	r2, [r3, #32]
}
 8003cac:	bf00      	nop
 8003cae:	371c      	adds	r7, #28
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b087      	sub	sp, #28
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]
 8003cc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6a1b      	ldr	r3, [r3, #32]
 8003cca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	69db      	ldr	r3, [r3, #28]
 8003cd6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6a1b      	ldr	r3, [r3, #32]
 8003cdc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ce4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	021b      	lsls	r3, r3, #8
 8003cea:	697a      	ldr	r2, [r7, #20]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003cf6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	031b      	lsls	r3, r3, #12
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	697a      	ldr	r2, [r7, #20]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003d0a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	031b      	lsls	r3, r3, #12
 8003d10:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003d14:	693a      	ldr	r2, [r7, #16]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	697a      	ldr	r2, [r7, #20]
 8003d1e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	693a      	ldr	r2, [r7, #16]
 8003d24:	621a      	str	r2, [r3, #32]
}
 8003d26:	bf00      	nop
 8003d28:	371c      	adds	r7, #28
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr

08003d32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d32:	b480      	push	{r7}
 8003d34:	b085      	sub	sp, #20
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
 8003d3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d4a:	683a      	ldr	r2, [r7, #0]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	f043 0307 	orr.w	r3, r3, #7
 8003d54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	68fa      	ldr	r2, [r7, #12]
 8003d5a:	609a      	str	r2, [r3, #8]
}
 8003d5c:	bf00      	nop
 8003d5e:	3714      	adds	r7, #20
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b087      	sub	sp, #28
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	607a      	str	r2, [r7, #4]
 8003d74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	021a      	lsls	r2, r3, #8
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	431a      	orrs	r2, r3
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	697a      	ldr	r2, [r7, #20]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	697a      	ldr	r2, [r7, #20]
 8003d9a:	609a      	str	r2, [r3, #8]
}
 8003d9c:	bf00      	nop
 8003d9e:	371c      	adds	r7, #28
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b087      	sub	sp, #28
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	f003 031f 	and.w	r3, r3, #31
 8003dba:	2201      	movs	r2, #1
 8003dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6a1a      	ldr	r2, [r3, #32]
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	43db      	mvns	r3, r3
 8003dca:	401a      	ands	r2, r3
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6a1a      	ldr	r2, [r3, #32]
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	f003 031f 	and.w	r3, r3, #31
 8003dda:	6879      	ldr	r1, [r7, #4]
 8003ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8003de0:	431a      	orrs	r2, r3
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	621a      	str	r2, [r3, #32]
}
 8003de6:	bf00      	nop
 8003de8:	371c      	adds	r7, #28
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
	...

08003df4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b085      	sub	sp, #20
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d101      	bne.n	8003e0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e08:	2302      	movs	r3, #2
 8003e0a:	e050      	b.n	8003eae <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2202      	movs	r2, #2
 8003e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	68fa      	ldr	r2, [r7, #12]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68fa      	ldr	r2, [r7, #12]
 8003e44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a1c      	ldr	r2, [pc, #112]	; (8003ebc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d018      	beq.n	8003e82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e58:	d013      	beq.n	8003e82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a18      	ldr	r2, [pc, #96]	; (8003ec0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d00e      	beq.n	8003e82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a16      	ldr	r2, [pc, #88]	; (8003ec4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d009      	beq.n	8003e82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a15      	ldr	r2, [pc, #84]	; (8003ec8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d004      	beq.n	8003e82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a13      	ldr	r2, [pc, #76]	; (8003ecc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d10c      	bne.n	8003e9c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	68ba      	ldr	r2, [r7, #8]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	68ba      	ldr	r2, [r7, #8]
 8003e9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3714      	adds	r7, #20
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr
 8003eba:	bf00      	nop
 8003ebc:	40010000 	.word	0x40010000
 8003ec0:	40000400 	.word	0x40000400
 8003ec4:	40000800 	.word	0x40000800
 8003ec8:	40000c00 	.word	0x40000c00
 8003ecc:	40014000 	.word	0x40014000

08003ed0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ed8:	bf00      	nop
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003eec:	bf00      	nop
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d101      	bne.n	8003f0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e03f      	b.n	8003f8a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d106      	bne.n	8003f24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f7fd f9d4 	bl	80012cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2224      	movs	r2, #36	; 0x24
 8003f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68da      	ldr	r2, [r3, #12]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f000 faa5 	bl	800448c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	691a      	ldr	r2, [r3, #16]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	695a      	ldr	r2, [r3, #20]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68da      	ldr	r2, [r3, #12]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2220      	movs	r2, #32
 8003f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2220      	movs	r2, #32
 8003f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3708      	adds	r7, #8
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}

08003f92 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f92:	b580      	push	{r7, lr}
 8003f94:	b084      	sub	sp, #16
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	60f8      	str	r0, [r7, #12]
 8003f9a:	60b9      	str	r1, [r7, #8]
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	2b20      	cmp	r3, #32
 8003faa:	d11d      	bne.n	8003fe8 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d002      	beq.n	8003fb8 <HAL_UART_Receive_DMA+0x26>
 8003fb2:	88fb      	ldrh	r3, [r7, #6]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d101      	bne.n	8003fbc <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e016      	b.n	8003fea <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d101      	bne.n	8003fca <HAL_UART_Receive_DMA+0x38>
 8003fc6:	2302      	movs	r3, #2
 8003fc8:	e00f      	b.n	8003fea <HAL_UART_Receive_DMA+0x58>
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003fd8:	88fb      	ldrh	r3, [r7, #6]
 8003fda:	461a      	mov	r2, r3
 8003fdc:	68b9      	ldr	r1, [r7, #8]
 8003fde:	68f8      	ldr	r0, [r7, #12]
 8003fe0:	f000 f92a 	bl	8004238 <UART_Start_Receive_DMA>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	e000      	b.n	8003fea <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003fe8:	2302      	movs	r3, #2
  }
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3710      	adds	r7, #16
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}

08003ff2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	b083      	sub	sp, #12
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003ffa:	bf00      	nop
 8003ffc:	370c      	adds	r7, #12
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr

08004006 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004006:	b480      	push	{r7}
 8004008:	b083      	sub	sp, #12
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800400e:	bf00      	nop
 8004010:	370c      	adds	r7, #12
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr

0800401a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800401a:	b480      	push	{r7}
 800401c:	b083      	sub	sp, #12
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004022:	bf00      	nop
 8004024:	370c      	adds	r7, #12
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr

0800402e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800402e:	b480      	push	{r7}
 8004030:	b083      	sub	sp, #12
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
 8004036:	460b      	mov	r3, r1
 8004038:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800403a:	bf00      	nop
 800403c:	370c      	adds	r7, #12
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr

08004046 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004046:	b580      	push	{r7, lr}
 8004048:	b09c      	sub	sp, #112	; 0x70
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004052:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800405e:	2b00      	cmp	r3, #0
 8004060:	d172      	bne.n	8004148 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004062:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004064:	2200      	movs	r2, #0
 8004066:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004068:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	330c      	adds	r3, #12
 800406e:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004070:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004072:	e853 3f00 	ldrex	r3, [r3]
 8004076:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004078:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800407a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800407e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004080:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	330c      	adds	r3, #12
 8004086:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004088:	65ba      	str	r2, [r7, #88]	; 0x58
 800408a:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800408c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800408e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004090:	e841 2300 	strex	r3, r2, [r1]
 8004094:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004096:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004098:	2b00      	cmp	r3, #0
 800409a:	d1e5      	bne.n	8004068 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800409c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	3314      	adds	r3, #20
 80040a2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040a6:	e853 3f00 	ldrex	r3, [r3]
 80040aa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80040ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040ae:	f023 0301 	bic.w	r3, r3, #1
 80040b2:	667b      	str	r3, [r7, #100]	; 0x64
 80040b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	3314      	adds	r3, #20
 80040ba:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80040bc:	647a      	str	r2, [r7, #68]	; 0x44
 80040be:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80040c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040c4:	e841 2300 	strex	r3, r2, [r1]
 80040c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80040ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d1e5      	bne.n	800409c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	3314      	adds	r3, #20
 80040d6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040da:	e853 3f00 	ldrex	r3, [r3]
 80040de:	623b      	str	r3, [r7, #32]
   return(result);
 80040e0:	6a3b      	ldr	r3, [r7, #32]
 80040e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040e6:	663b      	str	r3, [r7, #96]	; 0x60
 80040e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	3314      	adds	r3, #20
 80040ee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80040f0:	633a      	str	r2, [r7, #48]	; 0x30
 80040f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040f8:	e841 2300 	strex	r3, r2, [r1]
 80040fc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80040fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004100:	2b00      	cmp	r3, #0
 8004102:	d1e5      	bne.n	80040d0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004104:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004106:	2220      	movs	r2, #32
 8004108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800410c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800410e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004110:	2b01      	cmp	r3, #1
 8004112:	d119      	bne.n	8004148 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004114:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	330c      	adds	r3, #12
 800411a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	e853 3f00 	ldrex	r3, [r3]
 8004122:	60fb      	str	r3, [r7, #12]
   return(result);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f023 0310 	bic.w	r3, r3, #16
 800412a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800412c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	330c      	adds	r3, #12
 8004132:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004134:	61fa      	str	r2, [r7, #28]
 8004136:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004138:	69b9      	ldr	r1, [r7, #24]
 800413a:	69fa      	ldr	r2, [r7, #28]
 800413c:	e841 2300 	strex	r3, r2, [r1]
 8004140:	617b      	str	r3, [r7, #20]
   return(result);
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d1e5      	bne.n	8004114 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004148:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800414a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800414c:	2b01      	cmp	r3, #1
 800414e:	d106      	bne.n	800415e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004150:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004152:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004154:	4619      	mov	r1, r3
 8004156:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004158:	f7ff ff69 	bl	800402e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800415c:	e002      	b.n	8004164 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800415e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004160:	f7ff ff47 	bl	8003ff2 <HAL_UART_RxCpltCallback>
}
 8004164:	bf00      	nop
 8004166:	3770      	adds	r7, #112	; 0x70
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004178:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800417e:	2b01      	cmp	r3, #1
 8004180:	d108      	bne.n	8004194 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004186:	085b      	lsrs	r3, r3, #1
 8004188:	b29b      	uxth	r3, r3
 800418a:	4619      	mov	r1, r3
 800418c:	68f8      	ldr	r0, [r7, #12]
 800418e:	f7ff ff4e 	bl	800402e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004192:	e002      	b.n	800419a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004194:	68f8      	ldr	r0, [r7, #12]
 8004196:	f7ff ff36 	bl	8004006 <HAL_UART_RxHalfCpltCallback>
}
 800419a:	bf00      	nop
 800419c:	3710      	adds	r7, #16
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}

080041a2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80041a2:	b580      	push	{r7, lr}
 80041a4:	b084      	sub	sp, #16
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80041aa:	2300      	movs	r3, #0
 80041ac:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041be:	2b80      	cmp	r3, #128	; 0x80
 80041c0:	bf0c      	ite	eq
 80041c2:	2301      	moveq	r3, #1
 80041c4:	2300      	movne	r3, #0
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	2b21      	cmp	r3, #33	; 0x21
 80041d4:	d108      	bne.n	80041e8 <UART_DMAError+0x46>
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d005      	beq.n	80041e8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	2200      	movs	r2, #0
 80041e0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80041e2:	68b8      	ldr	r0, [r7, #8]
 80041e4:	f000 f8c6 	bl	8004374 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041f2:	2b40      	cmp	r3, #64	; 0x40
 80041f4:	bf0c      	ite	eq
 80041f6:	2301      	moveq	r3, #1
 80041f8:	2300      	movne	r3, #0
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004204:	b2db      	uxtb	r3, r3
 8004206:	2b22      	cmp	r3, #34	; 0x22
 8004208:	d108      	bne.n	800421c <UART_DMAError+0x7a>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d005      	beq.n	800421c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	2200      	movs	r2, #0
 8004214:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004216:	68b8      	ldr	r0, [r7, #8]
 8004218:	f000 f8d4 	bl	80043c4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004220:	f043 0210 	orr.w	r2, r3, #16
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004228:	68b8      	ldr	r0, [r7, #8]
 800422a:	f7ff fef6 	bl	800401a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800422e:	bf00      	nop
 8004230:	3710      	adds	r7, #16
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
	...

08004238 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b098      	sub	sp, #96	; 0x60
 800423c:	af00      	add	r7, sp, #0
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	4613      	mov	r3, r2
 8004244:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004246:	68ba      	ldr	r2, [r7, #8]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	88fa      	ldrh	r2, [r7, #6]
 8004250:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2200      	movs	r2, #0
 8004256:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2222      	movs	r2, #34	; 0x22
 800425c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004264:	4a40      	ldr	r2, [pc, #256]	; (8004368 <UART_Start_Receive_DMA+0x130>)
 8004266:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800426c:	4a3f      	ldr	r2, [pc, #252]	; (800436c <UART_Start_Receive_DMA+0x134>)
 800426e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004274:	4a3e      	ldr	r2, [pc, #248]	; (8004370 <UART_Start_Receive_DMA+0x138>)
 8004276:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800427c:	2200      	movs	r2, #0
 800427e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004280:	f107 0308 	add.w	r3, r7, #8
 8004284:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	3304      	adds	r3, #4
 8004290:	4619      	mov	r1, r3
 8004292:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	88fb      	ldrh	r3, [r7, #6]
 8004298:	f7fd fb14 	bl	80018c4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800429c:	2300      	movs	r3, #0
 800429e:	613b      	str	r3, [r7, #16]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	613b      	str	r3, [r7, #16]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	613b      	str	r3, [r7, #16]
 80042b0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	691b      	ldr	r3, [r3, #16]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d019      	beq.n	80042f6 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	330c      	adds	r3, #12
 80042c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042cc:	e853 3f00 	ldrex	r3, [r3]
 80042d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80042d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042d8:	65bb      	str	r3, [r7, #88]	; 0x58
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	330c      	adds	r3, #12
 80042e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80042e2:	64fa      	str	r2, [r7, #76]	; 0x4c
 80042e4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80042e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80042ea:	e841 2300 	strex	r3, r2, [r1]
 80042ee:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80042f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d1e5      	bne.n	80042c2 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	3314      	adds	r3, #20
 80042fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004300:	e853 3f00 	ldrex	r3, [r3]
 8004304:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004308:	f043 0301 	orr.w	r3, r3, #1
 800430c:	657b      	str	r3, [r7, #84]	; 0x54
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	3314      	adds	r3, #20
 8004314:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004316:	63ba      	str	r2, [r7, #56]	; 0x38
 8004318:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800431a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800431c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800431e:	e841 2300 	strex	r3, r2, [r1]
 8004322:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004326:	2b00      	cmp	r3, #0
 8004328:	d1e5      	bne.n	80042f6 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	3314      	adds	r3, #20
 8004330:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	e853 3f00 	ldrex	r3, [r3]
 8004338:	617b      	str	r3, [r7, #20]
   return(result);
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004340:	653b      	str	r3, [r7, #80]	; 0x50
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	3314      	adds	r3, #20
 8004348:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800434a:	627a      	str	r2, [r7, #36]	; 0x24
 800434c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800434e:	6a39      	ldr	r1, [r7, #32]
 8004350:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004352:	e841 2300 	strex	r3, r2, [r1]
 8004356:	61fb      	str	r3, [r7, #28]
   return(result);
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d1e5      	bne.n	800432a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800435e:	2300      	movs	r3, #0
}
 8004360:	4618      	mov	r0, r3
 8004362:	3760      	adds	r7, #96	; 0x60
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}
 8004368:	08004047 	.word	0x08004047
 800436c:	0800416d 	.word	0x0800416d
 8004370:	080041a3 	.word	0x080041a3

08004374 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004374:	b480      	push	{r7}
 8004376:	b089      	sub	sp, #36	; 0x24
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	330c      	adds	r3, #12
 8004382:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	e853 3f00 	ldrex	r3, [r3]
 800438a:	60bb      	str	r3, [r7, #8]
   return(result);
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004392:	61fb      	str	r3, [r7, #28]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	330c      	adds	r3, #12
 800439a:	69fa      	ldr	r2, [r7, #28]
 800439c:	61ba      	str	r2, [r7, #24]
 800439e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a0:	6979      	ldr	r1, [r7, #20]
 80043a2:	69ba      	ldr	r2, [r7, #24]
 80043a4:	e841 2300 	strex	r3, r2, [r1]
 80043a8:	613b      	str	r3, [r7, #16]
   return(result);
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d1e5      	bne.n	800437c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2220      	movs	r2, #32
 80043b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80043b8:	bf00      	nop
 80043ba:	3724      	adds	r7, #36	; 0x24
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b095      	sub	sp, #84	; 0x54
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	330c      	adds	r3, #12
 80043d2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043d6:	e853 3f00 	ldrex	r3, [r3]
 80043da:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80043dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80043e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	330c      	adds	r3, #12
 80043ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80043ec:	643a      	str	r2, [r7, #64]	; 0x40
 80043ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80043f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80043f4:	e841 2300 	strex	r3, r2, [r1]
 80043f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80043fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d1e5      	bne.n	80043cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	3314      	adds	r3, #20
 8004406:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004408:	6a3b      	ldr	r3, [r7, #32]
 800440a:	e853 3f00 	ldrex	r3, [r3]
 800440e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	f023 0301 	bic.w	r3, r3, #1
 8004416:	64bb      	str	r3, [r7, #72]	; 0x48
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	3314      	adds	r3, #20
 800441e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004420:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004422:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004424:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004426:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004428:	e841 2300 	strex	r3, r2, [r1]
 800442c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800442e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004430:	2b00      	cmp	r3, #0
 8004432:	d1e5      	bne.n	8004400 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004438:	2b01      	cmp	r3, #1
 800443a:	d119      	bne.n	8004470 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	330c      	adds	r3, #12
 8004442:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	e853 3f00 	ldrex	r3, [r3]
 800444a:	60bb      	str	r3, [r7, #8]
   return(result);
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	f023 0310 	bic.w	r3, r3, #16
 8004452:	647b      	str	r3, [r7, #68]	; 0x44
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	330c      	adds	r3, #12
 800445a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800445c:	61ba      	str	r2, [r7, #24]
 800445e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004460:	6979      	ldr	r1, [r7, #20]
 8004462:	69ba      	ldr	r2, [r7, #24]
 8004464:	e841 2300 	strex	r3, r2, [r1]
 8004468:	613b      	str	r3, [r7, #16]
   return(result);
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d1e5      	bne.n	800443c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2220      	movs	r2, #32
 8004474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800447e:	bf00      	nop
 8004480:	3754      	adds	r7, #84	; 0x54
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
	...

0800448c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800448c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004490:	b0c0      	sub	sp, #256	; 0x100
 8004492:	af00      	add	r7, sp, #0
 8004494:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	691b      	ldr	r3, [r3, #16]
 80044a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80044a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044a8:	68d9      	ldr	r1, [r3, #12]
 80044aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	ea40 0301 	orr.w	r3, r0, r1
 80044b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80044b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044ba:	689a      	ldr	r2, [r3, #8]
 80044bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	431a      	orrs	r2, r3
 80044c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044c8:	695b      	ldr	r3, [r3, #20]
 80044ca:	431a      	orrs	r2, r3
 80044cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044d0:	69db      	ldr	r3, [r3, #28]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80044d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80044e4:	f021 010c 	bic.w	r1, r1, #12
 80044e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80044f2:	430b      	orrs	r3, r1
 80044f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	695b      	ldr	r3, [r3, #20]
 80044fe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004502:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004506:	6999      	ldr	r1, [r3, #24]
 8004508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	ea40 0301 	orr.w	r3, r0, r1
 8004512:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	4b8f      	ldr	r3, [pc, #572]	; (8004758 <UART_SetConfig+0x2cc>)
 800451c:	429a      	cmp	r2, r3
 800451e:	d005      	beq.n	800452c <UART_SetConfig+0xa0>
 8004520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	4b8d      	ldr	r3, [pc, #564]	; (800475c <UART_SetConfig+0x2d0>)
 8004528:	429a      	cmp	r2, r3
 800452a:	d104      	bne.n	8004536 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800452c:	f7fe faae 	bl	8002a8c <HAL_RCC_GetPCLK2Freq>
 8004530:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004534:	e003      	b.n	800453e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004536:	f7fe fa95 	bl	8002a64 <HAL_RCC_GetPCLK1Freq>
 800453a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800453e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004542:	69db      	ldr	r3, [r3, #28]
 8004544:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004548:	f040 810c 	bne.w	8004764 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800454c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004550:	2200      	movs	r2, #0
 8004552:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004556:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800455a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800455e:	4622      	mov	r2, r4
 8004560:	462b      	mov	r3, r5
 8004562:	1891      	adds	r1, r2, r2
 8004564:	65b9      	str	r1, [r7, #88]	; 0x58
 8004566:	415b      	adcs	r3, r3
 8004568:	65fb      	str	r3, [r7, #92]	; 0x5c
 800456a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800456e:	4621      	mov	r1, r4
 8004570:	eb12 0801 	adds.w	r8, r2, r1
 8004574:	4629      	mov	r1, r5
 8004576:	eb43 0901 	adc.w	r9, r3, r1
 800457a:	f04f 0200 	mov.w	r2, #0
 800457e:	f04f 0300 	mov.w	r3, #0
 8004582:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004586:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800458a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800458e:	4690      	mov	r8, r2
 8004590:	4699      	mov	r9, r3
 8004592:	4623      	mov	r3, r4
 8004594:	eb18 0303 	adds.w	r3, r8, r3
 8004598:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800459c:	462b      	mov	r3, r5
 800459e:	eb49 0303 	adc.w	r3, r9, r3
 80045a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80045a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80045b2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80045b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80045ba:	460b      	mov	r3, r1
 80045bc:	18db      	adds	r3, r3, r3
 80045be:	653b      	str	r3, [r7, #80]	; 0x50
 80045c0:	4613      	mov	r3, r2
 80045c2:	eb42 0303 	adc.w	r3, r2, r3
 80045c6:	657b      	str	r3, [r7, #84]	; 0x54
 80045c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80045cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80045d0:	f7fb fe56 	bl	8000280 <__aeabi_uldivmod>
 80045d4:	4602      	mov	r2, r0
 80045d6:	460b      	mov	r3, r1
 80045d8:	4b61      	ldr	r3, [pc, #388]	; (8004760 <UART_SetConfig+0x2d4>)
 80045da:	fba3 2302 	umull	r2, r3, r3, r2
 80045de:	095b      	lsrs	r3, r3, #5
 80045e0:	011c      	lsls	r4, r3, #4
 80045e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045e6:	2200      	movs	r2, #0
 80045e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80045ec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80045f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80045f4:	4642      	mov	r2, r8
 80045f6:	464b      	mov	r3, r9
 80045f8:	1891      	adds	r1, r2, r2
 80045fa:	64b9      	str	r1, [r7, #72]	; 0x48
 80045fc:	415b      	adcs	r3, r3
 80045fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004600:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004604:	4641      	mov	r1, r8
 8004606:	eb12 0a01 	adds.w	sl, r2, r1
 800460a:	4649      	mov	r1, r9
 800460c:	eb43 0b01 	adc.w	fp, r3, r1
 8004610:	f04f 0200 	mov.w	r2, #0
 8004614:	f04f 0300 	mov.w	r3, #0
 8004618:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800461c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004620:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004624:	4692      	mov	sl, r2
 8004626:	469b      	mov	fp, r3
 8004628:	4643      	mov	r3, r8
 800462a:	eb1a 0303 	adds.w	r3, sl, r3
 800462e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004632:	464b      	mov	r3, r9
 8004634:	eb4b 0303 	adc.w	r3, fp, r3
 8004638:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800463c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004648:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800464c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004650:	460b      	mov	r3, r1
 8004652:	18db      	adds	r3, r3, r3
 8004654:	643b      	str	r3, [r7, #64]	; 0x40
 8004656:	4613      	mov	r3, r2
 8004658:	eb42 0303 	adc.w	r3, r2, r3
 800465c:	647b      	str	r3, [r7, #68]	; 0x44
 800465e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004662:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004666:	f7fb fe0b 	bl	8000280 <__aeabi_uldivmod>
 800466a:	4602      	mov	r2, r0
 800466c:	460b      	mov	r3, r1
 800466e:	4611      	mov	r1, r2
 8004670:	4b3b      	ldr	r3, [pc, #236]	; (8004760 <UART_SetConfig+0x2d4>)
 8004672:	fba3 2301 	umull	r2, r3, r3, r1
 8004676:	095b      	lsrs	r3, r3, #5
 8004678:	2264      	movs	r2, #100	; 0x64
 800467a:	fb02 f303 	mul.w	r3, r2, r3
 800467e:	1acb      	subs	r3, r1, r3
 8004680:	00db      	lsls	r3, r3, #3
 8004682:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004686:	4b36      	ldr	r3, [pc, #216]	; (8004760 <UART_SetConfig+0x2d4>)
 8004688:	fba3 2302 	umull	r2, r3, r3, r2
 800468c:	095b      	lsrs	r3, r3, #5
 800468e:	005b      	lsls	r3, r3, #1
 8004690:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004694:	441c      	add	r4, r3
 8004696:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800469a:	2200      	movs	r2, #0
 800469c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80046a0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80046a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80046a8:	4642      	mov	r2, r8
 80046aa:	464b      	mov	r3, r9
 80046ac:	1891      	adds	r1, r2, r2
 80046ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80046b0:	415b      	adcs	r3, r3
 80046b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80046b8:	4641      	mov	r1, r8
 80046ba:	1851      	adds	r1, r2, r1
 80046bc:	6339      	str	r1, [r7, #48]	; 0x30
 80046be:	4649      	mov	r1, r9
 80046c0:	414b      	adcs	r3, r1
 80046c2:	637b      	str	r3, [r7, #52]	; 0x34
 80046c4:	f04f 0200 	mov.w	r2, #0
 80046c8:	f04f 0300 	mov.w	r3, #0
 80046cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80046d0:	4659      	mov	r1, fp
 80046d2:	00cb      	lsls	r3, r1, #3
 80046d4:	4651      	mov	r1, sl
 80046d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046da:	4651      	mov	r1, sl
 80046dc:	00ca      	lsls	r2, r1, #3
 80046de:	4610      	mov	r0, r2
 80046e0:	4619      	mov	r1, r3
 80046e2:	4603      	mov	r3, r0
 80046e4:	4642      	mov	r2, r8
 80046e6:	189b      	adds	r3, r3, r2
 80046e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80046ec:	464b      	mov	r3, r9
 80046ee:	460a      	mov	r2, r1
 80046f0:	eb42 0303 	adc.w	r3, r2, r3
 80046f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80046f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004704:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004708:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800470c:	460b      	mov	r3, r1
 800470e:	18db      	adds	r3, r3, r3
 8004710:	62bb      	str	r3, [r7, #40]	; 0x28
 8004712:	4613      	mov	r3, r2
 8004714:	eb42 0303 	adc.w	r3, r2, r3
 8004718:	62fb      	str	r3, [r7, #44]	; 0x2c
 800471a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800471e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004722:	f7fb fdad 	bl	8000280 <__aeabi_uldivmod>
 8004726:	4602      	mov	r2, r0
 8004728:	460b      	mov	r3, r1
 800472a:	4b0d      	ldr	r3, [pc, #52]	; (8004760 <UART_SetConfig+0x2d4>)
 800472c:	fba3 1302 	umull	r1, r3, r3, r2
 8004730:	095b      	lsrs	r3, r3, #5
 8004732:	2164      	movs	r1, #100	; 0x64
 8004734:	fb01 f303 	mul.w	r3, r1, r3
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	00db      	lsls	r3, r3, #3
 800473c:	3332      	adds	r3, #50	; 0x32
 800473e:	4a08      	ldr	r2, [pc, #32]	; (8004760 <UART_SetConfig+0x2d4>)
 8004740:	fba2 2303 	umull	r2, r3, r2, r3
 8004744:	095b      	lsrs	r3, r3, #5
 8004746:	f003 0207 	and.w	r2, r3, #7
 800474a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4422      	add	r2, r4
 8004752:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004754:	e106      	b.n	8004964 <UART_SetConfig+0x4d8>
 8004756:	bf00      	nop
 8004758:	40011000 	.word	0x40011000
 800475c:	40011400 	.word	0x40011400
 8004760:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004764:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004768:	2200      	movs	r2, #0
 800476a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800476e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004772:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004776:	4642      	mov	r2, r8
 8004778:	464b      	mov	r3, r9
 800477a:	1891      	adds	r1, r2, r2
 800477c:	6239      	str	r1, [r7, #32]
 800477e:	415b      	adcs	r3, r3
 8004780:	627b      	str	r3, [r7, #36]	; 0x24
 8004782:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004786:	4641      	mov	r1, r8
 8004788:	1854      	adds	r4, r2, r1
 800478a:	4649      	mov	r1, r9
 800478c:	eb43 0501 	adc.w	r5, r3, r1
 8004790:	f04f 0200 	mov.w	r2, #0
 8004794:	f04f 0300 	mov.w	r3, #0
 8004798:	00eb      	lsls	r3, r5, #3
 800479a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800479e:	00e2      	lsls	r2, r4, #3
 80047a0:	4614      	mov	r4, r2
 80047a2:	461d      	mov	r5, r3
 80047a4:	4643      	mov	r3, r8
 80047a6:	18e3      	adds	r3, r4, r3
 80047a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80047ac:	464b      	mov	r3, r9
 80047ae:	eb45 0303 	adc.w	r3, r5, r3
 80047b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80047b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80047c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80047c6:	f04f 0200 	mov.w	r2, #0
 80047ca:	f04f 0300 	mov.w	r3, #0
 80047ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80047d2:	4629      	mov	r1, r5
 80047d4:	008b      	lsls	r3, r1, #2
 80047d6:	4621      	mov	r1, r4
 80047d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047dc:	4621      	mov	r1, r4
 80047de:	008a      	lsls	r2, r1, #2
 80047e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80047e4:	f7fb fd4c 	bl	8000280 <__aeabi_uldivmod>
 80047e8:	4602      	mov	r2, r0
 80047ea:	460b      	mov	r3, r1
 80047ec:	4b60      	ldr	r3, [pc, #384]	; (8004970 <UART_SetConfig+0x4e4>)
 80047ee:	fba3 2302 	umull	r2, r3, r3, r2
 80047f2:	095b      	lsrs	r3, r3, #5
 80047f4:	011c      	lsls	r4, r3, #4
 80047f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047fa:	2200      	movs	r2, #0
 80047fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004800:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004804:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004808:	4642      	mov	r2, r8
 800480a:	464b      	mov	r3, r9
 800480c:	1891      	adds	r1, r2, r2
 800480e:	61b9      	str	r1, [r7, #24]
 8004810:	415b      	adcs	r3, r3
 8004812:	61fb      	str	r3, [r7, #28]
 8004814:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004818:	4641      	mov	r1, r8
 800481a:	1851      	adds	r1, r2, r1
 800481c:	6139      	str	r1, [r7, #16]
 800481e:	4649      	mov	r1, r9
 8004820:	414b      	adcs	r3, r1
 8004822:	617b      	str	r3, [r7, #20]
 8004824:	f04f 0200 	mov.w	r2, #0
 8004828:	f04f 0300 	mov.w	r3, #0
 800482c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004830:	4659      	mov	r1, fp
 8004832:	00cb      	lsls	r3, r1, #3
 8004834:	4651      	mov	r1, sl
 8004836:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800483a:	4651      	mov	r1, sl
 800483c:	00ca      	lsls	r2, r1, #3
 800483e:	4610      	mov	r0, r2
 8004840:	4619      	mov	r1, r3
 8004842:	4603      	mov	r3, r0
 8004844:	4642      	mov	r2, r8
 8004846:	189b      	adds	r3, r3, r2
 8004848:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800484c:	464b      	mov	r3, r9
 800484e:	460a      	mov	r2, r1
 8004850:	eb42 0303 	adc.w	r3, r2, r3
 8004854:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	67bb      	str	r3, [r7, #120]	; 0x78
 8004862:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004864:	f04f 0200 	mov.w	r2, #0
 8004868:	f04f 0300 	mov.w	r3, #0
 800486c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004870:	4649      	mov	r1, r9
 8004872:	008b      	lsls	r3, r1, #2
 8004874:	4641      	mov	r1, r8
 8004876:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800487a:	4641      	mov	r1, r8
 800487c:	008a      	lsls	r2, r1, #2
 800487e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004882:	f7fb fcfd 	bl	8000280 <__aeabi_uldivmod>
 8004886:	4602      	mov	r2, r0
 8004888:	460b      	mov	r3, r1
 800488a:	4611      	mov	r1, r2
 800488c:	4b38      	ldr	r3, [pc, #224]	; (8004970 <UART_SetConfig+0x4e4>)
 800488e:	fba3 2301 	umull	r2, r3, r3, r1
 8004892:	095b      	lsrs	r3, r3, #5
 8004894:	2264      	movs	r2, #100	; 0x64
 8004896:	fb02 f303 	mul.w	r3, r2, r3
 800489a:	1acb      	subs	r3, r1, r3
 800489c:	011b      	lsls	r3, r3, #4
 800489e:	3332      	adds	r3, #50	; 0x32
 80048a0:	4a33      	ldr	r2, [pc, #204]	; (8004970 <UART_SetConfig+0x4e4>)
 80048a2:	fba2 2303 	umull	r2, r3, r2, r3
 80048a6:	095b      	lsrs	r3, r3, #5
 80048a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048ac:	441c      	add	r4, r3
 80048ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048b2:	2200      	movs	r2, #0
 80048b4:	673b      	str	r3, [r7, #112]	; 0x70
 80048b6:	677a      	str	r2, [r7, #116]	; 0x74
 80048b8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80048bc:	4642      	mov	r2, r8
 80048be:	464b      	mov	r3, r9
 80048c0:	1891      	adds	r1, r2, r2
 80048c2:	60b9      	str	r1, [r7, #8]
 80048c4:	415b      	adcs	r3, r3
 80048c6:	60fb      	str	r3, [r7, #12]
 80048c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80048cc:	4641      	mov	r1, r8
 80048ce:	1851      	adds	r1, r2, r1
 80048d0:	6039      	str	r1, [r7, #0]
 80048d2:	4649      	mov	r1, r9
 80048d4:	414b      	adcs	r3, r1
 80048d6:	607b      	str	r3, [r7, #4]
 80048d8:	f04f 0200 	mov.w	r2, #0
 80048dc:	f04f 0300 	mov.w	r3, #0
 80048e0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80048e4:	4659      	mov	r1, fp
 80048e6:	00cb      	lsls	r3, r1, #3
 80048e8:	4651      	mov	r1, sl
 80048ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048ee:	4651      	mov	r1, sl
 80048f0:	00ca      	lsls	r2, r1, #3
 80048f2:	4610      	mov	r0, r2
 80048f4:	4619      	mov	r1, r3
 80048f6:	4603      	mov	r3, r0
 80048f8:	4642      	mov	r2, r8
 80048fa:	189b      	adds	r3, r3, r2
 80048fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80048fe:	464b      	mov	r3, r9
 8004900:	460a      	mov	r2, r1
 8004902:	eb42 0303 	adc.w	r3, r2, r3
 8004906:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	663b      	str	r3, [r7, #96]	; 0x60
 8004912:	667a      	str	r2, [r7, #100]	; 0x64
 8004914:	f04f 0200 	mov.w	r2, #0
 8004918:	f04f 0300 	mov.w	r3, #0
 800491c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004920:	4649      	mov	r1, r9
 8004922:	008b      	lsls	r3, r1, #2
 8004924:	4641      	mov	r1, r8
 8004926:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800492a:	4641      	mov	r1, r8
 800492c:	008a      	lsls	r2, r1, #2
 800492e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004932:	f7fb fca5 	bl	8000280 <__aeabi_uldivmod>
 8004936:	4602      	mov	r2, r0
 8004938:	460b      	mov	r3, r1
 800493a:	4b0d      	ldr	r3, [pc, #52]	; (8004970 <UART_SetConfig+0x4e4>)
 800493c:	fba3 1302 	umull	r1, r3, r3, r2
 8004940:	095b      	lsrs	r3, r3, #5
 8004942:	2164      	movs	r1, #100	; 0x64
 8004944:	fb01 f303 	mul.w	r3, r1, r3
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	011b      	lsls	r3, r3, #4
 800494c:	3332      	adds	r3, #50	; 0x32
 800494e:	4a08      	ldr	r2, [pc, #32]	; (8004970 <UART_SetConfig+0x4e4>)
 8004950:	fba2 2303 	umull	r2, r3, r2, r3
 8004954:	095b      	lsrs	r3, r3, #5
 8004956:	f003 020f 	and.w	r2, r3, #15
 800495a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4422      	add	r2, r4
 8004962:	609a      	str	r2, [r3, #8]
}
 8004964:	bf00      	nop
 8004966:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800496a:	46bd      	mov	sp, r7
 800496c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004970:	51eb851f 	.word	0x51eb851f

08004974 <std>:
 8004974:	2300      	movs	r3, #0
 8004976:	b510      	push	{r4, lr}
 8004978:	4604      	mov	r4, r0
 800497a:	e9c0 3300 	strd	r3, r3, [r0]
 800497e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004982:	6083      	str	r3, [r0, #8]
 8004984:	8181      	strh	r1, [r0, #12]
 8004986:	6643      	str	r3, [r0, #100]	; 0x64
 8004988:	81c2      	strh	r2, [r0, #14]
 800498a:	6183      	str	r3, [r0, #24]
 800498c:	4619      	mov	r1, r3
 800498e:	2208      	movs	r2, #8
 8004990:	305c      	adds	r0, #92	; 0x5c
 8004992:	f000 f906 	bl	8004ba2 <memset>
 8004996:	4b0d      	ldr	r3, [pc, #52]	; (80049cc <std+0x58>)
 8004998:	6263      	str	r3, [r4, #36]	; 0x24
 800499a:	4b0d      	ldr	r3, [pc, #52]	; (80049d0 <std+0x5c>)
 800499c:	62a3      	str	r3, [r4, #40]	; 0x28
 800499e:	4b0d      	ldr	r3, [pc, #52]	; (80049d4 <std+0x60>)
 80049a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80049a2:	4b0d      	ldr	r3, [pc, #52]	; (80049d8 <std+0x64>)
 80049a4:	6323      	str	r3, [r4, #48]	; 0x30
 80049a6:	4b0d      	ldr	r3, [pc, #52]	; (80049dc <std+0x68>)
 80049a8:	6224      	str	r4, [r4, #32]
 80049aa:	429c      	cmp	r4, r3
 80049ac:	d006      	beq.n	80049bc <std+0x48>
 80049ae:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80049b2:	4294      	cmp	r4, r2
 80049b4:	d002      	beq.n	80049bc <std+0x48>
 80049b6:	33d0      	adds	r3, #208	; 0xd0
 80049b8:	429c      	cmp	r4, r3
 80049ba:	d105      	bne.n	80049c8 <std+0x54>
 80049bc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80049c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049c4:	f000 b966 	b.w	8004c94 <__retarget_lock_init_recursive>
 80049c8:	bd10      	pop	{r4, pc}
 80049ca:	bf00      	nop
 80049cc:	08004b1d 	.word	0x08004b1d
 80049d0:	08004b3f 	.word	0x08004b3f
 80049d4:	08004b77 	.word	0x08004b77
 80049d8:	08004b9b 	.word	0x08004b9b
 80049dc:	2000023c 	.word	0x2000023c

080049e0 <stdio_exit_handler>:
 80049e0:	4a02      	ldr	r2, [pc, #8]	; (80049ec <stdio_exit_handler+0xc>)
 80049e2:	4903      	ldr	r1, [pc, #12]	; (80049f0 <stdio_exit_handler+0x10>)
 80049e4:	4803      	ldr	r0, [pc, #12]	; (80049f4 <stdio_exit_handler+0x14>)
 80049e6:	f000 b869 	b.w	8004abc <_fwalk_sglue>
 80049ea:	bf00      	nop
 80049ec:	2000000c 	.word	0x2000000c
 80049f0:	08005541 	.word	0x08005541
 80049f4:	20000018 	.word	0x20000018

080049f8 <cleanup_stdio>:
 80049f8:	6841      	ldr	r1, [r0, #4]
 80049fa:	4b0c      	ldr	r3, [pc, #48]	; (8004a2c <cleanup_stdio+0x34>)
 80049fc:	4299      	cmp	r1, r3
 80049fe:	b510      	push	{r4, lr}
 8004a00:	4604      	mov	r4, r0
 8004a02:	d001      	beq.n	8004a08 <cleanup_stdio+0x10>
 8004a04:	f000 fd9c 	bl	8005540 <_fflush_r>
 8004a08:	68a1      	ldr	r1, [r4, #8]
 8004a0a:	4b09      	ldr	r3, [pc, #36]	; (8004a30 <cleanup_stdio+0x38>)
 8004a0c:	4299      	cmp	r1, r3
 8004a0e:	d002      	beq.n	8004a16 <cleanup_stdio+0x1e>
 8004a10:	4620      	mov	r0, r4
 8004a12:	f000 fd95 	bl	8005540 <_fflush_r>
 8004a16:	68e1      	ldr	r1, [r4, #12]
 8004a18:	4b06      	ldr	r3, [pc, #24]	; (8004a34 <cleanup_stdio+0x3c>)
 8004a1a:	4299      	cmp	r1, r3
 8004a1c:	d004      	beq.n	8004a28 <cleanup_stdio+0x30>
 8004a1e:	4620      	mov	r0, r4
 8004a20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a24:	f000 bd8c 	b.w	8005540 <_fflush_r>
 8004a28:	bd10      	pop	{r4, pc}
 8004a2a:	bf00      	nop
 8004a2c:	2000023c 	.word	0x2000023c
 8004a30:	200002a4 	.word	0x200002a4
 8004a34:	2000030c 	.word	0x2000030c

08004a38 <global_stdio_init.part.0>:
 8004a38:	b510      	push	{r4, lr}
 8004a3a:	4b0b      	ldr	r3, [pc, #44]	; (8004a68 <global_stdio_init.part.0+0x30>)
 8004a3c:	4c0b      	ldr	r4, [pc, #44]	; (8004a6c <global_stdio_init.part.0+0x34>)
 8004a3e:	4a0c      	ldr	r2, [pc, #48]	; (8004a70 <global_stdio_init.part.0+0x38>)
 8004a40:	601a      	str	r2, [r3, #0]
 8004a42:	4620      	mov	r0, r4
 8004a44:	2200      	movs	r2, #0
 8004a46:	2104      	movs	r1, #4
 8004a48:	f7ff ff94 	bl	8004974 <std>
 8004a4c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004a50:	2201      	movs	r2, #1
 8004a52:	2109      	movs	r1, #9
 8004a54:	f7ff ff8e 	bl	8004974 <std>
 8004a58:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004a5c:	2202      	movs	r2, #2
 8004a5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a62:	2112      	movs	r1, #18
 8004a64:	f7ff bf86 	b.w	8004974 <std>
 8004a68:	20000374 	.word	0x20000374
 8004a6c:	2000023c 	.word	0x2000023c
 8004a70:	080049e1 	.word	0x080049e1

08004a74 <__sfp_lock_acquire>:
 8004a74:	4801      	ldr	r0, [pc, #4]	; (8004a7c <__sfp_lock_acquire+0x8>)
 8004a76:	f000 b90e 	b.w	8004c96 <__retarget_lock_acquire_recursive>
 8004a7a:	bf00      	nop
 8004a7c:	2000037d 	.word	0x2000037d

08004a80 <__sfp_lock_release>:
 8004a80:	4801      	ldr	r0, [pc, #4]	; (8004a88 <__sfp_lock_release+0x8>)
 8004a82:	f000 b909 	b.w	8004c98 <__retarget_lock_release_recursive>
 8004a86:	bf00      	nop
 8004a88:	2000037d 	.word	0x2000037d

08004a8c <__sinit>:
 8004a8c:	b510      	push	{r4, lr}
 8004a8e:	4604      	mov	r4, r0
 8004a90:	f7ff fff0 	bl	8004a74 <__sfp_lock_acquire>
 8004a94:	6a23      	ldr	r3, [r4, #32]
 8004a96:	b11b      	cbz	r3, 8004aa0 <__sinit+0x14>
 8004a98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a9c:	f7ff bff0 	b.w	8004a80 <__sfp_lock_release>
 8004aa0:	4b04      	ldr	r3, [pc, #16]	; (8004ab4 <__sinit+0x28>)
 8004aa2:	6223      	str	r3, [r4, #32]
 8004aa4:	4b04      	ldr	r3, [pc, #16]	; (8004ab8 <__sinit+0x2c>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d1f5      	bne.n	8004a98 <__sinit+0xc>
 8004aac:	f7ff ffc4 	bl	8004a38 <global_stdio_init.part.0>
 8004ab0:	e7f2      	b.n	8004a98 <__sinit+0xc>
 8004ab2:	bf00      	nop
 8004ab4:	080049f9 	.word	0x080049f9
 8004ab8:	20000374 	.word	0x20000374

08004abc <_fwalk_sglue>:
 8004abc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ac0:	4607      	mov	r7, r0
 8004ac2:	4688      	mov	r8, r1
 8004ac4:	4614      	mov	r4, r2
 8004ac6:	2600      	movs	r6, #0
 8004ac8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004acc:	f1b9 0901 	subs.w	r9, r9, #1
 8004ad0:	d505      	bpl.n	8004ade <_fwalk_sglue+0x22>
 8004ad2:	6824      	ldr	r4, [r4, #0]
 8004ad4:	2c00      	cmp	r4, #0
 8004ad6:	d1f7      	bne.n	8004ac8 <_fwalk_sglue+0xc>
 8004ad8:	4630      	mov	r0, r6
 8004ada:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ade:	89ab      	ldrh	r3, [r5, #12]
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d907      	bls.n	8004af4 <_fwalk_sglue+0x38>
 8004ae4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004ae8:	3301      	adds	r3, #1
 8004aea:	d003      	beq.n	8004af4 <_fwalk_sglue+0x38>
 8004aec:	4629      	mov	r1, r5
 8004aee:	4638      	mov	r0, r7
 8004af0:	47c0      	blx	r8
 8004af2:	4306      	orrs	r6, r0
 8004af4:	3568      	adds	r5, #104	; 0x68
 8004af6:	e7e9      	b.n	8004acc <_fwalk_sglue+0x10>

08004af8 <iprintf>:
 8004af8:	b40f      	push	{r0, r1, r2, r3}
 8004afa:	b507      	push	{r0, r1, r2, lr}
 8004afc:	4906      	ldr	r1, [pc, #24]	; (8004b18 <iprintf+0x20>)
 8004afe:	ab04      	add	r3, sp, #16
 8004b00:	6808      	ldr	r0, [r1, #0]
 8004b02:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b06:	6881      	ldr	r1, [r0, #8]
 8004b08:	9301      	str	r3, [sp, #4]
 8004b0a:	f000 f9e9 	bl	8004ee0 <_vfiprintf_r>
 8004b0e:	b003      	add	sp, #12
 8004b10:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b14:	b004      	add	sp, #16
 8004b16:	4770      	bx	lr
 8004b18:	20000064 	.word	0x20000064

08004b1c <__sread>:
 8004b1c:	b510      	push	{r4, lr}
 8004b1e:	460c      	mov	r4, r1
 8004b20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b24:	f000 f868 	bl	8004bf8 <_read_r>
 8004b28:	2800      	cmp	r0, #0
 8004b2a:	bfab      	itete	ge
 8004b2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004b2e:	89a3      	ldrhlt	r3, [r4, #12]
 8004b30:	181b      	addge	r3, r3, r0
 8004b32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004b36:	bfac      	ite	ge
 8004b38:	6563      	strge	r3, [r4, #84]	; 0x54
 8004b3a:	81a3      	strhlt	r3, [r4, #12]
 8004b3c:	bd10      	pop	{r4, pc}

08004b3e <__swrite>:
 8004b3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b42:	461f      	mov	r7, r3
 8004b44:	898b      	ldrh	r3, [r1, #12]
 8004b46:	05db      	lsls	r3, r3, #23
 8004b48:	4605      	mov	r5, r0
 8004b4a:	460c      	mov	r4, r1
 8004b4c:	4616      	mov	r6, r2
 8004b4e:	d505      	bpl.n	8004b5c <__swrite+0x1e>
 8004b50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b54:	2302      	movs	r3, #2
 8004b56:	2200      	movs	r2, #0
 8004b58:	f000 f83c 	bl	8004bd4 <_lseek_r>
 8004b5c:	89a3      	ldrh	r3, [r4, #12]
 8004b5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b66:	81a3      	strh	r3, [r4, #12]
 8004b68:	4632      	mov	r2, r6
 8004b6a:	463b      	mov	r3, r7
 8004b6c:	4628      	mov	r0, r5
 8004b6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b72:	f000 b853 	b.w	8004c1c <_write_r>

08004b76 <__sseek>:
 8004b76:	b510      	push	{r4, lr}
 8004b78:	460c      	mov	r4, r1
 8004b7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b7e:	f000 f829 	bl	8004bd4 <_lseek_r>
 8004b82:	1c43      	adds	r3, r0, #1
 8004b84:	89a3      	ldrh	r3, [r4, #12]
 8004b86:	bf15      	itete	ne
 8004b88:	6560      	strne	r0, [r4, #84]	; 0x54
 8004b8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004b8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004b92:	81a3      	strheq	r3, [r4, #12]
 8004b94:	bf18      	it	ne
 8004b96:	81a3      	strhne	r3, [r4, #12]
 8004b98:	bd10      	pop	{r4, pc}

08004b9a <__sclose>:
 8004b9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b9e:	f000 b809 	b.w	8004bb4 <_close_r>

08004ba2 <memset>:
 8004ba2:	4402      	add	r2, r0
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d100      	bne.n	8004bac <memset+0xa>
 8004baa:	4770      	bx	lr
 8004bac:	f803 1b01 	strb.w	r1, [r3], #1
 8004bb0:	e7f9      	b.n	8004ba6 <memset+0x4>
	...

08004bb4 <_close_r>:
 8004bb4:	b538      	push	{r3, r4, r5, lr}
 8004bb6:	4d06      	ldr	r5, [pc, #24]	; (8004bd0 <_close_r+0x1c>)
 8004bb8:	2300      	movs	r3, #0
 8004bba:	4604      	mov	r4, r0
 8004bbc:	4608      	mov	r0, r1
 8004bbe:	602b      	str	r3, [r5, #0]
 8004bc0:	f7fc f8bd 	bl	8000d3e <_close>
 8004bc4:	1c43      	adds	r3, r0, #1
 8004bc6:	d102      	bne.n	8004bce <_close_r+0x1a>
 8004bc8:	682b      	ldr	r3, [r5, #0]
 8004bca:	b103      	cbz	r3, 8004bce <_close_r+0x1a>
 8004bcc:	6023      	str	r3, [r4, #0]
 8004bce:	bd38      	pop	{r3, r4, r5, pc}
 8004bd0:	20000378 	.word	0x20000378

08004bd4 <_lseek_r>:
 8004bd4:	b538      	push	{r3, r4, r5, lr}
 8004bd6:	4d07      	ldr	r5, [pc, #28]	; (8004bf4 <_lseek_r+0x20>)
 8004bd8:	4604      	mov	r4, r0
 8004bda:	4608      	mov	r0, r1
 8004bdc:	4611      	mov	r1, r2
 8004bde:	2200      	movs	r2, #0
 8004be0:	602a      	str	r2, [r5, #0]
 8004be2:	461a      	mov	r2, r3
 8004be4:	f7fc f8d2 	bl	8000d8c <_lseek>
 8004be8:	1c43      	adds	r3, r0, #1
 8004bea:	d102      	bne.n	8004bf2 <_lseek_r+0x1e>
 8004bec:	682b      	ldr	r3, [r5, #0]
 8004bee:	b103      	cbz	r3, 8004bf2 <_lseek_r+0x1e>
 8004bf0:	6023      	str	r3, [r4, #0]
 8004bf2:	bd38      	pop	{r3, r4, r5, pc}
 8004bf4:	20000378 	.word	0x20000378

08004bf8 <_read_r>:
 8004bf8:	b538      	push	{r3, r4, r5, lr}
 8004bfa:	4d07      	ldr	r5, [pc, #28]	; (8004c18 <_read_r+0x20>)
 8004bfc:	4604      	mov	r4, r0
 8004bfe:	4608      	mov	r0, r1
 8004c00:	4611      	mov	r1, r2
 8004c02:	2200      	movs	r2, #0
 8004c04:	602a      	str	r2, [r5, #0]
 8004c06:	461a      	mov	r2, r3
 8004c08:	f7fc f860 	bl	8000ccc <_read>
 8004c0c:	1c43      	adds	r3, r0, #1
 8004c0e:	d102      	bne.n	8004c16 <_read_r+0x1e>
 8004c10:	682b      	ldr	r3, [r5, #0]
 8004c12:	b103      	cbz	r3, 8004c16 <_read_r+0x1e>
 8004c14:	6023      	str	r3, [r4, #0]
 8004c16:	bd38      	pop	{r3, r4, r5, pc}
 8004c18:	20000378 	.word	0x20000378

08004c1c <_write_r>:
 8004c1c:	b538      	push	{r3, r4, r5, lr}
 8004c1e:	4d07      	ldr	r5, [pc, #28]	; (8004c3c <_write_r+0x20>)
 8004c20:	4604      	mov	r4, r0
 8004c22:	4608      	mov	r0, r1
 8004c24:	4611      	mov	r1, r2
 8004c26:	2200      	movs	r2, #0
 8004c28:	602a      	str	r2, [r5, #0]
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	f7fc f86b 	bl	8000d06 <_write>
 8004c30:	1c43      	adds	r3, r0, #1
 8004c32:	d102      	bne.n	8004c3a <_write_r+0x1e>
 8004c34:	682b      	ldr	r3, [r5, #0]
 8004c36:	b103      	cbz	r3, 8004c3a <_write_r+0x1e>
 8004c38:	6023      	str	r3, [r4, #0]
 8004c3a:	bd38      	pop	{r3, r4, r5, pc}
 8004c3c:	20000378 	.word	0x20000378

08004c40 <__errno>:
 8004c40:	4b01      	ldr	r3, [pc, #4]	; (8004c48 <__errno+0x8>)
 8004c42:	6818      	ldr	r0, [r3, #0]
 8004c44:	4770      	bx	lr
 8004c46:	bf00      	nop
 8004c48:	20000064 	.word	0x20000064

08004c4c <__libc_init_array>:
 8004c4c:	b570      	push	{r4, r5, r6, lr}
 8004c4e:	4d0d      	ldr	r5, [pc, #52]	; (8004c84 <__libc_init_array+0x38>)
 8004c50:	4c0d      	ldr	r4, [pc, #52]	; (8004c88 <__libc_init_array+0x3c>)
 8004c52:	1b64      	subs	r4, r4, r5
 8004c54:	10a4      	asrs	r4, r4, #2
 8004c56:	2600      	movs	r6, #0
 8004c58:	42a6      	cmp	r6, r4
 8004c5a:	d109      	bne.n	8004c70 <__libc_init_array+0x24>
 8004c5c:	4d0b      	ldr	r5, [pc, #44]	; (8004c8c <__libc_init_array+0x40>)
 8004c5e:	4c0c      	ldr	r4, [pc, #48]	; (8004c90 <__libc_init_array+0x44>)
 8004c60:	f000 fdc0 	bl	80057e4 <_init>
 8004c64:	1b64      	subs	r4, r4, r5
 8004c66:	10a4      	asrs	r4, r4, #2
 8004c68:	2600      	movs	r6, #0
 8004c6a:	42a6      	cmp	r6, r4
 8004c6c:	d105      	bne.n	8004c7a <__libc_init_array+0x2e>
 8004c6e:	bd70      	pop	{r4, r5, r6, pc}
 8004c70:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c74:	4798      	blx	r3
 8004c76:	3601      	adds	r6, #1
 8004c78:	e7ee      	b.n	8004c58 <__libc_init_array+0xc>
 8004c7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c7e:	4798      	blx	r3
 8004c80:	3601      	adds	r6, #1
 8004c82:	e7f2      	b.n	8004c6a <__libc_init_array+0x1e>
 8004c84:	08005874 	.word	0x08005874
 8004c88:	08005874 	.word	0x08005874
 8004c8c:	08005874 	.word	0x08005874
 8004c90:	08005878 	.word	0x08005878

08004c94 <__retarget_lock_init_recursive>:
 8004c94:	4770      	bx	lr

08004c96 <__retarget_lock_acquire_recursive>:
 8004c96:	4770      	bx	lr

08004c98 <__retarget_lock_release_recursive>:
 8004c98:	4770      	bx	lr
	...

08004c9c <_free_r>:
 8004c9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004c9e:	2900      	cmp	r1, #0
 8004ca0:	d044      	beq.n	8004d2c <_free_r+0x90>
 8004ca2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ca6:	9001      	str	r0, [sp, #4]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	f1a1 0404 	sub.w	r4, r1, #4
 8004cae:	bfb8      	it	lt
 8004cb0:	18e4      	addlt	r4, r4, r3
 8004cb2:	f000 f8df 	bl	8004e74 <__malloc_lock>
 8004cb6:	4a1e      	ldr	r2, [pc, #120]	; (8004d30 <_free_r+0x94>)
 8004cb8:	9801      	ldr	r0, [sp, #4]
 8004cba:	6813      	ldr	r3, [r2, #0]
 8004cbc:	b933      	cbnz	r3, 8004ccc <_free_r+0x30>
 8004cbe:	6063      	str	r3, [r4, #4]
 8004cc0:	6014      	str	r4, [r2, #0]
 8004cc2:	b003      	add	sp, #12
 8004cc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004cc8:	f000 b8da 	b.w	8004e80 <__malloc_unlock>
 8004ccc:	42a3      	cmp	r3, r4
 8004cce:	d908      	bls.n	8004ce2 <_free_r+0x46>
 8004cd0:	6825      	ldr	r5, [r4, #0]
 8004cd2:	1961      	adds	r1, r4, r5
 8004cd4:	428b      	cmp	r3, r1
 8004cd6:	bf01      	itttt	eq
 8004cd8:	6819      	ldreq	r1, [r3, #0]
 8004cda:	685b      	ldreq	r3, [r3, #4]
 8004cdc:	1949      	addeq	r1, r1, r5
 8004cde:	6021      	streq	r1, [r4, #0]
 8004ce0:	e7ed      	b.n	8004cbe <_free_r+0x22>
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	b10b      	cbz	r3, 8004cec <_free_r+0x50>
 8004ce8:	42a3      	cmp	r3, r4
 8004cea:	d9fa      	bls.n	8004ce2 <_free_r+0x46>
 8004cec:	6811      	ldr	r1, [r2, #0]
 8004cee:	1855      	adds	r5, r2, r1
 8004cf0:	42a5      	cmp	r5, r4
 8004cf2:	d10b      	bne.n	8004d0c <_free_r+0x70>
 8004cf4:	6824      	ldr	r4, [r4, #0]
 8004cf6:	4421      	add	r1, r4
 8004cf8:	1854      	adds	r4, r2, r1
 8004cfa:	42a3      	cmp	r3, r4
 8004cfc:	6011      	str	r1, [r2, #0]
 8004cfe:	d1e0      	bne.n	8004cc2 <_free_r+0x26>
 8004d00:	681c      	ldr	r4, [r3, #0]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	6053      	str	r3, [r2, #4]
 8004d06:	440c      	add	r4, r1
 8004d08:	6014      	str	r4, [r2, #0]
 8004d0a:	e7da      	b.n	8004cc2 <_free_r+0x26>
 8004d0c:	d902      	bls.n	8004d14 <_free_r+0x78>
 8004d0e:	230c      	movs	r3, #12
 8004d10:	6003      	str	r3, [r0, #0]
 8004d12:	e7d6      	b.n	8004cc2 <_free_r+0x26>
 8004d14:	6825      	ldr	r5, [r4, #0]
 8004d16:	1961      	adds	r1, r4, r5
 8004d18:	428b      	cmp	r3, r1
 8004d1a:	bf04      	itt	eq
 8004d1c:	6819      	ldreq	r1, [r3, #0]
 8004d1e:	685b      	ldreq	r3, [r3, #4]
 8004d20:	6063      	str	r3, [r4, #4]
 8004d22:	bf04      	itt	eq
 8004d24:	1949      	addeq	r1, r1, r5
 8004d26:	6021      	streq	r1, [r4, #0]
 8004d28:	6054      	str	r4, [r2, #4]
 8004d2a:	e7ca      	b.n	8004cc2 <_free_r+0x26>
 8004d2c:	b003      	add	sp, #12
 8004d2e:	bd30      	pop	{r4, r5, pc}
 8004d30:	20000380 	.word	0x20000380

08004d34 <sbrk_aligned>:
 8004d34:	b570      	push	{r4, r5, r6, lr}
 8004d36:	4e0e      	ldr	r6, [pc, #56]	; (8004d70 <sbrk_aligned+0x3c>)
 8004d38:	460c      	mov	r4, r1
 8004d3a:	6831      	ldr	r1, [r6, #0]
 8004d3c:	4605      	mov	r5, r0
 8004d3e:	b911      	cbnz	r1, 8004d46 <sbrk_aligned+0x12>
 8004d40:	f000 fcbc 	bl	80056bc <_sbrk_r>
 8004d44:	6030      	str	r0, [r6, #0]
 8004d46:	4621      	mov	r1, r4
 8004d48:	4628      	mov	r0, r5
 8004d4a:	f000 fcb7 	bl	80056bc <_sbrk_r>
 8004d4e:	1c43      	adds	r3, r0, #1
 8004d50:	d00a      	beq.n	8004d68 <sbrk_aligned+0x34>
 8004d52:	1cc4      	adds	r4, r0, #3
 8004d54:	f024 0403 	bic.w	r4, r4, #3
 8004d58:	42a0      	cmp	r0, r4
 8004d5a:	d007      	beq.n	8004d6c <sbrk_aligned+0x38>
 8004d5c:	1a21      	subs	r1, r4, r0
 8004d5e:	4628      	mov	r0, r5
 8004d60:	f000 fcac 	bl	80056bc <_sbrk_r>
 8004d64:	3001      	adds	r0, #1
 8004d66:	d101      	bne.n	8004d6c <sbrk_aligned+0x38>
 8004d68:	f04f 34ff 	mov.w	r4, #4294967295
 8004d6c:	4620      	mov	r0, r4
 8004d6e:	bd70      	pop	{r4, r5, r6, pc}
 8004d70:	20000384 	.word	0x20000384

08004d74 <_malloc_r>:
 8004d74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d78:	1ccd      	adds	r5, r1, #3
 8004d7a:	f025 0503 	bic.w	r5, r5, #3
 8004d7e:	3508      	adds	r5, #8
 8004d80:	2d0c      	cmp	r5, #12
 8004d82:	bf38      	it	cc
 8004d84:	250c      	movcc	r5, #12
 8004d86:	2d00      	cmp	r5, #0
 8004d88:	4607      	mov	r7, r0
 8004d8a:	db01      	blt.n	8004d90 <_malloc_r+0x1c>
 8004d8c:	42a9      	cmp	r1, r5
 8004d8e:	d905      	bls.n	8004d9c <_malloc_r+0x28>
 8004d90:	230c      	movs	r3, #12
 8004d92:	603b      	str	r3, [r7, #0]
 8004d94:	2600      	movs	r6, #0
 8004d96:	4630      	mov	r0, r6
 8004d98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d9c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004e70 <_malloc_r+0xfc>
 8004da0:	f000 f868 	bl	8004e74 <__malloc_lock>
 8004da4:	f8d8 3000 	ldr.w	r3, [r8]
 8004da8:	461c      	mov	r4, r3
 8004daa:	bb5c      	cbnz	r4, 8004e04 <_malloc_r+0x90>
 8004dac:	4629      	mov	r1, r5
 8004dae:	4638      	mov	r0, r7
 8004db0:	f7ff ffc0 	bl	8004d34 <sbrk_aligned>
 8004db4:	1c43      	adds	r3, r0, #1
 8004db6:	4604      	mov	r4, r0
 8004db8:	d155      	bne.n	8004e66 <_malloc_r+0xf2>
 8004dba:	f8d8 4000 	ldr.w	r4, [r8]
 8004dbe:	4626      	mov	r6, r4
 8004dc0:	2e00      	cmp	r6, #0
 8004dc2:	d145      	bne.n	8004e50 <_malloc_r+0xdc>
 8004dc4:	2c00      	cmp	r4, #0
 8004dc6:	d048      	beq.n	8004e5a <_malloc_r+0xe6>
 8004dc8:	6823      	ldr	r3, [r4, #0]
 8004dca:	4631      	mov	r1, r6
 8004dcc:	4638      	mov	r0, r7
 8004dce:	eb04 0903 	add.w	r9, r4, r3
 8004dd2:	f000 fc73 	bl	80056bc <_sbrk_r>
 8004dd6:	4581      	cmp	r9, r0
 8004dd8:	d13f      	bne.n	8004e5a <_malloc_r+0xe6>
 8004dda:	6821      	ldr	r1, [r4, #0]
 8004ddc:	1a6d      	subs	r5, r5, r1
 8004dde:	4629      	mov	r1, r5
 8004de0:	4638      	mov	r0, r7
 8004de2:	f7ff ffa7 	bl	8004d34 <sbrk_aligned>
 8004de6:	3001      	adds	r0, #1
 8004de8:	d037      	beq.n	8004e5a <_malloc_r+0xe6>
 8004dea:	6823      	ldr	r3, [r4, #0]
 8004dec:	442b      	add	r3, r5
 8004dee:	6023      	str	r3, [r4, #0]
 8004df0:	f8d8 3000 	ldr.w	r3, [r8]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d038      	beq.n	8004e6a <_malloc_r+0xf6>
 8004df8:	685a      	ldr	r2, [r3, #4]
 8004dfa:	42a2      	cmp	r2, r4
 8004dfc:	d12b      	bne.n	8004e56 <_malloc_r+0xe2>
 8004dfe:	2200      	movs	r2, #0
 8004e00:	605a      	str	r2, [r3, #4]
 8004e02:	e00f      	b.n	8004e24 <_malloc_r+0xb0>
 8004e04:	6822      	ldr	r2, [r4, #0]
 8004e06:	1b52      	subs	r2, r2, r5
 8004e08:	d41f      	bmi.n	8004e4a <_malloc_r+0xd6>
 8004e0a:	2a0b      	cmp	r2, #11
 8004e0c:	d917      	bls.n	8004e3e <_malloc_r+0xca>
 8004e0e:	1961      	adds	r1, r4, r5
 8004e10:	42a3      	cmp	r3, r4
 8004e12:	6025      	str	r5, [r4, #0]
 8004e14:	bf18      	it	ne
 8004e16:	6059      	strne	r1, [r3, #4]
 8004e18:	6863      	ldr	r3, [r4, #4]
 8004e1a:	bf08      	it	eq
 8004e1c:	f8c8 1000 	streq.w	r1, [r8]
 8004e20:	5162      	str	r2, [r4, r5]
 8004e22:	604b      	str	r3, [r1, #4]
 8004e24:	4638      	mov	r0, r7
 8004e26:	f104 060b 	add.w	r6, r4, #11
 8004e2a:	f000 f829 	bl	8004e80 <__malloc_unlock>
 8004e2e:	f026 0607 	bic.w	r6, r6, #7
 8004e32:	1d23      	adds	r3, r4, #4
 8004e34:	1af2      	subs	r2, r6, r3
 8004e36:	d0ae      	beq.n	8004d96 <_malloc_r+0x22>
 8004e38:	1b9b      	subs	r3, r3, r6
 8004e3a:	50a3      	str	r3, [r4, r2]
 8004e3c:	e7ab      	b.n	8004d96 <_malloc_r+0x22>
 8004e3e:	42a3      	cmp	r3, r4
 8004e40:	6862      	ldr	r2, [r4, #4]
 8004e42:	d1dd      	bne.n	8004e00 <_malloc_r+0x8c>
 8004e44:	f8c8 2000 	str.w	r2, [r8]
 8004e48:	e7ec      	b.n	8004e24 <_malloc_r+0xb0>
 8004e4a:	4623      	mov	r3, r4
 8004e4c:	6864      	ldr	r4, [r4, #4]
 8004e4e:	e7ac      	b.n	8004daa <_malloc_r+0x36>
 8004e50:	4634      	mov	r4, r6
 8004e52:	6876      	ldr	r6, [r6, #4]
 8004e54:	e7b4      	b.n	8004dc0 <_malloc_r+0x4c>
 8004e56:	4613      	mov	r3, r2
 8004e58:	e7cc      	b.n	8004df4 <_malloc_r+0x80>
 8004e5a:	230c      	movs	r3, #12
 8004e5c:	603b      	str	r3, [r7, #0]
 8004e5e:	4638      	mov	r0, r7
 8004e60:	f000 f80e 	bl	8004e80 <__malloc_unlock>
 8004e64:	e797      	b.n	8004d96 <_malloc_r+0x22>
 8004e66:	6025      	str	r5, [r4, #0]
 8004e68:	e7dc      	b.n	8004e24 <_malloc_r+0xb0>
 8004e6a:	605b      	str	r3, [r3, #4]
 8004e6c:	deff      	udf	#255	; 0xff
 8004e6e:	bf00      	nop
 8004e70:	20000380 	.word	0x20000380

08004e74 <__malloc_lock>:
 8004e74:	4801      	ldr	r0, [pc, #4]	; (8004e7c <__malloc_lock+0x8>)
 8004e76:	f7ff bf0e 	b.w	8004c96 <__retarget_lock_acquire_recursive>
 8004e7a:	bf00      	nop
 8004e7c:	2000037c 	.word	0x2000037c

08004e80 <__malloc_unlock>:
 8004e80:	4801      	ldr	r0, [pc, #4]	; (8004e88 <__malloc_unlock+0x8>)
 8004e82:	f7ff bf09 	b.w	8004c98 <__retarget_lock_release_recursive>
 8004e86:	bf00      	nop
 8004e88:	2000037c 	.word	0x2000037c

08004e8c <__sfputc_r>:
 8004e8c:	6893      	ldr	r3, [r2, #8]
 8004e8e:	3b01      	subs	r3, #1
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	b410      	push	{r4}
 8004e94:	6093      	str	r3, [r2, #8]
 8004e96:	da08      	bge.n	8004eaa <__sfputc_r+0x1e>
 8004e98:	6994      	ldr	r4, [r2, #24]
 8004e9a:	42a3      	cmp	r3, r4
 8004e9c:	db01      	blt.n	8004ea2 <__sfputc_r+0x16>
 8004e9e:	290a      	cmp	r1, #10
 8004ea0:	d103      	bne.n	8004eaa <__sfputc_r+0x1e>
 8004ea2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ea6:	f000 bb73 	b.w	8005590 <__swbuf_r>
 8004eaa:	6813      	ldr	r3, [r2, #0]
 8004eac:	1c58      	adds	r0, r3, #1
 8004eae:	6010      	str	r0, [r2, #0]
 8004eb0:	7019      	strb	r1, [r3, #0]
 8004eb2:	4608      	mov	r0, r1
 8004eb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004eb8:	4770      	bx	lr

08004eba <__sfputs_r>:
 8004eba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ebc:	4606      	mov	r6, r0
 8004ebe:	460f      	mov	r7, r1
 8004ec0:	4614      	mov	r4, r2
 8004ec2:	18d5      	adds	r5, r2, r3
 8004ec4:	42ac      	cmp	r4, r5
 8004ec6:	d101      	bne.n	8004ecc <__sfputs_r+0x12>
 8004ec8:	2000      	movs	r0, #0
 8004eca:	e007      	b.n	8004edc <__sfputs_r+0x22>
 8004ecc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ed0:	463a      	mov	r2, r7
 8004ed2:	4630      	mov	r0, r6
 8004ed4:	f7ff ffda 	bl	8004e8c <__sfputc_r>
 8004ed8:	1c43      	adds	r3, r0, #1
 8004eda:	d1f3      	bne.n	8004ec4 <__sfputs_r+0xa>
 8004edc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004ee0 <_vfiprintf_r>:
 8004ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ee4:	460d      	mov	r5, r1
 8004ee6:	b09d      	sub	sp, #116	; 0x74
 8004ee8:	4614      	mov	r4, r2
 8004eea:	4698      	mov	r8, r3
 8004eec:	4606      	mov	r6, r0
 8004eee:	b118      	cbz	r0, 8004ef8 <_vfiprintf_r+0x18>
 8004ef0:	6a03      	ldr	r3, [r0, #32]
 8004ef2:	b90b      	cbnz	r3, 8004ef8 <_vfiprintf_r+0x18>
 8004ef4:	f7ff fdca 	bl	8004a8c <__sinit>
 8004ef8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004efa:	07d9      	lsls	r1, r3, #31
 8004efc:	d405      	bmi.n	8004f0a <_vfiprintf_r+0x2a>
 8004efe:	89ab      	ldrh	r3, [r5, #12]
 8004f00:	059a      	lsls	r2, r3, #22
 8004f02:	d402      	bmi.n	8004f0a <_vfiprintf_r+0x2a>
 8004f04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f06:	f7ff fec6 	bl	8004c96 <__retarget_lock_acquire_recursive>
 8004f0a:	89ab      	ldrh	r3, [r5, #12]
 8004f0c:	071b      	lsls	r3, r3, #28
 8004f0e:	d501      	bpl.n	8004f14 <_vfiprintf_r+0x34>
 8004f10:	692b      	ldr	r3, [r5, #16]
 8004f12:	b99b      	cbnz	r3, 8004f3c <_vfiprintf_r+0x5c>
 8004f14:	4629      	mov	r1, r5
 8004f16:	4630      	mov	r0, r6
 8004f18:	f000 fb78 	bl	800560c <__swsetup_r>
 8004f1c:	b170      	cbz	r0, 8004f3c <_vfiprintf_r+0x5c>
 8004f1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f20:	07dc      	lsls	r4, r3, #31
 8004f22:	d504      	bpl.n	8004f2e <_vfiprintf_r+0x4e>
 8004f24:	f04f 30ff 	mov.w	r0, #4294967295
 8004f28:	b01d      	add	sp, #116	; 0x74
 8004f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f2e:	89ab      	ldrh	r3, [r5, #12]
 8004f30:	0598      	lsls	r0, r3, #22
 8004f32:	d4f7      	bmi.n	8004f24 <_vfiprintf_r+0x44>
 8004f34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f36:	f7ff feaf 	bl	8004c98 <__retarget_lock_release_recursive>
 8004f3a:	e7f3      	b.n	8004f24 <_vfiprintf_r+0x44>
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	9309      	str	r3, [sp, #36]	; 0x24
 8004f40:	2320      	movs	r3, #32
 8004f42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f46:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f4a:	2330      	movs	r3, #48	; 0x30
 8004f4c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005100 <_vfiprintf_r+0x220>
 8004f50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f54:	f04f 0901 	mov.w	r9, #1
 8004f58:	4623      	mov	r3, r4
 8004f5a:	469a      	mov	sl, r3
 8004f5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f60:	b10a      	cbz	r2, 8004f66 <_vfiprintf_r+0x86>
 8004f62:	2a25      	cmp	r2, #37	; 0x25
 8004f64:	d1f9      	bne.n	8004f5a <_vfiprintf_r+0x7a>
 8004f66:	ebba 0b04 	subs.w	fp, sl, r4
 8004f6a:	d00b      	beq.n	8004f84 <_vfiprintf_r+0xa4>
 8004f6c:	465b      	mov	r3, fp
 8004f6e:	4622      	mov	r2, r4
 8004f70:	4629      	mov	r1, r5
 8004f72:	4630      	mov	r0, r6
 8004f74:	f7ff ffa1 	bl	8004eba <__sfputs_r>
 8004f78:	3001      	adds	r0, #1
 8004f7a:	f000 80a9 	beq.w	80050d0 <_vfiprintf_r+0x1f0>
 8004f7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f80:	445a      	add	r2, fp
 8004f82:	9209      	str	r2, [sp, #36]	; 0x24
 8004f84:	f89a 3000 	ldrb.w	r3, [sl]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	f000 80a1 	beq.w	80050d0 <_vfiprintf_r+0x1f0>
 8004f8e:	2300      	movs	r3, #0
 8004f90:	f04f 32ff 	mov.w	r2, #4294967295
 8004f94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f98:	f10a 0a01 	add.w	sl, sl, #1
 8004f9c:	9304      	str	r3, [sp, #16]
 8004f9e:	9307      	str	r3, [sp, #28]
 8004fa0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004fa4:	931a      	str	r3, [sp, #104]	; 0x68
 8004fa6:	4654      	mov	r4, sl
 8004fa8:	2205      	movs	r2, #5
 8004faa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fae:	4854      	ldr	r0, [pc, #336]	; (8005100 <_vfiprintf_r+0x220>)
 8004fb0:	f7fb f916 	bl	80001e0 <memchr>
 8004fb4:	9a04      	ldr	r2, [sp, #16]
 8004fb6:	b9d8      	cbnz	r0, 8004ff0 <_vfiprintf_r+0x110>
 8004fb8:	06d1      	lsls	r1, r2, #27
 8004fba:	bf44      	itt	mi
 8004fbc:	2320      	movmi	r3, #32
 8004fbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004fc2:	0713      	lsls	r3, r2, #28
 8004fc4:	bf44      	itt	mi
 8004fc6:	232b      	movmi	r3, #43	; 0x2b
 8004fc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004fcc:	f89a 3000 	ldrb.w	r3, [sl]
 8004fd0:	2b2a      	cmp	r3, #42	; 0x2a
 8004fd2:	d015      	beq.n	8005000 <_vfiprintf_r+0x120>
 8004fd4:	9a07      	ldr	r2, [sp, #28]
 8004fd6:	4654      	mov	r4, sl
 8004fd8:	2000      	movs	r0, #0
 8004fda:	f04f 0c0a 	mov.w	ip, #10
 8004fde:	4621      	mov	r1, r4
 8004fe0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004fe4:	3b30      	subs	r3, #48	; 0x30
 8004fe6:	2b09      	cmp	r3, #9
 8004fe8:	d94d      	bls.n	8005086 <_vfiprintf_r+0x1a6>
 8004fea:	b1b0      	cbz	r0, 800501a <_vfiprintf_r+0x13a>
 8004fec:	9207      	str	r2, [sp, #28]
 8004fee:	e014      	b.n	800501a <_vfiprintf_r+0x13a>
 8004ff0:	eba0 0308 	sub.w	r3, r0, r8
 8004ff4:	fa09 f303 	lsl.w	r3, r9, r3
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	9304      	str	r3, [sp, #16]
 8004ffc:	46a2      	mov	sl, r4
 8004ffe:	e7d2      	b.n	8004fa6 <_vfiprintf_r+0xc6>
 8005000:	9b03      	ldr	r3, [sp, #12]
 8005002:	1d19      	adds	r1, r3, #4
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	9103      	str	r1, [sp, #12]
 8005008:	2b00      	cmp	r3, #0
 800500a:	bfbb      	ittet	lt
 800500c:	425b      	neglt	r3, r3
 800500e:	f042 0202 	orrlt.w	r2, r2, #2
 8005012:	9307      	strge	r3, [sp, #28]
 8005014:	9307      	strlt	r3, [sp, #28]
 8005016:	bfb8      	it	lt
 8005018:	9204      	strlt	r2, [sp, #16]
 800501a:	7823      	ldrb	r3, [r4, #0]
 800501c:	2b2e      	cmp	r3, #46	; 0x2e
 800501e:	d10c      	bne.n	800503a <_vfiprintf_r+0x15a>
 8005020:	7863      	ldrb	r3, [r4, #1]
 8005022:	2b2a      	cmp	r3, #42	; 0x2a
 8005024:	d134      	bne.n	8005090 <_vfiprintf_r+0x1b0>
 8005026:	9b03      	ldr	r3, [sp, #12]
 8005028:	1d1a      	adds	r2, r3, #4
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	9203      	str	r2, [sp, #12]
 800502e:	2b00      	cmp	r3, #0
 8005030:	bfb8      	it	lt
 8005032:	f04f 33ff 	movlt.w	r3, #4294967295
 8005036:	3402      	adds	r4, #2
 8005038:	9305      	str	r3, [sp, #20]
 800503a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005110 <_vfiprintf_r+0x230>
 800503e:	7821      	ldrb	r1, [r4, #0]
 8005040:	2203      	movs	r2, #3
 8005042:	4650      	mov	r0, sl
 8005044:	f7fb f8cc 	bl	80001e0 <memchr>
 8005048:	b138      	cbz	r0, 800505a <_vfiprintf_r+0x17a>
 800504a:	9b04      	ldr	r3, [sp, #16]
 800504c:	eba0 000a 	sub.w	r0, r0, sl
 8005050:	2240      	movs	r2, #64	; 0x40
 8005052:	4082      	lsls	r2, r0
 8005054:	4313      	orrs	r3, r2
 8005056:	3401      	adds	r4, #1
 8005058:	9304      	str	r3, [sp, #16]
 800505a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800505e:	4829      	ldr	r0, [pc, #164]	; (8005104 <_vfiprintf_r+0x224>)
 8005060:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005064:	2206      	movs	r2, #6
 8005066:	f7fb f8bb 	bl	80001e0 <memchr>
 800506a:	2800      	cmp	r0, #0
 800506c:	d03f      	beq.n	80050ee <_vfiprintf_r+0x20e>
 800506e:	4b26      	ldr	r3, [pc, #152]	; (8005108 <_vfiprintf_r+0x228>)
 8005070:	bb1b      	cbnz	r3, 80050ba <_vfiprintf_r+0x1da>
 8005072:	9b03      	ldr	r3, [sp, #12]
 8005074:	3307      	adds	r3, #7
 8005076:	f023 0307 	bic.w	r3, r3, #7
 800507a:	3308      	adds	r3, #8
 800507c:	9303      	str	r3, [sp, #12]
 800507e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005080:	443b      	add	r3, r7
 8005082:	9309      	str	r3, [sp, #36]	; 0x24
 8005084:	e768      	b.n	8004f58 <_vfiprintf_r+0x78>
 8005086:	fb0c 3202 	mla	r2, ip, r2, r3
 800508a:	460c      	mov	r4, r1
 800508c:	2001      	movs	r0, #1
 800508e:	e7a6      	b.n	8004fde <_vfiprintf_r+0xfe>
 8005090:	2300      	movs	r3, #0
 8005092:	3401      	adds	r4, #1
 8005094:	9305      	str	r3, [sp, #20]
 8005096:	4619      	mov	r1, r3
 8005098:	f04f 0c0a 	mov.w	ip, #10
 800509c:	4620      	mov	r0, r4
 800509e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80050a2:	3a30      	subs	r2, #48	; 0x30
 80050a4:	2a09      	cmp	r2, #9
 80050a6:	d903      	bls.n	80050b0 <_vfiprintf_r+0x1d0>
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d0c6      	beq.n	800503a <_vfiprintf_r+0x15a>
 80050ac:	9105      	str	r1, [sp, #20]
 80050ae:	e7c4      	b.n	800503a <_vfiprintf_r+0x15a>
 80050b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80050b4:	4604      	mov	r4, r0
 80050b6:	2301      	movs	r3, #1
 80050b8:	e7f0      	b.n	800509c <_vfiprintf_r+0x1bc>
 80050ba:	ab03      	add	r3, sp, #12
 80050bc:	9300      	str	r3, [sp, #0]
 80050be:	462a      	mov	r2, r5
 80050c0:	4b12      	ldr	r3, [pc, #72]	; (800510c <_vfiprintf_r+0x22c>)
 80050c2:	a904      	add	r1, sp, #16
 80050c4:	4630      	mov	r0, r6
 80050c6:	f3af 8000 	nop.w
 80050ca:	4607      	mov	r7, r0
 80050cc:	1c78      	adds	r0, r7, #1
 80050ce:	d1d6      	bne.n	800507e <_vfiprintf_r+0x19e>
 80050d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80050d2:	07d9      	lsls	r1, r3, #31
 80050d4:	d405      	bmi.n	80050e2 <_vfiprintf_r+0x202>
 80050d6:	89ab      	ldrh	r3, [r5, #12]
 80050d8:	059a      	lsls	r2, r3, #22
 80050da:	d402      	bmi.n	80050e2 <_vfiprintf_r+0x202>
 80050dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80050de:	f7ff fddb 	bl	8004c98 <__retarget_lock_release_recursive>
 80050e2:	89ab      	ldrh	r3, [r5, #12]
 80050e4:	065b      	lsls	r3, r3, #25
 80050e6:	f53f af1d 	bmi.w	8004f24 <_vfiprintf_r+0x44>
 80050ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 80050ec:	e71c      	b.n	8004f28 <_vfiprintf_r+0x48>
 80050ee:	ab03      	add	r3, sp, #12
 80050f0:	9300      	str	r3, [sp, #0]
 80050f2:	462a      	mov	r2, r5
 80050f4:	4b05      	ldr	r3, [pc, #20]	; (800510c <_vfiprintf_r+0x22c>)
 80050f6:	a904      	add	r1, sp, #16
 80050f8:	4630      	mov	r0, r6
 80050fa:	f000 f879 	bl	80051f0 <_printf_i>
 80050fe:	e7e4      	b.n	80050ca <_vfiprintf_r+0x1ea>
 8005100:	08005838 	.word	0x08005838
 8005104:	08005842 	.word	0x08005842
 8005108:	00000000 	.word	0x00000000
 800510c:	08004ebb 	.word	0x08004ebb
 8005110:	0800583e 	.word	0x0800583e

08005114 <_printf_common>:
 8005114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005118:	4616      	mov	r6, r2
 800511a:	4699      	mov	r9, r3
 800511c:	688a      	ldr	r2, [r1, #8]
 800511e:	690b      	ldr	r3, [r1, #16]
 8005120:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005124:	4293      	cmp	r3, r2
 8005126:	bfb8      	it	lt
 8005128:	4613      	movlt	r3, r2
 800512a:	6033      	str	r3, [r6, #0]
 800512c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005130:	4607      	mov	r7, r0
 8005132:	460c      	mov	r4, r1
 8005134:	b10a      	cbz	r2, 800513a <_printf_common+0x26>
 8005136:	3301      	adds	r3, #1
 8005138:	6033      	str	r3, [r6, #0]
 800513a:	6823      	ldr	r3, [r4, #0]
 800513c:	0699      	lsls	r1, r3, #26
 800513e:	bf42      	ittt	mi
 8005140:	6833      	ldrmi	r3, [r6, #0]
 8005142:	3302      	addmi	r3, #2
 8005144:	6033      	strmi	r3, [r6, #0]
 8005146:	6825      	ldr	r5, [r4, #0]
 8005148:	f015 0506 	ands.w	r5, r5, #6
 800514c:	d106      	bne.n	800515c <_printf_common+0x48>
 800514e:	f104 0a19 	add.w	sl, r4, #25
 8005152:	68e3      	ldr	r3, [r4, #12]
 8005154:	6832      	ldr	r2, [r6, #0]
 8005156:	1a9b      	subs	r3, r3, r2
 8005158:	42ab      	cmp	r3, r5
 800515a:	dc26      	bgt.n	80051aa <_printf_common+0x96>
 800515c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005160:	1e13      	subs	r3, r2, #0
 8005162:	6822      	ldr	r2, [r4, #0]
 8005164:	bf18      	it	ne
 8005166:	2301      	movne	r3, #1
 8005168:	0692      	lsls	r2, r2, #26
 800516a:	d42b      	bmi.n	80051c4 <_printf_common+0xb0>
 800516c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005170:	4649      	mov	r1, r9
 8005172:	4638      	mov	r0, r7
 8005174:	47c0      	blx	r8
 8005176:	3001      	adds	r0, #1
 8005178:	d01e      	beq.n	80051b8 <_printf_common+0xa4>
 800517a:	6823      	ldr	r3, [r4, #0]
 800517c:	6922      	ldr	r2, [r4, #16]
 800517e:	f003 0306 	and.w	r3, r3, #6
 8005182:	2b04      	cmp	r3, #4
 8005184:	bf02      	ittt	eq
 8005186:	68e5      	ldreq	r5, [r4, #12]
 8005188:	6833      	ldreq	r3, [r6, #0]
 800518a:	1aed      	subeq	r5, r5, r3
 800518c:	68a3      	ldr	r3, [r4, #8]
 800518e:	bf0c      	ite	eq
 8005190:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005194:	2500      	movne	r5, #0
 8005196:	4293      	cmp	r3, r2
 8005198:	bfc4      	itt	gt
 800519a:	1a9b      	subgt	r3, r3, r2
 800519c:	18ed      	addgt	r5, r5, r3
 800519e:	2600      	movs	r6, #0
 80051a0:	341a      	adds	r4, #26
 80051a2:	42b5      	cmp	r5, r6
 80051a4:	d11a      	bne.n	80051dc <_printf_common+0xc8>
 80051a6:	2000      	movs	r0, #0
 80051a8:	e008      	b.n	80051bc <_printf_common+0xa8>
 80051aa:	2301      	movs	r3, #1
 80051ac:	4652      	mov	r2, sl
 80051ae:	4649      	mov	r1, r9
 80051b0:	4638      	mov	r0, r7
 80051b2:	47c0      	blx	r8
 80051b4:	3001      	adds	r0, #1
 80051b6:	d103      	bne.n	80051c0 <_printf_common+0xac>
 80051b8:	f04f 30ff 	mov.w	r0, #4294967295
 80051bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051c0:	3501      	adds	r5, #1
 80051c2:	e7c6      	b.n	8005152 <_printf_common+0x3e>
 80051c4:	18e1      	adds	r1, r4, r3
 80051c6:	1c5a      	adds	r2, r3, #1
 80051c8:	2030      	movs	r0, #48	; 0x30
 80051ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80051ce:	4422      	add	r2, r4
 80051d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80051d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80051d8:	3302      	adds	r3, #2
 80051da:	e7c7      	b.n	800516c <_printf_common+0x58>
 80051dc:	2301      	movs	r3, #1
 80051de:	4622      	mov	r2, r4
 80051e0:	4649      	mov	r1, r9
 80051e2:	4638      	mov	r0, r7
 80051e4:	47c0      	blx	r8
 80051e6:	3001      	adds	r0, #1
 80051e8:	d0e6      	beq.n	80051b8 <_printf_common+0xa4>
 80051ea:	3601      	adds	r6, #1
 80051ec:	e7d9      	b.n	80051a2 <_printf_common+0x8e>
	...

080051f0 <_printf_i>:
 80051f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051f4:	7e0f      	ldrb	r7, [r1, #24]
 80051f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80051f8:	2f78      	cmp	r7, #120	; 0x78
 80051fa:	4691      	mov	r9, r2
 80051fc:	4680      	mov	r8, r0
 80051fe:	460c      	mov	r4, r1
 8005200:	469a      	mov	sl, r3
 8005202:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005206:	d807      	bhi.n	8005218 <_printf_i+0x28>
 8005208:	2f62      	cmp	r7, #98	; 0x62
 800520a:	d80a      	bhi.n	8005222 <_printf_i+0x32>
 800520c:	2f00      	cmp	r7, #0
 800520e:	f000 80d4 	beq.w	80053ba <_printf_i+0x1ca>
 8005212:	2f58      	cmp	r7, #88	; 0x58
 8005214:	f000 80c0 	beq.w	8005398 <_printf_i+0x1a8>
 8005218:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800521c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005220:	e03a      	b.n	8005298 <_printf_i+0xa8>
 8005222:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005226:	2b15      	cmp	r3, #21
 8005228:	d8f6      	bhi.n	8005218 <_printf_i+0x28>
 800522a:	a101      	add	r1, pc, #4	; (adr r1, 8005230 <_printf_i+0x40>)
 800522c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005230:	08005289 	.word	0x08005289
 8005234:	0800529d 	.word	0x0800529d
 8005238:	08005219 	.word	0x08005219
 800523c:	08005219 	.word	0x08005219
 8005240:	08005219 	.word	0x08005219
 8005244:	08005219 	.word	0x08005219
 8005248:	0800529d 	.word	0x0800529d
 800524c:	08005219 	.word	0x08005219
 8005250:	08005219 	.word	0x08005219
 8005254:	08005219 	.word	0x08005219
 8005258:	08005219 	.word	0x08005219
 800525c:	080053a1 	.word	0x080053a1
 8005260:	080052c9 	.word	0x080052c9
 8005264:	0800535b 	.word	0x0800535b
 8005268:	08005219 	.word	0x08005219
 800526c:	08005219 	.word	0x08005219
 8005270:	080053c3 	.word	0x080053c3
 8005274:	08005219 	.word	0x08005219
 8005278:	080052c9 	.word	0x080052c9
 800527c:	08005219 	.word	0x08005219
 8005280:	08005219 	.word	0x08005219
 8005284:	08005363 	.word	0x08005363
 8005288:	682b      	ldr	r3, [r5, #0]
 800528a:	1d1a      	adds	r2, r3, #4
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	602a      	str	r2, [r5, #0]
 8005290:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005294:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005298:	2301      	movs	r3, #1
 800529a:	e09f      	b.n	80053dc <_printf_i+0x1ec>
 800529c:	6820      	ldr	r0, [r4, #0]
 800529e:	682b      	ldr	r3, [r5, #0]
 80052a0:	0607      	lsls	r7, r0, #24
 80052a2:	f103 0104 	add.w	r1, r3, #4
 80052a6:	6029      	str	r1, [r5, #0]
 80052a8:	d501      	bpl.n	80052ae <_printf_i+0xbe>
 80052aa:	681e      	ldr	r6, [r3, #0]
 80052ac:	e003      	b.n	80052b6 <_printf_i+0xc6>
 80052ae:	0646      	lsls	r6, r0, #25
 80052b0:	d5fb      	bpl.n	80052aa <_printf_i+0xba>
 80052b2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80052b6:	2e00      	cmp	r6, #0
 80052b8:	da03      	bge.n	80052c2 <_printf_i+0xd2>
 80052ba:	232d      	movs	r3, #45	; 0x2d
 80052bc:	4276      	negs	r6, r6
 80052be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052c2:	485a      	ldr	r0, [pc, #360]	; (800542c <_printf_i+0x23c>)
 80052c4:	230a      	movs	r3, #10
 80052c6:	e012      	b.n	80052ee <_printf_i+0xfe>
 80052c8:	682b      	ldr	r3, [r5, #0]
 80052ca:	6820      	ldr	r0, [r4, #0]
 80052cc:	1d19      	adds	r1, r3, #4
 80052ce:	6029      	str	r1, [r5, #0]
 80052d0:	0605      	lsls	r5, r0, #24
 80052d2:	d501      	bpl.n	80052d8 <_printf_i+0xe8>
 80052d4:	681e      	ldr	r6, [r3, #0]
 80052d6:	e002      	b.n	80052de <_printf_i+0xee>
 80052d8:	0641      	lsls	r1, r0, #25
 80052da:	d5fb      	bpl.n	80052d4 <_printf_i+0xe4>
 80052dc:	881e      	ldrh	r6, [r3, #0]
 80052de:	4853      	ldr	r0, [pc, #332]	; (800542c <_printf_i+0x23c>)
 80052e0:	2f6f      	cmp	r7, #111	; 0x6f
 80052e2:	bf0c      	ite	eq
 80052e4:	2308      	moveq	r3, #8
 80052e6:	230a      	movne	r3, #10
 80052e8:	2100      	movs	r1, #0
 80052ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80052ee:	6865      	ldr	r5, [r4, #4]
 80052f0:	60a5      	str	r5, [r4, #8]
 80052f2:	2d00      	cmp	r5, #0
 80052f4:	bfa2      	ittt	ge
 80052f6:	6821      	ldrge	r1, [r4, #0]
 80052f8:	f021 0104 	bicge.w	r1, r1, #4
 80052fc:	6021      	strge	r1, [r4, #0]
 80052fe:	b90e      	cbnz	r6, 8005304 <_printf_i+0x114>
 8005300:	2d00      	cmp	r5, #0
 8005302:	d04b      	beq.n	800539c <_printf_i+0x1ac>
 8005304:	4615      	mov	r5, r2
 8005306:	fbb6 f1f3 	udiv	r1, r6, r3
 800530a:	fb03 6711 	mls	r7, r3, r1, r6
 800530e:	5dc7      	ldrb	r7, [r0, r7]
 8005310:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005314:	4637      	mov	r7, r6
 8005316:	42bb      	cmp	r3, r7
 8005318:	460e      	mov	r6, r1
 800531a:	d9f4      	bls.n	8005306 <_printf_i+0x116>
 800531c:	2b08      	cmp	r3, #8
 800531e:	d10b      	bne.n	8005338 <_printf_i+0x148>
 8005320:	6823      	ldr	r3, [r4, #0]
 8005322:	07de      	lsls	r6, r3, #31
 8005324:	d508      	bpl.n	8005338 <_printf_i+0x148>
 8005326:	6923      	ldr	r3, [r4, #16]
 8005328:	6861      	ldr	r1, [r4, #4]
 800532a:	4299      	cmp	r1, r3
 800532c:	bfde      	ittt	le
 800532e:	2330      	movle	r3, #48	; 0x30
 8005330:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005334:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005338:	1b52      	subs	r2, r2, r5
 800533a:	6122      	str	r2, [r4, #16]
 800533c:	f8cd a000 	str.w	sl, [sp]
 8005340:	464b      	mov	r3, r9
 8005342:	aa03      	add	r2, sp, #12
 8005344:	4621      	mov	r1, r4
 8005346:	4640      	mov	r0, r8
 8005348:	f7ff fee4 	bl	8005114 <_printf_common>
 800534c:	3001      	adds	r0, #1
 800534e:	d14a      	bne.n	80053e6 <_printf_i+0x1f6>
 8005350:	f04f 30ff 	mov.w	r0, #4294967295
 8005354:	b004      	add	sp, #16
 8005356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800535a:	6823      	ldr	r3, [r4, #0]
 800535c:	f043 0320 	orr.w	r3, r3, #32
 8005360:	6023      	str	r3, [r4, #0]
 8005362:	4833      	ldr	r0, [pc, #204]	; (8005430 <_printf_i+0x240>)
 8005364:	2778      	movs	r7, #120	; 0x78
 8005366:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800536a:	6823      	ldr	r3, [r4, #0]
 800536c:	6829      	ldr	r1, [r5, #0]
 800536e:	061f      	lsls	r7, r3, #24
 8005370:	f851 6b04 	ldr.w	r6, [r1], #4
 8005374:	d402      	bmi.n	800537c <_printf_i+0x18c>
 8005376:	065f      	lsls	r7, r3, #25
 8005378:	bf48      	it	mi
 800537a:	b2b6      	uxthmi	r6, r6
 800537c:	07df      	lsls	r7, r3, #31
 800537e:	bf48      	it	mi
 8005380:	f043 0320 	orrmi.w	r3, r3, #32
 8005384:	6029      	str	r1, [r5, #0]
 8005386:	bf48      	it	mi
 8005388:	6023      	strmi	r3, [r4, #0]
 800538a:	b91e      	cbnz	r6, 8005394 <_printf_i+0x1a4>
 800538c:	6823      	ldr	r3, [r4, #0]
 800538e:	f023 0320 	bic.w	r3, r3, #32
 8005392:	6023      	str	r3, [r4, #0]
 8005394:	2310      	movs	r3, #16
 8005396:	e7a7      	b.n	80052e8 <_printf_i+0xf8>
 8005398:	4824      	ldr	r0, [pc, #144]	; (800542c <_printf_i+0x23c>)
 800539a:	e7e4      	b.n	8005366 <_printf_i+0x176>
 800539c:	4615      	mov	r5, r2
 800539e:	e7bd      	b.n	800531c <_printf_i+0x12c>
 80053a0:	682b      	ldr	r3, [r5, #0]
 80053a2:	6826      	ldr	r6, [r4, #0]
 80053a4:	6961      	ldr	r1, [r4, #20]
 80053a6:	1d18      	adds	r0, r3, #4
 80053a8:	6028      	str	r0, [r5, #0]
 80053aa:	0635      	lsls	r5, r6, #24
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	d501      	bpl.n	80053b4 <_printf_i+0x1c4>
 80053b0:	6019      	str	r1, [r3, #0]
 80053b2:	e002      	b.n	80053ba <_printf_i+0x1ca>
 80053b4:	0670      	lsls	r0, r6, #25
 80053b6:	d5fb      	bpl.n	80053b0 <_printf_i+0x1c0>
 80053b8:	8019      	strh	r1, [r3, #0]
 80053ba:	2300      	movs	r3, #0
 80053bc:	6123      	str	r3, [r4, #16]
 80053be:	4615      	mov	r5, r2
 80053c0:	e7bc      	b.n	800533c <_printf_i+0x14c>
 80053c2:	682b      	ldr	r3, [r5, #0]
 80053c4:	1d1a      	adds	r2, r3, #4
 80053c6:	602a      	str	r2, [r5, #0]
 80053c8:	681d      	ldr	r5, [r3, #0]
 80053ca:	6862      	ldr	r2, [r4, #4]
 80053cc:	2100      	movs	r1, #0
 80053ce:	4628      	mov	r0, r5
 80053d0:	f7fa ff06 	bl	80001e0 <memchr>
 80053d4:	b108      	cbz	r0, 80053da <_printf_i+0x1ea>
 80053d6:	1b40      	subs	r0, r0, r5
 80053d8:	6060      	str	r0, [r4, #4]
 80053da:	6863      	ldr	r3, [r4, #4]
 80053dc:	6123      	str	r3, [r4, #16]
 80053de:	2300      	movs	r3, #0
 80053e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053e4:	e7aa      	b.n	800533c <_printf_i+0x14c>
 80053e6:	6923      	ldr	r3, [r4, #16]
 80053e8:	462a      	mov	r2, r5
 80053ea:	4649      	mov	r1, r9
 80053ec:	4640      	mov	r0, r8
 80053ee:	47d0      	blx	sl
 80053f0:	3001      	adds	r0, #1
 80053f2:	d0ad      	beq.n	8005350 <_printf_i+0x160>
 80053f4:	6823      	ldr	r3, [r4, #0]
 80053f6:	079b      	lsls	r3, r3, #30
 80053f8:	d413      	bmi.n	8005422 <_printf_i+0x232>
 80053fa:	68e0      	ldr	r0, [r4, #12]
 80053fc:	9b03      	ldr	r3, [sp, #12]
 80053fe:	4298      	cmp	r0, r3
 8005400:	bfb8      	it	lt
 8005402:	4618      	movlt	r0, r3
 8005404:	e7a6      	b.n	8005354 <_printf_i+0x164>
 8005406:	2301      	movs	r3, #1
 8005408:	4632      	mov	r2, r6
 800540a:	4649      	mov	r1, r9
 800540c:	4640      	mov	r0, r8
 800540e:	47d0      	blx	sl
 8005410:	3001      	adds	r0, #1
 8005412:	d09d      	beq.n	8005350 <_printf_i+0x160>
 8005414:	3501      	adds	r5, #1
 8005416:	68e3      	ldr	r3, [r4, #12]
 8005418:	9903      	ldr	r1, [sp, #12]
 800541a:	1a5b      	subs	r3, r3, r1
 800541c:	42ab      	cmp	r3, r5
 800541e:	dcf2      	bgt.n	8005406 <_printf_i+0x216>
 8005420:	e7eb      	b.n	80053fa <_printf_i+0x20a>
 8005422:	2500      	movs	r5, #0
 8005424:	f104 0619 	add.w	r6, r4, #25
 8005428:	e7f5      	b.n	8005416 <_printf_i+0x226>
 800542a:	bf00      	nop
 800542c:	08005849 	.word	0x08005849
 8005430:	0800585a 	.word	0x0800585a

08005434 <__sflush_r>:
 8005434:	898a      	ldrh	r2, [r1, #12]
 8005436:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800543a:	4605      	mov	r5, r0
 800543c:	0710      	lsls	r0, r2, #28
 800543e:	460c      	mov	r4, r1
 8005440:	d458      	bmi.n	80054f4 <__sflush_r+0xc0>
 8005442:	684b      	ldr	r3, [r1, #4]
 8005444:	2b00      	cmp	r3, #0
 8005446:	dc05      	bgt.n	8005454 <__sflush_r+0x20>
 8005448:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800544a:	2b00      	cmp	r3, #0
 800544c:	dc02      	bgt.n	8005454 <__sflush_r+0x20>
 800544e:	2000      	movs	r0, #0
 8005450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005454:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005456:	2e00      	cmp	r6, #0
 8005458:	d0f9      	beq.n	800544e <__sflush_r+0x1a>
 800545a:	2300      	movs	r3, #0
 800545c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005460:	682f      	ldr	r7, [r5, #0]
 8005462:	6a21      	ldr	r1, [r4, #32]
 8005464:	602b      	str	r3, [r5, #0]
 8005466:	d032      	beq.n	80054ce <__sflush_r+0x9a>
 8005468:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800546a:	89a3      	ldrh	r3, [r4, #12]
 800546c:	075a      	lsls	r2, r3, #29
 800546e:	d505      	bpl.n	800547c <__sflush_r+0x48>
 8005470:	6863      	ldr	r3, [r4, #4]
 8005472:	1ac0      	subs	r0, r0, r3
 8005474:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005476:	b10b      	cbz	r3, 800547c <__sflush_r+0x48>
 8005478:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800547a:	1ac0      	subs	r0, r0, r3
 800547c:	2300      	movs	r3, #0
 800547e:	4602      	mov	r2, r0
 8005480:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005482:	6a21      	ldr	r1, [r4, #32]
 8005484:	4628      	mov	r0, r5
 8005486:	47b0      	blx	r6
 8005488:	1c43      	adds	r3, r0, #1
 800548a:	89a3      	ldrh	r3, [r4, #12]
 800548c:	d106      	bne.n	800549c <__sflush_r+0x68>
 800548e:	6829      	ldr	r1, [r5, #0]
 8005490:	291d      	cmp	r1, #29
 8005492:	d82b      	bhi.n	80054ec <__sflush_r+0xb8>
 8005494:	4a29      	ldr	r2, [pc, #164]	; (800553c <__sflush_r+0x108>)
 8005496:	410a      	asrs	r2, r1
 8005498:	07d6      	lsls	r6, r2, #31
 800549a:	d427      	bmi.n	80054ec <__sflush_r+0xb8>
 800549c:	2200      	movs	r2, #0
 800549e:	6062      	str	r2, [r4, #4]
 80054a0:	04d9      	lsls	r1, r3, #19
 80054a2:	6922      	ldr	r2, [r4, #16]
 80054a4:	6022      	str	r2, [r4, #0]
 80054a6:	d504      	bpl.n	80054b2 <__sflush_r+0x7e>
 80054a8:	1c42      	adds	r2, r0, #1
 80054aa:	d101      	bne.n	80054b0 <__sflush_r+0x7c>
 80054ac:	682b      	ldr	r3, [r5, #0]
 80054ae:	b903      	cbnz	r3, 80054b2 <__sflush_r+0x7e>
 80054b0:	6560      	str	r0, [r4, #84]	; 0x54
 80054b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80054b4:	602f      	str	r7, [r5, #0]
 80054b6:	2900      	cmp	r1, #0
 80054b8:	d0c9      	beq.n	800544e <__sflush_r+0x1a>
 80054ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80054be:	4299      	cmp	r1, r3
 80054c0:	d002      	beq.n	80054c8 <__sflush_r+0x94>
 80054c2:	4628      	mov	r0, r5
 80054c4:	f7ff fbea 	bl	8004c9c <_free_r>
 80054c8:	2000      	movs	r0, #0
 80054ca:	6360      	str	r0, [r4, #52]	; 0x34
 80054cc:	e7c0      	b.n	8005450 <__sflush_r+0x1c>
 80054ce:	2301      	movs	r3, #1
 80054d0:	4628      	mov	r0, r5
 80054d2:	47b0      	blx	r6
 80054d4:	1c41      	adds	r1, r0, #1
 80054d6:	d1c8      	bne.n	800546a <__sflush_r+0x36>
 80054d8:	682b      	ldr	r3, [r5, #0]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d0c5      	beq.n	800546a <__sflush_r+0x36>
 80054de:	2b1d      	cmp	r3, #29
 80054e0:	d001      	beq.n	80054e6 <__sflush_r+0xb2>
 80054e2:	2b16      	cmp	r3, #22
 80054e4:	d101      	bne.n	80054ea <__sflush_r+0xb6>
 80054e6:	602f      	str	r7, [r5, #0]
 80054e8:	e7b1      	b.n	800544e <__sflush_r+0x1a>
 80054ea:	89a3      	ldrh	r3, [r4, #12]
 80054ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054f0:	81a3      	strh	r3, [r4, #12]
 80054f2:	e7ad      	b.n	8005450 <__sflush_r+0x1c>
 80054f4:	690f      	ldr	r7, [r1, #16]
 80054f6:	2f00      	cmp	r7, #0
 80054f8:	d0a9      	beq.n	800544e <__sflush_r+0x1a>
 80054fa:	0793      	lsls	r3, r2, #30
 80054fc:	680e      	ldr	r6, [r1, #0]
 80054fe:	bf08      	it	eq
 8005500:	694b      	ldreq	r3, [r1, #20]
 8005502:	600f      	str	r7, [r1, #0]
 8005504:	bf18      	it	ne
 8005506:	2300      	movne	r3, #0
 8005508:	eba6 0807 	sub.w	r8, r6, r7
 800550c:	608b      	str	r3, [r1, #8]
 800550e:	f1b8 0f00 	cmp.w	r8, #0
 8005512:	dd9c      	ble.n	800544e <__sflush_r+0x1a>
 8005514:	6a21      	ldr	r1, [r4, #32]
 8005516:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005518:	4643      	mov	r3, r8
 800551a:	463a      	mov	r2, r7
 800551c:	4628      	mov	r0, r5
 800551e:	47b0      	blx	r6
 8005520:	2800      	cmp	r0, #0
 8005522:	dc06      	bgt.n	8005532 <__sflush_r+0xfe>
 8005524:	89a3      	ldrh	r3, [r4, #12]
 8005526:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800552a:	81a3      	strh	r3, [r4, #12]
 800552c:	f04f 30ff 	mov.w	r0, #4294967295
 8005530:	e78e      	b.n	8005450 <__sflush_r+0x1c>
 8005532:	4407      	add	r7, r0
 8005534:	eba8 0800 	sub.w	r8, r8, r0
 8005538:	e7e9      	b.n	800550e <__sflush_r+0xda>
 800553a:	bf00      	nop
 800553c:	dfbffffe 	.word	0xdfbffffe

08005540 <_fflush_r>:
 8005540:	b538      	push	{r3, r4, r5, lr}
 8005542:	690b      	ldr	r3, [r1, #16]
 8005544:	4605      	mov	r5, r0
 8005546:	460c      	mov	r4, r1
 8005548:	b913      	cbnz	r3, 8005550 <_fflush_r+0x10>
 800554a:	2500      	movs	r5, #0
 800554c:	4628      	mov	r0, r5
 800554e:	bd38      	pop	{r3, r4, r5, pc}
 8005550:	b118      	cbz	r0, 800555a <_fflush_r+0x1a>
 8005552:	6a03      	ldr	r3, [r0, #32]
 8005554:	b90b      	cbnz	r3, 800555a <_fflush_r+0x1a>
 8005556:	f7ff fa99 	bl	8004a8c <__sinit>
 800555a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d0f3      	beq.n	800554a <_fflush_r+0xa>
 8005562:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005564:	07d0      	lsls	r0, r2, #31
 8005566:	d404      	bmi.n	8005572 <_fflush_r+0x32>
 8005568:	0599      	lsls	r1, r3, #22
 800556a:	d402      	bmi.n	8005572 <_fflush_r+0x32>
 800556c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800556e:	f7ff fb92 	bl	8004c96 <__retarget_lock_acquire_recursive>
 8005572:	4628      	mov	r0, r5
 8005574:	4621      	mov	r1, r4
 8005576:	f7ff ff5d 	bl	8005434 <__sflush_r>
 800557a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800557c:	07da      	lsls	r2, r3, #31
 800557e:	4605      	mov	r5, r0
 8005580:	d4e4      	bmi.n	800554c <_fflush_r+0xc>
 8005582:	89a3      	ldrh	r3, [r4, #12]
 8005584:	059b      	lsls	r3, r3, #22
 8005586:	d4e1      	bmi.n	800554c <_fflush_r+0xc>
 8005588:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800558a:	f7ff fb85 	bl	8004c98 <__retarget_lock_release_recursive>
 800558e:	e7dd      	b.n	800554c <_fflush_r+0xc>

08005590 <__swbuf_r>:
 8005590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005592:	460e      	mov	r6, r1
 8005594:	4614      	mov	r4, r2
 8005596:	4605      	mov	r5, r0
 8005598:	b118      	cbz	r0, 80055a2 <__swbuf_r+0x12>
 800559a:	6a03      	ldr	r3, [r0, #32]
 800559c:	b90b      	cbnz	r3, 80055a2 <__swbuf_r+0x12>
 800559e:	f7ff fa75 	bl	8004a8c <__sinit>
 80055a2:	69a3      	ldr	r3, [r4, #24]
 80055a4:	60a3      	str	r3, [r4, #8]
 80055a6:	89a3      	ldrh	r3, [r4, #12]
 80055a8:	071a      	lsls	r2, r3, #28
 80055aa:	d525      	bpl.n	80055f8 <__swbuf_r+0x68>
 80055ac:	6923      	ldr	r3, [r4, #16]
 80055ae:	b31b      	cbz	r3, 80055f8 <__swbuf_r+0x68>
 80055b0:	6823      	ldr	r3, [r4, #0]
 80055b2:	6922      	ldr	r2, [r4, #16]
 80055b4:	1a98      	subs	r0, r3, r2
 80055b6:	6963      	ldr	r3, [r4, #20]
 80055b8:	b2f6      	uxtb	r6, r6
 80055ba:	4283      	cmp	r3, r0
 80055bc:	4637      	mov	r7, r6
 80055be:	dc04      	bgt.n	80055ca <__swbuf_r+0x3a>
 80055c0:	4621      	mov	r1, r4
 80055c2:	4628      	mov	r0, r5
 80055c4:	f7ff ffbc 	bl	8005540 <_fflush_r>
 80055c8:	b9e0      	cbnz	r0, 8005604 <__swbuf_r+0x74>
 80055ca:	68a3      	ldr	r3, [r4, #8]
 80055cc:	3b01      	subs	r3, #1
 80055ce:	60a3      	str	r3, [r4, #8]
 80055d0:	6823      	ldr	r3, [r4, #0]
 80055d2:	1c5a      	adds	r2, r3, #1
 80055d4:	6022      	str	r2, [r4, #0]
 80055d6:	701e      	strb	r6, [r3, #0]
 80055d8:	6962      	ldr	r2, [r4, #20]
 80055da:	1c43      	adds	r3, r0, #1
 80055dc:	429a      	cmp	r2, r3
 80055de:	d004      	beq.n	80055ea <__swbuf_r+0x5a>
 80055e0:	89a3      	ldrh	r3, [r4, #12]
 80055e2:	07db      	lsls	r3, r3, #31
 80055e4:	d506      	bpl.n	80055f4 <__swbuf_r+0x64>
 80055e6:	2e0a      	cmp	r6, #10
 80055e8:	d104      	bne.n	80055f4 <__swbuf_r+0x64>
 80055ea:	4621      	mov	r1, r4
 80055ec:	4628      	mov	r0, r5
 80055ee:	f7ff ffa7 	bl	8005540 <_fflush_r>
 80055f2:	b938      	cbnz	r0, 8005604 <__swbuf_r+0x74>
 80055f4:	4638      	mov	r0, r7
 80055f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055f8:	4621      	mov	r1, r4
 80055fa:	4628      	mov	r0, r5
 80055fc:	f000 f806 	bl	800560c <__swsetup_r>
 8005600:	2800      	cmp	r0, #0
 8005602:	d0d5      	beq.n	80055b0 <__swbuf_r+0x20>
 8005604:	f04f 37ff 	mov.w	r7, #4294967295
 8005608:	e7f4      	b.n	80055f4 <__swbuf_r+0x64>
	...

0800560c <__swsetup_r>:
 800560c:	b538      	push	{r3, r4, r5, lr}
 800560e:	4b2a      	ldr	r3, [pc, #168]	; (80056b8 <__swsetup_r+0xac>)
 8005610:	4605      	mov	r5, r0
 8005612:	6818      	ldr	r0, [r3, #0]
 8005614:	460c      	mov	r4, r1
 8005616:	b118      	cbz	r0, 8005620 <__swsetup_r+0x14>
 8005618:	6a03      	ldr	r3, [r0, #32]
 800561a:	b90b      	cbnz	r3, 8005620 <__swsetup_r+0x14>
 800561c:	f7ff fa36 	bl	8004a8c <__sinit>
 8005620:	89a3      	ldrh	r3, [r4, #12]
 8005622:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005626:	0718      	lsls	r0, r3, #28
 8005628:	d422      	bmi.n	8005670 <__swsetup_r+0x64>
 800562a:	06d9      	lsls	r1, r3, #27
 800562c:	d407      	bmi.n	800563e <__swsetup_r+0x32>
 800562e:	2309      	movs	r3, #9
 8005630:	602b      	str	r3, [r5, #0]
 8005632:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005636:	81a3      	strh	r3, [r4, #12]
 8005638:	f04f 30ff 	mov.w	r0, #4294967295
 800563c:	e034      	b.n	80056a8 <__swsetup_r+0x9c>
 800563e:	0758      	lsls	r0, r3, #29
 8005640:	d512      	bpl.n	8005668 <__swsetup_r+0x5c>
 8005642:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005644:	b141      	cbz	r1, 8005658 <__swsetup_r+0x4c>
 8005646:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800564a:	4299      	cmp	r1, r3
 800564c:	d002      	beq.n	8005654 <__swsetup_r+0x48>
 800564e:	4628      	mov	r0, r5
 8005650:	f7ff fb24 	bl	8004c9c <_free_r>
 8005654:	2300      	movs	r3, #0
 8005656:	6363      	str	r3, [r4, #52]	; 0x34
 8005658:	89a3      	ldrh	r3, [r4, #12]
 800565a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800565e:	81a3      	strh	r3, [r4, #12]
 8005660:	2300      	movs	r3, #0
 8005662:	6063      	str	r3, [r4, #4]
 8005664:	6923      	ldr	r3, [r4, #16]
 8005666:	6023      	str	r3, [r4, #0]
 8005668:	89a3      	ldrh	r3, [r4, #12]
 800566a:	f043 0308 	orr.w	r3, r3, #8
 800566e:	81a3      	strh	r3, [r4, #12]
 8005670:	6923      	ldr	r3, [r4, #16]
 8005672:	b94b      	cbnz	r3, 8005688 <__swsetup_r+0x7c>
 8005674:	89a3      	ldrh	r3, [r4, #12]
 8005676:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800567a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800567e:	d003      	beq.n	8005688 <__swsetup_r+0x7c>
 8005680:	4621      	mov	r1, r4
 8005682:	4628      	mov	r0, r5
 8005684:	f000 f850 	bl	8005728 <__smakebuf_r>
 8005688:	89a0      	ldrh	r0, [r4, #12]
 800568a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800568e:	f010 0301 	ands.w	r3, r0, #1
 8005692:	d00a      	beq.n	80056aa <__swsetup_r+0x9e>
 8005694:	2300      	movs	r3, #0
 8005696:	60a3      	str	r3, [r4, #8]
 8005698:	6963      	ldr	r3, [r4, #20]
 800569a:	425b      	negs	r3, r3
 800569c:	61a3      	str	r3, [r4, #24]
 800569e:	6923      	ldr	r3, [r4, #16]
 80056a0:	b943      	cbnz	r3, 80056b4 <__swsetup_r+0xa8>
 80056a2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80056a6:	d1c4      	bne.n	8005632 <__swsetup_r+0x26>
 80056a8:	bd38      	pop	{r3, r4, r5, pc}
 80056aa:	0781      	lsls	r1, r0, #30
 80056ac:	bf58      	it	pl
 80056ae:	6963      	ldrpl	r3, [r4, #20]
 80056b0:	60a3      	str	r3, [r4, #8]
 80056b2:	e7f4      	b.n	800569e <__swsetup_r+0x92>
 80056b4:	2000      	movs	r0, #0
 80056b6:	e7f7      	b.n	80056a8 <__swsetup_r+0x9c>
 80056b8:	20000064 	.word	0x20000064

080056bc <_sbrk_r>:
 80056bc:	b538      	push	{r3, r4, r5, lr}
 80056be:	4d06      	ldr	r5, [pc, #24]	; (80056d8 <_sbrk_r+0x1c>)
 80056c0:	2300      	movs	r3, #0
 80056c2:	4604      	mov	r4, r0
 80056c4:	4608      	mov	r0, r1
 80056c6:	602b      	str	r3, [r5, #0]
 80056c8:	f7fb fb6e 	bl	8000da8 <_sbrk>
 80056cc:	1c43      	adds	r3, r0, #1
 80056ce:	d102      	bne.n	80056d6 <_sbrk_r+0x1a>
 80056d0:	682b      	ldr	r3, [r5, #0]
 80056d2:	b103      	cbz	r3, 80056d6 <_sbrk_r+0x1a>
 80056d4:	6023      	str	r3, [r4, #0]
 80056d6:	bd38      	pop	{r3, r4, r5, pc}
 80056d8:	20000378 	.word	0x20000378

080056dc <__swhatbuf_r>:
 80056dc:	b570      	push	{r4, r5, r6, lr}
 80056de:	460c      	mov	r4, r1
 80056e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056e4:	2900      	cmp	r1, #0
 80056e6:	b096      	sub	sp, #88	; 0x58
 80056e8:	4615      	mov	r5, r2
 80056ea:	461e      	mov	r6, r3
 80056ec:	da0d      	bge.n	800570a <__swhatbuf_r+0x2e>
 80056ee:	89a3      	ldrh	r3, [r4, #12]
 80056f0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80056f4:	f04f 0100 	mov.w	r1, #0
 80056f8:	bf0c      	ite	eq
 80056fa:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80056fe:	2340      	movne	r3, #64	; 0x40
 8005700:	2000      	movs	r0, #0
 8005702:	6031      	str	r1, [r6, #0]
 8005704:	602b      	str	r3, [r5, #0]
 8005706:	b016      	add	sp, #88	; 0x58
 8005708:	bd70      	pop	{r4, r5, r6, pc}
 800570a:	466a      	mov	r2, sp
 800570c:	f000 f848 	bl	80057a0 <_fstat_r>
 8005710:	2800      	cmp	r0, #0
 8005712:	dbec      	blt.n	80056ee <__swhatbuf_r+0x12>
 8005714:	9901      	ldr	r1, [sp, #4]
 8005716:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800571a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800571e:	4259      	negs	r1, r3
 8005720:	4159      	adcs	r1, r3
 8005722:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005726:	e7eb      	b.n	8005700 <__swhatbuf_r+0x24>

08005728 <__smakebuf_r>:
 8005728:	898b      	ldrh	r3, [r1, #12]
 800572a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800572c:	079d      	lsls	r5, r3, #30
 800572e:	4606      	mov	r6, r0
 8005730:	460c      	mov	r4, r1
 8005732:	d507      	bpl.n	8005744 <__smakebuf_r+0x1c>
 8005734:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005738:	6023      	str	r3, [r4, #0]
 800573a:	6123      	str	r3, [r4, #16]
 800573c:	2301      	movs	r3, #1
 800573e:	6163      	str	r3, [r4, #20]
 8005740:	b002      	add	sp, #8
 8005742:	bd70      	pop	{r4, r5, r6, pc}
 8005744:	ab01      	add	r3, sp, #4
 8005746:	466a      	mov	r2, sp
 8005748:	f7ff ffc8 	bl	80056dc <__swhatbuf_r>
 800574c:	9900      	ldr	r1, [sp, #0]
 800574e:	4605      	mov	r5, r0
 8005750:	4630      	mov	r0, r6
 8005752:	f7ff fb0f 	bl	8004d74 <_malloc_r>
 8005756:	b948      	cbnz	r0, 800576c <__smakebuf_r+0x44>
 8005758:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800575c:	059a      	lsls	r2, r3, #22
 800575e:	d4ef      	bmi.n	8005740 <__smakebuf_r+0x18>
 8005760:	f023 0303 	bic.w	r3, r3, #3
 8005764:	f043 0302 	orr.w	r3, r3, #2
 8005768:	81a3      	strh	r3, [r4, #12]
 800576a:	e7e3      	b.n	8005734 <__smakebuf_r+0xc>
 800576c:	89a3      	ldrh	r3, [r4, #12]
 800576e:	6020      	str	r0, [r4, #0]
 8005770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005774:	81a3      	strh	r3, [r4, #12]
 8005776:	9b00      	ldr	r3, [sp, #0]
 8005778:	6163      	str	r3, [r4, #20]
 800577a:	9b01      	ldr	r3, [sp, #4]
 800577c:	6120      	str	r0, [r4, #16]
 800577e:	b15b      	cbz	r3, 8005798 <__smakebuf_r+0x70>
 8005780:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005784:	4630      	mov	r0, r6
 8005786:	f000 f81d 	bl	80057c4 <_isatty_r>
 800578a:	b128      	cbz	r0, 8005798 <__smakebuf_r+0x70>
 800578c:	89a3      	ldrh	r3, [r4, #12]
 800578e:	f023 0303 	bic.w	r3, r3, #3
 8005792:	f043 0301 	orr.w	r3, r3, #1
 8005796:	81a3      	strh	r3, [r4, #12]
 8005798:	89a3      	ldrh	r3, [r4, #12]
 800579a:	431d      	orrs	r5, r3
 800579c:	81a5      	strh	r5, [r4, #12]
 800579e:	e7cf      	b.n	8005740 <__smakebuf_r+0x18>

080057a0 <_fstat_r>:
 80057a0:	b538      	push	{r3, r4, r5, lr}
 80057a2:	4d07      	ldr	r5, [pc, #28]	; (80057c0 <_fstat_r+0x20>)
 80057a4:	2300      	movs	r3, #0
 80057a6:	4604      	mov	r4, r0
 80057a8:	4608      	mov	r0, r1
 80057aa:	4611      	mov	r1, r2
 80057ac:	602b      	str	r3, [r5, #0]
 80057ae:	f7fb fad2 	bl	8000d56 <_fstat>
 80057b2:	1c43      	adds	r3, r0, #1
 80057b4:	d102      	bne.n	80057bc <_fstat_r+0x1c>
 80057b6:	682b      	ldr	r3, [r5, #0]
 80057b8:	b103      	cbz	r3, 80057bc <_fstat_r+0x1c>
 80057ba:	6023      	str	r3, [r4, #0]
 80057bc:	bd38      	pop	{r3, r4, r5, pc}
 80057be:	bf00      	nop
 80057c0:	20000378 	.word	0x20000378

080057c4 <_isatty_r>:
 80057c4:	b538      	push	{r3, r4, r5, lr}
 80057c6:	4d06      	ldr	r5, [pc, #24]	; (80057e0 <_isatty_r+0x1c>)
 80057c8:	2300      	movs	r3, #0
 80057ca:	4604      	mov	r4, r0
 80057cc:	4608      	mov	r0, r1
 80057ce:	602b      	str	r3, [r5, #0]
 80057d0:	f7fb fad1 	bl	8000d76 <_isatty>
 80057d4:	1c43      	adds	r3, r0, #1
 80057d6:	d102      	bne.n	80057de <_isatty_r+0x1a>
 80057d8:	682b      	ldr	r3, [r5, #0]
 80057da:	b103      	cbz	r3, 80057de <_isatty_r+0x1a>
 80057dc:	6023      	str	r3, [r4, #0]
 80057de:	bd38      	pop	{r3, r4, r5, pc}
 80057e0:	20000378 	.word	0x20000378

080057e4 <_init>:
 80057e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057e6:	bf00      	nop
 80057e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057ea:	bc08      	pop	{r3}
 80057ec:	469e      	mov	lr, r3
 80057ee:	4770      	bx	lr

080057f0 <_fini>:
 80057f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057f2:	bf00      	nop
 80057f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057f6:	bc08      	pop	{r3}
 80057f8:	469e      	mov	lr, r3
 80057fa:	4770      	bx	lr
