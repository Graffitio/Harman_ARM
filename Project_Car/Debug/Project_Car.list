
Project_Car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f48  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  080080e8  080080e8  000180e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800821c  0800821c  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  0800821c  0800821c  0001821c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008224  08008224  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008224  08008224  00018224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008228  08008228  00018228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800822c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004464  2000006c  08008298  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200044d0  08008298  000244d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a39c  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000041b6  00000000  00000000  0003a47b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001610  00000000  00000000  0003e638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001119  00000000  00000000  0003fc48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ac19  00000000  00000000  00040d61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ccd3  00000000  00000000  0005b97a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009b346  00000000  00000000  0007864d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006040  00000000  00000000  00113994  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  001199d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080080d0 	.word	0x080080d0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	080080d0 	.word	0x080080d0

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <lcd_init>:
extern I2C_HandleTypeDef hi2c1; // hi2c1이 외부에 선언되었다는 뜻

#define SLAVE_ADDRES_LCD	0x27<<1

void lcd_init()
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	// cmd init
	HAL_Delay(50);
 80004e0:	2032      	movs	r0, #50	; 0x32
 80004e2:	f001 fd2b 	bl	8001f3c <HAL_Delay>
	lcd_send_cmd(0x30);
 80004e6:	2030      	movs	r0, #48	; 0x30
 80004e8:	f000 f832 	bl	8000550 <lcd_send_cmd>
	HAL_Delay(5);
 80004ec:	2005      	movs	r0, #5
 80004ee:	f001 fd25 	bl	8001f3c <HAL_Delay>
	lcd_send_cmd(0x30);
 80004f2:	2030      	movs	r0, #48	; 0x30
 80004f4:	f000 f82c 	bl	8000550 <lcd_send_cmd>
	HAL_Delay(1);
 80004f8:	2001      	movs	r0, #1
 80004fa:	f001 fd1f 	bl	8001f3c <HAL_Delay>
	lcd_send_cmd(0x30);
 80004fe:	2030      	movs	r0, #48	; 0x30
 8000500:	f000 f826 	bl	8000550 <lcd_send_cmd>
	HAL_Delay(10);
 8000504:	200a      	movs	r0, #10
 8000506:	f001 fd19 	bl	8001f3c <HAL_Delay>
	lcd_send_cmd(0x20); // 4bit mode
 800050a:	2020      	movs	r0, #32
 800050c:	f000 f820 	bl	8000550 <lcd_send_cmd>
	HAL_Delay(10);
 8000510:	200a      	movs	r0, #10
 8000512:	f001 fd13 	bl	8001f3c <HAL_Delay>

	// display init
	lcd_send_cmd(0x28); // function set
 8000516:	2028      	movs	r0, #40	; 0x28
 8000518:	f000 f81a 	bl	8000550 <lcd_send_cmd>
	HAL_Delay(1);
 800051c:	2001      	movs	r0, #1
 800051e:	f001 fd0d 	bl	8001f3c <HAL_Delay>
	lcd_send_cmd(0x08); // display off
 8000522:	2008      	movs	r0, #8
 8000524:	f000 f814 	bl	8000550 <lcd_send_cmd>
	HAL_Delay(1);
 8000528:	2001      	movs	r0, #1
 800052a:	f001 fd07 	bl	8001f3c <HAL_Delay>
	lcd_send_cmd(0x01); // clear display
 800052e:	2001      	movs	r0, #1
 8000530:	f000 f80e 	bl	8000550 <lcd_send_cmd>
	HAL_Delay(1);
 8000534:	2001      	movs	r0, #1
 8000536:	f001 fd01 	bl	8001f3c <HAL_Delay>
	lcd_send_cmd(0x06); // entry mode
 800053a:	2006      	movs	r0, #6
 800053c:	f000 f808 	bl	8000550 <lcd_send_cmd>
	HAL_Delay(1);
 8000540:	2001      	movs	r0, #1
 8000542:	f001 fcfb 	bl	8001f3c <HAL_Delay>
	lcd_send_cmd(0x0C); // display on
 8000546:	200c      	movs	r0, #12
 8000548:	f000 f802 	bl	8000550 <lcd_send_cmd>
}
 800054c:	bf00      	nop
 800054e:	bd80      	pop	{r7, pc}

08000550 <lcd_send_cmd>:

void lcd_send_cmd(char cmd)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b086      	sub	sp, #24
 8000554:	af02      	add	r7, sp, #8
 8000556:	4603      	mov	r3, r0
 8000558:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd & 0xf0); // msb쪽 4bit만 남기고 나머지 다 버림.
 800055a:	79fb      	ldrb	r3, [r7, #7]
 800055c:	f023 030f 	bic.w	r3, r3, #15
 8000560:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd << 4) & 0xf0); // lsb쪽 4bit만 님기고 나머지 다 버림.
 8000562:	79fb      	ldrb	r3, [r7, #7]
 8000564:	011b      	lsls	r3, r3, #4
 8000566:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0C;	// en = 1, rs = 0
 8000568:	7bfb      	ldrb	r3, [r7, #15]
 800056a:	f043 030c 	orr.w	r3, r3, #12
 800056e:	b2db      	uxtb	r3, r3
 8000570:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x08;	// en = 0, rs = 0
 8000572:	7bfb      	ldrb	r3, [r7, #15]
 8000574:	f043 0308 	orr.w	r3, r3, #8
 8000578:	b2db      	uxtb	r3, r3
 800057a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0C;	// en = 1, rs = 0
 800057c:	7bbb      	ldrb	r3, [r7, #14]
 800057e:	f043 030c 	orr.w	r3, r3, #12
 8000582:	b2db      	uxtb	r3, r3
 8000584:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x08;	// en = 0, rs = 0
 8000586:	7bbb      	ldrb	r3, [r7, #14]
 8000588:	f043 0308 	orr.w	r3, r3, #8
 800058c:	b2db      	uxtb	r3, r3
 800058e:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRES_LCD, (uint8_t *)data_t, 4, 100);
 8000590:	f107 0208 	add.w	r2, r7, #8
 8000594:	2364      	movs	r3, #100	; 0x64
 8000596:	9300      	str	r3, [sp, #0]
 8000598:	2304      	movs	r3, #4
 800059a:	214e      	movs	r1, #78	; 0x4e
 800059c:	4803      	ldr	r0, [pc, #12]	; (80005ac <lcd_send_cmd+0x5c>)
 800059e:	f002 fc3d 	bl	8002e1c <HAL_I2C_Master_Transmit>
}
 80005a2:	bf00      	nop
 80005a4:	3710      	adds	r7, #16
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	2000033c 	.word	0x2000033c

080005b0 <lcd_send_data>:

void lcd_send_data(char data)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b086      	sub	sp, #24
 80005b4:	af02      	add	r7, sp, #8
 80005b6:	4603      	mov	r3, r0
 80005b8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data & 0xf0); // msb쪽 4bit만 남기고 나머지 다 버림.
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	f023 030f 	bic.w	r3, r3, #15
 80005c0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xf0); // lsb쪽 4bit만 님기고 나머지 다 버림.
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	011b      	lsls	r3, r3, #4
 80005c6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0D;	// en = 1, rs = 0
 80005c8:	7bfb      	ldrb	r3, [r7, #15]
 80005ca:	f043 030d 	orr.w	r3, r3, #13
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x09;	// en = 0, rs = 0
 80005d2:	7bfb      	ldrb	r3, [r7, #15]
 80005d4:	f043 0309 	orr.w	r3, r3, #9
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0D;	// en = 1, rs = 0
 80005dc:	7bbb      	ldrb	r3, [r7, #14]
 80005de:	f043 030d 	orr.w	r3, r3, #13
 80005e2:	b2db      	uxtb	r3, r3
 80005e4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x09;	// en = 0, rs = 0
 80005e6:	7bbb      	ldrb	r3, [r7, #14]
 80005e8:	f043 0309 	orr.w	r3, r3, #9
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRES_LCD, (uint8_t *)data_t, 4, 100);
 80005f0:	f107 0208 	add.w	r2, r7, #8
 80005f4:	2364      	movs	r3, #100	; 0x64
 80005f6:	9300      	str	r3, [sp, #0]
 80005f8:	2304      	movs	r3, #4
 80005fa:	214e      	movs	r1, #78	; 0x4e
 80005fc:	4803      	ldr	r0, [pc, #12]	; (800060c <lcd_send_data+0x5c>)
 80005fe:	f002 fc0d 	bl	8002e1c <HAL_I2C_Master_Transmit>
}
 8000602:	bf00      	nop
 8000604:	3710      	adds	r7, #16
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	2000033c 	.word	0x2000033c

08000610 <lcd_send_string>:

void lcd_send_string(char *str)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
	while(*str) lcd_send_data(*str++); // *str이 참이면, lcd_send_data(*str++) 실행
 8000618:	e006      	b.n	8000628 <lcd_send_string+0x18>
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	1c5a      	adds	r2, r3, #1
 800061e:	607a      	str	r2, [r7, #4]
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	4618      	mov	r0, r3
 8000624:	f7ff ffc4 	bl	80005b0 <lcd_send_data>
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d1f4      	bne.n	800061a <lcd_send_string+0xa>
}
 8000630:	bf00      	nop
 8000632:	bf00      	nop
 8000634:	3708      	adds	r7, #8
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}

0800063a <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 800063a:	b580      	push	{r7, lr}
 800063c:	b082      	sub	sp, #8
 800063e:	af00      	add	r7, sp, #0
 8000640:	6078      	str	r0, [r7, #4]
 8000642:	6039      	str	r1, [r7, #0]
    switch (row)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d003      	beq.n	8000652 <lcd_put_cur+0x18>
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	2b01      	cmp	r3, #1
 800064e:	d005      	beq.n	800065c <lcd_put_cur+0x22>
 8000650:	e009      	b.n	8000666 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000658:	603b      	str	r3, [r7, #0]
            break;
 800065a:	e004      	b.n	8000666 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000662:	603b      	str	r3, [r7, #0]
            break;
 8000664:	bf00      	nop
    }

    lcd_send_cmd(col);
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	b2db      	uxtb	r3, r3
 800066a:	4618      	mov	r0, r3
 800066c:	f7ff ff70 	bl	8000550 <lcd_send_cmd>
}
 8000670:	bf00      	nop
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}

08000678 <lcd_clear>:

void lcd_clear()
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 800067e:	2080      	movs	r0, #128	; 0x80
 8000680:	f7ff ff66 	bl	8000550 <lcd_send_cmd>
	for (int i=0 ; i<70 ; i++)
 8000684:	2300      	movs	r3, #0
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	e005      	b.n	8000696 <lcd_clear+0x1e>
	{
		lcd_send_data(' ');
 800068a:	2020      	movs	r0, #32
 800068c:	f7ff ff90 	bl	80005b0 <lcd_send_data>
	for (int i=0 ; i<70 ; i++)
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	3301      	adds	r3, #1
 8000694:	607b      	str	r3, [r7, #4]
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	2b45      	cmp	r3, #69	; 0x45
 800069a:	ddf6      	ble.n	800068a <lcd_clear+0x12>
	}
}
 800069c:	bf00      	nop
 800069e:	bf00      	nop
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
	...

080006a8 <delay_us>:
 *      Author: Wooseong Jung
 */
#include "delay.h"

void delay_us(uint16_t us)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	4603      	mov	r3, r0
 80006b0:	80fb      	strh	r3, [r7, #6]
	// __HAL_TIM_SET_COUNTER() 함수는 타이머를 원하는 숫자로 설정하는 함수
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 80006b2:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <delay_us+0x30>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	2200      	movs	r2, #0
 80006b8:	625a      	str	r2, [r3, #36]	; 0x24

	// 타이머 값을 받아와야
    while((__HAL_TIM_GET_COUNTER(&htim3)) < us);
 80006ba:	bf00      	nop
 80006bc:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <delay_us+0x30>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80006c2:	88fb      	ldrh	r3, [r7, #6]
 80006c4:	429a      	cmp	r2, r3
 80006c6:	d3f9      	bcc.n	80006bc <delay_us+0x14>
}
 80006c8:	bf00      	nop
 80006ca:	bf00      	nop
 80006cc:	370c      	adds	r7, #12
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	200003dc 	.word	0x200003dc

080006dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	4b17      	ldr	r3, [pc, #92]	; (8000744 <MX_DMA_Init+0x68>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4a16      	ldr	r2, [pc, #88]	; (8000744 <MX_DMA_Init+0x68>)
 80006ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
 80006f2:	4b14      	ldr	r3, [pc, #80]	; (8000744 <MX_DMA_Init+0x68>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	603b      	str	r3, [r7, #0]
 8000702:	4b10      	ldr	r3, [pc, #64]	; (8000744 <MX_DMA_Init+0x68>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	4a0f      	ldr	r2, [pc, #60]	; (8000744 <MX_DMA_Init+0x68>)
 8000708:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800070c:	6313      	str	r3, [r2, #48]	; 0x30
 800070e:	4b0d      	ldr	r3, [pc, #52]	; (8000744 <MX_DMA_Init+0x68>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000716:	603b      	str	r3, [r7, #0]
 8000718:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 800071a:	2200      	movs	r2, #0
 800071c:	2105      	movs	r1, #5
 800071e:	202f      	movs	r0, #47	; 0x2f
 8000720:	f001 fce8 	bl	80020f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000724:	202f      	movs	r0, #47	; 0x2f
 8000726:	f001 fd01 	bl	800212c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800072a:	2200      	movs	r2, #0
 800072c:	2105      	movs	r1, #5
 800072e:	203a      	movs	r0, #58	; 0x3a
 8000730:	f001 fce0 	bl	80020f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000734:	203a      	movs	r0, #58	; 0x3a
 8000736:	f001 fcf9 	bl	800212c <HAL_NVIC_EnableIRQ>

}
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40023800 	.word	0x40023800

08000748 <__io_putchar>:
osThreadId I2C_LCDHandle;

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */
int __io_putchar(int ch)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, &ch, 1, 200);
 8000750:	1d39      	adds	r1, r7, #4
 8000752:	23c8      	movs	r3, #200	; 0xc8
 8000754:	2201      	movs	r2, #1
 8000756:	4804      	ldr	r0, [pc, #16]	; (8000768 <__io_putchar+0x20>)
 8000758:	f004 feab 	bl	80054b2 <HAL_UART_Transmit>
	return ch;
 800075c:	687b      	ldr	r3, [r7, #4]
}
 800075e:	4618      	mov	r0, r3
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	20000528 	.word	0x20000528

0800076c <__io_getchar>:

int __io_getchar(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
	int ch; // buf?�� ???��?���???????????????? ?��?��?��, ch?��?�� ???��
	while(1)
	{
		if(HAL_UART_Receive(&huart2, &ch, 1, 200) == HAL_OK)
 8000772:	1d39      	adds	r1, r7, #4
 8000774:	23c8      	movs	r3, #200	; 0xc8
 8000776:	2201      	movs	r2, #1
 8000778:	4809      	ldr	r0, [pc, #36]	; (80007a0 <__io_getchar+0x34>)
 800077a:	f004 ff2c 	bl	80055d6 <HAL_UART_Receive>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d000      	beq.n	8000786 <__io_getchar+0x1a>
 8000784:	e7f5      	b.n	8000772 <__io_getchar+0x6>
			break;
 8000786:	bf00      	nop
	}
	HAL_UART_Transmit(&huart2, &ch, 1, 200);
 8000788:	1d39      	adds	r1, r7, #4
 800078a:	23c8      	movs	r3, #200	; 0xc8
 800078c:	2201      	movs	r2, #1
 800078e:	4804      	ldr	r0, [pc, #16]	; (80007a0 <__io_getchar+0x34>)
 8000790:	f004 fe8f 	bl	80054b2 <HAL_UART_Transmit>

	return ch;
 8000794:	687b      	ldr	r3, [r7, #4]
}
 8000796:	4618      	mov	r0, r3
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	20000528 	.word	0x20000528

080007a4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80007a4:	b480      	push	{r7}
 80007a6:	b085      	sub	sp, #20
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	60f8      	str	r0, [r7, #12]
 80007ac:	60b9      	str	r1, [r7, #8]
 80007ae:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	4a07      	ldr	r2, [pc, #28]	; (80007d0 <vApplicationGetIdleTaskMemory+0x2c>)
 80007b4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80007b6:	68bb      	ldr	r3, [r7, #8]
 80007b8:	4a06      	ldr	r2, [pc, #24]	; (80007d4 <vApplicationGetIdleTaskMemory+0x30>)
 80007ba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	2280      	movs	r2, #128	; 0x80
 80007c0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80007c2:	bf00      	nop
 80007c4:	3714      	adds	r7, #20
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	2000009c 	.word	0x2000009c
 80007d4:	2000013c 	.word	0x2000013c

080007d8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80007d8:	b5b0      	push	{r4, r5, r7, lr}
 80007da:	b09c      	sub	sp, #112	; 0x70
 80007dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 80007de:	2100      	movs	r1, #0
 80007e0:	4843      	ldr	r0, [pc, #268]	; (80008f0 <MX_FREERTOS_Init+0x118>)
 80007e2:	f003 fd03 	bl	80041ec <HAL_TIM_IC_Start_IT>
	  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 80007e6:	2104      	movs	r1, #4
 80007e8:	4841      	ldr	r0, [pc, #260]	; (80008f0 <MX_FREERTOS_Init+0x118>)
 80007ea:	f003 fcff 	bl	80041ec <HAL_TIM_IC_Start_IT>
	  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3);
 80007ee:	2108      	movs	r1, #8
 80007f0:	483f      	ldr	r0, [pc, #252]	; (80008f0 <MX_FREERTOS_Init+0x118>)
 80007f2:	f003 fcfb 	bl	80041ec <HAL_TIM_IC_Start_IT>
	//  HAL_TIM_IC_Start_DMA(&htim3, TIM_CHANNEL_1, buf_echo_1, sizeof(buf_echo_1));
	//  HAL_TIM_IC_Start_DMA(&htim3, TIM_CHANNEL_2, buf_echo_2, sizeof(buf_echo_1));
	//  HAL_TIM_IC_Start_DMA(&htim3, TIM_CHANNEL_4, buf_echo_4, sizeof(buf_echo_4));
	  HAL_UART_Receive_DMA(&huart1, buf, sizeof(buf));
 80007f6:	2201      	movs	r2, #1
 80007f8:	493e      	ldr	r1, [pc, #248]	; (80008f4 <MX_FREERTOS_Init+0x11c>)
 80007fa:	483f      	ldr	r0, [pc, #252]	; (80008f8 <MX_FREERTOS_Init+0x120>)
 80007fc:	f004 ff8d 	bl	800571a <HAL_UART_Receive_DMA>
	  HAL_UART_Receive_DMA(&huart2, buf, sizeof(buf));
 8000800:	2201      	movs	r2, #1
 8000802:	493c      	ldr	r1, [pc, #240]	; (80008f4 <MX_FREERTOS_Init+0x11c>)
 8000804:	483d      	ldr	r0, [pc, #244]	; (80008fc <MX_FREERTOS_Init+0x124>)
 8000806:	f004 ff88 	bl	800571a <HAL_UART_Receive_DMA>
	  HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1); // Left
 800080a:	2100      	movs	r1, #0
 800080c:	483c      	ldr	r0, [pc, #240]	; (8000900 <MX_FREERTOS_Init+0x128>)
 800080e:	f003 fbe3 	bl	8003fd8 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1); // Right
 8000812:	2100      	movs	r1, #0
 8000814:	483b      	ldr	r0, [pc, #236]	; (8000904 <MX_FREERTOS_Init+0x12c>)
 8000816:	f003 fbdf 	bl	8003fd8 <HAL_TIM_PWM_Start>

	  HAL_Delay(1000); // ?��?�� ?���??? ?��리니�??? ?��?��?�� 주자.
 800081a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800081e:	f001 fb8d 	bl	8001f3c <HAL_Delay>
	  lcd_init();
 8000822:	f7ff fe5b 	bl	80004dc <lcd_init>
	  lcd_send_string("Hello HARMAN"); // 12�????��
 8000826:	4838      	ldr	r0, [pc, #224]	; (8000908 <MX_FREERTOS_Init+0x130>)
 8000828:	f7ff fef2 	bl	8000610 <lcd_send_string>
	  HAL_Delay(500);
 800082c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000830:	f001 fb84 	bl	8001f3c <HAL_Delay>
	  lcd_put_cur(1, 0); // ?��?�� ?��?���??? 커서 ?��?��
 8000834:	2100      	movs	r1, #0
 8000836:	2001      	movs	r0, #1
 8000838:	f7ff feff 	bl	800063a <lcd_put_cur>
	  lcd_send_string("TEST LCD COM!"); // 12�????��
 800083c:	4833      	ldr	r0, [pc, #204]	; (800090c <MX_FREERTOS_Init+0x134>)
 800083e:	f7ff fee7 	bl	8000610 <lcd_send_string>
	  HAL_Delay(1000);
 8000842:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000846:	f001 fb79 	bl	8001f3c <HAL_Delay>
	lcd_clear();
 800084a:	f7ff ff15 	bl	8000678 <lcd_clear>
	ult_stg = 1;
 800084e:	4b30      	ldr	r3, [pc, #192]	; (8000910 <MX_FREERTOS_Init+0x138>)
 8000850:	2201      	movs	r2, #1
 8000852:	701a      	strb	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000854:	4b2f      	ldr	r3, [pc, #188]	; (8000914 <MX_FREERTOS_Init+0x13c>)
 8000856:	f107 0454 	add.w	r4, r7, #84	; 0x54
 800085a:	461d      	mov	r5, r3
 800085c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800085e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000860:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000864:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000868:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800086c:	2100      	movs	r1, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f005 fcd1 	bl	8006216 <osThreadCreate>
 8000874:	4603      	mov	r3, r0
 8000876:	4a28      	ldr	r2, [pc, #160]	; (8000918 <MX_FREERTOS_Init+0x140>)
 8000878:	6013      	str	r3, [r2, #0]

  /* definition and creation of Ultra_sonic */
  osThreadDef(Ultra_sonic, Ultra_sonic_x3, osPriorityIdle, 0, 128);
 800087a:	4b28      	ldr	r3, [pc, #160]	; (800091c <MX_FREERTOS_Init+0x144>)
 800087c:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000880:	461d      	mov	r5, r3
 8000882:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000884:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000886:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800088a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Ultra_sonicHandle = osThreadCreate(osThread(Ultra_sonic), NULL);
 800088e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000892:	2100      	movs	r1, #0
 8000894:	4618      	mov	r0, r3
 8000896:	f005 fcbe 	bl	8006216 <osThreadCreate>
 800089a:	4603      	mov	r3, r0
 800089c:	4a20      	ldr	r2, [pc, #128]	; (8000920 <MX_FREERTOS_Init+0x148>)
 800089e:	6013      	str	r3, [r2, #0]

  /* definition and creation of Auto_Drive */
  osThreadDef(Auto_Drive, Auto_Drive01, osPriorityIdle, 0, 128);
 80008a0:	4b20      	ldr	r3, [pc, #128]	; (8000924 <MX_FREERTOS_Init+0x14c>)
 80008a2:	f107 041c 	add.w	r4, r7, #28
 80008a6:	461d      	mov	r5, r3
 80008a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Auto_DriveHandle = osThreadCreate(osThread(Auto_Drive), NULL);
 80008b4:	f107 031c 	add.w	r3, r7, #28
 80008b8:	2100      	movs	r1, #0
 80008ba:	4618      	mov	r0, r3
 80008bc:	f005 fcab 	bl	8006216 <osThreadCreate>
 80008c0:	4603      	mov	r3, r0
 80008c2:	4a19      	ldr	r2, [pc, #100]	; (8000928 <MX_FREERTOS_Init+0x150>)
 80008c4:	6013      	str	r3, [r2, #0]

  /* definition and creation of I2C_LCD */
  osThreadDef(I2C_LCD, LCD, osPriorityIdle, 0, 128);
 80008c6:	4b19      	ldr	r3, [pc, #100]	; (800092c <MX_FREERTOS_Init+0x154>)
 80008c8:	463c      	mov	r4, r7
 80008ca:	461d      	mov	r5, r3
 80008cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  I2C_LCDHandle = osThreadCreate(osThread(I2C_LCD), NULL);
 80008d8:	463b      	mov	r3, r7
 80008da:	2100      	movs	r1, #0
 80008dc:	4618      	mov	r0, r3
 80008de:	f005 fc9a 	bl	8006216 <osThreadCreate>
 80008e2:	4603      	mov	r3, r0
 80008e4:	4a12      	ldr	r2, [pc, #72]	; (8000930 <MX_FREERTOS_Init+0x158>)
 80008e6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80008e8:	bf00      	nop
 80008ea:	3770      	adds	r7, #112	; 0x70
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bdb0      	pop	{r4, r5, r7, pc}
 80008f0:	200003dc 	.word	0x200003dc
 80008f4:	20000088 	.word	0x20000088
 80008f8:	200004e4 	.word	0x200004e4
 80008fc:	20000528 	.word	0x20000528
 8000900:	20000424 	.word	0x20000424
 8000904:	2000046c 	.word	0x2000046c
 8000908:	080080e8 	.word	0x080080e8
 800090c:	080080f8 	.word	0x080080f8
 8000910:	200004e2 	.word	0x200004e2
 8000914:	08008114 	.word	0x08008114
 8000918:	2000008c 	.word	0x2000008c
 800091c:	0800813c 	.word	0x0800813c
 8000920:	20000090 	.word	0x20000090
 8000924:	08008164 	.word	0x08008164
 8000928:	20000094 	.word	0x20000094
 800092c:	08008188 	.word	0x08008188
 8000930:	20000098 	.word	0x20000098

08000934 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	  uint8_t mode_cnt = HAL_GPIO_ReadPin(Blue_button_GPIO_Port, Blue_button_Pin);
 800093c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000940:	480e      	ldr	r0, [pc, #56]	; (800097c <StartDefaultTask+0x48>)
 8000942:	f002 f8f5 	bl	8002b30 <HAL_GPIO_ReadPin>
 8000946:	4603      	mov	r3, r0
 8000948:	73fb      	strb	r3, [r7, #15]
	  if(mode_cnt == 0)
 800094a:	7bfb      	ldrb	r3, [r7, #15]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d111      	bne.n	8000974 <StartDefaultTask+0x40>
	  {
		  if(mode < 1)
 8000950:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <StartDefaultTask+0x4c>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d10a      	bne.n	800096e <StartDefaultTask+0x3a>
			  {
			  	  mode++;
 8000958:	4b09      	ldr	r3, [pc, #36]	; (8000980 <StartDefaultTask+0x4c>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	3301      	adds	r3, #1
 800095e:	b2da      	uxtb	r2, r3
 8000960:	4b07      	ldr	r3, [pc, #28]	; (8000980 <StartDefaultTask+0x4c>)
 8000962:	701a      	strb	r2, [r3, #0]
			  	  delay_us(10000);
 8000964:	f242 7010 	movw	r0, #10000	; 0x2710
 8000968:	f7ff fe9e 	bl	80006a8 <delay_us>
 800096c:	e002      	b.n	8000974 <StartDefaultTask+0x40>
			  }
		  else mode = 0;
 800096e:	4b04      	ldr	r3, [pc, #16]	; (8000980 <StartDefaultTask+0x4c>)
 8000970:	2200      	movs	r2, #0
 8000972:	701a      	strb	r2, [r3, #0]
	  }
    osDelay(200);
 8000974:	20c8      	movs	r0, #200	; 0xc8
 8000976:	f005 fc9a 	bl	80062ae <osDelay>
  {
 800097a:	e7df      	b.n	800093c <StartDefaultTask+0x8>
 800097c:	40020800 	.word	0x40020800
 8000980:	20000089 	.word	0x20000089

08000984 <Ultra_sonic_x3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Ultra_sonic_x3 */
void Ultra_sonic_x3(void const * argument)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Ultra_sonic_x3 */
  /* Infinite loop */
  for(;;)
  {
	  HCSR04_Read();
 800098c:	f000 ff4e 	bl	800182c <HCSR04_Read>
//	  distance_filter();
//	  print_distance();
    osDelay(60);
 8000990:	203c      	movs	r0, #60	; 0x3c
 8000992:	f005 fc8c 	bl	80062ae <osDelay>
	  HCSR04_Read();
 8000996:	e7f9      	b.n	800098c <Ultra_sonic_x3+0x8>

08000998 <Auto_Drive01>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Auto_Drive01 */
void Auto_Drive01(void const * argument)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  {
	  extern uint8_t distance_L;
	  extern uint8_t distance_M;
	  extern uint8_t distance_R;
//	  motor_control(&buf);
	  if(mode == 0)
 80009a0:	4b61      	ldr	r3, [pc, #388]	; (8000b28 <Auto_Drive01+0x190>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d105      	bne.n	80009b4 <Auto_Drive01+0x1c>
	  {
		  Stop();
 80009a8:	f000 fb66 	bl	8001078 <Stop>
		  motor_control(&buf);
 80009ac:	485f      	ldr	r0, [pc, #380]	; (8000b2c <Auto_Drive01+0x194>)
 80009ae:	f000 fa81 	bl	8000eb4 <motor_control>
 80009b2:	e0b5      	b.n	8000b20 <Auto_Drive01+0x188>

	  else
	  {
		  // distance_L, distance_M, distance_R
//		  if(mode == 0) Stop();
		  if(distance_M > 13)
 80009b4:	4b5e      	ldr	r3, [pc, #376]	; (8000b30 <Auto_Drive01+0x198>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	2b0d      	cmp	r3, #13
 80009ba:	d979      	bls.n	8000ab0 <Auto_Drive01+0x118>
		  {
			  if((distance_L > LIMIT_D) && (distance_R > LIMIT_D))
 80009bc:	4b5d      	ldr	r3, [pc, #372]	; (8000b34 <Auto_Drive01+0x19c>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	2b17      	cmp	r3, #23
 80009c2:	d913      	bls.n	80009ec <Auto_Drive01+0x54>
 80009c4:	4b5c      	ldr	r3, [pc, #368]	; (8000b38 <Auto_Drive01+0x1a0>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	2b17      	cmp	r3, #23
 80009ca:	d90f      	bls.n	80009ec <Auto_Drive01+0x54>
			  {
				  Forward();
 80009cc:	f000 fb1c 	bl	8001008 <Forward>
				  htim10.Instance->CCR1 = 10000; // Left
 80009d0:	4b5a      	ldr	r3, [pc, #360]	; (8000b3c <Auto_Drive01+0x1a4>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f242 7210 	movw	r2, #10000	; 0x2710
 80009d8:	635a      	str	r2, [r3, #52]	; 0x34
				  htim11.Instance->CCR1 = 10000; // Right
 80009da:	4b59      	ldr	r3, [pc, #356]	; (8000b40 <Auto_Drive01+0x1a8>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	f242 7210 	movw	r2, #10000	; 0x2710
 80009e2:	635a      	str	r2, [r3, #52]	; 0x34
				  state = 1;
 80009e4:	4b57      	ldr	r3, [pc, #348]	; (8000b44 <Auto_Drive01+0x1ac>)
 80009e6:	2201      	movs	r2, #1
 80009e8:	701a      	strb	r2, [r3, #0]
 80009ea:	e099      	b.n	8000b20 <Auto_Drive01+0x188>
			  }
			  else if(distance_L < LIMIT_D)
 80009ec:	4b51      	ldr	r3, [pc, #324]	; (8000b34 <Auto_Drive01+0x19c>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	2b16      	cmp	r3, #22
 80009f2:	d80f      	bhi.n	8000a14 <Auto_Drive01+0x7c>
			  {
				  Forward();
 80009f4:	f000 fb08 	bl	8001008 <Forward>
				  htim10.Instance->CCR1 = 10000; // Left
 80009f8:	4b50      	ldr	r3, [pc, #320]	; (8000b3c <Auto_Drive01+0x1a4>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f242 7210 	movw	r2, #10000	; 0x2710
 8000a00:	635a      	str	r2, [r3, #52]	; 0x34
				  htim11.Instance->CCR1 = 2000; // Right
 8000a02:	4b4f      	ldr	r3, [pc, #316]	; (8000b40 <Auto_Drive01+0x1a8>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000a0a:	635a      	str	r2, [r3, #52]	; 0x34
				  state = 3;
 8000a0c:	4b4d      	ldr	r3, [pc, #308]	; (8000b44 <Auto_Drive01+0x1ac>)
 8000a0e:	2203      	movs	r2, #3
 8000a10:	701a      	strb	r2, [r3, #0]
 8000a12:	e085      	b.n	8000b20 <Auto_Drive01+0x188>
//			  delay_us(10000);
			  }
			  else if(distance_R < LIMIT_D)
 8000a14:	4b48      	ldr	r3, [pc, #288]	; (8000b38 <Auto_Drive01+0x1a0>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	2b16      	cmp	r3, #22
 8000a1a:	d80f      	bhi.n	8000a3c <Auto_Drive01+0xa4>
			  {
				  Forward();
 8000a1c:	f000 faf4 	bl	8001008 <Forward>
				  htim10.Instance->CCR1 = 2000; // Left
 8000a20:	4b46      	ldr	r3, [pc, #280]	; (8000b3c <Auto_Drive01+0x1a4>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000a28:	635a      	str	r2, [r3, #52]	; 0x34
				  htim11.Instance->CCR1 = 10000; // Right
 8000a2a:	4b45      	ldr	r3, [pc, #276]	; (8000b40 <Auto_Drive01+0x1a8>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	f242 7210 	movw	r2, #10000	; 0x2710
 8000a32:	635a      	str	r2, [r3, #52]	; 0x34
				  state = 7;
 8000a34:	4b43      	ldr	r3, [pc, #268]	; (8000b44 <Auto_Drive01+0x1ac>)
 8000a36:	2207      	movs	r2, #7
 8000a38:	701a      	strb	r2, [r3, #0]
 8000a3a:	e071      	b.n	8000b20 <Auto_Drive01+0x188>
//			  delay_us(10000);
			  }
			  else if((distance_L < LIMIT_D) && (distance_R < LIMIT_D))
 8000a3c:	4b3d      	ldr	r3, [pc, #244]	; (8000b34 <Auto_Drive01+0x19c>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	2b16      	cmp	r3, #22
 8000a42:	d86d      	bhi.n	8000b20 <Auto_Drive01+0x188>
 8000a44:	4b3c      	ldr	r3, [pc, #240]	; (8000b38 <Auto_Drive01+0x1a0>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	2b16      	cmp	r3, #22
 8000a4a:	d869      	bhi.n	8000b20 <Auto_Drive01+0x188>
			  {
				  Backward();
 8000a4c:	f000 faf8 	bl	8001040 <Backward>
				  htim10.Instance->CCR1 = 10000; // Left
 8000a50:	4b3a      	ldr	r3, [pc, #232]	; (8000b3c <Auto_Drive01+0x1a4>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	f242 7210 	movw	r2, #10000	; 0x2710
 8000a58:	635a      	str	r2, [r3, #52]	; 0x34
				  htim11.Instance->CCR1 = 10000; // Right
 8000a5a:	4b39      	ldr	r3, [pc, #228]	; (8000b40 <Auto_Drive01+0x1a8>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	f242 7210 	movw	r2, #10000	; 0x2710
 8000a62:	635a      	str	r2, [r3, #52]	; 0x34
//				  delay_us(10000);
				  if((distance_L - distance_R) > 0)
 8000a64:	4b33      	ldr	r3, [pc, #204]	; (8000b34 <Auto_Drive01+0x19c>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	461a      	mov	r2, r3
 8000a6a:	4b33      	ldr	r3, [pc, #204]	; (8000b38 <Auto_Drive01+0x1a0>)
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	1ad3      	subs	r3, r2, r3
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	dd0a      	ble.n	8000a8a <Auto_Drive01+0xf2>
				  {
//					  Forward();
					  htim10.Instance->CCR1 = 10000; // Left
 8000a74:	4b31      	ldr	r3, [pc, #196]	; (8000b3c <Auto_Drive01+0x1a4>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	f242 7210 	movw	r2, #10000	; 0x2710
 8000a7c:	635a      	str	r2, [r3, #52]	; 0x34
					  htim11.Instance->CCR1 = 2000; // Right
 8000a7e:	4b30      	ldr	r3, [pc, #192]	; (8000b40 <Auto_Drive01+0x1a8>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000a86:	635a      	str	r2, [r3, #52]	; 0x34
 8000a88:	e04a      	b.n	8000b20 <Auto_Drive01+0x188>
				  }
				  else if((distance_L - distance_R) <= 0)
 8000a8a:	4b2a      	ldr	r3, [pc, #168]	; (8000b34 <Auto_Drive01+0x19c>)
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	461a      	mov	r2, r3
 8000a90:	4b29      	ldr	r3, [pc, #164]	; (8000b38 <Auto_Drive01+0x1a0>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	1ad3      	subs	r3, r2, r3
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	dc42      	bgt.n	8000b20 <Auto_Drive01+0x188>
				  {
//					  Forward();
					  htim10.Instance->CCR1 = 2000; // Left
 8000a9a:	4b28      	ldr	r3, [pc, #160]	; (8000b3c <Auto_Drive01+0x1a4>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000aa2:	635a      	str	r2, [r3, #52]	; 0x34
					  htim11.Instance->CCR1 = 10000; // Right
 8000aa4:	4b26      	ldr	r3, [pc, #152]	; (8000b40 <Auto_Drive01+0x1a8>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f242 7210 	movw	r2, #10000	; 0x2710
 8000aac:	635a      	str	r2, [r3, #52]	; 0x34
 8000aae:	e037      	b.n	8000b20 <Auto_Drive01+0x188>
				  }
			  }
		  }
		  else if(distance_M < 13)
 8000ab0:	4b1f      	ldr	r3, [pc, #124]	; (8000b30 <Auto_Drive01+0x198>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	2b0c      	cmp	r3, #12
 8000ab6:	d833      	bhi.n	8000b20 <Auto_Drive01+0x188>
		  {
			  Backward();
 8000ab8:	f000 fac2 	bl	8001040 <Backward>
			  htim10.Instance->CCR1 = 10000; // Left
 8000abc:	4b1f      	ldr	r3, [pc, #124]	; (8000b3c <Auto_Drive01+0x1a4>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f242 7210 	movw	r2, #10000	; 0x2710
 8000ac4:	635a      	str	r2, [r3, #52]	; 0x34
			  htim11.Instance->CCR1 = 10000; // Right
 8000ac6:	4b1e      	ldr	r3, [pc, #120]	; (8000b40 <Auto_Drive01+0x1a8>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	f242 7210 	movw	r2, #10000	; 0x2710
 8000ace:	635a      	str	r2, [r3, #52]	; 0x34
//			  delay_us(10000);
			  if((distance_L - distance_R) > 0)
 8000ad0:	4b18      	ldr	r3, [pc, #96]	; (8000b34 <Auto_Drive01+0x19c>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	4b18      	ldr	r3, [pc, #96]	; (8000b38 <Auto_Drive01+0x1a0>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	1ad3      	subs	r3, r2, r3
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	dd0a      	ble.n	8000af6 <Auto_Drive01+0x15e>
			  {
//					  Forward();
				  htim10.Instance->CCR1 = 10000; // Left
 8000ae0:	4b16      	ldr	r3, [pc, #88]	; (8000b3c <Auto_Drive01+0x1a4>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f242 7210 	movw	r2, #10000	; 0x2710
 8000ae8:	635a      	str	r2, [r3, #52]	; 0x34
				  htim11.Instance->CCR1 = 2000; // Right
 8000aea:	4b15      	ldr	r3, [pc, #84]	; (8000b40 <Auto_Drive01+0x1a8>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000af2:	635a      	str	r2, [r3, #52]	; 0x34
 8000af4:	e011      	b.n	8000b1a <Auto_Drive01+0x182>
			  }
			  else if((distance_L - distance_R) <= 0)
 8000af6:	4b0f      	ldr	r3, [pc, #60]	; (8000b34 <Auto_Drive01+0x19c>)
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	461a      	mov	r2, r3
 8000afc:	4b0e      	ldr	r3, [pc, #56]	; (8000b38 <Auto_Drive01+0x1a0>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	1ad3      	subs	r3, r2, r3
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	dc09      	bgt.n	8000b1a <Auto_Drive01+0x182>
			  {
//					  Forward();
				  htim10.Instance->CCR1 = 2000; // Left
 8000b06:	4b0d      	ldr	r3, [pc, #52]	; (8000b3c <Auto_Drive01+0x1a4>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000b0e:	635a      	str	r2, [r3, #52]	; 0x34
				  htim11.Instance->CCR1 = 10000; // Right
 8000b10:	4b0b      	ldr	r3, [pc, #44]	; (8000b40 <Auto_Drive01+0x1a8>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f242 7210 	movw	r2, #10000	; 0x2710
 8000b18:	635a      	str	r2, [r3, #52]	; 0x34
			  }
			  state = 4;
 8000b1a:	4b0a      	ldr	r3, [pc, #40]	; (8000b44 <Auto_Drive01+0x1ac>)
 8000b1c:	2204      	movs	r2, #4
 8000b1e:	701a      	strb	r2, [r3, #0]
		  }
	  }
    osDelay(200);
 8000b20:	20c8      	movs	r0, #200	; 0xc8
 8000b22:	f005 fbc4 	bl	80062ae <osDelay>
  {
 8000b26:	e73b      	b.n	80009a0 <Auto_Drive01+0x8>
 8000b28:	20000089 	.word	0x20000089
 8000b2c:	20000088 	.word	0x20000088
 8000b30:	200004d1 	.word	0x200004d1
 8000b34:	200004c1 	.word	0x200004c1
 8000b38:	200004e1 	.word	0x200004e1
 8000b3c:	20000424 	.word	0x20000424
 8000b40:	2000046c 	.word	0x2000046c
 8000b44:	2000008a 	.word	0x2000008a

08000b48 <LCD>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LCD */
void LCD(void const * argument)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LCD */
  /* Infinite loop */
  for(;;)
  {
	  lcd_put_cur(0, 0);
 8000b50:	2100      	movs	r1, #0
 8000b52:	2000      	movs	r0, #0
 8000b54:	f7ff fd71 	bl	800063a <lcd_put_cur>
	  switch(mode)
 8000b58:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <LCD+0x38>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d002      	beq.n	8000b66 <LCD+0x1e>
 8000b60:	2b01      	cmp	r3, #1
 8000b62:	d004      	beq.n	8000b6e <LCD+0x26>
 8000b64:	e007      	b.n	8000b76 <LCD+0x2e>
	  {
	  	  case 0 :
	  		  lcd_send_string("Manual Mode");
 8000b66:	4807      	ldr	r0, [pc, #28]	; (8000b84 <LCD+0x3c>)
 8000b68:	f7ff fd52 	bl	8000610 <lcd_send_string>
	  		  break;
 8000b6c:	e003      	b.n	8000b76 <LCD+0x2e>
	  	  case 1 :
	  		  lcd_send_string("  Auto Mode");
 8000b6e:	4806      	ldr	r0, [pc, #24]	; (8000b88 <LCD+0x40>)
 8000b70:	f7ff fd4e 	bl	8000610 <lcd_send_string>
	  		  break;
 8000b74:	bf00      	nop
//			default :
//				printf("Error \r\n");
//				break;
//			}
//		}
    osDelay(300);
 8000b76:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000b7a:	f005 fb98 	bl	80062ae <osDelay>
	  lcd_put_cur(0, 0);
 8000b7e:	e7e7      	b.n	8000b50 <LCD+0x8>
 8000b80:	20000089 	.word	0x20000089
 8000b84:	080081a4 	.word	0x080081a4
 8000b88:	080081b0 	.word	0x080081b0

08000b8c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08a      	sub	sp, #40	; 0x28
 8000b90:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b92:	f107 0314 	add.w	r3, r7, #20
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	605a      	str	r2, [r3, #4]
 8000b9c:	609a      	str	r2, [r3, #8]
 8000b9e:	60da      	str	r2, [r3, #12]
 8000ba0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	613b      	str	r3, [r7, #16]
 8000ba6:	4b37      	ldr	r3, [pc, #220]	; (8000c84 <MX_GPIO_Init+0xf8>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	4a36      	ldr	r2, [pc, #216]	; (8000c84 <MX_GPIO_Init+0xf8>)
 8000bac:	f043 0304 	orr.w	r3, r3, #4
 8000bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb2:	4b34      	ldr	r3, [pc, #208]	; (8000c84 <MX_GPIO_Init+0xf8>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	f003 0304 	and.w	r3, r3, #4
 8000bba:	613b      	str	r3, [r7, #16]
 8000bbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	4b30      	ldr	r3, [pc, #192]	; (8000c84 <MX_GPIO_Init+0xf8>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	4a2f      	ldr	r2, [pc, #188]	; (8000c84 <MX_GPIO_Init+0xf8>)
 8000bc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bce:	4b2d      	ldr	r3, [pc, #180]	; (8000c84 <MX_GPIO_Init+0xf8>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60bb      	str	r3, [r7, #8]
 8000bde:	4b29      	ldr	r3, [pc, #164]	; (8000c84 <MX_GPIO_Init+0xf8>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	4a28      	ldr	r2, [pc, #160]	; (8000c84 <MX_GPIO_Init+0xf8>)
 8000be4:	f043 0301 	orr.w	r3, r3, #1
 8000be8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bea:	4b26      	ldr	r3, [pc, #152]	; (8000c84 <MX_GPIO_Init+0xf8>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	60bb      	str	r3, [r7, #8]
 8000bf4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	607b      	str	r3, [r7, #4]
 8000bfa:	4b22      	ldr	r3, [pc, #136]	; (8000c84 <MX_GPIO_Init+0xf8>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	4a21      	ldr	r2, [pc, #132]	; (8000c84 <MX_GPIO_Init+0xf8>)
 8000c00:	f043 0302 	orr.w	r3, r3, #2
 8000c04:	6313      	str	r3, [r2, #48]	; 0x30
 8000c06:	4b1f      	ldr	r3, [pc, #124]	; (8000c84 <MX_GPIO_Init+0xf8>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	f003 0302 	and.w	r3, r3, #2
 8000c0e:	607b      	str	r3, [r7, #4]
 8000c10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Right_Front_Pin|Right_Back_Pin|Left_Back_Pin|Left_Front_Pin, GPIO_PIN_RESET);
 8000c12:	2200      	movs	r2, #0
 8000c14:	f240 1143 	movw	r1, #323	; 0x143
 8000c18:	481b      	ldr	r0, [pc, #108]	; (8000c88 <MX_GPIO_Init+0xfc>)
 8000c1a:	f001 ffa1 	bl	8002b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2104      	movs	r1, #4
 8000c22:	481a      	ldr	r0, [pc, #104]	; (8000c8c <MX_GPIO_Init+0x100>)
 8000c24:	f001 ff9c 	bl	8002b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Blue_button_Pin;
 8000c28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Blue_button_GPIO_Port, &GPIO_InitStruct);
 8000c36:	f107 0314 	add.w	r3, r7, #20
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4812      	ldr	r0, [pc, #72]	; (8000c88 <MX_GPIO_Init+0xfc>)
 8000c3e:	f001 fdf3 	bl	8002828 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Right_Front_Pin|Right_Back_Pin|Left_Back_Pin|Left_Front_Pin;
 8000c42:	f240 1343 	movw	r3, #323	; 0x143
 8000c46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c50:	2300      	movs	r3, #0
 8000c52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c54:	f107 0314 	add.w	r3, r7, #20
 8000c58:	4619      	mov	r1, r3
 8000c5a:	480b      	ldr	r0, [pc, #44]	; (8000c88 <MX_GPIO_Init+0xfc>)
 8000c5c:	f001 fde4 	bl	8002828 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 8000c60:	2304      	movs	r3, #4
 8000c62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c64:	2301      	movs	r3, #1
 8000c66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 8000c70:	f107 0314 	add.w	r3, r7, #20
 8000c74:	4619      	mov	r1, r3
 8000c76:	4805      	ldr	r0, [pc, #20]	; (8000c8c <MX_GPIO_Init+0x100>)
 8000c78:	f001 fdd6 	bl	8002828 <HAL_GPIO_Init>

}
 8000c7c:	bf00      	nop
 8000c7e:	3728      	adds	r7, #40	; 0x28
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	40023800 	.word	0x40023800
 8000c88:	40020800 	.word	0x40020800
 8000c8c:	40020400 	.word	0x40020400

08000c90 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c94:	4b12      	ldr	r3, [pc, #72]	; (8000ce0 <MX_I2C1_Init+0x50>)
 8000c96:	4a13      	ldr	r2, [pc, #76]	; (8000ce4 <MX_I2C1_Init+0x54>)
 8000c98:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c9a:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <MX_I2C1_Init+0x50>)
 8000c9c:	4a12      	ldr	r2, [pc, #72]	; (8000ce8 <MX_I2C1_Init+0x58>)
 8000c9e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ca0:	4b0f      	ldr	r3, [pc, #60]	; (8000ce0 <MX_I2C1_Init+0x50>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ca6:	4b0e      	ldr	r3, [pc, #56]	; (8000ce0 <MX_I2C1_Init+0x50>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cac:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <MX_I2C1_Init+0x50>)
 8000cae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cb2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cb4:	4b0a      	ldr	r3, [pc, #40]	; (8000ce0 <MX_I2C1_Init+0x50>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000cba:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <MX_I2C1_Init+0x50>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cc0:	4b07      	ldr	r3, [pc, #28]	; (8000ce0 <MX_I2C1_Init+0x50>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cc6:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <MX_I2C1_Init+0x50>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ccc:	4804      	ldr	r0, [pc, #16]	; (8000ce0 <MX_I2C1_Init+0x50>)
 8000cce:	f001 ff61 	bl	8002b94 <HAL_I2C_Init>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000cd8:	f000 f8e6 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	2000033c 	.word	0x2000033c
 8000ce4:	40005400 	.word	0x40005400
 8000ce8:	000186a0 	.word	0x000186a0

08000cec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b08a      	sub	sp, #40	; 0x28
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf4:	f107 0314 	add.w	r3, r7, #20
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a19      	ldr	r2, [pc, #100]	; (8000d70 <HAL_I2C_MspInit+0x84>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d12b      	bne.n	8000d66 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	613b      	str	r3, [r7, #16]
 8000d12:	4b18      	ldr	r3, [pc, #96]	; (8000d74 <HAL_I2C_MspInit+0x88>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	4a17      	ldr	r2, [pc, #92]	; (8000d74 <HAL_I2C_MspInit+0x88>)
 8000d18:	f043 0302 	orr.w	r3, r3, #2
 8000d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1e:	4b15      	ldr	r3, [pc, #84]	; (8000d74 <HAL_I2C_MspInit+0x88>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	f003 0302 	and.w	r3, r3, #2
 8000d26:	613b      	str	r3, [r7, #16]
 8000d28:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d2a:	23c0      	movs	r3, #192	; 0xc0
 8000d2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d2e:	2312      	movs	r3, #18
 8000d30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d36:	2303      	movs	r3, #3
 8000d38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d3a:	2304      	movs	r3, #4
 8000d3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d3e:	f107 0314 	add.w	r3, r7, #20
 8000d42:	4619      	mov	r1, r3
 8000d44:	480c      	ldr	r0, [pc, #48]	; (8000d78 <HAL_I2C_MspInit+0x8c>)
 8000d46:	f001 fd6f 	bl	8002828 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	60fb      	str	r3, [r7, #12]
 8000d4e:	4b09      	ldr	r3, [pc, #36]	; (8000d74 <HAL_I2C_MspInit+0x88>)
 8000d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d52:	4a08      	ldr	r2, [pc, #32]	; (8000d74 <HAL_I2C_MspInit+0x88>)
 8000d54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d58:	6413      	str	r3, [r2, #64]	; 0x40
 8000d5a:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <HAL_I2C_MspInit+0x88>)
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000d66:	bf00      	nop
 8000d68:	3728      	adds	r7, #40	; 0x28
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40005400 	.word	0x40005400
 8000d74:	40023800 	.word	0x40023800
 8000d78:	40020400 	.word	0x40020400

08000d7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d80:	f001 f89a 	bl	8001eb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d84:	f000 f816 	bl	8000db4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d88:	f7ff ff00 	bl	8000b8c <MX_GPIO_Init>
  MX_DMA_Init();
 8000d8c:	f7ff fca6 	bl	80006dc <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000d90:	f000 ff2e 	bl	8001bf0 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000d94:	f000 fb22 	bl	80013dc <MX_TIM3_Init>
  MX_TIM10_Init();
 8000d98:	f000 fba6 	bl	80014e8 <MX_TIM10_Init>
  MX_TIM11_Init();
 8000d9c:	f000 fbf2 	bl	8001584 <MX_TIM11_Init>
  MX_USART2_UART_Init();
 8000da0:	f000 ff50 	bl	8001c44 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000da4:	f7ff ff74 	bl	8000c90 <MX_I2C1_Init>
//  HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1); // Left
//  HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1); // Right
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000da8:	f7ff fd16 	bl	80007d8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000dac:	f005 fa2c 	bl	8006208 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000db0:	e7fe      	b.n	8000db0 <main+0x34>
	...

08000db4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b094      	sub	sp, #80	; 0x50
 8000db8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dba:	f107 0320 	add.w	r3, r7, #32
 8000dbe:	2230      	movs	r2, #48	; 0x30
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f006 fe78 	bl	8007ab8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dc8:	f107 030c 	add.w	r3, r7, #12
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dd8:	2300      	movs	r3, #0
 8000dda:	60bb      	str	r3, [r7, #8]
 8000ddc:	4b27      	ldr	r3, [pc, #156]	; (8000e7c <SystemClock_Config+0xc8>)
 8000dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de0:	4a26      	ldr	r2, [pc, #152]	; (8000e7c <SystemClock_Config+0xc8>)
 8000de2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000de6:	6413      	str	r3, [r2, #64]	; 0x40
 8000de8:	4b24      	ldr	r3, [pc, #144]	; (8000e7c <SystemClock_Config+0xc8>)
 8000dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000df0:	60bb      	str	r3, [r7, #8]
 8000df2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000df4:	2300      	movs	r3, #0
 8000df6:	607b      	str	r3, [r7, #4]
 8000df8:	4b21      	ldr	r3, [pc, #132]	; (8000e80 <SystemClock_Config+0xcc>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a20      	ldr	r2, [pc, #128]	; (8000e80 <SystemClock_Config+0xcc>)
 8000dfe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e02:	6013      	str	r3, [r2, #0]
 8000e04:	4b1e      	ldr	r3, [pc, #120]	; (8000e80 <SystemClock_Config+0xcc>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e0c:	607b      	str	r3, [r7, #4]
 8000e0e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e10:	2301      	movs	r3, #1
 8000e12:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e18:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e1e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e22:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e24:	2304      	movs	r3, #4
 8000e26:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000e28:	2364      	movs	r3, #100	; 0x64
 8000e2a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e30:	2304      	movs	r3, #4
 8000e32:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e34:	f107 0320 	add.w	r3, r7, #32
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f002 faf7 	bl	800342c <HAL_RCC_OscConfig>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e44:	f000 f830 	bl	8000ea8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e48:	230f      	movs	r3, #15
 8000e4a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e50:	2300      	movs	r3, #0
 8000e52:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e58:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000e5e:	f107 030c 	add.w	r3, r7, #12
 8000e62:	2103      	movs	r1, #3
 8000e64:	4618      	mov	r0, r3
 8000e66:	f002 fd59 	bl	800391c <HAL_RCC_ClockConfig>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000e70:	f000 f81a 	bl	8000ea8 <Error_Handler>
  }
}
 8000e74:	bf00      	nop
 8000e76:	3750      	adds	r7, #80	; 0x50
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	40023800 	.word	0x40023800
 8000e80:	40007000 	.word	0x40007000

08000e84 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a04      	ldr	r2, [pc, #16]	; (8000ea4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d101      	bne.n	8000e9a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e96:	f001 f831 	bl	8001efc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40010000 	.word	0x40010000

08000ea8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eac:	b672      	cpsid	i
}
 8000eae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eb0:	e7fe      	b.n	8000eb0 <Error_Handler+0x8>
	...

08000eb4 <motor_control>:
#include "motor.h"
#include "main.h"
#include "I2C_LCD.h"

void motor_control(char *buf)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
	  if(buf[0] != 0)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	f000 808b 	beq.w	8000fdc <motor_control+0x128>
		{
			switch(buf[0])
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	3b61      	subs	r3, #97	; 0x61
 8000ecc:	2b16      	cmp	r3, #22
 8000ece:	f200 8081 	bhi.w	8000fd4 <motor_control+0x120>
 8000ed2:	a201      	add	r2, pc, #4	; (adr r2, 8000ed8 <motor_control+0x24>)
 8000ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ed8:	08000f85 	.word	0x08000f85
 8000edc:	08000fd5 	.word	0x08000fd5
 8000ee0:	08000fd5 	.word	0x08000fd5
 8000ee4:	08000fad 	.word	0x08000fad
 8000ee8:	08000fd5 	.word	0x08000fd5
 8000eec:	08000fd5 	.word	0x08000fd5
 8000ef0:	08000fd5 	.word	0x08000fd5
 8000ef4:	08000fd5 	.word	0x08000fd5
 8000ef8:	08000fd5 	.word	0x08000fd5
 8000efc:	08000fd5 	.word	0x08000fd5
 8000f00:	08000fd5 	.word	0x08000fd5
 8000f04:	08000fd5 	.word	0x08000fd5
 8000f08:	08000fd5 	.word	0x08000fd5
 8000f0c:	08000fd5 	.word	0x08000fd5
 8000f10:	08000fd5 	.word	0x08000fd5
 8000f14:	08000fd5 	.word	0x08000fd5
 8000f18:	08000fd5 	.word	0x08000fd5
 8000f1c:	08000fd5 	.word	0x08000fd5
 8000f20:	08000f5d 	.word	0x08000f5d
 8000f24:	08000fd5 	.word	0x08000fd5
 8000f28:	08000fd5 	.word	0x08000fd5
 8000f2c:	08000fd5 	.word	0x08000fd5
 8000f30:	08000f35 	.word	0x08000f35
			{
			case 'w' :
				Forward();
 8000f34:	f000 f868 	bl	8001008 <Forward>
				htim10.Instance->CCR1 = 10000; // Left
 8000f38:	4b2c      	ldr	r3, [pc, #176]	; (8000fec <motor_control+0x138>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f242 7210 	movw	r2, #10000	; 0x2710
 8000f40:	635a      	str	r2, [r3, #52]	; 0x34
				htim11.Instance->CCR1 = 10000; // Right
 8000f42:	4b2b      	ldr	r3, [pc, #172]	; (8000ff0 <motor_control+0x13c>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f242 7210 	movw	r2, #10000	; 0x2710
 8000f4a:	635a      	str	r2, [r3, #52]	; 0x34
//				printf("Forward \r\n");
				lcd_put_cur(1, 0);
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	2001      	movs	r0, #1
 8000f50:	f7ff fb73 	bl	800063a <lcd_put_cur>
				lcd_send_string("Forward ");
 8000f54:	4827      	ldr	r0, [pc, #156]	; (8000ff4 <motor_control+0x140>)
 8000f56:	f7ff fb5b 	bl	8000610 <lcd_send_string>
				break;
 8000f5a:	e03f      	b.n	8000fdc <motor_control+0x128>
			case 's' :
				Backward();
 8000f5c:	f000 f870 	bl	8001040 <Backward>
				htim10.Instance->CCR1 = 10000; // Left
 8000f60:	4b22      	ldr	r3, [pc, #136]	; (8000fec <motor_control+0x138>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f242 7210 	movw	r2, #10000	; 0x2710
 8000f68:	635a      	str	r2, [r3, #52]	; 0x34
				htim11.Instance->CCR1 = 10000; // Right
 8000f6a:	4b21      	ldr	r3, [pc, #132]	; (8000ff0 <motor_control+0x13c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f242 7210 	movw	r2, #10000	; 0x2710
 8000f72:	635a      	str	r2, [r3, #52]	; 0x34
//				printf("Backward \r\n");
				lcd_put_cur(1, 0);
 8000f74:	2100      	movs	r1, #0
 8000f76:	2001      	movs	r0, #1
 8000f78:	f7ff fb5f 	bl	800063a <lcd_put_cur>
				lcd_send_string("Backward");
 8000f7c:	481e      	ldr	r0, [pc, #120]	; (8000ff8 <motor_control+0x144>)
 8000f7e:	f7ff fb47 	bl	8000610 <lcd_send_string>
				break;
 8000f82:	e02b      	b.n	8000fdc <motor_control+0x128>
			case 'a' :
				Forward();
 8000f84:	f000 f840 	bl	8001008 <Forward>
				htim10.Instance->CCR1 = 7500; // Left
 8000f88:	4b18      	ldr	r3, [pc, #96]	; (8000fec <motor_control+0x138>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8000f90:	635a      	str	r2, [r3, #52]	; 0x34
				htim11.Instance->CCR1 = 10000; // Right
 8000f92:	4b17      	ldr	r3, [pc, #92]	; (8000ff0 <motor_control+0x13c>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f242 7210 	movw	r2, #10000	; 0x2710
 8000f9a:	635a      	str	r2, [r3, #52]	; 0x34
//				printf("Left \r\n");
				lcd_put_cur(1, 0);
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	2001      	movs	r0, #1
 8000fa0:	f7ff fb4b 	bl	800063a <lcd_put_cur>
				lcd_send_string("Left    ");
 8000fa4:	4815      	ldr	r0, [pc, #84]	; (8000ffc <motor_control+0x148>)
 8000fa6:	f7ff fb33 	bl	8000610 <lcd_send_string>
				break;
 8000faa:	e017      	b.n	8000fdc <motor_control+0x128>
			case 'd' :
				Forward();
 8000fac:	f000 f82c 	bl	8001008 <Forward>
				htim10.Instance->CCR1 = 10000; // Left
 8000fb0:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <motor_control+0x138>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f242 7210 	movw	r2, #10000	; 0x2710
 8000fb8:	635a      	str	r2, [r3, #52]	; 0x34
				htim11.Instance->CCR1 = 7500; // Right
 8000fba:	4b0d      	ldr	r3, [pc, #52]	; (8000ff0 <motor_control+0x13c>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8000fc2:	635a      	str	r2, [r3, #52]	; 0x34
//				printf("Right \r\n");
				lcd_put_cur(1, 0);
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	2001      	movs	r0, #1
 8000fc8:	f7ff fb37 	bl	800063a <lcd_put_cur>
				lcd_send_string("Right   ");
 8000fcc:	480c      	ldr	r0, [pc, #48]	; (8001000 <motor_control+0x14c>)
 8000fce:	f7ff fb1f 	bl	8000610 <lcd_send_string>
				break;
 8000fd2:	e003      	b.n	8000fdc <motor_control+0x128>
			default :
				printf("Error \r\n");
 8000fd4:	480b      	ldr	r0, [pc, #44]	; (8001004 <motor_control+0x150>)
 8000fd6:	f006 fc8f 	bl	80078f8 <puts>
				break;
 8000fda:	bf00      	nop
			}
		}
		buf[0] = 0;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2200      	movs	r2, #0
 8000fe0:	701a      	strb	r2, [r3, #0]
//	  	HAL_Delay(50);
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000424 	.word	0x20000424
 8000ff0:	2000046c 	.word	0x2000046c
 8000ff4:	080081bc 	.word	0x080081bc
 8000ff8:	080081c8 	.word	0x080081c8
 8000ffc:	080081d4 	.word	0x080081d4
 8001000:	080081e0 	.word	0x080081e0
 8001004:	080081ec 	.word	0x080081ec

08001008 <Forward>:


void Forward()
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Right_Front_GPIO_Port, Right_Front_Pin, 1);
 800100c:	2201      	movs	r2, #1
 800100e:	2101      	movs	r1, #1
 8001010:	480a      	ldr	r0, [pc, #40]	; (800103c <Forward+0x34>)
 8001012:	f001 fda5 	bl	8002b60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Right_Back_GPIO_Port, Right_Back_Pin, 0);
 8001016:	2200      	movs	r2, #0
 8001018:	2102      	movs	r1, #2
 800101a:	4808      	ldr	r0, [pc, #32]	; (800103c <Forward+0x34>)
 800101c:	f001 fda0 	bl	8002b60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Left_Front_GPIO_Port, Left_Front_Pin, 0);
 8001020:	2200      	movs	r2, #0
 8001022:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001026:	4805      	ldr	r0, [pc, #20]	; (800103c <Forward+0x34>)
 8001028:	f001 fd9a 	bl	8002b60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Left_Back_GPIO_Port, Left_Back_Pin, 1);
 800102c:	2201      	movs	r2, #1
 800102e:	2140      	movs	r1, #64	; 0x40
 8001030:	4802      	ldr	r0, [pc, #8]	; (800103c <Forward+0x34>)
 8001032:	f001 fd95 	bl	8002b60 <HAL_GPIO_WritePin>
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40020800 	.word	0x40020800

08001040 <Backward>:

void Backward()
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Right_Front_GPIO_Port, Right_Front_Pin, 0);
 8001044:	2200      	movs	r2, #0
 8001046:	2101      	movs	r1, #1
 8001048:	480a      	ldr	r0, [pc, #40]	; (8001074 <Backward+0x34>)
 800104a:	f001 fd89 	bl	8002b60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Right_Back_GPIO_Port, Right_Back_Pin, 1);
 800104e:	2201      	movs	r2, #1
 8001050:	2102      	movs	r1, #2
 8001052:	4808      	ldr	r0, [pc, #32]	; (8001074 <Backward+0x34>)
 8001054:	f001 fd84 	bl	8002b60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Left_Front_GPIO_Port, Left_Front_Pin, 1);
 8001058:	2201      	movs	r2, #1
 800105a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800105e:	4805      	ldr	r0, [pc, #20]	; (8001074 <Backward+0x34>)
 8001060:	f001 fd7e 	bl	8002b60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Left_Back_GPIO_Port, Left_Back_Pin, 0);
 8001064:	2200      	movs	r2, #0
 8001066:	2140      	movs	r1, #64	; 0x40
 8001068:	4802      	ldr	r0, [pc, #8]	; (8001074 <Backward+0x34>)
 800106a:	f001 fd79 	bl	8002b60 <HAL_GPIO_WritePin>
}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40020800 	.word	0x40020800

08001078 <Stop>:

void Stop()
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Right_Front_GPIO_Port, Right_Front_Pin, 0);
 800107c:	2200      	movs	r2, #0
 800107e:	2101      	movs	r1, #1
 8001080:	480a      	ldr	r0, [pc, #40]	; (80010ac <Stop+0x34>)
 8001082:	f001 fd6d 	bl	8002b60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Right_Back_GPIO_Port, Right_Back_Pin, 0);
 8001086:	2200      	movs	r2, #0
 8001088:	2102      	movs	r1, #2
 800108a:	4808      	ldr	r0, [pc, #32]	; (80010ac <Stop+0x34>)
 800108c:	f001 fd68 	bl	8002b60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Left_Front_GPIO_Port, Left_Front_Pin, 0);
 8001090:	2200      	movs	r2, #0
 8001092:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001096:	4805      	ldr	r0, [pc, #20]	; (80010ac <Stop+0x34>)
 8001098:	f001 fd62 	bl	8002b60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Left_Back_GPIO_Port, Left_Back_Pin, 0);
 800109c:	2200      	movs	r2, #0
 800109e:	2140      	movs	r1, #64	; 0x40
 80010a0:	4802      	ldr	r0, [pc, #8]	; (80010ac <Stop+0x34>)
 80010a2:	f001 fd5d 	bl	8002b60 <HAL_GPIO_WritePin>
}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40020800 	.word	0x40020800

080010b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	607b      	str	r3, [r7, #4]
 80010ba:	4b12      	ldr	r3, [pc, #72]	; (8001104 <HAL_MspInit+0x54>)
 80010bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010be:	4a11      	ldr	r2, [pc, #68]	; (8001104 <HAL_MspInit+0x54>)
 80010c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010c4:	6453      	str	r3, [r2, #68]	; 0x44
 80010c6:	4b0f      	ldr	r3, [pc, #60]	; (8001104 <HAL_MspInit+0x54>)
 80010c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ce:	607b      	str	r3, [r7, #4]
 80010d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	603b      	str	r3, [r7, #0]
 80010d6:	4b0b      	ldr	r3, [pc, #44]	; (8001104 <HAL_MspInit+0x54>)
 80010d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010da:	4a0a      	ldr	r2, [pc, #40]	; (8001104 <HAL_MspInit+0x54>)
 80010dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010e0:	6413      	str	r3, [r2, #64]	; 0x40
 80010e2:	4b08      	ldr	r3, [pc, #32]	; (8001104 <HAL_MspInit+0x54>)
 80010e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ea:	603b      	str	r3, [r7, #0]
 80010ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80010ee:	2200      	movs	r2, #0
 80010f0:	210f      	movs	r1, #15
 80010f2:	f06f 0001 	mvn.w	r0, #1
 80010f6:	f000 fffd 	bl	80020f4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40023800 	.word	0x40023800

08001108 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08c      	sub	sp, #48	; 0x30
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001110:	2300      	movs	r3, #0
 8001112:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001114:	2300      	movs	r3, #0
 8001116:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001118:	2300      	movs	r3, #0
 800111a:	60bb      	str	r3, [r7, #8]
 800111c:	4b2e      	ldr	r3, [pc, #184]	; (80011d8 <HAL_InitTick+0xd0>)
 800111e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001120:	4a2d      	ldr	r2, [pc, #180]	; (80011d8 <HAL_InitTick+0xd0>)
 8001122:	f043 0301 	orr.w	r3, r3, #1
 8001126:	6453      	str	r3, [r2, #68]	; 0x44
 8001128:	4b2b      	ldr	r3, [pc, #172]	; (80011d8 <HAL_InitTick+0xd0>)
 800112a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112c:	f003 0301 	and.w	r3, r3, #1
 8001130:	60bb      	str	r3, [r7, #8]
 8001132:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001134:	f107 020c 	add.w	r2, r7, #12
 8001138:	f107 0310 	add.w	r3, r7, #16
 800113c:	4611      	mov	r1, r2
 800113e:	4618      	mov	r0, r3
 8001140:	f002 fe0c 	bl	8003d5c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001144:	f002 fdf6 	bl	8003d34 <HAL_RCC_GetPCLK2Freq>
 8001148:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800114a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800114c:	4a23      	ldr	r2, [pc, #140]	; (80011dc <HAL_InitTick+0xd4>)
 800114e:	fba2 2303 	umull	r2, r3, r2, r3
 8001152:	0c9b      	lsrs	r3, r3, #18
 8001154:	3b01      	subs	r3, #1
 8001156:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001158:	4b21      	ldr	r3, [pc, #132]	; (80011e0 <HAL_InitTick+0xd8>)
 800115a:	4a22      	ldr	r2, [pc, #136]	; (80011e4 <HAL_InitTick+0xdc>)
 800115c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800115e:	4b20      	ldr	r3, [pc, #128]	; (80011e0 <HAL_InitTick+0xd8>)
 8001160:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001164:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001166:	4a1e      	ldr	r2, [pc, #120]	; (80011e0 <HAL_InitTick+0xd8>)
 8001168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800116a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800116c:	4b1c      	ldr	r3, [pc, #112]	; (80011e0 <HAL_InitTick+0xd8>)
 800116e:	2200      	movs	r2, #0
 8001170:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001172:	4b1b      	ldr	r3, [pc, #108]	; (80011e0 <HAL_InitTick+0xd8>)
 8001174:	2200      	movs	r2, #0
 8001176:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001178:	4b19      	ldr	r3, [pc, #100]	; (80011e0 <HAL_InitTick+0xd8>)
 800117a:	2200      	movs	r2, #0
 800117c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800117e:	4818      	ldr	r0, [pc, #96]	; (80011e0 <HAL_InitTick+0xd8>)
 8001180:	f002 fe1e 	bl	8003dc0 <HAL_TIM_Base_Init>
 8001184:	4603      	mov	r3, r0
 8001186:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800118a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800118e:	2b00      	cmp	r3, #0
 8001190:	d11b      	bne.n	80011ca <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001192:	4813      	ldr	r0, [pc, #76]	; (80011e0 <HAL_InitTick+0xd8>)
 8001194:	f002 fe64 	bl	8003e60 <HAL_TIM_Base_Start_IT>
 8001198:	4603      	mov	r3, r0
 800119a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800119e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d111      	bne.n	80011ca <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80011a6:	2019      	movs	r0, #25
 80011a8:	f000 ffc0 	bl	800212c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2b0f      	cmp	r3, #15
 80011b0:	d808      	bhi.n	80011c4 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80011b2:	2200      	movs	r2, #0
 80011b4:	6879      	ldr	r1, [r7, #4]
 80011b6:	2019      	movs	r0, #25
 80011b8:	f000 ff9c 	bl	80020f4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011bc:	4a0a      	ldr	r2, [pc, #40]	; (80011e8 <HAL_InitTick+0xe0>)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6013      	str	r3, [r2, #0]
 80011c2:	e002      	b.n	80011ca <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80011ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3730      	adds	r7, #48	; 0x30
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40023800 	.word	0x40023800
 80011dc:	431bde83 	.word	0x431bde83
 80011e0:	20000390 	.word	0x20000390
 80011e4:	40010000 	.word	0x40010000
 80011e8:	20000004 	.word	0x20000004

080011ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011f0:	e7fe      	b.n	80011f0 <NMI_Handler+0x4>

080011f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011f2:	b480      	push	{r7}
 80011f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011f6:	e7fe      	b.n	80011f6 <HardFault_Handler+0x4>

080011f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011fc:	e7fe      	b.n	80011fc <MemManage_Handler+0x4>

080011fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011fe:	b480      	push	{r7}
 8001200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001202:	e7fe      	b.n	8001202 <BusFault_Handler+0x4>

08001204 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001208:	e7fe      	b.n	8001208 <UsageFault_Handler+0x4>

0800120a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800120a:	b480      	push	{r7}
 800120c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800120e:	bf00      	nop
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800121c:	4803      	ldr	r0, [pc, #12]	; (800122c <TIM1_UP_TIM10_IRQHandler+0x14>)
 800121e:	f003 f8ff 	bl	8004420 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8001222:	4803      	ldr	r0, [pc, #12]	; (8001230 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8001224:	f003 f8fc 	bl	8004420 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001228:	bf00      	nop
 800122a:	bd80      	pop	{r7, pc}
 800122c:	20000390 	.word	0x20000390
 8001230:	20000424 	.word	0x20000424

08001234 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001238:	4802      	ldr	r0, [pc, #8]	; (8001244 <TIM3_IRQHandler+0x10>)
 800123a:	f003 f8f1 	bl	8004420 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	200003dc 	.word	0x200003dc

08001248 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800124c:	4802      	ldr	r0, [pc, #8]	; (8001258 <DMA1_Stream7_IRQHandler+0x10>)
 800124e:	f001 f881 	bl	8002354 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	200005cc 	.word	0x200005cc

0800125c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001260:	4802      	ldr	r0, [pc, #8]	; (800126c <DMA2_Stream2_IRQHandler+0x10>)
 8001262:	f001 f877 	bl	8002354 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	2000056c 	.word	0x2000056c

08001270 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af00      	add	r7, sp, #0
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800127c:	2300      	movs	r3, #0
 800127e:	617b      	str	r3, [r7, #20]
 8001280:	e00a      	b.n	8001298 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001282:	f7ff fa73 	bl	800076c <__io_getchar>
 8001286:	4601      	mov	r1, r0
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	1c5a      	adds	r2, r3, #1
 800128c:	60ba      	str	r2, [r7, #8]
 800128e:	b2ca      	uxtb	r2, r1
 8001290:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	3301      	adds	r3, #1
 8001296:	617b      	str	r3, [r7, #20]
 8001298:	697a      	ldr	r2, [r7, #20]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	429a      	cmp	r2, r3
 800129e:	dbf0      	blt.n	8001282 <_read+0x12>
  }

  return len;
 80012a0:	687b      	ldr	r3, [r7, #4]
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3718      	adds	r7, #24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b086      	sub	sp, #24
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	60f8      	str	r0, [r7, #12]
 80012b2:	60b9      	str	r1, [r7, #8]
 80012b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012b6:	2300      	movs	r3, #0
 80012b8:	617b      	str	r3, [r7, #20]
 80012ba:	e009      	b.n	80012d0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	1c5a      	adds	r2, r3, #1
 80012c0:	60ba      	str	r2, [r7, #8]
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff fa3f 	bl	8000748 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	3301      	adds	r3, #1
 80012ce:	617b      	str	r3, [r7, #20]
 80012d0:	697a      	ldr	r2, [r7, #20]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	dbf1      	blt.n	80012bc <_write+0x12>
  }
  return len;
 80012d8:	687b      	ldr	r3, [r7, #4]
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3718      	adds	r7, #24
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <_close>:

int _close(int file)
{
 80012e2:	b480      	push	{r7}
 80012e4:	b083      	sub	sp, #12
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr

080012fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012fa:	b480      	push	{r7}
 80012fc:	b083      	sub	sp, #12
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
 8001302:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800130a:	605a      	str	r2, [r3, #4]
  return 0;
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr

0800131a <_isatty>:

int _isatty(int file)
{
 800131a:	b480      	push	{r7}
 800131c:	b083      	sub	sp, #12
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001322:	2301      	movs	r3, #1
}
 8001324:	4618      	mov	r0, r3
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001330:	b480      	push	{r7}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3714      	adds	r7, #20
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
	...

0800134c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b086      	sub	sp, #24
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001354:	4a14      	ldr	r2, [pc, #80]	; (80013a8 <_sbrk+0x5c>)
 8001356:	4b15      	ldr	r3, [pc, #84]	; (80013ac <_sbrk+0x60>)
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001360:	4b13      	ldr	r3, [pc, #76]	; (80013b0 <_sbrk+0x64>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d102      	bne.n	800136e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001368:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <_sbrk+0x64>)
 800136a:	4a12      	ldr	r2, [pc, #72]	; (80013b4 <_sbrk+0x68>)
 800136c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800136e:	4b10      	ldr	r3, [pc, #64]	; (80013b0 <_sbrk+0x64>)
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4413      	add	r3, r2
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	429a      	cmp	r2, r3
 800137a:	d207      	bcs.n	800138c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800137c:	f006 fc40 	bl	8007c00 <__errno>
 8001380:	4603      	mov	r3, r0
 8001382:	220c      	movs	r2, #12
 8001384:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001386:	f04f 33ff 	mov.w	r3, #4294967295
 800138a:	e009      	b.n	80013a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800138c:	4b08      	ldr	r3, [pc, #32]	; (80013b0 <_sbrk+0x64>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001392:	4b07      	ldr	r3, [pc, #28]	; (80013b0 <_sbrk+0x64>)
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4413      	add	r3, r2
 800139a:	4a05      	ldr	r2, [pc, #20]	; (80013b0 <_sbrk+0x64>)
 800139c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800139e:	68fb      	ldr	r3, [r7, #12]
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3718      	adds	r7, #24
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	20020000 	.word	0x20020000
 80013ac:	00000400 	.word	0x00000400
 80013b0:	200003d8 	.word	0x200003d8
 80013b4:	200044d0 	.word	0x200044d0

080013b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013bc:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <SystemInit+0x20>)
 80013be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013c2:	4a05      	ldr	r2, [pc, #20]	; (80013d8 <SystemInit+0x20>)
 80013c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013cc:	bf00      	nop
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	e000ed00 	.word	0xe000ed00

080013dc <MX_TIM3_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08a      	sub	sp, #40	; 0x28
 80013e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013e2:	f107 0318 	add.w	r3, r7, #24
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	605a      	str	r2, [r3, #4]
 80013ec:	609a      	str	r2, [r3, #8]
 80013ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013f0:	f107 0310 	add.w	r3, r7, #16
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80013fa:	463b      	mov	r3, r7
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001406:	4b36      	ldr	r3, [pc, #216]	; (80014e0 <MX_TIM3_Init+0x104>)
 8001408:	4a36      	ldr	r2, [pc, #216]	; (80014e4 <MX_TIM3_Init+0x108>)
 800140a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 800140c:	4b34      	ldr	r3, [pc, #208]	; (80014e0 <MX_TIM3_Init+0x104>)
 800140e:	2263      	movs	r2, #99	; 0x63
 8001410:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001412:	4b33      	ldr	r3, [pc, #204]	; (80014e0 <MX_TIM3_Init+0x104>)
 8001414:	2200      	movs	r2, #0
 8001416:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001418:	4b31      	ldr	r3, [pc, #196]	; (80014e0 <MX_TIM3_Init+0x104>)
 800141a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800141e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001420:	4b2f      	ldr	r3, [pc, #188]	; (80014e0 <MX_TIM3_Init+0x104>)
 8001422:	2200      	movs	r2, #0
 8001424:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001426:	4b2e      	ldr	r3, [pc, #184]	; (80014e0 <MX_TIM3_Init+0x104>)
 8001428:	2200      	movs	r2, #0
 800142a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800142c:	482c      	ldr	r0, [pc, #176]	; (80014e0 <MX_TIM3_Init+0x104>)
 800142e:	f002 fcc7 	bl	8003dc0 <HAL_TIM_Base_Init>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8001438:	f7ff fd36 	bl	8000ea8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800143c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001440:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001442:	f107 0318 	add.w	r3, r7, #24
 8001446:	4619      	mov	r1, r3
 8001448:	4825      	ldr	r0, [pc, #148]	; (80014e0 <MX_TIM3_Init+0x104>)
 800144a:	f003 fa4f 	bl	80048ec <HAL_TIM_ConfigClockSource>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001454:	f7ff fd28 	bl	8000ea8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001458:	4821      	ldr	r0, [pc, #132]	; (80014e0 <MX_TIM3_Init+0x104>)
 800145a:	f002 fe6d 	bl	8004138 <HAL_TIM_IC_Init>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001464:	f7ff fd20 	bl	8000ea8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001468:	2300      	movs	r3, #0
 800146a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800146c:	2300      	movs	r3, #0
 800146e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001470:	f107 0310 	add.w	r3, r7, #16
 8001474:	4619      	mov	r1, r3
 8001476:	481a      	ldr	r0, [pc, #104]	; (80014e0 <MX_TIM3_Init+0x104>)
 8001478:	f003 ff4c 	bl	8005314 <HAL_TIMEx_MasterConfigSynchronization>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8001482:	f7ff fd11 	bl	8000ea8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001486:	2300      	movs	r3, #0
 8001488:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800148a:	2301      	movs	r3, #1
 800148c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800148e:	2300      	movs	r3, #0
 8001490:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001492:	2300      	movs	r3, #0
 8001494:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001496:	463b      	mov	r3, r7
 8001498:	2200      	movs	r2, #0
 800149a:	4619      	mov	r1, r3
 800149c:	4810      	ldr	r0, [pc, #64]	; (80014e0 <MX_TIM3_Init+0x104>)
 800149e:	f003 f8c7 	bl	8004630 <HAL_TIM_IC_ConfigChannel>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 80014a8:	f7ff fcfe 	bl	8000ea8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80014ac:	463b      	mov	r3, r7
 80014ae:	2204      	movs	r2, #4
 80014b0:	4619      	mov	r1, r3
 80014b2:	480b      	ldr	r0, [pc, #44]	; (80014e0 <MX_TIM3_Init+0x104>)
 80014b4:	f003 f8bc 	bl	8004630 <HAL_TIM_IC_ConfigChannel>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 80014be:	f7ff fcf3 	bl	8000ea8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80014c2:	463b      	mov	r3, r7
 80014c4:	2208      	movs	r2, #8
 80014c6:	4619      	mov	r1, r3
 80014c8:	4805      	ldr	r0, [pc, #20]	; (80014e0 <MX_TIM3_Init+0x104>)
 80014ca:	f003 f8b1 	bl	8004630 <HAL_TIM_IC_ConfigChannel>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_TIM3_Init+0xfc>
  {
    Error_Handler();
 80014d4:	f7ff fce8 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80014d8:	bf00      	nop
 80014da:	3728      	adds	r7, #40	; 0x28
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	200003dc 	.word	0x200003dc
 80014e4:	40000400 	.word	0x40000400

080014e8 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b088      	sub	sp, #32
 80014ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80014ee:	1d3b      	adds	r3, r7, #4
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	605a      	str	r2, [r3, #4]
 80014f6:	609a      	str	r2, [r3, #8]
 80014f8:	60da      	str	r2, [r3, #12]
 80014fa:	611a      	str	r2, [r3, #16]
 80014fc:	615a      	str	r2, [r3, #20]
 80014fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001500:	4b1e      	ldr	r3, [pc, #120]	; (800157c <MX_TIM10_Init+0x94>)
 8001502:	4a1f      	ldr	r2, [pc, #124]	; (8001580 <MX_TIM10_Init+0x98>)
 8001504:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 10000-1;
 8001506:	4b1d      	ldr	r3, [pc, #116]	; (800157c <MX_TIM10_Init+0x94>)
 8001508:	f242 720f 	movw	r2, #9999	; 0x270f
 800150c:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800150e:	4b1b      	ldr	r3, [pc, #108]	; (800157c <MX_TIM10_Init+0x94>)
 8001510:	2200      	movs	r2, #0
 8001512:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000-1;
 8001514:	4b19      	ldr	r3, [pc, #100]	; (800157c <MX_TIM10_Init+0x94>)
 8001516:	f242 720f 	movw	r2, #9999	; 0x270f
 800151a:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800151c:	4b17      	ldr	r3, [pc, #92]	; (800157c <MX_TIM10_Init+0x94>)
 800151e:	2200      	movs	r2, #0
 8001520:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001522:	4b16      	ldr	r3, [pc, #88]	; (800157c <MX_TIM10_Init+0x94>)
 8001524:	2280      	movs	r2, #128	; 0x80
 8001526:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001528:	4814      	ldr	r0, [pc, #80]	; (800157c <MX_TIM10_Init+0x94>)
 800152a:	f002 fc49 	bl	8003dc0 <HAL_TIM_Base_Init>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_TIM10_Init+0x50>
  {
    Error_Handler();
 8001534:	f7ff fcb8 	bl	8000ea8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8001538:	4810      	ldr	r0, [pc, #64]	; (800157c <MX_TIM10_Init+0x94>)
 800153a:	f002 fcf3 	bl	8003f24 <HAL_TIM_PWM_Init>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_TIM10_Init+0x60>
  {
    Error_Handler();
 8001544:	f7ff fcb0 	bl	8000ea8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001548:	2360      	movs	r3, #96	; 0x60
 800154a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800154c:	2300      	movs	r3, #0
 800154e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001550:	2300      	movs	r3, #0
 8001552:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001554:	2300      	movs	r3, #0
 8001556:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001558:	1d3b      	adds	r3, r7, #4
 800155a:	2200      	movs	r2, #0
 800155c:	4619      	mov	r1, r3
 800155e:	4807      	ldr	r0, [pc, #28]	; (800157c <MX_TIM10_Init+0x94>)
 8001560:	f003 f902 	bl	8004768 <HAL_TIM_PWM_ConfigChannel>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_TIM10_Init+0x86>
  {
    Error_Handler();
 800156a:	f7ff fc9d 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 800156e:	4803      	ldr	r0, [pc, #12]	; (800157c <MX_TIM10_Init+0x94>)
 8001570:	f000 f8fa 	bl	8001768 <HAL_TIM_MspPostInit>

}
 8001574:	bf00      	nop
 8001576:	3720      	adds	r7, #32
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	20000424 	.word	0x20000424
 8001580:	40014400 	.word	0x40014400

08001584 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b088      	sub	sp, #32
 8001588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800158a:	1d3b      	adds	r3, r7, #4
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	60da      	str	r2, [r3, #12]
 8001596:	611a      	str	r2, [r3, #16]
 8001598:	615a      	str	r2, [r3, #20]
 800159a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800159c:	4b1e      	ldr	r3, [pc, #120]	; (8001618 <MX_TIM11_Init+0x94>)
 800159e:	4a1f      	ldr	r2, [pc, #124]	; (800161c <MX_TIM11_Init+0x98>)
 80015a0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 10000-1;
 80015a2:	4b1d      	ldr	r3, [pc, #116]	; (8001618 <MX_TIM11_Init+0x94>)
 80015a4:	f242 720f 	movw	r2, #9999	; 0x270f
 80015a8:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015aa:	4b1b      	ldr	r3, [pc, #108]	; (8001618 <MX_TIM11_Init+0x94>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 10000-1;
 80015b0:	4b19      	ldr	r3, [pc, #100]	; (8001618 <MX_TIM11_Init+0x94>)
 80015b2:	f242 720f 	movw	r2, #9999	; 0x270f
 80015b6:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015b8:	4b17      	ldr	r3, [pc, #92]	; (8001618 <MX_TIM11_Init+0x94>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015be:	4b16      	ldr	r3, [pc, #88]	; (8001618 <MX_TIM11_Init+0x94>)
 80015c0:	2280      	movs	r2, #128	; 0x80
 80015c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80015c4:	4814      	ldr	r0, [pc, #80]	; (8001618 <MX_TIM11_Init+0x94>)
 80015c6:	f002 fbfb 	bl	8003dc0 <HAL_TIM_Base_Init>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_TIM11_Init+0x50>
  {
    Error_Handler();
 80015d0:	f7ff fc6a 	bl	8000ea8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 80015d4:	4810      	ldr	r0, [pc, #64]	; (8001618 <MX_TIM11_Init+0x94>)
 80015d6:	f002 fca5 	bl	8003f24 <HAL_TIM_PWM_Init>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_TIM11_Init+0x60>
  {
    Error_Handler();
 80015e0:	f7ff fc62 	bl	8000ea8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015e4:	2360      	movs	r3, #96	; 0x60
 80015e6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015e8:	2300      	movs	r3, #0
 80015ea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015ec:	2300      	movs	r3, #0
 80015ee:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015f0:	2300      	movs	r3, #0
 80015f2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015f4:	1d3b      	adds	r3, r7, #4
 80015f6:	2200      	movs	r2, #0
 80015f8:	4619      	mov	r1, r3
 80015fa:	4807      	ldr	r0, [pc, #28]	; (8001618 <MX_TIM11_Init+0x94>)
 80015fc:	f003 f8b4 	bl	8004768 <HAL_TIM_PWM_ConfigChannel>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_TIM11_Init+0x86>
  {
    Error_Handler();
 8001606:	f7ff fc4f 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 800160a:	4803      	ldr	r0, [pc, #12]	; (8001618 <MX_TIM11_Init+0x94>)
 800160c:	f000 f8ac 	bl	8001768 <HAL_TIM_MspPostInit>

}
 8001610:	bf00      	nop
 8001612:	3720      	adds	r7, #32
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	2000046c 	.word	0x2000046c
 800161c:	40014800 	.word	0x40014800

08001620 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b08c      	sub	sp, #48	; 0x30
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001628:	f107 031c 	add.w	r3, r7, #28
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	605a      	str	r2, [r3, #4]
 8001632:	609a      	str	r2, [r3, #8]
 8001634:	60da      	str	r2, [r3, #12]
 8001636:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a44      	ldr	r2, [pc, #272]	; (8001750 <HAL_TIM_Base_MspInit+0x130>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d152      	bne.n	80016e8 <HAL_TIM_Base_MspInit+0xc8>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	61bb      	str	r3, [r7, #24]
 8001646:	4b43      	ldr	r3, [pc, #268]	; (8001754 <HAL_TIM_Base_MspInit+0x134>)
 8001648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164a:	4a42      	ldr	r2, [pc, #264]	; (8001754 <HAL_TIM_Base_MspInit+0x134>)
 800164c:	f043 0302 	orr.w	r3, r3, #2
 8001650:	6413      	str	r3, [r2, #64]	; 0x40
 8001652:	4b40      	ldr	r3, [pc, #256]	; (8001754 <HAL_TIM_Base_MspInit+0x134>)
 8001654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	61bb      	str	r3, [r7, #24]
 800165c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	617b      	str	r3, [r7, #20]
 8001662:	4b3c      	ldr	r3, [pc, #240]	; (8001754 <HAL_TIM_Base_MspInit+0x134>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	4a3b      	ldr	r2, [pc, #236]	; (8001754 <HAL_TIM_Base_MspInit+0x134>)
 8001668:	f043 0301 	orr.w	r3, r3, #1
 800166c:	6313      	str	r3, [r2, #48]	; 0x30
 800166e:	4b39      	ldr	r3, [pc, #228]	; (8001754 <HAL_TIM_Base_MspInit+0x134>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	617b      	str	r3, [r7, #20]
 8001678:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	613b      	str	r3, [r7, #16]
 800167e:	4b35      	ldr	r3, [pc, #212]	; (8001754 <HAL_TIM_Base_MspInit+0x134>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	4a34      	ldr	r2, [pc, #208]	; (8001754 <HAL_TIM_Base_MspInit+0x134>)
 8001684:	f043 0302 	orr.w	r3, r3, #2
 8001688:	6313      	str	r3, [r2, #48]	; 0x30
 800168a:	4b32      	ldr	r3, [pc, #200]	; (8001754 <HAL_TIM_Base_MspInit+0x134>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	613b      	str	r3, [r7, #16]
 8001694:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001696:	23c0      	movs	r3, #192	; 0xc0
 8001698:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169a:	2302      	movs	r3, #2
 800169c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169e:	2300      	movs	r3, #0
 80016a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a2:	2300      	movs	r3, #0
 80016a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80016a6:	2302      	movs	r3, #2
 80016a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016aa:	f107 031c 	add.w	r3, r7, #28
 80016ae:	4619      	mov	r1, r3
 80016b0:	4829      	ldr	r0, [pc, #164]	; (8001758 <HAL_TIM_Base_MspInit+0x138>)
 80016b2:	f001 f8b9 	bl	8002828 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016b6:	2301      	movs	r3, #1
 80016b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ba:	2302      	movs	r3, #2
 80016bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016be:	2300      	movs	r3, #0
 80016c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c2:	2300      	movs	r3, #0
 80016c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80016c6:	2302      	movs	r3, #2
 80016c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ca:	f107 031c 	add.w	r3, r7, #28
 80016ce:	4619      	mov	r1, r3
 80016d0:	4822      	ldr	r0, [pc, #136]	; (800175c <HAL_TIM_Base_MspInit+0x13c>)
 80016d2:	f001 f8a9 	bl	8002828 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80016d6:	2200      	movs	r2, #0
 80016d8:	2105      	movs	r1, #5
 80016da:	201d      	movs	r0, #29
 80016dc:	f000 fd0a 	bl	80020f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80016e0:	201d      	movs	r0, #29
 80016e2:	f000 fd23 	bl	800212c <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 80016e6:	e02e      	b.n	8001746 <HAL_TIM_Base_MspInit+0x126>
  else if(tim_baseHandle->Instance==TIM10)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a1c      	ldr	r2, [pc, #112]	; (8001760 <HAL_TIM_Base_MspInit+0x140>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d116      	bne.n	8001720 <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	60fb      	str	r3, [r7, #12]
 80016f6:	4b17      	ldr	r3, [pc, #92]	; (8001754 <HAL_TIM_Base_MspInit+0x134>)
 80016f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fa:	4a16      	ldr	r2, [pc, #88]	; (8001754 <HAL_TIM_Base_MspInit+0x134>)
 80016fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001700:	6453      	str	r3, [r2, #68]	; 0x44
 8001702:	4b14      	ldr	r3, [pc, #80]	; (8001754 <HAL_TIM_Base_MspInit+0x134>)
 8001704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 15, 0);
 800170e:	2200      	movs	r2, #0
 8001710:	210f      	movs	r1, #15
 8001712:	2019      	movs	r0, #25
 8001714:	f000 fcee 	bl	80020f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001718:	2019      	movs	r0, #25
 800171a:	f000 fd07 	bl	800212c <HAL_NVIC_EnableIRQ>
}
 800171e:	e012      	b.n	8001746 <HAL_TIM_Base_MspInit+0x126>
  else if(tim_baseHandle->Instance==TIM11)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a0f      	ldr	r2, [pc, #60]	; (8001764 <HAL_TIM_Base_MspInit+0x144>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d10d      	bne.n	8001746 <HAL_TIM_Base_MspInit+0x126>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	60bb      	str	r3, [r7, #8]
 800172e:	4b09      	ldr	r3, [pc, #36]	; (8001754 <HAL_TIM_Base_MspInit+0x134>)
 8001730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001732:	4a08      	ldr	r2, [pc, #32]	; (8001754 <HAL_TIM_Base_MspInit+0x134>)
 8001734:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001738:	6453      	str	r3, [r2, #68]	; 0x44
 800173a:	4b06      	ldr	r3, [pc, #24]	; (8001754 <HAL_TIM_Base_MspInit+0x134>)
 800173c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001742:	60bb      	str	r3, [r7, #8]
 8001744:	68bb      	ldr	r3, [r7, #8]
}
 8001746:	bf00      	nop
 8001748:	3730      	adds	r7, #48	; 0x30
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40000400 	.word	0x40000400
 8001754:	40023800 	.word	0x40023800
 8001758:	40020000 	.word	0x40020000
 800175c:	40020400 	.word	0x40020400
 8001760:	40014400 	.word	0x40014400
 8001764:	40014800 	.word	0x40014800

08001768 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b08a      	sub	sp, #40	; 0x28
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001770:	f107 0314 	add.w	r3, r7, #20
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	605a      	str	r2, [r3, #4]
 800177a:	609a      	str	r2, [r3, #8]
 800177c:	60da      	str	r2, [r3, #12]
 800177e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM10)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a25      	ldr	r2, [pc, #148]	; (800181c <HAL_TIM_MspPostInit+0xb4>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d11f      	bne.n	80017ca <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM10_MspPostInit 0 */

  /* USER CODE END TIM10_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	613b      	str	r3, [r7, #16]
 800178e:	4b24      	ldr	r3, [pc, #144]	; (8001820 <HAL_TIM_MspPostInit+0xb8>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	4a23      	ldr	r2, [pc, #140]	; (8001820 <HAL_TIM_MspPostInit+0xb8>)
 8001794:	f043 0302 	orr.w	r3, r3, #2
 8001798:	6313      	str	r3, [r2, #48]	; 0x30
 800179a:	4b21      	ldr	r3, [pc, #132]	; (8001820 <HAL_TIM_MspPostInit+0xb8>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	f003 0302 	and.w	r3, r3, #2
 80017a2:	613b      	str	r3, [r7, #16]
 80017a4:	693b      	ldr	r3, [r7, #16]
    /**TIM10 GPIO Configuration
    PB8     ------> TIM10_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80017a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ac:	2302      	movs	r3, #2
 80017ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b0:	2300      	movs	r3, #0
 80017b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b4:	2300      	movs	r3, #0
 80017b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80017b8:	2303      	movs	r3, #3
 80017ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017bc:	f107 0314 	add.w	r3, r7, #20
 80017c0:	4619      	mov	r1, r3
 80017c2:	4818      	ldr	r0, [pc, #96]	; (8001824 <HAL_TIM_MspPostInit+0xbc>)
 80017c4:	f001 f830 	bl	8002828 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 80017c8:	e023      	b.n	8001812 <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM11)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a16      	ldr	r2, [pc, #88]	; (8001828 <HAL_TIM_MspPostInit+0xc0>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d11e      	bne.n	8001812 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d4:	2300      	movs	r3, #0
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	4b11      	ldr	r3, [pc, #68]	; (8001820 <HAL_TIM_MspPostInit+0xb8>)
 80017da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017dc:	4a10      	ldr	r2, [pc, #64]	; (8001820 <HAL_TIM_MspPostInit+0xb8>)
 80017de:	f043 0302 	orr.w	r3, r3, #2
 80017e2:	6313      	str	r3, [r2, #48]	; 0x30
 80017e4:	4b0e      	ldr	r3, [pc, #56]	; (8001820 <HAL_TIM_MspPostInit+0xb8>)
 80017e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e8:	f003 0302 	and.w	r3, r3, #2
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f6:	2302      	movs	r3, #2
 80017f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fa:	2300      	movs	r3, #0
 80017fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fe:	2300      	movs	r3, #0
 8001800:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8001802:	2303      	movs	r3, #3
 8001804:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001806:	f107 0314 	add.w	r3, r7, #20
 800180a:	4619      	mov	r1, r3
 800180c:	4805      	ldr	r0, [pc, #20]	; (8001824 <HAL_TIM_MspPostInit+0xbc>)
 800180e:	f001 f80b 	bl	8002828 <HAL_GPIO_Init>
}
 8001812:	bf00      	nop
 8001814:	3728      	adds	r7, #40	; 0x28
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	40014400 	.word	0x40014400
 8001820:	40023800 	.word	0x40023800
 8001824:	40020400 	.word	0x40020400
 8001828:	40014800 	.word	0x40014800

0800182c <HCSR04_Read>:




void HCSR04_Read(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
	if(ult_stg = 1)
 8001830:	4b24      	ldr	r3, [pc, #144]	; (80018c4 <HCSR04_Read+0x98>)
 8001832:	2201      	movs	r2, #1
 8001834:	701a      	strb	r2, [r3, #0]
	{
		HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, 1);
 8001836:	2201      	movs	r2, #1
 8001838:	2104      	movs	r1, #4
 800183a:	4823      	ldr	r0, [pc, #140]	; (80018c8 <HCSR04_Read+0x9c>)
 800183c:	f001 f990 	bl	8002b60 <HAL_GPIO_WritePin>
		delay_us(10);
 8001840:	200a      	movs	r0, #10
 8001842:	f7fe ff31 	bl	80006a8 <delay_us>
		HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, 0);
 8001846:	2200      	movs	r2, #0
 8001848:	2104      	movs	r1, #4
 800184a:	481f      	ldr	r0, [pc, #124]	; (80018c8 <HCSR04_Read+0x9c>)
 800184c:	f001 f988 	bl	8002b60 <HAL_GPIO_WritePin>
		__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC1); // Set Timer Enable
 8001850:	4b1e      	ldr	r3, [pc, #120]	; (80018cc <HCSR04_Read+0xa0>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	68da      	ldr	r2, [r3, #12]
 8001856:	4b1d      	ldr	r3, [pc, #116]	; (80018cc <HCSR04_Read+0xa0>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f042 0202 	orr.w	r2, r2, #2
 800185e:	60da      	str	r2, [r3, #12]
	}
	if(ult_stg = 2)
 8001860:	4b18      	ldr	r3, [pc, #96]	; (80018c4 <HCSR04_Read+0x98>)
 8001862:	2202      	movs	r2, #2
 8001864:	701a      	strb	r2, [r3, #0]
	{
		HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, 1);
 8001866:	2201      	movs	r2, #1
 8001868:	2104      	movs	r1, #4
 800186a:	4817      	ldr	r0, [pc, #92]	; (80018c8 <HCSR04_Read+0x9c>)
 800186c:	f001 f978 	bl	8002b60 <HAL_GPIO_WritePin>
		delay_us(10);
 8001870:	200a      	movs	r0, #10
 8001872:	f7fe ff19 	bl	80006a8 <delay_us>
		HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, 0);
 8001876:	2200      	movs	r2, #0
 8001878:	2104      	movs	r1, #4
 800187a:	4813      	ldr	r0, [pc, #76]	; (80018c8 <HCSR04_Read+0x9c>)
 800187c:	f001 f970 	bl	8002b60 <HAL_GPIO_WritePin>
		__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC2); // Set Timer Enable
 8001880:	4b12      	ldr	r3, [pc, #72]	; (80018cc <HCSR04_Read+0xa0>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	68da      	ldr	r2, [r3, #12]
 8001886:	4b11      	ldr	r3, [pc, #68]	; (80018cc <HCSR04_Read+0xa0>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f042 0204 	orr.w	r2, r2, #4
 800188e:	60da      	str	r2, [r3, #12]
	}
	if(ult_stg = 3)
 8001890:	4b0c      	ldr	r3, [pc, #48]	; (80018c4 <HCSR04_Read+0x98>)
 8001892:	2203      	movs	r2, #3
 8001894:	701a      	strb	r2, [r3, #0]
	{
		HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, 1);
 8001896:	2201      	movs	r2, #1
 8001898:	2104      	movs	r1, #4
 800189a:	480b      	ldr	r0, [pc, #44]	; (80018c8 <HCSR04_Read+0x9c>)
 800189c:	f001 f960 	bl	8002b60 <HAL_GPIO_WritePin>
		delay_us(10);
 80018a0:	200a      	movs	r0, #10
 80018a2:	f7fe ff01 	bl	80006a8 <delay_us>
		HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, 0);
 80018a6:	2200      	movs	r2, #0
 80018a8:	2104      	movs	r1, #4
 80018aa:	4807      	ldr	r0, [pc, #28]	; (80018c8 <HCSR04_Read+0x9c>)
 80018ac:	f001 f958 	bl	8002b60 <HAL_GPIO_WritePin>
		__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC3); // Set Timer Enable
 80018b0:	4b06      	ldr	r3, [pc, #24]	; (80018cc <HCSR04_Read+0xa0>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	68da      	ldr	r2, [r3, #12]
 80018b6:	4b05      	ldr	r3, [pc, #20]	; (80018cc <HCSR04_Read+0xa0>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f042 0208 	orr.w	r2, r2, #8
 80018be:	60da      	str	r2, [r3, #12]
	}
}
 80018c0:	bf00      	nop
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	200004e2 	.word	0x200004e2
 80018c8:	40020400 	.word	0x40020400
 80018cc:	200003dc 	.word	0x200003dc

080018d0 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) // 만약 ?��?��?��?�� ?��?�� 채널?���??????????,(?��리�? 1�?????????? 채널?�� ?��기로 ?��?��)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	7f1b      	ldrb	r3, [r3, #28]
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d16c      	bne.n	80019ba <HAL_TIM_IC_CaptureCallback+0xea>
	{
		if(captureFlag_L == 0) // �?????????? 번째 캡쳐�?????????? ?���?????????? ?��?��?���??????????,(Falling Edge�?????????? 발생?���?????????? ?��?��?���??????????,)
 80018e0:	4b8d      	ldr	r3, [pc, #564]	; (8001b18 <HAL_TIM_IC_CaptureCallback+0x248>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d11a      	bne.n	800191e <HAL_TIM_IC_CaptureCallback+0x4e>
		{
			INC_Value_L1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // �?????????? 번째 Value�?????????? ?��?��?��.
 80018e8:	2100      	movs	r1, #0
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f003 f8c6 	bl	8004a7c <HAL_TIM_ReadCapturedValue>
 80018f0:	4603      	mov	r3, r0
 80018f2:	4a8a      	ldr	r2, [pc, #552]	; (8001b1c <HAL_TIM_IC_CaptureCallback+0x24c>)
 80018f4:	6013      	str	r3, [r2, #0]
			captureFlag_L = 1; // �?????????? 번째 캡쳐 ?���??????????
 80018f6:	4b88      	ldr	r3, [pc, #544]	; (8001b18 <HAL_TIM_IC_CaptureCallback+0x248>)
 80018f8:	2201      	movs	r2, #1
 80018fa:	701a      	strb	r2, [r3, #0]

			// Polarity �??????????�??????????(Rising -> Falling)
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING); // Echo Falling?�� 캡쳐?��?�� ?���??????????�??????????
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	6a1a      	ldr	r2, [r3, #32]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f022 020a 	bic.w	r2, r2, #10
 800190a:	621a      	str	r2, [r3, #32]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	6a1a      	ldr	r2, [r3, #32]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f042 0202 	orr.w	r2, r2, #2
 800191a:	621a      	str	r2, [r3, #32]
 800191c:	e04d      	b.n	80019ba <HAL_TIM_IC_CaptureCallback+0xea>
		}
		else if(captureFlag_L == 1) // 만약 �?????????? 번�?? 캡쳐�?????????? ?���?????????? ?��료됐?���??????????,
 800191e:	4b7e      	ldr	r3, [pc, #504]	; (8001b18 <HAL_TIM_IC_CaptureCallback+0x248>)
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d149      	bne.n	80019ba <HAL_TIM_IC_CaptureCallback+0xea>
		{
			INC_Value_L2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001926:	2100      	movs	r1, #0
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f003 f8a7 	bl	8004a7c <HAL_TIM_ReadCapturedValue>
 800192e:	4603      	mov	r3, r0
 8001930:	4a7b      	ldr	r2, [pc, #492]	; (8001b20 <HAL_TIM_IC_CaptureCallback+0x250>)
 8001932:	6013      	str	r3, [r2, #0]
//			__HAL_TIM_SET_COUNTER(&htim3, 0); // reset Counter

			if(INC_Value_L2 > INC_Value_L1)
 8001934:	4b7a      	ldr	r3, [pc, #488]	; (8001b20 <HAL_TIM_IC_CaptureCallback+0x250>)
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	4b78      	ldr	r3, [pc, #480]	; (8001b1c <HAL_TIM_IC_CaptureCallback+0x24c>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	429a      	cmp	r2, r3
 800193e:	d907      	bls.n	8001950 <HAL_TIM_IC_CaptureCallback+0x80>
			{
				echoTime_L = INC_Value_L2 - INC_Value_L1;
 8001940:	4b77      	ldr	r3, [pc, #476]	; (8001b20 <HAL_TIM_IC_CaptureCallback+0x250>)
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	4b75      	ldr	r3, [pc, #468]	; (8001b1c <HAL_TIM_IC_CaptureCallback+0x24c>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	4a76      	ldr	r2, [pc, #472]	; (8001b24 <HAL_TIM_IC_CaptureCallback+0x254>)
 800194c:	6013      	str	r3, [r2, #0]
 800194e:	e00f      	b.n	8001970 <HAL_TIM_IC_CaptureCallback+0xa0>
			}
			else if(INC_Value_L1 > INC_Value_L2) // 거리�?????????? ?���?????????? 길면, INC_Value2 �?????????? Overflow?��?�� count�?????????? 0?���?????????? ?�� ?��?��?��?�� INC_Value1보다 ?��?���?????????? ?�� ?��?��.
 8001950:	4b72      	ldr	r3, [pc, #456]	; (8001b1c <HAL_TIM_IC_CaptureCallback+0x24c>)
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	4b72      	ldr	r3, [pc, #456]	; (8001b20 <HAL_TIM_IC_CaptureCallback+0x250>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	429a      	cmp	r2, r3
 800195a:	d909      	bls.n	8001970 <HAL_TIM_IC_CaptureCallback+0xa0>
			{
				echoTime_L = (0xffff - INC_Value_L1) + INC_Value_L2;
 800195c:	4b70      	ldr	r3, [pc, #448]	; (8001b20 <HAL_TIM_IC_CaptureCallback+0x250>)
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	4b6e      	ldr	r3, [pc, #440]	; (8001b1c <HAL_TIM_IC_CaptureCallback+0x24c>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800196a:	33ff      	adds	r3, #255	; 0xff
 800196c:	4a6d      	ldr	r2, [pc, #436]	; (8001b24 <HAL_TIM_IC_CaptureCallback+0x254>)
 800196e:	6013      	str	r3, [r2, #0]
			}
			distance_L = echoTime_L / 58;
 8001970:	4b6c      	ldr	r3, [pc, #432]	; (8001b24 <HAL_TIM_IC_CaptureCallback+0x254>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a6c      	ldr	r2, [pc, #432]	; (8001b28 <HAL_TIM_IC_CaptureCallback+0x258>)
 8001976:	fba2 2303 	umull	r2, r3, r2, r3
 800197a:	095b      	lsrs	r3, r3, #5
 800197c:	b2da      	uxtb	r2, r3
 800197e:	4b6b      	ldr	r3, [pc, #428]	; (8001b2c <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001980:	701a      	strb	r2, [r3, #0]
			captureFlag_L = 0;
 8001982:	4b65      	ldr	r3, [pc, #404]	; (8001b18 <HAL_TIM_IC_CaptureCallback+0x248>)
 8001984:	2200      	movs	r2, #0
 8001986:	701a      	strb	r2, [r3, #0]

			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING); // ?��?�� Echo High�?????????? 캡쳐?��?���?????????? ?��?��
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	6a1a      	ldr	r2, [r3, #32]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f022 020a 	bic.w	r2, r2, #10
 8001996:	621a      	str	r2, [r3, #32]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	6a12      	ldr	r2, [r2, #32]
 80019a2:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC1);
 80019a4:	4b62      	ldr	r3, [pc, #392]	; (8001b30 <HAL_TIM_IC_CaptureCallback+0x260>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	68da      	ldr	r2, [r3, #12]
 80019aa:	4b61      	ldr	r3, [pc, #388]	; (8001b30 <HAL_TIM_IC_CaptureCallback+0x260>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f022 0202 	bic.w	r2, r2, #2
 80019b2:	60da      	str	r2, [r3, #12]
			ult_stg = 2;
 80019b4:	4b5f      	ldr	r3, [pc, #380]	; (8001b34 <HAL_TIM_IC_CaptureCallback+0x264>)
 80019b6:	2202      	movs	r2, #2
 80019b8:	701a      	strb	r2, [r3, #0]
		}
	}
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) // 만약 ?��?��?��?�� ?��?�� 채널?���??????????,(?��리�? 1�?????????? 채널?�� ?��기로 ?��?��)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	7f1b      	ldrb	r3, [r3, #28]
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d16c      	bne.n	8001a9c <HAL_TIM_IC_CaptureCallback+0x1cc>
	{
		if(captureFlag_M == 0) // �?????????? 번째 캡쳐�?????????? ?���?????????? ?��?��?���??????????,(Falling Edge�?????????? 발생?���?????????? ?��?��?���??????????,)
 80019c2:	4b5d      	ldr	r3, [pc, #372]	; (8001b38 <HAL_TIM_IC_CaptureCallback+0x268>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d11a      	bne.n	8001a00 <HAL_TIM_IC_CaptureCallback+0x130>
		{
			INC_Value_M1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2); // �?????????? 번째 Value�?????????? ?��?��?��.
 80019ca:	2104      	movs	r1, #4
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f003 f855 	bl	8004a7c <HAL_TIM_ReadCapturedValue>
 80019d2:	4603      	mov	r3, r0
 80019d4:	4a59      	ldr	r2, [pc, #356]	; (8001b3c <HAL_TIM_IC_CaptureCallback+0x26c>)
 80019d6:	6013      	str	r3, [r2, #0]
			captureFlag_M = 1; // �?????????? 번째 캡쳐 ?���??????????
 80019d8:	4b57      	ldr	r3, [pc, #348]	; (8001b38 <HAL_TIM_IC_CaptureCallback+0x268>)
 80019da:	2201      	movs	r2, #1
 80019dc:	701a      	strb	r2, [r3, #0]

			// Polarity �??????????�??????????(Rising -> Falling)
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING); // Echo Falling?�� 캡쳐?��?�� ?���??????????�??????????
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	6a1a      	ldr	r2, [r3, #32]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80019ec:	621a      	str	r2, [r3, #32]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	6a1a      	ldr	r2, [r3, #32]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f042 0220 	orr.w	r2, r2, #32
 80019fc:	621a      	str	r2, [r3, #32]
 80019fe:	e04d      	b.n	8001a9c <HAL_TIM_IC_CaptureCallback+0x1cc>
		}
		else if(captureFlag_M == 1) // 만약 �?????????? 번�?? 캡쳐�?????????? ?���?????????? ?��료됐?���??????????,
 8001a00:	4b4d      	ldr	r3, [pc, #308]	; (8001b38 <HAL_TIM_IC_CaptureCallback+0x268>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d149      	bne.n	8001a9c <HAL_TIM_IC_CaptureCallback+0x1cc>
		{
			INC_Value_M2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8001a08:	2104      	movs	r1, #4
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f003 f836 	bl	8004a7c <HAL_TIM_ReadCapturedValue>
 8001a10:	4603      	mov	r3, r0
 8001a12:	4a4b      	ldr	r2, [pc, #300]	; (8001b40 <HAL_TIM_IC_CaptureCallback+0x270>)
 8001a14:	6013      	str	r3, [r2, #0]
//			__HAL_TIM_SET_COUNTER(&htim3, 0); // reset Counter

			if(INC_Value_M2 > INC_Value_M1)
 8001a16:	4b4a      	ldr	r3, [pc, #296]	; (8001b40 <HAL_TIM_IC_CaptureCallback+0x270>)
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	4b48      	ldr	r3, [pc, #288]	; (8001b3c <HAL_TIM_IC_CaptureCallback+0x26c>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d907      	bls.n	8001a32 <HAL_TIM_IC_CaptureCallback+0x162>
			{
				echoTime_M = INC_Value_M2 - INC_Value_M1;
 8001a22:	4b47      	ldr	r3, [pc, #284]	; (8001b40 <HAL_TIM_IC_CaptureCallback+0x270>)
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	4b45      	ldr	r3, [pc, #276]	; (8001b3c <HAL_TIM_IC_CaptureCallback+0x26c>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	4a45      	ldr	r2, [pc, #276]	; (8001b44 <HAL_TIM_IC_CaptureCallback+0x274>)
 8001a2e:	6013      	str	r3, [r2, #0]
 8001a30:	e00f      	b.n	8001a52 <HAL_TIM_IC_CaptureCallback+0x182>
			}
			else if(INC_Value_M1 > INC_Value_M2) // 거리�?????????? ?���?????????? 길면, INC_Value2 �?????????? Overflow?��?�� count�?????????? 0?���?????????? ?�� ?��?��?��?�� INC_Value1보다 ?��?���?????????? ?�� ?��?��.
 8001a32:	4b42      	ldr	r3, [pc, #264]	; (8001b3c <HAL_TIM_IC_CaptureCallback+0x26c>)
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	4b42      	ldr	r3, [pc, #264]	; (8001b40 <HAL_TIM_IC_CaptureCallback+0x270>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d909      	bls.n	8001a52 <HAL_TIM_IC_CaptureCallback+0x182>
			{
				echoTime_M = (0xffff - INC_Value_M1) + INC_Value_M2;
 8001a3e:	4b40      	ldr	r3, [pc, #256]	; (8001b40 <HAL_TIM_IC_CaptureCallback+0x270>)
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	4b3e      	ldr	r3, [pc, #248]	; (8001b3c <HAL_TIM_IC_CaptureCallback+0x26c>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001a4c:	33ff      	adds	r3, #255	; 0xff
 8001a4e:	4a3d      	ldr	r2, [pc, #244]	; (8001b44 <HAL_TIM_IC_CaptureCallback+0x274>)
 8001a50:	6013      	str	r3, [r2, #0]
			}
			distance_M = echoTime_M / 58;
 8001a52:	4b3c      	ldr	r3, [pc, #240]	; (8001b44 <HAL_TIM_IC_CaptureCallback+0x274>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a34      	ldr	r2, [pc, #208]	; (8001b28 <HAL_TIM_IC_CaptureCallback+0x258>)
 8001a58:	fba2 2303 	umull	r2, r3, r2, r3
 8001a5c:	095b      	lsrs	r3, r3, #5
 8001a5e:	b2da      	uxtb	r2, r3
 8001a60:	4b39      	ldr	r3, [pc, #228]	; (8001b48 <HAL_TIM_IC_CaptureCallback+0x278>)
 8001a62:	701a      	strb	r2, [r3, #0]
			captureFlag_M = 0;
 8001a64:	4b34      	ldr	r3, [pc, #208]	; (8001b38 <HAL_TIM_IC_CaptureCallback+0x268>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	701a      	strb	r2, [r3, #0]

			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING); // ?��?�� Echo High�?????????? 캡쳐?��?���?????????? ?��?��
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	6a1a      	ldr	r2, [r3, #32]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001a78:	621a      	str	r2, [r3, #32]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	6a12      	ldr	r2, [r2, #32]
 8001a84:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC2);
 8001a86:	4b2a      	ldr	r3, [pc, #168]	; (8001b30 <HAL_TIM_IC_CaptureCallback+0x260>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	68da      	ldr	r2, [r3, #12]
 8001a8c:	4b28      	ldr	r3, [pc, #160]	; (8001b30 <HAL_TIM_IC_CaptureCallback+0x260>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f022 0204 	bic.w	r2, r2, #4
 8001a94:	60da      	str	r2, [r3, #12]
			ult_stg = 3;
 8001a96:	4b27      	ldr	r3, [pc, #156]	; (8001b34 <HAL_TIM_IC_CaptureCallback+0x264>)
 8001a98:	2203      	movs	r2, #3
 8001a9a:	701a      	strb	r2, [r3, #0]
		}
	}
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) // 만약 ?��?��?��?�� ?��?�� 채널?���??????????,(?��리�? 1�?????????? 채널?�� ?��기로 ?��?��)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	7f1b      	ldrb	r3, [r3, #28]
 8001aa0:	2b04      	cmp	r3, #4
 8001aa2:	f040 8090 	bne.w	8001bc6 <HAL_TIM_IC_CaptureCallback+0x2f6>
	{
		if(captureFlag_R == 0) // �?????????? 번째 캡쳐�?????????? ?���?????????? ?��?��?���??????????,(Falling Edge�?????????? 발생?���?????????? ?��?��?���??????????,)
 8001aa6:	4b29      	ldr	r3, [pc, #164]	; (8001b4c <HAL_TIM_IC_CaptureCallback+0x27c>)
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d11a      	bne.n	8001ae4 <HAL_TIM_IC_CaptureCallback+0x214>
		{
			INC_Value_R1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3); // �?????????? 번째 Value�?????????? ?��?��?��.
 8001aae:	2108      	movs	r1, #8
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f002 ffe3 	bl	8004a7c <HAL_TIM_ReadCapturedValue>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	4a25      	ldr	r2, [pc, #148]	; (8001b50 <HAL_TIM_IC_CaptureCallback+0x280>)
 8001aba:	6013      	str	r3, [r2, #0]
			captureFlag_R = 1; // �?????????? 번째 캡쳐 ?���??????????
 8001abc:	4b23      	ldr	r3, [pc, #140]	; (8001b4c <HAL_TIM_IC_CaptureCallback+0x27c>)
 8001abe:	2201      	movs	r2, #1
 8001ac0:	701a      	strb	r2, [r3, #0]

			// Polarity �??????????�??????????(Rising -> Falling)
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_FALLING); // Echo Falling?�� 캡쳐?��?�� ?���??????????�??????????
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	6a1a      	ldr	r2, [r3, #32]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 8001ad0:	621a      	str	r2, [r3, #32]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	6a1a      	ldr	r2, [r3, #32]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ae0:	621a      	str	r2, [r3, #32]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING); // ?��?�� Echo High�?????????? 캡쳐?��?���?????????? ?��?��
			__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC3);
			ult_stg = 1;
		}
	}
}
 8001ae2:	e070      	b.n	8001bc6 <HAL_TIM_IC_CaptureCallback+0x2f6>
		else if(captureFlag_R == 1) // 만약 �?????????? 번�?? 캡쳐�?????????? ?���?????????? ?��료됐?���??????????,
 8001ae4:	4b19      	ldr	r3, [pc, #100]	; (8001b4c <HAL_TIM_IC_CaptureCallback+0x27c>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d16c      	bne.n	8001bc6 <HAL_TIM_IC_CaptureCallback+0x2f6>
			INC_Value_R2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 8001aec:	2108      	movs	r1, #8
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f002 ffc4 	bl	8004a7c <HAL_TIM_ReadCapturedValue>
 8001af4:	4603      	mov	r3, r0
 8001af6:	4a17      	ldr	r2, [pc, #92]	; (8001b54 <HAL_TIM_IC_CaptureCallback+0x284>)
 8001af8:	6013      	str	r3, [r2, #0]
			if(INC_Value_R2 > INC_Value_R1)
 8001afa:	4b16      	ldr	r3, [pc, #88]	; (8001b54 <HAL_TIM_IC_CaptureCallback+0x284>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	4b14      	ldr	r3, [pc, #80]	; (8001b50 <HAL_TIM_IC_CaptureCallback+0x280>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d92a      	bls.n	8001b5c <HAL_TIM_IC_CaptureCallback+0x28c>
				echoTime_R = INC_Value_R2 - INC_Value_R1;
 8001b06:	4b13      	ldr	r3, [pc, #76]	; (8001b54 <HAL_TIM_IC_CaptureCallback+0x284>)
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	4b11      	ldr	r3, [pc, #68]	; (8001b50 <HAL_TIM_IC_CaptureCallback+0x280>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	4a11      	ldr	r2, [pc, #68]	; (8001b58 <HAL_TIM_IC_CaptureCallback+0x288>)
 8001b12:	6013      	str	r3, [r2, #0]
 8001b14:	e032      	b.n	8001b7c <HAL_TIM_IC_CaptureCallback+0x2ac>
 8001b16:	bf00      	nop
 8001b18:	200004c0 	.word	0x200004c0
 8001b1c:	200004b4 	.word	0x200004b4
 8001b20:	200004b8 	.word	0x200004b8
 8001b24:	200004bc 	.word	0x200004bc
 8001b28:	8d3dcb09 	.word	0x8d3dcb09
 8001b2c:	200004c1 	.word	0x200004c1
 8001b30:	200003dc 	.word	0x200003dc
 8001b34:	200004e2 	.word	0x200004e2
 8001b38:	200004d0 	.word	0x200004d0
 8001b3c:	200004c4 	.word	0x200004c4
 8001b40:	200004c8 	.word	0x200004c8
 8001b44:	200004cc 	.word	0x200004cc
 8001b48:	200004d1 	.word	0x200004d1
 8001b4c:	200004e0 	.word	0x200004e0
 8001b50:	200004d4 	.word	0x200004d4
 8001b54:	200004d8 	.word	0x200004d8
 8001b58:	200004dc 	.word	0x200004dc
			else if(INC_Value_R1 > INC_Value_R2) // 거리�?????????? ?���?????????? 길면, INC_Value2 �?????????? Overflow?��?�� count�?????????? 0?���?????????? ?�� ?��?��?��?�� INC_Value1보다 ?��?���?????????? ?�� ?��?��.
 8001b5c:	4b1c      	ldr	r3, [pc, #112]	; (8001bd0 <HAL_TIM_IC_CaptureCallback+0x300>)
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	4b1c      	ldr	r3, [pc, #112]	; (8001bd4 <HAL_TIM_IC_CaptureCallback+0x304>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d909      	bls.n	8001b7c <HAL_TIM_IC_CaptureCallback+0x2ac>
				echoTime_R = (0xffff - INC_Value_R1) + INC_Value_R2;
 8001b68:	4b1a      	ldr	r3, [pc, #104]	; (8001bd4 <HAL_TIM_IC_CaptureCallback+0x304>)
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	4b18      	ldr	r3, [pc, #96]	; (8001bd0 <HAL_TIM_IC_CaptureCallback+0x300>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001b76:	33ff      	adds	r3, #255	; 0xff
 8001b78:	4a17      	ldr	r2, [pc, #92]	; (8001bd8 <HAL_TIM_IC_CaptureCallback+0x308>)
 8001b7a:	6013      	str	r3, [r2, #0]
			distance_R = echoTime_R / 58;
 8001b7c:	4b16      	ldr	r3, [pc, #88]	; (8001bd8 <HAL_TIM_IC_CaptureCallback+0x308>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a16      	ldr	r2, [pc, #88]	; (8001bdc <HAL_TIM_IC_CaptureCallback+0x30c>)
 8001b82:	fba2 2303 	umull	r2, r3, r2, r3
 8001b86:	095b      	lsrs	r3, r3, #5
 8001b88:	b2da      	uxtb	r2, r3
 8001b8a:	4b15      	ldr	r3, [pc, #84]	; (8001be0 <HAL_TIM_IC_CaptureCallback+0x310>)
 8001b8c:	701a      	strb	r2, [r3, #0]
			captureFlag_R = 0;
 8001b8e:	4b15      	ldr	r3, [pc, #84]	; (8001be4 <HAL_TIM_IC_CaptureCallback+0x314>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING); // ?��?�� Echo High�?????????? 캡쳐?��?���?????????? ?��?��
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	6a1a      	ldr	r2, [r3, #32]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 8001ba2:	621a      	str	r2, [r3, #32]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	6a12      	ldr	r2, [r2, #32]
 8001bae:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC3);
 8001bb0:	4b0d      	ldr	r3, [pc, #52]	; (8001be8 <HAL_TIM_IC_CaptureCallback+0x318>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	68da      	ldr	r2, [r3, #12]
 8001bb6:	4b0c      	ldr	r3, [pc, #48]	; (8001be8 <HAL_TIM_IC_CaptureCallback+0x318>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f022 0208 	bic.w	r2, r2, #8
 8001bbe:	60da      	str	r2, [r3, #12]
			ult_stg = 1;
 8001bc0:	4b0a      	ldr	r3, [pc, #40]	; (8001bec <HAL_TIM_IC_CaptureCallback+0x31c>)
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	701a      	strb	r2, [r3, #0]
}
 8001bc6:	bf00      	nop
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	200004d4 	.word	0x200004d4
 8001bd4:	200004d8 	.word	0x200004d8
 8001bd8:	200004dc 	.word	0x200004dc
 8001bdc:	8d3dcb09 	.word	0x8d3dcb09
 8001be0:	200004e1 	.word	0x200004e1
 8001be4:	200004e0 	.word	0x200004e0
 8001be8:	200003dc 	.word	0x200003dc
 8001bec:	200004e2 	.word	0x200004e2

08001bf0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001bf4:	4b11      	ldr	r3, [pc, #68]	; (8001c3c <MX_USART1_UART_Init+0x4c>)
 8001bf6:	4a12      	ldr	r2, [pc, #72]	; (8001c40 <MX_USART1_UART_Init+0x50>)
 8001bf8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001bfa:	4b10      	ldr	r3, [pc, #64]	; (8001c3c <MX_USART1_UART_Init+0x4c>)
 8001bfc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001c00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c02:	4b0e      	ldr	r3, [pc, #56]	; (8001c3c <MX_USART1_UART_Init+0x4c>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c08:	4b0c      	ldr	r3, [pc, #48]	; (8001c3c <MX_USART1_UART_Init+0x4c>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c0e:	4b0b      	ldr	r3, [pc, #44]	; (8001c3c <MX_USART1_UART_Init+0x4c>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c14:	4b09      	ldr	r3, [pc, #36]	; (8001c3c <MX_USART1_UART_Init+0x4c>)
 8001c16:	220c      	movs	r2, #12
 8001c18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c1a:	4b08      	ldr	r3, [pc, #32]	; (8001c3c <MX_USART1_UART_Init+0x4c>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c20:	4b06      	ldr	r3, [pc, #24]	; (8001c3c <MX_USART1_UART_Init+0x4c>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c26:	4805      	ldr	r0, [pc, #20]	; (8001c3c <MX_USART1_UART_Init+0x4c>)
 8001c28:	f003 fbf6 	bl	8005418 <HAL_UART_Init>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001c32:	f7ff f939 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	200004e4 	.word	0x200004e4
 8001c40:	40011000 	.word	0x40011000

08001c44 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c48:	4b11      	ldr	r3, [pc, #68]	; (8001c90 <MX_USART2_UART_Init+0x4c>)
 8001c4a:	4a12      	ldr	r2, [pc, #72]	; (8001c94 <MX_USART2_UART_Init+0x50>)
 8001c4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c4e:	4b10      	ldr	r3, [pc, #64]	; (8001c90 <MX_USART2_UART_Init+0x4c>)
 8001c50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c56:	4b0e      	ldr	r3, [pc, #56]	; (8001c90 <MX_USART2_UART_Init+0x4c>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c5c:	4b0c      	ldr	r3, [pc, #48]	; (8001c90 <MX_USART2_UART_Init+0x4c>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c62:	4b0b      	ldr	r3, [pc, #44]	; (8001c90 <MX_USART2_UART_Init+0x4c>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c68:	4b09      	ldr	r3, [pc, #36]	; (8001c90 <MX_USART2_UART_Init+0x4c>)
 8001c6a:	220c      	movs	r2, #12
 8001c6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c6e:	4b08      	ldr	r3, [pc, #32]	; (8001c90 <MX_USART2_UART_Init+0x4c>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c74:	4b06      	ldr	r3, [pc, #24]	; (8001c90 <MX_USART2_UART_Init+0x4c>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c7a:	4805      	ldr	r0, [pc, #20]	; (8001c90 <MX_USART2_UART_Init+0x4c>)
 8001c7c:	f003 fbcc 	bl	8005418 <HAL_UART_Init>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c86:	f7ff f90f 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c8a:	bf00      	nop
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	20000528 	.word	0x20000528
 8001c94:	40004400 	.word	0x40004400

08001c98 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b08c      	sub	sp, #48	; 0x30
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca0:	f107 031c 	add.w	r3, r7, #28
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	605a      	str	r2, [r3, #4]
 8001caa:	609a      	str	r2, [r3, #8]
 8001cac:	60da      	str	r2, [r3, #12]
 8001cae:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a63      	ldr	r2, [pc, #396]	; (8001e44 <HAL_UART_MspInit+0x1ac>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d15e      	bne.n	8001d78 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cba:	2300      	movs	r3, #0
 8001cbc:	61bb      	str	r3, [r7, #24]
 8001cbe:	4b62      	ldr	r3, [pc, #392]	; (8001e48 <HAL_UART_MspInit+0x1b0>)
 8001cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc2:	4a61      	ldr	r2, [pc, #388]	; (8001e48 <HAL_UART_MspInit+0x1b0>)
 8001cc4:	f043 0310 	orr.w	r3, r3, #16
 8001cc8:	6453      	str	r3, [r2, #68]	; 0x44
 8001cca:	4b5f      	ldr	r3, [pc, #380]	; (8001e48 <HAL_UART_MspInit+0x1b0>)
 8001ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cce:	f003 0310 	and.w	r3, r3, #16
 8001cd2:	61bb      	str	r3, [r7, #24]
 8001cd4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	617b      	str	r3, [r7, #20]
 8001cda:	4b5b      	ldr	r3, [pc, #364]	; (8001e48 <HAL_UART_MspInit+0x1b0>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cde:	4a5a      	ldr	r2, [pc, #360]	; (8001e48 <HAL_UART_MspInit+0x1b0>)
 8001ce0:	f043 0301 	orr.w	r3, r3, #1
 8001ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce6:	4b58      	ldr	r3, [pc, #352]	; (8001e48 <HAL_UART_MspInit+0x1b0>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	617b      	str	r3, [r7, #20]
 8001cf0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001cf2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001cf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d00:	2303      	movs	r3, #3
 8001d02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d04:	2307      	movs	r3, #7
 8001d06:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d08:	f107 031c 	add.w	r3, r7, #28
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	484f      	ldr	r0, [pc, #316]	; (8001e4c <HAL_UART_MspInit+0x1b4>)
 8001d10:	f000 fd8a 	bl	8002828 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001d14:	4b4e      	ldr	r3, [pc, #312]	; (8001e50 <HAL_UART_MspInit+0x1b8>)
 8001d16:	4a4f      	ldr	r2, [pc, #316]	; (8001e54 <HAL_UART_MspInit+0x1bc>)
 8001d18:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001d1a:	4b4d      	ldr	r3, [pc, #308]	; (8001e50 <HAL_UART_MspInit+0x1b8>)
 8001d1c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d20:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d22:	4b4b      	ldr	r3, [pc, #300]	; (8001e50 <HAL_UART_MspInit+0x1b8>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d28:	4b49      	ldr	r3, [pc, #292]	; (8001e50 <HAL_UART_MspInit+0x1b8>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d2e:	4b48      	ldr	r3, [pc, #288]	; (8001e50 <HAL_UART_MspInit+0x1b8>)
 8001d30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d34:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d36:	4b46      	ldr	r3, [pc, #280]	; (8001e50 <HAL_UART_MspInit+0x1b8>)
 8001d38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d3c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d3e:	4b44      	ldr	r3, [pc, #272]	; (8001e50 <HAL_UART_MspInit+0x1b8>)
 8001d40:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d44:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001d46:	4b42      	ldr	r3, [pc, #264]	; (8001e50 <HAL_UART_MspInit+0x1b8>)
 8001d48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d4c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d4e:	4b40      	ldr	r3, [pc, #256]	; (8001e50 <HAL_UART_MspInit+0x1b8>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d54:	4b3e      	ldr	r3, [pc, #248]	; (8001e50 <HAL_UART_MspInit+0x1b8>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001d5a:	483d      	ldr	r0, [pc, #244]	; (8001e50 <HAL_UART_MspInit+0x1b8>)
 8001d5c:	f000 f9f4 	bl	8002148 <HAL_DMA_Init>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 8001d66:	f7ff f89f 	bl	8000ea8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a38      	ldr	r2, [pc, #224]	; (8001e50 <HAL_UART_MspInit+0x1b8>)
 8001d6e:	639a      	str	r2, [r3, #56]	; 0x38
 8001d70:	4a37      	ldr	r2, [pc, #220]	; (8001e50 <HAL_UART_MspInit+0x1b8>)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001d76:	e061      	b.n	8001e3c <HAL_UART_MspInit+0x1a4>
  else if(uartHandle->Instance==USART2)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a36      	ldr	r2, [pc, #216]	; (8001e58 <HAL_UART_MspInit+0x1c0>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d15c      	bne.n	8001e3c <HAL_UART_MspInit+0x1a4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d82:	2300      	movs	r3, #0
 8001d84:	613b      	str	r3, [r7, #16]
 8001d86:	4b30      	ldr	r3, [pc, #192]	; (8001e48 <HAL_UART_MspInit+0x1b0>)
 8001d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8a:	4a2f      	ldr	r2, [pc, #188]	; (8001e48 <HAL_UART_MspInit+0x1b0>)
 8001d8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d90:	6413      	str	r3, [r2, #64]	; 0x40
 8001d92:	4b2d      	ldr	r3, [pc, #180]	; (8001e48 <HAL_UART_MspInit+0x1b0>)
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d9a:	613b      	str	r3, [r7, #16]
 8001d9c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d9e:	2300      	movs	r3, #0
 8001da0:	60fb      	str	r3, [r7, #12]
 8001da2:	4b29      	ldr	r3, [pc, #164]	; (8001e48 <HAL_UART_MspInit+0x1b0>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da6:	4a28      	ldr	r2, [pc, #160]	; (8001e48 <HAL_UART_MspInit+0x1b0>)
 8001da8:	f043 0301 	orr.w	r3, r3, #1
 8001dac:	6313      	str	r3, [r2, #48]	; 0x30
 8001dae:	4b26      	ldr	r3, [pc, #152]	; (8001e48 <HAL_UART_MspInit+0x1b0>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|GPIO_PIN_3;
 8001dba:	230c      	movs	r3, #12
 8001dbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001dca:	2307      	movs	r3, #7
 8001dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dce:	f107 031c 	add.w	r3, r7, #28
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	481d      	ldr	r0, [pc, #116]	; (8001e4c <HAL_UART_MspInit+0x1b4>)
 8001dd6:	f000 fd27 	bl	8002828 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream7;
 8001dda:	4b20      	ldr	r3, [pc, #128]	; (8001e5c <HAL_UART_MspInit+0x1c4>)
 8001ddc:	4a20      	ldr	r2, [pc, #128]	; (8001e60 <HAL_UART_MspInit+0x1c8>)
 8001dde:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_6;
 8001de0:	4b1e      	ldr	r3, [pc, #120]	; (8001e5c <HAL_UART_MspInit+0x1c4>)
 8001de2:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001de6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001de8:	4b1c      	ldr	r3, [pc, #112]	; (8001e5c <HAL_UART_MspInit+0x1c4>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dee:	4b1b      	ldr	r3, [pc, #108]	; (8001e5c <HAL_UART_MspInit+0x1c4>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001df4:	4b19      	ldr	r3, [pc, #100]	; (8001e5c <HAL_UART_MspInit+0x1c4>)
 8001df6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dfa:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001dfc:	4b17      	ldr	r3, [pc, #92]	; (8001e5c <HAL_UART_MspInit+0x1c4>)
 8001dfe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e02:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e04:	4b15      	ldr	r3, [pc, #84]	; (8001e5c <HAL_UART_MspInit+0x1c4>)
 8001e06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e0a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001e0c:	4b13      	ldr	r3, [pc, #76]	; (8001e5c <HAL_UART_MspInit+0x1c4>)
 8001e0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e12:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e14:	4b11      	ldr	r3, [pc, #68]	; (8001e5c <HAL_UART_MspInit+0x1c4>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e1a:	4b10      	ldr	r3, [pc, #64]	; (8001e5c <HAL_UART_MspInit+0x1c4>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001e20:	480e      	ldr	r0, [pc, #56]	; (8001e5c <HAL_UART_MspInit+0x1c4>)
 8001e22:	f000 f991 	bl	8002148 <HAL_DMA_Init>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <HAL_UART_MspInit+0x198>
      Error_Handler();
 8001e2c:	f7ff f83c 	bl	8000ea8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	4a0a      	ldr	r2, [pc, #40]	; (8001e5c <HAL_UART_MspInit+0x1c4>)
 8001e34:	639a      	str	r2, [r3, #56]	; 0x38
 8001e36:	4a09      	ldr	r2, [pc, #36]	; (8001e5c <HAL_UART_MspInit+0x1c4>)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001e3c:	bf00      	nop
 8001e3e:	3730      	adds	r7, #48	; 0x30
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	40011000 	.word	0x40011000
 8001e48:	40023800 	.word	0x40023800
 8001e4c:	40020000 	.word	0x40020000
 8001e50:	2000056c 	.word	0x2000056c
 8001e54:	40026440 	.word	0x40026440
 8001e58:	40004400 	.word	0x40004400
 8001e5c:	200005cc 	.word	0x200005cc
 8001e60:	400260b8 	.word	0x400260b8

08001e64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e9c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e68:	480d      	ldr	r0, [pc, #52]	; (8001ea0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e6a:	490e      	ldr	r1, [pc, #56]	; (8001ea4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e6c:	4a0e      	ldr	r2, [pc, #56]	; (8001ea8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e70:	e002      	b.n	8001e78 <LoopCopyDataInit>

08001e72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e76:	3304      	adds	r3, #4

08001e78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e7c:	d3f9      	bcc.n	8001e72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e7e:	4a0b      	ldr	r2, [pc, #44]	; (8001eac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e80:	4c0b      	ldr	r4, [pc, #44]	; (8001eb0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e84:	e001      	b.n	8001e8a <LoopFillZerobss>

08001e86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e88:	3204      	adds	r2, #4

08001e8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e8c:	d3fb      	bcc.n	8001e86 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e8e:	f7ff fa93 	bl	80013b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e92:	f005 febb 	bl	8007c0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e96:	f7fe ff71 	bl	8000d7c <main>
  bx  lr    
 8001e9a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ea0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ea4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001ea8:	0800822c 	.word	0x0800822c
  ldr r2, =_sbss
 8001eac:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001eb0:	200044d0 	.word	0x200044d0

08001eb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001eb4:	e7fe      	b.n	8001eb4 <ADC_IRQHandler>
	...

08001eb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ebc:	4b0e      	ldr	r3, [pc, #56]	; (8001ef8 <HAL_Init+0x40>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a0d      	ldr	r2, [pc, #52]	; (8001ef8 <HAL_Init+0x40>)
 8001ec2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ec6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ec8:	4b0b      	ldr	r3, [pc, #44]	; (8001ef8 <HAL_Init+0x40>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a0a      	ldr	r2, [pc, #40]	; (8001ef8 <HAL_Init+0x40>)
 8001ece:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ed2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ed4:	4b08      	ldr	r3, [pc, #32]	; (8001ef8 <HAL_Init+0x40>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a07      	ldr	r2, [pc, #28]	; (8001ef8 <HAL_Init+0x40>)
 8001eda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ede:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ee0:	2003      	movs	r0, #3
 8001ee2:	f000 f8fc 	bl	80020de <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ee6:	200f      	movs	r0, #15
 8001ee8:	f7ff f90e 	bl	8001108 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001eec:	f7ff f8e0 	bl	80010b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	40023c00 	.word	0x40023c00

08001efc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f00:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <HAL_IncTick+0x20>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	461a      	mov	r2, r3
 8001f06:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <HAL_IncTick+0x24>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	4a04      	ldr	r2, [pc, #16]	; (8001f20 <HAL_IncTick+0x24>)
 8001f0e:	6013      	str	r3, [r2, #0]
}
 8001f10:	bf00      	nop
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	20000008 	.word	0x20000008
 8001f20:	2000062c 	.word	0x2000062c

08001f24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  return uwTick;
 8001f28:	4b03      	ldr	r3, [pc, #12]	; (8001f38 <HAL_GetTick+0x14>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	2000062c 	.word	0x2000062c

08001f3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f44:	f7ff ffee 	bl	8001f24 <HAL_GetTick>
 8001f48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f54:	d005      	beq.n	8001f62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f56:	4b0a      	ldr	r3, [pc, #40]	; (8001f80 <HAL_Delay+0x44>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	4413      	add	r3, r2
 8001f60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f62:	bf00      	nop
 8001f64:	f7ff ffde 	bl	8001f24 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d8f7      	bhi.n	8001f64 <HAL_Delay+0x28>
  {
  }
}
 8001f74:	bf00      	nop
 8001f76:	bf00      	nop
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	20000008 	.word	0x20000008

08001f84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f003 0307 	and.w	r3, r3, #7
 8001f92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f94:	4b0c      	ldr	r3, [pc, #48]	; (8001fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f9a:	68ba      	ldr	r2, [r7, #8]
 8001f9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fb6:	4a04      	ldr	r2, [pc, #16]	; (8001fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	60d3      	str	r3, [r2, #12]
}
 8001fbc:	bf00      	nop
 8001fbe:	3714      	adds	r7, #20
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr
 8001fc8:	e000ed00 	.word	0xe000ed00

08001fcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fd0:	4b04      	ldr	r3, [pc, #16]	; (8001fe4 <__NVIC_GetPriorityGrouping+0x18>)
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	0a1b      	lsrs	r3, r3, #8
 8001fd6:	f003 0307 	and.w	r3, r3, #7
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr
 8001fe4:	e000ed00 	.word	0xe000ed00

08001fe8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	4603      	mov	r3, r0
 8001ff0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	db0b      	blt.n	8002012 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ffa:	79fb      	ldrb	r3, [r7, #7]
 8001ffc:	f003 021f 	and.w	r2, r3, #31
 8002000:	4907      	ldr	r1, [pc, #28]	; (8002020 <__NVIC_EnableIRQ+0x38>)
 8002002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002006:	095b      	lsrs	r3, r3, #5
 8002008:	2001      	movs	r0, #1
 800200a:	fa00 f202 	lsl.w	r2, r0, r2
 800200e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002012:	bf00      	nop
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	e000e100 	.word	0xe000e100

08002024 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	4603      	mov	r3, r0
 800202c:	6039      	str	r1, [r7, #0]
 800202e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002034:	2b00      	cmp	r3, #0
 8002036:	db0a      	blt.n	800204e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	b2da      	uxtb	r2, r3
 800203c:	490c      	ldr	r1, [pc, #48]	; (8002070 <__NVIC_SetPriority+0x4c>)
 800203e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002042:	0112      	lsls	r2, r2, #4
 8002044:	b2d2      	uxtb	r2, r2
 8002046:	440b      	add	r3, r1
 8002048:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800204c:	e00a      	b.n	8002064 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	b2da      	uxtb	r2, r3
 8002052:	4908      	ldr	r1, [pc, #32]	; (8002074 <__NVIC_SetPriority+0x50>)
 8002054:	79fb      	ldrb	r3, [r7, #7]
 8002056:	f003 030f 	and.w	r3, r3, #15
 800205a:	3b04      	subs	r3, #4
 800205c:	0112      	lsls	r2, r2, #4
 800205e:	b2d2      	uxtb	r2, r2
 8002060:	440b      	add	r3, r1
 8002062:	761a      	strb	r2, [r3, #24]
}
 8002064:	bf00      	nop
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr
 8002070:	e000e100 	.word	0xe000e100
 8002074:	e000ed00 	.word	0xe000ed00

08002078 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002078:	b480      	push	{r7}
 800207a:	b089      	sub	sp, #36	; 0x24
 800207c:	af00      	add	r7, sp, #0
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f003 0307 	and.w	r3, r3, #7
 800208a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	f1c3 0307 	rsb	r3, r3, #7
 8002092:	2b04      	cmp	r3, #4
 8002094:	bf28      	it	cs
 8002096:	2304      	movcs	r3, #4
 8002098:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	3304      	adds	r3, #4
 800209e:	2b06      	cmp	r3, #6
 80020a0:	d902      	bls.n	80020a8 <NVIC_EncodePriority+0x30>
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	3b03      	subs	r3, #3
 80020a6:	e000      	b.n	80020aa <NVIC_EncodePriority+0x32>
 80020a8:	2300      	movs	r3, #0
 80020aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020ac:	f04f 32ff 	mov.w	r2, #4294967295
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	43da      	mvns	r2, r3
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	401a      	ands	r2, r3
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020c0:	f04f 31ff 	mov.w	r1, #4294967295
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	fa01 f303 	lsl.w	r3, r1, r3
 80020ca:	43d9      	mvns	r1, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020d0:	4313      	orrs	r3, r2
         );
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3724      	adds	r7, #36	; 0x24
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr

080020de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	b082      	sub	sp, #8
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f7ff ff4c 	bl	8001f84 <__NVIC_SetPriorityGrouping>
}
 80020ec:	bf00      	nop
 80020ee:	3708      	adds	r7, #8
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	4603      	mov	r3, r0
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	607a      	str	r2, [r7, #4]
 8002100:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002102:	2300      	movs	r3, #0
 8002104:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002106:	f7ff ff61 	bl	8001fcc <__NVIC_GetPriorityGrouping>
 800210a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	68b9      	ldr	r1, [r7, #8]
 8002110:	6978      	ldr	r0, [r7, #20]
 8002112:	f7ff ffb1 	bl	8002078 <NVIC_EncodePriority>
 8002116:	4602      	mov	r2, r0
 8002118:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800211c:	4611      	mov	r1, r2
 800211e:	4618      	mov	r0, r3
 8002120:	f7ff ff80 	bl	8002024 <__NVIC_SetPriority>
}
 8002124:	bf00      	nop
 8002126:	3718      	adds	r7, #24
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	4603      	mov	r3, r0
 8002134:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213a:	4618      	mov	r0, r3
 800213c:	f7ff ff54 	bl	8001fe8 <__NVIC_EnableIRQ>
}
 8002140:	bf00      	nop
 8002142:	3708      	adds	r7, #8
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b086      	sub	sp, #24
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002150:	2300      	movs	r3, #0
 8002152:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002154:	f7ff fee6 	bl	8001f24 <HAL_GetTick>
 8002158:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d101      	bne.n	8002164 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e099      	b.n	8002298 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2202      	movs	r2, #2
 8002168:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f022 0201 	bic.w	r2, r2, #1
 8002182:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002184:	e00f      	b.n	80021a6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002186:	f7ff fecd 	bl	8001f24 <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	2b05      	cmp	r3, #5
 8002192:	d908      	bls.n	80021a6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2220      	movs	r2, #32
 8002198:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2203      	movs	r2, #3
 800219e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e078      	b.n	8002298 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0301 	and.w	r3, r3, #1
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d1e8      	bne.n	8002186 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80021bc:	697a      	ldr	r2, [r7, #20]
 80021be:	4b38      	ldr	r3, [pc, #224]	; (80022a0 <HAL_DMA_Init+0x158>)
 80021c0:	4013      	ands	r3, r2
 80021c2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685a      	ldr	r2, [r3, #4]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	691b      	ldr	r3, [r3, #16]
 80021d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a1b      	ldr	r3, [r3, #32]
 80021f0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021f2:	697a      	ldr	r2, [r7, #20]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fc:	2b04      	cmp	r3, #4
 80021fe:	d107      	bne.n	8002210 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002208:	4313      	orrs	r3, r2
 800220a:	697a      	ldr	r2, [r7, #20]
 800220c:	4313      	orrs	r3, r2
 800220e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	697a      	ldr	r2, [r7, #20]
 8002216:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	695b      	ldr	r3, [r3, #20]
 800221e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	f023 0307 	bic.w	r3, r3, #7
 8002226:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222c:	697a      	ldr	r2, [r7, #20]
 800222e:	4313      	orrs	r3, r2
 8002230:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002236:	2b04      	cmp	r3, #4
 8002238:	d117      	bne.n	800226a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800223e:	697a      	ldr	r2, [r7, #20]
 8002240:	4313      	orrs	r3, r2
 8002242:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002248:	2b00      	cmp	r3, #0
 800224a:	d00e      	beq.n	800226a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f000 fa6f 	bl	8002730 <DMA_CheckFifoParam>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d008      	beq.n	800226a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2240      	movs	r2, #64	; 0x40
 800225c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2201      	movs	r2, #1
 8002262:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002266:	2301      	movs	r3, #1
 8002268:	e016      	b.n	8002298 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	697a      	ldr	r2, [r7, #20]
 8002270:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f000 fa26 	bl	80026c4 <DMA_CalcBaseAndBitshift>
 8002278:	4603      	mov	r3, r0
 800227a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002280:	223f      	movs	r2, #63	; 0x3f
 8002282:	409a      	lsls	r2, r3
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2201      	movs	r2, #1
 8002292:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002296:	2300      	movs	r3, #0
}
 8002298:	4618      	mov	r0, r3
 800229a:	3718      	adds	r7, #24
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	f010803f 	.word	0xf010803f

080022a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
 80022b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022b2:	2300      	movs	r3, #0
 80022b4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d101      	bne.n	80022ca <HAL_DMA_Start_IT+0x26>
 80022c6:	2302      	movs	r3, #2
 80022c8:	e040      	b.n	800234c <HAL_DMA_Start_IT+0xa8>
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2201      	movs	r2, #1
 80022ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d12f      	bne.n	800233e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2202      	movs	r2, #2
 80022e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2200      	movs	r2, #0
 80022ea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	68b9      	ldr	r1, [r7, #8]
 80022f2:	68f8      	ldr	r0, [r7, #12]
 80022f4:	f000 f9b8 	bl	8002668 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022fc:	223f      	movs	r2, #63	; 0x3f
 80022fe:	409a      	lsls	r2, r3
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f042 0216 	orr.w	r2, r2, #22
 8002312:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002318:	2b00      	cmp	r3, #0
 800231a:	d007      	beq.n	800232c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f042 0208 	orr.w	r2, r2, #8
 800232a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f042 0201 	orr.w	r2, r2, #1
 800233a:	601a      	str	r2, [r3, #0]
 800233c:	e005      	b.n	800234a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002346:	2302      	movs	r3, #2
 8002348:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800234a:	7dfb      	ldrb	r3, [r7, #23]
}
 800234c:	4618      	mov	r0, r3
 800234e:	3718      	adds	r7, #24
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800235c:	2300      	movs	r3, #0
 800235e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002360:	4b8e      	ldr	r3, [pc, #568]	; (800259c <HAL_DMA_IRQHandler+0x248>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a8e      	ldr	r2, [pc, #568]	; (80025a0 <HAL_DMA_IRQHandler+0x24c>)
 8002366:	fba2 2303 	umull	r2, r3, r2, r3
 800236a:	0a9b      	lsrs	r3, r3, #10
 800236c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002372:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800237e:	2208      	movs	r2, #8
 8002380:	409a      	lsls	r2, r3
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	4013      	ands	r3, r2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d01a      	beq.n	80023c0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0304 	and.w	r3, r3, #4
 8002394:	2b00      	cmp	r3, #0
 8002396:	d013      	beq.n	80023c0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f022 0204 	bic.w	r2, r2, #4
 80023a6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ac:	2208      	movs	r2, #8
 80023ae:	409a      	lsls	r2, r3
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023b8:	f043 0201 	orr.w	r2, r3, #1
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023c4:	2201      	movs	r2, #1
 80023c6:	409a      	lsls	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	4013      	ands	r3, r2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d012      	beq.n	80023f6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	695b      	ldr	r3, [r3, #20]
 80023d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d00b      	beq.n	80023f6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023e2:	2201      	movs	r2, #1
 80023e4:	409a      	lsls	r2, r3
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ee:	f043 0202 	orr.w	r2, r3, #2
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023fa:	2204      	movs	r2, #4
 80023fc:	409a      	lsls	r2, r3
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	4013      	ands	r3, r2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d012      	beq.n	800242c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0302 	and.w	r3, r3, #2
 8002410:	2b00      	cmp	r3, #0
 8002412:	d00b      	beq.n	800242c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002418:	2204      	movs	r2, #4
 800241a:	409a      	lsls	r2, r3
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002424:	f043 0204 	orr.w	r2, r3, #4
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002430:	2210      	movs	r2, #16
 8002432:	409a      	lsls	r2, r3
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	4013      	ands	r3, r2
 8002438:	2b00      	cmp	r3, #0
 800243a:	d043      	beq.n	80024c4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0308 	and.w	r3, r3, #8
 8002446:	2b00      	cmp	r3, #0
 8002448:	d03c      	beq.n	80024c4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800244e:	2210      	movs	r2, #16
 8002450:	409a      	lsls	r2, r3
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d018      	beq.n	8002496 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d108      	bne.n	8002484 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002476:	2b00      	cmp	r3, #0
 8002478:	d024      	beq.n	80024c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	4798      	blx	r3
 8002482:	e01f      	b.n	80024c4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002488:	2b00      	cmp	r3, #0
 800248a:	d01b      	beq.n	80024c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	4798      	blx	r3
 8002494:	e016      	b.n	80024c4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d107      	bne.n	80024b4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f022 0208 	bic.w	r2, r2, #8
 80024b2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d003      	beq.n	80024c4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c8:	2220      	movs	r2, #32
 80024ca:	409a      	lsls	r2, r3
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	4013      	ands	r3, r2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f000 808f 	beq.w	80025f4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0310 	and.w	r3, r3, #16
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	f000 8087 	beq.w	80025f4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ea:	2220      	movs	r2, #32
 80024ec:	409a      	lsls	r2, r3
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2b05      	cmp	r3, #5
 80024fc:	d136      	bne.n	800256c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f022 0216 	bic.w	r2, r2, #22
 800250c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	695a      	ldr	r2, [r3, #20]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800251c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002522:	2b00      	cmp	r3, #0
 8002524:	d103      	bne.n	800252e <HAL_DMA_IRQHandler+0x1da>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800252a:	2b00      	cmp	r3, #0
 800252c:	d007      	beq.n	800253e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f022 0208 	bic.w	r2, r2, #8
 800253c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002542:	223f      	movs	r2, #63	; 0x3f
 8002544:	409a      	lsls	r2, r3
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2201      	movs	r2, #1
 800254e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800255e:	2b00      	cmp	r3, #0
 8002560:	d07e      	beq.n	8002660 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	4798      	blx	r3
        }
        return;
 800256a:	e079      	b.n	8002660 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d01d      	beq.n	80025b6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d10d      	bne.n	80025a4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258c:	2b00      	cmp	r3, #0
 800258e:	d031      	beq.n	80025f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	4798      	blx	r3
 8002598:	e02c      	b.n	80025f4 <HAL_DMA_IRQHandler+0x2a0>
 800259a:	bf00      	nop
 800259c:	20000000 	.word	0x20000000
 80025a0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d023      	beq.n	80025f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	4798      	blx	r3
 80025b4:	e01e      	b.n	80025f4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d10f      	bne.n	80025e4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f022 0210 	bic.w	r2, r2, #16
 80025d2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d003      	beq.n	80025f4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d032      	beq.n	8002662 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002600:	f003 0301 	and.w	r3, r3, #1
 8002604:	2b00      	cmp	r3, #0
 8002606:	d022      	beq.n	800264e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2205      	movs	r2, #5
 800260c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f022 0201 	bic.w	r2, r2, #1
 800261e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	3301      	adds	r3, #1
 8002624:	60bb      	str	r3, [r7, #8]
 8002626:	697a      	ldr	r2, [r7, #20]
 8002628:	429a      	cmp	r2, r3
 800262a:	d307      	bcc.n	800263c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1f2      	bne.n	8002620 <HAL_DMA_IRQHandler+0x2cc>
 800263a:	e000      	b.n	800263e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800263c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2201      	movs	r2, #1
 8002642:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002652:	2b00      	cmp	r3, #0
 8002654:	d005      	beq.n	8002662 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	4798      	blx	r3
 800265e:	e000      	b.n	8002662 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002660:	bf00      	nop
    }
  }
}
 8002662:	3718      	adds	r7, #24
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002668:	b480      	push	{r7}
 800266a:	b085      	sub	sp, #20
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	607a      	str	r2, [r7, #4]
 8002674:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002684:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	683a      	ldr	r2, [r7, #0]
 800268c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	2b40      	cmp	r3, #64	; 0x40
 8002694:	d108      	bne.n	80026a8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68ba      	ldr	r2, [r7, #8]
 80026a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80026a6:	e007      	b.n	80026b8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	68ba      	ldr	r2, [r7, #8]
 80026ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	60da      	str	r2, [r3, #12]
}
 80026b8:	bf00      	nop
 80026ba:	3714      	adds	r7, #20
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b085      	sub	sp, #20
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	3b10      	subs	r3, #16
 80026d4:	4a14      	ldr	r2, [pc, #80]	; (8002728 <DMA_CalcBaseAndBitshift+0x64>)
 80026d6:	fba2 2303 	umull	r2, r3, r2, r3
 80026da:	091b      	lsrs	r3, r3, #4
 80026dc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80026de:	4a13      	ldr	r2, [pc, #76]	; (800272c <DMA_CalcBaseAndBitshift+0x68>)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	4413      	add	r3, r2
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	461a      	mov	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2b03      	cmp	r3, #3
 80026f0:	d909      	bls.n	8002706 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80026fa:	f023 0303 	bic.w	r3, r3, #3
 80026fe:	1d1a      	adds	r2, r3, #4
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	659a      	str	r2, [r3, #88]	; 0x58
 8002704:	e007      	b.n	8002716 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800270e:	f023 0303 	bic.w	r3, r3, #3
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800271a:	4618      	mov	r0, r3
 800271c:	3714      	adds	r7, #20
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	aaaaaaab 	.word	0xaaaaaaab
 800272c:	08008214 	.word	0x08008214

08002730 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002730:	b480      	push	{r7}
 8002732:	b085      	sub	sp, #20
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002738:	2300      	movs	r3, #0
 800273a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002740:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	699b      	ldr	r3, [r3, #24]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d11f      	bne.n	800278a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	2b03      	cmp	r3, #3
 800274e:	d856      	bhi.n	80027fe <DMA_CheckFifoParam+0xce>
 8002750:	a201      	add	r2, pc, #4	; (adr r2, 8002758 <DMA_CheckFifoParam+0x28>)
 8002752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002756:	bf00      	nop
 8002758:	08002769 	.word	0x08002769
 800275c:	0800277b 	.word	0x0800277b
 8002760:	08002769 	.word	0x08002769
 8002764:	080027ff 	.word	0x080027ff
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800276c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d046      	beq.n	8002802 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002778:	e043      	b.n	8002802 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800277e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002782:	d140      	bne.n	8002806 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002788:	e03d      	b.n	8002806 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002792:	d121      	bne.n	80027d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	2b03      	cmp	r3, #3
 8002798:	d837      	bhi.n	800280a <DMA_CheckFifoParam+0xda>
 800279a:	a201      	add	r2, pc, #4	; (adr r2, 80027a0 <DMA_CheckFifoParam+0x70>)
 800279c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027a0:	080027b1 	.word	0x080027b1
 80027a4:	080027b7 	.word	0x080027b7
 80027a8:	080027b1 	.word	0x080027b1
 80027ac:	080027c9 	.word	0x080027c9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	73fb      	strb	r3, [r7, #15]
      break;
 80027b4:	e030      	b.n	8002818 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d025      	beq.n	800280e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027c6:	e022      	b.n	800280e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027cc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80027d0:	d11f      	bne.n	8002812 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80027d6:	e01c      	b.n	8002812 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d903      	bls.n	80027e6 <DMA_CheckFifoParam+0xb6>
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	2b03      	cmp	r3, #3
 80027e2:	d003      	beq.n	80027ec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80027e4:	e018      	b.n	8002818 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	73fb      	strb	r3, [r7, #15]
      break;
 80027ea:	e015      	b.n	8002818 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d00e      	beq.n	8002816 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	73fb      	strb	r3, [r7, #15]
      break;
 80027fc:	e00b      	b.n	8002816 <DMA_CheckFifoParam+0xe6>
      break;
 80027fe:	bf00      	nop
 8002800:	e00a      	b.n	8002818 <DMA_CheckFifoParam+0xe8>
      break;
 8002802:	bf00      	nop
 8002804:	e008      	b.n	8002818 <DMA_CheckFifoParam+0xe8>
      break;
 8002806:	bf00      	nop
 8002808:	e006      	b.n	8002818 <DMA_CheckFifoParam+0xe8>
      break;
 800280a:	bf00      	nop
 800280c:	e004      	b.n	8002818 <DMA_CheckFifoParam+0xe8>
      break;
 800280e:	bf00      	nop
 8002810:	e002      	b.n	8002818 <DMA_CheckFifoParam+0xe8>
      break;   
 8002812:	bf00      	nop
 8002814:	e000      	b.n	8002818 <DMA_CheckFifoParam+0xe8>
      break;
 8002816:	bf00      	nop
    }
  } 
  
  return status; 
 8002818:	7bfb      	ldrb	r3, [r7, #15]
}
 800281a:	4618      	mov	r0, r3
 800281c:	3714      	adds	r7, #20
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop

08002828 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002828:	b480      	push	{r7}
 800282a:	b089      	sub	sp, #36	; 0x24
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002832:	2300      	movs	r3, #0
 8002834:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002836:	2300      	movs	r3, #0
 8002838:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800283a:	2300      	movs	r3, #0
 800283c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800283e:	2300      	movs	r3, #0
 8002840:	61fb      	str	r3, [r7, #28]
 8002842:	e159      	b.n	8002af8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002844:	2201      	movs	r2, #1
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	697a      	ldr	r2, [r7, #20]
 8002854:	4013      	ands	r3, r2
 8002856:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002858:	693a      	ldr	r2, [r7, #16]
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	429a      	cmp	r2, r3
 800285e:	f040 8148 	bne.w	8002af2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f003 0303 	and.w	r3, r3, #3
 800286a:	2b01      	cmp	r3, #1
 800286c:	d005      	beq.n	800287a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002876:	2b02      	cmp	r3, #2
 8002878:	d130      	bne.n	80028dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	005b      	lsls	r3, r3, #1
 8002884:	2203      	movs	r2, #3
 8002886:	fa02 f303 	lsl.w	r3, r2, r3
 800288a:	43db      	mvns	r3, r3
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	4013      	ands	r3, r2
 8002890:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	68da      	ldr	r2, [r3, #12]
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	005b      	lsls	r3, r3, #1
 800289a:	fa02 f303 	lsl.w	r3, r2, r3
 800289e:	69ba      	ldr	r2, [r7, #24]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	69ba      	ldr	r2, [r7, #24]
 80028a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028b0:	2201      	movs	r2, #1
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	43db      	mvns	r3, r3
 80028ba:	69ba      	ldr	r2, [r7, #24]
 80028bc:	4013      	ands	r3, r2
 80028be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	091b      	lsrs	r3, r3, #4
 80028c6:	f003 0201 	and.w	r2, r3, #1
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f003 0303 	and.w	r3, r3, #3
 80028e4:	2b03      	cmp	r3, #3
 80028e6:	d017      	beq.n	8002918 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	2203      	movs	r2, #3
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
 80028f8:	43db      	mvns	r3, r3
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	4013      	ands	r3, r2
 80028fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	689a      	ldr	r2, [r3, #8]
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	4313      	orrs	r3, r2
 8002910:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f003 0303 	and.w	r3, r3, #3
 8002920:	2b02      	cmp	r3, #2
 8002922:	d123      	bne.n	800296c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	08da      	lsrs	r2, r3, #3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	3208      	adds	r2, #8
 800292c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002930:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	f003 0307 	and.w	r3, r3, #7
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	220f      	movs	r2, #15
 800293c:	fa02 f303 	lsl.w	r3, r2, r3
 8002940:	43db      	mvns	r3, r3
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	4013      	ands	r3, r2
 8002946:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	691a      	ldr	r2, [r3, #16]
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	f003 0307 	and.w	r3, r3, #7
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	4313      	orrs	r3, r2
 800295c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	08da      	lsrs	r2, r3, #3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	3208      	adds	r2, #8
 8002966:	69b9      	ldr	r1, [r7, #24]
 8002968:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	2203      	movs	r2, #3
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	43db      	mvns	r3, r3
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	4013      	ands	r3, r2
 8002982:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f003 0203 	and.w	r2, r3, #3
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	fa02 f303 	lsl.w	r3, r2, r3
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	4313      	orrs	r3, r2
 8002998:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	f000 80a2 	beq.w	8002af2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029ae:	2300      	movs	r3, #0
 80029b0:	60fb      	str	r3, [r7, #12]
 80029b2:	4b57      	ldr	r3, [pc, #348]	; (8002b10 <HAL_GPIO_Init+0x2e8>)
 80029b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b6:	4a56      	ldr	r2, [pc, #344]	; (8002b10 <HAL_GPIO_Init+0x2e8>)
 80029b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029bc:	6453      	str	r3, [r2, #68]	; 0x44
 80029be:	4b54      	ldr	r3, [pc, #336]	; (8002b10 <HAL_GPIO_Init+0x2e8>)
 80029c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029c6:	60fb      	str	r3, [r7, #12]
 80029c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029ca:	4a52      	ldr	r2, [pc, #328]	; (8002b14 <HAL_GPIO_Init+0x2ec>)
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	089b      	lsrs	r3, r3, #2
 80029d0:	3302      	adds	r3, #2
 80029d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	f003 0303 	and.w	r3, r3, #3
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	220f      	movs	r2, #15
 80029e2:	fa02 f303 	lsl.w	r3, r2, r3
 80029e6:	43db      	mvns	r3, r3
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	4013      	ands	r3, r2
 80029ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a49      	ldr	r2, [pc, #292]	; (8002b18 <HAL_GPIO_Init+0x2f0>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d019      	beq.n	8002a2a <HAL_GPIO_Init+0x202>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a48      	ldr	r2, [pc, #288]	; (8002b1c <HAL_GPIO_Init+0x2f4>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d013      	beq.n	8002a26 <HAL_GPIO_Init+0x1fe>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a47      	ldr	r2, [pc, #284]	; (8002b20 <HAL_GPIO_Init+0x2f8>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d00d      	beq.n	8002a22 <HAL_GPIO_Init+0x1fa>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a46      	ldr	r2, [pc, #280]	; (8002b24 <HAL_GPIO_Init+0x2fc>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d007      	beq.n	8002a1e <HAL_GPIO_Init+0x1f6>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a45      	ldr	r2, [pc, #276]	; (8002b28 <HAL_GPIO_Init+0x300>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d101      	bne.n	8002a1a <HAL_GPIO_Init+0x1f2>
 8002a16:	2304      	movs	r3, #4
 8002a18:	e008      	b.n	8002a2c <HAL_GPIO_Init+0x204>
 8002a1a:	2307      	movs	r3, #7
 8002a1c:	e006      	b.n	8002a2c <HAL_GPIO_Init+0x204>
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e004      	b.n	8002a2c <HAL_GPIO_Init+0x204>
 8002a22:	2302      	movs	r3, #2
 8002a24:	e002      	b.n	8002a2c <HAL_GPIO_Init+0x204>
 8002a26:	2301      	movs	r3, #1
 8002a28:	e000      	b.n	8002a2c <HAL_GPIO_Init+0x204>
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	69fa      	ldr	r2, [r7, #28]
 8002a2e:	f002 0203 	and.w	r2, r2, #3
 8002a32:	0092      	lsls	r2, r2, #2
 8002a34:	4093      	lsls	r3, r2
 8002a36:	69ba      	ldr	r2, [r7, #24]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a3c:	4935      	ldr	r1, [pc, #212]	; (8002b14 <HAL_GPIO_Init+0x2ec>)
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	089b      	lsrs	r3, r3, #2
 8002a42:	3302      	adds	r3, #2
 8002a44:	69ba      	ldr	r2, [r7, #24]
 8002a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a4a:	4b38      	ldr	r3, [pc, #224]	; (8002b2c <HAL_GPIO_Init+0x304>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	43db      	mvns	r3, r3
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	4013      	ands	r3, r2
 8002a58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d003      	beq.n	8002a6e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a6e:	4a2f      	ldr	r2, [pc, #188]	; (8002b2c <HAL_GPIO_Init+0x304>)
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a74:	4b2d      	ldr	r3, [pc, #180]	; (8002b2c <HAL_GPIO_Init+0x304>)
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	43db      	mvns	r3, r3
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	4013      	ands	r3, r2
 8002a82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d003      	beq.n	8002a98 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a98:	4a24      	ldr	r2, [pc, #144]	; (8002b2c <HAL_GPIO_Init+0x304>)
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a9e:	4b23      	ldr	r3, [pc, #140]	; (8002b2c <HAL_GPIO_Init+0x304>)
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	43db      	mvns	r3, r3
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	4013      	ands	r3, r2
 8002aac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d003      	beq.n	8002ac2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ac2:	4a1a      	ldr	r2, [pc, #104]	; (8002b2c <HAL_GPIO_Init+0x304>)
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ac8:	4b18      	ldr	r3, [pc, #96]	; (8002b2c <HAL_GPIO_Init+0x304>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d003      	beq.n	8002aec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002aec:	4a0f      	ldr	r2, [pc, #60]	; (8002b2c <HAL_GPIO_Init+0x304>)
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	3301      	adds	r3, #1
 8002af6:	61fb      	str	r3, [r7, #28]
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	2b0f      	cmp	r3, #15
 8002afc:	f67f aea2 	bls.w	8002844 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b00:	bf00      	nop
 8002b02:	bf00      	nop
 8002b04:	3724      	adds	r7, #36	; 0x24
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	40023800 	.word	0x40023800
 8002b14:	40013800 	.word	0x40013800
 8002b18:	40020000 	.word	0x40020000
 8002b1c:	40020400 	.word	0x40020400
 8002b20:	40020800 	.word	0x40020800
 8002b24:	40020c00 	.word	0x40020c00
 8002b28:	40021000 	.word	0x40021000
 8002b2c:	40013c00 	.word	0x40013c00

08002b30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	460b      	mov	r3, r1
 8002b3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	691a      	ldr	r2, [r3, #16]
 8002b40:	887b      	ldrh	r3, [r7, #2]
 8002b42:	4013      	ands	r3, r2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d002      	beq.n	8002b4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	73fb      	strb	r3, [r7, #15]
 8002b4c:	e001      	b.n	8002b52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3714      	adds	r7, #20
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	460b      	mov	r3, r1
 8002b6a:	807b      	strh	r3, [r7, #2]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b70:	787b      	ldrb	r3, [r7, #1]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d003      	beq.n	8002b7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b76:	887a      	ldrh	r2, [r7, #2]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b7c:	e003      	b.n	8002b86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b7e:	887b      	ldrh	r3, [r7, #2]
 8002b80:	041a      	lsls	r2, r3, #16
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	619a      	str	r2, [r3, #24]
}
 8002b86:	bf00      	nop
 8002b88:	370c      	adds	r7, #12
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
	...

08002b94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e12b      	b.n	8002dfe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d106      	bne.n	8002bc0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f7fe f896 	bl	8000cec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2224      	movs	r2, #36	; 0x24
 8002bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f022 0201 	bic.w	r2, r2, #1
 8002bd6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002be6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002bf6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002bf8:	f001 f888 	bl	8003d0c <HAL_RCC_GetPCLK1Freq>
 8002bfc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	4a81      	ldr	r2, [pc, #516]	; (8002e08 <HAL_I2C_Init+0x274>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d807      	bhi.n	8002c18 <HAL_I2C_Init+0x84>
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	4a80      	ldr	r2, [pc, #512]	; (8002e0c <HAL_I2C_Init+0x278>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	bf94      	ite	ls
 8002c10:	2301      	movls	r3, #1
 8002c12:	2300      	movhi	r3, #0
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	e006      	b.n	8002c26 <HAL_I2C_Init+0x92>
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	4a7d      	ldr	r2, [pc, #500]	; (8002e10 <HAL_I2C_Init+0x27c>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	bf94      	ite	ls
 8002c20:	2301      	movls	r3, #1
 8002c22:	2300      	movhi	r3, #0
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e0e7      	b.n	8002dfe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	4a78      	ldr	r2, [pc, #480]	; (8002e14 <HAL_I2C_Init+0x280>)
 8002c32:	fba2 2303 	umull	r2, r3, r2, r3
 8002c36:	0c9b      	lsrs	r3, r3, #18
 8002c38:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68ba      	ldr	r2, [r7, #8]
 8002c4a:	430a      	orrs	r2, r1
 8002c4c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	6a1b      	ldr	r3, [r3, #32]
 8002c54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	4a6a      	ldr	r2, [pc, #424]	; (8002e08 <HAL_I2C_Init+0x274>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d802      	bhi.n	8002c68 <HAL_I2C_Init+0xd4>
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	3301      	adds	r3, #1
 8002c66:	e009      	b.n	8002c7c <HAL_I2C_Init+0xe8>
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002c6e:	fb02 f303 	mul.w	r3, r2, r3
 8002c72:	4a69      	ldr	r2, [pc, #420]	; (8002e18 <HAL_I2C_Init+0x284>)
 8002c74:	fba2 2303 	umull	r2, r3, r2, r3
 8002c78:	099b      	lsrs	r3, r3, #6
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	6812      	ldr	r2, [r2, #0]
 8002c80:	430b      	orrs	r3, r1
 8002c82:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	69db      	ldr	r3, [r3, #28]
 8002c8a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002c8e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	495c      	ldr	r1, [pc, #368]	; (8002e08 <HAL_I2C_Init+0x274>)
 8002c98:	428b      	cmp	r3, r1
 8002c9a:	d819      	bhi.n	8002cd0 <HAL_I2C_Init+0x13c>
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	1e59      	subs	r1, r3, #1
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002caa:	1c59      	adds	r1, r3, #1
 8002cac:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002cb0:	400b      	ands	r3, r1
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d00a      	beq.n	8002ccc <HAL_I2C_Init+0x138>
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	1e59      	subs	r1, r3, #1
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	005b      	lsls	r3, r3, #1
 8002cc0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cca:	e051      	b.n	8002d70 <HAL_I2C_Init+0x1dc>
 8002ccc:	2304      	movs	r3, #4
 8002cce:	e04f      	b.n	8002d70 <HAL_I2C_Init+0x1dc>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d111      	bne.n	8002cfc <HAL_I2C_Init+0x168>
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	1e58      	subs	r0, r3, #1
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6859      	ldr	r1, [r3, #4]
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	005b      	lsls	r3, r3, #1
 8002ce4:	440b      	add	r3, r1
 8002ce6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cea:	3301      	adds	r3, #1
 8002cec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	bf0c      	ite	eq
 8002cf4:	2301      	moveq	r3, #1
 8002cf6:	2300      	movne	r3, #0
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	e012      	b.n	8002d22 <HAL_I2C_Init+0x18e>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	1e58      	subs	r0, r3, #1
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6859      	ldr	r1, [r3, #4]
 8002d04:	460b      	mov	r3, r1
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	440b      	add	r3, r1
 8002d0a:	0099      	lsls	r1, r3, #2
 8002d0c:	440b      	add	r3, r1
 8002d0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d12:	3301      	adds	r3, #1
 8002d14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	bf0c      	ite	eq
 8002d1c:	2301      	moveq	r3, #1
 8002d1e:	2300      	movne	r3, #0
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <HAL_I2C_Init+0x196>
 8002d26:	2301      	movs	r3, #1
 8002d28:	e022      	b.n	8002d70 <HAL_I2C_Init+0x1dc>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d10e      	bne.n	8002d50 <HAL_I2C_Init+0x1bc>
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	1e58      	subs	r0, r3, #1
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6859      	ldr	r1, [r3, #4]
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	005b      	lsls	r3, r3, #1
 8002d3e:	440b      	add	r3, r1
 8002d40:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d44:	3301      	adds	r3, #1
 8002d46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d4e:	e00f      	b.n	8002d70 <HAL_I2C_Init+0x1dc>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	1e58      	subs	r0, r3, #1
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6859      	ldr	r1, [r3, #4]
 8002d58:	460b      	mov	r3, r1
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	440b      	add	r3, r1
 8002d5e:	0099      	lsls	r1, r3, #2
 8002d60:	440b      	add	r3, r1
 8002d62:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d66:	3301      	adds	r3, #1
 8002d68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d70:	6879      	ldr	r1, [r7, #4]
 8002d72:	6809      	ldr	r1, [r1, #0]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	69da      	ldr	r2, [r3, #28]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a1b      	ldr	r3, [r3, #32]
 8002d8a:	431a      	orrs	r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	430a      	orrs	r2, r1
 8002d92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002d9e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	6911      	ldr	r1, [r2, #16]
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	68d2      	ldr	r2, [r2, #12]
 8002daa:	4311      	orrs	r1, r2
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	6812      	ldr	r2, [r2, #0]
 8002db0:	430b      	orrs	r3, r1
 8002db2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	695a      	ldr	r2, [r3, #20]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	431a      	orrs	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f042 0201 	orr.w	r2, r2, #1
 8002dde:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2220      	movs	r2, #32
 8002dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3710      	adds	r7, #16
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	000186a0 	.word	0x000186a0
 8002e0c:	001e847f 	.word	0x001e847f
 8002e10:	003d08ff 	.word	0x003d08ff
 8002e14:	431bde83 	.word	0x431bde83
 8002e18:	10624dd3 	.word	0x10624dd3

08002e1c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b088      	sub	sp, #32
 8002e20:	af02      	add	r7, sp, #8
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	607a      	str	r2, [r7, #4]
 8002e26:	461a      	mov	r2, r3
 8002e28:	460b      	mov	r3, r1
 8002e2a:	817b      	strh	r3, [r7, #10]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e30:	f7ff f878 	bl	8001f24 <HAL_GetTick>
 8002e34:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b20      	cmp	r3, #32
 8002e40:	f040 80e0 	bne.w	8003004 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	9300      	str	r3, [sp, #0]
 8002e48:	2319      	movs	r3, #25
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	4970      	ldr	r1, [pc, #448]	; (8003010 <HAL_I2C_Master_Transmit+0x1f4>)
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	f000 f964 	bl	800311c <I2C_WaitOnFlagUntilTimeout>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	e0d3      	b.n	8003006 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d101      	bne.n	8002e6c <HAL_I2C_Master_Transmit+0x50>
 8002e68:	2302      	movs	r3, #2
 8002e6a:	e0cc      	b.n	8003006 <HAL_I2C_Master_Transmit+0x1ea>
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0301 	and.w	r3, r3, #1
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d007      	beq.n	8002e92 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f042 0201 	orr.w	r2, r2, #1
 8002e90:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ea0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2221      	movs	r2, #33	; 0x21
 8002ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2210      	movs	r2, #16
 8002eae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	893a      	ldrh	r2, [r7, #8]
 8002ec2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec8:	b29a      	uxth	r2, r3
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	4a50      	ldr	r2, [pc, #320]	; (8003014 <HAL_I2C_Master_Transmit+0x1f8>)
 8002ed2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002ed4:	8979      	ldrh	r1, [r7, #10]
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	6a3a      	ldr	r2, [r7, #32]
 8002eda:	68f8      	ldr	r0, [r7, #12]
 8002edc:	f000 f89c 	bl	8003018 <I2C_MasterRequestWrite>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d001      	beq.n	8002eea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e08d      	b.n	8003006 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eea:	2300      	movs	r3, #0
 8002eec:	613b      	str	r3, [r7, #16]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	695b      	ldr	r3, [r3, #20]
 8002ef4:	613b      	str	r3, [r7, #16]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	613b      	str	r3, [r7, #16]
 8002efe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002f00:	e066      	b.n	8002fd0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f02:	697a      	ldr	r2, [r7, #20]
 8002f04:	6a39      	ldr	r1, [r7, #32]
 8002f06:	68f8      	ldr	r0, [r7, #12]
 8002f08:	f000 f9de 	bl	80032c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d00d      	beq.n	8002f2e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f16:	2b04      	cmp	r3, #4
 8002f18:	d107      	bne.n	8002f2a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f28:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e06b      	b.n	8003006 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f32:	781a      	ldrb	r2, [r3, #0]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3e:	1c5a      	adds	r2, r3, #1
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	b29a      	uxth	r2, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f56:	3b01      	subs	r3, #1
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	695b      	ldr	r3, [r3, #20]
 8002f64:	f003 0304 	and.w	r3, r3, #4
 8002f68:	2b04      	cmp	r3, #4
 8002f6a:	d11b      	bne.n	8002fa4 <HAL_I2C_Master_Transmit+0x188>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d017      	beq.n	8002fa4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f78:	781a      	ldrb	r2, [r3, #0]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f84:	1c5a      	adds	r2, r3, #1
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	3b01      	subs	r3, #1
 8002f92:	b29a      	uxth	r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f9c:	3b01      	subs	r3, #1
 8002f9e:	b29a      	uxth	r2, r3
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fa4:	697a      	ldr	r2, [r7, #20]
 8002fa6:	6a39      	ldr	r1, [r7, #32]
 8002fa8:	68f8      	ldr	r0, [r7, #12]
 8002faa:	f000 f9ce 	bl	800334a <I2C_WaitOnBTFFlagUntilTimeout>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d00d      	beq.n	8002fd0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb8:	2b04      	cmp	r3, #4
 8002fba:	d107      	bne.n	8002fcc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e01a      	b.n	8003006 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d194      	bne.n	8002f02 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fe6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2220      	movs	r2, #32
 8002fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003000:	2300      	movs	r3, #0
 8003002:	e000      	b.n	8003006 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003004:	2302      	movs	r3, #2
  }
}
 8003006:	4618      	mov	r0, r3
 8003008:	3718      	adds	r7, #24
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	00100002 	.word	0x00100002
 8003014:	ffff0000 	.word	0xffff0000

08003018 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b088      	sub	sp, #32
 800301c:	af02      	add	r7, sp, #8
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	607a      	str	r2, [r7, #4]
 8003022:	603b      	str	r3, [r7, #0]
 8003024:	460b      	mov	r3, r1
 8003026:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	2b08      	cmp	r3, #8
 8003032:	d006      	beq.n	8003042 <I2C_MasterRequestWrite+0x2a>
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	2b01      	cmp	r3, #1
 8003038:	d003      	beq.n	8003042 <I2C_MasterRequestWrite+0x2a>
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003040:	d108      	bne.n	8003054 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003050:	601a      	str	r2, [r3, #0]
 8003052:	e00b      	b.n	800306c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003058:	2b12      	cmp	r3, #18
 800305a:	d107      	bne.n	800306c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800306a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	9300      	str	r3, [sp, #0]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003078:	68f8      	ldr	r0, [r7, #12]
 800307a:	f000 f84f 	bl	800311c <I2C_WaitOnFlagUntilTimeout>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d00d      	beq.n	80030a0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800308e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003092:	d103      	bne.n	800309c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f44f 7200 	mov.w	r2, #512	; 0x200
 800309a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e035      	b.n	800310c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	691b      	ldr	r3, [r3, #16]
 80030a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030a8:	d108      	bne.n	80030bc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030aa:	897b      	ldrh	r3, [r7, #10]
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	461a      	mov	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80030b8:	611a      	str	r2, [r3, #16]
 80030ba:	e01b      	b.n	80030f4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80030bc:	897b      	ldrh	r3, [r7, #10]
 80030be:	11db      	asrs	r3, r3, #7
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	f003 0306 	and.w	r3, r3, #6
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	f063 030f 	orn	r3, r3, #15
 80030cc:	b2da      	uxtb	r2, r3
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	490e      	ldr	r1, [pc, #56]	; (8003114 <I2C_MasterRequestWrite+0xfc>)
 80030da:	68f8      	ldr	r0, [r7, #12]
 80030dc:	f000 f875 	bl	80031ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e010      	b.n	800310c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80030ea:	897b      	ldrh	r3, [r7, #10]
 80030ec:	b2da      	uxtb	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	4907      	ldr	r1, [pc, #28]	; (8003118 <I2C_MasterRequestWrite+0x100>)
 80030fa:	68f8      	ldr	r0, [r7, #12]
 80030fc:	f000 f865 	bl	80031ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d001      	beq.n	800310a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e000      	b.n	800310c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800310a:	2300      	movs	r3, #0
}
 800310c:	4618      	mov	r0, r3
 800310e:	3718      	adds	r7, #24
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	00010008 	.word	0x00010008
 8003118:	00010002 	.word	0x00010002

0800311c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	603b      	str	r3, [r7, #0]
 8003128:	4613      	mov	r3, r2
 800312a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800312c:	e025      	b.n	800317a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003134:	d021      	beq.n	800317a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003136:	f7fe fef5 	bl	8001f24 <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	683a      	ldr	r2, [r7, #0]
 8003142:	429a      	cmp	r2, r3
 8003144:	d302      	bcc.n	800314c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d116      	bne.n	800317a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2200      	movs	r2, #0
 8003150:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2220      	movs	r2, #32
 8003156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003166:	f043 0220 	orr.w	r2, r3, #32
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e023      	b.n	80031c2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	0c1b      	lsrs	r3, r3, #16
 800317e:	b2db      	uxtb	r3, r3
 8003180:	2b01      	cmp	r3, #1
 8003182:	d10d      	bne.n	80031a0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	43da      	mvns	r2, r3
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	4013      	ands	r3, r2
 8003190:	b29b      	uxth	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	bf0c      	ite	eq
 8003196:	2301      	moveq	r3, #1
 8003198:	2300      	movne	r3, #0
 800319a:	b2db      	uxtb	r3, r3
 800319c:	461a      	mov	r2, r3
 800319e:	e00c      	b.n	80031ba <I2C_WaitOnFlagUntilTimeout+0x9e>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	699b      	ldr	r3, [r3, #24]
 80031a6:	43da      	mvns	r2, r3
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	4013      	ands	r3, r2
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	bf0c      	ite	eq
 80031b2:	2301      	moveq	r3, #1
 80031b4:	2300      	movne	r3, #0
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	461a      	mov	r2, r3
 80031ba:	79fb      	ldrb	r3, [r7, #7]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d0b6      	beq.n	800312e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3710      	adds	r7, #16
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80031ca:	b580      	push	{r7, lr}
 80031cc:	b084      	sub	sp, #16
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	60f8      	str	r0, [r7, #12]
 80031d2:	60b9      	str	r1, [r7, #8]
 80031d4:	607a      	str	r2, [r7, #4]
 80031d6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031d8:	e051      	b.n	800327e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	695b      	ldr	r3, [r3, #20]
 80031e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031e8:	d123      	bne.n	8003232 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031f8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003202:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2220      	movs	r2, #32
 800320e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321e:	f043 0204 	orr.w	r2, r3, #4
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e046      	b.n	80032c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003238:	d021      	beq.n	800327e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800323a:	f7fe fe73 	bl	8001f24 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	429a      	cmp	r2, r3
 8003248:	d302      	bcc.n	8003250 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d116      	bne.n	800327e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2220      	movs	r2, #32
 800325a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326a:	f043 0220 	orr.w	r2, r3, #32
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e020      	b.n	80032c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	0c1b      	lsrs	r3, r3, #16
 8003282:	b2db      	uxtb	r3, r3
 8003284:	2b01      	cmp	r3, #1
 8003286:	d10c      	bne.n	80032a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	43da      	mvns	r2, r3
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	4013      	ands	r3, r2
 8003294:	b29b      	uxth	r3, r3
 8003296:	2b00      	cmp	r3, #0
 8003298:	bf14      	ite	ne
 800329a:	2301      	movne	r3, #1
 800329c:	2300      	moveq	r3, #0
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	e00b      	b.n	80032ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	699b      	ldr	r3, [r3, #24]
 80032a8:	43da      	mvns	r2, r3
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	4013      	ands	r3, r2
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	bf14      	ite	ne
 80032b4:	2301      	movne	r3, #1
 80032b6:	2300      	moveq	r3, #0
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d18d      	bne.n	80031da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80032be:	2300      	movs	r3, #0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3710      	adds	r7, #16
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	60b9      	str	r1, [r7, #8]
 80032d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032d4:	e02d      	b.n	8003332 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80032d6:	68f8      	ldr	r0, [r7, #12]
 80032d8:	f000 f878 	bl	80033cc <I2C_IsAcknowledgeFailed>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d001      	beq.n	80032e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e02d      	b.n	8003342 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ec:	d021      	beq.n	8003332 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032ee:	f7fe fe19 	bl	8001f24 <HAL_GetTick>
 80032f2:	4602      	mov	r2, r0
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	68ba      	ldr	r2, [r7, #8]
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d302      	bcc.n	8003304 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d116      	bne.n	8003332 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2200      	movs	r2, #0
 8003308:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2220      	movs	r2, #32
 800330e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	f043 0220 	orr.w	r2, r3, #32
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e007      	b.n	8003342 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	695b      	ldr	r3, [r3, #20]
 8003338:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800333c:	2b80      	cmp	r3, #128	; 0x80
 800333e:	d1ca      	bne.n	80032d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3710      	adds	r7, #16
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}

0800334a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800334a:	b580      	push	{r7, lr}
 800334c:	b084      	sub	sp, #16
 800334e:	af00      	add	r7, sp, #0
 8003350:	60f8      	str	r0, [r7, #12]
 8003352:	60b9      	str	r1, [r7, #8]
 8003354:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003356:	e02d      	b.n	80033b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003358:	68f8      	ldr	r0, [r7, #12]
 800335a:	f000 f837 	bl	80033cc <I2C_IsAcknowledgeFailed>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d001      	beq.n	8003368 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e02d      	b.n	80033c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800336e:	d021      	beq.n	80033b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003370:	f7fe fdd8 	bl	8001f24 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	68ba      	ldr	r2, [r7, #8]
 800337c:	429a      	cmp	r2, r3
 800337e:	d302      	bcc.n	8003386 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d116      	bne.n	80033b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2200      	movs	r2, #0
 800338a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2220      	movs	r2, #32
 8003390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2200      	movs	r2, #0
 8003398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a0:	f043 0220 	orr.w	r2, r3, #32
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e007      	b.n	80033c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	f003 0304 	and.w	r3, r3, #4
 80033be:	2b04      	cmp	r3, #4
 80033c0:	d1ca      	bne.n	8003358 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033c2:	2300      	movs	r3, #0
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3710      	adds	r7, #16
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033e2:	d11b      	bne.n	800341c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80033ec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2220      	movs	r2, #32
 80033f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003408:	f043 0204 	orr.w	r2, r3, #4
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e000      	b.n	800341e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	370c      	adds	r7, #12
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
	...

0800342c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b086      	sub	sp, #24
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d101      	bne.n	800343e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e267      	b.n	800390e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0301 	and.w	r3, r3, #1
 8003446:	2b00      	cmp	r3, #0
 8003448:	d075      	beq.n	8003536 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800344a:	4b88      	ldr	r3, [pc, #544]	; (800366c <HAL_RCC_OscConfig+0x240>)
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f003 030c 	and.w	r3, r3, #12
 8003452:	2b04      	cmp	r3, #4
 8003454:	d00c      	beq.n	8003470 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003456:	4b85      	ldr	r3, [pc, #532]	; (800366c <HAL_RCC_OscConfig+0x240>)
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800345e:	2b08      	cmp	r3, #8
 8003460:	d112      	bne.n	8003488 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003462:	4b82      	ldr	r3, [pc, #520]	; (800366c <HAL_RCC_OscConfig+0x240>)
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800346a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800346e:	d10b      	bne.n	8003488 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003470:	4b7e      	ldr	r3, [pc, #504]	; (800366c <HAL_RCC_OscConfig+0x240>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d05b      	beq.n	8003534 <HAL_RCC_OscConfig+0x108>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d157      	bne.n	8003534 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e242      	b.n	800390e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003490:	d106      	bne.n	80034a0 <HAL_RCC_OscConfig+0x74>
 8003492:	4b76      	ldr	r3, [pc, #472]	; (800366c <HAL_RCC_OscConfig+0x240>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a75      	ldr	r2, [pc, #468]	; (800366c <HAL_RCC_OscConfig+0x240>)
 8003498:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800349c:	6013      	str	r3, [r2, #0]
 800349e:	e01d      	b.n	80034dc <HAL_RCC_OscConfig+0xb0>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034a8:	d10c      	bne.n	80034c4 <HAL_RCC_OscConfig+0x98>
 80034aa:	4b70      	ldr	r3, [pc, #448]	; (800366c <HAL_RCC_OscConfig+0x240>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a6f      	ldr	r2, [pc, #444]	; (800366c <HAL_RCC_OscConfig+0x240>)
 80034b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034b4:	6013      	str	r3, [r2, #0]
 80034b6:	4b6d      	ldr	r3, [pc, #436]	; (800366c <HAL_RCC_OscConfig+0x240>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a6c      	ldr	r2, [pc, #432]	; (800366c <HAL_RCC_OscConfig+0x240>)
 80034bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034c0:	6013      	str	r3, [r2, #0]
 80034c2:	e00b      	b.n	80034dc <HAL_RCC_OscConfig+0xb0>
 80034c4:	4b69      	ldr	r3, [pc, #420]	; (800366c <HAL_RCC_OscConfig+0x240>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a68      	ldr	r2, [pc, #416]	; (800366c <HAL_RCC_OscConfig+0x240>)
 80034ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034ce:	6013      	str	r3, [r2, #0]
 80034d0:	4b66      	ldr	r3, [pc, #408]	; (800366c <HAL_RCC_OscConfig+0x240>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a65      	ldr	r2, [pc, #404]	; (800366c <HAL_RCC_OscConfig+0x240>)
 80034d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d013      	beq.n	800350c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e4:	f7fe fd1e 	bl	8001f24 <HAL_GetTick>
 80034e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ea:	e008      	b.n	80034fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034ec:	f7fe fd1a 	bl	8001f24 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b64      	cmp	r3, #100	; 0x64
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e207      	b.n	800390e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034fe:	4b5b      	ldr	r3, [pc, #364]	; (800366c <HAL_RCC_OscConfig+0x240>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d0f0      	beq.n	80034ec <HAL_RCC_OscConfig+0xc0>
 800350a:	e014      	b.n	8003536 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800350c:	f7fe fd0a 	bl	8001f24 <HAL_GetTick>
 8003510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003512:	e008      	b.n	8003526 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003514:	f7fe fd06 	bl	8001f24 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b64      	cmp	r3, #100	; 0x64
 8003520:	d901      	bls.n	8003526 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e1f3      	b.n	800390e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003526:	4b51      	ldr	r3, [pc, #324]	; (800366c <HAL_RCC_OscConfig+0x240>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d1f0      	bne.n	8003514 <HAL_RCC_OscConfig+0xe8>
 8003532:	e000      	b.n	8003536 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003534:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0302 	and.w	r3, r3, #2
 800353e:	2b00      	cmp	r3, #0
 8003540:	d063      	beq.n	800360a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003542:	4b4a      	ldr	r3, [pc, #296]	; (800366c <HAL_RCC_OscConfig+0x240>)
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f003 030c 	and.w	r3, r3, #12
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00b      	beq.n	8003566 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800354e:	4b47      	ldr	r3, [pc, #284]	; (800366c <HAL_RCC_OscConfig+0x240>)
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003556:	2b08      	cmp	r3, #8
 8003558:	d11c      	bne.n	8003594 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800355a:	4b44      	ldr	r3, [pc, #272]	; (800366c <HAL_RCC_OscConfig+0x240>)
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d116      	bne.n	8003594 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003566:	4b41      	ldr	r3, [pc, #260]	; (800366c <HAL_RCC_OscConfig+0x240>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	2b00      	cmp	r3, #0
 8003570:	d005      	beq.n	800357e <HAL_RCC_OscConfig+0x152>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	2b01      	cmp	r3, #1
 8003578:	d001      	beq.n	800357e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e1c7      	b.n	800390e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800357e:	4b3b      	ldr	r3, [pc, #236]	; (800366c <HAL_RCC_OscConfig+0x240>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	00db      	lsls	r3, r3, #3
 800358c:	4937      	ldr	r1, [pc, #220]	; (800366c <HAL_RCC_OscConfig+0x240>)
 800358e:	4313      	orrs	r3, r2
 8003590:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003592:	e03a      	b.n	800360a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d020      	beq.n	80035de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800359c:	4b34      	ldr	r3, [pc, #208]	; (8003670 <HAL_RCC_OscConfig+0x244>)
 800359e:	2201      	movs	r2, #1
 80035a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a2:	f7fe fcbf 	bl	8001f24 <HAL_GetTick>
 80035a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035a8:	e008      	b.n	80035bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035aa:	f7fe fcbb 	bl	8001f24 <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d901      	bls.n	80035bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	e1a8      	b.n	800390e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035bc:	4b2b      	ldr	r3, [pc, #172]	; (800366c <HAL_RCC_OscConfig+0x240>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0302 	and.w	r3, r3, #2
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d0f0      	beq.n	80035aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035c8:	4b28      	ldr	r3, [pc, #160]	; (800366c <HAL_RCC_OscConfig+0x240>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	691b      	ldr	r3, [r3, #16]
 80035d4:	00db      	lsls	r3, r3, #3
 80035d6:	4925      	ldr	r1, [pc, #148]	; (800366c <HAL_RCC_OscConfig+0x240>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	600b      	str	r3, [r1, #0]
 80035dc:	e015      	b.n	800360a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035de:	4b24      	ldr	r3, [pc, #144]	; (8003670 <HAL_RCC_OscConfig+0x244>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e4:	f7fe fc9e 	bl	8001f24 <HAL_GetTick>
 80035e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035ea:	e008      	b.n	80035fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035ec:	f7fe fc9a 	bl	8001f24 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e187      	b.n	800390e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035fe:	4b1b      	ldr	r3, [pc, #108]	; (800366c <HAL_RCC_OscConfig+0x240>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1f0      	bne.n	80035ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0308 	and.w	r3, r3, #8
 8003612:	2b00      	cmp	r3, #0
 8003614:	d036      	beq.n	8003684 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d016      	beq.n	800364c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800361e:	4b15      	ldr	r3, [pc, #84]	; (8003674 <HAL_RCC_OscConfig+0x248>)
 8003620:	2201      	movs	r2, #1
 8003622:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003624:	f7fe fc7e 	bl	8001f24 <HAL_GetTick>
 8003628:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800362a:	e008      	b.n	800363e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800362c:	f7fe fc7a 	bl	8001f24 <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	2b02      	cmp	r3, #2
 8003638:	d901      	bls.n	800363e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e167      	b.n	800390e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800363e:	4b0b      	ldr	r3, [pc, #44]	; (800366c <HAL_RCC_OscConfig+0x240>)
 8003640:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	2b00      	cmp	r3, #0
 8003648:	d0f0      	beq.n	800362c <HAL_RCC_OscConfig+0x200>
 800364a:	e01b      	b.n	8003684 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800364c:	4b09      	ldr	r3, [pc, #36]	; (8003674 <HAL_RCC_OscConfig+0x248>)
 800364e:	2200      	movs	r2, #0
 8003650:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003652:	f7fe fc67 	bl	8001f24 <HAL_GetTick>
 8003656:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003658:	e00e      	b.n	8003678 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800365a:	f7fe fc63 	bl	8001f24 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	2b02      	cmp	r3, #2
 8003666:	d907      	bls.n	8003678 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e150      	b.n	800390e <HAL_RCC_OscConfig+0x4e2>
 800366c:	40023800 	.word	0x40023800
 8003670:	42470000 	.word	0x42470000
 8003674:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003678:	4b88      	ldr	r3, [pc, #544]	; (800389c <HAL_RCC_OscConfig+0x470>)
 800367a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800367c:	f003 0302 	and.w	r3, r3, #2
 8003680:	2b00      	cmp	r3, #0
 8003682:	d1ea      	bne.n	800365a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0304 	and.w	r3, r3, #4
 800368c:	2b00      	cmp	r3, #0
 800368e:	f000 8097 	beq.w	80037c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003692:	2300      	movs	r3, #0
 8003694:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003696:	4b81      	ldr	r3, [pc, #516]	; (800389c <HAL_RCC_OscConfig+0x470>)
 8003698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d10f      	bne.n	80036c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036a2:	2300      	movs	r3, #0
 80036a4:	60bb      	str	r3, [r7, #8]
 80036a6:	4b7d      	ldr	r3, [pc, #500]	; (800389c <HAL_RCC_OscConfig+0x470>)
 80036a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036aa:	4a7c      	ldr	r2, [pc, #496]	; (800389c <HAL_RCC_OscConfig+0x470>)
 80036ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036b0:	6413      	str	r3, [r2, #64]	; 0x40
 80036b2:	4b7a      	ldr	r3, [pc, #488]	; (800389c <HAL_RCC_OscConfig+0x470>)
 80036b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ba:	60bb      	str	r3, [r7, #8]
 80036bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036be:	2301      	movs	r3, #1
 80036c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036c2:	4b77      	ldr	r3, [pc, #476]	; (80038a0 <HAL_RCC_OscConfig+0x474>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d118      	bne.n	8003700 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036ce:	4b74      	ldr	r3, [pc, #464]	; (80038a0 <HAL_RCC_OscConfig+0x474>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a73      	ldr	r2, [pc, #460]	; (80038a0 <HAL_RCC_OscConfig+0x474>)
 80036d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036da:	f7fe fc23 	bl	8001f24 <HAL_GetTick>
 80036de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036e0:	e008      	b.n	80036f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036e2:	f7fe fc1f 	bl	8001f24 <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d901      	bls.n	80036f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	e10c      	b.n	800390e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036f4:	4b6a      	ldr	r3, [pc, #424]	; (80038a0 <HAL_RCC_OscConfig+0x474>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d0f0      	beq.n	80036e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	2b01      	cmp	r3, #1
 8003706:	d106      	bne.n	8003716 <HAL_RCC_OscConfig+0x2ea>
 8003708:	4b64      	ldr	r3, [pc, #400]	; (800389c <HAL_RCC_OscConfig+0x470>)
 800370a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800370c:	4a63      	ldr	r2, [pc, #396]	; (800389c <HAL_RCC_OscConfig+0x470>)
 800370e:	f043 0301 	orr.w	r3, r3, #1
 8003712:	6713      	str	r3, [r2, #112]	; 0x70
 8003714:	e01c      	b.n	8003750 <HAL_RCC_OscConfig+0x324>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	2b05      	cmp	r3, #5
 800371c:	d10c      	bne.n	8003738 <HAL_RCC_OscConfig+0x30c>
 800371e:	4b5f      	ldr	r3, [pc, #380]	; (800389c <HAL_RCC_OscConfig+0x470>)
 8003720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003722:	4a5e      	ldr	r2, [pc, #376]	; (800389c <HAL_RCC_OscConfig+0x470>)
 8003724:	f043 0304 	orr.w	r3, r3, #4
 8003728:	6713      	str	r3, [r2, #112]	; 0x70
 800372a:	4b5c      	ldr	r3, [pc, #368]	; (800389c <HAL_RCC_OscConfig+0x470>)
 800372c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800372e:	4a5b      	ldr	r2, [pc, #364]	; (800389c <HAL_RCC_OscConfig+0x470>)
 8003730:	f043 0301 	orr.w	r3, r3, #1
 8003734:	6713      	str	r3, [r2, #112]	; 0x70
 8003736:	e00b      	b.n	8003750 <HAL_RCC_OscConfig+0x324>
 8003738:	4b58      	ldr	r3, [pc, #352]	; (800389c <HAL_RCC_OscConfig+0x470>)
 800373a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800373c:	4a57      	ldr	r2, [pc, #348]	; (800389c <HAL_RCC_OscConfig+0x470>)
 800373e:	f023 0301 	bic.w	r3, r3, #1
 8003742:	6713      	str	r3, [r2, #112]	; 0x70
 8003744:	4b55      	ldr	r3, [pc, #340]	; (800389c <HAL_RCC_OscConfig+0x470>)
 8003746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003748:	4a54      	ldr	r2, [pc, #336]	; (800389c <HAL_RCC_OscConfig+0x470>)
 800374a:	f023 0304 	bic.w	r3, r3, #4
 800374e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d015      	beq.n	8003784 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003758:	f7fe fbe4 	bl	8001f24 <HAL_GetTick>
 800375c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800375e:	e00a      	b.n	8003776 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003760:	f7fe fbe0 	bl	8001f24 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	f241 3288 	movw	r2, #5000	; 0x1388
 800376e:	4293      	cmp	r3, r2
 8003770:	d901      	bls.n	8003776 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e0cb      	b.n	800390e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003776:	4b49      	ldr	r3, [pc, #292]	; (800389c <HAL_RCC_OscConfig+0x470>)
 8003778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	2b00      	cmp	r3, #0
 8003780:	d0ee      	beq.n	8003760 <HAL_RCC_OscConfig+0x334>
 8003782:	e014      	b.n	80037ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003784:	f7fe fbce 	bl	8001f24 <HAL_GetTick>
 8003788:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800378a:	e00a      	b.n	80037a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800378c:	f7fe fbca 	bl	8001f24 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	f241 3288 	movw	r2, #5000	; 0x1388
 800379a:	4293      	cmp	r3, r2
 800379c:	d901      	bls.n	80037a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e0b5      	b.n	800390e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037a2:	4b3e      	ldr	r3, [pc, #248]	; (800389c <HAL_RCC_OscConfig+0x470>)
 80037a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1ee      	bne.n	800378c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037ae:	7dfb      	ldrb	r3, [r7, #23]
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d105      	bne.n	80037c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037b4:	4b39      	ldr	r3, [pc, #228]	; (800389c <HAL_RCC_OscConfig+0x470>)
 80037b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b8:	4a38      	ldr	r2, [pc, #224]	; (800389c <HAL_RCC_OscConfig+0x470>)
 80037ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	699b      	ldr	r3, [r3, #24]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	f000 80a1 	beq.w	800390c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037ca:	4b34      	ldr	r3, [pc, #208]	; (800389c <HAL_RCC_OscConfig+0x470>)
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f003 030c 	and.w	r3, r3, #12
 80037d2:	2b08      	cmp	r3, #8
 80037d4:	d05c      	beq.n	8003890 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	699b      	ldr	r3, [r3, #24]
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d141      	bne.n	8003862 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037de:	4b31      	ldr	r3, [pc, #196]	; (80038a4 <HAL_RCC_OscConfig+0x478>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e4:	f7fe fb9e 	bl	8001f24 <HAL_GetTick>
 80037e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ea:	e008      	b.n	80037fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037ec:	f7fe fb9a 	bl	8001f24 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e087      	b.n	800390e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037fe:	4b27      	ldr	r3, [pc, #156]	; (800389c <HAL_RCC_OscConfig+0x470>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d1f0      	bne.n	80037ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	69da      	ldr	r2, [r3, #28]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a1b      	ldr	r3, [r3, #32]
 8003812:	431a      	orrs	r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003818:	019b      	lsls	r3, r3, #6
 800381a:	431a      	orrs	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003820:	085b      	lsrs	r3, r3, #1
 8003822:	3b01      	subs	r3, #1
 8003824:	041b      	lsls	r3, r3, #16
 8003826:	431a      	orrs	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382c:	061b      	lsls	r3, r3, #24
 800382e:	491b      	ldr	r1, [pc, #108]	; (800389c <HAL_RCC_OscConfig+0x470>)
 8003830:	4313      	orrs	r3, r2
 8003832:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003834:	4b1b      	ldr	r3, [pc, #108]	; (80038a4 <HAL_RCC_OscConfig+0x478>)
 8003836:	2201      	movs	r2, #1
 8003838:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800383a:	f7fe fb73 	bl	8001f24 <HAL_GetTick>
 800383e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003840:	e008      	b.n	8003854 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003842:	f7fe fb6f 	bl	8001f24 <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	2b02      	cmp	r3, #2
 800384e:	d901      	bls.n	8003854 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e05c      	b.n	800390e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003854:	4b11      	ldr	r3, [pc, #68]	; (800389c <HAL_RCC_OscConfig+0x470>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d0f0      	beq.n	8003842 <HAL_RCC_OscConfig+0x416>
 8003860:	e054      	b.n	800390c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003862:	4b10      	ldr	r3, [pc, #64]	; (80038a4 <HAL_RCC_OscConfig+0x478>)
 8003864:	2200      	movs	r2, #0
 8003866:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003868:	f7fe fb5c 	bl	8001f24 <HAL_GetTick>
 800386c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800386e:	e008      	b.n	8003882 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003870:	f7fe fb58 	bl	8001f24 <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	2b02      	cmp	r3, #2
 800387c:	d901      	bls.n	8003882 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e045      	b.n	800390e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003882:	4b06      	ldr	r3, [pc, #24]	; (800389c <HAL_RCC_OscConfig+0x470>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d1f0      	bne.n	8003870 <HAL_RCC_OscConfig+0x444>
 800388e:	e03d      	b.n	800390c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	699b      	ldr	r3, [r3, #24]
 8003894:	2b01      	cmp	r3, #1
 8003896:	d107      	bne.n	80038a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e038      	b.n	800390e <HAL_RCC_OscConfig+0x4e2>
 800389c:	40023800 	.word	0x40023800
 80038a0:	40007000 	.word	0x40007000
 80038a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80038a8:	4b1b      	ldr	r3, [pc, #108]	; (8003918 <HAL_RCC_OscConfig+0x4ec>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d028      	beq.n	8003908 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d121      	bne.n	8003908 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d11a      	bne.n	8003908 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80038d8:	4013      	ands	r3, r2
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80038de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d111      	bne.n	8003908 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ee:	085b      	lsrs	r3, r3, #1
 80038f0:	3b01      	subs	r3, #1
 80038f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d107      	bne.n	8003908 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003902:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003904:	429a      	cmp	r2, r3
 8003906:	d001      	beq.n	800390c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e000      	b.n	800390e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	3718      	adds	r7, #24
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	40023800 	.word	0x40023800

0800391c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d101      	bne.n	8003930 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e0cc      	b.n	8003aca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003930:	4b68      	ldr	r3, [pc, #416]	; (8003ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0307 	and.w	r3, r3, #7
 8003938:	683a      	ldr	r2, [r7, #0]
 800393a:	429a      	cmp	r2, r3
 800393c:	d90c      	bls.n	8003958 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800393e:	4b65      	ldr	r3, [pc, #404]	; (8003ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8003940:	683a      	ldr	r2, [r7, #0]
 8003942:	b2d2      	uxtb	r2, r2
 8003944:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003946:	4b63      	ldr	r3, [pc, #396]	; (8003ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0307 	and.w	r3, r3, #7
 800394e:	683a      	ldr	r2, [r7, #0]
 8003950:	429a      	cmp	r2, r3
 8003952:	d001      	beq.n	8003958 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e0b8      	b.n	8003aca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0302 	and.w	r3, r3, #2
 8003960:	2b00      	cmp	r3, #0
 8003962:	d020      	beq.n	80039a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0304 	and.w	r3, r3, #4
 800396c:	2b00      	cmp	r3, #0
 800396e:	d005      	beq.n	800397c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003970:	4b59      	ldr	r3, [pc, #356]	; (8003ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	4a58      	ldr	r2, [pc, #352]	; (8003ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8003976:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800397a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0308 	and.w	r3, r3, #8
 8003984:	2b00      	cmp	r3, #0
 8003986:	d005      	beq.n	8003994 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003988:	4b53      	ldr	r3, [pc, #332]	; (8003ad8 <HAL_RCC_ClockConfig+0x1bc>)
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	4a52      	ldr	r2, [pc, #328]	; (8003ad8 <HAL_RCC_ClockConfig+0x1bc>)
 800398e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003992:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003994:	4b50      	ldr	r3, [pc, #320]	; (8003ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	494d      	ldr	r1, [pc, #308]	; (8003ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d044      	beq.n	8003a3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d107      	bne.n	80039ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ba:	4b47      	ldr	r3, [pc, #284]	; (8003ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d119      	bne.n	80039fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e07f      	b.n	8003aca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d003      	beq.n	80039da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039d6:	2b03      	cmp	r3, #3
 80039d8:	d107      	bne.n	80039ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039da:	4b3f      	ldr	r3, [pc, #252]	; (8003ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d109      	bne.n	80039fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e06f      	b.n	8003aca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039ea:	4b3b      	ldr	r3, [pc, #236]	; (8003ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0302 	and.w	r3, r3, #2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d101      	bne.n	80039fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e067      	b.n	8003aca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039fa:	4b37      	ldr	r3, [pc, #220]	; (8003ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	f023 0203 	bic.w	r2, r3, #3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	4934      	ldr	r1, [pc, #208]	; (8003ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a0c:	f7fe fa8a 	bl	8001f24 <HAL_GetTick>
 8003a10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a12:	e00a      	b.n	8003a2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a14:	f7fe fa86 	bl	8001f24 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d901      	bls.n	8003a2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e04f      	b.n	8003aca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a2a:	4b2b      	ldr	r3, [pc, #172]	; (8003ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f003 020c 	and.w	r2, r3, #12
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d1eb      	bne.n	8003a14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a3c:	4b25      	ldr	r3, [pc, #148]	; (8003ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0307 	and.w	r3, r3, #7
 8003a44:	683a      	ldr	r2, [r7, #0]
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d20c      	bcs.n	8003a64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a4a:	4b22      	ldr	r3, [pc, #136]	; (8003ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a4c:	683a      	ldr	r2, [r7, #0]
 8003a4e:	b2d2      	uxtb	r2, r2
 8003a50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a52:	4b20      	ldr	r3, [pc, #128]	; (8003ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0307 	and.w	r3, r3, #7
 8003a5a:	683a      	ldr	r2, [r7, #0]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d001      	beq.n	8003a64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e032      	b.n	8003aca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0304 	and.w	r3, r3, #4
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d008      	beq.n	8003a82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a70:	4b19      	ldr	r3, [pc, #100]	; (8003ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	4916      	ldr	r1, [pc, #88]	; (8003ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0308 	and.w	r3, r3, #8
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d009      	beq.n	8003aa2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a8e:	4b12      	ldr	r3, [pc, #72]	; (8003ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	00db      	lsls	r3, r3, #3
 8003a9c:	490e      	ldr	r1, [pc, #56]	; (8003ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003aa2:	f000 f821 	bl	8003ae8 <HAL_RCC_GetSysClockFreq>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	4b0b      	ldr	r3, [pc, #44]	; (8003ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	091b      	lsrs	r3, r3, #4
 8003aae:	f003 030f 	and.w	r3, r3, #15
 8003ab2:	490a      	ldr	r1, [pc, #40]	; (8003adc <HAL_RCC_ClockConfig+0x1c0>)
 8003ab4:	5ccb      	ldrb	r3, [r1, r3]
 8003ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8003aba:	4a09      	ldr	r2, [pc, #36]	; (8003ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8003abc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003abe:	4b09      	ldr	r3, [pc, #36]	; (8003ae4 <HAL_RCC_ClockConfig+0x1c8>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f7fd fb20 	bl	8001108 <HAL_InitTick>

  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3710      	adds	r7, #16
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	40023c00 	.word	0x40023c00
 8003ad8:	40023800 	.word	0x40023800
 8003adc:	080081fc 	.word	0x080081fc
 8003ae0:	20000000 	.word	0x20000000
 8003ae4:	20000004 	.word	0x20000004

08003ae8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ae8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003aec:	b094      	sub	sp, #80	; 0x50
 8003aee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003af0:	2300      	movs	r3, #0
 8003af2:	647b      	str	r3, [r7, #68]	; 0x44
 8003af4:	2300      	movs	r3, #0
 8003af6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003af8:	2300      	movs	r3, #0
 8003afa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003afc:	2300      	movs	r3, #0
 8003afe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b00:	4b79      	ldr	r3, [pc, #484]	; (8003ce8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	f003 030c 	and.w	r3, r3, #12
 8003b08:	2b08      	cmp	r3, #8
 8003b0a:	d00d      	beq.n	8003b28 <HAL_RCC_GetSysClockFreq+0x40>
 8003b0c:	2b08      	cmp	r3, #8
 8003b0e:	f200 80e1 	bhi.w	8003cd4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d002      	beq.n	8003b1c <HAL_RCC_GetSysClockFreq+0x34>
 8003b16:	2b04      	cmp	r3, #4
 8003b18:	d003      	beq.n	8003b22 <HAL_RCC_GetSysClockFreq+0x3a>
 8003b1a:	e0db      	b.n	8003cd4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b1c:	4b73      	ldr	r3, [pc, #460]	; (8003cec <HAL_RCC_GetSysClockFreq+0x204>)
 8003b1e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003b20:	e0db      	b.n	8003cda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b22:	4b73      	ldr	r3, [pc, #460]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003b24:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b26:	e0d8      	b.n	8003cda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b28:	4b6f      	ldr	r3, [pc, #444]	; (8003ce8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b30:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b32:	4b6d      	ldr	r3, [pc, #436]	; (8003ce8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d063      	beq.n	8003c06 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b3e:	4b6a      	ldr	r3, [pc, #424]	; (8003ce8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	099b      	lsrs	r3, r3, #6
 8003b44:	2200      	movs	r2, #0
 8003b46:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b48:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b50:	633b      	str	r3, [r7, #48]	; 0x30
 8003b52:	2300      	movs	r3, #0
 8003b54:	637b      	str	r3, [r7, #52]	; 0x34
 8003b56:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003b5a:	4622      	mov	r2, r4
 8003b5c:	462b      	mov	r3, r5
 8003b5e:	f04f 0000 	mov.w	r0, #0
 8003b62:	f04f 0100 	mov.w	r1, #0
 8003b66:	0159      	lsls	r1, r3, #5
 8003b68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b6c:	0150      	lsls	r0, r2, #5
 8003b6e:	4602      	mov	r2, r0
 8003b70:	460b      	mov	r3, r1
 8003b72:	4621      	mov	r1, r4
 8003b74:	1a51      	subs	r1, r2, r1
 8003b76:	6139      	str	r1, [r7, #16]
 8003b78:	4629      	mov	r1, r5
 8003b7a:	eb63 0301 	sbc.w	r3, r3, r1
 8003b7e:	617b      	str	r3, [r7, #20]
 8003b80:	f04f 0200 	mov.w	r2, #0
 8003b84:	f04f 0300 	mov.w	r3, #0
 8003b88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b8c:	4659      	mov	r1, fp
 8003b8e:	018b      	lsls	r3, r1, #6
 8003b90:	4651      	mov	r1, sl
 8003b92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b96:	4651      	mov	r1, sl
 8003b98:	018a      	lsls	r2, r1, #6
 8003b9a:	4651      	mov	r1, sl
 8003b9c:	ebb2 0801 	subs.w	r8, r2, r1
 8003ba0:	4659      	mov	r1, fp
 8003ba2:	eb63 0901 	sbc.w	r9, r3, r1
 8003ba6:	f04f 0200 	mov.w	r2, #0
 8003baa:	f04f 0300 	mov.w	r3, #0
 8003bae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003bb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003bba:	4690      	mov	r8, r2
 8003bbc:	4699      	mov	r9, r3
 8003bbe:	4623      	mov	r3, r4
 8003bc0:	eb18 0303 	adds.w	r3, r8, r3
 8003bc4:	60bb      	str	r3, [r7, #8]
 8003bc6:	462b      	mov	r3, r5
 8003bc8:	eb49 0303 	adc.w	r3, r9, r3
 8003bcc:	60fb      	str	r3, [r7, #12]
 8003bce:	f04f 0200 	mov.w	r2, #0
 8003bd2:	f04f 0300 	mov.w	r3, #0
 8003bd6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003bda:	4629      	mov	r1, r5
 8003bdc:	024b      	lsls	r3, r1, #9
 8003bde:	4621      	mov	r1, r4
 8003be0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003be4:	4621      	mov	r1, r4
 8003be6:	024a      	lsls	r2, r1, #9
 8003be8:	4610      	mov	r0, r2
 8003bea:	4619      	mov	r1, r3
 8003bec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bee:	2200      	movs	r2, #0
 8003bf0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bf2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003bf4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003bf8:	f7fc faf2 	bl	80001e0 <__aeabi_uldivmod>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	460b      	mov	r3, r1
 8003c00:	4613      	mov	r3, r2
 8003c02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c04:	e058      	b.n	8003cb8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c06:	4b38      	ldr	r3, [pc, #224]	; (8003ce8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	099b      	lsrs	r3, r3, #6
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	4618      	mov	r0, r3
 8003c10:	4611      	mov	r1, r2
 8003c12:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c16:	623b      	str	r3, [r7, #32]
 8003c18:	2300      	movs	r3, #0
 8003c1a:	627b      	str	r3, [r7, #36]	; 0x24
 8003c1c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003c20:	4642      	mov	r2, r8
 8003c22:	464b      	mov	r3, r9
 8003c24:	f04f 0000 	mov.w	r0, #0
 8003c28:	f04f 0100 	mov.w	r1, #0
 8003c2c:	0159      	lsls	r1, r3, #5
 8003c2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c32:	0150      	lsls	r0, r2, #5
 8003c34:	4602      	mov	r2, r0
 8003c36:	460b      	mov	r3, r1
 8003c38:	4641      	mov	r1, r8
 8003c3a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003c3e:	4649      	mov	r1, r9
 8003c40:	eb63 0b01 	sbc.w	fp, r3, r1
 8003c44:	f04f 0200 	mov.w	r2, #0
 8003c48:	f04f 0300 	mov.w	r3, #0
 8003c4c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003c50:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003c54:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003c58:	ebb2 040a 	subs.w	r4, r2, sl
 8003c5c:	eb63 050b 	sbc.w	r5, r3, fp
 8003c60:	f04f 0200 	mov.w	r2, #0
 8003c64:	f04f 0300 	mov.w	r3, #0
 8003c68:	00eb      	lsls	r3, r5, #3
 8003c6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c6e:	00e2      	lsls	r2, r4, #3
 8003c70:	4614      	mov	r4, r2
 8003c72:	461d      	mov	r5, r3
 8003c74:	4643      	mov	r3, r8
 8003c76:	18e3      	adds	r3, r4, r3
 8003c78:	603b      	str	r3, [r7, #0]
 8003c7a:	464b      	mov	r3, r9
 8003c7c:	eb45 0303 	adc.w	r3, r5, r3
 8003c80:	607b      	str	r3, [r7, #4]
 8003c82:	f04f 0200 	mov.w	r2, #0
 8003c86:	f04f 0300 	mov.w	r3, #0
 8003c8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c8e:	4629      	mov	r1, r5
 8003c90:	028b      	lsls	r3, r1, #10
 8003c92:	4621      	mov	r1, r4
 8003c94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c98:	4621      	mov	r1, r4
 8003c9a:	028a      	lsls	r2, r1, #10
 8003c9c:	4610      	mov	r0, r2
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	61bb      	str	r3, [r7, #24]
 8003ca6:	61fa      	str	r2, [r7, #28]
 8003ca8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cac:	f7fc fa98 	bl	80001e0 <__aeabi_uldivmod>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	460b      	mov	r3, r1
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003cb8:	4b0b      	ldr	r3, [pc, #44]	; (8003ce8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	0c1b      	lsrs	r3, r3, #16
 8003cbe:	f003 0303 	and.w	r3, r3, #3
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	005b      	lsls	r3, r3, #1
 8003cc6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003cc8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003cca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cd0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003cd2:	e002      	b.n	8003cda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003cd4:	4b05      	ldr	r3, [pc, #20]	; (8003cec <HAL_RCC_GetSysClockFreq+0x204>)
 8003cd6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003cd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3750      	adds	r7, #80	; 0x50
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ce6:	bf00      	nop
 8003ce8:	40023800 	.word	0x40023800
 8003cec:	00f42400 	.word	0x00f42400
 8003cf0:	007a1200 	.word	0x007a1200

08003cf4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cf8:	4b03      	ldr	r3, [pc, #12]	; (8003d08 <HAL_RCC_GetHCLKFreq+0x14>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop
 8003d08:	20000000 	.word	0x20000000

08003d0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d10:	f7ff fff0 	bl	8003cf4 <HAL_RCC_GetHCLKFreq>
 8003d14:	4602      	mov	r2, r0
 8003d16:	4b05      	ldr	r3, [pc, #20]	; (8003d2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	0a9b      	lsrs	r3, r3, #10
 8003d1c:	f003 0307 	and.w	r3, r3, #7
 8003d20:	4903      	ldr	r1, [pc, #12]	; (8003d30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d22:	5ccb      	ldrb	r3, [r1, r3]
 8003d24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	40023800 	.word	0x40023800
 8003d30:	0800820c 	.word	0x0800820c

08003d34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d38:	f7ff ffdc 	bl	8003cf4 <HAL_RCC_GetHCLKFreq>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	4b05      	ldr	r3, [pc, #20]	; (8003d54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	0b5b      	lsrs	r3, r3, #13
 8003d44:	f003 0307 	and.w	r3, r3, #7
 8003d48:	4903      	ldr	r1, [pc, #12]	; (8003d58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d4a:	5ccb      	ldrb	r3, [r1, r3]
 8003d4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	40023800 	.word	0x40023800
 8003d58:	0800820c 	.word	0x0800820c

08003d5c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	220f      	movs	r2, #15
 8003d6a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003d6c:	4b12      	ldr	r3, [pc, #72]	; (8003db8 <HAL_RCC_GetClockConfig+0x5c>)
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f003 0203 	and.w	r2, r3, #3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003d78:	4b0f      	ldr	r3, [pc, #60]	; (8003db8 <HAL_RCC_GetClockConfig+0x5c>)
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003d84:	4b0c      	ldr	r3, [pc, #48]	; (8003db8 <HAL_RCC_GetClockConfig+0x5c>)
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003d90:	4b09      	ldr	r3, [pc, #36]	; (8003db8 <HAL_RCC_GetClockConfig+0x5c>)
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	08db      	lsrs	r3, r3, #3
 8003d96:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003d9e:	4b07      	ldr	r3, [pc, #28]	; (8003dbc <HAL_RCC_GetClockConfig+0x60>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0207 	and.w	r2, r3, #7
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	601a      	str	r2, [r3, #0]
}
 8003daa:	bf00      	nop
 8003dac:	370c      	adds	r7, #12
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop
 8003db8:	40023800 	.word	0x40023800
 8003dbc:	40023c00 	.word	0x40023c00

08003dc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d101      	bne.n	8003dd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e041      	b.n	8003e56 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d106      	bne.n	8003dec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f7fd fc1a 	bl	8001620 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2202      	movs	r2, #2
 8003df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	3304      	adds	r3, #4
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	4610      	mov	r0, r2
 8003e00:	f000 fe9e 	bl	8004b40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3708      	adds	r7, #8
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
	...

08003e60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b085      	sub	sp, #20
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d001      	beq.n	8003e78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e044      	b.n	8003f02 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2202      	movs	r2, #2
 8003e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68da      	ldr	r2, [r3, #12]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f042 0201 	orr.w	r2, r2, #1
 8003e8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a1e      	ldr	r2, [pc, #120]	; (8003f10 <HAL_TIM_Base_Start_IT+0xb0>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d018      	beq.n	8003ecc <HAL_TIM_Base_Start_IT+0x6c>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ea2:	d013      	beq.n	8003ecc <HAL_TIM_Base_Start_IT+0x6c>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a1a      	ldr	r2, [pc, #104]	; (8003f14 <HAL_TIM_Base_Start_IT+0xb4>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d00e      	beq.n	8003ecc <HAL_TIM_Base_Start_IT+0x6c>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a19      	ldr	r2, [pc, #100]	; (8003f18 <HAL_TIM_Base_Start_IT+0xb8>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d009      	beq.n	8003ecc <HAL_TIM_Base_Start_IT+0x6c>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a17      	ldr	r2, [pc, #92]	; (8003f1c <HAL_TIM_Base_Start_IT+0xbc>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d004      	beq.n	8003ecc <HAL_TIM_Base_Start_IT+0x6c>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a16      	ldr	r2, [pc, #88]	; (8003f20 <HAL_TIM_Base_Start_IT+0xc0>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d111      	bne.n	8003ef0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	f003 0307 	and.w	r3, r3, #7
 8003ed6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2b06      	cmp	r3, #6
 8003edc:	d010      	beq.n	8003f00 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f042 0201 	orr.w	r2, r2, #1
 8003eec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eee:	e007      	b.n	8003f00 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f042 0201 	orr.w	r2, r2, #1
 8003efe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3714      	adds	r7, #20
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	40010000 	.word	0x40010000
 8003f14:	40000400 	.word	0x40000400
 8003f18:	40000800 	.word	0x40000800
 8003f1c:	40000c00 	.word	0x40000c00
 8003f20:	40014000 	.word	0x40014000

08003f24 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d101      	bne.n	8003f36 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e041      	b.n	8003fba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d106      	bne.n	8003f50 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f000 f839 	bl	8003fc2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2202      	movs	r2, #2
 8003f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	3304      	adds	r3, #4
 8003f60:	4619      	mov	r1, r3
 8003f62:	4610      	mov	r0, r2
 8003f64:	f000 fdec 	bl	8004b40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3708      	adds	r7, #8
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}

08003fc2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003fc2:	b480      	push	{r7}
 8003fc4:	b083      	sub	sp, #12
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003fca:	bf00      	nop
 8003fcc:	370c      	adds	r7, #12
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
	...

08003fd8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d109      	bne.n	8003ffc <HAL_TIM_PWM_Start+0x24>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	bf14      	ite	ne
 8003ff4:	2301      	movne	r3, #1
 8003ff6:	2300      	moveq	r3, #0
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	e022      	b.n	8004042 <HAL_TIM_PWM_Start+0x6a>
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	2b04      	cmp	r3, #4
 8004000:	d109      	bne.n	8004016 <HAL_TIM_PWM_Start+0x3e>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004008:	b2db      	uxtb	r3, r3
 800400a:	2b01      	cmp	r3, #1
 800400c:	bf14      	ite	ne
 800400e:	2301      	movne	r3, #1
 8004010:	2300      	moveq	r3, #0
 8004012:	b2db      	uxtb	r3, r3
 8004014:	e015      	b.n	8004042 <HAL_TIM_PWM_Start+0x6a>
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	2b08      	cmp	r3, #8
 800401a:	d109      	bne.n	8004030 <HAL_TIM_PWM_Start+0x58>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004022:	b2db      	uxtb	r3, r3
 8004024:	2b01      	cmp	r3, #1
 8004026:	bf14      	ite	ne
 8004028:	2301      	movne	r3, #1
 800402a:	2300      	moveq	r3, #0
 800402c:	b2db      	uxtb	r3, r3
 800402e:	e008      	b.n	8004042 <HAL_TIM_PWM_Start+0x6a>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004036:	b2db      	uxtb	r3, r3
 8004038:	2b01      	cmp	r3, #1
 800403a:	bf14      	ite	ne
 800403c:	2301      	movne	r3, #1
 800403e:	2300      	moveq	r3, #0
 8004040:	b2db      	uxtb	r3, r3
 8004042:	2b00      	cmp	r3, #0
 8004044:	d001      	beq.n	800404a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e068      	b.n	800411c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d104      	bne.n	800405a <HAL_TIM_PWM_Start+0x82>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2202      	movs	r2, #2
 8004054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004058:	e013      	b.n	8004082 <HAL_TIM_PWM_Start+0xaa>
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	2b04      	cmp	r3, #4
 800405e:	d104      	bne.n	800406a <HAL_TIM_PWM_Start+0x92>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2202      	movs	r2, #2
 8004064:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004068:	e00b      	b.n	8004082 <HAL_TIM_PWM_Start+0xaa>
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	2b08      	cmp	r3, #8
 800406e:	d104      	bne.n	800407a <HAL_TIM_PWM_Start+0xa2>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2202      	movs	r2, #2
 8004074:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004078:	e003      	b.n	8004082 <HAL_TIM_PWM_Start+0xaa>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2202      	movs	r2, #2
 800407e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2201      	movs	r2, #1
 8004088:	6839      	ldr	r1, [r7, #0]
 800408a:	4618      	mov	r0, r3
 800408c:	f001 f91c 	bl	80052c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a23      	ldr	r2, [pc, #140]	; (8004124 <HAL_TIM_PWM_Start+0x14c>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d107      	bne.n	80040aa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a1d      	ldr	r2, [pc, #116]	; (8004124 <HAL_TIM_PWM_Start+0x14c>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d018      	beq.n	80040e6 <HAL_TIM_PWM_Start+0x10e>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040bc:	d013      	beq.n	80040e6 <HAL_TIM_PWM_Start+0x10e>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a19      	ldr	r2, [pc, #100]	; (8004128 <HAL_TIM_PWM_Start+0x150>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d00e      	beq.n	80040e6 <HAL_TIM_PWM_Start+0x10e>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a17      	ldr	r2, [pc, #92]	; (800412c <HAL_TIM_PWM_Start+0x154>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d009      	beq.n	80040e6 <HAL_TIM_PWM_Start+0x10e>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a16      	ldr	r2, [pc, #88]	; (8004130 <HAL_TIM_PWM_Start+0x158>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d004      	beq.n	80040e6 <HAL_TIM_PWM_Start+0x10e>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a14      	ldr	r2, [pc, #80]	; (8004134 <HAL_TIM_PWM_Start+0x15c>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d111      	bne.n	800410a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	f003 0307 	and.w	r3, r3, #7
 80040f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2b06      	cmp	r3, #6
 80040f6:	d010      	beq.n	800411a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f042 0201 	orr.w	r2, r2, #1
 8004106:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004108:	e007      	b.n	800411a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f042 0201 	orr.w	r2, r2, #1
 8004118:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800411a:	2300      	movs	r3, #0
}
 800411c:	4618      	mov	r0, r3
 800411e:	3710      	adds	r7, #16
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}
 8004124:	40010000 	.word	0x40010000
 8004128:	40000400 	.word	0x40000400
 800412c:	40000800 	.word	0x40000800
 8004130:	40000c00 	.word	0x40000c00
 8004134:	40014000 	.word	0x40014000

08004138 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d101      	bne.n	800414a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e041      	b.n	80041ce <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004150:	b2db      	uxtb	r3, r3
 8004152:	2b00      	cmp	r3, #0
 8004154:	d106      	bne.n	8004164 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f000 f839 	bl	80041d6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2202      	movs	r2, #2
 8004168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	3304      	adds	r3, #4
 8004174:	4619      	mov	r1, r3
 8004176:	4610      	mov	r0, r2
 8004178:	f000 fce2 	bl	8004b40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3708      	adds	r7, #8
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}

080041d6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80041d6:	b480      	push	{r7}
 80041d8:	b083      	sub	sp, #12
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80041de:	bf00      	nop
 80041e0:	370c      	adds	r7, #12
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
	...

080041ec <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041f6:	2300      	movs	r3, #0
 80041f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d104      	bne.n	800420a <HAL_TIM_IC_Start_IT+0x1e>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004206:	b2db      	uxtb	r3, r3
 8004208:	e013      	b.n	8004232 <HAL_TIM_IC_Start_IT+0x46>
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	2b04      	cmp	r3, #4
 800420e:	d104      	bne.n	800421a <HAL_TIM_IC_Start_IT+0x2e>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004216:	b2db      	uxtb	r3, r3
 8004218:	e00b      	b.n	8004232 <HAL_TIM_IC_Start_IT+0x46>
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	2b08      	cmp	r3, #8
 800421e:	d104      	bne.n	800422a <HAL_TIM_IC_Start_IT+0x3e>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004226:	b2db      	uxtb	r3, r3
 8004228:	e003      	b.n	8004232 <HAL_TIM_IC_Start_IT+0x46>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004230:	b2db      	uxtb	r3, r3
 8004232:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d104      	bne.n	8004244 <HAL_TIM_IC_Start_IT+0x58>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004240:	b2db      	uxtb	r3, r3
 8004242:	e013      	b.n	800426c <HAL_TIM_IC_Start_IT+0x80>
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	2b04      	cmp	r3, #4
 8004248:	d104      	bne.n	8004254 <HAL_TIM_IC_Start_IT+0x68>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004250:	b2db      	uxtb	r3, r3
 8004252:	e00b      	b.n	800426c <HAL_TIM_IC_Start_IT+0x80>
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	2b08      	cmp	r3, #8
 8004258:	d104      	bne.n	8004264 <HAL_TIM_IC_Start_IT+0x78>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004260:	b2db      	uxtb	r3, r3
 8004262:	e003      	b.n	800426c <HAL_TIM_IC_Start_IT+0x80>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800426a:	b2db      	uxtb	r3, r3
 800426c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800426e:	7bbb      	ldrb	r3, [r7, #14]
 8004270:	2b01      	cmp	r3, #1
 8004272:	d102      	bne.n	800427a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004274:	7b7b      	ldrb	r3, [r7, #13]
 8004276:	2b01      	cmp	r3, #1
 8004278:	d001      	beq.n	800427e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e0c2      	b.n	8004404 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d104      	bne.n	800428e <HAL_TIM_IC_Start_IT+0xa2>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2202      	movs	r2, #2
 8004288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800428c:	e013      	b.n	80042b6 <HAL_TIM_IC_Start_IT+0xca>
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	2b04      	cmp	r3, #4
 8004292:	d104      	bne.n	800429e <HAL_TIM_IC_Start_IT+0xb2>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2202      	movs	r2, #2
 8004298:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800429c:	e00b      	b.n	80042b6 <HAL_TIM_IC_Start_IT+0xca>
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	2b08      	cmp	r3, #8
 80042a2:	d104      	bne.n	80042ae <HAL_TIM_IC_Start_IT+0xc2>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2202      	movs	r2, #2
 80042a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042ac:	e003      	b.n	80042b6 <HAL_TIM_IC_Start_IT+0xca>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2202      	movs	r2, #2
 80042b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d104      	bne.n	80042c6 <HAL_TIM_IC_Start_IT+0xda>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2202      	movs	r2, #2
 80042c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042c4:	e013      	b.n	80042ee <HAL_TIM_IC_Start_IT+0x102>
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	2b04      	cmp	r3, #4
 80042ca:	d104      	bne.n	80042d6 <HAL_TIM_IC_Start_IT+0xea>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2202      	movs	r2, #2
 80042d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042d4:	e00b      	b.n	80042ee <HAL_TIM_IC_Start_IT+0x102>
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	2b08      	cmp	r3, #8
 80042da:	d104      	bne.n	80042e6 <HAL_TIM_IC_Start_IT+0xfa>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2202      	movs	r2, #2
 80042e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042e4:	e003      	b.n	80042ee <HAL_TIM_IC_Start_IT+0x102>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2202      	movs	r2, #2
 80042ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	2b0c      	cmp	r3, #12
 80042f2:	d841      	bhi.n	8004378 <HAL_TIM_IC_Start_IT+0x18c>
 80042f4:	a201      	add	r2, pc, #4	; (adr r2, 80042fc <HAL_TIM_IC_Start_IT+0x110>)
 80042f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042fa:	bf00      	nop
 80042fc:	08004331 	.word	0x08004331
 8004300:	08004379 	.word	0x08004379
 8004304:	08004379 	.word	0x08004379
 8004308:	08004379 	.word	0x08004379
 800430c:	08004343 	.word	0x08004343
 8004310:	08004379 	.word	0x08004379
 8004314:	08004379 	.word	0x08004379
 8004318:	08004379 	.word	0x08004379
 800431c:	08004355 	.word	0x08004355
 8004320:	08004379 	.word	0x08004379
 8004324:	08004379 	.word	0x08004379
 8004328:	08004379 	.word	0x08004379
 800432c:	08004367 	.word	0x08004367
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	68da      	ldr	r2, [r3, #12]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f042 0202 	orr.w	r2, r2, #2
 800433e:	60da      	str	r2, [r3, #12]
      break;
 8004340:	e01d      	b.n	800437e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	68da      	ldr	r2, [r3, #12]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f042 0204 	orr.w	r2, r2, #4
 8004350:	60da      	str	r2, [r3, #12]
      break;
 8004352:	e014      	b.n	800437e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	68da      	ldr	r2, [r3, #12]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f042 0208 	orr.w	r2, r2, #8
 8004362:	60da      	str	r2, [r3, #12]
      break;
 8004364:	e00b      	b.n	800437e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68da      	ldr	r2, [r3, #12]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f042 0210 	orr.w	r2, r2, #16
 8004374:	60da      	str	r2, [r3, #12]
      break;
 8004376:	e002      	b.n	800437e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	73fb      	strb	r3, [r7, #15]
      break;
 800437c:	bf00      	nop
  }

  if (status == HAL_OK)
 800437e:	7bfb      	ldrb	r3, [r7, #15]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d13e      	bne.n	8004402 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2201      	movs	r2, #1
 800438a:	6839      	ldr	r1, [r7, #0]
 800438c:	4618      	mov	r0, r3
 800438e:	f000 ff9b 	bl	80052c8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a1d      	ldr	r2, [pc, #116]	; (800440c <HAL_TIM_IC_Start_IT+0x220>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d018      	beq.n	80043ce <HAL_TIM_IC_Start_IT+0x1e2>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043a4:	d013      	beq.n	80043ce <HAL_TIM_IC_Start_IT+0x1e2>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a19      	ldr	r2, [pc, #100]	; (8004410 <HAL_TIM_IC_Start_IT+0x224>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d00e      	beq.n	80043ce <HAL_TIM_IC_Start_IT+0x1e2>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a17      	ldr	r2, [pc, #92]	; (8004414 <HAL_TIM_IC_Start_IT+0x228>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d009      	beq.n	80043ce <HAL_TIM_IC_Start_IT+0x1e2>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a16      	ldr	r2, [pc, #88]	; (8004418 <HAL_TIM_IC_Start_IT+0x22c>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d004      	beq.n	80043ce <HAL_TIM_IC_Start_IT+0x1e2>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a14      	ldr	r2, [pc, #80]	; (800441c <HAL_TIM_IC_Start_IT+0x230>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d111      	bne.n	80043f2 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	f003 0307 	and.w	r3, r3, #7
 80043d8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	2b06      	cmp	r3, #6
 80043de:	d010      	beq.n	8004402 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f042 0201 	orr.w	r2, r2, #1
 80043ee:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043f0:	e007      	b.n	8004402 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f042 0201 	orr.w	r2, r2, #1
 8004400:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004402:	7bfb      	ldrb	r3, [r7, #15]
}
 8004404:	4618      	mov	r0, r3
 8004406:	3710      	adds	r7, #16
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}
 800440c:	40010000 	.word	0x40010000
 8004410:	40000400 	.word	0x40000400
 8004414:	40000800 	.word	0x40000800
 8004418:	40000c00 	.word	0x40000c00
 800441c:	40014000 	.word	0x40014000

08004420 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b082      	sub	sp, #8
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	f003 0302 	and.w	r3, r3, #2
 8004432:	2b02      	cmp	r3, #2
 8004434:	d122      	bne.n	800447c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	f003 0302 	and.w	r3, r3, #2
 8004440:	2b02      	cmp	r3, #2
 8004442:	d11b      	bne.n	800447c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f06f 0202 	mvn.w	r2, #2
 800444c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2201      	movs	r2, #1
 8004452:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	699b      	ldr	r3, [r3, #24]
 800445a:	f003 0303 	and.w	r3, r3, #3
 800445e:	2b00      	cmp	r3, #0
 8004460:	d003      	beq.n	800446a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f7fd fa34 	bl	80018d0 <HAL_TIM_IC_CaptureCallback>
 8004468:	e005      	b.n	8004476 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 fb4a 	bl	8004b04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f000 fb51 	bl	8004b18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	f003 0304 	and.w	r3, r3, #4
 8004486:	2b04      	cmp	r3, #4
 8004488:	d122      	bne.n	80044d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	f003 0304 	and.w	r3, r3, #4
 8004494:	2b04      	cmp	r3, #4
 8004496:	d11b      	bne.n	80044d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f06f 0204 	mvn.w	r2, #4
 80044a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2202      	movs	r2, #2
 80044a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	699b      	ldr	r3, [r3, #24]
 80044ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d003      	beq.n	80044be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f7fd fa0a 	bl	80018d0 <HAL_TIM_IC_CaptureCallback>
 80044bc:	e005      	b.n	80044ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 fb20 	bl	8004b04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f000 fb27 	bl	8004b18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	f003 0308 	and.w	r3, r3, #8
 80044da:	2b08      	cmp	r3, #8
 80044dc:	d122      	bne.n	8004524 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	f003 0308 	and.w	r3, r3, #8
 80044e8:	2b08      	cmp	r3, #8
 80044ea:	d11b      	bne.n	8004524 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f06f 0208 	mvn.w	r2, #8
 80044f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2204      	movs	r2, #4
 80044fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	69db      	ldr	r3, [r3, #28]
 8004502:	f003 0303 	and.w	r3, r3, #3
 8004506:	2b00      	cmp	r3, #0
 8004508:	d003      	beq.n	8004512 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f7fd f9e0 	bl	80018d0 <HAL_TIM_IC_CaptureCallback>
 8004510:	e005      	b.n	800451e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 faf6 	bl	8004b04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f000 fafd 	bl	8004b18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	f003 0310 	and.w	r3, r3, #16
 800452e:	2b10      	cmp	r3, #16
 8004530:	d122      	bne.n	8004578 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	f003 0310 	and.w	r3, r3, #16
 800453c:	2b10      	cmp	r3, #16
 800453e:	d11b      	bne.n	8004578 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f06f 0210 	mvn.w	r2, #16
 8004548:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2208      	movs	r2, #8
 800454e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	69db      	ldr	r3, [r3, #28]
 8004556:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800455a:	2b00      	cmp	r3, #0
 800455c:	d003      	beq.n	8004566 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f7fd f9b6 	bl	80018d0 <HAL_TIM_IC_CaptureCallback>
 8004564:	e005      	b.n	8004572 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 facc 	bl	8004b04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f000 fad3 	bl	8004b18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	f003 0301 	and.w	r3, r3, #1
 8004582:	2b01      	cmp	r3, #1
 8004584:	d10e      	bne.n	80045a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	f003 0301 	and.w	r3, r3, #1
 8004590:	2b01      	cmp	r3, #1
 8004592:	d107      	bne.n	80045a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f06f 0201 	mvn.w	r2, #1
 800459c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f7fc fc70 	bl	8000e84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ae:	2b80      	cmp	r3, #128	; 0x80
 80045b0:	d10e      	bne.n	80045d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045bc:	2b80      	cmp	r3, #128	; 0x80
 80045be:	d107      	bne.n	80045d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 ff1a 	bl	8005404 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045da:	2b40      	cmp	r3, #64	; 0x40
 80045dc:	d10e      	bne.n	80045fc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e8:	2b40      	cmp	r3, #64	; 0x40
 80045ea:	d107      	bne.n	80045fc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80045f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 fa98 	bl	8004b2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	f003 0320 	and.w	r3, r3, #32
 8004606:	2b20      	cmp	r3, #32
 8004608:	d10e      	bne.n	8004628 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	f003 0320 	and.w	r3, r3, #32
 8004614:	2b20      	cmp	r3, #32
 8004616:	d107      	bne.n	8004628 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f06f 0220 	mvn.w	r2, #32
 8004620:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 fee4 	bl	80053f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004628:	bf00      	nop
 800462a:	3708      	adds	r7, #8
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b086      	sub	sp, #24
 8004634:	af00      	add	r7, sp, #0
 8004636:	60f8      	str	r0, [r7, #12]
 8004638:	60b9      	str	r1, [r7, #8]
 800463a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800463c:	2300      	movs	r3, #0
 800463e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004646:	2b01      	cmp	r3, #1
 8004648:	d101      	bne.n	800464e <HAL_TIM_IC_ConfigChannel+0x1e>
 800464a:	2302      	movs	r3, #2
 800464c:	e088      	b.n	8004760 <HAL_TIM_IC_ConfigChannel+0x130>
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2201      	movs	r2, #1
 8004652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d11b      	bne.n	8004694 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6818      	ldr	r0, [r3, #0]
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	6819      	ldr	r1, [r3, #0]
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	685a      	ldr	r2, [r3, #4]
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	f000 fc74 	bl	8004f58 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	699a      	ldr	r2, [r3, #24]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f022 020c 	bic.w	r2, r2, #12
 800467e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	6999      	ldr	r1, [r3, #24]
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	689a      	ldr	r2, [r3, #8]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	430a      	orrs	r2, r1
 8004690:	619a      	str	r2, [r3, #24]
 8004692:	e060      	b.n	8004756 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2b04      	cmp	r3, #4
 8004698:	d11c      	bne.n	80046d4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6818      	ldr	r0, [r3, #0]
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	6819      	ldr	r1, [r3, #0]
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	685a      	ldr	r2, [r3, #4]
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	f000 fcec 	bl	8005086 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	699a      	ldr	r2, [r3, #24]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80046bc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	6999      	ldr	r1, [r3, #24]
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	021a      	lsls	r2, r3, #8
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	430a      	orrs	r2, r1
 80046d0:	619a      	str	r2, [r3, #24]
 80046d2:	e040      	b.n	8004756 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2b08      	cmp	r3, #8
 80046d8:	d11b      	bne.n	8004712 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6818      	ldr	r0, [r3, #0]
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	6819      	ldr	r1, [r3, #0]
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	685a      	ldr	r2, [r3, #4]
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	f000 fd39 	bl	8005160 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	69da      	ldr	r2, [r3, #28]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f022 020c 	bic.w	r2, r2, #12
 80046fc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	69d9      	ldr	r1, [r3, #28]
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	689a      	ldr	r2, [r3, #8]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	430a      	orrs	r2, r1
 800470e:	61da      	str	r2, [r3, #28]
 8004710:	e021      	b.n	8004756 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2b0c      	cmp	r3, #12
 8004716:	d11c      	bne.n	8004752 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6818      	ldr	r0, [r3, #0]
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	6819      	ldr	r1, [r3, #0]
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	685a      	ldr	r2, [r3, #4]
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	f000 fd56 	bl	80051d8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	69da      	ldr	r2, [r3, #28]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800473a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	69d9      	ldr	r1, [r3, #28]
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	021a      	lsls	r2, r3, #8
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	430a      	orrs	r2, r1
 800474e:	61da      	str	r2, [r3, #28]
 8004750:	e001      	b.n	8004756 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800475e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004760:	4618      	mov	r0, r3
 8004762:	3718      	adds	r7, #24
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b086      	sub	sp, #24
 800476c:	af00      	add	r7, sp, #0
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004774:	2300      	movs	r3, #0
 8004776:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800477e:	2b01      	cmp	r3, #1
 8004780:	d101      	bne.n	8004786 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004782:	2302      	movs	r3, #2
 8004784:	e0ae      	b.n	80048e4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2201      	movs	r2, #1
 800478a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2b0c      	cmp	r3, #12
 8004792:	f200 809f 	bhi.w	80048d4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004796:	a201      	add	r2, pc, #4	; (adr r2, 800479c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800479c:	080047d1 	.word	0x080047d1
 80047a0:	080048d5 	.word	0x080048d5
 80047a4:	080048d5 	.word	0x080048d5
 80047a8:	080048d5 	.word	0x080048d5
 80047ac:	08004811 	.word	0x08004811
 80047b0:	080048d5 	.word	0x080048d5
 80047b4:	080048d5 	.word	0x080048d5
 80047b8:	080048d5 	.word	0x080048d5
 80047bc:	08004853 	.word	0x08004853
 80047c0:	080048d5 	.word	0x080048d5
 80047c4:	080048d5 	.word	0x080048d5
 80047c8:	080048d5 	.word	0x080048d5
 80047cc:	08004893 	.word	0x08004893
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68b9      	ldr	r1, [r7, #8]
 80047d6:	4618      	mov	r0, r3
 80047d8:	f000 fa32 	bl	8004c40 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	699a      	ldr	r2, [r3, #24]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f042 0208 	orr.w	r2, r2, #8
 80047ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	699a      	ldr	r2, [r3, #24]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f022 0204 	bic.w	r2, r2, #4
 80047fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	6999      	ldr	r1, [r3, #24]
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	691a      	ldr	r2, [r3, #16]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	430a      	orrs	r2, r1
 800480c:	619a      	str	r2, [r3, #24]
      break;
 800480e:	e064      	b.n	80048da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	68b9      	ldr	r1, [r7, #8]
 8004816:	4618      	mov	r0, r3
 8004818:	f000 fa78 	bl	8004d0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	699a      	ldr	r2, [r3, #24]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800482a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	699a      	ldr	r2, [r3, #24]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800483a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	6999      	ldr	r1, [r3, #24]
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	021a      	lsls	r2, r3, #8
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	430a      	orrs	r2, r1
 800484e:	619a      	str	r2, [r3, #24]
      break;
 8004850:	e043      	b.n	80048da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	68b9      	ldr	r1, [r7, #8]
 8004858:	4618      	mov	r0, r3
 800485a:	f000 fac3 	bl	8004de4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	69da      	ldr	r2, [r3, #28]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f042 0208 	orr.w	r2, r2, #8
 800486c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	69da      	ldr	r2, [r3, #28]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f022 0204 	bic.w	r2, r2, #4
 800487c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	69d9      	ldr	r1, [r3, #28]
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	691a      	ldr	r2, [r3, #16]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	430a      	orrs	r2, r1
 800488e:	61da      	str	r2, [r3, #28]
      break;
 8004890:	e023      	b.n	80048da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	68b9      	ldr	r1, [r7, #8]
 8004898:	4618      	mov	r0, r3
 800489a:	f000 fb0d 	bl	8004eb8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	69da      	ldr	r2, [r3, #28]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	69da      	ldr	r2, [r3, #28]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	69d9      	ldr	r1, [r3, #28]
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	021a      	lsls	r2, r3, #8
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	430a      	orrs	r2, r1
 80048d0:	61da      	str	r2, [r3, #28]
      break;
 80048d2:	e002      	b.n	80048da <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	75fb      	strb	r3, [r7, #23]
      break;
 80048d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2200      	movs	r2, #0
 80048de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80048e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3718      	adds	r7, #24
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048f6:	2300      	movs	r3, #0
 80048f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004900:	2b01      	cmp	r3, #1
 8004902:	d101      	bne.n	8004908 <HAL_TIM_ConfigClockSource+0x1c>
 8004904:	2302      	movs	r3, #2
 8004906:	e0b4      	b.n	8004a72 <HAL_TIM_ConfigClockSource+0x186>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2202      	movs	r2, #2
 8004914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004926:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800492e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	68ba      	ldr	r2, [r7, #8]
 8004936:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004940:	d03e      	beq.n	80049c0 <HAL_TIM_ConfigClockSource+0xd4>
 8004942:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004946:	f200 8087 	bhi.w	8004a58 <HAL_TIM_ConfigClockSource+0x16c>
 800494a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800494e:	f000 8086 	beq.w	8004a5e <HAL_TIM_ConfigClockSource+0x172>
 8004952:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004956:	d87f      	bhi.n	8004a58 <HAL_TIM_ConfigClockSource+0x16c>
 8004958:	2b70      	cmp	r3, #112	; 0x70
 800495a:	d01a      	beq.n	8004992 <HAL_TIM_ConfigClockSource+0xa6>
 800495c:	2b70      	cmp	r3, #112	; 0x70
 800495e:	d87b      	bhi.n	8004a58 <HAL_TIM_ConfigClockSource+0x16c>
 8004960:	2b60      	cmp	r3, #96	; 0x60
 8004962:	d050      	beq.n	8004a06 <HAL_TIM_ConfigClockSource+0x11a>
 8004964:	2b60      	cmp	r3, #96	; 0x60
 8004966:	d877      	bhi.n	8004a58 <HAL_TIM_ConfigClockSource+0x16c>
 8004968:	2b50      	cmp	r3, #80	; 0x50
 800496a:	d03c      	beq.n	80049e6 <HAL_TIM_ConfigClockSource+0xfa>
 800496c:	2b50      	cmp	r3, #80	; 0x50
 800496e:	d873      	bhi.n	8004a58 <HAL_TIM_ConfigClockSource+0x16c>
 8004970:	2b40      	cmp	r3, #64	; 0x40
 8004972:	d058      	beq.n	8004a26 <HAL_TIM_ConfigClockSource+0x13a>
 8004974:	2b40      	cmp	r3, #64	; 0x40
 8004976:	d86f      	bhi.n	8004a58 <HAL_TIM_ConfigClockSource+0x16c>
 8004978:	2b30      	cmp	r3, #48	; 0x30
 800497a:	d064      	beq.n	8004a46 <HAL_TIM_ConfigClockSource+0x15a>
 800497c:	2b30      	cmp	r3, #48	; 0x30
 800497e:	d86b      	bhi.n	8004a58 <HAL_TIM_ConfigClockSource+0x16c>
 8004980:	2b20      	cmp	r3, #32
 8004982:	d060      	beq.n	8004a46 <HAL_TIM_ConfigClockSource+0x15a>
 8004984:	2b20      	cmp	r3, #32
 8004986:	d867      	bhi.n	8004a58 <HAL_TIM_ConfigClockSource+0x16c>
 8004988:	2b00      	cmp	r3, #0
 800498a:	d05c      	beq.n	8004a46 <HAL_TIM_ConfigClockSource+0x15a>
 800498c:	2b10      	cmp	r3, #16
 800498e:	d05a      	beq.n	8004a46 <HAL_TIM_ConfigClockSource+0x15a>
 8004990:	e062      	b.n	8004a58 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6818      	ldr	r0, [r3, #0]
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	6899      	ldr	r1, [r3, #8]
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	685a      	ldr	r2, [r3, #4]
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	f000 fc71 	bl	8005288 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80049b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	68ba      	ldr	r2, [r7, #8]
 80049bc:	609a      	str	r2, [r3, #8]
      break;
 80049be:	e04f      	b.n	8004a60 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6818      	ldr	r0, [r3, #0]
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	6899      	ldr	r1, [r3, #8]
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	685a      	ldr	r2, [r3, #4]
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	f000 fc5a 	bl	8005288 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	689a      	ldr	r2, [r3, #8]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049e2:	609a      	str	r2, [r3, #8]
      break;
 80049e4:	e03c      	b.n	8004a60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6818      	ldr	r0, [r3, #0]
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	6859      	ldr	r1, [r3, #4]
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	461a      	mov	r2, r3
 80049f4:	f000 fb18 	bl	8005028 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2150      	movs	r1, #80	; 0x50
 80049fe:	4618      	mov	r0, r3
 8004a00:	f000 fc27 	bl	8005252 <TIM_ITRx_SetConfig>
      break;
 8004a04:	e02c      	b.n	8004a60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6818      	ldr	r0, [r3, #0]
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	6859      	ldr	r1, [r3, #4]
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	461a      	mov	r2, r3
 8004a14:	f000 fb74 	bl	8005100 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2160      	movs	r1, #96	; 0x60
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f000 fc17 	bl	8005252 <TIM_ITRx_SetConfig>
      break;
 8004a24:	e01c      	b.n	8004a60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6818      	ldr	r0, [r3, #0]
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	6859      	ldr	r1, [r3, #4]
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	461a      	mov	r2, r3
 8004a34:	f000 faf8 	bl	8005028 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2140      	movs	r1, #64	; 0x40
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f000 fc07 	bl	8005252 <TIM_ITRx_SetConfig>
      break;
 8004a44:	e00c      	b.n	8004a60 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4619      	mov	r1, r3
 8004a50:	4610      	mov	r0, r2
 8004a52:	f000 fbfe 	bl	8005252 <TIM_ITRx_SetConfig>
      break;
 8004a56:	e003      	b.n	8004a60 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	73fb      	strb	r3, [r7, #15]
      break;
 8004a5c:	e000      	b.n	8004a60 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004a5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3710      	adds	r7, #16
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
	...

08004a7c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b085      	sub	sp, #20
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004a86:	2300      	movs	r3, #0
 8004a88:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	2b0c      	cmp	r3, #12
 8004a8e:	d831      	bhi.n	8004af4 <HAL_TIM_ReadCapturedValue+0x78>
 8004a90:	a201      	add	r2, pc, #4	; (adr r2, 8004a98 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a96:	bf00      	nop
 8004a98:	08004acd 	.word	0x08004acd
 8004a9c:	08004af5 	.word	0x08004af5
 8004aa0:	08004af5 	.word	0x08004af5
 8004aa4:	08004af5 	.word	0x08004af5
 8004aa8:	08004ad7 	.word	0x08004ad7
 8004aac:	08004af5 	.word	0x08004af5
 8004ab0:	08004af5 	.word	0x08004af5
 8004ab4:	08004af5 	.word	0x08004af5
 8004ab8:	08004ae1 	.word	0x08004ae1
 8004abc:	08004af5 	.word	0x08004af5
 8004ac0:	08004af5 	.word	0x08004af5
 8004ac4:	08004af5 	.word	0x08004af5
 8004ac8:	08004aeb 	.word	0x08004aeb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ad2:	60fb      	str	r3, [r7, #12]

      break;
 8004ad4:	e00f      	b.n	8004af6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004adc:	60fb      	str	r3, [r7, #12]

      break;
 8004ade:	e00a      	b.n	8004af6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ae6:	60fb      	str	r3, [r7, #12]

      break;
 8004ae8:	e005      	b.n	8004af6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af0:	60fb      	str	r3, [r7, #12]

      break;
 8004af2:	e000      	b.n	8004af6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004af4:	bf00      	nop
  }

  return tmpreg;
 8004af6:	68fb      	ldr	r3, [r7, #12]
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3714      	adds	r7, #20
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b0c:	bf00      	nop
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b20:	bf00      	nop
 8004b22:	370c      	adds	r7, #12
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr

08004b2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b34:	bf00      	nop
 8004b36:	370c      	adds	r7, #12
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr

08004b40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	4a34      	ldr	r2, [pc, #208]	; (8004c24 <TIM_Base_SetConfig+0xe4>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d00f      	beq.n	8004b78 <TIM_Base_SetConfig+0x38>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b5e:	d00b      	beq.n	8004b78 <TIM_Base_SetConfig+0x38>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a31      	ldr	r2, [pc, #196]	; (8004c28 <TIM_Base_SetConfig+0xe8>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d007      	beq.n	8004b78 <TIM_Base_SetConfig+0x38>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a30      	ldr	r2, [pc, #192]	; (8004c2c <TIM_Base_SetConfig+0xec>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d003      	beq.n	8004b78 <TIM_Base_SetConfig+0x38>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a2f      	ldr	r2, [pc, #188]	; (8004c30 <TIM_Base_SetConfig+0xf0>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d108      	bne.n	8004b8a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4a25      	ldr	r2, [pc, #148]	; (8004c24 <TIM_Base_SetConfig+0xe4>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d01b      	beq.n	8004bca <TIM_Base_SetConfig+0x8a>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b98:	d017      	beq.n	8004bca <TIM_Base_SetConfig+0x8a>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4a22      	ldr	r2, [pc, #136]	; (8004c28 <TIM_Base_SetConfig+0xe8>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d013      	beq.n	8004bca <TIM_Base_SetConfig+0x8a>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a21      	ldr	r2, [pc, #132]	; (8004c2c <TIM_Base_SetConfig+0xec>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d00f      	beq.n	8004bca <TIM_Base_SetConfig+0x8a>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a20      	ldr	r2, [pc, #128]	; (8004c30 <TIM_Base_SetConfig+0xf0>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d00b      	beq.n	8004bca <TIM_Base_SetConfig+0x8a>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a1f      	ldr	r2, [pc, #124]	; (8004c34 <TIM_Base_SetConfig+0xf4>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d007      	beq.n	8004bca <TIM_Base_SetConfig+0x8a>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a1e      	ldr	r2, [pc, #120]	; (8004c38 <TIM_Base_SetConfig+0xf8>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d003      	beq.n	8004bca <TIM_Base_SetConfig+0x8a>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a1d      	ldr	r2, [pc, #116]	; (8004c3c <TIM_Base_SetConfig+0xfc>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d108      	bne.n	8004bdc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	68fa      	ldr	r2, [r7, #12]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	695b      	ldr	r3, [r3, #20]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	68fa      	ldr	r2, [r7, #12]
 8004bee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	689a      	ldr	r2, [r3, #8]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	4a08      	ldr	r2, [pc, #32]	; (8004c24 <TIM_Base_SetConfig+0xe4>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d103      	bne.n	8004c10 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	691a      	ldr	r2, [r3, #16]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	615a      	str	r2, [r3, #20]
}
 8004c16:	bf00      	nop
 8004c18:	3714      	adds	r7, #20
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr
 8004c22:	bf00      	nop
 8004c24:	40010000 	.word	0x40010000
 8004c28:	40000400 	.word	0x40000400
 8004c2c:	40000800 	.word	0x40000800
 8004c30:	40000c00 	.word	0x40000c00
 8004c34:	40014000 	.word	0x40014000
 8004c38:	40014400 	.word	0x40014400
 8004c3c:	40014800 	.word	0x40014800

08004c40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b087      	sub	sp, #28
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a1b      	ldr	r3, [r3, #32]
 8004c4e:	f023 0201 	bic.w	r2, r3, #1
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a1b      	ldr	r3, [r3, #32]
 8004c5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	699b      	ldr	r3, [r3, #24]
 8004c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f023 0303 	bic.w	r3, r3, #3
 8004c76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	f023 0302 	bic.w	r3, r3, #2
 8004c88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	697a      	ldr	r2, [r7, #20]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4a1c      	ldr	r2, [pc, #112]	; (8004d08 <TIM_OC1_SetConfig+0xc8>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d10c      	bne.n	8004cb6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	f023 0308 	bic.w	r3, r3, #8
 8004ca2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	697a      	ldr	r2, [r7, #20]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	f023 0304 	bic.w	r3, r3, #4
 8004cb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a13      	ldr	r2, [pc, #76]	; (8004d08 <TIM_OC1_SetConfig+0xc8>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d111      	bne.n	8004ce2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ccc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	695b      	ldr	r3, [r3, #20]
 8004cd2:	693a      	ldr	r2, [r7, #16]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	699b      	ldr	r3, [r3, #24]
 8004cdc:	693a      	ldr	r2, [r7, #16]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	693a      	ldr	r2, [r7, #16]
 8004ce6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	68fa      	ldr	r2, [r7, #12]
 8004cec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	685a      	ldr	r2, [r3, #4]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	697a      	ldr	r2, [r7, #20]
 8004cfa:	621a      	str	r2, [r3, #32]
}
 8004cfc:	bf00      	nop
 8004cfe:	371c      	adds	r7, #28
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr
 8004d08:	40010000 	.word	0x40010000

08004d0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b087      	sub	sp, #28
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a1b      	ldr	r3, [r3, #32]
 8004d1a:	f023 0210 	bic.w	r2, r3, #16
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a1b      	ldr	r3, [r3, #32]
 8004d26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	699b      	ldr	r3, [r3, #24]
 8004d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	021b      	lsls	r3, r3, #8
 8004d4a:	68fa      	ldr	r2, [r7, #12]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	f023 0320 	bic.w	r3, r3, #32
 8004d56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	011b      	lsls	r3, r3, #4
 8004d5e:	697a      	ldr	r2, [r7, #20]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4a1e      	ldr	r2, [pc, #120]	; (8004de0 <TIM_OC2_SetConfig+0xd4>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d10d      	bne.n	8004d88 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	011b      	lsls	r3, r3, #4
 8004d7a:	697a      	ldr	r2, [r7, #20]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d86:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a15      	ldr	r2, [pc, #84]	; (8004de0 <TIM_OC2_SetConfig+0xd4>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d113      	bne.n	8004db8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	695b      	ldr	r3, [r3, #20]
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	693a      	ldr	r2, [r7, #16]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	699b      	ldr	r3, [r3, #24]
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	693a      	ldr	r2, [r7, #16]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	693a      	ldr	r2, [r7, #16]
 8004dbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	68fa      	ldr	r2, [r7, #12]
 8004dc2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	685a      	ldr	r2, [r3, #4]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	697a      	ldr	r2, [r7, #20]
 8004dd0:	621a      	str	r2, [r3, #32]
}
 8004dd2:	bf00      	nop
 8004dd4:	371c      	adds	r7, #28
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr
 8004dde:	bf00      	nop
 8004de0:	40010000 	.word	0x40010000

08004de4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b087      	sub	sp, #28
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a1b      	ldr	r3, [r3, #32]
 8004df2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a1b      	ldr	r3, [r3, #32]
 8004dfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	69db      	ldr	r3, [r3, #28]
 8004e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f023 0303 	bic.w	r3, r3, #3
 8004e1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	68fa      	ldr	r2, [r7, #12]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	021b      	lsls	r3, r3, #8
 8004e34:	697a      	ldr	r2, [r7, #20]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a1d      	ldr	r2, [pc, #116]	; (8004eb4 <TIM_OC3_SetConfig+0xd0>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d10d      	bne.n	8004e5e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	021b      	lsls	r3, r3, #8
 8004e50:	697a      	ldr	r2, [r7, #20]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a14      	ldr	r2, [pc, #80]	; (8004eb4 <TIM_OC3_SetConfig+0xd0>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d113      	bne.n	8004e8e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	011b      	lsls	r3, r3, #4
 8004e7c:	693a      	ldr	r2, [r7, #16]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	699b      	ldr	r3, [r3, #24]
 8004e86:	011b      	lsls	r3, r3, #4
 8004e88:	693a      	ldr	r2, [r7, #16]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	693a      	ldr	r2, [r7, #16]
 8004e92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	685a      	ldr	r2, [r3, #4]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	697a      	ldr	r2, [r7, #20]
 8004ea6:	621a      	str	r2, [r3, #32]
}
 8004ea8:	bf00      	nop
 8004eaa:	371c      	adds	r7, #28
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr
 8004eb4:	40010000 	.word	0x40010000

08004eb8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b087      	sub	sp, #28
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a1b      	ldr	r3, [r3, #32]
 8004ec6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a1b      	ldr	r3, [r3, #32]
 8004ed2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	69db      	ldr	r3, [r3, #28]
 8004ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ee6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	021b      	lsls	r3, r3, #8
 8004ef6:	68fa      	ldr	r2, [r7, #12]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	031b      	lsls	r3, r3, #12
 8004f0a:	693a      	ldr	r2, [r7, #16]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a10      	ldr	r2, [pc, #64]	; (8004f54 <TIM_OC4_SetConfig+0x9c>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d109      	bne.n	8004f2c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f1e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	695b      	ldr	r3, [r3, #20]
 8004f24:	019b      	lsls	r3, r3, #6
 8004f26:	697a      	ldr	r2, [r7, #20]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	697a      	ldr	r2, [r7, #20]
 8004f30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	68fa      	ldr	r2, [r7, #12]
 8004f36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	685a      	ldr	r2, [r3, #4]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	693a      	ldr	r2, [r7, #16]
 8004f44:	621a      	str	r2, [r3, #32]
}
 8004f46:	bf00      	nop
 8004f48:	371c      	adds	r7, #28
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr
 8004f52:	bf00      	nop
 8004f54:	40010000 	.word	0x40010000

08004f58 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b087      	sub	sp, #28
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	607a      	str	r2, [r7, #4]
 8004f64:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6a1b      	ldr	r3, [r3, #32]
 8004f6a:	f023 0201 	bic.w	r2, r3, #1
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	699b      	ldr	r3, [r3, #24]
 8004f76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6a1b      	ldr	r3, [r3, #32]
 8004f7c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	4a24      	ldr	r2, [pc, #144]	; (8005014 <TIM_TI1_SetConfig+0xbc>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d013      	beq.n	8004fae <TIM_TI1_SetConfig+0x56>
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f8c:	d00f      	beq.n	8004fae <TIM_TI1_SetConfig+0x56>
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	4a21      	ldr	r2, [pc, #132]	; (8005018 <TIM_TI1_SetConfig+0xc0>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d00b      	beq.n	8004fae <TIM_TI1_SetConfig+0x56>
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	4a20      	ldr	r2, [pc, #128]	; (800501c <TIM_TI1_SetConfig+0xc4>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d007      	beq.n	8004fae <TIM_TI1_SetConfig+0x56>
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	4a1f      	ldr	r2, [pc, #124]	; (8005020 <TIM_TI1_SetConfig+0xc8>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d003      	beq.n	8004fae <TIM_TI1_SetConfig+0x56>
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	4a1e      	ldr	r2, [pc, #120]	; (8005024 <TIM_TI1_SetConfig+0xcc>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d101      	bne.n	8004fb2 <TIM_TI1_SetConfig+0x5a>
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e000      	b.n	8004fb4 <TIM_TI1_SetConfig+0x5c>
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d008      	beq.n	8004fca <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	f023 0303 	bic.w	r3, r3, #3
 8004fbe:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004fc0:	697a      	ldr	r2, [r7, #20]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	617b      	str	r3, [r7, #20]
 8004fc8:	e003      	b.n	8004fd2 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	f043 0301 	orr.w	r3, r3, #1
 8004fd0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fd8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	011b      	lsls	r3, r3, #4
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	697a      	ldr	r2, [r7, #20]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	f023 030a 	bic.w	r3, r3, #10
 8004fec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	f003 030a 	and.w	r3, r3, #10
 8004ff4:	693a      	ldr	r2, [r7, #16]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	697a      	ldr	r2, [r7, #20]
 8004ffe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	693a      	ldr	r2, [r7, #16]
 8005004:	621a      	str	r2, [r3, #32]
}
 8005006:	bf00      	nop
 8005008:	371c      	adds	r7, #28
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr
 8005012:	bf00      	nop
 8005014:	40010000 	.word	0x40010000
 8005018:	40000400 	.word	0x40000400
 800501c:	40000800 	.word	0x40000800
 8005020:	40000c00 	.word	0x40000c00
 8005024:	40014000 	.word	0x40014000

08005028 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005028:	b480      	push	{r7}
 800502a:	b087      	sub	sp, #28
 800502c:	af00      	add	r7, sp, #0
 800502e:	60f8      	str	r0, [r7, #12]
 8005030:	60b9      	str	r1, [r7, #8]
 8005032:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6a1b      	ldr	r3, [r3, #32]
 8005038:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6a1b      	ldr	r3, [r3, #32]
 800503e:	f023 0201 	bic.w	r2, r3, #1
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	699b      	ldr	r3, [r3, #24]
 800504a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005052:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	011b      	lsls	r3, r3, #4
 8005058:	693a      	ldr	r2, [r7, #16]
 800505a:	4313      	orrs	r3, r2
 800505c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	f023 030a 	bic.w	r3, r3, #10
 8005064:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005066:	697a      	ldr	r2, [r7, #20]
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	4313      	orrs	r3, r2
 800506c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	693a      	ldr	r2, [r7, #16]
 8005072:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	697a      	ldr	r2, [r7, #20]
 8005078:	621a      	str	r2, [r3, #32]
}
 800507a:	bf00      	nop
 800507c:	371c      	adds	r7, #28
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr

08005086 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005086:	b480      	push	{r7}
 8005088:	b087      	sub	sp, #28
 800508a:	af00      	add	r7, sp, #0
 800508c:	60f8      	str	r0, [r7, #12]
 800508e:	60b9      	str	r1, [r7, #8]
 8005090:	607a      	str	r2, [r7, #4]
 8005092:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6a1b      	ldr	r3, [r3, #32]
 8005098:	f023 0210 	bic.w	r2, r3, #16
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	699b      	ldr	r3, [r3, #24]
 80050a4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6a1b      	ldr	r3, [r3, #32]
 80050aa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050b2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	021b      	lsls	r3, r3, #8
 80050b8:	697a      	ldr	r2, [r7, #20]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	031b      	lsls	r3, r3, #12
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	697a      	ldr	r2, [r7, #20]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80050d8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	011b      	lsls	r3, r3, #4
 80050de:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80050e2:	693a      	ldr	r2, [r7, #16]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	697a      	ldr	r2, [r7, #20]
 80050ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	693a      	ldr	r2, [r7, #16]
 80050f2:	621a      	str	r2, [r3, #32]
}
 80050f4:	bf00      	nop
 80050f6:	371c      	adds	r7, #28
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr

08005100 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005100:	b480      	push	{r7}
 8005102:	b087      	sub	sp, #28
 8005104:	af00      	add	r7, sp, #0
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6a1b      	ldr	r3, [r3, #32]
 8005110:	f023 0210 	bic.w	r2, r3, #16
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	699b      	ldr	r3, [r3, #24]
 800511c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	6a1b      	ldr	r3, [r3, #32]
 8005122:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800512a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	031b      	lsls	r3, r3, #12
 8005130:	697a      	ldr	r2, [r7, #20]
 8005132:	4313      	orrs	r3, r2
 8005134:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800513c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	011b      	lsls	r3, r3, #4
 8005142:	693a      	ldr	r2, [r7, #16]
 8005144:	4313      	orrs	r3, r2
 8005146:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	697a      	ldr	r2, [r7, #20]
 800514c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	693a      	ldr	r2, [r7, #16]
 8005152:	621a      	str	r2, [r3, #32]
}
 8005154:	bf00      	nop
 8005156:	371c      	adds	r7, #28
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005160:	b480      	push	{r7}
 8005162:	b087      	sub	sp, #28
 8005164:	af00      	add	r7, sp, #0
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	607a      	str	r2, [r7, #4]
 800516c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6a1b      	ldr	r3, [r3, #32]
 8005172:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	69db      	ldr	r3, [r3, #28]
 800517e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6a1b      	ldr	r3, [r3, #32]
 8005184:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	f023 0303 	bic.w	r3, r3, #3
 800518c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800518e:	697a      	ldr	r2, [r7, #20]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	4313      	orrs	r3, r2
 8005194:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800519c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	011b      	lsls	r3, r3, #4
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	697a      	ldr	r2, [r7, #20]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80051b0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	021b      	lsls	r3, r3, #8
 80051b6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80051ba:	693a      	ldr	r2, [r7, #16]
 80051bc:	4313      	orrs	r3, r2
 80051be:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	697a      	ldr	r2, [r7, #20]
 80051c4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	693a      	ldr	r2, [r7, #16]
 80051ca:	621a      	str	r2, [r3, #32]
}
 80051cc:	bf00      	nop
 80051ce:	371c      	adds	r7, #28
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr

080051d8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80051d8:	b480      	push	{r7}
 80051da:	b087      	sub	sp, #28
 80051dc:	af00      	add	r7, sp, #0
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	60b9      	str	r1, [r7, #8]
 80051e2:	607a      	str	r2, [r7, #4]
 80051e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6a1b      	ldr	r3, [r3, #32]
 80051ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	69db      	ldr	r3, [r3, #28]
 80051f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6a1b      	ldr	r3, [r3, #32]
 80051fc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005204:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	021b      	lsls	r3, r3, #8
 800520a:	697a      	ldr	r2, [r7, #20]
 800520c:	4313      	orrs	r3, r2
 800520e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005216:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	031b      	lsls	r3, r3, #12
 800521c:	b29b      	uxth	r3, r3
 800521e:	697a      	ldr	r2, [r7, #20]
 8005220:	4313      	orrs	r3, r2
 8005222:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800522a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	031b      	lsls	r3, r3, #12
 8005230:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005234:	693a      	ldr	r2, [r7, #16]
 8005236:	4313      	orrs	r3, r2
 8005238:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	697a      	ldr	r2, [r7, #20]
 800523e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	693a      	ldr	r2, [r7, #16]
 8005244:	621a      	str	r2, [r3, #32]
}
 8005246:	bf00      	nop
 8005248:	371c      	adds	r7, #28
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr

08005252 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005252:	b480      	push	{r7}
 8005254:	b085      	sub	sp, #20
 8005256:	af00      	add	r7, sp, #0
 8005258:	6078      	str	r0, [r7, #4]
 800525a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005268:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800526a:	683a      	ldr	r2, [r7, #0]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	4313      	orrs	r3, r2
 8005270:	f043 0307 	orr.w	r3, r3, #7
 8005274:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	609a      	str	r2, [r3, #8]
}
 800527c:	bf00      	nop
 800527e:	3714      	adds	r7, #20
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005288:	b480      	push	{r7}
 800528a:	b087      	sub	sp, #28
 800528c:	af00      	add	r7, sp, #0
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	607a      	str	r2, [r7, #4]
 8005294:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	021a      	lsls	r2, r3, #8
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	431a      	orrs	r2, r3
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	4313      	orrs	r3, r2
 80052b0:	697a      	ldr	r2, [r7, #20]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	697a      	ldr	r2, [r7, #20]
 80052ba:	609a      	str	r2, [r3, #8]
}
 80052bc:	bf00      	nop
 80052be:	371c      	adds	r7, #28
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr

080052c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b087      	sub	sp, #28
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	f003 031f 	and.w	r3, r3, #31
 80052da:	2201      	movs	r2, #1
 80052dc:	fa02 f303 	lsl.w	r3, r2, r3
 80052e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6a1a      	ldr	r2, [r3, #32]
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	43db      	mvns	r3, r3
 80052ea:	401a      	ands	r2, r3
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6a1a      	ldr	r2, [r3, #32]
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	f003 031f 	and.w	r3, r3, #31
 80052fa:	6879      	ldr	r1, [r7, #4]
 80052fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005300:	431a      	orrs	r2, r3
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	621a      	str	r2, [r3, #32]
}
 8005306:	bf00      	nop
 8005308:	371c      	adds	r7, #28
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr
	...

08005314 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005314:	b480      	push	{r7}
 8005316:	b085      	sub	sp, #20
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005324:	2b01      	cmp	r3, #1
 8005326:	d101      	bne.n	800532c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005328:	2302      	movs	r3, #2
 800532a:	e050      	b.n	80053ce <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2202      	movs	r2, #2
 8005338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005352:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	68fa      	ldr	r2, [r7, #12]
 800535a:	4313      	orrs	r3, r2
 800535c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	68fa      	ldr	r2, [r7, #12]
 8005364:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a1c      	ldr	r2, [pc, #112]	; (80053dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d018      	beq.n	80053a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005378:	d013      	beq.n	80053a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a18      	ldr	r2, [pc, #96]	; (80053e0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d00e      	beq.n	80053a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a16      	ldr	r2, [pc, #88]	; (80053e4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d009      	beq.n	80053a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a15      	ldr	r2, [pc, #84]	; (80053e8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d004      	beq.n	80053a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a13      	ldr	r2, [pc, #76]	; (80053ec <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d10c      	bne.n	80053bc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	68ba      	ldr	r2, [r7, #8]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	68ba      	ldr	r2, [r7, #8]
 80053ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3714      	adds	r7, #20
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr
 80053da:	bf00      	nop
 80053dc:	40010000 	.word	0x40010000
 80053e0:	40000400 	.word	0x40000400
 80053e4:	40000800 	.word	0x40000800
 80053e8:	40000c00 	.word	0x40000c00
 80053ec:	40014000 	.word	0x40014000

080053f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053f8:	bf00      	nop
 80053fa:	370c      	adds	r7, #12
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800540c:	bf00      	nop
 800540e:	370c      	adds	r7, #12
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d101      	bne.n	800542a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e03f      	b.n	80054aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005430:	b2db      	uxtb	r3, r3
 8005432:	2b00      	cmp	r3, #0
 8005434:	d106      	bne.n	8005444 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f7fc fc2a 	bl	8001c98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2224      	movs	r2, #36	; 0x24
 8005448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	68da      	ldr	r2, [r3, #12]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800545a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f000 fc47 	bl	8005cf0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	691a      	ldr	r2, [r3, #16]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005470:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	695a      	ldr	r2, [r3, #20]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005480:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	68da      	ldr	r2, [r3, #12]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005490:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2220      	movs	r2, #32
 800549c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2220      	movs	r2, #32
 80054a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3708      	adds	r7, #8
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}

080054b2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054b2:	b580      	push	{r7, lr}
 80054b4:	b08a      	sub	sp, #40	; 0x28
 80054b6:	af02      	add	r7, sp, #8
 80054b8:	60f8      	str	r0, [r7, #12]
 80054ba:	60b9      	str	r1, [r7, #8]
 80054bc:	603b      	str	r3, [r7, #0]
 80054be:	4613      	mov	r3, r2
 80054c0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80054c2:	2300      	movs	r3, #0
 80054c4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	2b20      	cmp	r3, #32
 80054d0:	d17c      	bne.n	80055cc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d002      	beq.n	80054de <HAL_UART_Transmit+0x2c>
 80054d8:	88fb      	ldrh	r3, [r7, #6]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d101      	bne.n	80054e2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e075      	b.n	80055ce <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d101      	bne.n	80054f0 <HAL_UART_Transmit+0x3e>
 80054ec:	2302      	movs	r3, #2
 80054ee:	e06e      	b.n	80055ce <HAL_UART_Transmit+0x11c>
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2200      	movs	r2, #0
 80054fc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2221      	movs	r2, #33	; 0x21
 8005502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005506:	f7fc fd0d 	bl	8001f24 <HAL_GetTick>
 800550a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	88fa      	ldrh	r2, [r7, #6]
 8005510:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	88fa      	ldrh	r2, [r7, #6]
 8005516:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005520:	d108      	bne.n	8005534 <HAL_UART_Transmit+0x82>
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d104      	bne.n	8005534 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800552a:	2300      	movs	r3, #0
 800552c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	61bb      	str	r3, [r7, #24]
 8005532:	e003      	b.n	800553c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005538:	2300      	movs	r3, #0
 800553a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2200      	movs	r2, #0
 8005540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005544:	e02a      	b.n	800559c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	9300      	str	r3, [sp, #0]
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	2200      	movs	r2, #0
 800554e:	2180      	movs	r1, #128	; 0x80
 8005550:	68f8      	ldr	r0, [r7, #12]
 8005552:	f000 fa34 	bl	80059be <UART_WaitOnFlagUntilTimeout>
 8005556:	4603      	mov	r3, r0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d001      	beq.n	8005560 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800555c:	2303      	movs	r3, #3
 800555e:	e036      	b.n	80055ce <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d10b      	bne.n	800557e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005566:	69bb      	ldr	r3, [r7, #24]
 8005568:	881b      	ldrh	r3, [r3, #0]
 800556a:	461a      	mov	r2, r3
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005574:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005576:	69bb      	ldr	r3, [r7, #24]
 8005578:	3302      	adds	r3, #2
 800557a:	61bb      	str	r3, [r7, #24]
 800557c:	e007      	b.n	800558e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800557e:	69fb      	ldr	r3, [r7, #28]
 8005580:	781a      	ldrb	r2, [r3, #0]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	3301      	adds	r3, #1
 800558c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005592:	b29b      	uxth	r3, r3
 8005594:	3b01      	subs	r3, #1
 8005596:	b29a      	uxth	r2, r3
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d1cf      	bne.n	8005546 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	9300      	str	r3, [sp, #0]
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	2200      	movs	r2, #0
 80055ae:	2140      	movs	r1, #64	; 0x40
 80055b0:	68f8      	ldr	r0, [r7, #12]
 80055b2:	f000 fa04 	bl	80059be <UART_WaitOnFlagUntilTimeout>
 80055b6:	4603      	mov	r3, r0
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d001      	beq.n	80055c0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80055bc:	2303      	movs	r3, #3
 80055be:	e006      	b.n	80055ce <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2220      	movs	r2, #32
 80055c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80055c8:	2300      	movs	r3, #0
 80055ca:	e000      	b.n	80055ce <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80055cc:	2302      	movs	r3, #2
  }
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3720      	adds	r7, #32
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}

080055d6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055d6:	b580      	push	{r7, lr}
 80055d8:	b08a      	sub	sp, #40	; 0x28
 80055da:	af02      	add	r7, sp, #8
 80055dc:	60f8      	str	r0, [r7, #12]
 80055de:	60b9      	str	r1, [r7, #8]
 80055e0:	603b      	str	r3, [r7, #0]
 80055e2:	4613      	mov	r3, r2
 80055e4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80055e6:	2300      	movs	r3, #0
 80055e8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	2b20      	cmp	r3, #32
 80055f4:	f040 808c 	bne.w	8005710 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d002      	beq.n	8005604 <HAL_UART_Receive+0x2e>
 80055fe:	88fb      	ldrh	r3, [r7, #6]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d101      	bne.n	8005608 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	e084      	b.n	8005712 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800560e:	2b01      	cmp	r3, #1
 8005610:	d101      	bne.n	8005616 <HAL_UART_Receive+0x40>
 8005612:	2302      	movs	r3, #2
 8005614:	e07d      	b.n	8005712 <HAL_UART_Receive+0x13c>
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2201      	movs	r2, #1
 800561a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2200      	movs	r2, #0
 8005622:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2222      	movs	r2, #34	; 0x22
 8005628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2200      	movs	r2, #0
 8005630:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005632:	f7fc fc77 	bl	8001f24 <HAL_GetTick>
 8005636:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	88fa      	ldrh	r2, [r7, #6]
 800563c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	88fa      	ldrh	r2, [r7, #6]
 8005642:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800564c:	d108      	bne.n	8005660 <HAL_UART_Receive+0x8a>
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d104      	bne.n	8005660 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8005656:	2300      	movs	r3, #0
 8005658:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	61bb      	str	r3, [r7, #24]
 800565e:	e003      	b.n	8005668 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005664:	2300      	movs	r3, #0
 8005666:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2200      	movs	r2, #0
 800566c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005670:	e043      	b.n	80056fa <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	9300      	str	r3, [sp, #0]
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	2200      	movs	r2, #0
 800567a:	2120      	movs	r1, #32
 800567c:	68f8      	ldr	r0, [r7, #12]
 800567e:	f000 f99e 	bl	80059be <UART_WaitOnFlagUntilTimeout>
 8005682:	4603      	mov	r3, r0
 8005684:	2b00      	cmp	r3, #0
 8005686:	d001      	beq.n	800568c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8005688:	2303      	movs	r3, #3
 800568a:	e042      	b.n	8005712 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d10c      	bne.n	80056ac <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	b29b      	uxth	r3, r3
 800569a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800569e:	b29a      	uxth	r2, r3
 80056a0:	69bb      	ldr	r3, [r7, #24]
 80056a2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	3302      	adds	r3, #2
 80056a8:	61bb      	str	r3, [r7, #24]
 80056aa:	e01f      	b.n	80056ec <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056b4:	d007      	beq.n	80056c6 <HAL_UART_Receive+0xf0>
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d10a      	bne.n	80056d4 <HAL_UART_Receive+0xfe>
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d106      	bne.n	80056d4 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	b2da      	uxtb	r2, r3
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	701a      	strb	r2, [r3, #0]
 80056d2:	e008      	b.n	80056e6 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056e0:	b2da      	uxtb	r2, r3
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	3301      	adds	r3, #1
 80056ea:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	3b01      	subs	r3, #1
 80056f4:	b29a      	uxth	r2, r3
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056fe:	b29b      	uxth	r3, r3
 8005700:	2b00      	cmp	r3, #0
 8005702:	d1b6      	bne.n	8005672 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2220      	movs	r2, #32
 8005708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800570c:	2300      	movs	r3, #0
 800570e:	e000      	b.n	8005712 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8005710:	2302      	movs	r3, #2
  }
}
 8005712:	4618      	mov	r0, r3
 8005714:	3720      	adds	r7, #32
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}

0800571a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800571a:	b580      	push	{r7, lr}
 800571c:	b084      	sub	sp, #16
 800571e:	af00      	add	r7, sp, #0
 8005720:	60f8      	str	r0, [r7, #12]
 8005722:	60b9      	str	r1, [r7, #8]
 8005724:	4613      	mov	r3, r2
 8005726:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800572e:	b2db      	uxtb	r3, r3
 8005730:	2b20      	cmp	r3, #32
 8005732:	d11d      	bne.n	8005770 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d002      	beq.n	8005740 <HAL_UART_Receive_DMA+0x26>
 800573a:	88fb      	ldrh	r3, [r7, #6]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d101      	bne.n	8005744 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	e016      	b.n	8005772 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800574a:	2b01      	cmp	r3, #1
 800574c:	d101      	bne.n	8005752 <HAL_UART_Receive_DMA+0x38>
 800574e:	2302      	movs	r3, #2
 8005750:	e00f      	b.n	8005772 <HAL_UART_Receive_DMA+0x58>
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2201      	movs	r2, #1
 8005756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2200      	movs	r2, #0
 800575e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005760:	88fb      	ldrh	r3, [r7, #6]
 8005762:	461a      	mov	r2, r3
 8005764:	68b9      	ldr	r1, [r7, #8]
 8005766:	68f8      	ldr	r0, [r7, #12]
 8005768:	f000 f998 	bl	8005a9c <UART_Start_Receive_DMA>
 800576c:	4603      	mov	r3, r0
 800576e:	e000      	b.n	8005772 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005770:	2302      	movs	r3, #2
  }
}
 8005772:	4618      	mov	r0, r3
 8005774:	3710      	adds	r7, #16
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}

0800577a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800577a:	b480      	push	{r7}
 800577c:	b083      	sub	sp, #12
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005782:	bf00      	nop
 8005784:	370c      	adds	r7, #12
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr

0800578e <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800578e:	b480      	push	{r7}
 8005790:	b083      	sub	sp, #12
 8005792:	af00      	add	r7, sp, #0
 8005794:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005796:	bf00      	nop
 8005798:	370c      	adds	r7, #12
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr

080057a2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80057a2:	b480      	push	{r7}
 80057a4:	b083      	sub	sp, #12
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80057aa:	bf00      	nop
 80057ac:	370c      	adds	r7, #12
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr

080057b6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80057b6:	b480      	push	{r7}
 80057b8:	b083      	sub	sp, #12
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
 80057be:	460b      	mov	r3, r1
 80057c0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80057c2:	bf00      	nop
 80057c4:	370c      	adds	r7, #12
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr

080057ce <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80057ce:	b580      	push	{r7, lr}
 80057d0:	b09c      	sub	sp, #112	; 0x70
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057da:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d172      	bne.n	80058d0 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80057ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057ec:	2200      	movs	r2, #0
 80057ee:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	330c      	adds	r3, #12
 80057f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057fa:	e853 3f00 	ldrex	r3, [r3]
 80057fe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005800:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005802:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005806:	66bb      	str	r3, [r7, #104]	; 0x68
 8005808:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	330c      	adds	r3, #12
 800580e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005810:	65ba      	str	r2, [r7, #88]	; 0x58
 8005812:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005814:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005816:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005818:	e841 2300 	strex	r3, r2, [r1]
 800581c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800581e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005820:	2b00      	cmp	r3, #0
 8005822:	d1e5      	bne.n	80057f0 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005824:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	3314      	adds	r3, #20
 800582a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800582c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800582e:	e853 3f00 	ldrex	r3, [r3]
 8005832:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005836:	f023 0301 	bic.w	r3, r3, #1
 800583a:	667b      	str	r3, [r7, #100]	; 0x64
 800583c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	3314      	adds	r3, #20
 8005842:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005844:	647a      	str	r2, [r7, #68]	; 0x44
 8005846:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005848:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800584a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800584c:	e841 2300 	strex	r3, r2, [r1]
 8005850:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005852:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005854:	2b00      	cmp	r3, #0
 8005856:	d1e5      	bne.n	8005824 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005858:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	3314      	adds	r3, #20
 800585e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005862:	e853 3f00 	ldrex	r3, [r3]
 8005866:	623b      	str	r3, [r7, #32]
   return(result);
 8005868:	6a3b      	ldr	r3, [r7, #32]
 800586a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800586e:	663b      	str	r3, [r7, #96]	; 0x60
 8005870:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	3314      	adds	r3, #20
 8005876:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005878:	633a      	str	r2, [r7, #48]	; 0x30
 800587a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800587c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800587e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005880:	e841 2300 	strex	r3, r2, [r1]
 8005884:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005888:	2b00      	cmp	r3, #0
 800588a:	d1e5      	bne.n	8005858 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800588c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800588e:	2220      	movs	r2, #32
 8005890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005894:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005898:	2b01      	cmp	r3, #1
 800589a:	d119      	bne.n	80058d0 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800589c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	330c      	adds	r3, #12
 80058a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	e853 3f00 	ldrex	r3, [r3]
 80058aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f023 0310 	bic.w	r3, r3, #16
 80058b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80058b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	330c      	adds	r3, #12
 80058ba:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80058bc:	61fa      	str	r2, [r7, #28]
 80058be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c0:	69b9      	ldr	r1, [r7, #24]
 80058c2:	69fa      	ldr	r2, [r7, #28]
 80058c4:	e841 2300 	strex	r3, r2, [r1]
 80058c8:	617b      	str	r3, [r7, #20]
   return(result);
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d1e5      	bne.n	800589c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d106      	bne.n	80058e6 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80058d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058da:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80058dc:	4619      	mov	r1, r3
 80058de:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80058e0:	f7ff ff69 	bl	80057b6 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80058e4:	e002      	b.n	80058ec <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80058e6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80058e8:	f7ff ff47 	bl	800577a <HAL_UART_RxCpltCallback>
}
 80058ec:	bf00      	nop
 80058ee:	3770      	adds	r7, #112	; 0x70
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005900:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005906:	2b01      	cmp	r3, #1
 8005908:	d108      	bne.n	800591c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800590e:	085b      	lsrs	r3, r3, #1
 8005910:	b29b      	uxth	r3, r3
 8005912:	4619      	mov	r1, r3
 8005914:	68f8      	ldr	r0, [r7, #12]
 8005916:	f7ff ff4e 	bl	80057b6 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800591a:	e002      	b.n	8005922 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800591c:	68f8      	ldr	r0, [r7, #12]
 800591e:	f7ff ff36 	bl	800578e <HAL_UART_RxHalfCpltCallback>
}
 8005922:	bf00      	nop
 8005924:	3710      	adds	r7, #16
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}

0800592a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800592a:	b580      	push	{r7, lr}
 800592c:	b084      	sub	sp, #16
 800592e:	af00      	add	r7, sp, #0
 8005930:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005932:	2300      	movs	r3, #0
 8005934:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800593a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	695b      	ldr	r3, [r3, #20]
 8005942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005946:	2b80      	cmp	r3, #128	; 0x80
 8005948:	bf0c      	ite	eq
 800594a:	2301      	moveq	r3, #1
 800594c:	2300      	movne	r3, #0
 800594e:	b2db      	uxtb	r3, r3
 8005950:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005958:	b2db      	uxtb	r3, r3
 800595a:	2b21      	cmp	r3, #33	; 0x21
 800595c:	d108      	bne.n	8005970 <UART_DMAError+0x46>
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d005      	beq.n	8005970 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	2200      	movs	r2, #0
 8005968:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800596a:	68b8      	ldr	r0, [r7, #8]
 800596c:	f000 f934 	bl	8005bd8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	695b      	ldr	r3, [r3, #20]
 8005976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800597a:	2b40      	cmp	r3, #64	; 0x40
 800597c:	bf0c      	ite	eq
 800597e:	2301      	moveq	r3, #1
 8005980:	2300      	movne	r3, #0
 8005982:	b2db      	uxtb	r3, r3
 8005984:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800598c:	b2db      	uxtb	r3, r3
 800598e:	2b22      	cmp	r3, #34	; 0x22
 8005990:	d108      	bne.n	80059a4 <UART_DMAError+0x7a>
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d005      	beq.n	80059a4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	2200      	movs	r2, #0
 800599c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800599e:	68b8      	ldr	r0, [r7, #8]
 80059a0:	f000 f942 	bl	8005c28 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a8:	f043 0210 	orr.w	r2, r3, #16
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80059b0:	68b8      	ldr	r0, [r7, #8]
 80059b2:	f7ff fef6 	bl	80057a2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059b6:	bf00      	nop
 80059b8:	3710      	adds	r7, #16
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}

080059be <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80059be:	b580      	push	{r7, lr}
 80059c0:	b090      	sub	sp, #64	; 0x40
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	60f8      	str	r0, [r7, #12]
 80059c6:	60b9      	str	r1, [r7, #8]
 80059c8:	603b      	str	r3, [r7, #0]
 80059ca:	4613      	mov	r3, r2
 80059cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059ce:	e050      	b.n	8005a72 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059d6:	d04c      	beq.n	8005a72 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80059d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d007      	beq.n	80059ee <UART_WaitOnFlagUntilTimeout+0x30>
 80059de:	f7fc faa1 	bl	8001f24 <HAL_GetTick>
 80059e2:	4602      	mov	r2, r0
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	1ad3      	subs	r3, r2, r3
 80059e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d241      	bcs.n	8005a72 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	330c      	adds	r3, #12
 80059f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f8:	e853 3f00 	ldrex	r3, [r3]
 80059fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80059fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a00:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	330c      	adds	r3, #12
 8005a0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005a0e:	637a      	str	r2, [r7, #52]	; 0x34
 8005a10:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a16:	e841 2300 	strex	r3, r2, [r1]
 8005a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d1e5      	bne.n	80059ee <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	3314      	adds	r3, #20
 8005a28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	e853 3f00 	ldrex	r3, [r3]
 8005a30:	613b      	str	r3, [r7, #16]
   return(result);
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	f023 0301 	bic.w	r3, r3, #1
 8005a38:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	3314      	adds	r3, #20
 8005a40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a42:	623a      	str	r2, [r7, #32]
 8005a44:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a46:	69f9      	ldr	r1, [r7, #28]
 8005a48:	6a3a      	ldr	r2, [r7, #32]
 8005a4a:	e841 2300 	strex	r3, r2, [r1]
 8005a4e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d1e5      	bne.n	8005a22 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2220      	movs	r2, #32
 8005a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2220      	movs	r2, #32
 8005a62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005a6e:	2303      	movs	r3, #3
 8005a70:	e00f      	b.n	8005a92 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	4013      	ands	r3, r2
 8005a7c:	68ba      	ldr	r2, [r7, #8]
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	bf0c      	ite	eq
 8005a82:	2301      	moveq	r3, #1
 8005a84:	2300      	movne	r3, #0
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	461a      	mov	r2, r3
 8005a8a:	79fb      	ldrb	r3, [r7, #7]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d09f      	beq.n	80059d0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a90:	2300      	movs	r3, #0
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3740      	adds	r7, #64	; 0x40
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
	...

08005a9c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b098      	sub	sp, #96	; 0x60
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	4613      	mov	r3, r2
 8005aa8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005aaa:	68ba      	ldr	r2, [r7, #8]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	88fa      	ldrh	r2, [r7, #6]
 8005ab4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2222      	movs	r2, #34	; 0x22
 8005ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac8:	4a40      	ldr	r2, [pc, #256]	; (8005bcc <UART_Start_Receive_DMA+0x130>)
 8005aca:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad0:	4a3f      	ldr	r2, [pc, #252]	; (8005bd0 <UART_Start_Receive_DMA+0x134>)
 8005ad2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad8:	4a3e      	ldr	r2, [pc, #248]	; (8005bd4 <UART_Start_Receive_DMA+0x138>)
 8005ada:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005ae4:	f107 0308 	add.w	r3, r7, #8
 8005ae8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	3304      	adds	r3, #4
 8005af4:	4619      	mov	r1, r3
 8005af6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	88fb      	ldrh	r3, [r7, #6]
 8005afc:	f7fc fbd2 	bl	80022a4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005b00:	2300      	movs	r3, #0
 8005b02:	613b      	str	r3, [r7, #16]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	613b      	str	r3, [r7, #16]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	613b      	str	r3, [r7, #16]
 8005b14:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d019      	beq.n	8005b5a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	330c      	adds	r3, #12
 8005b2c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b30:	e853 3f00 	ldrex	r3, [r3]
 8005b34:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b3c:	65bb      	str	r3, [r7, #88]	; 0x58
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	330c      	adds	r3, #12
 8005b44:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005b46:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005b48:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b4a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005b4c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b4e:	e841 2300 	strex	r3, r2, [r1]
 8005b52:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005b54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d1e5      	bne.n	8005b26 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	3314      	adds	r3, #20
 8005b60:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b64:	e853 3f00 	ldrex	r3, [r3]
 8005b68:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b6c:	f043 0301 	orr.w	r3, r3, #1
 8005b70:	657b      	str	r3, [r7, #84]	; 0x54
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	3314      	adds	r3, #20
 8005b78:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005b7a:	63ba      	str	r2, [r7, #56]	; 0x38
 8005b7c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b7e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005b80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b82:	e841 2300 	strex	r3, r2, [r1]
 8005b86:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d1e5      	bne.n	8005b5a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	3314      	adds	r3, #20
 8005b94:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b96:	69bb      	ldr	r3, [r7, #24]
 8005b98:	e853 3f00 	ldrex	r3, [r3]
 8005b9c:	617b      	str	r3, [r7, #20]
   return(result);
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ba4:	653b      	str	r3, [r7, #80]	; 0x50
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	3314      	adds	r3, #20
 8005bac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005bae:	627a      	str	r2, [r7, #36]	; 0x24
 8005bb0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb2:	6a39      	ldr	r1, [r7, #32]
 8005bb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bb6:	e841 2300 	strex	r3, r2, [r1]
 8005bba:	61fb      	str	r3, [r7, #28]
   return(result);
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d1e5      	bne.n	8005b8e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8005bc2:	2300      	movs	r3, #0
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3760      	adds	r7, #96	; 0x60
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}
 8005bcc:	080057cf 	.word	0x080057cf
 8005bd0:	080058f5 	.word	0x080058f5
 8005bd4:	0800592b 	.word	0x0800592b

08005bd8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b089      	sub	sp, #36	; 0x24
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	330c      	adds	r3, #12
 8005be6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	e853 3f00 	ldrex	r3, [r3]
 8005bee:	60bb      	str	r3, [r7, #8]
   return(result);
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005bf6:	61fb      	str	r3, [r7, #28]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	330c      	adds	r3, #12
 8005bfe:	69fa      	ldr	r2, [r7, #28]
 8005c00:	61ba      	str	r2, [r7, #24]
 8005c02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c04:	6979      	ldr	r1, [r7, #20]
 8005c06:	69ba      	ldr	r2, [r7, #24]
 8005c08:	e841 2300 	strex	r3, r2, [r1]
 8005c0c:	613b      	str	r3, [r7, #16]
   return(result);
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d1e5      	bne.n	8005be0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2220      	movs	r2, #32
 8005c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005c1c:	bf00      	nop
 8005c1e:	3724      	adds	r7, #36	; 0x24
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr

08005c28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b095      	sub	sp, #84	; 0x54
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	330c      	adds	r3, #12
 8005c36:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c3a:	e853 3f00 	ldrex	r3, [r3]
 8005c3e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c42:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	330c      	adds	r3, #12
 8005c4e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c50:	643a      	str	r2, [r7, #64]	; 0x40
 8005c52:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c54:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005c56:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c58:	e841 2300 	strex	r3, r2, [r1]
 8005c5c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d1e5      	bne.n	8005c30 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	3314      	adds	r3, #20
 8005c6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c6c:	6a3b      	ldr	r3, [r7, #32]
 8005c6e:	e853 3f00 	ldrex	r3, [r3]
 8005c72:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c74:	69fb      	ldr	r3, [r7, #28]
 8005c76:	f023 0301 	bic.w	r3, r3, #1
 8005c7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	3314      	adds	r3, #20
 8005c82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c84:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c8c:	e841 2300 	strex	r3, r2, [r1]
 8005c90:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d1e5      	bne.n	8005c64 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d119      	bne.n	8005cd4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	330c      	adds	r3, #12
 8005ca6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	e853 3f00 	ldrex	r3, [r3]
 8005cae:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	f023 0310 	bic.w	r3, r3, #16
 8005cb6:	647b      	str	r3, [r7, #68]	; 0x44
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	330c      	adds	r3, #12
 8005cbe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005cc0:	61ba      	str	r2, [r7, #24]
 8005cc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc4:	6979      	ldr	r1, [r7, #20]
 8005cc6:	69ba      	ldr	r2, [r7, #24]
 8005cc8:	e841 2300 	strex	r3, r2, [r1]
 8005ccc:	613b      	str	r3, [r7, #16]
   return(result);
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d1e5      	bne.n	8005ca0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2220      	movs	r2, #32
 8005cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005ce2:	bf00      	nop
 8005ce4:	3754      	adds	r7, #84	; 0x54
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr
	...

08005cf0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cf4:	b0c0      	sub	sp, #256	; 0x100
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	691b      	ldr	r3, [r3, #16]
 8005d04:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d0c:	68d9      	ldr	r1, [r3, #12]
 8005d0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	ea40 0301 	orr.w	r3, r0, r1
 8005d18:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d1e:	689a      	ldr	r2, [r3, #8]
 8005d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d24:	691b      	ldr	r3, [r3, #16]
 8005d26:	431a      	orrs	r2, r3
 8005d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d2c:	695b      	ldr	r3, [r3, #20]
 8005d2e:	431a      	orrs	r2, r3
 8005d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d34:	69db      	ldr	r3, [r3, #28]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005d48:	f021 010c 	bic.w	r1, r1, #12
 8005d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005d56:	430b      	orrs	r3, r1
 8005d58:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	695b      	ldr	r3, [r3, #20]
 8005d62:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d6a:	6999      	ldr	r1, [r3, #24]
 8005d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	ea40 0301 	orr.w	r3, r0, r1
 8005d76:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	4b8f      	ldr	r3, [pc, #572]	; (8005fbc <UART_SetConfig+0x2cc>)
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d005      	beq.n	8005d90 <UART_SetConfig+0xa0>
 8005d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	4b8d      	ldr	r3, [pc, #564]	; (8005fc0 <UART_SetConfig+0x2d0>)
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d104      	bne.n	8005d9a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005d90:	f7fd ffd0 	bl	8003d34 <HAL_RCC_GetPCLK2Freq>
 8005d94:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005d98:	e003      	b.n	8005da2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005d9a:	f7fd ffb7 	bl	8003d0c <HAL_RCC_GetPCLK1Freq>
 8005d9e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005da6:	69db      	ldr	r3, [r3, #28]
 8005da8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dac:	f040 810c 	bne.w	8005fc8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005db0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005db4:	2200      	movs	r2, #0
 8005db6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005dba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005dbe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005dc2:	4622      	mov	r2, r4
 8005dc4:	462b      	mov	r3, r5
 8005dc6:	1891      	adds	r1, r2, r2
 8005dc8:	65b9      	str	r1, [r7, #88]	; 0x58
 8005dca:	415b      	adcs	r3, r3
 8005dcc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005dce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005dd2:	4621      	mov	r1, r4
 8005dd4:	eb12 0801 	adds.w	r8, r2, r1
 8005dd8:	4629      	mov	r1, r5
 8005dda:	eb43 0901 	adc.w	r9, r3, r1
 8005dde:	f04f 0200 	mov.w	r2, #0
 8005de2:	f04f 0300 	mov.w	r3, #0
 8005de6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005dea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005dee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005df2:	4690      	mov	r8, r2
 8005df4:	4699      	mov	r9, r3
 8005df6:	4623      	mov	r3, r4
 8005df8:	eb18 0303 	adds.w	r3, r8, r3
 8005dfc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005e00:	462b      	mov	r3, r5
 8005e02:	eb49 0303 	adc.w	r3, r9, r3
 8005e06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005e0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005e16:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005e1a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005e1e:	460b      	mov	r3, r1
 8005e20:	18db      	adds	r3, r3, r3
 8005e22:	653b      	str	r3, [r7, #80]	; 0x50
 8005e24:	4613      	mov	r3, r2
 8005e26:	eb42 0303 	adc.w	r3, r2, r3
 8005e2a:	657b      	str	r3, [r7, #84]	; 0x54
 8005e2c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005e30:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005e34:	f7fa f9d4 	bl	80001e0 <__aeabi_uldivmod>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	460b      	mov	r3, r1
 8005e3c:	4b61      	ldr	r3, [pc, #388]	; (8005fc4 <UART_SetConfig+0x2d4>)
 8005e3e:	fba3 2302 	umull	r2, r3, r3, r2
 8005e42:	095b      	lsrs	r3, r3, #5
 8005e44:	011c      	lsls	r4, r3, #4
 8005e46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e50:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005e54:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005e58:	4642      	mov	r2, r8
 8005e5a:	464b      	mov	r3, r9
 8005e5c:	1891      	adds	r1, r2, r2
 8005e5e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005e60:	415b      	adcs	r3, r3
 8005e62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e64:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005e68:	4641      	mov	r1, r8
 8005e6a:	eb12 0a01 	adds.w	sl, r2, r1
 8005e6e:	4649      	mov	r1, r9
 8005e70:	eb43 0b01 	adc.w	fp, r3, r1
 8005e74:	f04f 0200 	mov.w	r2, #0
 8005e78:	f04f 0300 	mov.w	r3, #0
 8005e7c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005e80:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005e84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e88:	4692      	mov	sl, r2
 8005e8a:	469b      	mov	fp, r3
 8005e8c:	4643      	mov	r3, r8
 8005e8e:	eb1a 0303 	adds.w	r3, sl, r3
 8005e92:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005e96:	464b      	mov	r3, r9
 8005e98:	eb4b 0303 	adc.w	r3, fp, r3
 8005e9c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005eac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005eb0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005eb4:	460b      	mov	r3, r1
 8005eb6:	18db      	adds	r3, r3, r3
 8005eb8:	643b      	str	r3, [r7, #64]	; 0x40
 8005eba:	4613      	mov	r3, r2
 8005ebc:	eb42 0303 	adc.w	r3, r2, r3
 8005ec0:	647b      	str	r3, [r7, #68]	; 0x44
 8005ec2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005ec6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005eca:	f7fa f989 	bl	80001e0 <__aeabi_uldivmod>
 8005ece:	4602      	mov	r2, r0
 8005ed0:	460b      	mov	r3, r1
 8005ed2:	4611      	mov	r1, r2
 8005ed4:	4b3b      	ldr	r3, [pc, #236]	; (8005fc4 <UART_SetConfig+0x2d4>)
 8005ed6:	fba3 2301 	umull	r2, r3, r3, r1
 8005eda:	095b      	lsrs	r3, r3, #5
 8005edc:	2264      	movs	r2, #100	; 0x64
 8005ede:	fb02 f303 	mul.w	r3, r2, r3
 8005ee2:	1acb      	subs	r3, r1, r3
 8005ee4:	00db      	lsls	r3, r3, #3
 8005ee6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005eea:	4b36      	ldr	r3, [pc, #216]	; (8005fc4 <UART_SetConfig+0x2d4>)
 8005eec:	fba3 2302 	umull	r2, r3, r3, r2
 8005ef0:	095b      	lsrs	r3, r3, #5
 8005ef2:	005b      	lsls	r3, r3, #1
 8005ef4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005ef8:	441c      	add	r4, r3
 8005efa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005efe:	2200      	movs	r2, #0
 8005f00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f04:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005f08:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005f0c:	4642      	mov	r2, r8
 8005f0e:	464b      	mov	r3, r9
 8005f10:	1891      	adds	r1, r2, r2
 8005f12:	63b9      	str	r1, [r7, #56]	; 0x38
 8005f14:	415b      	adcs	r3, r3
 8005f16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f18:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005f1c:	4641      	mov	r1, r8
 8005f1e:	1851      	adds	r1, r2, r1
 8005f20:	6339      	str	r1, [r7, #48]	; 0x30
 8005f22:	4649      	mov	r1, r9
 8005f24:	414b      	adcs	r3, r1
 8005f26:	637b      	str	r3, [r7, #52]	; 0x34
 8005f28:	f04f 0200 	mov.w	r2, #0
 8005f2c:	f04f 0300 	mov.w	r3, #0
 8005f30:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005f34:	4659      	mov	r1, fp
 8005f36:	00cb      	lsls	r3, r1, #3
 8005f38:	4651      	mov	r1, sl
 8005f3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f3e:	4651      	mov	r1, sl
 8005f40:	00ca      	lsls	r2, r1, #3
 8005f42:	4610      	mov	r0, r2
 8005f44:	4619      	mov	r1, r3
 8005f46:	4603      	mov	r3, r0
 8005f48:	4642      	mov	r2, r8
 8005f4a:	189b      	adds	r3, r3, r2
 8005f4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f50:	464b      	mov	r3, r9
 8005f52:	460a      	mov	r2, r1
 8005f54:	eb42 0303 	adc.w	r3, r2, r3
 8005f58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005f68:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005f6c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005f70:	460b      	mov	r3, r1
 8005f72:	18db      	adds	r3, r3, r3
 8005f74:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f76:	4613      	mov	r3, r2
 8005f78:	eb42 0303 	adc.w	r3, r2, r3
 8005f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005f82:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005f86:	f7fa f92b 	bl	80001e0 <__aeabi_uldivmod>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	4b0d      	ldr	r3, [pc, #52]	; (8005fc4 <UART_SetConfig+0x2d4>)
 8005f90:	fba3 1302 	umull	r1, r3, r3, r2
 8005f94:	095b      	lsrs	r3, r3, #5
 8005f96:	2164      	movs	r1, #100	; 0x64
 8005f98:	fb01 f303 	mul.w	r3, r1, r3
 8005f9c:	1ad3      	subs	r3, r2, r3
 8005f9e:	00db      	lsls	r3, r3, #3
 8005fa0:	3332      	adds	r3, #50	; 0x32
 8005fa2:	4a08      	ldr	r2, [pc, #32]	; (8005fc4 <UART_SetConfig+0x2d4>)
 8005fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8005fa8:	095b      	lsrs	r3, r3, #5
 8005faa:	f003 0207 	and.w	r2, r3, #7
 8005fae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4422      	add	r2, r4
 8005fb6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005fb8:	e106      	b.n	80061c8 <UART_SetConfig+0x4d8>
 8005fba:	bf00      	nop
 8005fbc:	40011000 	.word	0x40011000
 8005fc0:	40011400 	.word	0x40011400
 8005fc4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005fc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005fd2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005fd6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005fda:	4642      	mov	r2, r8
 8005fdc:	464b      	mov	r3, r9
 8005fde:	1891      	adds	r1, r2, r2
 8005fe0:	6239      	str	r1, [r7, #32]
 8005fe2:	415b      	adcs	r3, r3
 8005fe4:	627b      	str	r3, [r7, #36]	; 0x24
 8005fe6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005fea:	4641      	mov	r1, r8
 8005fec:	1854      	adds	r4, r2, r1
 8005fee:	4649      	mov	r1, r9
 8005ff0:	eb43 0501 	adc.w	r5, r3, r1
 8005ff4:	f04f 0200 	mov.w	r2, #0
 8005ff8:	f04f 0300 	mov.w	r3, #0
 8005ffc:	00eb      	lsls	r3, r5, #3
 8005ffe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006002:	00e2      	lsls	r2, r4, #3
 8006004:	4614      	mov	r4, r2
 8006006:	461d      	mov	r5, r3
 8006008:	4643      	mov	r3, r8
 800600a:	18e3      	adds	r3, r4, r3
 800600c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006010:	464b      	mov	r3, r9
 8006012:	eb45 0303 	adc.w	r3, r5, r3
 8006016:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800601a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	2200      	movs	r2, #0
 8006022:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006026:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800602a:	f04f 0200 	mov.w	r2, #0
 800602e:	f04f 0300 	mov.w	r3, #0
 8006032:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006036:	4629      	mov	r1, r5
 8006038:	008b      	lsls	r3, r1, #2
 800603a:	4621      	mov	r1, r4
 800603c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006040:	4621      	mov	r1, r4
 8006042:	008a      	lsls	r2, r1, #2
 8006044:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006048:	f7fa f8ca 	bl	80001e0 <__aeabi_uldivmod>
 800604c:	4602      	mov	r2, r0
 800604e:	460b      	mov	r3, r1
 8006050:	4b60      	ldr	r3, [pc, #384]	; (80061d4 <UART_SetConfig+0x4e4>)
 8006052:	fba3 2302 	umull	r2, r3, r3, r2
 8006056:	095b      	lsrs	r3, r3, #5
 8006058:	011c      	lsls	r4, r3, #4
 800605a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800605e:	2200      	movs	r2, #0
 8006060:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006064:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006068:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800606c:	4642      	mov	r2, r8
 800606e:	464b      	mov	r3, r9
 8006070:	1891      	adds	r1, r2, r2
 8006072:	61b9      	str	r1, [r7, #24]
 8006074:	415b      	adcs	r3, r3
 8006076:	61fb      	str	r3, [r7, #28]
 8006078:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800607c:	4641      	mov	r1, r8
 800607e:	1851      	adds	r1, r2, r1
 8006080:	6139      	str	r1, [r7, #16]
 8006082:	4649      	mov	r1, r9
 8006084:	414b      	adcs	r3, r1
 8006086:	617b      	str	r3, [r7, #20]
 8006088:	f04f 0200 	mov.w	r2, #0
 800608c:	f04f 0300 	mov.w	r3, #0
 8006090:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006094:	4659      	mov	r1, fp
 8006096:	00cb      	lsls	r3, r1, #3
 8006098:	4651      	mov	r1, sl
 800609a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800609e:	4651      	mov	r1, sl
 80060a0:	00ca      	lsls	r2, r1, #3
 80060a2:	4610      	mov	r0, r2
 80060a4:	4619      	mov	r1, r3
 80060a6:	4603      	mov	r3, r0
 80060a8:	4642      	mov	r2, r8
 80060aa:	189b      	adds	r3, r3, r2
 80060ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80060b0:	464b      	mov	r3, r9
 80060b2:	460a      	mov	r2, r1
 80060b4:	eb42 0303 	adc.w	r3, r2, r3
 80060b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80060bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	2200      	movs	r2, #0
 80060c4:	67bb      	str	r3, [r7, #120]	; 0x78
 80060c6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80060c8:	f04f 0200 	mov.w	r2, #0
 80060cc:	f04f 0300 	mov.w	r3, #0
 80060d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80060d4:	4649      	mov	r1, r9
 80060d6:	008b      	lsls	r3, r1, #2
 80060d8:	4641      	mov	r1, r8
 80060da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060de:	4641      	mov	r1, r8
 80060e0:	008a      	lsls	r2, r1, #2
 80060e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80060e6:	f7fa f87b 	bl	80001e0 <__aeabi_uldivmod>
 80060ea:	4602      	mov	r2, r0
 80060ec:	460b      	mov	r3, r1
 80060ee:	4611      	mov	r1, r2
 80060f0:	4b38      	ldr	r3, [pc, #224]	; (80061d4 <UART_SetConfig+0x4e4>)
 80060f2:	fba3 2301 	umull	r2, r3, r3, r1
 80060f6:	095b      	lsrs	r3, r3, #5
 80060f8:	2264      	movs	r2, #100	; 0x64
 80060fa:	fb02 f303 	mul.w	r3, r2, r3
 80060fe:	1acb      	subs	r3, r1, r3
 8006100:	011b      	lsls	r3, r3, #4
 8006102:	3332      	adds	r3, #50	; 0x32
 8006104:	4a33      	ldr	r2, [pc, #204]	; (80061d4 <UART_SetConfig+0x4e4>)
 8006106:	fba2 2303 	umull	r2, r3, r2, r3
 800610a:	095b      	lsrs	r3, r3, #5
 800610c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006110:	441c      	add	r4, r3
 8006112:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006116:	2200      	movs	r2, #0
 8006118:	673b      	str	r3, [r7, #112]	; 0x70
 800611a:	677a      	str	r2, [r7, #116]	; 0x74
 800611c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006120:	4642      	mov	r2, r8
 8006122:	464b      	mov	r3, r9
 8006124:	1891      	adds	r1, r2, r2
 8006126:	60b9      	str	r1, [r7, #8]
 8006128:	415b      	adcs	r3, r3
 800612a:	60fb      	str	r3, [r7, #12]
 800612c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006130:	4641      	mov	r1, r8
 8006132:	1851      	adds	r1, r2, r1
 8006134:	6039      	str	r1, [r7, #0]
 8006136:	4649      	mov	r1, r9
 8006138:	414b      	adcs	r3, r1
 800613a:	607b      	str	r3, [r7, #4]
 800613c:	f04f 0200 	mov.w	r2, #0
 8006140:	f04f 0300 	mov.w	r3, #0
 8006144:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006148:	4659      	mov	r1, fp
 800614a:	00cb      	lsls	r3, r1, #3
 800614c:	4651      	mov	r1, sl
 800614e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006152:	4651      	mov	r1, sl
 8006154:	00ca      	lsls	r2, r1, #3
 8006156:	4610      	mov	r0, r2
 8006158:	4619      	mov	r1, r3
 800615a:	4603      	mov	r3, r0
 800615c:	4642      	mov	r2, r8
 800615e:	189b      	adds	r3, r3, r2
 8006160:	66bb      	str	r3, [r7, #104]	; 0x68
 8006162:	464b      	mov	r3, r9
 8006164:	460a      	mov	r2, r1
 8006166:	eb42 0303 	adc.w	r3, r2, r3
 800616a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800616c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	663b      	str	r3, [r7, #96]	; 0x60
 8006176:	667a      	str	r2, [r7, #100]	; 0x64
 8006178:	f04f 0200 	mov.w	r2, #0
 800617c:	f04f 0300 	mov.w	r3, #0
 8006180:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006184:	4649      	mov	r1, r9
 8006186:	008b      	lsls	r3, r1, #2
 8006188:	4641      	mov	r1, r8
 800618a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800618e:	4641      	mov	r1, r8
 8006190:	008a      	lsls	r2, r1, #2
 8006192:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006196:	f7fa f823 	bl	80001e0 <__aeabi_uldivmod>
 800619a:	4602      	mov	r2, r0
 800619c:	460b      	mov	r3, r1
 800619e:	4b0d      	ldr	r3, [pc, #52]	; (80061d4 <UART_SetConfig+0x4e4>)
 80061a0:	fba3 1302 	umull	r1, r3, r3, r2
 80061a4:	095b      	lsrs	r3, r3, #5
 80061a6:	2164      	movs	r1, #100	; 0x64
 80061a8:	fb01 f303 	mul.w	r3, r1, r3
 80061ac:	1ad3      	subs	r3, r2, r3
 80061ae:	011b      	lsls	r3, r3, #4
 80061b0:	3332      	adds	r3, #50	; 0x32
 80061b2:	4a08      	ldr	r2, [pc, #32]	; (80061d4 <UART_SetConfig+0x4e4>)
 80061b4:	fba2 2303 	umull	r2, r3, r2, r3
 80061b8:	095b      	lsrs	r3, r3, #5
 80061ba:	f003 020f 	and.w	r2, r3, #15
 80061be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4422      	add	r2, r4
 80061c6:	609a      	str	r2, [r3, #8]
}
 80061c8:	bf00      	nop
 80061ca:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80061ce:	46bd      	mov	sp, r7
 80061d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061d4:	51eb851f 	.word	0x51eb851f

080061d8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80061d8:	b480      	push	{r7}
 80061da:	b085      	sub	sp, #20
 80061dc:	af00      	add	r7, sp, #0
 80061de:	4603      	mov	r3, r0
 80061e0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80061e2:	2300      	movs	r3, #0
 80061e4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80061e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80061ea:	2b84      	cmp	r3, #132	; 0x84
 80061ec:	d005      	beq.n	80061fa <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80061ee:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	4413      	add	r3, r2
 80061f6:	3303      	adds	r3, #3
 80061f8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80061fa:	68fb      	ldr	r3, [r7, #12]
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3714      	adds	r7, #20
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800620c:	f000 faf6 	bl	80067fc <vTaskStartScheduler>
  
  return osOK;
 8006210:	2300      	movs	r3, #0
}
 8006212:	4618      	mov	r0, r3
 8006214:	bd80      	pop	{r7, pc}

08006216 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006216:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006218:	b089      	sub	sp, #36	; 0x24
 800621a:	af04      	add	r7, sp, #16
 800621c:	6078      	str	r0, [r7, #4]
 800621e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	695b      	ldr	r3, [r3, #20]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d020      	beq.n	800626a <osThreadCreate+0x54>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	699b      	ldr	r3, [r3, #24]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d01c      	beq.n	800626a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	685c      	ldr	r4, [r3, #4]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	691e      	ldr	r6, [r3, #16]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006242:	4618      	mov	r0, r3
 8006244:	f7ff ffc8 	bl	80061d8 <makeFreeRtosPriority>
 8006248:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	695b      	ldr	r3, [r3, #20]
 800624e:	687a      	ldr	r2, [r7, #4]
 8006250:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006252:	9202      	str	r2, [sp, #8]
 8006254:	9301      	str	r3, [sp, #4]
 8006256:	9100      	str	r1, [sp, #0]
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	4632      	mov	r2, r6
 800625c:	4629      	mov	r1, r5
 800625e:	4620      	mov	r0, r4
 8006260:	f000 f8ed 	bl	800643e <xTaskCreateStatic>
 8006264:	4603      	mov	r3, r0
 8006266:	60fb      	str	r3, [r7, #12]
 8006268:	e01c      	b.n	80062a4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	685c      	ldr	r4, [r3, #4]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006276:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800627e:	4618      	mov	r0, r3
 8006280:	f7ff ffaa 	bl	80061d8 <makeFreeRtosPriority>
 8006284:	4602      	mov	r2, r0
 8006286:	f107 030c 	add.w	r3, r7, #12
 800628a:	9301      	str	r3, [sp, #4]
 800628c:	9200      	str	r2, [sp, #0]
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	4632      	mov	r2, r6
 8006292:	4629      	mov	r1, r5
 8006294:	4620      	mov	r0, r4
 8006296:	f000 f92f 	bl	80064f8 <xTaskCreate>
 800629a:	4603      	mov	r3, r0
 800629c:	2b01      	cmp	r3, #1
 800629e:	d001      	beq.n	80062a4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80062a0:	2300      	movs	r3, #0
 80062a2:	e000      	b.n	80062a6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80062a4:	68fb      	ldr	r3, [r7, #12]
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3714      	adds	r7, #20
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

080062ae <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80062ae:	b580      	push	{r7, lr}
 80062b0:	b084      	sub	sp, #16
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d001      	beq.n	80062c4 <osDelay+0x16>
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	e000      	b.n	80062c6 <osDelay+0x18>
 80062c4:	2301      	movs	r3, #1
 80062c6:	4618      	mov	r0, r3
 80062c8:	f000 fa64 	bl	8006794 <vTaskDelay>
  
  return osOK;
 80062cc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3710      	adds	r7, #16
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}

080062d6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80062d6:	b480      	push	{r7}
 80062d8:	b083      	sub	sp, #12
 80062da:	af00      	add	r7, sp, #0
 80062dc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f103 0208 	add.w	r2, r3, #8
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f04f 32ff 	mov.w	r2, #4294967295
 80062ee:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f103 0208 	add.w	r2, r3, #8
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f103 0208 	add.w	r2, r3, #8
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2200      	movs	r2, #0
 8006308:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800630a:	bf00      	nop
 800630c:	370c      	adds	r7, #12
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr

08006316 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006316:	b480      	push	{r7}
 8006318:	b083      	sub	sp, #12
 800631a:	af00      	add	r7, sp, #0
 800631c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2200      	movs	r2, #0
 8006322:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006324:	bf00      	nop
 8006326:	370c      	adds	r7, #12
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006330:	b480      	push	{r7}
 8006332:	b085      	sub	sp, #20
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	68fa      	ldr	r2, [r7, #12]
 8006344:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	689a      	ldr	r2, [r3, #8]
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	683a      	ldr	r2, [r7, #0]
 8006354:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	683a      	ldr	r2, [r7, #0]
 800635a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	1c5a      	adds	r2, r3, #1
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	601a      	str	r2, [r3, #0]
}
 800636c:	bf00      	nop
 800636e:	3714      	adds	r7, #20
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr

08006378 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006378:	b480      	push	{r7}
 800637a:	b085      	sub	sp, #20
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800638e:	d103      	bne.n	8006398 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	691b      	ldr	r3, [r3, #16]
 8006394:	60fb      	str	r3, [r7, #12]
 8006396:	e00c      	b.n	80063b2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	3308      	adds	r3, #8
 800639c:	60fb      	str	r3, [r7, #12]
 800639e:	e002      	b.n	80063a6 <vListInsert+0x2e>
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	60fb      	str	r3, [r7, #12]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	68ba      	ldr	r2, [r7, #8]
 80063ae:	429a      	cmp	r2, r3
 80063b0:	d2f6      	bcs.n	80063a0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	685a      	ldr	r2, [r3, #4]
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	683a      	ldr	r2, [r7, #0]
 80063c0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	68fa      	ldr	r2, [r7, #12]
 80063c6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	683a      	ldr	r2, [r7, #0]
 80063cc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	1c5a      	adds	r2, r3, #1
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	601a      	str	r2, [r3, #0]
}
 80063de:	bf00      	nop
 80063e0:	3714      	adds	r7, #20
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr

080063ea <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80063ea:	b480      	push	{r7}
 80063ec:	b085      	sub	sp, #20
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	6892      	ldr	r2, [r2, #8]
 8006400:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	6852      	ldr	r2, [r2, #4]
 800640a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	687a      	ldr	r2, [r7, #4]
 8006412:	429a      	cmp	r2, r3
 8006414:	d103      	bne.n	800641e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	689a      	ldr	r2, [r3, #8]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2200      	movs	r2, #0
 8006422:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	1e5a      	subs	r2, r3, #1
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
}
 8006432:	4618      	mov	r0, r3
 8006434:	3714      	adds	r7, #20
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr

0800643e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800643e:	b580      	push	{r7, lr}
 8006440:	b08e      	sub	sp, #56	; 0x38
 8006442:	af04      	add	r7, sp, #16
 8006444:	60f8      	str	r0, [r7, #12]
 8006446:	60b9      	str	r1, [r7, #8]
 8006448:	607a      	str	r2, [r7, #4]
 800644a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800644c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800644e:	2b00      	cmp	r3, #0
 8006450:	d10a      	bne.n	8006468 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006456:	f383 8811 	msr	BASEPRI, r3
 800645a:	f3bf 8f6f 	isb	sy
 800645e:	f3bf 8f4f 	dsb	sy
 8006462:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006464:	bf00      	nop
 8006466:	e7fe      	b.n	8006466 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800646a:	2b00      	cmp	r3, #0
 800646c:	d10a      	bne.n	8006484 <xTaskCreateStatic+0x46>
	__asm volatile
 800646e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006472:	f383 8811 	msr	BASEPRI, r3
 8006476:	f3bf 8f6f 	isb	sy
 800647a:	f3bf 8f4f 	dsb	sy
 800647e:	61fb      	str	r3, [r7, #28]
}
 8006480:	bf00      	nop
 8006482:	e7fe      	b.n	8006482 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006484:	23a0      	movs	r3, #160	; 0xa0
 8006486:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	2ba0      	cmp	r3, #160	; 0xa0
 800648c:	d00a      	beq.n	80064a4 <xTaskCreateStatic+0x66>
	__asm volatile
 800648e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006492:	f383 8811 	msr	BASEPRI, r3
 8006496:	f3bf 8f6f 	isb	sy
 800649a:	f3bf 8f4f 	dsb	sy
 800649e:	61bb      	str	r3, [r7, #24]
}
 80064a0:	bf00      	nop
 80064a2:	e7fe      	b.n	80064a2 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80064a4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80064a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d01e      	beq.n	80064ea <xTaskCreateStatic+0xac>
 80064ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d01b      	beq.n	80064ea <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80064b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064b4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80064b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80064ba:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80064bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064be:	2202      	movs	r2, #2
 80064c0:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80064c4:	2300      	movs	r3, #0
 80064c6:	9303      	str	r3, [sp, #12]
 80064c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ca:	9302      	str	r3, [sp, #8]
 80064cc:	f107 0314 	add.w	r3, r7, #20
 80064d0:	9301      	str	r3, [sp, #4]
 80064d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d4:	9300      	str	r3, [sp, #0]
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	68b9      	ldr	r1, [r7, #8]
 80064dc:	68f8      	ldr	r0, [r7, #12]
 80064de:	f000 f851 	bl	8006584 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80064e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80064e4:	f000 f8ec 	bl	80066c0 <prvAddNewTaskToReadyList>
 80064e8:	e001      	b.n	80064ee <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80064ea:	2300      	movs	r3, #0
 80064ec:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80064ee:	697b      	ldr	r3, [r7, #20]
	}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3728      	adds	r7, #40	; 0x28
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}

080064f8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b08c      	sub	sp, #48	; 0x30
 80064fc:	af04      	add	r7, sp, #16
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	60b9      	str	r1, [r7, #8]
 8006502:	603b      	str	r3, [r7, #0]
 8006504:	4613      	mov	r3, r2
 8006506:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006508:	88fb      	ldrh	r3, [r7, #6]
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	4618      	mov	r0, r3
 800650e:	f000 fef3 	bl	80072f8 <pvPortMalloc>
 8006512:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d00e      	beq.n	8006538 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800651a:	20a0      	movs	r0, #160	; 0xa0
 800651c:	f000 feec 	bl	80072f8 <pvPortMalloc>
 8006520:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006522:	69fb      	ldr	r3, [r7, #28]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d003      	beq.n	8006530 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006528:	69fb      	ldr	r3, [r7, #28]
 800652a:	697a      	ldr	r2, [r7, #20]
 800652c:	631a      	str	r2, [r3, #48]	; 0x30
 800652e:	e005      	b.n	800653c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006530:	6978      	ldr	r0, [r7, #20]
 8006532:	f000 ffad 	bl	8007490 <vPortFree>
 8006536:	e001      	b.n	800653c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006538:	2300      	movs	r3, #0
 800653a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800653c:	69fb      	ldr	r3, [r7, #28]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d017      	beq.n	8006572 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006542:	69fb      	ldr	r3, [r7, #28]
 8006544:	2200      	movs	r2, #0
 8006546:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800654a:	88fa      	ldrh	r2, [r7, #6]
 800654c:	2300      	movs	r3, #0
 800654e:	9303      	str	r3, [sp, #12]
 8006550:	69fb      	ldr	r3, [r7, #28]
 8006552:	9302      	str	r3, [sp, #8]
 8006554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006556:	9301      	str	r3, [sp, #4]
 8006558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800655a:	9300      	str	r3, [sp, #0]
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	68b9      	ldr	r1, [r7, #8]
 8006560:	68f8      	ldr	r0, [r7, #12]
 8006562:	f000 f80f 	bl	8006584 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006566:	69f8      	ldr	r0, [r7, #28]
 8006568:	f000 f8aa 	bl	80066c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800656c:	2301      	movs	r3, #1
 800656e:	61bb      	str	r3, [r7, #24]
 8006570:	e002      	b.n	8006578 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006572:	f04f 33ff 	mov.w	r3, #4294967295
 8006576:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006578:	69bb      	ldr	r3, [r7, #24]
	}
 800657a:	4618      	mov	r0, r3
 800657c:	3720      	adds	r7, #32
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
	...

08006584 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b088      	sub	sp, #32
 8006588:	af00      	add	r7, sp, #0
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	60b9      	str	r1, [r7, #8]
 800658e:	607a      	str	r2, [r7, #4]
 8006590:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006594:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800659c:	3b01      	subs	r3, #1
 800659e:	009b      	lsls	r3, r3, #2
 80065a0:	4413      	add	r3, r2
 80065a2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80065a4:	69bb      	ldr	r3, [r7, #24]
 80065a6:	f023 0307 	bic.w	r3, r3, #7
 80065aa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80065ac:	69bb      	ldr	r3, [r7, #24]
 80065ae:	f003 0307 	and.w	r3, r3, #7
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d00a      	beq.n	80065cc <prvInitialiseNewTask+0x48>
	__asm volatile
 80065b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ba:	f383 8811 	msr	BASEPRI, r3
 80065be:	f3bf 8f6f 	isb	sy
 80065c2:	f3bf 8f4f 	dsb	sy
 80065c6:	617b      	str	r3, [r7, #20]
}
 80065c8:	bf00      	nop
 80065ca:	e7fe      	b.n	80065ca <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d01f      	beq.n	8006612 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80065d2:	2300      	movs	r3, #0
 80065d4:	61fb      	str	r3, [r7, #28]
 80065d6:	e012      	b.n	80065fe <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80065d8:	68ba      	ldr	r2, [r7, #8]
 80065da:	69fb      	ldr	r3, [r7, #28]
 80065dc:	4413      	add	r3, r2
 80065de:	7819      	ldrb	r1, [r3, #0]
 80065e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065e2:	69fb      	ldr	r3, [r7, #28]
 80065e4:	4413      	add	r3, r2
 80065e6:	3334      	adds	r3, #52	; 0x34
 80065e8:	460a      	mov	r2, r1
 80065ea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80065ec:	68ba      	ldr	r2, [r7, #8]
 80065ee:	69fb      	ldr	r3, [r7, #28]
 80065f0:	4413      	add	r3, r2
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d006      	beq.n	8006606 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80065f8:	69fb      	ldr	r3, [r7, #28]
 80065fa:	3301      	adds	r3, #1
 80065fc:	61fb      	str	r3, [r7, #28]
 80065fe:	69fb      	ldr	r3, [r7, #28]
 8006600:	2b0f      	cmp	r3, #15
 8006602:	d9e9      	bls.n	80065d8 <prvInitialiseNewTask+0x54>
 8006604:	e000      	b.n	8006608 <prvInitialiseNewTask+0x84>
			{
				break;
 8006606:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800660a:	2200      	movs	r2, #0
 800660c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006610:	e003      	b.n	800661a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006614:	2200      	movs	r2, #0
 8006616:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800661a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800661c:	2b06      	cmp	r3, #6
 800661e:	d901      	bls.n	8006624 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006620:	2306      	movs	r3, #6
 8006622:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006626:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006628:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800662a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800662c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800662e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006632:	2200      	movs	r2, #0
 8006634:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006638:	3304      	adds	r3, #4
 800663a:	4618      	mov	r0, r3
 800663c:	f7ff fe6b 	bl	8006316 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006642:	3318      	adds	r3, #24
 8006644:	4618      	mov	r0, r3
 8006646:	f7ff fe66 	bl	8006316 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800664a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800664c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800664e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006652:	f1c3 0207 	rsb	r2, r3, #7
 8006656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006658:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800665a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800665c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800665e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006662:	2200      	movs	r2, #0
 8006664:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800666a:	2200      	movs	r2, #0
 800666c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006672:	334c      	adds	r3, #76	; 0x4c
 8006674:	224c      	movs	r2, #76	; 0x4c
 8006676:	2100      	movs	r1, #0
 8006678:	4618      	mov	r0, r3
 800667a:	f001 fa1d 	bl	8007ab8 <memset>
 800667e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006680:	4a0c      	ldr	r2, [pc, #48]	; (80066b4 <prvInitialiseNewTask+0x130>)
 8006682:	651a      	str	r2, [r3, #80]	; 0x50
 8006684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006686:	4a0c      	ldr	r2, [pc, #48]	; (80066b8 <prvInitialiseNewTask+0x134>)
 8006688:	655a      	str	r2, [r3, #84]	; 0x54
 800668a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800668c:	4a0b      	ldr	r2, [pc, #44]	; (80066bc <prvInitialiseNewTask+0x138>)
 800668e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006690:	683a      	ldr	r2, [r7, #0]
 8006692:	68f9      	ldr	r1, [r7, #12]
 8006694:	69b8      	ldr	r0, [r7, #24]
 8006696:	f000 fc1f 	bl	8006ed8 <pxPortInitialiseStack>
 800669a:	4602      	mov	r2, r0
 800669c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800669e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80066a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d002      	beq.n	80066ac <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80066a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066aa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80066ac:	bf00      	nop
 80066ae:	3720      	adds	r7, #32
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}
 80066b4:	20004384 	.word	0x20004384
 80066b8:	200043ec 	.word	0x200043ec
 80066bc:	20004454 	.word	0x20004454

080066c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b082      	sub	sp, #8
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80066c8:	f000 fd34 	bl	8007134 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80066cc:	4b2a      	ldr	r3, [pc, #168]	; (8006778 <prvAddNewTaskToReadyList+0xb8>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	3301      	adds	r3, #1
 80066d2:	4a29      	ldr	r2, [pc, #164]	; (8006778 <prvAddNewTaskToReadyList+0xb8>)
 80066d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80066d6:	4b29      	ldr	r3, [pc, #164]	; (800677c <prvAddNewTaskToReadyList+0xbc>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d109      	bne.n	80066f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80066de:	4a27      	ldr	r2, [pc, #156]	; (800677c <prvAddNewTaskToReadyList+0xbc>)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80066e4:	4b24      	ldr	r3, [pc, #144]	; (8006778 <prvAddNewTaskToReadyList+0xb8>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d110      	bne.n	800670e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80066ec:	f000 facc 	bl	8006c88 <prvInitialiseTaskLists>
 80066f0:	e00d      	b.n	800670e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80066f2:	4b23      	ldr	r3, [pc, #140]	; (8006780 <prvAddNewTaskToReadyList+0xc0>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d109      	bne.n	800670e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80066fa:	4b20      	ldr	r3, [pc, #128]	; (800677c <prvAddNewTaskToReadyList+0xbc>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006704:	429a      	cmp	r2, r3
 8006706:	d802      	bhi.n	800670e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006708:	4a1c      	ldr	r2, [pc, #112]	; (800677c <prvAddNewTaskToReadyList+0xbc>)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800670e:	4b1d      	ldr	r3, [pc, #116]	; (8006784 <prvAddNewTaskToReadyList+0xc4>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	3301      	adds	r3, #1
 8006714:	4a1b      	ldr	r2, [pc, #108]	; (8006784 <prvAddNewTaskToReadyList+0xc4>)
 8006716:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800671c:	2201      	movs	r2, #1
 800671e:	409a      	lsls	r2, r3
 8006720:	4b19      	ldr	r3, [pc, #100]	; (8006788 <prvAddNewTaskToReadyList+0xc8>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4313      	orrs	r3, r2
 8006726:	4a18      	ldr	r2, [pc, #96]	; (8006788 <prvAddNewTaskToReadyList+0xc8>)
 8006728:	6013      	str	r3, [r2, #0]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800672e:	4613      	mov	r3, r2
 8006730:	009b      	lsls	r3, r3, #2
 8006732:	4413      	add	r3, r2
 8006734:	009b      	lsls	r3, r3, #2
 8006736:	4a15      	ldr	r2, [pc, #84]	; (800678c <prvAddNewTaskToReadyList+0xcc>)
 8006738:	441a      	add	r2, r3
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	3304      	adds	r3, #4
 800673e:	4619      	mov	r1, r3
 8006740:	4610      	mov	r0, r2
 8006742:	f7ff fdf5 	bl	8006330 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006746:	f000 fd25 	bl	8007194 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800674a:	4b0d      	ldr	r3, [pc, #52]	; (8006780 <prvAddNewTaskToReadyList+0xc0>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d00e      	beq.n	8006770 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006752:	4b0a      	ldr	r3, [pc, #40]	; (800677c <prvAddNewTaskToReadyList+0xbc>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800675c:	429a      	cmp	r2, r3
 800675e:	d207      	bcs.n	8006770 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006760:	4b0b      	ldr	r3, [pc, #44]	; (8006790 <prvAddNewTaskToReadyList+0xd0>)
 8006762:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006766:	601a      	str	r2, [r3, #0]
 8006768:	f3bf 8f4f 	dsb	sy
 800676c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006770:	bf00      	nop
 8006772:	3708      	adds	r7, #8
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}
 8006778:	20000730 	.word	0x20000730
 800677c:	20000630 	.word	0x20000630
 8006780:	2000073c 	.word	0x2000073c
 8006784:	2000074c 	.word	0x2000074c
 8006788:	20000738 	.word	0x20000738
 800678c:	20000634 	.word	0x20000634
 8006790:	e000ed04 	.word	0xe000ed04

08006794 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006794:	b580      	push	{r7, lr}
 8006796:	b084      	sub	sp, #16
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800679c:	2300      	movs	r3, #0
 800679e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d017      	beq.n	80067d6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80067a6:	4b13      	ldr	r3, [pc, #76]	; (80067f4 <vTaskDelay+0x60>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d00a      	beq.n	80067c4 <vTaskDelay+0x30>
	__asm volatile
 80067ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b2:	f383 8811 	msr	BASEPRI, r3
 80067b6:	f3bf 8f6f 	isb	sy
 80067ba:	f3bf 8f4f 	dsb	sy
 80067be:	60bb      	str	r3, [r7, #8]
}
 80067c0:	bf00      	nop
 80067c2:	e7fe      	b.n	80067c2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80067c4:	f000 f884 	bl	80068d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80067c8:	2100      	movs	r1, #0
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f000 fb1e 	bl	8006e0c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80067d0:	f000 f88c 	bl	80068ec <xTaskResumeAll>
 80067d4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d107      	bne.n	80067ec <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80067dc:	4b06      	ldr	r3, [pc, #24]	; (80067f8 <vTaskDelay+0x64>)
 80067de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067e2:	601a      	str	r2, [r3, #0]
 80067e4:	f3bf 8f4f 	dsb	sy
 80067e8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80067ec:	bf00      	nop
 80067ee:	3710      	adds	r7, #16
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}
 80067f4:	20000758 	.word	0x20000758
 80067f8:	e000ed04 	.word	0xe000ed04

080067fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b08a      	sub	sp, #40	; 0x28
 8006800:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006802:	2300      	movs	r3, #0
 8006804:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006806:	2300      	movs	r3, #0
 8006808:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800680a:	463a      	mov	r2, r7
 800680c:	1d39      	adds	r1, r7, #4
 800680e:	f107 0308 	add.w	r3, r7, #8
 8006812:	4618      	mov	r0, r3
 8006814:	f7f9 ffc6 	bl	80007a4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006818:	6839      	ldr	r1, [r7, #0]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	68ba      	ldr	r2, [r7, #8]
 800681e:	9202      	str	r2, [sp, #8]
 8006820:	9301      	str	r3, [sp, #4]
 8006822:	2300      	movs	r3, #0
 8006824:	9300      	str	r3, [sp, #0]
 8006826:	2300      	movs	r3, #0
 8006828:	460a      	mov	r2, r1
 800682a:	4921      	ldr	r1, [pc, #132]	; (80068b0 <vTaskStartScheduler+0xb4>)
 800682c:	4821      	ldr	r0, [pc, #132]	; (80068b4 <vTaskStartScheduler+0xb8>)
 800682e:	f7ff fe06 	bl	800643e <xTaskCreateStatic>
 8006832:	4603      	mov	r3, r0
 8006834:	4a20      	ldr	r2, [pc, #128]	; (80068b8 <vTaskStartScheduler+0xbc>)
 8006836:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006838:	4b1f      	ldr	r3, [pc, #124]	; (80068b8 <vTaskStartScheduler+0xbc>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d002      	beq.n	8006846 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006840:	2301      	movs	r3, #1
 8006842:	617b      	str	r3, [r7, #20]
 8006844:	e001      	b.n	800684a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006846:	2300      	movs	r3, #0
 8006848:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	2b01      	cmp	r3, #1
 800684e:	d11b      	bne.n	8006888 <vTaskStartScheduler+0x8c>
	__asm volatile
 8006850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006854:	f383 8811 	msr	BASEPRI, r3
 8006858:	f3bf 8f6f 	isb	sy
 800685c:	f3bf 8f4f 	dsb	sy
 8006860:	613b      	str	r3, [r7, #16]
}
 8006862:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006864:	4b15      	ldr	r3, [pc, #84]	; (80068bc <vTaskStartScheduler+0xc0>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	334c      	adds	r3, #76	; 0x4c
 800686a:	4a15      	ldr	r2, [pc, #84]	; (80068c0 <vTaskStartScheduler+0xc4>)
 800686c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800686e:	4b15      	ldr	r3, [pc, #84]	; (80068c4 <vTaskStartScheduler+0xc8>)
 8006870:	f04f 32ff 	mov.w	r2, #4294967295
 8006874:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006876:	4b14      	ldr	r3, [pc, #80]	; (80068c8 <vTaskStartScheduler+0xcc>)
 8006878:	2201      	movs	r2, #1
 800687a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800687c:	4b13      	ldr	r3, [pc, #76]	; (80068cc <vTaskStartScheduler+0xd0>)
 800687e:	2200      	movs	r2, #0
 8006880:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006882:	f000 fbb5 	bl	8006ff0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006886:	e00e      	b.n	80068a6 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800688e:	d10a      	bne.n	80068a6 <vTaskStartScheduler+0xaa>
	__asm volatile
 8006890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006894:	f383 8811 	msr	BASEPRI, r3
 8006898:	f3bf 8f6f 	isb	sy
 800689c:	f3bf 8f4f 	dsb	sy
 80068a0:	60fb      	str	r3, [r7, #12]
}
 80068a2:	bf00      	nop
 80068a4:	e7fe      	b.n	80068a4 <vTaskStartScheduler+0xa8>
}
 80068a6:	bf00      	nop
 80068a8:	3718      	adds	r7, #24
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}
 80068ae:	bf00      	nop
 80068b0:	080081f4 	.word	0x080081f4
 80068b4:	08006c59 	.word	0x08006c59
 80068b8:	20000754 	.word	0x20000754
 80068bc:	20000630 	.word	0x20000630
 80068c0:	20000068 	.word	0x20000068
 80068c4:	20000750 	.word	0x20000750
 80068c8:	2000073c 	.word	0x2000073c
 80068cc:	20000734 	.word	0x20000734

080068d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80068d0:	b480      	push	{r7}
 80068d2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80068d4:	4b04      	ldr	r3, [pc, #16]	; (80068e8 <vTaskSuspendAll+0x18>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	3301      	adds	r3, #1
 80068da:	4a03      	ldr	r2, [pc, #12]	; (80068e8 <vTaskSuspendAll+0x18>)
 80068dc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80068de:	bf00      	nop
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr
 80068e8:	20000758 	.word	0x20000758

080068ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b084      	sub	sp, #16
 80068f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80068f2:	2300      	movs	r3, #0
 80068f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80068f6:	2300      	movs	r3, #0
 80068f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80068fa:	4b41      	ldr	r3, [pc, #260]	; (8006a00 <xTaskResumeAll+0x114>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d10a      	bne.n	8006918 <xTaskResumeAll+0x2c>
	__asm volatile
 8006902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006906:	f383 8811 	msr	BASEPRI, r3
 800690a:	f3bf 8f6f 	isb	sy
 800690e:	f3bf 8f4f 	dsb	sy
 8006912:	603b      	str	r3, [r7, #0]
}
 8006914:	bf00      	nop
 8006916:	e7fe      	b.n	8006916 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006918:	f000 fc0c 	bl	8007134 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800691c:	4b38      	ldr	r3, [pc, #224]	; (8006a00 <xTaskResumeAll+0x114>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	3b01      	subs	r3, #1
 8006922:	4a37      	ldr	r2, [pc, #220]	; (8006a00 <xTaskResumeAll+0x114>)
 8006924:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006926:	4b36      	ldr	r3, [pc, #216]	; (8006a00 <xTaskResumeAll+0x114>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d161      	bne.n	80069f2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800692e:	4b35      	ldr	r3, [pc, #212]	; (8006a04 <xTaskResumeAll+0x118>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d05d      	beq.n	80069f2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006936:	e02e      	b.n	8006996 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006938:	4b33      	ldr	r3, [pc, #204]	; (8006a08 <xTaskResumeAll+0x11c>)
 800693a:	68db      	ldr	r3, [r3, #12]
 800693c:	68db      	ldr	r3, [r3, #12]
 800693e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	3318      	adds	r3, #24
 8006944:	4618      	mov	r0, r3
 8006946:	f7ff fd50 	bl	80063ea <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	3304      	adds	r3, #4
 800694e:	4618      	mov	r0, r3
 8006950:	f7ff fd4b 	bl	80063ea <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006958:	2201      	movs	r2, #1
 800695a:	409a      	lsls	r2, r3
 800695c:	4b2b      	ldr	r3, [pc, #172]	; (8006a0c <xTaskResumeAll+0x120>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4313      	orrs	r3, r2
 8006962:	4a2a      	ldr	r2, [pc, #168]	; (8006a0c <xTaskResumeAll+0x120>)
 8006964:	6013      	str	r3, [r2, #0]
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800696a:	4613      	mov	r3, r2
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	4413      	add	r3, r2
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	4a27      	ldr	r2, [pc, #156]	; (8006a10 <xTaskResumeAll+0x124>)
 8006974:	441a      	add	r2, r3
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	3304      	adds	r3, #4
 800697a:	4619      	mov	r1, r3
 800697c:	4610      	mov	r0, r2
 800697e:	f7ff fcd7 	bl	8006330 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006986:	4b23      	ldr	r3, [pc, #140]	; (8006a14 <xTaskResumeAll+0x128>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800698c:	429a      	cmp	r2, r3
 800698e:	d302      	bcc.n	8006996 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006990:	4b21      	ldr	r3, [pc, #132]	; (8006a18 <xTaskResumeAll+0x12c>)
 8006992:	2201      	movs	r2, #1
 8006994:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006996:	4b1c      	ldr	r3, [pc, #112]	; (8006a08 <xTaskResumeAll+0x11c>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d1cc      	bne.n	8006938 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d001      	beq.n	80069a8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80069a4:	f000 fa12 	bl	8006dcc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80069a8:	4b1c      	ldr	r3, [pc, #112]	; (8006a1c <xTaskResumeAll+0x130>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d010      	beq.n	80069d6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80069b4:	f000 f836 	bl	8006a24 <xTaskIncrementTick>
 80069b8:	4603      	mov	r3, r0
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d002      	beq.n	80069c4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80069be:	4b16      	ldr	r3, [pc, #88]	; (8006a18 <xTaskResumeAll+0x12c>)
 80069c0:	2201      	movs	r2, #1
 80069c2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	3b01      	subs	r3, #1
 80069c8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d1f1      	bne.n	80069b4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80069d0:	4b12      	ldr	r3, [pc, #72]	; (8006a1c <xTaskResumeAll+0x130>)
 80069d2:	2200      	movs	r2, #0
 80069d4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80069d6:	4b10      	ldr	r3, [pc, #64]	; (8006a18 <xTaskResumeAll+0x12c>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d009      	beq.n	80069f2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80069de:	2301      	movs	r3, #1
 80069e0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80069e2:	4b0f      	ldr	r3, [pc, #60]	; (8006a20 <xTaskResumeAll+0x134>)
 80069e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069e8:	601a      	str	r2, [r3, #0]
 80069ea:	f3bf 8f4f 	dsb	sy
 80069ee:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80069f2:	f000 fbcf 	bl	8007194 <vPortExitCritical>

	return xAlreadyYielded;
 80069f6:	68bb      	ldr	r3, [r7, #8]
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3710      	adds	r7, #16
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}
 8006a00:	20000758 	.word	0x20000758
 8006a04:	20000730 	.word	0x20000730
 8006a08:	200006f0 	.word	0x200006f0
 8006a0c:	20000738 	.word	0x20000738
 8006a10:	20000634 	.word	0x20000634
 8006a14:	20000630 	.word	0x20000630
 8006a18:	20000744 	.word	0x20000744
 8006a1c:	20000740 	.word	0x20000740
 8006a20:	e000ed04 	.word	0xe000ed04

08006a24 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b086      	sub	sp, #24
 8006a28:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a2e:	4b4e      	ldr	r3, [pc, #312]	; (8006b68 <xTaskIncrementTick+0x144>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	f040 808e 	bne.w	8006b54 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006a38:	4b4c      	ldr	r3, [pc, #304]	; (8006b6c <xTaskIncrementTick+0x148>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	3301      	adds	r3, #1
 8006a3e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006a40:	4a4a      	ldr	r2, [pc, #296]	; (8006b6c <xTaskIncrementTick+0x148>)
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d120      	bne.n	8006a8e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006a4c:	4b48      	ldr	r3, [pc, #288]	; (8006b70 <xTaskIncrementTick+0x14c>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d00a      	beq.n	8006a6c <xTaskIncrementTick+0x48>
	__asm volatile
 8006a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a5a:	f383 8811 	msr	BASEPRI, r3
 8006a5e:	f3bf 8f6f 	isb	sy
 8006a62:	f3bf 8f4f 	dsb	sy
 8006a66:	603b      	str	r3, [r7, #0]
}
 8006a68:	bf00      	nop
 8006a6a:	e7fe      	b.n	8006a6a <xTaskIncrementTick+0x46>
 8006a6c:	4b40      	ldr	r3, [pc, #256]	; (8006b70 <xTaskIncrementTick+0x14c>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	60fb      	str	r3, [r7, #12]
 8006a72:	4b40      	ldr	r3, [pc, #256]	; (8006b74 <xTaskIncrementTick+0x150>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a3e      	ldr	r2, [pc, #248]	; (8006b70 <xTaskIncrementTick+0x14c>)
 8006a78:	6013      	str	r3, [r2, #0]
 8006a7a:	4a3e      	ldr	r2, [pc, #248]	; (8006b74 <xTaskIncrementTick+0x150>)
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	6013      	str	r3, [r2, #0]
 8006a80:	4b3d      	ldr	r3, [pc, #244]	; (8006b78 <xTaskIncrementTick+0x154>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	3301      	adds	r3, #1
 8006a86:	4a3c      	ldr	r2, [pc, #240]	; (8006b78 <xTaskIncrementTick+0x154>)
 8006a88:	6013      	str	r3, [r2, #0]
 8006a8a:	f000 f99f 	bl	8006dcc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006a8e:	4b3b      	ldr	r3, [pc, #236]	; (8006b7c <xTaskIncrementTick+0x158>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	693a      	ldr	r2, [r7, #16]
 8006a94:	429a      	cmp	r2, r3
 8006a96:	d348      	bcc.n	8006b2a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a98:	4b35      	ldr	r3, [pc, #212]	; (8006b70 <xTaskIncrementTick+0x14c>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d104      	bne.n	8006aac <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006aa2:	4b36      	ldr	r3, [pc, #216]	; (8006b7c <xTaskIncrementTick+0x158>)
 8006aa4:	f04f 32ff 	mov.w	r2, #4294967295
 8006aa8:	601a      	str	r2, [r3, #0]
					break;
 8006aaa:	e03e      	b.n	8006b2a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006aac:	4b30      	ldr	r3, [pc, #192]	; (8006b70 <xTaskIncrementTick+0x14c>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	68db      	ldr	r3, [r3, #12]
 8006ab2:	68db      	ldr	r3, [r3, #12]
 8006ab4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006abc:	693a      	ldr	r2, [r7, #16]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d203      	bcs.n	8006acc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006ac4:	4a2d      	ldr	r2, [pc, #180]	; (8006b7c <xTaskIncrementTick+0x158>)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006aca:	e02e      	b.n	8006b2a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	3304      	adds	r3, #4
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f7ff fc8a 	bl	80063ea <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d004      	beq.n	8006ae8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	3318      	adds	r3, #24
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f7ff fc81 	bl	80063ea <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aec:	2201      	movs	r2, #1
 8006aee:	409a      	lsls	r2, r3
 8006af0:	4b23      	ldr	r3, [pc, #140]	; (8006b80 <xTaskIncrementTick+0x15c>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4313      	orrs	r3, r2
 8006af6:	4a22      	ldr	r2, [pc, #136]	; (8006b80 <xTaskIncrementTick+0x15c>)
 8006af8:	6013      	str	r3, [r2, #0]
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006afe:	4613      	mov	r3, r2
 8006b00:	009b      	lsls	r3, r3, #2
 8006b02:	4413      	add	r3, r2
 8006b04:	009b      	lsls	r3, r3, #2
 8006b06:	4a1f      	ldr	r2, [pc, #124]	; (8006b84 <xTaskIncrementTick+0x160>)
 8006b08:	441a      	add	r2, r3
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	3304      	adds	r3, #4
 8006b0e:	4619      	mov	r1, r3
 8006b10:	4610      	mov	r0, r2
 8006b12:	f7ff fc0d 	bl	8006330 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b1a:	4b1b      	ldr	r3, [pc, #108]	; (8006b88 <xTaskIncrementTick+0x164>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d3b9      	bcc.n	8006a98 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006b24:	2301      	movs	r3, #1
 8006b26:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b28:	e7b6      	b.n	8006a98 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006b2a:	4b17      	ldr	r3, [pc, #92]	; (8006b88 <xTaskIncrementTick+0x164>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b30:	4914      	ldr	r1, [pc, #80]	; (8006b84 <xTaskIncrementTick+0x160>)
 8006b32:	4613      	mov	r3, r2
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	4413      	add	r3, r2
 8006b38:	009b      	lsls	r3, r3, #2
 8006b3a:	440b      	add	r3, r1
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	d901      	bls.n	8006b46 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006b42:	2301      	movs	r3, #1
 8006b44:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006b46:	4b11      	ldr	r3, [pc, #68]	; (8006b8c <xTaskIncrementTick+0x168>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d007      	beq.n	8006b5e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	617b      	str	r3, [r7, #20]
 8006b52:	e004      	b.n	8006b5e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006b54:	4b0e      	ldr	r3, [pc, #56]	; (8006b90 <xTaskIncrementTick+0x16c>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	3301      	adds	r3, #1
 8006b5a:	4a0d      	ldr	r2, [pc, #52]	; (8006b90 <xTaskIncrementTick+0x16c>)
 8006b5c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006b5e:	697b      	ldr	r3, [r7, #20]
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3718      	adds	r7, #24
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}
 8006b68:	20000758 	.word	0x20000758
 8006b6c:	20000734 	.word	0x20000734
 8006b70:	200006e8 	.word	0x200006e8
 8006b74:	200006ec 	.word	0x200006ec
 8006b78:	20000748 	.word	0x20000748
 8006b7c:	20000750 	.word	0x20000750
 8006b80:	20000738 	.word	0x20000738
 8006b84:	20000634 	.word	0x20000634
 8006b88:	20000630 	.word	0x20000630
 8006b8c:	20000744 	.word	0x20000744
 8006b90:	20000740 	.word	0x20000740

08006b94 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006b94:	b480      	push	{r7}
 8006b96:	b087      	sub	sp, #28
 8006b98:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006b9a:	4b29      	ldr	r3, [pc, #164]	; (8006c40 <vTaskSwitchContext+0xac>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d003      	beq.n	8006baa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006ba2:	4b28      	ldr	r3, [pc, #160]	; (8006c44 <vTaskSwitchContext+0xb0>)
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006ba8:	e044      	b.n	8006c34 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8006baa:	4b26      	ldr	r3, [pc, #152]	; (8006c44 <vTaskSwitchContext+0xb0>)
 8006bac:	2200      	movs	r2, #0
 8006bae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bb0:	4b25      	ldr	r3, [pc, #148]	; (8006c48 <vTaskSwitchContext+0xb4>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	fab3 f383 	clz	r3, r3
 8006bbc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006bbe:	7afb      	ldrb	r3, [r7, #11]
 8006bc0:	f1c3 031f 	rsb	r3, r3, #31
 8006bc4:	617b      	str	r3, [r7, #20]
 8006bc6:	4921      	ldr	r1, [pc, #132]	; (8006c4c <vTaskSwitchContext+0xb8>)
 8006bc8:	697a      	ldr	r2, [r7, #20]
 8006bca:	4613      	mov	r3, r2
 8006bcc:	009b      	lsls	r3, r3, #2
 8006bce:	4413      	add	r3, r2
 8006bd0:	009b      	lsls	r3, r3, #2
 8006bd2:	440b      	add	r3, r1
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d10a      	bne.n	8006bf0 <vTaskSwitchContext+0x5c>
	__asm volatile
 8006bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bde:	f383 8811 	msr	BASEPRI, r3
 8006be2:	f3bf 8f6f 	isb	sy
 8006be6:	f3bf 8f4f 	dsb	sy
 8006bea:	607b      	str	r3, [r7, #4]
}
 8006bec:	bf00      	nop
 8006bee:	e7fe      	b.n	8006bee <vTaskSwitchContext+0x5a>
 8006bf0:	697a      	ldr	r2, [r7, #20]
 8006bf2:	4613      	mov	r3, r2
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	4413      	add	r3, r2
 8006bf8:	009b      	lsls	r3, r3, #2
 8006bfa:	4a14      	ldr	r2, [pc, #80]	; (8006c4c <vTaskSwitchContext+0xb8>)
 8006bfc:	4413      	add	r3, r2
 8006bfe:	613b      	str	r3, [r7, #16]
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	685a      	ldr	r2, [r3, #4]
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	605a      	str	r2, [r3, #4]
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	685a      	ldr	r2, [r3, #4]
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	3308      	adds	r3, #8
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d104      	bne.n	8006c20 <vTaskSwitchContext+0x8c>
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	685a      	ldr	r2, [r3, #4]
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	605a      	str	r2, [r3, #4]
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	68db      	ldr	r3, [r3, #12]
 8006c26:	4a0a      	ldr	r2, [pc, #40]	; (8006c50 <vTaskSwitchContext+0xbc>)
 8006c28:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006c2a:	4b09      	ldr	r3, [pc, #36]	; (8006c50 <vTaskSwitchContext+0xbc>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	334c      	adds	r3, #76	; 0x4c
 8006c30:	4a08      	ldr	r2, [pc, #32]	; (8006c54 <vTaskSwitchContext+0xc0>)
 8006c32:	6013      	str	r3, [r2, #0]
}
 8006c34:	bf00      	nop
 8006c36:	371c      	adds	r7, #28
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr
 8006c40:	20000758 	.word	0x20000758
 8006c44:	20000744 	.word	0x20000744
 8006c48:	20000738 	.word	0x20000738
 8006c4c:	20000634 	.word	0x20000634
 8006c50:	20000630 	.word	0x20000630
 8006c54:	20000068 	.word	0x20000068

08006c58 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b082      	sub	sp, #8
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006c60:	f000 f852 	bl	8006d08 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006c64:	4b06      	ldr	r3, [pc, #24]	; (8006c80 <prvIdleTask+0x28>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d9f9      	bls.n	8006c60 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006c6c:	4b05      	ldr	r3, [pc, #20]	; (8006c84 <prvIdleTask+0x2c>)
 8006c6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c72:	601a      	str	r2, [r3, #0]
 8006c74:	f3bf 8f4f 	dsb	sy
 8006c78:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006c7c:	e7f0      	b.n	8006c60 <prvIdleTask+0x8>
 8006c7e:	bf00      	nop
 8006c80:	20000634 	.word	0x20000634
 8006c84:	e000ed04 	.word	0xe000ed04

08006c88 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b082      	sub	sp, #8
 8006c8c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c8e:	2300      	movs	r3, #0
 8006c90:	607b      	str	r3, [r7, #4]
 8006c92:	e00c      	b.n	8006cae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	4613      	mov	r3, r2
 8006c98:	009b      	lsls	r3, r3, #2
 8006c9a:	4413      	add	r3, r2
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	4a12      	ldr	r2, [pc, #72]	; (8006ce8 <prvInitialiseTaskLists+0x60>)
 8006ca0:	4413      	add	r3, r2
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f7ff fb17 	bl	80062d6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	3301      	adds	r3, #1
 8006cac:	607b      	str	r3, [r7, #4]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2b06      	cmp	r3, #6
 8006cb2:	d9ef      	bls.n	8006c94 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006cb4:	480d      	ldr	r0, [pc, #52]	; (8006cec <prvInitialiseTaskLists+0x64>)
 8006cb6:	f7ff fb0e 	bl	80062d6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006cba:	480d      	ldr	r0, [pc, #52]	; (8006cf0 <prvInitialiseTaskLists+0x68>)
 8006cbc:	f7ff fb0b 	bl	80062d6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006cc0:	480c      	ldr	r0, [pc, #48]	; (8006cf4 <prvInitialiseTaskLists+0x6c>)
 8006cc2:	f7ff fb08 	bl	80062d6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006cc6:	480c      	ldr	r0, [pc, #48]	; (8006cf8 <prvInitialiseTaskLists+0x70>)
 8006cc8:	f7ff fb05 	bl	80062d6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006ccc:	480b      	ldr	r0, [pc, #44]	; (8006cfc <prvInitialiseTaskLists+0x74>)
 8006cce:	f7ff fb02 	bl	80062d6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006cd2:	4b0b      	ldr	r3, [pc, #44]	; (8006d00 <prvInitialiseTaskLists+0x78>)
 8006cd4:	4a05      	ldr	r2, [pc, #20]	; (8006cec <prvInitialiseTaskLists+0x64>)
 8006cd6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006cd8:	4b0a      	ldr	r3, [pc, #40]	; (8006d04 <prvInitialiseTaskLists+0x7c>)
 8006cda:	4a05      	ldr	r2, [pc, #20]	; (8006cf0 <prvInitialiseTaskLists+0x68>)
 8006cdc:	601a      	str	r2, [r3, #0]
}
 8006cde:	bf00      	nop
 8006ce0:	3708      	adds	r7, #8
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}
 8006ce6:	bf00      	nop
 8006ce8:	20000634 	.word	0x20000634
 8006cec:	200006c0 	.word	0x200006c0
 8006cf0:	200006d4 	.word	0x200006d4
 8006cf4:	200006f0 	.word	0x200006f0
 8006cf8:	20000704 	.word	0x20000704
 8006cfc:	2000071c 	.word	0x2000071c
 8006d00:	200006e8 	.word	0x200006e8
 8006d04:	200006ec 	.word	0x200006ec

08006d08 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b082      	sub	sp, #8
 8006d0c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d0e:	e019      	b.n	8006d44 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006d10:	f000 fa10 	bl	8007134 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d14:	4b10      	ldr	r3, [pc, #64]	; (8006d58 <prvCheckTasksWaitingTermination+0x50>)
 8006d16:	68db      	ldr	r3, [r3, #12]
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	3304      	adds	r3, #4
 8006d20:	4618      	mov	r0, r3
 8006d22:	f7ff fb62 	bl	80063ea <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006d26:	4b0d      	ldr	r3, [pc, #52]	; (8006d5c <prvCheckTasksWaitingTermination+0x54>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	3b01      	subs	r3, #1
 8006d2c:	4a0b      	ldr	r2, [pc, #44]	; (8006d5c <prvCheckTasksWaitingTermination+0x54>)
 8006d2e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006d30:	4b0b      	ldr	r3, [pc, #44]	; (8006d60 <prvCheckTasksWaitingTermination+0x58>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	3b01      	subs	r3, #1
 8006d36:	4a0a      	ldr	r2, [pc, #40]	; (8006d60 <prvCheckTasksWaitingTermination+0x58>)
 8006d38:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006d3a:	f000 fa2b 	bl	8007194 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f000 f810 	bl	8006d64 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d44:	4b06      	ldr	r3, [pc, #24]	; (8006d60 <prvCheckTasksWaitingTermination+0x58>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d1e1      	bne.n	8006d10 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006d4c:	bf00      	nop
 8006d4e:	bf00      	nop
 8006d50:	3708      	adds	r7, #8
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
 8006d56:	bf00      	nop
 8006d58:	20000704 	.word	0x20000704
 8006d5c:	20000730 	.word	0x20000730
 8006d60:	20000718 	.word	0x20000718

08006d64 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b084      	sub	sp, #16
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	334c      	adds	r3, #76	; 0x4c
 8006d70:	4618      	mov	r0, r3
 8006d72:	f000 feb9 	bl	8007ae8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d108      	bne.n	8006d92 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d84:	4618      	mov	r0, r3
 8006d86:	f000 fb83 	bl	8007490 <vPortFree>
				vPortFree( pxTCB );
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f000 fb80 	bl	8007490 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006d90:	e018      	b.n	8006dc4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d103      	bne.n	8006da4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f000 fb77 	bl	8007490 <vPortFree>
	}
 8006da2:	e00f      	b.n	8006dc4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8006daa:	2b02      	cmp	r3, #2
 8006dac:	d00a      	beq.n	8006dc4 <prvDeleteTCB+0x60>
	__asm volatile
 8006dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db2:	f383 8811 	msr	BASEPRI, r3
 8006db6:	f3bf 8f6f 	isb	sy
 8006dba:	f3bf 8f4f 	dsb	sy
 8006dbe:	60fb      	str	r3, [r7, #12]
}
 8006dc0:	bf00      	nop
 8006dc2:	e7fe      	b.n	8006dc2 <prvDeleteTCB+0x5e>
	}
 8006dc4:	bf00      	nop
 8006dc6:	3710      	adds	r7, #16
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}

08006dcc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b083      	sub	sp, #12
 8006dd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006dd2:	4b0c      	ldr	r3, [pc, #48]	; (8006e04 <prvResetNextTaskUnblockTime+0x38>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d104      	bne.n	8006de6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006ddc:	4b0a      	ldr	r3, [pc, #40]	; (8006e08 <prvResetNextTaskUnblockTime+0x3c>)
 8006dde:	f04f 32ff 	mov.w	r2, #4294967295
 8006de2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006de4:	e008      	b.n	8006df8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006de6:	4b07      	ldr	r3, [pc, #28]	; (8006e04 <prvResetNextTaskUnblockTime+0x38>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	68db      	ldr	r3, [r3, #12]
 8006dec:	68db      	ldr	r3, [r3, #12]
 8006dee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	4a04      	ldr	r2, [pc, #16]	; (8006e08 <prvResetNextTaskUnblockTime+0x3c>)
 8006df6:	6013      	str	r3, [r2, #0]
}
 8006df8:	bf00      	nop
 8006dfa:	370c      	adds	r7, #12
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr
 8006e04:	200006e8 	.word	0x200006e8
 8006e08:	20000750 	.word	0x20000750

08006e0c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b084      	sub	sp, #16
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006e16:	4b29      	ldr	r3, [pc, #164]	; (8006ebc <prvAddCurrentTaskToDelayedList+0xb0>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e1c:	4b28      	ldr	r3, [pc, #160]	; (8006ec0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	3304      	adds	r3, #4
 8006e22:	4618      	mov	r0, r3
 8006e24:	f7ff fae1 	bl	80063ea <uxListRemove>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d10b      	bne.n	8006e46 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006e2e:	4b24      	ldr	r3, [pc, #144]	; (8006ec0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e34:	2201      	movs	r2, #1
 8006e36:	fa02 f303 	lsl.w	r3, r2, r3
 8006e3a:	43da      	mvns	r2, r3
 8006e3c:	4b21      	ldr	r3, [pc, #132]	; (8006ec4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4013      	ands	r3, r2
 8006e42:	4a20      	ldr	r2, [pc, #128]	; (8006ec4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006e44:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e4c:	d10a      	bne.n	8006e64 <prvAddCurrentTaskToDelayedList+0x58>
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d007      	beq.n	8006e64 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e54:	4b1a      	ldr	r3, [pc, #104]	; (8006ec0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	3304      	adds	r3, #4
 8006e5a:	4619      	mov	r1, r3
 8006e5c:	481a      	ldr	r0, [pc, #104]	; (8006ec8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006e5e:	f7ff fa67 	bl	8006330 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006e62:	e026      	b.n	8006eb2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006e64:	68fa      	ldr	r2, [r7, #12]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	4413      	add	r3, r2
 8006e6a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006e6c:	4b14      	ldr	r3, [pc, #80]	; (8006ec0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	68ba      	ldr	r2, [r7, #8]
 8006e72:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006e74:	68ba      	ldr	r2, [r7, #8]
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	d209      	bcs.n	8006e90 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e7c:	4b13      	ldr	r3, [pc, #76]	; (8006ecc <prvAddCurrentTaskToDelayedList+0xc0>)
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	4b0f      	ldr	r3, [pc, #60]	; (8006ec0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	3304      	adds	r3, #4
 8006e86:	4619      	mov	r1, r3
 8006e88:	4610      	mov	r0, r2
 8006e8a:	f7ff fa75 	bl	8006378 <vListInsert>
}
 8006e8e:	e010      	b.n	8006eb2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e90:	4b0f      	ldr	r3, [pc, #60]	; (8006ed0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	4b0a      	ldr	r3, [pc, #40]	; (8006ec0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	3304      	adds	r3, #4
 8006e9a:	4619      	mov	r1, r3
 8006e9c:	4610      	mov	r0, r2
 8006e9e:	f7ff fa6b 	bl	8006378 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006ea2:	4b0c      	ldr	r3, [pc, #48]	; (8006ed4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	68ba      	ldr	r2, [r7, #8]
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d202      	bcs.n	8006eb2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006eac:	4a09      	ldr	r2, [pc, #36]	; (8006ed4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	6013      	str	r3, [r2, #0]
}
 8006eb2:	bf00      	nop
 8006eb4:	3710      	adds	r7, #16
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}
 8006eba:	bf00      	nop
 8006ebc:	20000734 	.word	0x20000734
 8006ec0:	20000630 	.word	0x20000630
 8006ec4:	20000738 	.word	0x20000738
 8006ec8:	2000071c 	.word	0x2000071c
 8006ecc:	200006ec 	.word	0x200006ec
 8006ed0:	200006e8 	.word	0x200006e8
 8006ed4:	20000750 	.word	0x20000750

08006ed8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b085      	sub	sp, #20
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	60f8      	str	r0, [r7, #12]
 8006ee0:	60b9      	str	r1, [r7, #8]
 8006ee2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	3b04      	subs	r3, #4
 8006ee8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006ef0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	3b04      	subs	r3, #4
 8006ef6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	f023 0201 	bic.w	r2, r3, #1
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	3b04      	subs	r3, #4
 8006f06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006f08:	4a0c      	ldr	r2, [pc, #48]	; (8006f3c <pxPortInitialiseStack+0x64>)
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	3b14      	subs	r3, #20
 8006f12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006f14:	687a      	ldr	r2, [r7, #4]
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	3b04      	subs	r3, #4
 8006f1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f06f 0202 	mvn.w	r2, #2
 8006f26:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	3b20      	subs	r3, #32
 8006f2c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3714      	adds	r7, #20
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr
 8006f3c:	08006f41 	.word	0x08006f41

08006f40 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006f40:	b480      	push	{r7}
 8006f42:	b085      	sub	sp, #20
 8006f44:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006f46:	2300      	movs	r3, #0
 8006f48:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006f4a:	4b12      	ldr	r3, [pc, #72]	; (8006f94 <prvTaskExitError+0x54>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f52:	d00a      	beq.n	8006f6a <prvTaskExitError+0x2a>
	__asm volatile
 8006f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f58:	f383 8811 	msr	BASEPRI, r3
 8006f5c:	f3bf 8f6f 	isb	sy
 8006f60:	f3bf 8f4f 	dsb	sy
 8006f64:	60fb      	str	r3, [r7, #12]
}
 8006f66:	bf00      	nop
 8006f68:	e7fe      	b.n	8006f68 <prvTaskExitError+0x28>
	__asm volatile
 8006f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f6e:	f383 8811 	msr	BASEPRI, r3
 8006f72:	f3bf 8f6f 	isb	sy
 8006f76:	f3bf 8f4f 	dsb	sy
 8006f7a:	60bb      	str	r3, [r7, #8]
}
 8006f7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006f7e:	bf00      	nop
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d0fc      	beq.n	8006f80 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006f86:	bf00      	nop
 8006f88:	bf00      	nop
 8006f8a:	3714      	adds	r7, #20
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr
 8006f94:	2000000c 	.word	0x2000000c
	...

08006fa0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006fa0:	4b07      	ldr	r3, [pc, #28]	; (8006fc0 <pxCurrentTCBConst2>)
 8006fa2:	6819      	ldr	r1, [r3, #0]
 8006fa4:	6808      	ldr	r0, [r1, #0]
 8006fa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006faa:	f380 8809 	msr	PSP, r0
 8006fae:	f3bf 8f6f 	isb	sy
 8006fb2:	f04f 0000 	mov.w	r0, #0
 8006fb6:	f380 8811 	msr	BASEPRI, r0
 8006fba:	4770      	bx	lr
 8006fbc:	f3af 8000 	nop.w

08006fc0 <pxCurrentTCBConst2>:
 8006fc0:	20000630 	.word	0x20000630
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006fc4:	bf00      	nop
 8006fc6:	bf00      	nop

08006fc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006fc8:	4808      	ldr	r0, [pc, #32]	; (8006fec <prvPortStartFirstTask+0x24>)
 8006fca:	6800      	ldr	r0, [r0, #0]
 8006fcc:	6800      	ldr	r0, [r0, #0]
 8006fce:	f380 8808 	msr	MSP, r0
 8006fd2:	f04f 0000 	mov.w	r0, #0
 8006fd6:	f380 8814 	msr	CONTROL, r0
 8006fda:	b662      	cpsie	i
 8006fdc:	b661      	cpsie	f
 8006fde:	f3bf 8f4f 	dsb	sy
 8006fe2:	f3bf 8f6f 	isb	sy
 8006fe6:	df00      	svc	0
 8006fe8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006fea:	bf00      	nop
 8006fec:	e000ed08 	.word	0xe000ed08

08006ff0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b086      	sub	sp, #24
 8006ff4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006ff6:	4b46      	ldr	r3, [pc, #280]	; (8007110 <xPortStartScheduler+0x120>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a46      	ldr	r2, [pc, #280]	; (8007114 <xPortStartScheduler+0x124>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d10a      	bne.n	8007016 <xPortStartScheduler+0x26>
	__asm volatile
 8007000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007004:	f383 8811 	msr	BASEPRI, r3
 8007008:	f3bf 8f6f 	isb	sy
 800700c:	f3bf 8f4f 	dsb	sy
 8007010:	613b      	str	r3, [r7, #16]
}
 8007012:	bf00      	nop
 8007014:	e7fe      	b.n	8007014 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007016:	4b3e      	ldr	r3, [pc, #248]	; (8007110 <xPortStartScheduler+0x120>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a3f      	ldr	r2, [pc, #252]	; (8007118 <xPortStartScheduler+0x128>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d10a      	bne.n	8007036 <xPortStartScheduler+0x46>
	__asm volatile
 8007020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007024:	f383 8811 	msr	BASEPRI, r3
 8007028:	f3bf 8f6f 	isb	sy
 800702c:	f3bf 8f4f 	dsb	sy
 8007030:	60fb      	str	r3, [r7, #12]
}
 8007032:	bf00      	nop
 8007034:	e7fe      	b.n	8007034 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007036:	4b39      	ldr	r3, [pc, #228]	; (800711c <xPortStartScheduler+0x12c>)
 8007038:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	781b      	ldrb	r3, [r3, #0]
 800703e:	b2db      	uxtb	r3, r3
 8007040:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	22ff      	movs	r2, #255	; 0xff
 8007046:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	781b      	ldrb	r3, [r3, #0]
 800704c:	b2db      	uxtb	r3, r3
 800704e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007050:	78fb      	ldrb	r3, [r7, #3]
 8007052:	b2db      	uxtb	r3, r3
 8007054:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007058:	b2da      	uxtb	r2, r3
 800705a:	4b31      	ldr	r3, [pc, #196]	; (8007120 <xPortStartScheduler+0x130>)
 800705c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800705e:	4b31      	ldr	r3, [pc, #196]	; (8007124 <xPortStartScheduler+0x134>)
 8007060:	2207      	movs	r2, #7
 8007062:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007064:	e009      	b.n	800707a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007066:	4b2f      	ldr	r3, [pc, #188]	; (8007124 <xPortStartScheduler+0x134>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	3b01      	subs	r3, #1
 800706c:	4a2d      	ldr	r2, [pc, #180]	; (8007124 <xPortStartScheduler+0x134>)
 800706e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007070:	78fb      	ldrb	r3, [r7, #3]
 8007072:	b2db      	uxtb	r3, r3
 8007074:	005b      	lsls	r3, r3, #1
 8007076:	b2db      	uxtb	r3, r3
 8007078:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800707a:	78fb      	ldrb	r3, [r7, #3]
 800707c:	b2db      	uxtb	r3, r3
 800707e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007082:	2b80      	cmp	r3, #128	; 0x80
 8007084:	d0ef      	beq.n	8007066 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007086:	4b27      	ldr	r3, [pc, #156]	; (8007124 <xPortStartScheduler+0x134>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f1c3 0307 	rsb	r3, r3, #7
 800708e:	2b04      	cmp	r3, #4
 8007090:	d00a      	beq.n	80070a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8007092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007096:	f383 8811 	msr	BASEPRI, r3
 800709a:	f3bf 8f6f 	isb	sy
 800709e:	f3bf 8f4f 	dsb	sy
 80070a2:	60bb      	str	r3, [r7, #8]
}
 80070a4:	bf00      	nop
 80070a6:	e7fe      	b.n	80070a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80070a8:	4b1e      	ldr	r3, [pc, #120]	; (8007124 <xPortStartScheduler+0x134>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	021b      	lsls	r3, r3, #8
 80070ae:	4a1d      	ldr	r2, [pc, #116]	; (8007124 <xPortStartScheduler+0x134>)
 80070b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80070b2:	4b1c      	ldr	r3, [pc, #112]	; (8007124 <xPortStartScheduler+0x134>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80070ba:	4a1a      	ldr	r2, [pc, #104]	; (8007124 <xPortStartScheduler+0x134>)
 80070bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	b2da      	uxtb	r2, r3
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80070c6:	4b18      	ldr	r3, [pc, #96]	; (8007128 <xPortStartScheduler+0x138>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a17      	ldr	r2, [pc, #92]	; (8007128 <xPortStartScheduler+0x138>)
 80070cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80070d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80070d2:	4b15      	ldr	r3, [pc, #84]	; (8007128 <xPortStartScheduler+0x138>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a14      	ldr	r2, [pc, #80]	; (8007128 <xPortStartScheduler+0x138>)
 80070d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80070dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80070de:	f000 f8dd 	bl	800729c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80070e2:	4b12      	ldr	r3, [pc, #72]	; (800712c <xPortStartScheduler+0x13c>)
 80070e4:	2200      	movs	r2, #0
 80070e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80070e8:	f000 f8fc 	bl	80072e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80070ec:	4b10      	ldr	r3, [pc, #64]	; (8007130 <xPortStartScheduler+0x140>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a0f      	ldr	r2, [pc, #60]	; (8007130 <xPortStartScheduler+0x140>)
 80070f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80070f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80070f8:	f7ff ff66 	bl	8006fc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80070fc:	f7ff fd4a 	bl	8006b94 <vTaskSwitchContext>
	prvTaskExitError();
 8007100:	f7ff ff1e 	bl	8006f40 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007104:	2300      	movs	r3, #0
}
 8007106:	4618      	mov	r0, r3
 8007108:	3718      	adds	r7, #24
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
 800710e:	bf00      	nop
 8007110:	e000ed00 	.word	0xe000ed00
 8007114:	410fc271 	.word	0x410fc271
 8007118:	410fc270 	.word	0x410fc270
 800711c:	e000e400 	.word	0xe000e400
 8007120:	2000075c 	.word	0x2000075c
 8007124:	20000760 	.word	0x20000760
 8007128:	e000ed20 	.word	0xe000ed20
 800712c:	2000000c 	.word	0x2000000c
 8007130:	e000ef34 	.word	0xe000ef34

08007134 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007134:	b480      	push	{r7}
 8007136:	b083      	sub	sp, #12
 8007138:	af00      	add	r7, sp, #0
	__asm volatile
 800713a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800713e:	f383 8811 	msr	BASEPRI, r3
 8007142:	f3bf 8f6f 	isb	sy
 8007146:	f3bf 8f4f 	dsb	sy
 800714a:	607b      	str	r3, [r7, #4]
}
 800714c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800714e:	4b0f      	ldr	r3, [pc, #60]	; (800718c <vPortEnterCritical+0x58>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	3301      	adds	r3, #1
 8007154:	4a0d      	ldr	r2, [pc, #52]	; (800718c <vPortEnterCritical+0x58>)
 8007156:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007158:	4b0c      	ldr	r3, [pc, #48]	; (800718c <vPortEnterCritical+0x58>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	2b01      	cmp	r3, #1
 800715e:	d10f      	bne.n	8007180 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007160:	4b0b      	ldr	r3, [pc, #44]	; (8007190 <vPortEnterCritical+0x5c>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	b2db      	uxtb	r3, r3
 8007166:	2b00      	cmp	r3, #0
 8007168:	d00a      	beq.n	8007180 <vPortEnterCritical+0x4c>
	__asm volatile
 800716a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800716e:	f383 8811 	msr	BASEPRI, r3
 8007172:	f3bf 8f6f 	isb	sy
 8007176:	f3bf 8f4f 	dsb	sy
 800717a:	603b      	str	r3, [r7, #0]
}
 800717c:	bf00      	nop
 800717e:	e7fe      	b.n	800717e <vPortEnterCritical+0x4a>
	}
}
 8007180:	bf00      	nop
 8007182:	370c      	adds	r7, #12
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr
 800718c:	2000000c 	.word	0x2000000c
 8007190:	e000ed04 	.word	0xe000ed04

08007194 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007194:	b480      	push	{r7}
 8007196:	b083      	sub	sp, #12
 8007198:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800719a:	4b12      	ldr	r3, [pc, #72]	; (80071e4 <vPortExitCritical+0x50>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d10a      	bne.n	80071b8 <vPortExitCritical+0x24>
	__asm volatile
 80071a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071a6:	f383 8811 	msr	BASEPRI, r3
 80071aa:	f3bf 8f6f 	isb	sy
 80071ae:	f3bf 8f4f 	dsb	sy
 80071b2:	607b      	str	r3, [r7, #4]
}
 80071b4:	bf00      	nop
 80071b6:	e7fe      	b.n	80071b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80071b8:	4b0a      	ldr	r3, [pc, #40]	; (80071e4 <vPortExitCritical+0x50>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	3b01      	subs	r3, #1
 80071be:	4a09      	ldr	r2, [pc, #36]	; (80071e4 <vPortExitCritical+0x50>)
 80071c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80071c2:	4b08      	ldr	r3, [pc, #32]	; (80071e4 <vPortExitCritical+0x50>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d105      	bne.n	80071d6 <vPortExitCritical+0x42>
 80071ca:	2300      	movs	r3, #0
 80071cc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80071d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80071d6:	bf00      	nop
 80071d8:	370c      	adds	r7, #12
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr
 80071e2:	bf00      	nop
 80071e4:	2000000c 	.word	0x2000000c
	...

080071f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80071f0:	f3ef 8009 	mrs	r0, PSP
 80071f4:	f3bf 8f6f 	isb	sy
 80071f8:	4b15      	ldr	r3, [pc, #84]	; (8007250 <pxCurrentTCBConst>)
 80071fa:	681a      	ldr	r2, [r3, #0]
 80071fc:	f01e 0f10 	tst.w	lr, #16
 8007200:	bf08      	it	eq
 8007202:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007206:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800720a:	6010      	str	r0, [r2, #0]
 800720c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007210:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007214:	f380 8811 	msr	BASEPRI, r0
 8007218:	f3bf 8f4f 	dsb	sy
 800721c:	f3bf 8f6f 	isb	sy
 8007220:	f7ff fcb8 	bl	8006b94 <vTaskSwitchContext>
 8007224:	f04f 0000 	mov.w	r0, #0
 8007228:	f380 8811 	msr	BASEPRI, r0
 800722c:	bc09      	pop	{r0, r3}
 800722e:	6819      	ldr	r1, [r3, #0]
 8007230:	6808      	ldr	r0, [r1, #0]
 8007232:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007236:	f01e 0f10 	tst.w	lr, #16
 800723a:	bf08      	it	eq
 800723c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007240:	f380 8809 	msr	PSP, r0
 8007244:	f3bf 8f6f 	isb	sy
 8007248:	4770      	bx	lr
 800724a:	bf00      	nop
 800724c:	f3af 8000 	nop.w

08007250 <pxCurrentTCBConst>:
 8007250:	20000630 	.word	0x20000630
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007254:	bf00      	nop
 8007256:	bf00      	nop

08007258 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b082      	sub	sp, #8
 800725c:	af00      	add	r7, sp, #0
	__asm volatile
 800725e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007262:	f383 8811 	msr	BASEPRI, r3
 8007266:	f3bf 8f6f 	isb	sy
 800726a:	f3bf 8f4f 	dsb	sy
 800726e:	607b      	str	r3, [r7, #4]
}
 8007270:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007272:	f7ff fbd7 	bl	8006a24 <xTaskIncrementTick>
 8007276:	4603      	mov	r3, r0
 8007278:	2b00      	cmp	r3, #0
 800727a:	d003      	beq.n	8007284 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800727c:	4b06      	ldr	r3, [pc, #24]	; (8007298 <SysTick_Handler+0x40>)
 800727e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007282:	601a      	str	r2, [r3, #0]
 8007284:	2300      	movs	r3, #0
 8007286:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	f383 8811 	msr	BASEPRI, r3
}
 800728e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007290:	bf00      	nop
 8007292:	3708      	adds	r7, #8
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}
 8007298:	e000ed04 	.word	0xe000ed04

0800729c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800729c:	b480      	push	{r7}
 800729e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80072a0:	4b0b      	ldr	r3, [pc, #44]	; (80072d0 <vPortSetupTimerInterrupt+0x34>)
 80072a2:	2200      	movs	r2, #0
 80072a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80072a6:	4b0b      	ldr	r3, [pc, #44]	; (80072d4 <vPortSetupTimerInterrupt+0x38>)
 80072a8:	2200      	movs	r2, #0
 80072aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80072ac:	4b0a      	ldr	r3, [pc, #40]	; (80072d8 <vPortSetupTimerInterrupt+0x3c>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a0a      	ldr	r2, [pc, #40]	; (80072dc <vPortSetupTimerInterrupt+0x40>)
 80072b2:	fba2 2303 	umull	r2, r3, r2, r3
 80072b6:	099b      	lsrs	r3, r3, #6
 80072b8:	4a09      	ldr	r2, [pc, #36]	; (80072e0 <vPortSetupTimerInterrupt+0x44>)
 80072ba:	3b01      	subs	r3, #1
 80072bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80072be:	4b04      	ldr	r3, [pc, #16]	; (80072d0 <vPortSetupTimerInterrupt+0x34>)
 80072c0:	2207      	movs	r2, #7
 80072c2:	601a      	str	r2, [r3, #0]
}
 80072c4:	bf00      	nop
 80072c6:	46bd      	mov	sp, r7
 80072c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072cc:	4770      	bx	lr
 80072ce:	bf00      	nop
 80072d0:	e000e010 	.word	0xe000e010
 80072d4:	e000e018 	.word	0xe000e018
 80072d8:	20000000 	.word	0x20000000
 80072dc:	10624dd3 	.word	0x10624dd3
 80072e0:	e000e014 	.word	0xe000e014

080072e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80072e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80072f4 <vPortEnableVFP+0x10>
 80072e8:	6801      	ldr	r1, [r0, #0]
 80072ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80072ee:	6001      	str	r1, [r0, #0]
 80072f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80072f2:	bf00      	nop
 80072f4:	e000ed88 	.word	0xe000ed88

080072f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b08a      	sub	sp, #40	; 0x28
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007300:	2300      	movs	r3, #0
 8007302:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007304:	f7ff fae4 	bl	80068d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007308:	4b5b      	ldr	r3, [pc, #364]	; (8007478 <pvPortMalloc+0x180>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d101      	bne.n	8007314 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007310:	f000 f920 	bl	8007554 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007314:	4b59      	ldr	r3, [pc, #356]	; (800747c <pvPortMalloc+0x184>)
 8007316:	681a      	ldr	r2, [r3, #0]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	4013      	ands	r3, r2
 800731c:	2b00      	cmp	r3, #0
 800731e:	f040 8093 	bne.w	8007448 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d01d      	beq.n	8007364 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007328:	2208      	movs	r2, #8
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	4413      	add	r3, r2
 800732e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f003 0307 	and.w	r3, r3, #7
 8007336:	2b00      	cmp	r3, #0
 8007338:	d014      	beq.n	8007364 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f023 0307 	bic.w	r3, r3, #7
 8007340:	3308      	adds	r3, #8
 8007342:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f003 0307 	and.w	r3, r3, #7
 800734a:	2b00      	cmp	r3, #0
 800734c:	d00a      	beq.n	8007364 <pvPortMalloc+0x6c>
	__asm volatile
 800734e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007352:	f383 8811 	msr	BASEPRI, r3
 8007356:	f3bf 8f6f 	isb	sy
 800735a:	f3bf 8f4f 	dsb	sy
 800735e:	617b      	str	r3, [r7, #20]
}
 8007360:	bf00      	nop
 8007362:	e7fe      	b.n	8007362 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d06e      	beq.n	8007448 <pvPortMalloc+0x150>
 800736a:	4b45      	ldr	r3, [pc, #276]	; (8007480 <pvPortMalloc+0x188>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	687a      	ldr	r2, [r7, #4]
 8007370:	429a      	cmp	r2, r3
 8007372:	d869      	bhi.n	8007448 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007374:	4b43      	ldr	r3, [pc, #268]	; (8007484 <pvPortMalloc+0x18c>)
 8007376:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007378:	4b42      	ldr	r3, [pc, #264]	; (8007484 <pvPortMalloc+0x18c>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800737e:	e004      	b.n	800738a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007382:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800738a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	687a      	ldr	r2, [r7, #4]
 8007390:	429a      	cmp	r2, r3
 8007392:	d903      	bls.n	800739c <pvPortMalloc+0xa4>
 8007394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d1f1      	bne.n	8007380 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800739c:	4b36      	ldr	r3, [pc, #216]	; (8007478 <pvPortMalloc+0x180>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d050      	beq.n	8007448 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80073a6:	6a3b      	ldr	r3, [r7, #32]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	2208      	movs	r2, #8
 80073ac:	4413      	add	r3, r2
 80073ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80073b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	6a3b      	ldr	r3, [r7, #32]
 80073b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80073b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ba:	685a      	ldr	r2, [r3, #4]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	1ad2      	subs	r2, r2, r3
 80073c0:	2308      	movs	r3, #8
 80073c2:	005b      	lsls	r3, r3, #1
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d91f      	bls.n	8007408 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80073c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	4413      	add	r3, r2
 80073ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80073d0:	69bb      	ldr	r3, [r7, #24]
 80073d2:	f003 0307 	and.w	r3, r3, #7
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d00a      	beq.n	80073f0 <pvPortMalloc+0xf8>
	__asm volatile
 80073da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073de:	f383 8811 	msr	BASEPRI, r3
 80073e2:	f3bf 8f6f 	isb	sy
 80073e6:	f3bf 8f4f 	dsb	sy
 80073ea:	613b      	str	r3, [r7, #16]
}
 80073ec:	bf00      	nop
 80073ee:	e7fe      	b.n	80073ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80073f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f2:	685a      	ldr	r2, [r3, #4]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	1ad2      	subs	r2, r2, r3
 80073f8:	69bb      	ldr	r3, [r7, #24]
 80073fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80073fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fe:	687a      	ldr	r2, [r7, #4]
 8007400:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007402:	69b8      	ldr	r0, [r7, #24]
 8007404:	f000 f908 	bl	8007618 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007408:	4b1d      	ldr	r3, [pc, #116]	; (8007480 <pvPortMalloc+0x188>)
 800740a:	681a      	ldr	r2, [r3, #0]
 800740c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	1ad3      	subs	r3, r2, r3
 8007412:	4a1b      	ldr	r2, [pc, #108]	; (8007480 <pvPortMalloc+0x188>)
 8007414:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007416:	4b1a      	ldr	r3, [pc, #104]	; (8007480 <pvPortMalloc+0x188>)
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	4b1b      	ldr	r3, [pc, #108]	; (8007488 <pvPortMalloc+0x190>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	429a      	cmp	r2, r3
 8007420:	d203      	bcs.n	800742a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007422:	4b17      	ldr	r3, [pc, #92]	; (8007480 <pvPortMalloc+0x188>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4a18      	ldr	r2, [pc, #96]	; (8007488 <pvPortMalloc+0x190>)
 8007428:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800742a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800742c:	685a      	ldr	r2, [r3, #4]
 800742e:	4b13      	ldr	r3, [pc, #76]	; (800747c <pvPortMalloc+0x184>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	431a      	orrs	r2, r3
 8007434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007436:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800743a:	2200      	movs	r2, #0
 800743c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800743e:	4b13      	ldr	r3, [pc, #76]	; (800748c <pvPortMalloc+0x194>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	3301      	adds	r3, #1
 8007444:	4a11      	ldr	r2, [pc, #68]	; (800748c <pvPortMalloc+0x194>)
 8007446:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007448:	f7ff fa50 	bl	80068ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800744c:	69fb      	ldr	r3, [r7, #28]
 800744e:	f003 0307 	and.w	r3, r3, #7
 8007452:	2b00      	cmp	r3, #0
 8007454:	d00a      	beq.n	800746c <pvPortMalloc+0x174>
	__asm volatile
 8007456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800745a:	f383 8811 	msr	BASEPRI, r3
 800745e:	f3bf 8f6f 	isb	sy
 8007462:	f3bf 8f4f 	dsb	sy
 8007466:	60fb      	str	r3, [r7, #12]
}
 8007468:	bf00      	nop
 800746a:	e7fe      	b.n	800746a <pvPortMalloc+0x172>
	return pvReturn;
 800746c:	69fb      	ldr	r3, [r7, #28]
}
 800746e:	4618      	mov	r0, r3
 8007470:	3728      	adds	r7, #40	; 0x28
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}
 8007476:	bf00      	nop
 8007478:	2000436c 	.word	0x2000436c
 800747c:	20004380 	.word	0x20004380
 8007480:	20004370 	.word	0x20004370
 8007484:	20004364 	.word	0x20004364
 8007488:	20004374 	.word	0x20004374
 800748c:	20004378 	.word	0x20004378

08007490 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b086      	sub	sp, #24
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d04d      	beq.n	800753e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80074a2:	2308      	movs	r3, #8
 80074a4:	425b      	negs	r3, r3
 80074a6:	697a      	ldr	r2, [r7, #20]
 80074a8:	4413      	add	r3, r2
 80074aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	685a      	ldr	r2, [r3, #4]
 80074b4:	4b24      	ldr	r3, [pc, #144]	; (8007548 <vPortFree+0xb8>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4013      	ands	r3, r2
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d10a      	bne.n	80074d4 <vPortFree+0x44>
	__asm volatile
 80074be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c2:	f383 8811 	msr	BASEPRI, r3
 80074c6:	f3bf 8f6f 	isb	sy
 80074ca:	f3bf 8f4f 	dsb	sy
 80074ce:	60fb      	str	r3, [r7, #12]
}
 80074d0:	bf00      	nop
 80074d2:	e7fe      	b.n	80074d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d00a      	beq.n	80074f2 <vPortFree+0x62>
	__asm volatile
 80074dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074e0:	f383 8811 	msr	BASEPRI, r3
 80074e4:	f3bf 8f6f 	isb	sy
 80074e8:	f3bf 8f4f 	dsb	sy
 80074ec:	60bb      	str	r3, [r7, #8]
}
 80074ee:	bf00      	nop
 80074f0:	e7fe      	b.n	80074f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	685a      	ldr	r2, [r3, #4]
 80074f6:	4b14      	ldr	r3, [pc, #80]	; (8007548 <vPortFree+0xb8>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4013      	ands	r3, r2
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d01e      	beq.n	800753e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d11a      	bne.n	800753e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	685a      	ldr	r2, [r3, #4]
 800750c:	4b0e      	ldr	r3, [pc, #56]	; (8007548 <vPortFree+0xb8>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	43db      	mvns	r3, r3
 8007512:	401a      	ands	r2, r3
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007518:	f7ff f9da 	bl	80068d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	685a      	ldr	r2, [r3, #4]
 8007520:	4b0a      	ldr	r3, [pc, #40]	; (800754c <vPortFree+0xbc>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4413      	add	r3, r2
 8007526:	4a09      	ldr	r2, [pc, #36]	; (800754c <vPortFree+0xbc>)
 8007528:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800752a:	6938      	ldr	r0, [r7, #16]
 800752c:	f000 f874 	bl	8007618 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007530:	4b07      	ldr	r3, [pc, #28]	; (8007550 <vPortFree+0xc0>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	3301      	adds	r3, #1
 8007536:	4a06      	ldr	r2, [pc, #24]	; (8007550 <vPortFree+0xc0>)
 8007538:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800753a:	f7ff f9d7 	bl	80068ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800753e:	bf00      	nop
 8007540:	3718      	adds	r7, #24
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}
 8007546:	bf00      	nop
 8007548:	20004380 	.word	0x20004380
 800754c:	20004370 	.word	0x20004370
 8007550:	2000437c 	.word	0x2000437c

08007554 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007554:	b480      	push	{r7}
 8007556:	b085      	sub	sp, #20
 8007558:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800755a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800755e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007560:	4b27      	ldr	r3, [pc, #156]	; (8007600 <prvHeapInit+0xac>)
 8007562:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f003 0307 	and.w	r3, r3, #7
 800756a:	2b00      	cmp	r3, #0
 800756c:	d00c      	beq.n	8007588 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	3307      	adds	r3, #7
 8007572:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f023 0307 	bic.w	r3, r3, #7
 800757a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800757c:	68ba      	ldr	r2, [r7, #8]
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	1ad3      	subs	r3, r2, r3
 8007582:	4a1f      	ldr	r2, [pc, #124]	; (8007600 <prvHeapInit+0xac>)
 8007584:	4413      	add	r3, r2
 8007586:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800758c:	4a1d      	ldr	r2, [pc, #116]	; (8007604 <prvHeapInit+0xb0>)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007592:	4b1c      	ldr	r3, [pc, #112]	; (8007604 <prvHeapInit+0xb0>)
 8007594:	2200      	movs	r2, #0
 8007596:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	68ba      	ldr	r2, [r7, #8]
 800759c:	4413      	add	r3, r2
 800759e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80075a0:	2208      	movs	r2, #8
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	1a9b      	subs	r3, r3, r2
 80075a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f023 0307 	bic.w	r3, r3, #7
 80075ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	4a15      	ldr	r2, [pc, #84]	; (8007608 <prvHeapInit+0xb4>)
 80075b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80075b6:	4b14      	ldr	r3, [pc, #80]	; (8007608 <prvHeapInit+0xb4>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	2200      	movs	r2, #0
 80075bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80075be:	4b12      	ldr	r3, [pc, #72]	; (8007608 <prvHeapInit+0xb4>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	2200      	movs	r2, #0
 80075c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	68fa      	ldr	r2, [r7, #12]
 80075ce:	1ad2      	subs	r2, r2, r3
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80075d4:	4b0c      	ldr	r3, [pc, #48]	; (8007608 <prvHeapInit+0xb4>)
 80075d6:	681a      	ldr	r2, [r3, #0]
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	4a0a      	ldr	r2, [pc, #40]	; (800760c <prvHeapInit+0xb8>)
 80075e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	4a09      	ldr	r2, [pc, #36]	; (8007610 <prvHeapInit+0xbc>)
 80075ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80075ec:	4b09      	ldr	r3, [pc, #36]	; (8007614 <prvHeapInit+0xc0>)
 80075ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80075f2:	601a      	str	r2, [r3, #0]
}
 80075f4:	bf00      	nop
 80075f6:	3714      	adds	r7, #20
 80075f8:	46bd      	mov	sp, r7
 80075fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fe:	4770      	bx	lr
 8007600:	20000764 	.word	0x20000764
 8007604:	20004364 	.word	0x20004364
 8007608:	2000436c 	.word	0x2000436c
 800760c:	20004374 	.word	0x20004374
 8007610:	20004370 	.word	0x20004370
 8007614:	20004380 	.word	0x20004380

08007618 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007618:	b480      	push	{r7}
 800761a:	b085      	sub	sp, #20
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007620:	4b28      	ldr	r3, [pc, #160]	; (80076c4 <prvInsertBlockIntoFreeList+0xac>)
 8007622:	60fb      	str	r3, [r7, #12]
 8007624:	e002      	b.n	800762c <prvInsertBlockIntoFreeList+0x14>
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	60fb      	str	r3, [r7, #12]
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	687a      	ldr	r2, [r7, #4]
 8007632:	429a      	cmp	r2, r3
 8007634:	d8f7      	bhi.n	8007626 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	68ba      	ldr	r2, [r7, #8]
 8007640:	4413      	add	r3, r2
 8007642:	687a      	ldr	r2, [r7, #4]
 8007644:	429a      	cmp	r2, r3
 8007646:	d108      	bne.n	800765a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	685a      	ldr	r2, [r3, #4]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	441a      	add	r2, r3
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	68ba      	ldr	r2, [r7, #8]
 8007664:	441a      	add	r2, r3
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	429a      	cmp	r2, r3
 800766c:	d118      	bne.n	80076a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681a      	ldr	r2, [r3, #0]
 8007672:	4b15      	ldr	r3, [pc, #84]	; (80076c8 <prvInsertBlockIntoFreeList+0xb0>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	429a      	cmp	r2, r3
 8007678:	d00d      	beq.n	8007696 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	685a      	ldr	r2, [r3, #4]
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	441a      	add	r2, r3
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	681a      	ldr	r2, [r3, #0]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	601a      	str	r2, [r3, #0]
 8007694:	e008      	b.n	80076a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007696:	4b0c      	ldr	r3, [pc, #48]	; (80076c8 <prvInsertBlockIntoFreeList+0xb0>)
 8007698:	681a      	ldr	r2, [r3, #0]
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	601a      	str	r2, [r3, #0]
 800769e:	e003      	b.n	80076a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681a      	ldr	r2, [r3, #0]
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80076a8:	68fa      	ldr	r2, [r7, #12]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	429a      	cmp	r2, r3
 80076ae:	d002      	beq.n	80076b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	687a      	ldr	r2, [r7, #4]
 80076b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80076b6:	bf00      	nop
 80076b8:	3714      	adds	r7, #20
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr
 80076c2:	bf00      	nop
 80076c4:	20004364 	.word	0x20004364
 80076c8:	2000436c 	.word	0x2000436c

080076cc <std>:
 80076cc:	2300      	movs	r3, #0
 80076ce:	b510      	push	{r4, lr}
 80076d0:	4604      	mov	r4, r0
 80076d2:	e9c0 3300 	strd	r3, r3, [r0]
 80076d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80076da:	6083      	str	r3, [r0, #8]
 80076dc:	8181      	strh	r1, [r0, #12]
 80076de:	6643      	str	r3, [r0, #100]	; 0x64
 80076e0:	81c2      	strh	r2, [r0, #14]
 80076e2:	6183      	str	r3, [r0, #24]
 80076e4:	4619      	mov	r1, r3
 80076e6:	2208      	movs	r2, #8
 80076e8:	305c      	adds	r0, #92	; 0x5c
 80076ea:	f000 f9e5 	bl	8007ab8 <memset>
 80076ee:	4b0d      	ldr	r3, [pc, #52]	; (8007724 <std+0x58>)
 80076f0:	6263      	str	r3, [r4, #36]	; 0x24
 80076f2:	4b0d      	ldr	r3, [pc, #52]	; (8007728 <std+0x5c>)
 80076f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80076f6:	4b0d      	ldr	r3, [pc, #52]	; (800772c <std+0x60>)
 80076f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80076fa:	4b0d      	ldr	r3, [pc, #52]	; (8007730 <std+0x64>)
 80076fc:	6323      	str	r3, [r4, #48]	; 0x30
 80076fe:	4b0d      	ldr	r3, [pc, #52]	; (8007734 <std+0x68>)
 8007700:	6224      	str	r4, [r4, #32]
 8007702:	429c      	cmp	r4, r3
 8007704:	d006      	beq.n	8007714 <std+0x48>
 8007706:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800770a:	4294      	cmp	r4, r2
 800770c:	d002      	beq.n	8007714 <std+0x48>
 800770e:	33d0      	adds	r3, #208	; 0xd0
 8007710:	429c      	cmp	r4, r3
 8007712:	d105      	bne.n	8007720 <std+0x54>
 8007714:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007718:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800771c:	f000 ba9a 	b.w	8007c54 <__retarget_lock_init_recursive>
 8007720:	bd10      	pop	{r4, pc}
 8007722:	bf00      	nop
 8007724:	08007909 	.word	0x08007909
 8007728:	0800792b 	.word	0x0800792b
 800772c:	08007963 	.word	0x08007963
 8007730:	08007987 	.word	0x08007987
 8007734:	20004384 	.word	0x20004384

08007738 <stdio_exit_handler>:
 8007738:	4a02      	ldr	r2, [pc, #8]	; (8007744 <stdio_exit_handler+0xc>)
 800773a:	4903      	ldr	r1, [pc, #12]	; (8007748 <stdio_exit_handler+0x10>)
 800773c:	4803      	ldr	r0, [pc, #12]	; (800774c <stdio_exit_handler+0x14>)
 800773e:	f000 b869 	b.w	8007814 <_fwalk_sglue>
 8007742:	bf00      	nop
 8007744:	20000010 	.word	0x20000010
 8007748:	08007f59 	.word	0x08007f59
 800774c:	2000001c 	.word	0x2000001c

08007750 <cleanup_stdio>:
 8007750:	6841      	ldr	r1, [r0, #4]
 8007752:	4b0c      	ldr	r3, [pc, #48]	; (8007784 <cleanup_stdio+0x34>)
 8007754:	4299      	cmp	r1, r3
 8007756:	b510      	push	{r4, lr}
 8007758:	4604      	mov	r4, r0
 800775a:	d001      	beq.n	8007760 <cleanup_stdio+0x10>
 800775c:	f000 fbfc 	bl	8007f58 <_fflush_r>
 8007760:	68a1      	ldr	r1, [r4, #8]
 8007762:	4b09      	ldr	r3, [pc, #36]	; (8007788 <cleanup_stdio+0x38>)
 8007764:	4299      	cmp	r1, r3
 8007766:	d002      	beq.n	800776e <cleanup_stdio+0x1e>
 8007768:	4620      	mov	r0, r4
 800776a:	f000 fbf5 	bl	8007f58 <_fflush_r>
 800776e:	68e1      	ldr	r1, [r4, #12]
 8007770:	4b06      	ldr	r3, [pc, #24]	; (800778c <cleanup_stdio+0x3c>)
 8007772:	4299      	cmp	r1, r3
 8007774:	d004      	beq.n	8007780 <cleanup_stdio+0x30>
 8007776:	4620      	mov	r0, r4
 8007778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800777c:	f000 bbec 	b.w	8007f58 <_fflush_r>
 8007780:	bd10      	pop	{r4, pc}
 8007782:	bf00      	nop
 8007784:	20004384 	.word	0x20004384
 8007788:	200043ec 	.word	0x200043ec
 800778c:	20004454 	.word	0x20004454

08007790 <global_stdio_init.part.0>:
 8007790:	b510      	push	{r4, lr}
 8007792:	4b0b      	ldr	r3, [pc, #44]	; (80077c0 <global_stdio_init.part.0+0x30>)
 8007794:	4c0b      	ldr	r4, [pc, #44]	; (80077c4 <global_stdio_init.part.0+0x34>)
 8007796:	4a0c      	ldr	r2, [pc, #48]	; (80077c8 <global_stdio_init.part.0+0x38>)
 8007798:	601a      	str	r2, [r3, #0]
 800779a:	4620      	mov	r0, r4
 800779c:	2200      	movs	r2, #0
 800779e:	2104      	movs	r1, #4
 80077a0:	f7ff ff94 	bl	80076cc <std>
 80077a4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80077a8:	2201      	movs	r2, #1
 80077aa:	2109      	movs	r1, #9
 80077ac:	f7ff ff8e 	bl	80076cc <std>
 80077b0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80077b4:	2202      	movs	r2, #2
 80077b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077ba:	2112      	movs	r1, #18
 80077bc:	f7ff bf86 	b.w	80076cc <std>
 80077c0:	200044bc 	.word	0x200044bc
 80077c4:	20004384 	.word	0x20004384
 80077c8:	08007739 	.word	0x08007739

080077cc <__sfp_lock_acquire>:
 80077cc:	4801      	ldr	r0, [pc, #4]	; (80077d4 <__sfp_lock_acquire+0x8>)
 80077ce:	f000 ba42 	b.w	8007c56 <__retarget_lock_acquire_recursive>
 80077d2:	bf00      	nop
 80077d4:	200044c5 	.word	0x200044c5

080077d8 <__sfp_lock_release>:
 80077d8:	4801      	ldr	r0, [pc, #4]	; (80077e0 <__sfp_lock_release+0x8>)
 80077da:	f000 ba3d 	b.w	8007c58 <__retarget_lock_release_recursive>
 80077de:	bf00      	nop
 80077e0:	200044c5 	.word	0x200044c5

080077e4 <__sinit>:
 80077e4:	b510      	push	{r4, lr}
 80077e6:	4604      	mov	r4, r0
 80077e8:	f7ff fff0 	bl	80077cc <__sfp_lock_acquire>
 80077ec:	6a23      	ldr	r3, [r4, #32]
 80077ee:	b11b      	cbz	r3, 80077f8 <__sinit+0x14>
 80077f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077f4:	f7ff bff0 	b.w	80077d8 <__sfp_lock_release>
 80077f8:	4b04      	ldr	r3, [pc, #16]	; (800780c <__sinit+0x28>)
 80077fa:	6223      	str	r3, [r4, #32]
 80077fc:	4b04      	ldr	r3, [pc, #16]	; (8007810 <__sinit+0x2c>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d1f5      	bne.n	80077f0 <__sinit+0xc>
 8007804:	f7ff ffc4 	bl	8007790 <global_stdio_init.part.0>
 8007808:	e7f2      	b.n	80077f0 <__sinit+0xc>
 800780a:	bf00      	nop
 800780c:	08007751 	.word	0x08007751
 8007810:	200044bc 	.word	0x200044bc

08007814 <_fwalk_sglue>:
 8007814:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007818:	4607      	mov	r7, r0
 800781a:	4688      	mov	r8, r1
 800781c:	4614      	mov	r4, r2
 800781e:	2600      	movs	r6, #0
 8007820:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007824:	f1b9 0901 	subs.w	r9, r9, #1
 8007828:	d505      	bpl.n	8007836 <_fwalk_sglue+0x22>
 800782a:	6824      	ldr	r4, [r4, #0]
 800782c:	2c00      	cmp	r4, #0
 800782e:	d1f7      	bne.n	8007820 <_fwalk_sglue+0xc>
 8007830:	4630      	mov	r0, r6
 8007832:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007836:	89ab      	ldrh	r3, [r5, #12]
 8007838:	2b01      	cmp	r3, #1
 800783a:	d907      	bls.n	800784c <_fwalk_sglue+0x38>
 800783c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007840:	3301      	adds	r3, #1
 8007842:	d003      	beq.n	800784c <_fwalk_sglue+0x38>
 8007844:	4629      	mov	r1, r5
 8007846:	4638      	mov	r0, r7
 8007848:	47c0      	blx	r8
 800784a:	4306      	orrs	r6, r0
 800784c:	3568      	adds	r5, #104	; 0x68
 800784e:	e7e9      	b.n	8007824 <_fwalk_sglue+0x10>

08007850 <_puts_r>:
 8007850:	6a03      	ldr	r3, [r0, #32]
 8007852:	b570      	push	{r4, r5, r6, lr}
 8007854:	6884      	ldr	r4, [r0, #8]
 8007856:	4605      	mov	r5, r0
 8007858:	460e      	mov	r6, r1
 800785a:	b90b      	cbnz	r3, 8007860 <_puts_r+0x10>
 800785c:	f7ff ffc2 	bl	80077e4 <__sinit>
 8007860:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007862:	07db      	lsls	r3, r3, #31
 8007864:	d405      	bmi.n	8007872 <_puts_r+0x22>
 8007866:	89a3      	ldrh	r3, [r4, #12]
 8007868:	0598      	lsls	r0, r3, #22
 800786a:	d402      	bmi.n	8007872 <_puts_r+0x22>
 800786c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800786e:	f000 f9f2 	bl	8007c56 <__retarget_lock_acquire_recursive>
 8007872:	89a3      	ldrh	r3, [r4, #12]
 8007874:	0719      	lsls	r1, r3, #28
 8007876:	d513      	bpl.n	80078a0 <_puts_r+0x50>
 8007878:	6923      	ldr	r3, [r4, #16]
 800787a:	b18b      	cbz	r3, 80078a0 <_puts_r+0x50>
 800787c:	3e01      	subs	r6, #1
 800787e:	68a3      	ldr	r3, [r4, #8]
 8007880:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007884:	3b01      	subs	r3, #1
 8007886:	60a3      	str	r3, [r4, #8]
 8007888:	b9e9      	cbnz	r1, 80078c6 <_puts_r+0x76>
 800788a:	2b00      	cmp	r3, #0
 800788c:	da2e      	bge.n	80078ec <_puts_r+0x9c>
 800788e:	4622      	mov	r2, r4
 8007890:	210a      	movs	r1, #10
 8007892:	4628      	mov	r0, r5
 8007894:	f000 f87b 	bl	800798e <__swbuf_r>
 8007898:	3001      	adds	r0, #1
 800789a:	d007      	beq.n	80078ac <_puts_r+0x5c>
 800789c:	250a      	movs	r5, #10
 800789e:	e007      	b.n	80078b0 <_puts_r+0x60>
 80078a0:	4621      	mov	r1, r4
 80078a2:	4628      	mov	r0, r5
 80078a4:	f000 f8b0 	bl	8007a08 <__swsetup_r>
 80078a8:	2800      	cmp	r0, #0
 80078aa:	d0e7      	beq.n	800787c <_puts_r+0x2c>
 80078ac:	f04f 35ff 	mov.w	r5, #4294967295
 80078b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80078b2:	07da      	lsls	r2, r3, #31
 80078b4:	d405      	bmi.n	80078c2 <_puts_r+0x72>
 80078b6:	89a3      	ldrh	r3, [r4, #12]
 80078b8:	059b      	lsls	r3, r3, #22
 80078ba:	d402      	bmi.n	80078c2 <_puts_r+0x72>
 80078bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80078be:	f000 f9cb 	bl	8007c58 <__retarget_lock_release_recursive>
 80078c2:	4628      	mov	r0, r5
 80078c4:	bd70      	pop	{r4, r5, r6, pc}
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	da04      	bge.n	80078d4 <_puts_r+0x84>
 80078ca:	69a2      	ldr	r2, [r4, #24]
 80078cc:	429a      	cmp	r2, r3
 80078ce:	dc06      	bgt.n	80078de <_puts_r+0x8e>
 80078d0:	290a      	cmp	r1, #10
 80078d2:	d004      	beq.n	80078de <_puts_r+0x8e>
 80078d4:	6823      	ldr	r3, [r4, #0]
 80078d6:	1c5a      	adds	r2, r3, #1
 80078d8:	6022      	str	r2, [r4, #0]
 80078da:	7019      	strb	r1, [r3, #0]
 80078dc:	e7cf      	b.n	800787e <_puts_r+0x2e>
 80078de:	4622      	mov	r2, r4
 80078e0:	4628      	mov	r0, r5
 80078e2:	f000 f854 	bl	800798e <__swbuf_r>
 80078e6:	3001      	adds	r0, #1
 80078e8:	d1c9      	bne.n	800787e <_puts_r+0x2e>
 80078ea:	e7df      	b.n	80078ac <_puts_r+0x5c>
 80078ec:	6823      	ldr	r3, [r4, #0]
 80078ee:	250a      	movs	r5, #10
 80078f0:	1c5a      	adds	r2, r3, #1
 80078f2:	6022      	str	r2, [r4, #0]
 80078f4:	701d      	strb	r5, [r3, #0]
 80078f6:	e7db      	b.n	80078b0 <_puts_r+0x60>

080078f8 <puts>:
 80078f8:	4b02      	ldr	r3, [pc, #8]	; (8007904 <puts+0xc>)
 80078fa:	4601      	mov	r1, r0
 80078fc:	6818      	ldr	r0, [r3, #0]
 80078fe:	f7ff bfa7 	b.w	8007850 <_puts_r>
 8007902:	bf00      	nop
 8007904:	20000068 	.word	0x20000068

08007908 <__sread>:
 8007908:	b510      	push	{r4, lr}
 800790a:	460c      	mov	r4, r1
 800790c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007910:	f000 f952 	bl	8007bb8 <_read_r>
 8007914:	2800      	cmp	r0, #0
 8007916:	bfab      	itete	ge
 8007918:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800791a:	89a3      	ldrhlt	r3, [r4, #12]
 800791c:	181b      	addge	r3, r3, r0
 800791e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007922:	bfac      	ite	ge
 8007924:	6563      	strge	r3, [r4, #84]	; 0x54
 8007926:	81a3      	strhlt	r3, [r4, #12]
 8007928:	bd10      	pop	{r4, pc}

0800792a <__swrite>:
 800792a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800792e:	461f      	mov	r7, r3
 8007930:	898b      	ldrh	r3, [r1, #12]
 8007932:	05db      	lsls	r3, r3, #23
 8007934:	4605      	mov	r5, r0
 8007936:	460c      	mov	r4, r1
 8007938:	4616      	mov	r6, r2
 800793a:	d505      	bpl.n	8007948 <__swrite+0x1e>
 800793c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007940:	2302      	movs	r3, #2
 8007942:	2200      	movs	r2, #0
 8007944:	f000 f926 	bl	8007b94 <_lseek_r>
 8007948:	89a3      	ldrh	r3, [r4, #12]
 800794a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800794e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007952:	81a3      	strh	r3, [r4, #12]
 8007954:	4632      	mov	r2, r6
 8007956:	463b      	mov	r3, r7
 8007958:	4628      	mov	r0, r5
 800795a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800795e:	f000 b93d 	b.w	8007bdc <_write_r>

08007962 <__sseek>:
 8007962:	b510      	push	{r4, lr}
 8007964:	460c      	mov	r4, r1
 8007966:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800796a:	f000 f913 	bl	8007b94 <_lseek_r>
 800796e:	1c43      	adds	r3, r0, #1
 8007970:	89a3      	ldrh	r3, [r4, #12]
 8007972:	bf15      	itete	ne
 8007974:	6560      	strne	r0, [r4, #84]	; 0x54
 8007976:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800797a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800797e:	81a3      	strheq	r3, [r4, #12]
 8007980:	bf18      	it	ne
 8007982:	81a3      	strhne	r3, [r4, #12]
 8007984:	bd10      	pop	{r4, pc}

08007986 <__sclose>:
 8007986:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800798a:	f000 b89d 	b.w	8007ac8 <_close_r>

0800798e <__swbuf_r>:
 800798e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007990:	460e      	mov	r6, r1
 8007992:	4614      	mov	r4, r2
 8007994:	4605      	mov	r5, r0
 8007996:	b118      	cbz	r0, 80079a0 <__swbuf_r+0x12>
 8007998:	6a03      	ldr	r3, [r0, #32]
 800799a:	b90b      	cbnz	r3, 80079a0 <__swbuf_r+0x12>
 800799c:	f7ff ff22 	bl	80077e4 <__sinit>
 80079a0:	69a3      	ldr	r3, [r4, #24]
 80079a2:	60a3      	str	r3, [r4, #8]
 80079a4:	89a3      	ldrh	r3, [r4, #12]
 80079a6:	071a      	lsls	r2, r3, #28
 80079a8:	d525      	bpl.n	80079f6 <__swbuf_r+0x68>
 80079aa:	6923      	ldr	r3, [r4, #16]
 80079ac:	b31b      	cbz	r3, 80079f6 <__swbuf_r+0x68>
 80079ae:	6823      	ldr	r3, [r4, #0]
 80079b0:	6922      	ldr	r2, [r4, #16]
 80079b2:	1a98      	subs	r0, r3, r2
 80079b4:	6963      	ldr	r3, [r4, #20]
 80079b6:	b2f6      	uxtb	r6, r6
 80079b8:	4283      	cmp	r3, r0
 80079ba:	4637      	mov	r7, r6
 80079bc:	dc04      	bgt.n	80079c8 <__swbuf_r+0x3a>
 80079be:	4621      	mov	r1, r4
 80079c0:	4628      	mov	r0, r5
 80079c2:	f000 fac9 	bl	8007f58 <_fflush_r>
 80079c6:	b9e0      	cbnz	r0, 8007a02 <__swbuf_r+0x74>
 80079c8:	68a3      	ldr	r3, [r4, #8]
 80079ca:	3b01      	subs	r3, #1
 80079cc:	60a3      	str	r3, [r4, #8]
 80079ce:	6823      	ldr	r3, [r4, #0]
 80079d0:	1c5a      	adds	r2, r3, #1
 80079d2:	6022      	str	r2, [r4, #0]
 80079d4:	701e      	strb	r6, [r3, #0]
 80079d6:	6962      	ldr	r2, [r4, #20]
 80079d8:	1c43      	adds	r3, r0, #1
 80079da:	429a      	cmp	r2, r3
 80079dc:	d004      	beq.n	80079e8 <__swbuf_r+0x5a>
 80079de:	89a3      	ldrh	r3, [r4, #12]
 80079e0:	07db      	lsls	r3, r3, #31
 80079e2:	d506      	bpl.n	80079f2 <__swbuf_r+0x64>
 80079e4:	2e0a      	cmp	r6, #10
 80079e6:	d104      	bne.n	80079f2 <__swbuf_r+0x64>
 80079e8:	4621      	mov	r1, r4
 80079ea:	4628      	mov	r0, r5
 80079ec:	f000 fab4 	bl	8007f58 <_fflush_r>
 80079f0:	b938      	cbnz	r0, 8007a02 <__swbuf_r+0x74>
 80079f2:	4638      	mov	r0, r7
 80079f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079f6:	4621      	mov	r1, r4
 80079f8:	4628      	mov	r0, r5
 80079fa:	f000 f805 	bl	8007a08 <__swsetup_r>
 80079fe:	2800      	cmp	r0, #0
 8007a00:	d0d5      	beq.n	80079ae <__swbuf_r+0x20>
 8007a02:	f04f 37ff 	mov.w	r7, #4294967295
 8007a06:	e7f4      	b.n	80079f2 <__swbuf_r+0x64>

08007a08 <__swsetup_r>:
 8007a08:	b538      	push	{r3, r4, r5, lr}
 8007a0a:	4b2a      	ldr	r3, [pc, #168]	; (8007ab4 <__swsetup_r+0xac>)
 8007a0c:	4605      	mov	r5, r0
 8007a0e:	6818      	ldr	r0, [r3, #0]
 8007a10:	460c      	mov	r4, r1
 8007a12:	b118      	cbz	r0, 8007a1c <__swsetup_r+0x14>
 8007a14:	6a03      	ldr	r3, [r0, #32]
 8007a16:	b90b      	cbnz	r3, 8007a1c <__swsetup_r+0x14>
 8007a18:	f7ff fee4 	bl	80077e4 <__sinit>
 8007a1c:	89a3      	ldrh	r3, [r4, #12]
 8007a1e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007a22:	0718      	lsls	r0, r3, #28
 8007a24:	d422      	bmi.n	8007a6c <__swsetup_r+0x64>
 8007a26:	06d9      	lsls	r1, r3, #27
 8007a28:	d407      	bmi.n	8007a3a <__swsetup_r+0x32>
 8007a2a:	2309      	movs	r3, #9
 8007a2c:	602b      	str	r3, [r5, #0]
 8007a2e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007a32:	81a3      	strh	r3, [r4, #12]
 8007a34:	f04f 30ff 	mov.w	r0, #4294967295
 8007a38:	e034      	b.n	8007aa4 <__swsetup_r+0x9c>
 8007a3a:	0758      	lsls	r0, r3, #29
 8007a3c:	d512      	bpl.n	8007a64 <__swsetup_r+0x5c>
 8007a3e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a40:	b141      	cbz	r1, 8007a54 <__swsetup_r+0x4c>
 8007a42:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a46:	4299      	cmp	r1, r3
 8007a48:	d002      	beq.n	8007a50 <__swsetup_r+0x48>
 8007a4a:	4628      	mov	r0, r5
 8007a4c:	f000 f906 	bl	8007c5c <_free_r>
 8007a50:	2300      	movs	r3, #0
 8007a52:	6363      	str	r3, [r4, #52]	; 0x34
 8007a54:	89a3      	ldrh	r3, [r4, #12]
 8007a56:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007a5a:	81a3      	strh	r3, [r4, #12]
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	6063      	str	r3, [r4, #4]
 8007a60:	6923      	ldr	r3, [r4, #16]
 8007a62:	6023      	str	r3, [r4, #0]
 8007a64:	89a3      	ldrh	r3, [r4, #12]
 8007a66:	f043 0308 	orr.w	r3, r3, #8
 8007a6a:	81a3      	strh	r3, [r4, #12]
 8007a6c:	6923      	ldr	r3, [r4, #16]
 8007a6e:	b94b      	cbnz	r3, 8007a84 <__swsetup_r+0x7c>
 8007a70:	89a3      	ldrh	r3, [r4, #12]
 8007a72:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007a76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a7a:	d003      	beq.n	8007a84 <__swsetup_r+0x7c>
 8007a7c:	4621      	mov	r1, r4
 8007a7e:	4628      	mov	r0, r5
 8007a80:	f000 fab8 	bl	8007ff4 <__smakebuf_r>
 8007a84:	89a0      	ldrh	r0, [r4, #12]
 8007a86:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007a8a:	f010 0301 	ands.w	r3, r0, #1
 8007a8e:	d00a      	beq.n	8007aa6 <__swsetup_r+0x9e>
 8007a90:	2300      	movs	r3, #0
 8007a92:	60a3      	str	r3, [r4, #8]
 8007a94:	6963      	ldr	r3, [r4, #20]
 8007a96:	425b      	negs	r3, r3
 8007a98:	61a3      	str	r3, [r4, #24]
 8007a9a:	6923      	ldr	r3, [r4, #16]
 8007a9c:	b943      	cbnz	r3, 8007ab0 <__swsetup_r+0xa8>
 8007a9e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007aa2:	d1c4      	bne.n	8007a2e <__swsetup_r+0x26>
 8007aa4:	bd38      	pop	{r3, r4, r5, pc}
 8007aa6:	0781      	lsls	r1, r0, #30
 8007aa8:	bf58      	it	pl
 8007aaa:	6963      	ldrpl	r3, [r4, #20]
 8007aac:	60a3      	str	r3, [r4, #8]
 8007aae:	e7f4      	b.n	8007a9a <__swsetup_r+0x92>
 8007ab0:	2000      	movs	r0, #0
 8007ab2:	e7f7      	b.n	8007aa4 <__swsetup_r+0x9c>
 8007ab4:	20000068 	.word	0x20000068

08007ab8 <memset>:
 8007ab8:	4402      	add	r2, r0
 8007aba:	4603      	mov	r3, r0
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d100      	bne.n	8007ac2 <memset+0xa>
 8007ac0:	4770      	bx	lr
 8007ac2:	f803 1b01 	strb.w	r1, [r3], #1
 8007ac6:	e7f9      	b.n	8007abc <memset+0x4>

08007ac8 <_close_r>:
 8007ac8:	b538      	push	{r3, r4, r5, lr}
 8007aca:	4d06      	ldr	r5, [pc, #24]	; (8007ae4 <_close_r+0x1c>)
 8007acc:	2300      	movs	r3, #0
 8007ace:	4604      	mov	r4, r0
 8007ad0:	4608      	mov	r0, r1
 8007ad2:	602b      	str	r3, [r5, #0]
 8007ad4:	f7f9 fc05 	bl	80012e2 <_close>
 8007ad8:	1c43      	adds	r3, r0, #1
 8007ada:	d102      	bne.n	8007ae2 <_close_r+0x1a>
 8007adc:	682b      	ldr	r3, [r5, #0]
 8007ade:	b103      	cbz	r3, 8007ae2 <_close_r+0x1a>
 8007ae0:	6023      	str	r3, [r4, #0]
 8007ae2:	bd38      	pop	{r3, r4, r5, pc}
 8007ae4:	200044c0 	.word	0x200044c0

08007ae8 <_reclaim_reent>:
 8007ae8:	4b29      	ldr	r3, [pc, #164]	; (8007b90 <_reclaim_reent+0xa8>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4283      	cmp	r3, r0
 8007aee:	b570      	push	{r4, r5, r6, lr}
 8007af0:	4604      	mov	r4, r0
 8007af2:	d04b      	beq.n	8007b8c <_reclaim_reent+0xa4>
 8007af4:	69c3      	ldr	r3, [r0, #28]
 8007af6:	b143      	cbz	r3, 8007b0a <_reclaim_reent+0x22>
 8007af8:	68db      	ldr	r3, [r3, #12]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d144      	bne.n	8007b88 <_reclaim_reent+0xa0>
 8007afe:	69e3      	ldr	r3, [r4, #28]
 8007b00:	6819      	ldr	r1, [r3, #0]
 8007b02:	b111      	cbz	r1, 8007b0a <_reclaim_reent+0x22>
 8007b04:	4620      	mov	r0, r4
 8007b06:	f000 f8a9 	bl	8007c5c <_free_r>
 8007b0a:	6961      	ldr	r1, [r4, #20]
 8007b0c:	b111      	cbz	r1, 8007b14 <_reclaim_reent+0x2c>
 8007b0e:	4620      	mov	r0, r4
 8007b10:	f000 f8a4 	bl	8007c5c <_free_r>
 8007b14:	69e1      	ldr	r1, [r4, #28]
 8007b16:	b111      	cbz	r1, 8007b1e <_reclaim_reent+0x36>
 8007b18:	4620      	mov	r0, r4
 8007b1a:	f000 f89f 	bl	8007c5c <_free_r>
 8007b1e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007b20:	b111      	cbz	r1, 8007b28 <_reclaim_reent+0x40>
 8007b22:	4620      	mov	r0, r4
 8007b24:	f000 f89a 	bl	8007c5c <_free_r>
 8007b28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b2a:	b111      	cbz	r1, 8007b32 <_reclaim_reent+0x4a>
 8007b2c:	4620      	mov	r0, r4
 8007b2e:	f000 f895 	bl	8007c5c <_free_r>
 8007b32:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007b34:	b111      	cbz	r1, 8007b3c <_reclaim_reent+0x54>
 8007b36:	4620      	mov	r0, r4
 8007b38:	f000 f890 	bl	8007c5c <_free_r>
 8007b3c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007b3e:	b111      	cbz	r1, 8007b46 <_reclaim_reent+0x5e>
 8007b40:	4620      	mov	r0, r4
 8007b42:	f000 f88b 	bl	8007c5c <_free_r>
 8007b46:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8007b48:	b111      	cbz	r1, 8007b50 <_reclaim_reent+0x68>
 8007b4a:	4620      	mov	r0, r4
 8007b4c:	f000 f886 	bl	8007c5c <_free_r>
 8007b50:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007b52:	b111      	cbz	r1, 8007b5a <_reclaim_reent+0x72>
 8007b54:	4620      	mov	r0, r4
 8007b56:	f000 f881 	bl	8007c5c <_free_r>
 8007b5a:	6a23      	ldr	r3, [r4, #32]
 8007b5c:	b1b3      	cbz	r3, 8007b8c <_reclaim_reent+0xa4>
 8007b5e:	4620      	mov	r0, r4
 8007b60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007b64:	4718      	bx	r3
 8007b66:	5949      	ldr	r1, [r1, r5]
 8007b68:	b941      	cbnz	r1, 8007b7c <_reclaim_reent+0x94>
 8007b6a:	3504      	adds	r5, #4
 8007b6c:	69e3      	ldr	r3, [r4, #28]
 8007b6e:	2d80      	cmp	r5, #128	; 0x80
 8007b70:	68d9      	ldr	r1, [r3, #12]
 8007b72:	d1f8      	bne.n	8007b66 <_reclaim_reent+0x7e>
 8007b74:	4620      	mov	r0, r4
 8007b76:	f000 f871 	bl	8007c5c <_free_r>
 8007b7a:	e7c0      	b.n	8007afe <_reclaim_reent+0x16>
 8007b7c:	680e      	ldr	r6, [r1, #0]
 8007b7e:	4620      	mov	r0, r4
 8007b80:	f000 f86c 	bl	8007c5c <_free_r>
 8007b84:	4631      	mov	r1, r6
 8007b86:	e7ef      	b.n	8007b68 <_reclaim_reent+0x80>
 8007b88:	2500      	movs	r5, #0
 8007b8a:	e7ef      	b.n	8007b6c <_reclaim_reent+0x84>
 8007b8c:	bd70      	pop	{r4, r5, r6, pc}
 8007b8e:	bf00      	nop
 8007b90:	20000068 	.word	0x20000068

08007b94 <_lseek_r>:
 8007b94:	b538      	push	{r3, r4, r5, lr}
 8007b96:	4d07      	ldr	r5, [pc, #28]	; (8007bb4 <_lseek_r+0x20>)
 8007b98:	4604      	mov	r4, r0
 8007b9a:	4608      	mov	r0, r1
 8007b9c:	4611      	mov	r1, r2
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	602a      	str	r2, [r5, #0]
 8007ba2:	461a      	mov	r2, r3
 8007ba4:	f7f9 fbc4 	bl	8001330 <_lseek>
 8007ba8:	1c43      	adds	r3, r0, #1
 8007baa:	d102      	bne.n	8007bb2 <_lseek_r+0x1e>
 8007bac:	682b      	ldr	r3, [r5, #0]
 8007bae:	b103      	cbz	r3, 8007bb2 <_lseek_r+0x1e>
 8007bb0:	6023      	str	r3, [r4, #0]
 8007bb2:	bd38      	pop	{r3, r4, r5, pc}
 8007bb4:	200044c0 	.word	0x200044c0

08007bb8 <_read_r>:
 8007bb8:	b538      	push	{r3, r4, r5, lr}
 8007bba:	4d07      	ldr	r5, [pc, #28]	; (8007bd8 <_read_r+0x20>)
 8007bbc:	4604      	mov	r4, r0
 8007bbe:	4608      	mov	r0, r1
 8007bc0:	4611      	mov	r1, r2
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	602a      	str	r2, [r5, #0]
 8007bc6:	461a      	mov	r2, r3
 8007bc8:	f7f9 fb52 	bl	8001270 <_read>
 8007bcc:	1c43      	adds	r3, r0, #1
 8007bce:	d102      	bne.n	8007bd6 <_read_r+0x1e>
 8007bd0:	682b      	ldr	r3, [r5, #0]
 8007bd2:	b103      	cbz	r3, 8007bd6 <_read_r+0x1e>
 8007bd4:	6023      	str	r3, [r4, #0]
 8007bd6:	bd38      	pop	{r3, r4, r5, pc}
 8007bd8:	200044c0 	.word	0x200044c0

08007bdc <_write_r>:
 8007bdc:	b538      	push	{r3, r4, r5, lr}
 8007bde:	4d07      	ldr	r5, [pc, #28]	; (8007bfc <_write_r+0x20>)
 8007be0:	4604      	mov	r4, r0
 8007be2:	4608      	mov	r0, r1
 8007be4:	4611      	mov	r1, r2
 8007be6:	2200      	movs	r2, #0
 8007be8:	602a      	str	r2, [r5, #0]
 8007bea:	461a      	mov	r2, r3
 8007bec:	f7f9 fb5d 	bl	80012aa <_write>
 8007bf0:	1c43      	adds	r3, r0, #1
 8007bf2:	d102      	bne.n	8007bfa <_write_r+0x1e>
 8007bf4:	682b      	ldr	r3, [r5, #0]
 8007bf6:	b103      	cbz	r3, 8007bfa <_write_r+0x1e>
 8007bf8:	6023      	str	r3, [r4, #0]
 8007bfa:	bd38      	pop	{r3, r4, r5, pc}
 8007bfc:	200044c0 	.word	0x200044c0

08007c00 <__errno>:
 8007c00:	4b01      	ldr	r3, [pc, #4]	; (8007c08 <__errno+0x8>)
 8007c02:	6818      	ldr	r0, [r3, #0]
 8007c04:	4770      	bx	lr
 8007c06:	bf00      	nop
 8007c08:	20000068 	.word	0x20000068

08007c0c <__libc_init_array>:
 8007c0c:	b570      	push	{r4, r5, r6, lr}
 8007c0e:	4d0d      	ldr	r5, [pc, #52]	; (8007c44 <__libc_init_array+0x38>)
 8007c10:	4c0d      	ldr	r4, [pc, #52]	; (8007c48 <__libc_init_array+0x3c>)
 8007c12:	1b64      	subs	r4, r4, r5
 8007c14:	10a4      	asrs	r4, r4, #2
 8007c16:	2600      	movs	r6, #0
 8007c18:	42a6      	cmp	r6, r4
 8007c1a:	d109      	bne.n	8007c30 <__libc_init_array+0x24>
 8007c1c:	4d0b      	ldr	r5, [pc, #44]	; (8007c4c <__libc_init_array+0x40>)
 8007c1e:	4c0c      	ldr	r4, [pc, #48]	; (8007c50 <__libc_init_array+0x44>)
 8007c20:	f000 fa56 	bl	80080d0 <_init>
 8007c24:	1b64      	subs	r4, r4, r5
 8007c26:	10a4      	asrs	r4, r4, #2
 8007c28:	2600      	movs	r6, #0
 8007c2a:	42a6      	cmp	r6, r4
 8007c2c:	d105      	bne.n	8007c3a <__libc_init_array+0x2e>
 8007c2e:	bd70      	pop	{r4, r5, r6, pc}
 8007c30:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c34:	4798      	blx	r3
 8007c36:	3601      	adds	r6, #1
 8007c38:	e7ee      	b.n	8007c18 <__libc_init_array+0xc>
 8007c3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c3e:	4798      	blx	r3
 8007c40:	3601      	adds	r6, #1
 8007c42:	e7f2      	b.n	8007c2a <__libc_init_array+0x1e>
 8007c44:	08008224 	.word	0x08008224
 8007c48:	08008224 	.word	0x08008224
 8007c4c:	08008224 	.word	0x08008224
 8007c50:	08008228 	.word	0x08008228

08007c54 <__retarget_lock_init_recursive>:
 8007c54:	4770      	bx	lr

08007c56 <__retarget_lock_acquire_recursive>:
 8007c56:	4770      	bx	lr

08007c58 <__retarget_lock_release_recursive>:
 8007c58:	4770      	bx	lr
	...

08007c5c <_free_r>:
 8007c5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c5e:	2900      	cmp	r1, #0
 8007c60:	d044      	beq.n	8007cec <_free_r+0x90>
 8007c62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c66:	9001      	str	r0, [sp, #4]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	f1a1 0404 	sub.w	r4, r1, #4
 8007c6e:	bfb8      	it	lt
 8007c70:	18e4      	addlt	r4, r4, r3
 8007c72:	f000 f8df 	bl	8007e34 <__malloc_lock>
 8007c76:	4a1e      	ldr	r2, [pc, #120]	; (8007cf0 <_free_r+0x94>)
 8007c78:	9801      	ldr	r0, [sp, #4]
 8007c7a:	6813      	ldr	r3, [r2, #0]
 8007c7c:	b933      	cbnz	r3, 8007c8c <_free_r+0x30>
 8007c7e:	6063      	str	r3, [r4, #4]
 8007c80:	6014      	str	r4, [r2, #0]
 8007c82:	b003      	add	sp, #12
 8007c84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007c88:	f000 b8da 	b.w	8007e40 <__malloc_unlock>
 8007c8c:	42a3      	cmp	r3, r4
 8007c8e:	d908      	bls.n	8007ca2 <_free_r+0x46>
 8007c90:	6825      	ldr	r5, [r4, #0]
 8007c92:	1961      	adds	r1, r4, r5
 8007c94:	428b      	cmp	r3, r1
 8007c96:	bf01      	itttt	eq
 8007c98:	6819      	ldreq	r1, [r3, #0]
 8007c9a:	685b      	ldreq	r3, [r3, #4]
 8007c9c:	1949      	addeq	r1, r1, r5
 8007c9e:	6021      	streq	r1, [r4, #0]
 8007ca0:	e7ed      	b.n	8007c7e <_free_r+0x22>
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	b10b      	cbz	r3, 8007cac <_free_r+0x50>
 8007ca8:	42a3      	cmp	r3, r4
 8007caa:	d9fa      	bls.n	8007ca2 <_free_r+0x46>
 8007cac:	6811      	ldr	r1, [r2, #0]
 8007cae:	1855      	adds	r5, r2, r1
 8007cb0:	42a5      	cmp	r5, r4
 8007cb2:	d10b      	bne.n	8007ccc <_free_r+0x70>
 8007cb4:	6824      	ldr	r4, [r4, #0]
 8007cb6:	4421      	add	r1, r4
 8007cb8:	1854      	adds	r4, r2, r1
 8007cba:	42a3      	cmp	r3, r4
 8007cbc:	6011      	str	r1, [r2, #0]
 8007cbe:	d1e0      	bne.n	8007c82 <_free_r+0x26>
 8007cc0:	681c      	ldr	r4, [r3, #0]
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	6053      	str	r3, [r2, #4]
 8007cc6:	440c      	add	r4, r1
 8007cc8:	6014      	str	r4, [r2, #0]
 8007cca:	e7da      	b.n	8007c82 <_free_r+0x26>
 8007ccc:	d902      	bls.n	8007cd4 <_free_r+0x78>
 8007cce:	230c      	movs	r3, #12
 8007cd0:	6003      	str	r3, [r0, #0]
 8007cd2:	e7d6      	b.n	8007c82 <_free_r+0x26>
 8007cd4:	6825      	ldr	r5, [r4, #0]
 8007cd6:	1961      	adds	r1, r4, r5
 8007cd8:	428b      	cmp	r3, r1
 8007cda:	bf04      	itt	eq
 8007cdc:	6819      	ldreq	r1, [r3, #0]
 8007cde:	685b      	ldreq	r3, [r3, #4]
 8007ce0:	6063      	str	r3, [r4, #4]
 8007ce2:	bf04      	itt	eq
 8007ce4:	1949      	addeq	r1, r1, r5
 8007ce6:	6021      	streq	r1, [r4, #0]
 8007ce8:	6054      	str	r4, [r2, #4]
 8007cea:	e7ca      	b.n	8007c82 <_free_r+0x26>
 8007cec:	b003      	add	sp, #12
 8007cee:	bd30      	pop	{r4, r5, pc}
 8007cf0:	200044c8 	.word	0x200044c8

08007cf4 <sbrk_aligned>:
 8007cf4:	b570      	push	{r4, r5, r6, lr}
 8007cf6:	4e0e      	ldr	r6, [pc, #56]	; (8007d30 <sbrk_aligned+0x3c>)
 8007cf8:	460c      	mov	r4, r1
 8007cfa:	6831      	ldr	r1, [r6, #0]
 8007cfc:	4605      	mov	r5, r0
 8007cfe:	b911      	cbnz	r1, 8007d06 <sbrk_aligned+0x12>
 8007d00:	f000 f9d6 	bl	80080b0 <_sbrk_r>
 8007d04:	6030      	str	r0, [r6, #0]
 8007d06:	4621      	mov	r1, r4
 8007d08:	4628      	mov	r0, r5
 8007d0a:	f000 f9d1 	bl	80080b0 <_sbrk_r>
 8007d0e:	1c43      	adds	r3, r0, #1
 8007d10:	d00a      	beq.n	8007d28 <sbrk_aligned+0x34>
 8007d12:	1cc4      	adds	r4, r0, #3
 8007d14:	f024 0403 	bic.w	r4, r4, #3
 8007d18:	42a0      	cmp	r0, r4
 8007d1a:	d007      	beq.n	8007d2c <sbrk_aligned+0x38>
 8007d1c:	1a21      	subs	r1, r4, r0
 8007d1e:	4628      	mov	r0, r5
 8007d20:	f000 f9c6 	bl	80080b0 <_sbrk_r>
 8007d24:	3001      	adds	r0, #1
 8007d26:	d101      	bne.n	8007d2c <sbrk_aligned+0x38>
 8007d28:	f04f 34ff 	mov.w	r4, #4294967295
 8007d2c:	4620      	mov	r0, r4
 8007d2e:	bd70      	pop	{r4, r5, r6, pc}
 8007d30:	200044cc 	.word	0x200044cc

08007d34 <_malloc_r>:
 8007d34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d38:	1ccd      	adds	r5, r1, #3
 8007d3a:	f025 0503 	bic.w	r5, r5, #3
 8007d3e:	3508      	adds	r5, #8
 8007d40:	2d0c      	cmp	r5, #12
 8007d42:	bf38      	it	cc
 8007d44:	250c      	movcc	r5, #12
 8007d46:	2d00      	cmp	r5, #0
 8007d48:	4607      	mov	r7, r0
 8007d4a:	db01      	blt.n	8007d50 <_malloc_r+0x1c>
 8007d4c:	42a9      	cmp	r1, r5
 8007d4e:	d905      	bls.n	8007d5c <_malloc_r+0x28>
 8007d50:	230c      	movs	r3, #12
 8007d52:	603b      	str	r3, [r7, #0]
 8007d54:	2600      	movs	r6, #0
 8007d56:	4630      	mov	r0, r6
 8007d58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d5c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007e30 <_malloc_r+0xfc>
 8007d60:	f000 f868 	bl	8007e34 <__malloc_lock>
 8007d64:	f8d8 3000 	ldr.w	r3, [r8]
 8007d68:	461c      	mov	r4, r3
 8007d6a:	bb5c      	cbnz	r4, 8007dc4 <_malloc_r+0x90>
 8007d6c:	4629      	mov	r1, r5
 8007d6e:	4638      	mov	r0, r7
 8007d70:	f7ff ffc0 	bl	8007cf4 <sbrk_aligned>
 8007d74:	1c43      	adds	r3, r0, #1
 8007d76:	4604      	mov	r4, r0
 8007d78:	d155      	bne.n	8007e26 <_malloc_r+0xf2>
 8007d7a:	f8d8 4000 	ldr.w	r4, [r8]
 8007d7e:	4626      	mov	r6, r4
 8007d80:	2e00      	cmp	r6, #0
 8007d82:	d145      	bne.n	8007e10 <_malloc_r+0xdc>
 8007d84:	2c00      	cmp	r4, #0
 8007d86:	d048      	beq.n	8007e1a <_malloc_r+0xe6>
 8007d88:	6823      	ldr	r3, [r4, #0]
 8007d8a:	4631      	mov	r1, r6
 8007d8c:	4638      	mov	r0, r7
 8007d8e:	eb04 0903 	add.w	r9, r4, r3
 8007d92:	f000 f98d 	bl	80080b0 <_sbrk_r>
 8007d96:	4581      	cmp	r9, r0
 8007d98:	d13f      	bne.n	8007e1a <_malloc_r+0xe6>
 8007d9a:	6821      	ldr	r1, [r4, #0]
 8007d9c:	1a6d      	subs	r5, r5, r1
 8007d9e:	4629      	mov	r1, r5
 8007da0:	4638      	mov	r0, r7
 8007da2:	f7ff ffa7 	bl	8007cf4 <sbrk_aligned>
 8007da6:	3001      	adds	r0, #1
 8007da8:	d037      	beq.n	8007e1a <_malloc_r+0xe6>
 8007daa:	6823      	ldr	r3, [r4, #0]
 8007dac:	442b      	add	r3, r5
 8007dae:	6023      	str	r3, [r4, #0]
 8007db0:	f8d8 3000 	ldr.w	r3, [r8]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d038      	beq.n	8007e2a <_malloc_r+0xf6>
 8007db8:	685a      	ldr	r2, [r3, #4]
 8007dba:	42a2      	cmp	r2, r4
 8007dbc:	d12b      	bne.n	8007e16 <_malloc_r+0xe2>
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	605a      	str	r2, [r3, #4]
 8007dc2:	e00f      	b.n	8007de4 <_malloc_r+0xb0>
 8007dc4:	6822      	ldr	r2, [r4, #0]
 8007dc6:	1b52      	subs	r2, r2, r5
 8007dc8:	d41f      	bmi.n	8007e0a <_malloc_r+0xd6>
 8007dca:	2a0b      	cmp	r2, #11
 8007dcc:	d917      	bls.n	8007dfe <_malloc_r+0xca>
 8007dce:	1961      	adds	r1, r4, r5
 8007dd0:	42a3      	cmp	r3, r4
 8007dd2:	6025      	str	r5, [r4, #0]
 8007dd4:	bf18      	it	ne
 8007dd6:	6059      	strne	r1, [r3, #4]
 8007dd8:	6863      	ldr	r3, [r4, #4]
 8007dda:	bf08      	it	eq
 8007ddc:	f8c8 1000 	streq.w	r1, [r8]
 8007de0:	5162      	str	r2, [r4, r5]
 8007de2:	604b      	str	r3, [r1, #4]
 8007de4:	4638      	mov	r0, r7
 8007de6:	f104 060b 	add.w	r6, r4, #11
 8007dea:	f000 f829 	bl	8007e40 <__malloc_unlock>
 8007dee:	f026 0607 	bic.w	r6, r6, #7
 8007df2:	1d23      	adds	r3, r4, #4
 8007df4:	1af2      	subs	r2, r6, r3
 8007df6:	d0ae      	beq.n	8007d56 <_malloc_r+0x22>
 8007df8:	1b9b      	subs	r3, r3, r6
 8007dfa:	50a3      	str	r3, [r4, r2]
 8007dfc:	e7ab      	b.n	8007d56 <_malloc_r+0x22>
 8007dfe:	42a3      	cmp	r3, r4
 8007e00:	6862      	ldr	r2, [r4, #4]
 8007e02:	d1dd      	bne.n	8007dc0 <_malloc_r+0x8c>
 8007e04:	f8c8 2000 	str.w	r2, [r8]
 8007e08:	e7ec      	b.n	8007de4 <_malloc_r+0xb0>
 8007e0a:	4623      	mov	r3, r4
 8007e0c:	6864      	ldr	r4, [r4, #4]
 8007e0e:	e7ac      	b.n	8007d6a <_malloc_r+0x36>
 8007e10:	4634      	mov	r4, r6
 8007e12:	6876      	ldr	r6, [r6, #4]
 8007e14:	e7b4      	b.n	8007d80 <_malloc_r+0x4c>
 8007e16:	4613      	mov	r3, r2
 8007e18:	e7cc      	b.n	8007db4 <_malloc_r+0x80>
 8007e1a:	230c      	movs	r3, #12
 8007e1c:	603b      	str	r3, [r7, #0]
 8007e1e:	4638      	mov	r0, r7
 8007e20:	f000 f80e 	bl	8007e40 <__malloc_unlock>
 8007e24:	e797      	b.n	8007d56 <_malloc_r+0x22>
 8007e26:	6025      	str	r5, [r4, #0]
 8007e28:	e7dc      	b.n	8007de4 <_malloc_r+0xb0>
 8007e2a:	605b      	str	r3, [r3, #4]
 8007e2c:	deff      	udf	#255	; 0xff
 8007e2e:	bf00      	nop
 8007e30:	200044c8 	.word	0x200044c8

08007e34 <__malloc_lock>:
 8007e34:	4801      	ldr	r0, [pc, #4]	; (8007e3c <__malloc_lock+0x8>)
 8007e36:	f7ff bf0e 	b.w	8007c56 <__retarget_lock_acquire_recursive>
 8007e3a:	bf00      	nop
 8007e3c:	200044c4 	.word	0x200044c4

08007e40 <__malloc_unlock>:
 8007e40:	4801      	ldr	r0, [pc, #4]	; (8007e48 <__malloc_unlock+0x8>)
 8007e42:	f7ff bf09 	b.w	8007c58 <__retarget_lock_release_recursive>
 8007e46:	bf00      	nop
 8007e48:	200044c4 	.word	0x200044c4

08007e4c <__sflush_r>:
 8007e4c:	898a      	ldrh	r2, [r1, #12]
 8007e4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e52:	4605      	mov	r5, r0
 8007e54:	0710      	lsls	r0, r2, #28
 8007e56:	460c      	mov	r4, r1
 8007e58:	d458      	bmi.n	8007f0c <__sflush_r+0xc0>
 8007e5a:	684b      	ldr	r3, [r1, #4]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	dc05      	bgt.n	8007e6c <__sflush_r+0x20>
 8007e60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	dc02      	bgt.n	8007e6c <__sflush_r+0x20>
 8007e66:	2000      	movs	r0, #0
 8007e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e6e:	2e00      	cmp	r6, #0
 8007e70:	d0f9      	beq.n	8007e66 <__sflush_r+0x1a>
 8007e72:	2300      	movs	r3, #0
 8007e74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007e78:	682f      	ldr	r7, [r5, #0]
 8007e7a:	6a21      	ldr	r1, [r4, #32]
 8007e7c:	602b      	str	r3, [r5, #0]
 8007e7e:	d032      	beq.n	8007ee6 <__sflush_r+0x9a>
 8007e80:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007e82:	89a3      	ldrh	r3, [r4, #12]
 8007e84:	075a      	lsls	r2, r3, #29
 8007e86:	d505      	bpl.n	8007e94 <__sflush_r+0x48>
 8007e88:	6863      	ldr	r3, [r4, #4]
 8007e8a:	1ac0      	subs	r0, r0, r3
 8007e8c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007e8e:	b10b      	cbz	r3, 8007e94 <__sflush_r+0x48>
 8007e90:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007e92:	1ac0      	subs	r0, r0, r3
 8007e94:	2300      	movs	r3, #0
 8007e96:	4602      	mov	r2, r0
 8007e98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e9a:	6a21      	ldr	r1, [r4, #32]
 8007e9c:	4628      	mov	r0, r5
 8007e9e:	47b0      	blx	r6
 8007ea0:	1c43      	adds	r3, r0, #1
 8007ea2:	89a3      	ldrh	r3, [r4, #12]
 8007ea4:	d106      	bne.n	8007eb4 <__sflush_r+0x68>
 8007ea6:	6829      	ldr	r1, [r5, #0]
 8007ea8:	291d      	cmp	r1, #29
 8007eaa:	d82b      	bhi.n	8007f04 <__sflush_r+0xb8>
 8007eac:	4a29      	ldr	r2, [pc, #164]	; (8007f54 <__sflush_r+0x108>)
 8007eae:	410a      	asrs	r2, r1
 8007eb0:	07d6      	lsls	r6, r2, #31
 8007eb2:	d427      	bmi.n	8007f04 <__sflush_r+0xb8>
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	6062      	str	r2, [r4, #4]
 8007eb8:	04d9      	lsls	r1, r3, #19
 8007eba:	6922      	ldr	r2, [r4, #16]
 8007ebc:	6022      	str	r2, [r4, #0]
 8007ebe:	d504      	bpl.n	8007eca <__sflush_r+0x7e>
 8007ec0:	1c42      	adds	r2, r0, #1
 8007ec2:	d101      	bne.n	8007ec8 <__sflush_r+0x7c>
 8007ec4:	682b      	ldr	r3, [r5, #0]
 8007ec6:	b903      	cbnz	r3, 8007eca <__sflush_r+0x7e>
 8007ec8:	6560      	str	r0, [r4, #84]	; 0x54
 8007eca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ecc:	602f      	str	r7, [r5, #0]
 8007ece:	2900      	cmp	r1, #0
 8007ed0:	d0c9      	beq.n	8007e66 <__sflush_r+0x1a>
 8007ed2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ed6:	4299      	cmp	r1, r3
 8007ed8:	d002      	beq.n	8007ee0 <__sflush_r+0x94>
 8007eda:	4628      	mov	r0, r5
 8007edc:	f7ff febe 	bl	8007c5c <_free_r>
 8007ee0:	2000      	movs	r0, #0
 8007ee2:	6360      	str	r0, [r4, #52]	; 0x34
 8007ee4:	e7c0      	b.n	8007e68 <__sflush_r+0x1c>
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	4628      	mov	r0, r5
 8007eea:	47b0      	blx	r6
 8007eec:	1c41      	adds	r1, r0, #1
 8007eee:	d1c8      	bne.n	8007e82 <__sflush_r+0x36>
 8007ef0:	682b      	ldr	r3, [r5, #0]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d0c5      	beq.n	8007e82 <__sflush_r+0x36>
 8007ef6:	2b1d      	cmp	r3, #29
 8007ef8:	d001      	beq.n	8007efe <__sflush_r+0xb2>
 8007efa:	2b16      	cmp	r3, #22
 8007efc:	d101      	bne.n	8007f02 <__sflush_r+0xb6>
 8007efe:	602f      	str	r7, [r5, #0]
 8007f00:	e7b1      	b.n	8007e66 <__sflush_r+0x1a>
 8007f02:	89a3      	ldrh	r3, [r4, #12]
 8007f04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f08:	81a3      	strh	r3, [r4, #12]
 8007f0a:	e7ad      	b.n	8007e68 <__sflush_r+0x1c>
 8007f0c:	690f      	ldr	r7, [r1, #16]
 8007f0e:	2f00      	cmp	r7, #0
 8007f10:	d0a9      	beq.n	8007e66 <__sflush_r+0x1a>
 8007f12:	0793      	lsls	r3, r2, #30
 8007f14:	680e      	ldr	r6, [r1, #0]
 8007f16:	bf08      	it	eq
 8007f18:	694b      	ldreq	r3, [r1, #20]
 8007f1a:	600f      	str	r7, [r1, #0]
 8007f1c:	bf18      	it	ne
 8007f1e:	2300      	movne	r3, #0
 8007f20:	eba6 0807 	sub.w	r8, r6, r7
 8007f24:	608b      	str	r3, [r1, #8]
 8007f26:	f1b8 0f00 	cmp.w	r8, #0
 8007f2a:	dd9c      	ble.n	8007e66 <__sflush_r+0x1a>
 8007f2c:	6a21      	ldr	r1, [r4, #32]
 8007f2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007f30:	4643      	mov	r3, r8
 8007f32:	463a      	mov	r2, r7
 8007f34:	4628      	mov	r0, r5
 8007f36:	47b0      	blx	r6
 8007f38:	2800      	cmp	r0, #0
 8007f3a:	dc06      	bgt.n	8007f4a <__sflush_r+0xfe>
 8007f3c:	89a3      	ldrh	r3, [r4, #12]
 8007f3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f42:	81a3      	strh	r3, [r4, #12]
 8007f44:	f04f 30ff 	mov.w	r0, #4294967295
 8007f48:	e78e      	b.n	8007e68 <__sflush_r+0x1c>
 8007f4a:	4407      	add	r7, r0
 8007f4c:	eba8 0800 	sub.w	r8, r8, r0
 8007f50:	e7e9      	b.n	8007f26 <__sflush_r+0xda>
 8007f52:	bf00      	nop
 8007f54:	dfbffffe 	.word	0xdfbffffe

08007f58 <_fflush_r>:
 8007f58:	b538      	push	{r3, r4, r5, lr}
 8007f5a:	690b      	ldr	r3, [r1, #16]
 8007f5c:	4605      	mov	r5, r0
 8007f5e:	460c      	mov	r4, r1
 8007f60:	b913      	cbnz	r3, 8007f68 <_fflush_r+0x10>
 8007f62:	2500      	movs	r5, #0
 8007f64:	4628      	mov	r0, r5
 8007f66:	bd38      	pop	{r3, r4, r5, pc}
 8007f68:	b118      	cbz	r0, 8007f72 <_fflush_r+0x1a>
 8007f6a:	6a03      	ldr	r3, [r0, #32]
 8007f6c:	b90b      	cbnz	r3, 8007f72 <_fflush_r+0x1a>
 8007f6e:	f7ff fc39 	bl	80077e4 <__sinit>
 8007f72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d0f3      	beq.n	8007f62 <_fflush_r+0xa>
 8007f7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007f7c:	07d0      	lsls	r0, r2, #31
 8007f7e:	d404      	bmi.n	8007f8a <_fflush_r+0x32>
 8007f80:	0599      	lsls	r1, r3, #22
 8007f82:	d402      	bmi.n	8007f8a <_fflush_r+0x32>
 8007f84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f86:	f7ff fe66 	bl	8007c56 <__retarget_lock_acquire_recursive>
 8007f8a:	4628      	mov	r0, r5
 8007f8c:	4621      	mov	r1, r4
 8007f8e:	f7ff ff5d 	bl	8007e4c <__sflush_r>
 8007f92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f94:	07da      	lsls	r2, r3, #31
 8007f96:	4605      	mov	r5, r0
 8007f98:	d4e4      	bmi.n	8007f64 <_fflush_r+0xc>
 8007f9a:	89a3      	ldrh	r3, [r4, #12]
 8007f9c:	059b      	lsls	r3, r3, #22
 8007f9e:	d4e1      	bmi.n	8007f64 <_fflush_r+0xc>
 8007fa0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007fa2:	f7ff fe59 	bl	8007c58 <__retarget_lock_release_recursive>
 8007fa6:	e7dd      	b.n	8007f64 <_fflush_r+0xc>

08007fa8 <__swhatbuf_r>:
 8007fa8:	b570      	push	{r4, r5, r6, lr}
 8007faa:	460c      	mov	r4, r1
 8007fac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fb0:	2900      	cmp	r1, #0
 8007fb2:	b096      	sub	sp, #88	; 0x58
 8007fb4:	4615      	mov	r5, r2
 8007fb6:	461e      	mov	r6, r3
 8007fb8:	da0d      	bge.n	8007fd6 <__swhatbuf_r+0x2e>
 8007fba:	89a3      	ldrh	r3, [r4, #12]
 8007fbc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007fc0:	f04f 0100 	mov.w	r1, #0
 8007fc4:	bf0c      	ite	eq
 8007fc6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007fca:	2340      	movne	r3, #64	; 0x40
 8007fcc:	2000      	movs	r0, #0
 8007fce:	6031      	str	r1, [r6, #0]
 8007fd0:	602b      	str	r3, [r5, #0]
 8007fd2:	b016      	add	sp, #88	; 0x58
 8007fd4:	bd70      	pop	{r4, r5, r6, pc}
 8007fd6:	466a      	mov	r2, sp
 8007fd8:	f000 f848 	bl	800806c <_fstat_r>
 8007fdc:	2800      	cmp	r0, #0
 8007fde:	dbec      	blt.n	8007fba <__swhatbuf_r+0x12>
 8007fe0:	9901      	ldr	r1, [sp, #4]
 8007fe2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007fe6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007fea:	4259      	negs	r1, r3
 8007fec:	4159      	adcs	r1, r3
 8007fee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ff2:	e7eb      	b.n	8007fcc <__swhatbuf_r+0x24>

08007ff4 <__smakebuf_r>:
 8007ff4:	898b      	ldrh	r3, [r1, #12]
 8007ff6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007ff8:	079d      	lsls	r5, r3, #30
 8007ffa:	4606      	mov	r6, r0
 8007ffc:	460c      	mov	r4, r1
 8007ffe:	d507      	bpl.n	8008010 <__smakebuf_r+0x1c>
 8008000:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008004:	6023      	str	r3, [r4, #0]
 8008006:	6123      	str	r3, [r4, #16]
 8008008:	2301      	movs	r3, #1
 800800a:	6163      	str	r3, [r4, #20]
 800800c:	b002      	add	sp, #8
 800800e:	bd70      	pop	{r4, r5, r6, pc}
 8008010:	ab01      	add	r3, sp, #4
 8008012:	466a      	mov	r2, sp
 8008014:	f7ff ffc8 	bl	8007fa8 <__swhatbuf_r>
 8008018:	9900      	ldr	r1, [sp, #0]
 800801a:	4605      	mov	r5, r0
 800801c:	4630      	mov	r0, r6
 800801e:	f7ff fe89 	bl	8007d34 <_malloc_r>
 8008022:	b948      	cbnz	r0, 8008038 <__smakebuf_r+0x44>
 8008024:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008028:	059a      	lsls	r2, r3, #22
 800802a:	d4ef      	bmi.n	800800c <__smakebuf_r+0x18>
 800802c:	f023 0303 	bic.w	r3, r3, #3
 8008030:	f043 0302 	orr.w	r3, r3, #2
 8008034:	81a3      	strh	r3, [r4, #12]
 8008036:	e7e3      	b.n	8008000 <__smakebuf_r+0xc>
 8008038:	89a3      	ldrh	r3, [r4, #12]
 800803a:	6020      	str	r0, [r4, #0]
 800803c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008040:	81a3      	strh	r3, [r4, #12]
 8008042:	9b00      	ldr	r3, [sp, #0]
 8008044:	6163      	str	r3, [r4, #20]
 8008046:	9b01      	ldr	r3, [sp, #4]
 8008048:	6120      	str	r0, [r4, #16]
 800804a:	b15b      	cbz	r3, 8008064 <__smakebuf_r+0x70>
 800804c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008050:	4630      	mov	r0, r6
 8008052:	f000 f81d 	bl	8008090 <_isatty_r>
 8008056:	b128      	cbz	r0, 8008064 <__smakebuf_r+0x70>
 8008058:	89a3      	ldrh	r3, [r4, #12]
 800805a:	f023 0303 	bic.w	r3, r3, #3
 800805e:	f043 0301 	orr.w	r3, r3, #1
 8008062:	81a3      	strh	r3, [r4, #12]
 8008064:	89a3      	ldrh	r3, [r4, #12]
 8008066:	431d      	orrs	r5, r3
 8008068:	81a5      	strh	r5, [r4, #12]
 800806a:	e7cf      	b.n	800800c <__smakebuf_r+0x18>

0800806c <_fstat_r>:
 800806c:	b538      	push	{r3, r4, r5, lr}
 800806e:	4d07      	ldr	r5, [pc, #28]	; (800808c <_fstat_r+0x20>)
 8008070:	2300      	movs	r3, #0
 8008072:	4604      	mov	r4, r0
 8008074:	4608      	mov	r0, r1
 8008076:	4611      	mov	r1, r2
 8008078:	602b      	str	r3, [r5, #0]
 800807a:	f7f9 f93e 	bl	80012fa <_fstat>
 800807e:	1c43      	adds	r3, r0, #1
 8008080:	d102      	bne.n	8008088 <_fstat_r+0x1c>
 8008082:	682b      	ldr	r3, [r5, #0]
 8008084:	b103      	cbz	r3, 8008088 <_fstat_r+0x1c>
 8008086:	6023      	str	r3, [r4, #0]
 8008088:	bd38      	pop	{r3, r4, r5, pc}
 800808a:	bf00      	nop
 800808c:	200044c0 	.word	0x200044c0

08008090 <_isatty_r>:
 8008090:	b538      	push	{r3, r4, r5, lr}
 8008092:	4d06      	ldr	r5, [pc, #24]	; (80080ac <_isatty_r+0x1c>)
 8008094:	2300      	movs	r3, #0
 8008096:	4604      	mov	r4, r0
 8008098:	4608      	mov	r0, r1
 800809a:	602b      	str	r3, [r5, #0]
 800809c:	f7f9 f93d 	bl	800131a <_isatty>
 80080a0:	1c43      	adds	r3, r0, #1
 80080a2:	d102      	bne.n	80080aa <_isatty_r+0x1a>
 80080a4:	682b      	ldr	r3, [r5, #0]
 80080a6:	b103      	cbz	r3, 80080aa <_isatty_r+0x1a>
 80080a8:	6023      	str	r3, [r4, #0]
 80080aa:	bd38      	pop	{r3, r4, r5, pc}
 80080ac:	200044c0 	.word	0x200044c0

080080b0 <_sbrk_r>:
 80080b0:	b538      	push	{r3, r4, r5, lr}
 80080b2:	4d06      	ldr	r5, [pc, #24]	; (80080cc <_sbrk_r+0x1c>)
 80080b4:	2300      	movs	r3, #0
 80080b6:	4604      	mov	r4, r0
 80080b8:	4608      	mov	r0, r1
 80080ba:	602b      	str	r3, [r5, #0]
 80080bc:	f7f9 f946 	bl	800134c <_sbrk>
 80080c0:	1c43      	adds	r3, r0, #1
 80080c2:	d102      	bne.n	80080ca <_sbrk_r+0x1a>
 80080c4:	682b      	ldr	r3, [r5, #0]
 80080c6:	b103      	cbz	r3, 80080ca <_sbrk_r+0x1a>
 80080c8:	6023      	str	r3, [r4, #0]
 80080ca:	bd38      	pop	{r3, r4, r5, pc}
 80080cc:	200044c0 	.word	0x200044c0

080080d0 <_init>:
 80080d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080d2:	bf00      	nop
 80080d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080d6:	bc08      	pop	{r3}
 80080d8:	469e      	mov	lr, r3
 80080da:	4770      	bx	lr

080080dc <_fini>:
 80080dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080de:	bf00      	nop
 80080e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080e2:	bc08      	pop	{r3}
 80080e4:	469e      	mov	lr, r3
 80080e6:	4770      	bx	lr
