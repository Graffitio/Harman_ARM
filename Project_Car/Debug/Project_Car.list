
Project_Car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092f8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  08009498  08009498  00019498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009624  08009624  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08009624  08009624  00019624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800962c  0800962c  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800962c  0800962c  0001962c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009630  08009630  00019630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08009634  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004530  2000006c  080096a0  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000459c  080096a0  0002459c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001cbc3  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000049a8  00000000  00000000  0003cca2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017a8  00000000  00000000  00041650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001252  00000000  00000000  00042df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001cb3d  00000000  00000000  0004404a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020245  00000000  00000000  00060b87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a72a9  00000000  00000000  00080dcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006808  00000000  00000000  00128078  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  0012e880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009480 	.word	0x08009480

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08009480 	.word	0x08009480

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <Auto_Drive_01>:

uint8_t dist_buff[30];
extern char buf[1];

void Auto_Drive_01()
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af02      	add	r7, sp, #8
	  extern uint8_t distance_L;
	  extern uint8_t distance_M;
	  extern uint8_t distance_R;
	  extern uint8_t mode_cnt;
	  extern uint8_t mode;
	  uint8_t mode_cnt_lcd = HAL_GPIO_ReadPin(Blue_button_GPIO_Port, Blue_button_Pin);
 8000582:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000586:	485f      	ldr	r0, [pc, #380]	; (8000704 <Auto_Drive_01+0x188>)
 8000588:	f003 f946 	bl	8003818 <HAL_GPIO_ReadPin>
 800058c:	4603      	mov	r3, r0
 800058e:	71fb      	strb	r3, [r7, #7]
	  sprintf(dist_buff, "L%-3d M%-3d R%-3d", distance_L, distance_M, distance_R);
 8000590:	4b5d      	ldr	r3, [pc, #372]	; (8000708 <Auto_Drive_01+0x18c>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	461a      	mov	r2, r3
 8000596:	4b5d      	ldr	r3, [pc, #372]	; (800070c <Auto_Drive_01+0x190>)
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	4619      	mov	r1, r3
 800059c:	4b5c      	ldr	r3, [pc, #368]	; (8000710 <Auto_Drive_01+0x194>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	9300      	str	r3, [sp, #0]
 80005a2:	460b      	mov	r3, r1
 80005a4:	495b      	ldr	r1, [pc, #364]	; (8000714 <Auto_Drive_01+0x198>)
 80005a6:	485c      	ldr	r0, [pc, #368]	; (8000718 <Auto_Drive_01+0x19c>)
 80005a8:	f008 f81e 	bl	80085e8 <siprintf>
	  lcd_put_cur(1, 0);
 80005ac:	2100      	movs	r1, #0
 80005ae:	2001      	movs	r0, #1
 80005b0:	f000 f96d 	bl	800088e <lcd_put_cur>
	  lcd_send_string(dist_buff);
 80005b4:	4858      	ldr	r0, [pc, #352]	; (8000718 <Auto_Drive_01+0x19c>)
 80005b6:	f000 f955 	bl	8000864 <lcd_send_string>
	  motor_control(&buf);
 80005ba:	4858      	ldr	r0, [pc, #352]	; (800071c <Auto_Drive_01+0x1a0>)
 80005bc:	f000 fe5c 	bl	8001278 <motor_control>
	  if(mode == 0)
 80005c0:	4b57      	ldr	r3, [pc, #348]	; (8000720 <Auto_Drive_01+0x1a4>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d103      	bne.n	80005d0 <Auto_Drive_01+0x54>
	  {
//		  if(mode_cnt_lcd == 0) Stop();
//		  lcd_put_cur(1, 0);
//		  lcd_send_string("  Manual Drive  ");
		  motor_control(&buf);
 80005c8:	4854      	ldr	r0, [pc, #336]	; (800071c <Auto_Drive_01+0x1a0>)
 80005ca:	f000 fe55 	bl	8001278 <motor_control>
				  htim10.Instance->CCR1 = LIMIT_SPEED_T; // Left
				  htim11.Instance->CCR1 = LIMIT_SPEED_T; // Right
			  }
		  }
	  }
}
 80005ce:	e095      	b.n	80006fc <Auto_Drive_01+0x180>
		  if(mode_cnt_lcd == 0) Stop();
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d101      	bne.n	80005da <Auto_Drive_01+0x5e>
 80005d6:	f000 ff99 	bl	800150c <Stop>
		  if(distance_M >= LIMIT_F)
 80005da:	4b4c      	ldr	r3, [pc, #304]	; (800070c <Auto_Drive_01+0x190>)
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	2b1c      	cmp	r3, #28
 80005e0:	d959      	bls.n	8000696 <Auto_Drive_01+0x11a>
			  if((distance_L > LIMIT_D) && (distance_R > LIMIT_D))
 80005e2:	4b49      	ldr	r3, [pc, #292]	; (8000708 <Auto_Drive_01+0x18c>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b0e      	cmp	r3, #14
 80005e8:	d90f      	bls.n	800060a <Auto_Drive_01+0x8e>
 80005ea:	4b49      	ldr	r3, [pc, #292]	; (8000710 <Auto_Drive_01+0x194>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	2b0e      	cmp	r3, #14
 80005f0:	d90b      	bls.n	800060a <Auto_Drive_01+0x8e>
				  Forward();
 80005f2:	f000 fed1 	bl	8001398 <Forward>
				  htim10.Instance->CCR1 = LIMIT_SPEED_R; // Left
 80005f6:	4b4b      	ldr	r3, [pc, #300]	; (8000724 <Auto_Drive_01+0x1a8>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	2262      	movs	r2, #98	; 0x62
 80005fc:	635a      	str	r2, [r3, #52]	; 0x34
				  htim11.Instance->CCR1 = LIMIT_SPEED_R; // Right
 80005fe:	4b4a      	ldr	r3, [pc, #296]	; (8000728 <Auto_Drive_01+0x1ac>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	2262      	movs	r2, #98	; 0x62
 8000604:	635a      	str	r2, [r3, #52]	; 0x34
			  {
 8000606:	bf00      	nop
}
 8000608:	e078      	b.n	80006fc <Auto_Drive_01+0x180>
			  else if(distance_L < LIMIT_D)
 800060a:	4b3f      	ldr	r3, [pc, #252]	; (8000708 <Auto_Drive_01+0x18c>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	2b0d      	cmp	r3, #13
 8000610:	d81e      	bhi.n	8000650 <Auto_Drive_01+0xd4>
				  Stop();
 8000612:	f000 ff7b 	bl	800150c <Stop>
				  Forward();
 8000616:	f000 febf 	bl	8001398 <Forward>
				  htim10.Instance->CCR1 = 98; // Left
 800061a:	4b42      	ldr	r3, [pc, #264]	; (8000724 <Auto_Drive_01+0x1a8>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	2262      	movs	r2, #98	; 0x62
 8000620:	635a      	str	r2, [r3, #52]	; 0x34
				  htim11.Instance->CCR1 = 63; // Right
 8000622:	4b41      	ldr	r3, [pc, #260]	; (8000728 <Auto_Drive_01+0x1ac>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	223f      	movs	r2, #63	; 0x3f
 8000628:	635a      	str	r2, [r3, #52]	; 0x34
				  HAL_GPIO_WritePin(Back_Red_Lamp_GPIO_Port, Back_Red_Lamp_Pin, 0);
 800062a:	2200      	movs	r2, #0
 800062c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000630:	483e      	ldr	r0, [pc, #248]	; (800072c <Auto_Drive_01+0x1b0>)
 8000632:	f003 f909 	bl	8003848 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(Back_Blue_Right_Lamp_GPIO_Port, Back_Blue_Right_Lamp_Pin, 0);
 8000636:	2200      	movs	r2, #0
 8000638:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800063c:	483b      	ldr	r0, [pc, #236]	; (800072c <Auto_Drive_01+0x1b0>)
 800063e:	f003 f903 	bl	8003848 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(Back_Blue_Left_Lamp_GPIO_Port, Back_Blue_Left_Lamp_Pin, 1);
 8000642:	2201      	movs	r2, #1
 8000644:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000648:	4838      	ldr	r0, [pc, #224]	; (800072c <Auto_Drive_01+0x1b0>)
 800064a:	f003 f8fd 	bl	8003848 <HAL_GPIO_WritePin>
}
 800064e:	e055      	b.n	80006fc <Auto_Drive_01+0x180>
			  else if(distance_R < LIMIT_D)
 8000650:	4b2f      	ldr	r3, [pc, #188]	; (8000710 <Auto_Drive_01+0x194>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	2b0d      	cmp	r3, #13
 8000656:	d851      	bhi.n	80006fc <Auto_Drive_01+0x180>
				  Stop();
 8000658:	f000 ff58 	bl	800150c <Stop>
				  Forward();
 800065c:	f000 fe9c 	bl	8001398 <Forward>
				  htim10.Instance->CCR1 = 63; // Left
 8000660:	4b30      	ldr	r3, [pc, #192]	; (8000724 <Auto_Drive_01+0x1a8>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	223f      	movs	r2, #63	; 0x3f
 8000666:	635a      	str	r2, [r3, #52]	; 0x34
				  htim11.Instance->CCR1 = 98; // Right
 8000668:	4b2f      	ldr	r3, [pc, #188]	; (8000728 <Auto_Drive_01+0x1ac>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	2262      	movs	r2, #98	; 0x62
 800066e:	635a      	str	r2, [r3, #52]	; 0x34
				  HAL_GPIO_WritePin(Back_Red_Lamp_GPIO_Port, Back_Red_Lamp_Pin, 0);
 8000670:	2200      	movs	r2, #0
 8000672:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000676:	482d      	ldr	r0, [pc, #180]	; (800072c <Auto_Drive_01+0x1b0>)
 8000678:	f003 f8e6 	bl	8003848 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(Back_Blue_Right_Lamp_GPIO_Port, Back_Blue_Right_Lamp_Pin, 1);
 800067c:	2201      	movs	r2, #1
 800067e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000682:	482a      	ldr	r0, [pc, #168]	; (800072c <Auto_Drive_01+0x1b0>)
 8000684:	f003 f8e0 	bl	8003848 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(Back_Blue_Left_Lamp_GPIO_Port, Back_Blue_Left_Lamp_Pin, 0);
 8000688:	2200      	movs	r2, #0
 800068a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800068e:	4827      	ldr	r0, [pc, #156]	; (800072c <Auto_Drive_01+0x1b0>)
 8000690:	f003 f8da 	bl	8003848 <HAL_GPIO_WritePin>
}
 8000694:	e032      	b.n	80006fc <Auto_Drive_01+0x180>
		  else if(distance_M < LIMIT_F)
 8000696:	4b1d      	ldr	r3, [pc, #116]	; (800070c <Auto_Drive_01+0x190>)
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	2b1c      	cmp	r3, #28
 800069c:	d82e      	bhi.n	80006fc <Auto_Drive_01+0x180>
			  Stop();
 800069e:	f000 ff35 	bl	800150c <Stop>
			  htim10.Instance->CCR1 = LIMIT_SPEED_R; // Left
 80006a2:	4b20      	ldr	r3, [pc, #128]	; (8000724 <Auto_Drive_01+0x1a8>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	2262      	movs	r2, #98	; 0x62
 80006a8:	635a      	str	r2, [r3, #52]	; 0x34
			  htim11.Instance->CCR1 = LIMIT_SPEED_R; // Right
 80006aa:	4b1f      	ldr	r3, [pc, #124]	; (8000728 <Auto_Drive_01+0x1ac>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	2262      	movs	r2, #98	; 0x62
 80006b0:	635a      	str	r2, [r3, #52]	; 0x34
			  if((distance_L - distance_R) <= 0)
 80006b2:	4b15      	ldr	r3, [pc, #84]	; (8000708 <Auto_Drive_01+0x18c>)
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	461a      	mov	r2, r3
 80006b8:	4b15      	ldr	r3, [pc, #84]	; (8000710 <Auto_Drive_01+0x194>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	1ad3      	subs	r3, r2, r3
 80006be:	2b00      	cmp	r3, #0
 80006c0:	dc0a      	bgt.n	80006d8 <Auto_Drive_01+0x15c>
				  Right();
 80006c2:	f000 fec9 	bl	8001458 <Right>
				  htim10.Instance->CCR1 = LIMIT_SPEED_T; // Left
 80006c6:	4b17      	ldr	r3, [pc, #92]	; (8000724 <Auto_Drive_01+0x1a8>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	225f      	movs	r2, #95	; 0x5f
 80006cc:	635a      	str	r2, [r3, #52]	; 0x34
				  htim11.Instance->CCR1 = LIMIT_SPEED_T; // Right
 80006ce:	4b16      	ldr	r3, [pc, #88]	; (8000728 <Auto_Drive_01+0x1ac>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	225f      	movs	r2, #95	; 0x5f
 80006d4:	635a      	str	r2, [r3, #52]	; 0x34
}
 80006d6:	e011      	b.n	80006fc <Auto_Drive_01+0x180>
			  else if((distance_L - distance_R) > 0)
 80006d8:	4b0b      	ldr	r3, [pc, #44]	; (8000708 <Auto_Drive_01+0x18c>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	461a      	mov	r2, r3
 80006de:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <Auto_Drive_01+0x194>)
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	1ad3      	subs	r3, r2, r3
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	dd09      	ble.n	80006fc <Auto_Drive_01+0x180>
				  Left();
 80006e8:	f000 fe86 	bl	80013f8 <Left>
				  htim10.Instance->CCR1 = LIMIT_SPEED_T; // Left
 80006ec:	4b0d      	ldr	r3, [pc, #52]	; (8000724 <Auto_Drive_01+0x1a8>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	225f      	movs	r2, #95	; 0x5f
 80006f2:	635a      	str	r2, [r3, #52]	; 0x34
				  htim11.Instance->CCR1 = LIMIT_SPEED_T; // Right
 80006f4:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <Auto_Drive_01+0x1ac>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	225f      	movs	r2, #95	; 0x5f
 80006fa:	635a      	str	r2, [r3, #52]	; 0x34
}
 80006fc:	bf00      	nop
 80006fe:	3708      	adds	r7, #8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	40020800 	.word	0x40020800
 8000708:	2000058d 	.word	0x2000058d
 800070c:	2000059d 	.word	0x2000059d
 8000710:	200005ad 	.word	0x200005ad
 8000714:	08009498 	.word	0x08009498
 8000718:	20000088 	.word	0x20000088
 800071c:	20000150 	.word	0x20000150
 8000720:	20000151 	.word	0x20000151
 8000724:	200004f0 	.word	0x200004f0
 8000728:	20000538 	.word	0x20000538
 800072c:	40020400 	.word	0x40020400

08000730 <lcd_init>:
extern I2C_HandleTypeDef hi2c1; // hi2c1이 외부에 선언되었다는 뜻

#define SLAVE_ADDRES_LCD	0x27<<1

void lcd_init()
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
	// cmd init
	HAL_Delay(50);
 8000734:	2032      	movs	r0, #50	; 0x32
 8000736:	f001 fe83 	bl	8002440 <HAL_Delay>
	lcd_send_cmd(0x30);
 800073a:	2030      	movs	r0, #48	; 0x30
 800073c:	f000 f832 	bl	80007a4 <lcd_send_cmd>
	HAL_Delay(5);
 8000740:	2005      	movs	r0, #5
 8000742:	f001 fe7d 	bl	8002440 <HAL_Delay>
	lcd_send_cmd(0x30);
 8000746:	2030      	movs	r0, #48	; 0x30
 8000748:	f000 f82c 	bl	80007a4 <lcd_send_cmd>
	HAL_Delay(1);
 800074c:	2001      	movs	r0, #1
 800074e:	f001 fe77 	bl	8002440 <HAL_Delay>
	lcd_send_cmd(0x30);
 8000752:	2030      	movs	r0, #48	; 0x30
 8000754:	f000 f826 	bl	80007a4 <lcd_send_cmd>
	HAL_Delay(10);
 8000758:	200a      	movs	r0, #10
 800075a:	f001 fe71 	bl	8002440 <HAL_Delay>
	lcd_send_cmd(0x20); // 4bit mode
 800075e:	2020      	movs	r0, #32
 8000760:	f000 f820 	bl	80007a4 <lcd_send_cmd>
	HAL_Delay(10);
 8000764:	200a      	movs	r0, #10
 8000766:	f001 fe6b 	bl	8002440 <HAL_Delay>

	// display init
	lcd_send_cmd(0x28); // function set
 800076a:	2028      	movs	r0, #40	; 0x28
 800076c:	f000 f81a 	bl	80007a4 <lcd_send_cmd>
	HAL_Delay(1);
 8000770:	2001      	movs	r0, #1
 8000772:	f001 fe65 	bl	8002440 <HAL_Delay>
	lcd_send_cmd(0x08); // display off
 8000776:	2008      	movs	r0, #8
 8000778:	f000 f814 	bl	80007a4 <lcd_send_cmd>
	HAL_Delay(1);
 800077c:	2001      	movs	r0, #1
 800077e:	f001 fe5f 	bl	8002440 <HAL_Delay>
	lcd_send_cmd(0x01); // clear display
 8000782:	2001      	movs	r0, #1
 8000784:	f000 f80e 	bl	80007a4 <lcd_send_cmd>
	HAL_Delay(1);
 8000788:	2001      	movs	r0, #1
 800078a:	f001 fe59 	bl	8002440 <HAL_Delay>
	lcd_send_cmd(0x06); // entry mode
 800078e:	2006      	movs	r0, #6
 8000790:	f000 f808 	bl	80007a4 <lcd_send_cmd>
	HAL_Delay(1);
 8000794:	2001      	movs	r0, #1
 8000796:	f001 fe53 	bl	8002440 <HAL_Delay>
	lcd_send_cmd(0x0C); // display on
 800079a:	200c      	movs	r0, #12
 800079c:	f000 f802 	bl	80007a4 <lcd_send_cmd>
}
 80007a0:	bf00      	nop
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <lcd_send_cmd>:

void lcd_send_cmd(char cmd)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b086      	sub	sp, #24
 80007a8:	af02      	add	r7, sp, #8
 80007aa:	4603      	mov	r3, r0
 80007ac:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd & 0xf0); // msb쪽 4bit만 남기고 나머지 다 버림.
 80007ae:	79fb      	ldrb	r3, [r7, #7]
 80007b0:	f023 030f 	bic.w	r3, r3, #15
 80007b4:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd << 4) & 0xf0); // lsb쪽 4bit만 님기고 나머지 다 버림.
 80007b6:	79fb      	ldrb	r3, [r7, #7]
 80007b8:	011b      	lsls	r3, r3, #4
 80007ba:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0C;	// en = 1, rs = 0
 80007bc:	7bfb      	ldrb	r3, [r7, #15]
 80007be:	f043 030c 	orr.w	r3, r3, #12
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x08;	// en = 0, rs = 0
 80007c6:	7bfb      	ldrb	r3, [r7, #15]
 80007c8:	f043 0308 	orr.w	r3, r3, #8
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0C;	// en = 1, rs = 0
 80007d0:	7bbb      	ldrb	r3, [r7, #14]
 80007d2:	f043 030c 	orr.w	r3, r3, #12
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x08;	// en = 0, rs = 0
 80007da:	7bbb      	ldrb	r3, [r7, #14]
 80007dc:	f043 0308 	orr.w	r3, r3, #8
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRES_LCD, (uint8_t *)data_t, 4, 100);
 80007e4:	f107 0208 	add.w	r2, r7, #8
 80007e8:	2364      	movs	r3, #100	; 0x64
 80007ea:	9300      	str	r3, [sp, #0]
 80007ec:	2304      	movs	r3, #4
 80007ee:	214e      	movs	r1, #78	; 0x4e
 80007f0:	4803      	ldr	r0, [pc, #12]	; (8000800 <lcd_send_cmd+0x5c>)
 80007f2:	f003 f987 	bl	8003b04 <HAL_I2C_Master_Transmit>
}
 80007f6:	bf00      	nop
 80007f8:	3710      	adds	r7, #16
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	20000408 	.word	0x20000408

08000804 <lcd_send_data>:

void lcd_send_data(char data)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b086      	sub	sp, #24
 8000808:	af02      	add	r7, sp, #8
 800080a:	4603      	mov	r3, r0
 800080c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data & 0xf0); // msb쪽 4bit만 남기고 나머지 다 버림.
 800080e:	79fb      	ldrb	r3, [r7, #7]
 8000810:	f023 030f 	bic.w	r3, r3, #15
 8000814:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xf0); // lsb쪽 4bit만 님기고 나머지 다 버림.
 8000816:	79fb      	ldrb	r3, [r7, #7]
 8000818:	011b      	lsls	r3, r3, #4
 800081a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0D;	// en = 1, rs = 0
 800081c:	7bfb      	ldrb	r3, [r7, #15]
 800081e:	f043 030d 	orr.w	r3, r3, #13
 8000822:	b2db      	uxtb	r3, r3
 8000824:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x09;	// en = 0, rs = 0
 8000826:	7bfb      	ldrb	r3, [r7, #15]
 8000828:	f043 0309 	orr.w	r3, r3, #9
 800082c:	b2db      	uxtb	r3, r3
 800082e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0D;	// en = 1, rs = 0
 8000830:	7bbb      	ldrb	r3, [r7, #14]
 8000832:	f043 030d 	orr.w	r3, r3, #13
 8000836:	b2db      	uxtb	r3, r3
 8000838:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x09;	// en = 0, rs = 0
 800083a:	7bbb      	ldrb	r3, [r7, #14]
 800083c:	f043 0309 	orr.w	r3, r3, #9
 8000840:	b2db      	uxtb	r3, r3
 8000842:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRES_LCD, (uint8_t *)data_t, 4, 100);
 8000844:	f107 0208 	add.w	r2, r7, #8
 8000848:	2364      	movs	r3, #100	; 0x64
 800084a:	9300      	str	r3, [sp, #0]
 800084c:	2304      	movs	r3, #4
 800084e:	214e      	movs	r1, #78	; 0x4e
 8000850:	4803      	ldr	r0, [pc, #12]	; (8000860 <lcd_send_data+0x5c>)
 8000852:	f003 f957 	bl	8003b04 <HAL_I2C_Master_Transmit>
}
 8000856:	bf00      	nop
 8000858:	3710      	adds	r7, #16
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20000408 	.word	0x20000408

08000864 <lcd_send_string>:

void lcd_send_string(char *str)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
	while(*str) lcd_send_data(*str++); // *str이 참이면, lcd_send_data(*str++) 실행
 800086c:	e006      	b.n	800087c <lcd_send_string+0x18>
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	1c5a      	adds	r2, r3, #1
 8000872:	607a      	str	r2, [r7, #4]
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff ffc4 	bl	8000804 <lcd_send_data>
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d1f4      	bne.n	800086e <lcd_send_string+0xa>
}
 8000884:	bf00      	nop
 8000886:	bf00      	nop
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}

0800088e <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 800088e:	b580      	push	{r7, lr}
 8000890:	b082      	sub	sp, #8
 8000892:	af00      	add	r7, sp, #0
 8000894:	6078      	str	r0, [r7, #4]
 8000896:	6039      	str	r1, [r7, #0]
    switch (row)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d003      	beq.n	80008a6 <lcd_put_cur+0x18>
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	2b01      	cmp	r3, #1
 80008a2:	d005      	beq.n	80008b0 <lcd_put_cur+0x22>
 80008a4:	e009      	b.n	80008ba <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008ac:	603b      	str	r3, [r7, #0]
            break;
 80008ae:	e004      	b.n	80008ba <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80008b6:	603b      	str	r3, [r7, #0]
            break;
 80008b8:	bf00      	nop
    }

    lcd_send_cmd(col);
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	4618      	mov	r0, r3
 80008c0:	f7ff ff70 	bl	80007a4 <lcd_send_cmd>
}
 80008c4:	bf00      	nop
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}

080008cc <lcd_clear>:

void lcd_clear()
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 80008d2:	2080      	movs	r0, #128	; 0x80
 80008d4:	f7ff ff66 	bl	80007a4 <lcd_send_cmd>
	for (int i=0 ; i<70 ; i++)
 80008d8:	2300      	movs	r3, #0
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	e005      	b.n	80008ea <lcd_clear+0x1e>
	{
		lcd_send_data(' ');
 80008de:	2020      	movs	r0, #32
 80008e0:	f7ff ff90 	bl	8000804 <lcd_send_data>
	for (int i=0 ; i<70 ; i++)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	3301      	adds	r3, #1
 80008e8:	607b      	str	r3, [r7, #4]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	2b45      	cmp	r3, #69	; 0x45
 80008ee:	ddf6      	ble.n	80008de <lcd_clear+0x12>
	}
}
 80008f0:	bf00      	nop
 80008f2:	bf00      	nop
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
	...

080008fc <ADC_start>:
#include "Light_cntr.h"

uint16_t lum;

void ADC_start()
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8000900:	4809      	ldr	r0, [pc, #36]	; (8000928 <ADC_start+0x2c>)
 8000902:	f001 fe05 	bl	8002510 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 8000906:	2164      	movs	r1, #100	; 0x64
 8000908:	4807      	ldr	r0, [pc, #28]	; (8000928 <ADC_start+0x2c>)
 800090a:	f001 fee8 	bl	80026de <HAL_ADC_PollForConversion>
	lum = HAL_ADC_GetValue(&hadc1);
 800090e:	4806      	ldr	r0, [pc, #24]	; (8000928 <ADC_start+0x2c>)
 8000910:	f001 ff70 	bl	80027f4 <HAL_ADC_GetValue>
 8000914:	4603      	mov	r3, r0
 8000916:	b29a      	uxth	r2, r3
 8000918:	4b04      	ldr	r3, [pc, #16]	; (800092c <ADC_start+0x30>)
 800091a:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1);
 800091c:	4802      	ldr	r0, [pc, #8]	; (8000928 <ADC_start+0x2c>)
 800091e:	f001 feab 	bl	8002678 <HAL_ADC_Stop>
//	HAL_Delay(100);
}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	200000a8 	.word	0x200000a8
 800092c:	200000a6 	.word	0x200000a6

08000930 <Light>:

void Light()
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
	if((lum > 800) && (lum < 2500))
 8000934:	4b1e      	ldr	r3, [pc, #120]	; (80009b0 <Light+0x80>)
 8000936:	881b      	ldrh	r3, [r3, #0]
 8000938:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800093c:	d912      	bls.n	8000964 <Light+0x34>
 800093e:	4b1c      	ldr	r3, [pc, #112]	; (80009b0 <Light+0x80>)
 8000940:	881b      	ldrh	r3, [r3, #0]
 8000942:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000946:	4293      	cmp	r3, r2
 8000948:	d80c      	bhi.n	8000964 <Light+0x34>
	{
		HAL_GPIO_WritePin(Front_Low_Lamp_GPIO_Port, Front_Low_Lamp_Pin, 1);
 800094a:	2201      	movs	r2, #1
 800094c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000950:	4818      	ldr	r0, [pc, #96]	; (80009b4 <Light+0x84>)
 8000952:	f002 ff79 	bl	8003848 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Front_High_Lamp_GPIO_Port, Front_High_Lamp_Pin, 0);
 8000956:	2200      	movs	r2, #0
 8000958:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800095c:	4815      	ldr	r0, [pc, #84]	; (80009b4 <Light+0x84>)
 800095e:	f002 ff73 	bl	8003848 <HAL_GPIO_WritePin>
	{
		HAL_GPIO_WritePin(Front_Low_Lamp_GPIO_Port, Front_Low_Lamp_Pin, 0);
		HAL_GPIO_WritePin(Front_High_Lamp_GPIO_Port, Front_High_Lamp_Pin, 0);
	}

}
 8000962:	e023      	b.n	80009ac <Light+0x7c>
	else if(lum < 800)
 8000964:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <Light+0x80>)
 8000966:	881b      	ldrh	r3, [r3, #0]
 8000968:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800096c:	d20c      	bcs.n	8000988 <Light+0x58>
		HAL_GPIO_WritePin(Front_Low_Lamp_GPIO_Port, Front_Low_Lamp_Pin, 1);
 800096e:	2201      	movs	r2, #1
 8000970:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000974:	480f      	ldr	r0, [pc, #60]	; (80009b4 <Light+0x84>)
 8000976:	f002 ff67 	bl	8003848 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Front_High_Lamp_GPIO_Port, Front_High_Lamp_Pin, 1);
 800097a:	2201      	movs	r2, #1
 800097c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000980:	480c      	ldr	r0, [pc, #48]	; (80009b4 <Light+0x84>)
 8000982:	f002 ff61 	bl	8003848 <HAL_GPIO_WritePin>
}
 8000986:	e011      	b.n	80009ac <Light+0x7c>
	else if(lum > 2500)
 8000988:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <Light+0x80>)
 800098a:	881b      	ldrh	r3, [r3, #0]
 800098c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000990:	4293      	cmp	r3, r2
 8000992:	d90b      	bls.n	80009ac <Light+0x7c>
		HAL_GPIO_WritePin(Front_Low_Lamp_GPIO_Port, Front_Low_Lamp_Pin, 0);
 8000994:	2200      	movs	r2, #0
 8000996:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800099a:	4806      	ldr	r0, [pc, #24]	; (80009b4 <Light+0x84>)
 800099c:	f002 ff54 	bl	8003848 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Front_High_Lamp_GPIO_Port, Front_High_Lamp_Pin, 0);
 80009a0:	2200      	movs	r2, #0
 80009a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009a6:	4803      	ldr	r0, [pc, #12]	; (80009b4 <Light+0x84>)
 80009a8:	f002 ff4e 	bl	8003848 <HAL_GPIO_WritePin>
}
 80009ac:	bf00      	nop
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	200000a6 	.word	0x200000a6
 80009b4:	40020800 	.word	0x40020800

080009b8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009be:	463b      	mov	r3, r7
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	605a      	str	r2, [r3, #4]
 80009c6:	609a      	str	r2, [r3, #8]
 80009c8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80009ca:	4b21      	ldr	r3, [pc, #132]	; (8000a50 <MX_ADC1_Init+0x98>)
 80009cc:	4a21      	ldr	r2, [pc, #132]	; (8000a54 <MX_ADC1_Init+0x9c>)
 80009ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80009d0:	4b1f      	ldr	r3, [pc, #124]	; (8000a50 <MX_ADC1_Init+0x98>)
 80009d2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80009d6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009d8:	4b1d      	ldr	r3, [pc, #116]	; (8000a50 <MX_ADC1_Init+0x98>)
 80009da:	2200      	movs	r2, #0
 80009dc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80009de:	4b1c      	ldr	r3, [pc, #112]	; (8000a50 <MX_ADC1_Init+0x98>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009e4:	4b1a      	ldr	r3, [pc, #104]	; (8000a50 <MX_ADC1_Init+0x98>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009ea:	4b19      	ldr	r3, [pc, #100]	; (8000a50 <MX_ADC1_Init+0x98>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009f2:	4b17      	ldr	r3, [pc, #92]	; (8000a50 <MX_ADC1_Init+0x98>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009f8:	4b15      	ldr	r3, [pc, #84]	; (8000a50 <MX_ADC1_Init+0x98>)
 80009fa:	4a17      	ldr	r2, [pc, #92]	; (8000a58 <MX_ADC1_Init+0xa0>)
 80009fc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009fe:	4b14      	ldr	r3, [pc, #80]	; (8000a50 <MX_ADC1_Init+0x98>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000a04:	4b12      	ldr	r3, [pc, #72]	; (8000a50 <MX_ADC1_Init+0x98>)
 8000a06:	2201      	movs	r2, #1
 8000a08:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000a0a:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <MX_ADC1_Init+0x98>)
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a12:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <MX_ADC1_Init+0x98>)
 8000a14:	2201      	movs	r2, #1
 8000a16:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a18:	480d      	ldr	r0, [pc, #52]	; (8000a50 <MX_ADC1_Init+0x98>)
 8000a1a:	f001 fd35 	bl	8002488 <HAL_ADC_Init>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000a24:	f000 fc22 	bl	800126c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8000a30:	2306      	movs	r3, #6
 8000a32:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a34:	463b      	mov	r3, r7
 8000a36:	4619      	mov	r1, r3
 8000a38:	4805      	ldr	r0, [pc, #20]	; (8000a50 <MX_ADC1_Init+0x98>)
 8000a3a:	f001 fee9 	bl	8002810 <HAL_ADC_ConfigChannel>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000a44:	f000 fc12 	bl	800126c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a48:	bf00      	nop
 8000a4a:	3710      	adds	r7, #16
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	200000a8 	.word	0x200000a8
 8000a54:	40012000 	.word	0x40012000
 8000a58:	0f000001 	.word	0x0f000001

08000a5c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08a      	sub	sp, #40	; 0x28
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a2f      	ldr	r2, [pc, #188]	; (8000b38 <HAL_ADC_MspInit+0xdc>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d157      	bne.n	8000b2e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	613b      	str	r3, [r7, #16]
 8000a82:	4b2e      	ldr	r3, [pc, #184]	; (8000b3c <HAL_ADC_MspInit+0xe0>)
 8000a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a86:	4a2d      	ldr	r2, [pc, #180]	; (8000b3c <HAL_ADC_MspInit+0xe0>)
 8000a88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a8e:	4b2b      	ldr	r3, [pc, #172]	; (8000b3c <HAL_ADC_MspInit+0xe0>)
 8000a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a96:	613b      	str	r3, [r7, #16]
 8000a98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60fb      	str	r3, [r7, #12]
 8000a9e:	4b27      	ldr	r3, [pc, #156]	; (8000b3c <HAL_ADC_MspInit+0xe0>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	4a26      	ldr	r2, [pc, #152]	; (8000b3c <HAL_ADC_MspInit+0xe0>)
 8000aa4:	f043 0301 	orr.w	r3, r3, #1
 8000aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aaa:	4b24      	ldr	r3, [pc, #144]	; (8000b3c <HAL_ADC_MspInit+0xe0>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	f003 0301 	and.w	r3, r3, #1
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000aba:	2303      	movs	r3, #3
 8000abc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac2:	f107 0314 	add.w	r3, r7, #20
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	481d      	ldr	r0, [pc, #116]	; (8000b40 <HAL_ADC_MspInit+0xe4>)
 8000aca:	f002 fd21 	bl	8003510 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000ace:	4b1d      	ldr	r3, [pc, #116]	; (8000b44 <HAL_ADC_MspInit+0xe8>)
 8000ad0:	4a1d      	ldr	r2, [pc, #116]	; (8000b48 <HAL_ADC_MspInit+0xec>)
 8000ad2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000ad4:	4b1b      	ldr	r3, [pc, #108]	; (8000b44 <HAL_ADC_MspInit+0xe8>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ada:	4b1a      	ldr	r3, [pc, #104]	; (8000b44 <HAL_ADC_MspInit+0xe8>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ae0:	4b18      	ldr	r3, [pc, #96]	; (8000b44 <HAL_ADC_MspInit+0xe8>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ae6:	4b17      	ldr	r3, [pc, #92]	; (8000b44 <HAL_ADC_MspInit+0xe8>)
 8000ae8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000aec:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000aee:	4b15      	ldr	r3, [pc, #84]	; (8000b44 <HAL_ADC_MspInit+0xe8>)
 8000af0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000af4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000af6:	4b13      	ldr	r3, [pc, #76]	; (8000b44 <HAL_ADC_MspInit+0xe8>)
 8000af8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000afc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000afe:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <HAL_ADC_MspInit+0xe8>)
 8000b00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b04:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b06:	4b0f      	ldr	r3, [pc, #60]	; (8000b44 <HAL_ADC_MspInit+0xe8>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b0c:	4b0d      	ldr	r3, [pc, #52]	; (8000b44 <HAL_ADC_MspInit+0xe8>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b12:	480c      	ldr	r0, [pc, #48]	; (8000b44 <HAL_ADC_MspInit+0xe8>)
 8000b14:	f002 f98c 	bl	8002e30 <HAL_DMA_Init>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000b1e:	f000 fba5 	bl	800126c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	4a07      	ldr	r2, [pc, #28]	; (8000b44 <HAL_ADC_MspInit+0xe8>)
 8000b26:	639a      	str	r2, [r3, #56]	; 0x38
 8000b28:	4a06      	ldr	r2, [pc, #24]	; (8000b44 <HAL_ADC_MspInit+0xe8>)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000b2e:	bf00      	nop
 8000b30:	3728      	adds	r7, #40	; 0x28
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40012000 	.word	0x40012000
 8000b3c:	40023800 	.word	0x40023800
 8000b40:	40020000 	.word	0x40020000
 8000b44:	200000f0 	.word	0x200000f0
 8000b48:	40026410 	.word	0x40026410

08000b4c <delay_us>:
 *      Author: Wooseong Jung
 */
#include "delay.h"

void delay_us(uint16_t us)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	80fb      	strh	r3, [r7, #6]
	// __HAL_TIM_SET_COUNTER() 함수는 타이머를 원하는 숫자로 설정하는 함수
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8000b56:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <delay_us+0x30>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	625a      	str	r2, [r3, #36]	; 0x24

	// 타이머 값을 받아와야
    while((__HAL_TIM_GET_COUNTER(&htim3)) < us);
 8000b5e:	bf00      	nop
 8000b60:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <delay_us+0x30>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b66:	88fb      	ldrh	r3, [r7, #6]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d3f9      	bcc.n	8000b60 <delay_us+0x14>
}
 8000b6c:	bf00      	nop
 8000b6e:	bf00      	nop
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	200004a8 	.word	0x200004a8

08000b80 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	607b      	str	r3, [r7, #4]
 8000b8a:	4b1b      	ldr	r3, [pc, #108]	; (8000bf8 <MX_DMA_Init+0x78>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	4a1a      	ldr	r2, [pc, #104]	; (8000bf8 <MX_DMA_Init+0x78>)
 8000b90:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b94:	6313      	str	r3, [r2, #48]	; 0x30
 8000b96:	4b18      	ldr	r3, [pc, #96]	; (8000bf8 <MX_DMA_Init+0x78>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b9e:	607b      	str	r3, [r7, #4]
 8000ba0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	603b      	str	r3, [r7, #0]
 8000ba6:	4b14      	ldr	r3, [pc, #80]	; (8000bf8 <MX_DMA_Init+0x78>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	4a13      	ldr	r2, [pc, #76]	; (8000bf8 <MX_DMA_Init+0x78>)
 8000bac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb2:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <MX_DMA_Init+0x78>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bba:	603b      	str	r3, [r7, #0]
 8000bbc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2105      	movs	r1, #5
 8000bc2:	202f      	movs	r0, #47	; 0x2f
 8000bc4:	f002 f90a 	bl	8002ddc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000bc8:	202f      	movs	r0, #47	; 0x2f
 8000bca:	f002 f923 	bl	8002e14 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2105      	movs	r1, #5
 8000bd2:	2038      	movs	r0, #56	; 0x38
 8000bd4:	f002 f902 	bl	8002ddc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000bd8:	2038      	movs	r0, #56	; 0x38
 8000bda:	f002 f91b 	bl	8002e14 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000bde:	2200      	movs	r2, #0
 8000be0:	2105      	movs	r1, #5
 8000be2:	203a      	movs	r0, #58	; 0x3a
 8000be4:	f002 f8fa 	bl	8002ddc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000be8:	203a      	movs	r0, #58	; 0x3a
 8000bea:	f002 f913 	bl	8002e14 <HAL_NVIC_EnableIRQ>

}
 8000bee:	bf00      	nop
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40023800 	.word	0x40023800

08000bfc <__io_putchar>:
osThreadId Mode_ChangeHandle;

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */
int __io_putchar(int ch)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, &ch, 1, 200);
 8000c04:	1d39      	adds	r1, r7, #4
 8000c06:	23c8      	movs	r3, #200	; 0xc8
 8000c08:	2201      	movs	r2, #1
 8000c0a:	4804      	ldr	r0, [pc, #16]	; (8000c1c <__io_putchar+0x20>)
 8000c0c:	f005 fac5 	bl	800619a <HAL_UART_Transmit>
	return ch;
 8000c10:	687b      	ldr	r3, [r7, #4]
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	200005f4 	.word	0x200005f4

08000c20 <__io_getchar>:

int __io_getchar(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
	int ch; // buf?�� ???��?���??????????????????????????????????????????????????????????? ?��?��?��, ch?��?�� ???��
	while(1)
	{
		if(HAL_UART_Receive(&huart2, &ch, 1, 200) == HAL_OK)
 8000c26:	1d39      	adds	r1, r7, #4
 8000c28:	23c8      	movs	r3, #200	; 0xc8
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	4809      	ldr	r0, [pc, #36]	; (8000c54 <__io_getchar+0x34>)
 8000c2e:	f005 fb46 	bl	80062be <HAL_UART_Receive>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d000      	beq.n	8000c3a <__io_getchar+0x1a>
 8000c38:	e7f5      	b.n	8000c26 <__io_getchar+0x6>
			break;
 8000c3a:	bf00      	nop
	}
	HAL_UART_Transmit(&huart2, &ch, 1, 200);
 8000c3c:	1d39      	adds	r1, r7, #4
 8000c3e:	23c8      	movs	r3, #200	; 0xc8
 8000c40:	2201      	movs	r2, #1
 8000c42:	4804      	ldr	r0, [pc, #16]	; (8000c54 <__io_getchar+0x34>)
 8000c44:	f005 faa9 	bl	800619a <HAL_UART_Transmit>

	return ch;
 8000c48:	687b      	ldr	r3, [r7, #4]
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	200005f4 	.word	0x200005f4

08000c58 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b085      	sub	sp, #20
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	60b9      	str	r1, [r7, #8]
 8000c62:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	4a07      	ldr	r2, [pc, #28]	; (8000c84 <vApplicationGetIdleTaskMemory+0x2c>)
 8000c68:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	4a06      	ldr	r2, [pc, #24]	; (8000c88 <vApplicationGetIdleTaskMemory+0x30>)
 8000c6e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2280      	movs	r2, #128	; 0x80
 8000c74:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000c76:	bf00      	nop
 8000c78:	3714      	adds	r7, #20
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	20000168 	.word	0x20000168
 8000c88:	20000208 	.word	0x20000208

08000c8c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000c8c:	b5b0      	push	{r4, r5, r7, lr}
 8000c8e:	b0a4      	sub	sp, #144	; 0x90
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000c92:	2100      	movs	r1, #0
 8000c94:	4850      	ldr	r0, [pc, #320]	; (8000dd8 <MX_FREERTOS_Init+0x14c>)
 8000c96:	f004 f91d 	bl	8004ed4 <HAL_TIM_IC_Start_IT>
	  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8000c9a:	2104      	movs	r1, #4
 8000c9c:	484e      	ldr	r0, [pc, #312]	; (8000dd8 <MX_FREERTOS_Init+0x14c>)
 8000c9e:	f004 f919 	bl	8004ed4 <HAL_TIM_IC_Start_IT>
	  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3);
 8000ca2:	2108      	movs	r1, #8
 8000ca4:	484c      	ldr	r0, [pc, #304]	; (8000dd8 <MX_FREERTOS_Init+0x14c>)
 8000ca6:	f004 f915 	bl	8004ed4 <HAL_TIM_IC_Start_IT>
	//  HAL_TIM_IC_Start_DMA(&htim3, TIM_CHANNEL_1, buf_echo_1, sizeof(buf_echo_1));
	//  HAL_TIM_IC_Start_DMA(&htim3, TIM_CHANNEL_2, buf_echo_2, sizeof(buf_echo_1));
	//  HAL_TIM_IC_Start_DMA(&htim3, TIM_CHANNEL_4, buf_echo_4, sizeof(buf_echo_4));
	  HAL_UART_Receive_DMA(&huart1, buf, sizeof(buf));
 8000caa:	2201      	movs	r2, #1
 8000cac:	494b      	ldr	r1, [pc, #300]	; (8000ddc <MX_FREERTOS_Init+0x150>)
 8000cae:	484c      	ldr	r0, [pc, #304]	; (8000de0 <MX_FREERTOS_Init+0x154>)
 8000cb0:	f005 fba7 	bl	8006402 <HAL_UART_Receive_DMA>
	  HAL_UART_Receive_DMA(&huart2, buf, sizeof(buf));
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	4949      	ldr	r1, [pc, #292]	; (8000ddc <MX_FREERTOS_Init+0x150>)
 8000cb8:	484a      	ldr	r0, [pc, #296]	; (8000de4 <MX_FREERTOS_Init+0x158>)
 8000cba:	f005 fba2 	bl	8006402 <HAL_UART_Receive_DMA>
	  HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1); // Left
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	4849      	ldr	r0, [pc, #292]	; (8000de8 <MX_FREERTOS_Init+0x15c>)
 8000cc2:	f003 fffd 	bl	8004cc0 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1); // Right
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	4848      	ldr	r0, [pc, #288]	; (8000dec <MX_FREERTOS_Init+0x160>)
 8000cca:	f003 fff9 	bl	8004cc0 <HAL_TIM_PWM_Start>

	  HAL_Delay(1000); // ?��?�� ?���?????????????????????????????????????????????? ?��리니�?????????????????????????????????????????????? ?��?��?�� 주자.
 8000cce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cd2:	f001 fbb5 	bl	8002440 <HAL_Delay>
	  lcd_init();
 8000cd6:	f7ff fd2b 	bl	8000730 <lcd_init>
	  lcd_send_string("  Hello Master  "); // 12�???????????????????????????????????????????????��
 8000cda:	4845      	ldr	r0, [pc, #276]	; (8000df0 <MX_FREERTOS_Init+0x164>)
 8000cdc:	f7ff fdc2 	bl	8000864 <lcd_send_string>
	  HAL_Delay(500);
 8000ce0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ce4:	f001 fbac 	bl	8002440 <HAL_Delay>
	  lcd_put_cur(1, 0); // ?��?�� ?��?���?????????????????????????????????????????????? 커서 ?��?��
 8000ce8:	2100      	movs	r1, #0
 8000cea:	2001      	movs	r0, #1
 8000cec:	f7ff fdcf 	bl	800088e <lcd_put_cur>
	  lcd_send_string("  Drive Start!  "); // 12�???????????????????????????????????????????????��
 8000cf0:	4840      	ldr	r0, [pc, #256]	; (8000df4 <MX_FREERTOS_Init+0x168>)
 8000cf2:	f7ff fdb7 	bl	8000864 <lcd_send_string>
	  HAL_Delay(1000);
 8000cf6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cfa:	f001 fba1 	bl	8002440 <HAL_Delay>
	lcd_clear();
 8000cfe:	f7ff fde5 	bl	80008cc <lcd_clear>
	ult_stg = 1;
 8000d02:	4b3d      	ldr	r3, [pc, #244]	; (8000df8 <MX_FREERTOS_Init+0x16c>)
 8000d04:	2201      	movs	r2, #1
 8000d06:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(Back_Red_Lamp_GPIO_Port, Back_Red_Lamp_Pin, 1);
 8000d08:	2201      	movs	r2, #1
 8000d0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d0e:	483b      	ldr	r0, [pc, #236]	; (8000dfc <MX_FREERTOS_Init+0x170>)
 8000d10:	f002 fd9a 	bl	8003848 <HAL_GPIO_WritePin>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000d14:	4b3a      	ldr	r3, [pc, #232]	; (8000e00 <MX_FREERTOS_Init+0x174>)
 8000d16:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000d1a:	461d      	mov	r5, r3
 8000d1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d20:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d24:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000d28:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f006 f8e5 	bl	8006efe <osThreadCreate>
 8000d34:	4603      	mov	r3, r0
 8000d36:	4a33      	ldr	r2, [pc, #204]	; (8000e04 <MX_FREERTOS_Init+0x178>)
 8000d38:	6013      	str	r3, [r2, #0]

  /* definition and creation of Ultra_sonic */
  osThreadDef(Ultra_sonic, Ultra_sonic_x3, osPriorityHigh, 0, 128);
 8000d3a:	4b33      	ldr	r3, [pc, #204]	; (8000e08 <MX_FREERTOS_Init+0x17c>)
 8000d3c:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000d40:	461d      	mov	r5, r3
 8000d42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d46:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d4a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Ultra_sonicHandle = osThreadCreate(osThread(Ultra_sonic), NULL);
 8000d4e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000d52:	2100      	movs	r1, #0
 8000d54:	4618      	mov	r0, r3
 8000d56:	f006 f8d2 	bl	8006efe <osThreadCreate>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	4a2b      	ldr	r2, [pc, #172]	; (8000e0c <MX_FREERTOS_Init+0x180>)
 8000d5e:	6013      	str	r3, [r2, #0]

  /* definition and creation of Auto_Drive */
  osThreadDef(Auto_Drive, Auto_Drive01, osPriorityNormal, 0, 128);
 8000d60:	4b2b      	ldr	r3, [pc, #172]	; (8000e10 <MX_FREERTOS_Init+0x184>)
 8000d62:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000d66:	461d      	mov	r5, r3
 8000d68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d6c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d70:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Auto_DriveHandle = osThreadCreate(osThread(Auto_Drive), NULL);
 8000d74:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f006 f8bf 	bl	8006efe <osThreadCreate>
 8000d80:	4603      	mov	r3, r0
 8000d82:	4a24      	ldr	r2, [pc, #144]	; (8000e14 <MX_FREERTOS_Init+0x188>)
 8000d84:	6013      	str	r3, [r2, #0]

  /* definition and creation of I2C_LCD */
  osThreadDef(I2C_LCD, LCD, osPriorityIdle, 0, 128);
 8000d86:	4b24      	ldr	r3, [pc, #144]	; (8000e18 <MX_FREERTOS_Init+0x18c>)
 8000d88:	f107 0420 	add.w	r4, r7, #32
 8000d8c:	461d      	mov	r5, r3
 8000d8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d92:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d96:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  I2C_LCDHandle = osThreadCreate(osThread(I2C_LCD), NULL);
 8000d9a:	f107 0320 	add.w	r3, r7, #32
 8000d9e:	2100      	movs	r1, #0
 8000da0:	4618      	mov	r0, r3
 8000da2:	f006 f8ac 	bl	8006efe <osThreadCreate>
 8000da6:	4603      	mov	r3, r0
 8000da8:	4a1c      	ldr	r2, [pc, #112]	; (8000e1c <MX_FREERTOS_Init+0x190>)
 8000daa:	6013      	str	r3, [r2, #0]

  /* definition and creation of Mode_Change */
  osThreadDef(Mode_Change, Mode, osPriorityIdle, 0, 128);
 8000dac:	4b1c      	ldr	r3, [pc, #112]	; (8000e20 <MX_FREERTOS_Init+0x194>)
 8000dae:	1d3c      	adds	r4, r7, #4
 8000db0:	461d      	mov	r5, r3
 8000db2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000db4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000db6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000dba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Mode_ChangeHandle = osThreadCreate(osThread(Mode_Change), NULL);
 8000dbe:	1d3b      	adds	r3, r7, #4
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f006 f89b 	bl	8006efe <osThreadCreate>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	4a16      	ldr	r2, [pc, #88]	; (8000e24 <MX_FREERTOS_Init+0x198>)
 8000dcc:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000dce:	bf00      	nop
 8000dd0:	3790      	adds	r7, #144	; 0x90
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bdb0      	pop	{r4, r5, r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	200004a8 	.word	0x200004a8
 8000ddc:	20000150 	.word	0x20000150
 8000de0:	200005b0 	.word	0x200005b0
 8000de4:	200005f4 	.word	0x200005f4
 8000de8:	200004f0 	.word	0x200004f0
 8000dec:	20000538 	.word	0x20000538
 8000df0:	080094ac 	.word	0x080094ac
 8000df4:	080094c0 	.word	0x080094c0
 8000df8:	200005ae 	.word	0x200005ae
 8000dfc:	40020400 	.word	0x40020400
 8000e00:	080094e0 	.word	0x080094e0
 8000e04:	20000154 	.word	0x20000154
 8000e08:	08009508 	.word	0x08009508
 8000e0c:	20000158 	.word	0x20000158
 8000e10:	08009530 	.word	0x08009530
 8000e14:	2000015c 	.word	0x2000015c
 8000e18:	08009554 	.word	0x08009554
 8000e1c:	20000160 	.word	0x20000160
 8000e20:	0800957c 	.word	0x0800957c
 8000e24:	20000164 	.word	0x20000164

08000e28 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	  ADC_start();
 8000e30:	f7ff fd64 	bl	80008fc <ADC_start>
	  Light();
 8000e34:	f7ff fd7c 	bl	8000930 <Light>
    osDelay(150);
 8000e38:	2096      	movs	r0, #150	; 0x96
 8000e3a:	f006 f8ac 	bl	8006f96 <osDelay>
	  ADC_start();
 8000e3e:	e7f7      	b.n	8000e30 <StartDefaultTask+0x8>

08000e40 <Ultra_sonic_x3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Ultra_sonic_x3 */
void Ultra_sonic_x3(void const * argument)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Ultra_sonic_x3 */
  /* Infinite loop */
  for(;;)
  {
//	  osDelay(10);
	  HCSR04_Read_L();
 8000e48:	f000 ff56 	bl	8001cf8 <HCSR04_Read_L>
	  osDelay(16);
 8000e4c:	2010      	movs	r0, #16
 8000e4e:	f006 f8a2 	bl	8006f96 <osDelay>
//	  delay_us(16000);
	  HCSR04_Read_M();
 8000e52:	f000 ff73 	bl	8001d3c <HCSR04_Read_M>
	  osDelay(16);
 8000e56:	2010      	movs	r0, #16
 8000e58:	f006 f89d 	bl	8006f96 <osDelay>
//	  delay_us(16000);
	  HCSR04_Read_R();
 8000e5c:	f000 ff90 	bl	8001d80 <HCSR04_Read_R>
//	  delay_us(16000);
	  osDelay(16);
 8000e60:	2010      	movs	r0, #16
 8000e62:	f006 f898 	bl	8006f96 <osDelay>
	  HCSR04_Read_L();
 8000e66:	e7ef      	b.n	8000e48 <Ultra_sonic_x3+0x8>

08000e68 <Auto_Drive01>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Auto_Drive01 */
void Auto_Drive01(void const * argument)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
//				  htim10.Instance->CCR1 = LIMIT_SPEED_T; // Left
//				  htim11.Instance->CCR1 = LIMIT_SPEED_T; // Right
//			  }
//		  }
//	  }
	  Auto_Drive_01();
 8000e70:	f7ff fb84 	bl	800057c <Auto_Drive_01>
    osDelay(1);
 8000e74:	2001      	movs	r0, #1
 8000e76:	f006 f88e 	bl	8006f96 <osDelay>
	  Auto_Drive_01();
 8000e7a:	e7f9      	b.n	8000e70 <Auto_Drive01+0x8>

08000e7c <LCD>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LCD */
void LCD(void const * argument)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LCD */
  /* Infinite loop */
  for(;;)
  {
	  extern uint8_t mode;
	  lcd_put_cur(0, 0);
 8000e84:	2100      	movs	r1, #0
 8000e86:	2000      	movs	r0, #0
 8000e88:	f7ff fd01 	bl	800088e <lcd_put_cur>
	  switch(mode)
 8000e8c:	4b09      	ldr	r3, [pc, #36]	; (8000eb4 <LCD+0x38>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d002      	beq.n	8000e9a <LCD+0x1e>
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d004      	beq.n	8000ea2 <LCD+0x26>
 8000e98:	e007      	b.n	8000eaa <LCD+0x2e>
	  {
	  	  case 0 :
	  		  lcd_send_string("  Manual Drive  ");
 8000e9a:	4807      	ldr	r0, [pc, #28]	; (8000eb8 <LCD+0x3c>)
 8000e9c:	f7ff fce2 	bl	8000864 <lcd_send_string>
	  		  break;
 8000ea0:	e003      	b.n	8000eaa <LCD+0x2e>
	  	  case 1 :
	  		  lcd_send_string("   Auto Drive   ");
 8000ea2:	4806      	ldr	r0, [pc, #24]	; (8000ebc <LCD+0x40>)
 8000ea4:	f7ff fcde 	bl	8000864 <lcd_send_string>
	  		  break;
 8000ea8:	bf00      	nop
	  }
    osDelay(100);
 8000eaa:	2064      	movs	r0, #100	; 0x64
 8000eac:	f006 f873 	bl	8006f96 <osDelay>
  {
 8000eb0:	e7e8      	b.n	8000e84 <LCD+0x8>
 8000eb2:	bf00      	nop
 8000eb4:	20000151 	.word	0x20000151
 8000eb8:	08009598 	.word	0x08009598
 8000ebc:	080095ac 	.word	0x080095ac

08000ec0 <Mode>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Mode */
void Mode(void const * argument)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Mode */
  /* Infinite loop */
  for(;;)
  {
//	  uint8_t mode = 0;
	  uint8_t mode_cnt = HAL_GPIO_ReadPin(Blue_button_GPIO_Port, Blue_button_Pin);
 8000ec8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ecc:	4814      	ldr	r0, [pc, #80]	; (8000f20 <Mode+0x60>)
 8000ece:	f002 fca3 	bl	8003818 <HAL_GPIO_ReadPin>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	73fb      	strb	r3, [r7, #15]
	  if(buf[0] == 'm')
 8000ed6:	4b13      	ldr	r3, [pc, #76]	; (8000f24 <Mode+0x64>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	2b6d      	cmp	r3, #109	; 0x6d
 8000edc:	d11b      	bne.n	8000f16 <Mode+0x56>
	  {
		  if(mode < 1)
 8000ede:	4b12      	ldr	r3, [pc, #72]	; (8000f28 <Mode+0x68>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d10d      	bne.n	8000f02 <Mode+0x42>
		  {
			  mode++;
 8000ee6:	4b10      	ldr	r3, [pc, #64]	; (8000f28 <Mode+0x68>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	3301      	adds	r3, #1
 8000eec:	b2da      	uxtb	r2, r3
 8000eee:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <Mode+0x68>)
 8000ef0:	701a      	strb	r2, [r3, #0]
			  delay_us(10000);
 8000ef2:	f242 7010 	movw	r0, #10000	; 0x2710
 8000ef6:	f7ff fe29 	bl	8000b4c <delay_us>
			  buf[0] = 0;
 8000efa:	4b0a      	ldr	r3, [pc, #40]	; (8000f24 <Mode+0x64>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	701a      	strb	r2, [r3, #0]
 8000f00:	e009      	b.n	8000f16 <Mode+0x56>
		  }
		  else
		  {
			  mode = 0;
 8000f02:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <Mode+0x68>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	701a      	strb	r2, [r3, #0]
			  delay_us(10000);
 8000f08:	f242 7010 	movw	r0, #10000	; 0x2710
 8000f0c:	f7ff fe1e 	bl	8000b4c <delay_us>
			  buf[0] = 0;
 8000f10:	4b04      	ldr	r3, [pc, #16]	; (8000f24 <Mode+0x64>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	701a      	strb	r2, [r3, #0]
		  }
	  }
    osDelay(200);
 8000f16:	20c8      	movs	r0, #200	; 0xc8
 8000f18:	f006 f83d 	bl	8006f96 <osDelay>
  {
 8000f1c:	e7d4      	b.n	8000ec8 <Mode+0x8>
 8000f1e:	bf00      	nop
 8000f20:	40020800 	.word	0x40020800
 8000f24:	20000150 	.word	0x20000150
 8000f28:	20000151 	.word	0x20000151

08000f2c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b08a      	sub	sp, #40	; 0x28
 8000f30:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f32:	f107 0314 	add.w	r3, r7, #20
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	605a      	str	r2, [r3, #4]
 8000f3c:	609a      	str	r2, [r3, #8]
 8000f3e:	60da      	str	r2, [r3, #12]
 8000f40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	613b      	str	r3, [r7, #16]
 8000f46:	4b3f      	ldr	r3, [pc, #252]	; (8001044 <MX_GPIO_Init+0x118>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	4a3e      	ldr	r2, [pc, #248]	; (8001044 <MX_GPIO_Init+0x118>)
 8000f4c:	f043 0304 	orr.w	r3, r3, #4
 8000f50:	6313      	str	r3, [r2, #48]	; 0x30
 8000f52:	4b3c      	ldr	r3, [pc, #240]	; (8001044 <MX_GPIO_Init+0x118>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	f003 0304 	and.w	r3, r3, #4
 8000f5a:	613b      	str	r3, [r7, #16]
 8000f5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	4b38      	ldr	r3, [pc, #224]	; (8001044 <MX_GPIO_Init+0x118>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	4a37      	ldr	r2, [pc, #220]	; (8001044 <MX_GPIO_Init+0x118>)
 8000f68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6e:	4b35      	ldr	r3, [pc, #212]	; (8001044 <MX_GPIO_Init+0x118>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60bb      	str	r3, [r7, #8]
 8000f7e:	4b31      	ldr	r3, [pc, #196]	; (8001044 <MX_GPIO_Init+0x118>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	4a30      	ldr	r2, [pc, #192]	; (8001044 <MX_GPIO_Init+0x118>)
 8000f84:	f043 0301 	orr.w	r3, r3, #1
 8000f88:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8a:	4b2e      	ldr	r3, [pc, #184]	; (8001044 <MX_GPIO_Init+0x118>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	60bb      	str	r3, [r7, #8]
 8000f94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	607b      	str	r3, [r7, #4]
 8000f9a:	4b2a      	ldr	r3, [pc, #168]	; (8001044 <MX_GPIO_Init+0x118>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	4a29      	ldr	r2, [pc, #164]	; (8001044 <MX_GPIO_Init+0x118>)
 8000fa0:	f043 0302 	orr.w	r3, r3, #2
 8000fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa6:	4b27      	ldr	r3, [pc, #156]	; (8001044 <MX_GPIO_Init+0x118>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	f003 0302 	and.w	r3, r3, #2
 8000fae:	607b      	str	r3, [r7, #4]
 8000fb0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Right_Front_Pin|Right_Back_Pin|Left_Back_Pin|Left_Front_Pin
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f640 5143 	movw	r1, #3395	; 0xd43
 8000fb8:	4823      	ldr	r0, [pc, #140]	; (8001048 <MX_GPIO_Init+0x11c>)
 8000fba:	f002 fc45 	bl	8003848 <HAL_GPIO_WritePin>
                          |Front_Low_Lamp_Pin|Front_High_Lamp_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TRIG_Pin|Back_Red_Lamp_Pin|Back_Blue_Left_Lamp_Pin|Back_Blue_Right_Lamp_Pin, GPIO_PIN_RESET);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f24e 0104 	movw	r1, #57348	; 0xe004
 8000fc4:	4821      	ldr	r0, [pc, #132]	; (800104c <MX_GPIO_Init+0x120>)
 8000fc6:	f002 fc3f 	bl	8003848 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Blue_button_Pin;
 8000fca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Blue_button_GPIO_Port, &GPIO_InitStruct);
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	4619      	mov	r1, r3
 8000fde:	481a      	ldr	r0, [pc, #104]	; (8001048 <MX_GPIO_Init+0x11c>)
 8000fe0:	f002 fa96 	bl	8003510 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = Right_Front_Pin|Right_Back_Pin|Left_Back_Pin|Left_Front_Pin
 8000fe4:	f640 5343 	movw	r3, #3395	; 0xd43
 8000fe8:	617b      	str	r3, [r7, #20]
                          |Front_Low_Lamp_Pin|Front_High_Lamp_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fea:	2301      	movs	r3, #1
 8000fec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ff6:	f107 0314 	add.w	r3, r7, #20
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4812      	ldr	r0, [pc, #72]	; (8001048 <MX_GPIO_Init+0x11c>)
 8000ffe:	f002 fa87 	bl	8003510 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 8001002:	2304      	movs	r3, #4
 8001004:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001006:	2301      	movs	r3, #1
 8001008:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800100e:	2302      	movs	r3, #2
 8001010:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 8001012:	f107 0314 	add.w	r3, r7, #20
 8001016:	4619      	mov	r1, r3
 8001018:	480c      	ldr	r0, [pc, #48]	; (800104c <MX_GPIO_Init+0x120>)
 800101a:	f002 fa79 	bl	8003510 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Back_Red_Lamp_Pin|Back_Blue_Left_Lamp_Pin|Back_Blue_Right_Lamp_Pin;
 800101e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001022:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001024:	2301      	movs	r3, #1
 8001026:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102c:	2300      	movs	r3, #0
 800102e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001030:	f107 0314 	add.w	r3, r7, #20
 8001034:	4619      	mov	r1, r3
 8001036:	4805      	ldr	r0, [pc, #20]	; (800104c <MX_GPIO_Init+0x120>)
 8001038:	f002 fa6a 	bl	8003510 <HAL_GPIO_Init>

}
 800103c:	bf00      	nop
 800103e:	3728      	adds	r7, #40	; 0x28
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40023800 	.word	0x40023800
 8001048:	40020800 	.word	0x40020800
 800104c:	40020400 	.word	0x40020400

08001050 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001054:	4b12      	ldr	r3, [pc, #72]	; (80010a0 <MX_I2C1_Init+0x50>)
 8001056:	4a13      	ldr	r2, [pc, #76]	; (80010a4 <MX_I2C1_Init+0x54>)
 8001058:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800105a:	4b11      	ldr	r3, [pc, #68]	; (80010a0 <MX_I2C1_Init+0x50>)
 800105c:	4a12      	ldr	r2, [pc, #72]	; (80010a8 <MX_I2C1_Init+0x58>)
 800105e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001060:	4b0f      	ldr	r3, [pc, #60]	; (80010a0 <MX_I2C1_Init+0x50>)
 8001062:	2200      	movs	r2, #0
 8001064:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001066:	4b0e      	ldr	r3, [pc, #56]	; (80010a0 <MX_I2C1_Init+0x50>)
 8001068:	2200      	movs	r2, #0
 800106a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800106c:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <MX_I2C1_Init+0x50>)
 800106e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001072:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001074:	4b0a      	ldr	r3, [pc, #40]	; (80010a0 <MX_I2C1_Init+0x50>)
 8001076:	2200      	movs	r2, #0
 8001078:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800107a:	4b09      	ldr	r3, [pc, #36]	; (80010a0 <MX_I2C1_Init+0x50>)
 800107c:	2200      	movs	r2, #0
 800107e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001080:	4b07      	ldr	r3, [pc, #28]	; (80010a0 <MX_I2C1_Init+0x50>)
 8001082:	2200      	movs	r2, #0
 8001084:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001086:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <MX_I2C1_Init+0x50>)
 8001088:	2200      	movs	r2, #0
 800108a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800108c:	4804      	ldr	r0, [pc, #16]	; (80010a0 <MX_I2C1_Init+0x50>)
 800108e:	f002 fbf5 	bl	800387c <HAL_I2C_Init>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001098:	f000 f8e8 	bl	800126c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800109c:	bf00      	nop
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20000408 	.word	0x20000408
 80010a4:	40005400 	.word	0x40005400
 80010a8:	000186a0 	.word	0x000186a0

080010ac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08a      	sub	sp, #40	; 0x28
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b4:	f107 0314 	add.w	r3, r7, #20
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a19      	ldr	r2, [pc, #100]	; (8001130 <HAL_I2C_MspInit+0x84>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d12b      	bne.n	8001126 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	613b      	str	r3, [r7, #16]
 80010d2:	4b18      	ldr	r3, [pc, #96]	; (8001134 <HAL_I2C_MspInit+0x88>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	4a17      	ldr	r2, [pc, #92]	; (8001134 <HAL_I2C_MspInit+0x88>)
 80010d8:	f043 0302 	orr.w	r3, r3, #2
 80010dc:	6313      	str	r3, [r2, #48]	; 0x30
 80010de:	4b15      	ldr	r3, [pc, #84]	; (8001134 <HAL_I2C_MspInit+0x88>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	f003 0302 	and.w	r3, r3, #2
 80010e6:	613b      	str	r3, [r7, #16]
 80010e8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010ea:	23c0      	movs	r3, #192	; 0xc0
 80010ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010ee:	2312      	movs	r3, #18
 80010f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f6:	2303      	movs	r3, #3
 80010f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010fa:	2304      	movs	r3, #4
 80010fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010fe:	f107 0314 	add.w	r3, r7, #20
 8001102:	4619      	mov	r1, r3
 8001104:	480c      	ldr	r0, [pc, #48]	; (8001138 <HAL_I2C_MspInit+0x8c>)
 8001106:	f002 fa03 	bl	8003510 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	60fb      	str	r3, [r7, #12]
 800110e:	4b09      	ldr	r3, [pc, #36]	; (8001134 <HAL_I2C_MspInit+0x88>)
 8001110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001112:	4a08      	ldr	r2, [pc, #32]	; (8001134 <HAL_I2C_MspInit+0x88>)
 8001114:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001118:	6413      	str	r3, [r2, #64]	; 0x40
 800111a:	4b06      	ldr	r3, [pc, #24]	; (8001134 <HAL_I2C_MspInit+0x88>)
 800111c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001126:	bf00      	nop
 8001128:	3728      	adds	r7, #40	; 0x28
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40005400 	.word	0x40005400
 8001134:	40023800 	.word	0x40023800
 8001138:	40020400 	.word	0x40020400

0800113c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001140:	f001 f93c 	bl	80023bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001144:	f000 f818 	bl	8001178 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001148:	f7ff fef0 	bl	8000f2c <MX_GPIO_Init>
  MX_DMA_Init();
 800114c:	f7ff fd18 	bl	8000b80 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001150:	f000 ffd0 	bl	80020f4 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8001154:	f000 fbaa 	bl	80018ac <MX_TIM3_Init>
  MX_TIM10_Init();
 8001158:	f000 fc30 	bl	80019bc <MX_TIM10_Init>
  MX_TIM11_Init();
 800115c:	f000 fc7a 	bl	8001a54 <MX_TIM11_Init>
  MX_USART2_UART_Init();
 8001160:	f000 fff2 	bl	8002148 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001164:	f7ff ff74 	bl	8001050 <MX_I2C1_Init>
  MX_ADC1_Init();
 8001168:	f7ff fc26 	bl	80009b8 <MX_ADC1_Init>
//  HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1); // Left
//  HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1); // Right
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800116c:	f7ff fd8e 	bl	8000c8c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001170:	f005 febe 	bl	8006ef0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001174:	e7fe      	b.n	8001174 <main+0x38>
	...

08001178 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b094      	sub	sp, #80	; 0x50
 800117c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800117e:	f107 0320 	add.w	r3, r7, #32
 8001182:	2230      	movs	r2, #48	; 0x30
 8001184:	2100      	movs	r1, #0
 8001186:	4618      	mov	r0, r3
 8001188:	f007 fb26 	bl	80087d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800118c:	f107 030c 	add.w	r3, r7, #12
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	60da      	str	r2, [r3, #12]
 800119a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800119c:	2300      	movs	r3, #0
 800119e:	60bb      	str	r3, [r7, #8]
 80011a0:	4b27      	ldr	r3, [pc, #156]	; (8001240 <SystemClock_Config+0xc8>)
 80011a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a4:	4a26      	ldr	r2, [pc, #152]	; (8001240 <SystemClock_Config+0xc8>)
 80011a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011aa:	6413      	str	r3, [r2, #64]	; 0x40
 80011ac:	4b24      	ldr	r3, [pc, #144]	; (8001240 <SystemClock_Config+0xc8>)
 80011ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b4:	60bb      	str	r3, [r7, #8]
 80011b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011b8:	2300      	movs	r3, #0
 80011ba:	607b      	str	r3, [r7, #4]
 80011bc:	4b21      	ldr	r3, [pc, #132]	; (8001244 <SystemClock_Config+0xcc>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a20      	ldr	r2, [pc, #128]	; (8001244 <SystemClock_Config+0xcc>)
 80011c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011c6:	6013      	str	r3, [r2, #0]
 80011c8:	4b1e      	ldr	r3, [pc, #120]	; (8001244 <SystemClock_Config+0xcc>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011d0:	607b      	str	r3, [r7, #4]
 80011d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011d4:	2301      	movs	r3, #1
 80011d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011de:	2302      	movs	r3, #2
 80011e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011e8:	2304      	movs	r3, #4
 80011ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80011ec:	2364      	movs	r3, #100	; 0x64
 80011ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011f0:	2302      	movs	r3, #2
 80011f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80011f4:	2304      	movs	r3, #4
 80011f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011f8:	f107 0320 	add.w	r3, r7, #32
 80011fc:	4618      	mov	r0, r3
 80011fe:	f002 ff89 	bl	8004114 <HAL_RCC_OscConfig>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001208:	f000 f830 	bl	800126c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800120c:	230f      	movs	r3, #15
 800120e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001210:	2302      	movs	r3, #2
 8001212:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001218:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800121c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800121e:	2300      	movs	r3, #0
 8001220:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001222:	f107 030c 	add.w	r3, r7, #12
 8001226:	2103      	movs	r1, #3
 8001228:	4618      	mov	r0, r3
 800122a:	f003 f9eb 	bl	8004604 <HAL_RCC_ClockConfig>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001234:	f000 f81a 	bl	800126c <Error_Handler>
  }
}
 8001238:	bf00      	nop
 800123a:	3750      	adds	r7, #80	; 0x50
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40023800 	.word	0x40023800
 8001244:	40007000 	.word	0x40007000

08001248 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a04      	ldr	r2, [pc, #16]	; (8001268 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d101      	bne.n	800125e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800125a:	f001 f8d1 	bl	8002400 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800125e:	bf00      	nop
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40010000 	.word	0x40010000

0800126c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001270:	b672      	cpsid	i
}
 8001272:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001274:	e7fe      	b.n	8001274 <Error_Handler+0x8>
	...

08001278 <motor_control>:
#include "motor.h"
#include "main.h"
#include "I2C_LCD.h"

void motor_control(char *buf)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
	  if(buf[0] != 0)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d07a      	beq.n	800137e <motor_control+0x106>
		{
			switch(buf[0])
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	3b61      	subs	r3, #97	; 0x61
 800128e:	2b19      	cmp	r3, #25
 8001290:	d871      	bhi.n	8001376 <motor_control+0xfe>
 8001292:	a201      	add	r2, pc, #4	; (adr r2, 8001298 <motor_control+0x20>)
 8001294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001298:	08001345 	.word	0x08001345
 800129c:	08001377 	.word	0x08001377
 80012a0:	08001377 	.word	0x08001377
 80012a4:	0800135b 	.word	0x0800135b
 80012a8:	08001377 	.word	0x08001377
 80012ac:	08001377 	.word	0x08001377
 80012b0:	08001377 	.word	0x08001377
 80012b4:	08001377 	.word	0x08001377
 80012b8:	08001377 	.word	0x08001377
 80012bc:	08001377 	.word	0x08001377
 80012c0:	08001377 	.word	0x08001377
 80012c4:	08001377 	.word	0x08001377
 80012c8:	08001377 	.word	0x08001377
 80012cc:	08001377 	.word	0x08001377
 80012d0:	08001377 	.word	0x08001377
 80012d4:	08001377 	.word	0x08001377
 80012d8:	08001377 	.word	0x08001377
 80012dc:	08001377 	.word	0x08001377
 80012e0:	08001323 	.word	0x08001323
 80012e4:	08001377 	.word	0x08001377
 80012e8:	08001377 	.word	0x08001377
 80012ec:	08001377 	.word	0x08001377
 80012f0:	08001301 	.word	0x08001301
 80012f4:	08001377 	.word	0x08001377
 80012f8:	08001377 	.word	0x08001377
 80012fc:	08001371 	.word	0x08001371
			{
			case 'w' :
				Forward();
 8001300:	f000 f84a 	bl	8001398 <Forward>
				htim10.Instance->CCR1 = 98; // Left
 8001304:	4b20      	ldr	r3, [pc, #128]	; (8001388 <motor_control+0x110>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2262      	movs	r2, #98	; 0x62
 800130a:	635a      	str	r2, [r3, #52]	; 0x34
				htim11.Instance->CCR1 = 98; // Right
 800130c:	4b1f      	ldr	r3, [pc, #124]	; (800138c <motor_control+0x114>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2262      	movs	r2, #98	; 0x62
 8001312:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_GPIO_WritePin(Back_Red_Lamp_GPIO_Port, Back_Red_Lamp_Pin, 0);
 8001314:	2200      	movs	r2, #0
 8001316:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800131a:	481d      	ldr	r0, [pc, #116]	; (8001390 <motor_control+0x118>)
 800131c:	f002 fa94 	bl	8003848 <HAL_GPIO_WritePin>
//				printf("Forward \r\n");
//				lcd_put_cur(1, 0);
//				lcd_send_string("Forward ");
				break;
 8001320:	e02d      	b.n	800137e <motor_control+0x106>
			case 's' :
				Backward();
 8001322:	f000 f8c9 	bl	80014b8 <Backward>
				htim10.Instance->CCR1 = 98; // Left
 8001326:	4b18      	ldr	r3, [pc, #96]	; (8001388 <motor_control+0x110>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2262      	movs	r2, #98	; 0x62
 800132c:	635a      	str	r2, [r3, #52]	; 0x34
				htim11.Instance->CCR1 = 98; // Right
 800132e:	4b17      	ldr	r3, [pc, #92]	; (800138c <motor_control+0x114>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	2262      	movs	r2, #98	; 0x62
 8001334:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_GPIO_WritePin(Back_Red_Lamp_GPIO_Port, Back_Red_Lamp_Pin, 0);
 8001336:	2200      	movs	r2, #0
 8001338:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800133c:	4814      	ldr	r0, [pc, #80]	; (8001390 <motor_control+0x118>)
 800133e:	f002 fa83 	bl	8003848 <HAL_GPIO_WritePin>
//				HAL_GPIO_WritePin(Back_Blue_Right_Lamp_GPIO_Port, Back_Blue_Right_Lamp_Pin, 1);
//				HAL_GPIO_WritePin(Back_Blue_Left_Lamp_GPIO_Port, Back_Blue_Left_Lamp_Pin, 1);
//				printf("Backward \r\n");
//				lcd_put_cur(1, 0);
//				lcd_send_string("Backward");
				break;
 8001342:	e01c      	b.n	800137e <motor_control+0x106>
			case 'a' :
//				Forward();
//				htim10.Instance->CCR1 = 60; // Left
//				htim11.Instance->CCR1 = 98; // Right
				Left();
 8001344:	f000 f858 	bl	80013f8 <Left>
				htim10.Instance->CCR1 = 98; // Left
 8001348:	4b0f      	ldr	r3, [pc, #60]	; (8001388 <motor_control+0x110>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2262      	movs	r2, #98	; 0x62
 800134e:	635a      	str	r2, [r3, #52]	; 0x34
				htim11.Instance->CCR1 = 98; // Right
 8001350:	4b0e      	ldr	r3, [pc, #56]	; (800138c <motor_control+0x114>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2262      	movs	r2, #98	; 0x62
 8001356:	635a      	str	r2, [r3, #52]	; 0x34
//				HAL_GPIO_WritePin(Back_Red_Lamp_GPIO_Port, Back_Red_Lamp_Pin, 0);
//				HAL_GPIO_WritePin(Back_Blue_Left_Lamp_GPIO_Port, Back_Blue_Left_Lamp_Pin, 1);
//				printf("Left \r\n");
//				lcd_put_cur(1, 0);
//				lcd_send_string("Left    ");
				break;
 8001358:	e011      	b.n	800137e <motor_control+0x106>
			case 'd' :
//				Forward();
//				htim10.Instance->CCR1 = 98; // Left
//				htim11.Instance->CCR1 = 60; // Right
				Right();
 800135a:	f000 f87d 	bl	8001458 <Right>
				htim10.Instance->CCR1 = 98; // Left
 800135e:	4b0a      	ldr	r3, [pc, #40]	; (8001388 <motor_control+0x110>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	2262      	movs	r2, #98	; 0x62
 8001364:	635a      	str	r2, [r3, #52]	; 0x34
				htim11.Instance->CCR1 = 98; // Right
 8001366:	4b09      	ldr	r3, [pc, #36]	; (800138c <motor_control+0x114>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2262      	movs	r2, #98	; 0x62
 800136c:	635a      	str	r2, [r3, #52]	; 0x34
//				HAL_GPIO_WritePin(Back_Red_Lamp_GPIO_Port, Back_Red_Lamp_Pin, 0);
//				HAL_GPIO_WritePin(Back_Blue_Right_Lamp_GPIO_Port, Back_Blue_Right_Lamp_Pin, 1);
//				printf("Right \r\n");
//				lcd_put_cur(1, 0);
//				lcd_send_string("Right   ");
				break;
 800136e:	e006      	b.n	800137e <motor_control+0x106>
			case 'z' :
				Stop();
 8001370:	f000 f8cc 	bl	800150c <Stop>
//				htim11.Instance->CCR1 = 7500; // Right
//				printf("Right \r\n");
//				lcd_put_cur(1, 0);
//				lcd_send_string("Right   ");
//				HAL_GPIO_WritePin(Back_Red_Lamp_GPIO_Port, Back_Red_Lamp_Pin, 1);
				break;
 8001374:	e003      	b.n	800137e <motor_control+0x106>
			default :
				printf("Error \r\n");
 8001376:	4807      	ldr	r0, [pc, #28]	; (8001394 <motor_control+0x11c>)
 8001378:	f007 f92e 	bl	80085d8 <puts>
				break;
 800137c:	bf00      	nop
			}
		}
//		buf[0] = 0;
//	  	HAL_Delay(50);
}
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	200004f0 	.word	0x200004f0
 800138c:	20000538 	.word	0x20000538
 8001390:	40020400 	.word	0x40020400
 8001394:	080095c0 	.word	0x080095c0

08001398 <Forward>:


void Forward()
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Right_Front_GPIO_Port, Right_Front_Pin, 1);
 800139c:	2201      	movs	r2, #1
 800139e:	2101      	movs	r1, #1
 80013a0:	4813      	ldr	r0, [pc, #76]	; (80013f0 <Forward+0x58>)
 80013a2:	f002 fa51 	bl	8003848 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Right_Back_GPIO_Port, Right_Back_Pin, 0);
 80013a6:	2200      	movs	r2, #0
 80013a8:	2102      	movs	r1, #2
 80013aa:	4811      	ldr	r0, [pc, #68]	; (80013f0 <Forward+0x58>)
 80013ac:	f002 fa4c 	bl	8003848 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Left_Front_GPIO_Port, Left_Front_Pin, 0);
 80013b0:	2200      	movs	r2, #0
 80013b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013b6:	480e      	ldr	r0, [pc, #56]	; (80013f0 <Forward+0x58>)
 80013b8:	f002 fa46 	bl	8003848 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Left_Back_GPIO_Port, Left_Back_Pin, 1);
 80013bc:	2201      	movs	r2, #1
 80013be:	2140      	movs	r1, #64	; 0x40
 80013c0:	480b      	ldr	r0, [pc, #44]	; (80013f0 <Forward+0x58>)
 80013c2:	f002 fa41 	bl	8003848 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(Back_Red_Lamp_GPIO_Port, Back_Red_Lamp_Pin, 0);
 80013c6:	2200      	movs	r2, #0
 80013c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013cc:	4809      	ldr	r0, [pc, #36]	; (80013f4 <Forward+0x5c>)
 80013ce:	f002 fa3b 	bl	8003848 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Back_Blue_Right_Lamp_GPIO_Port, Back_Blue_Right_Lamp_Pin, 0);
 80013d2:	2200      	movs	r2, #0
 80013d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013d8:	4806      	ldr	r0, [pc, #24]	; (80013f4 <Forward+0x5c>)
 80013da:	f002 fa35 	bl	8003848 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Back_Blue_Left_Lamp_GPIO_Port, Back_Blue_Left_Lamp_Pin, 0);
 80013de:	2200      	movs	r2, #0
 80013e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013e4:	4803      	ldr	r0, [pc, #12]	; (80013f4 <Forward+0x5c>)
 80013e6:	f002 fa2f 	bl	8003848 <HAL_GPIO_WritePin>
}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40020800 	.word	0x40020800
 80013f4:	40020400 	.word	0x40020400

080013f8 <Left>:

void Left()
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Right_Front_GPIO_Port, Right_Front_Pin, 1);
 80013fc:	2201      	movs	r2, #1
 80013fe:	2101      	movs	r1, #1
 8001400:	4813      	ldr	r0, [pc, #76]	; (8001450 <Left+0x58>)
 8001402:	f002 fa21 	bl	8003848 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Right_Back_GPIO_Port, Right_Back_Pin, 0);
 8001406:	2200      	movs	r2, #0
 8001408:	2102      	movs	r1, #2
 800140a:	4811      	ldr	r0, [pc, #68]	; (8001450 <Left+0x58>)
 800140c:	f002 fa1c 	bl	8003848 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Left_Front_GPIO_Port, Left_Front_Pin, 1);
 8001410:	2201      	movs	r2, #1
 8001412:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001416:	480e      	ldr	r0, [pc, #56]	; (8001450 <Left+0x58>)
 8001418:	f002 fa16 	bl	8003848 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Left_Back_GPIO_Port, Left_Back_Pin, 0);
 800141c:	2200      	movs	r2, #0
 800141e:	2140      	movs	r1, #64	; 0x40
 8001420:	480b      	ldr	r0, [pc, #44]	; (8001450 <Left+0x58>)
 8001422:	f002 fa11 	bl	8003848 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(Back_Red_Lamp_GPIO_Port, Back_Red_Lamp_Pin, 0);
 8001426:	2200      	movs	r2, #0
 8001428:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800142c:	4809      	ldr	r0, [pc, #36]	; (8001454 <Left+0x5c>)
 800142e:	f002 fa0b 	bl	8003848 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Back_Blue_Right_Lamp_GPIO_Port, Back_Blue_Right_Lamp_Pin, 1);
 8001432:	2201      	movs	r2, #1
 8001434:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001438:	4806      	ldr	r0, [pc, #24]	; (8001454 <Left+0x5c>)
 800143a:	f002 fa05 	bl	8003848 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Back_Blue_Left_Lamp_GPIO_Port, Back_Blue_Left_Lamp_Pin, 0);
 800143e:	2200      	movs	r2, #0
 8001440:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001444:	4803      	ldr	r0, [pc, #12]	; (8001454 <Left+0x5c>)
 8001446:	f002 f9ff 	bl	8003848 <HAL_GPIO_WritePin>
}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40020800 	.word	0x40020800
 8001454:	40020400 	.word	0x40020400

08001458 <Right>:

void Right()
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Right_Front_GPIO_Port, Right_Front_Pin, 0);
 800145c:	2200      	movs	r2, #0
 800145e:	2101      	movs	r1, #1
 8001460:	4813      	ldr	r0, [pc, #76]	; (80014b0 <Right+0x58>)
 8001462:	f002 f9f1 	bl	8003848 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Right_Back_GPIO_Port, Right_Back_Pin, 1);
 8001466:	2201      	movs	r2, #1
 8001468:	2102      	movs	r1, #2
 800146a:	4811      	ldr	r0, [pc, #68]	; (80014b0 <Right+0x58>)
 800146c:	f002 f9ec 	bl	8003848 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Left_Front_GPIO_Port, Left_Front_Pin, 0);
 8001470:	2200      	movs	r2, #0
 8001472:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001476:	480e      	ldr	r0, [pc, #56]	; (80014b0 <Right+0x58>)
 8001478:	f002 f9e6 	bl	8003848 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Left_Back_GPIO_Port, Left_Back_Pin, 1);
 800147c:	2201      	movs	r2, #1
 800147e:	2140      	movs	r1, #64	; 0x40
 8001480:	480b      	ldr	r0, [pc, #44]	; (80014b0 <Right+0x58>)
 8001482:	f002 f9e1 	bl	8003848 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(Back_Red_Lamp_GPIO_Port, Back_Red_Lamp_Pin, 0);
 8001486:	2200      	movs	r2, #0
 8001488:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800148c:	4809      	ldr	r0, [pc, #36]	; (80014b4 <Right+0x5c>)
 800148e:	f002 f9db 	bl	8003848 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Back_Blue_Right_Lamp_GPIO_Port, Back_Blue_Right_Lamp_Pin, 0);
 8001492:	2200      	movs	r2, #0
 8001494:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001498:	4806      	ldr	r0, [pc, #24]	; (80014b4 <Right+0x5c>)
 800149a:	f002 f9d5 	bl	8003848 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Back_Blue_Left_Lamp_GPIO_Port, Back_Blue_Left_Lamp_Pin, 1);
 800149e:	2201      	movs	r2, #1
 80014a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014a4:	4803      	ldr	r0, [pc, #12]	; (80014b4 <Right+0x5c>)
 80014a6:	f002 f9cf 	bl	8003848 <HAL_GPIO_WritePin>
}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40020800 	.word	0x40020800
 80014b4:	40020400 	.word	0x40020400

080014b8 <Backward>:

void Backward()
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Right_Front_GPIO_Port, Right_Front_Pin, 0);
 80014bc:	2200      	movs	r2, #0
 80014be:	2101      	movs	r1, #1
 80014c0:	4810      	ldr	r0, [pc, #64]	; (8001504 <Backward+0x4c>)
 80014c2:	f002 f9c1 	bl	8003848 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Right_Back_GPIO_Port, Right_Back_Pin, 1);
 80014c6:	2201      	movs	r2, #1
 80014c8:	2102      	movs	r1, #2
 80014ca:	480e      	ldr	r0, [pc, #56]	; (8001504 <Backward+0x4c>)
 80014cc:	f002 f9bc 	bl	8003848 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Left_Front_GPIO_Port, Left_Front_Pin, 1);
 80014d0:	2201      	movs	r2, #1
 80014d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014d6:	480b      	ldr	r0, [pc, #44]	; (8001504 <Backward+0x4c>)
 80014d8:	f002 f9b6 	bl	8003848 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Left_Back_GPIO_Port, Left_Back_Pin, 0);
 80014dc:	2200      	movs	r2, #0
 80014de:	2140      	movs	r1, #64	; 0x40
 80014e0:	4808      	ldr	r0, [pc, #32]	; (8001504 <Backward+0x4c>)
 80014e2:	f002 f9b1 	bl	8003848 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(Back_Blue_Right_Lamp_GPIO_Port, Back_Blue_Right_Lamp_Pin, 1);
 80014e6:	2201      	movs	r2, #1
 80014e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014ec:	4806      	ldr	r0, [pc, #24]	; (8001508 <Backward+0x50>)
 80014ee:	f002 f9ab 	bl	8003848 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Back_Blue_Left_Lamp_GPIO_Port, Back_Blue_Left_Lamp_Pin, 1);
 80014f2:	2201      	movs	r2, #1
 80014f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014f8:	4803      	ldr	r0, [pc, #12]	; (8001508 <Backward+0x50>)
 80014fa:	f002 f9a5 	bl	8003848 <HAL_GPIO_WritePin>
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	40020800 	.word	0x40020800
 8001508:	40020400 	.word	0x40020400

0800150c <Stop>:

void Stop()
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Right_Front_GPIO_Port, Right_Front_Pin, 0);
 8001510:	2200      	movs	r2, #0
 8001512:	2101      	movs	r1, #1
 8001514:	4813      	ldr	r0, [pc, #76]	; (8001564 <Stop+0x58>)
 8001516:	f002 f997 	bl	8003848 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Right_Back_GPIO_Port, Right_Back_Pin, 0);
 800151a:	2200      	movs	r2, #0
 800151c:	2102      	movs	r1, #2
 800151e:	4811      	ldr	r0, [pc, #68]	; (8001564 <Stop+0x58>)
 8001520:	f002 f992 	bl	8003848 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Left_Front_GPIO_Port, Left_Front_Pin, 0);
 8001524:	2200      	movs	r2, #0
 8001526:	f44f 7180 	mov.w	r1, #256	; 0x100
 800152a:	480e      	ldr	r0, [pc, #56]	; (8001564 <Stop+0x58>)
 800152c:	f002 f98c 	bl	8003848 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Left_Back_GPIO_Port, Left_Back_Pin, 0);
 8001530:	2200      	movs	r2, #0
 8001532:	2140      	movs	r1, #64	; 0x40
 8001534:	480b      	ldr	r0, [pc, #44]	; (8001564 <Stop+0x58>)
 8001536:	f002 f987 	bl	8003848 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(Back_Red_Lamp_GPIO_Port, Back_Red_Lamp_Pin, 1);
 800153a:	2201      	movs	r2, #1
 800153c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001540:	4809      	ldr	r0, [pc, #36]	; (8001568 <Stop+0x5c>)
 8001542:	f002 f981 	bl	8003848 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Back_Blue_Right_Lamp_GPIO_Port, Back_Blue_Right_Lamp_Pin, 0);
 8001546:	2200      	movs	r2, #0
 8001548:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800154c:	4806      	ldr	r0, [pc, #24]	; (8001568 <Stop+0x5c>)
 800154e:	f002 f97b 	bl	8003848 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Back_Blue_Left_Lamp_GPIO_Port, Back_Blue_Left_Lamp_Pin, 0);
 8001552:	2200      	movs	r2, #0
 8001554:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001558:	4803      	ldr	r0, [pc, #12]	; (8001568 <Stop+0x5c>)
 800155a:	f002 f975 	bl	8003848 <HAL_GPIO_WritePin>
}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	40020800 	.word	0x40020800
 8001568:	40020400 	.word	0x40020400

0800156c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	607b      	str	r3, [r7, #4]
 8001576:	4b12      	ldr	r3, [pc, #72]	; (80015c0 <HAL_MspInit+0x54>)
 8001578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157a:	4a11      	ldr	r2, [pc, #68]	; (80015c0 <HAL_MspInit+0x54>)
 800157c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001580:	6453      	str	r3, [r2, #68]	; 0x44
 8001582:	4b0f      	ldr	r3, [pc, #60]	; (80015c0 <HAL_MspInit+0x54>)
 8001584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001586:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800158a:	607b      	str	r3, [r7, #4]
 800158c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	603b      	str	r3, [r7, #0]
 8001592:	4b0b      	ldr	r3, [pc, #44]	; (80015c0 <HAL_MspInit+0x54>)
 8001594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001596:	4a0a      	ldr	r2, [pc, #40]	; (80015c0 <HAL_MspInit+0x54>)
 8001598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800159c:	6413      	str	r3, [r2, #64]	; 0x40
 800159e:	4b08      	ldr	r3, [pc, #32]	; (80015c0 <HAL_MspInit+0x54>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a6:	603b      	str	r3, [r7, #0]
 80015a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80015aa:	2200      	movs	r2, #0
 80015ac:	210f      	movs	r1, #15
 80015ae:	f06f 0001 	mvn.w	r0, #1
 80015b2:	f001 fc13 	bl	8002ddc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015b6:	bf00      	nop
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40023800 	.word	0x40023800

080015c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b08c      	sub	sp, #48	; 0x30
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80015cc:	2300      	movs	r3, #0
 80015ce:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80015d0:	2300      	movs	r3, #0
 80015d2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80015d4:	2300      	movs	r3, #0
 80015d6:	60bb      	str	r3, [r7, #8]
 80015d8:	4b2e      	ldr	r3, [pc, #184]	; (8001694 <HAL_InitTick+0xd0>)
 80015da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015dc:	4a2d      	ldr	r2, [pc, #180]	; (8001694 <HAL_InitTick+0xd0>)
 80015de:	f043 0301 	orr.w	r3, r3, #1
 80015e2:	6453      	str	r3, [r2, #68]	; 0x44
 80015e4:	4b2b      	ldr	r3, [pc, #172]	; (8001694 <HAL_InitTick+0xd0>)
 80015e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e8:	f003 0301 	and.w	r3, r3, #1
 80015ec:	60bb      	str	r3, [r7, #8]
 80015ee:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015f0:	f107 020c 	add.w	r2, r7, #12
 80015f4:	f107 0310 	add.w	r3, r7, #16
 80015f8:	4611      	mov	r1, r2
 80015fa:	4618      	mov	r0, r3
 80015fc:	f003 fa22 	bl	8004a44 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001600:	f003 fa0c 	bl	8004a1c <HAL_RCC_GetPCLK2Freq>
 8001604:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001608:	4a23      	ldr	r2, [pc, #140]	; (8001698 <HAL_InitTick+0xd4>)
 800160a:	fba2 2303 	umull	r2, r3, r2, r3
 800160e:	0c9b      	lsrs	r3, r3, #18
 8001610:	3b01      	subs	r3, #1
 8001612:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001614:	4b21      	ldr	r3, [pc, #132]	; (800169c <HAL_InitTick+0xd8>)
 8001616:	4a22      	ldr	r2, [pc, #136]	; (80016a0 <HAL_InitTick+0xdc>)
 8001618:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800161a:	4b20      	ldr	r3, [pc, #128]	; (800169c <HAL_InitTick+0xd8>)
 800161c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001620:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001622:	4a1e      	ldr	r2, [pc, #120]	; (800169c <HAL_InitTick+0xd8>)
 8001624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001626:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001628:	4b1c      	ldr	r3, [pc, #112]	; (800169c <HAL_InitTick+0xd8>)
 800162a:	2200      	movs	r2, #0
 800162c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800162e:	4b1b      	ldr	r3, [pc, #108]	; (800169c <HAL_InitTick+0xd8>)
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001634:	4b19      	ldr	r3, [pc, #100]	; (800169c <HAL_InitTick+0xd8>)
 8001636:	2200      	movs	r2, #0
 8001638:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800163a:	4818      	ldr	r0, [pc, #96]	; (800169c <HAL_InitTick+0xd8>)
 800163c:	f003 fa34 	bl	8004aa8 <HAL_TIM_Base_Init>
 8001640:	4603      	mov	r3, r0
 8001642:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001646:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800164a:	2b00      	cmp	r3, #0
 800164c:	d11b      	bne.n	8001686 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800164e:	4813      	ldr	r0, [pc, #76]	; (800169c <HAL_InitTick+0xd8>)
 8001650:	f003 fa7a 	bl	8004b48 <HAL_TIM_Base_Start_IT>
 8001654:	4603      	mov	r3, r0
 8001656:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800165a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800165e:	2b00      	cmp	r3, #0
 8001660:	d111      	bne.n	8001686 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001662:	2019      	movs	r0, #25
 8001664:	f001 fbd6 	bl	8002e14 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2b0f      	cmp	r3, #15
 800166c:	d808      	bhi.n	8001680 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800166e:	2200      	movs	r2, #0
 8001670:	6879      	ldr	r1, [r7, #4]
 8001672:	2019      	movs	r0, #25
 8001674:	f001 fbb2 	bl	8002ddc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001678:	4a0a      	ldr	r2, [pc, #40]	; (80016a4 <HAL_InitTick+0xe0>)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6013      	str	r3, [r2, #0]
 800167e:	e002      	b.n	8001686 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001686:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800168a:	4618      	mov	r0, r3
 800168c:	3730      	adds	r7, #48	; 0x30
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40023800 	.word	0x40023800
 8001698:	431bde83 	.word	0x431bde83
 800169c:	2000045c 	.word	0x2000045c
 80016a0:	40010000 	.word	0x40010000
 80016a4:	20000004 	.word	0x20000004

080016a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016ac:	e7fe      	b.n	80016ac <NMI_Handler+0x4>

080016ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ae:	b480      	push	{r7}
 80016b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016b2:	e7fe      	b.n	80016b2 <HardFault_Handler+0x4>

080016b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016b8:	e7fe      	b.n	80016b8 <MemManage_Handler+0x4>

080016ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ba:	b480      	push	{r7}
 80016bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016be:	e7fe      	b.n	80016be <BusFault_Handler+0x4>

080016c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016c4:	e7fe      	b.n	80016c4 <UsageFault_Handler+0x4>

080016c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016c6:	b480      	push	{r7}
 80016c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016ca:	bf00      	nop
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80016d8:	4803      	ldr	r0, [pc, #12]	; (80016e8 <TIM1_UP_TIM10_IRQHandler+0x14>)
 80016da:	f003 fd15 	bl	8005108 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 80016de:	4803      	ldr	r0, [pc, #12]	; (80016ec <TIM1_UP_TIM10_IRQHandler+0x18>)
 80016e0:	f003 fd12 	bl	8005108 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80016e4:	bf00      	nop
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	2000045c 	.word	0x2000045c
 80016ec:	200004f0 	.word	0x200004f0

080016f0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80016f4:	4802      	ldr	r0, [pc, #8]	; (8001700 <TIM3_IRQHandler+0x10>)
 80016f6:	f003 fd07 	bl	8005108 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	200004a8 	.word	0x200004a8

08001704 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001708:	4802      	ldr	r0, [pc, #8]	; (8001714 <DMA1_Stream7_IRQHandler+0x10>)
 800170a:	f001 fc97 	bl	800303c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	20000698 	.word	0x20000698

08001718 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800171c:	4802      	ldr	r0, [pc, #8]	; (8001728 <DMA2_Stream0_IRQHandler+0x10>)
 800171e:	f001 fc8d 	bl	800303c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001722:	bf00      	nop
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	200000f0 	.word	0x200000f0

0800172c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001730:	4802      	ldr	r0, [pc, #8]	; (800173c <DMA2_Stream2_IRQHandler+0x10>)
 8001732:	f001 fc83 	bl	800303c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	20000638 	.word	0x20000638

08001740 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]
 8001750:	e00a      	b.n	8001768 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001752:	f7ff fa65 	bl	8000c20 <__io_getchar>
 8001756:	4601      	mov	r1, r0
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	1c5a      	adds	r2, r3, #1
 800175c:	60ba      	str	r2, [r7, #8]
 800175e:	b2ca      	uxtb	r2, r1
 8001760:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	3301      	adds	r3, #1
 8001766:	617b      	str	r3, [r7, #20]
 8001768:	697a      	ldr	r2, [r7, #20]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	429a      	cmp	r2, r3
 800176e:	dbf0      	blt.n	8001752 <_read+0x12>
  }

  return len;
 8001770:	687b      	ldr	r3, [r7, #4]
}
 8001772:	4618      	mov	r0, r3
 8001774:	3718      	adds	r7, #24
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	b086      	sub	sp, #24
 800177e:	af00      	add	r7, sp, #0
 8001780:	60f8      	str	r0, [r7, #12]
 8001782:	60b9      	str	r1, [r7, #8]
 8001784:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001786:	2300      	movs	r3, #0
 8001788:	617b      	str	r3, [r7, #20]
 800178a:	e009      	b.n	80017a0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	1c5a      	adds	r2, r3, #1
 8001790:	60ba      	str	r2, [r7, #8]
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff fa31 	bl	8000bfc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	3301      	adds	r3, #1
 800179e:	617b      	str	r3, [r7, #20]
 80017a0:	697a      	ldr	r2, [r7, #20]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	dbf1      	blt.n	800178c <_write+0x12>
  }
  return len;
 80017a8:	687b      	ldr	r3, [r7, #4]
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3718      	adds	r7, #24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <_close>:

int _close(int file)
{
 80017b2:	b480      	push	{r7}
 80017b4:	b083      	sub	sp, #12
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017be:	4618      	mov	r0, r3
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017ca:	b480      	push	{r7}
 80017cc:	b083      	sub	sp, #12
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
 80017d2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017da:	605a      	str	r2, [r3, #4]
  return 0;
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr

080017ea <_isatty>:

int _isatty(int file)
{
 80017ea:	b480      	push	{r7}
 80017ec:	b083      	sub	sp, #12
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017f2:	2301      	movs	r3, #1
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001800:	b480      	push	{r7}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3714      	adds	r7, #20
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
	...

0800181c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001824:	4a14      	ldr	r2, [pc, #80]	; (8001878 <_sbrk+0x5c>)
 8001826:	4b15      	ldr	r3, [pc, #84]	; (800187c <_sbrk+0x60>)
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001830:	4b13      	ldr	r3, [pc, #76]	; (8001880 <_sbrk+0x64>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d102      	bne.n	800183e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001838:	4b11      	ldr	r3, [pc, #68]	; (8001880 <_sbrk+0x64>)
 800183a:	4a12      	ldr	r2, [pc, #72]	; (8001884 <_sbrk+0x68>)
 800183c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800183e:	4b10      	ldr	r3, [pc, #64]	; (8001880 <_sbrk+0x64>)
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4413      	add	r3, r2
 8001846:	693a      	ldr	r2, [r7, #16]
 8001848:	429a      	cmp	r2, r3
 800184a:	d207      	bcs.n	800185c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800184c:	f007 f868 	bl	8008920 <__errno>
 8001850:	4603      	mov	r3, r0
 8001852:	220c      	movs	r2, #12
 8001854:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001856:	f04f 33ff 	mov.w	r3, #4294967295
 800185a:	e009      	b.n	8001870 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800185c:	4b08      	ldr	r3, [pc, #32]	; (8001880 <_sbrk+0x64>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001862:	4b07      	ldr	r3, [pc, #28]	; (8001880 <_sbrk+0x64>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4413      	add	r3, r2
 800186a:	4a05      	ldr	r2, [pc, #20]	; (8001880 <_sbrk+0x64>)
 800186c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800186e:	68fb      	ldr	r3, [r7, #12]
}
 8001870:	4618      	mov	r0, r3
 8001872:	3718      	adds	r7, #24
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	20020000 	.word	0x20020000
 800187c:	00000400 	.word	0x00000400
 8001880:	200004a4 	.word	0x200004a4
 8001884:	200045a0 	.word	0x200045a0

08001888 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800188c:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <SystemInit+0x20>)
 800188e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001892:	4a05      	ldr	r2, [pc, #20]	; (80018a8 <SystemInit+0x20>)
 8001894:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001898:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	e000ed00 	.word	0xe000ed00

080018ac <MX_TIM3_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b08a      	sub	sp, #40	; 0x28
 80018b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018b2:	f107 0318 	add.w	r3, r7, #24
 80018b6:	2200      	movs	r2, #0
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	605a      	str	r2, [r3, #4]
 80018bc:	609a      	str	r2, [r3, #8]
 80018be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018c0:	f107 0310 	add.w	r3, r7, #16
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80018ca:	463b      	mov	r3, r7
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	605a      	str	r2, [r3, #4]
 80018d2:	609a      	str	r2, [r3, #8]
 80018d4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80018d6:	4b37      	ldr	r3, [pc, #220]	; (80019b4 <MX_TIM3_Init+0x108>)
 80018d8:	4a37      	ldr	r2, [pc, #220]	; (80019b8 <MX_TIM3_Init+0x10c>)
 80018da:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 80018dc:	4b35      	ldr	r3, [pc, #212]	; (80019b4 <MX_TIM3_Init+0x108>)
 80018de:	2263      	movs	r2, #99	; 0x63
 80018e0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018e2:	4b34      	ldr	r3, [pc, #208]	; (80019b4 <MX_TIM3_Init+0x108>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80018e8:	4b32      	ldr	r3, [pc, #200]	; (80019b4 <MX_TIM3_Init+0x108>)
 80018ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018ee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018f0:	4b30      	ldr	r3, [pc, #192]	; (80019b4 <MX_TIM3_Init+0x108>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018f6:	4b2f      	ldr	r3, [pc, #188]	; (80019b4 <MX_TIM3_Init+0x108>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80018fc:	482d      	ldr	r0, [pc, #180]	; (80019b4 <MX_TIM3_Init+0x108>)
 80018fe:	f003 f8d3 	bl	8004aa8 <HAL_TIM_Base_Init>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8001908:	f7ff fcb0 	bl	800126c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800190c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001910:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001912:	f107 0318 	add.w	r3, r7, #24
 8001916:	4619      	mov	r1, r3
 8001918:	4826      	ldr	r0, [pc, #152]	; (80019b4 <MX_TIM3_Init+0x108>)
 800191a:	f003 fe5b 	bl	80055d4 <HAL_TIM_ConfigClockSource>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001924:	f7ff fca2 	bl	800126c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001928:	4822      	ldr	r0, [pc, #136]	; (80019b4 <MX_TIM3_Init+0x108>)
 800192a:	f003 fa79 	bl	8004e20 <HAL_TIM_IC_Init>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001934:	f7ff fc9a 	bl	800126c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001938:	2300      	movs	r3, #0
 800193a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800193c:	2300      	movs	r3, #0
 800193e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001940:	f107 0310 	add.w	r3, r7, #16
 8001944:	4619      	mov	r1, r3
 8001946:	481b      	ldr	r0, [pc, #108]	; (80019b4 <MX_TIM3_Init+0x108>)
 8001948:	f004 fb58 	bl	8005ffc <HAL_TIMEx_MasterConfigSynchronization>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8001952:	f7ff fc8b 	bl	800126c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001956:	2300      	movs	r3, #0
 8001958:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800195a:	2301      	movs	r3, #1
 800195c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800195e:	2300      	movs	r3, #0
 8001960:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 8001962:	230f      	movs	r3, #15
 8001964:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001966:	463b      	mov	r3, r7
 8001968:	2200      	movs	r2, #0
 800196a:	4619      	mov	r1, r3
 800196c:	4811      	ldr	r0, [pc, #68]	; (80019b4 <MX_TIM3_Init+0x108>)
 800196e:	f003 fcd3 	bl	8005318 <HAL_TIM_IC_ConfigChannel>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8001978:	f7ff fc78 	bl	800126c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800197c:	463b      	mov	r3, r7
 800197e:	2204      	movs	r2, #4
 8001980:	4619      	mov	r1, r3
 8001982:	480c      	ldr	r0, [pc, #48]	; (80019b4 <MX_TIM3_Init+0x108>)
 8001984:	f003 fcc8 	bl	8005318 <HAL_TIM_IC_ConfigChannel>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 800198e:	f7ff fc6d 	bl	800126c <Error_Handler>
  }
  sConfigIC.ICFilter = 12;
 8001992:	230c      	movs	r3, #12
 8001994:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001996:	463b      	mov	r3, r7
 8001998:	2208      	movs	r2, #8
 800199a:	4619      	mov	r1, r3
 800199c:	4805      	ldr	r0, [pc, #20]	; (80019b4 <MX_TIM3_Init+0x108>)
 800199e:	f003 fcbb 	bl	8005318 <HAL_TIM_IC_ConfigChannel>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <MX_TIM3_Init+0x100>
  {
    Error_Handler();
 80019a8:	f7ff fc60 	bl	800126c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80019ac:	bf00      	nop
 80019ae:	3728      	adds	r7, #40	; 0x28
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	200004a8 	.word	0x200004a8
 80019b8:	40000400 	.word	0x40000400

080019bc <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b088      	sub	sp, #32
 80019c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80019c2:	1d3b      	adds	r3, r7, #4
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	605a      	str	r2, [r3, #4]
 80019ca:	609a      	str	r2, [r3, #8]
 80019cc:	60da      	str	r2, [r3, #12]
 80019ce:	611a      	str	r2, [r3, #16]
 80019d0:	615a      	str	r2, [r3, #20]
 80019d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80019d4:	4b1d      	ldr	r3, [pc, #116]	; (8001a4c <MX_TIM10_Init+0x90>)
 80019d6:	4a1e      	ldr	r2, [pc, #120]	; (8001a50 <MX_TIM10_Init+0x94>)
 80019d8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 100-1;
 80019da:	4b1c      	ldr	r3, [pc, #112]	; (8001a4c <MX_TIM10_Init+0x90>)
 80019dc:	2263      	movs	r2, #99	; 0x63
 80019de:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019e0:	4b1a      	ldr	r3, [pc, #104]	; (8001a4c <MX_TIM10_Init+0x90>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 100-1;
 80019e6:	4b19      	ldr	r3, [pc, #100]	; (8001a4c <MX_TIM10_Init+0x90>)
 80019e8:	2263      	movs	r2, #99	; 0x63
 80019ea:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ec:	4b17      	ldr	r3, [pc, #92]	; (8001a4c <MX_TIM10_Init+0x90>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019f2:	4b16      	ldr	r3, [pc, #88]	; (8001a4c <MX_TIM10_Init+0x90>)
 80019f4:	2280      	movs	r2, #128	; 0x80
 80019f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80019f8:	4814      	ldr	r0, [pc, #80]	; (8001a4c <MX_TIM10_Init+0x90>)
 80019fa:	f003 f855 	bl	8004aa8 <HAL_TIM_Base_Init>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <MX_TIM10_Init+0x4c>
  {
    Error_Handler();
 8001a04:	f7ff fc32 	bl	800126c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8001a08:	4810      	ldr	r0, [pc, #64]	; (8001a4c <MX_TIM10_Init+0x90>)
 8001a0a:	f003 f8ff 	bl	8004c0c <HAL_TIM_PWM_Init>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <MX_TIM10_Init+0x5c>
  {
    Error_Handler();
 8001a14:	f7ff fc2a 	bl	800126c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a18:	2360      	movs	r3, #96	; 0x60
 8001a1a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a20:	2300      	movs	r3, #0
 8001a22:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a24:	2300      	movs	r3, #0
 8001a26:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a28:	1d3b      	adds	r3, r7, #4
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4807      	ldr	r0, [pc, #28]	; (8001a4c <MX_TIM10_Init+0x90>)
 8001a30:	f003 fd0e 	bl	8005450 <HAL_TIM_PWM_ConfigChannel>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <MX_TIM10_Init+0x82>
  {
    Error_Handler();
 8001a3a:	f7ff fc17 	bl	800126c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8001a3e:	4803      	ldr	r0, [pc, #12]	; (8001a4c <MX_TIM10_Init+0x90>)
 8001a40:	f000 f8f8 	bl	8001c34 <HAL_TIM_MspPostInit>

}
 8001a44:	bf00      	nop
 8001a46:	3720      	adds	r7, #32
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	200004f0 	.word	0x200004f0
 8001a50:	40014400 	.word	0x40014400

08001a54 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b088      	sub	sp, #32
 8001a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a5a:	1d3b      	adds	r3, r7, #4
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	60da      	str	r2, [r3, #12]
 8001a66:	611a      	str	r2, [r3, #16]
 8001a68:	615a      	str	r2, [r3, #20]
 8001a6a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001a6c:	4b1d      	ldr	r3, [pc, #116]	; (8001ae4 <MX_TIM11_Init+0x90>)
 8001a6e:	4a1e      	ldr	r2, [pc, #120]	; (8001ae8 <MX_TIM11_Init+0x94>)
 8001a70:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 100-1;
 8001a72:	4b1c      	ldr	r3, [pc, #112]	; (8001ae4 <MX_TIM11_Init+0x90>)
 8001a74:	2263      	movs	r2, #99	; 0x63
 8001a76:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a78:	4b1a      	ldr	r3, [pc, #104]	; (8001ae4 <MX_TIM11_Init+0x90>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 100-1;
 8001a7e:	4b19      	ldr	r3, [pc, #100]	; (8001ae4 <MX_TIM11_Init+0x90>)
 8001a80:	2263      	movs	r2, #99	; 0x63
 8001a82:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a84:	4b17      	ldr	r3, [pc, #92]	; (8001ae4 <MX_TIM11_Init+0x90>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a8a:	4b16      	ldr	r3, [pc, #88]	; (8001ae4 <MX_TIM11_Init+0x90>)
 8001a8c:	2280      	movs	r2, #128	; 0x80
 8001a8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001a90:	4814      	ldr	r0, [pc, #80]	; (8001ae4 <MX_TIM11_Init+0x90>)
 8001a92:	f003 f809 	bl	8004aa8 <HAL_TIM_Base_Init>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_TIM11_Init+0x4c>
  {
    Error_Handler();
 8001a9c:	f7ff fbe6 	bl	800126c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8001aa0:	4810      	ldr	r0, [pc, #64]	; (8001ae4 <MX_TIM11_Init+0x90>)
 8001aa2:	f003 f8b3 	bl	8004c0c <HAL_TIM_PWM_Init>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_TIM11_Init+0x5c>
  {
    Error_Handler();
 8001aac:	f7ff fbde 	bl	800126c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ab0:	2360      	movs	r3, #96	; 0x60
 8001ab2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001abc:	2300      	movs	r3, #0
 8001abe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ac0:	1d3b      	adds	r3, r7, #4
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	4807      	ldr	r0, [pc, #28]	; (8001ae4 <MX_TIM11_Init+0x90>)
 8001ac8:	f003 fcc2 	bl	8005450 <HAL_TIM_PWM_ConfigChannel>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <MX_TIM11_Init+0x82>
  {
    Error_Handler();
 8001ad2:	f7ff fbcb 	bl	800126c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8001ad6:	4803      	ldr	r0, [pc, #12]	; (8001ae4 <MX_TIM11_Init+0x90>)
 8001ad8:	f000 f8ac 	bl	8001c34 <HAL_TIM_MspPostInit>

}
 8001adc:	bf00      	nop
 8001ade:	3720      	adds	r7, #32
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	20000538 	.word	0x20000538
 8001ae8:	40014800 	.word	0x40014800

08001aec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b08c      	sub	sp, #48	; 0x30
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af4:	f107 031c 	add.w	r3, r7, #28
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	609a      	str	r2, [r3, #8]
 8001b00:	60da      	str	r2, [r3, #12]
 8001b02:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a44      	ldr	r2, [pc, #272]	; (8001c1c <HAL_TIM_Base_MspInit+0x130>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d152      	bne.n	8001bb4 <HAL_TIM_Base_MspInit+0xc8>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	61bb      	str	r3, [r7, #24]
 8001b12:	4b43      	ldr	r3, [pc, #268]	; (8001c20 <HAL_TIM_Base_MspInit+0x134>)
 8001b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b16:	4a42      	ldr	r2, [pc, #264]	; (8001c20 <HAL_TIM_Base_MspInit+0x134>)
 8001b18:	f043 0302 	orr.w	r3, r3, #2
 8001b1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b1e:	4b40      	ldr	r3, [pc, #256]	; (8001c20 <HAL_TIM_Base_MspInit+0x134>)
 8001b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	61bb      	str	r3, [r7, #24]
 8001b28:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	617b      	str	r3, [r7, #20]
 8001b2e:	4b3c      	ldr	r3, [pc, #240]	; (8001c20 <HAL_TIM_Base_MspInit+0x134>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	4a3b      	ldr	r2, [pc, #236]	; (8001c20 <HAL_TIM_Base_MspInit+0x134>)
 8001b34:	f043 0301 	orr.w	r3, r3, #1
 8001b38:	6313      	str	r3, [r2, #48]	; 0x30
 8001b3a:	4b39      	ldr	r3, [pc, #228]	; (8001c20 <HAL_TIM_Base_MspInit+0x134>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	617b      	str	r3, [r7, #20]
 8001b44:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	613b      	str	r3, [r7, #16]
 8001b4a:	4b35      	ldr	r3, [pc, #212]	; (8001c20 <HAL_TIM_Base_MspInit+0x134>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4e:	4a34      	ldr	r2, [pc, #208]	; (8001c20 <HAL_TIM_Base_MspInit+0x134>)
 8001b50:	f043 0302 	orr.w	r3, r3, #2
 8001b54:	6313      	str	r3, [r2, #48]	; 0x30
 8001b56:	4b32      	ldr	r3, [pc, #200]	; (8001c20 <HAL_TIM_Base_MspInit+0x134>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	613b      	str	r3, [r7, #16]
 8001b60:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b62:	23c0      	movs	r3, #192	; 0xc0
 8001b64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b66:	2302      	movs	r3, #2
 8001b68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b72:	2302      	movs	r3, #2
 8001b74:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b76:	f107 031c 	add.w	r3, r7, #28
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4829      	ldr	r0, [pc, #164]	; (8001c24 <HAL_TIM_Base_MspInit+0x138>)
 8001b7e:	f001 fcc7 	bl	8003510 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b82:	2301      	movs	r3, #1
 8001b84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b86:	2302      	movs	r3, #2
 8001b88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b92:	2302      	movs	r3, #2
 8001b94:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b96:	f107 031c 	add.w	r3, r7, #28
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4822      	ldr	r0, [pc, #136]	; (8001c28 <HAL_TIM_Base_MspInit+0x13c>)
 8001b9e:	f001 fcb7 	bl	8003510 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	2105      	movs	r1, #5
 8001ba6:	201d      	movs	r0, #29
 8001ba8:	f001 f918 	bl	8002ddc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001bac:	201d      	movs	r0, #29
 8001bae:	f001 f931 	bl	8002e14 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8001bb2:	e02e      	b.n	8001c12 <HAL_TIM_Base_MspInit+0x126>
  else if(tim_baseHandle->Instance==TIM10)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a1c      	ldr	r2, [pc, #112]	; (8001c2c <HAL_TIM_Base_MspInit+0x140>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d116      	bne.n	8001bec <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60fb      	str	r3, [r7, #12]
 8001bc2:	4b17      	ldr	r3, [pc, #92]	; (8001c20 <HAL_TIM_Base_MspInit+0x134>)
 8001bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc6:	4a16      	ldr	r2, [pc, #88]	; (8001c20 <HAL_TIM_Base_MspInit+0x134>)
 8001bc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bcc:	6453      	str	r3, [r2, #68]	; 0x44
 8001bce:	4b14      	ldr	r3, [pc, #80]	; (8001c20 <HAL_TIM_Base_MspInit+0x134>)
 8001bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd6:	60fb      	str	r3, [r7, #12]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 15, 0);
 8001bda:	2200      	movs	r2, #0
 8001bdc:	210f      	movs	r1, #15
 8001bde:	2019      	movs	r0, #25
 8001be0:	f001 f8fc 	bl	8002ddc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001be4:	2019      	movs	r0, #25
 8001be6:	f001 f915 	bl	8002e14 <HAL_NVIC_EnableIRQ>
}
 8001bea:	e012      	b.n	8001c12 <HAL_TIM_Base_MspInit+0x126>
  else if(tim_baseHandle->Instance==TIM11)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a0f      	ldr	r2, [pc, #60]	; (8001c30 <HAL_TIM_Base_MspInit+0x144>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d10d      	bne.n	8001c12 <HAL_TIM_Base_MspInit+0x126>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60bb      	str	r3, [r7, #8]
 8001bfa:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <HAL_TIM_Base_MspInit+0x134>)
 8001bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfe:	4a08      	ldr	r2, [pc, #32]	; (8001c20 <HAL_TIM_Base_MspInit+0x134>)
 8001c00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c04:	6453      	str	r3, [r2, #68]	; 0x44
 8001c06:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <HAL_TIM_Base_MspInit+0x134>)
 8001c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c0e:	60bb      	str	r3, [r7, #8]
 8001c10:	68bb      	ldr	r3, [r7, #8]
}
 8001c12:	bf00      	nop
 8001c14:	3730      	adds	r7, #48	; 0x30
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40000400 	.word	0x40000400
 8001c20:	40023800 	.word	0x40023800
 8001c24:	40020000 	.word	0x40020000
 8001c28:	40020400 	.word	0x40020400
 8001c2c:	40014400 	.word	0x40014400
 8001c30:	40014800 	.word	0x40014800

08001c34 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b08a      	sub	sp, #40	; 0x28
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c3c:	f107 0314 	add.w	r3, r7, #20
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	605a      	str	r2, [r3, #4]
 8001c46:	609a      	str	r2, [r3, #8]
 8001c48:	60da      	str	r2, [r3, #12]
 8001c4a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM10)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a25      	ldr	r2, [pc, #148]	; (8001ce8 <HAL_TIM_MspPostInit+0xb4>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d11f      	bne.n	8001c96 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM10_MspPostInit 0 */

  /* USER CODE END TIM10_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	613b      	str	r3, [r7, #16]
 8001c5a:	4b24      	ldr	r3, [pc, #144]	; (8001cec <HAL_TIM_MspPostInit+0xb8>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5e:	4a23      	ldr	r2, [pc, #140]	; (8001cec <HAL_TIM_MspPostInit+0xb8>)
 8001c60:	f043 0302 	orr.w	r3, r3, #2
 8001c64:	6313      	str	r3, [r2, #48]	; 0x30
 8001c66:	4b21      	ldr	r3, [pc, #132]	; (8001cec <HAL_TIM_MspPostInit+0xb8>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	613b      	str	r3, [r7, #16]
 8001c70:	693b      	ldr	r3, [r7, #16]
    /**TIM10 GPIO Configuration
    PB8     ------> TIM10_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001c72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c78:	2302      	movs	r3, #2
 8001c7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c80:	2300      	movs	r3, #0
 8001c82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001c84:	2303      	movs	r3, #3
 8001c86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c88:	f107 0314 	add.w	r3, r7, #20
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4818      	ldr	r0, [pc, #96]	; (8001cf0 <HAL_TIM_MspPostInit+0xbc>)
 8001c90:	f001 fc3e 	bl	8003510 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8001c94:	e023      	b.n	8001cde <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM11)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a16      	ldr	r2, [pc, #88]	; (8001cf4 <HAL_TIM_MspPostInit+0xc0>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d11e      	bne.n	8001cde <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	60fb      	str	r3, [r7, #12]
 8001ca4:	4b11      	ldr	r3, [pc, #68]	; (8001cec <HAL_TIM_MspPostInit+0xb8>)
 8001ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca8:	4a10      	ldr	r2, [pc, #64]	; (8001cec <HAL_TIM_MspPostInit+0xb8>)
 8001caa:	f043 0302 	orr.w	r3, r3, #2
 8001cae:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb0:	4b0e      	ldr	r3, [pc, #56]	; (8001cec <HAL_TIM_MspPostInit+0xb8>)
 8001cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb4:	f003 0302 	and.w	r3, r3, #2
 8001cb8:	60fb      	str	r3, [r7, #12]
 8001cba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001cbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cd2:	f107 0314 	add.w	r3, r7, #20
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4805      	ldr	r0, [pc, #20]	; (8001cf0 <HAL_TIM_MspPostInit+0xbc>)
 8001cda:	f001 fc19 	bl	8003510 <HAL_GPIO_Init>
}
 8001cde:	bf00      	nop
 8001ce0:	3728      	adds	r7, #40	; 0x28
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	40014400 	.word	0x40014400
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	40020400 	.word	0x40020400
 8001cf4:	40014800 	.word	0x40014800

08001cf8 <HCSR04_Read_L>:
////	__HAL_TIM_SET_COUNTER(&htim3, 0); // reset Counter
//}


void HCSR04_Read_L(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, 1);
//	delay_us(10);
//	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, 0);
//	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC1); // Set Timer Enable
	if(ult_stg = 1)
 8001cfc:	4b0c      	ldr	r3, [pc, #48]	; (8001d30 <HCSR04_Read_L+0x38>)
 8001cfe:	2201      	movs	r2, #1
 8001d00:	701a      	strb	r2, [r3, #0]
	{
		HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, 1);
 8001d02:	2201      	movs	r2, #1
 8001d04:	2104      	movs	r1, #4
 8001d06:	480b      	ldr	r0, [pc, #44]	; (8001d34 <HCSR04_Read_L+0x3c>)
 8001d08:	f001 fd9e 	bl	8003848 <HAL_GPIO_WritePin>
		delay_us(10);
 8001d0c:	200a      	movs	r0, #10
 8001d0e:	f7fe ff1d 	bl	8000b4c <delay_us>
		HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, 0);
 8001d12:	2200      	movs	r2, #0
 8001d14:	2104      	movs	r1, #4
 8001d16:	4807      	ldr	r0, [pc, #28]	; (8001d34 <HCSR04_Read_L+0x3c>)
 8001d18:	f001 fd96 	bl	8003848 <HAL_GPIO_WritePin>
		__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC1); // Set Timer Enable
 8001d1c:	4b06      	ldr	r3, [pc, #24]	; (8001d38 <HCSR04_Read_L+0x40>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	68da      	ldr	r2, [r3, #12]
 8001d22:	4b05      	ldr	r3, [pc, #20]	; (8001d38 <HCSR04_Read_L+0x40>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f042 0202 	orr.w	r2, r2, #2
 8001d2a:	60da      	str	r2, [r3, #12]
	}
}
 8001d2c:	bf00      	nop
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	200005ae 	.word	0x200005ae
 8001d34:	40020400 	.word	0x40020400
 8001d38:	200004a8 	.word	0x200004a8

08001d3c <HCSR04_Read_M>:
void HCSR04_Read_M(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, 1);
//	delay_us(10);
//	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, 0);
//	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC2); // Set Timer Enable
	if(ult_stg = 2)
 8001d40:	4b0c      	ldr	r3, [pc, #48]	; (8001d74 <HCSR04_Read_M+0x38>)
 8001d42:	2202      	movs	r2, #2
 8001d44:	701a      	strb	r2, [r3, #0]
	{
		HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, 1);
 8001d46:	2201      	movs	r2, #1
 8001d48:	2104      	movs	r1, #4
 8001d4a:	480b      	ldr	r0, [pc, #44]	; (8001d78 <HCSR04_Read_M+0x3c>)
 8001d4c:	f001 fd7c 	bl	8003848 <HAL_GPIO_WritePin>
		delay_us(10);
 8001d50:	200a      	movs	r0, #10
 8001d52:	f7fe fefb 	bl	8000b4c <delay_us>
		HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, 0);
 8001d56:	2200      	movs	r2, #0
 8001d58:	2104      	movs	r1, #4
 8001d5a:	4807      	ldr	r0, [pc, #28]	; (8001d78 <HCSR04_Read_M+0x3c>)
 8001d5c:	f001 fd74 	bl	8003848 <HAL_GPIO_WritePin>
		__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC2); // Set Timer Enable
 8001d60:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <HCSR04_Read_M+0x40>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	68da      	ldr	r2, [r3, #12]
 8001d66:	4b05      	ldr	r3, [pc, #20]	; (8001d7c <HCSR04_Read_M+0x40>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f042 0204 	orr.w	r2, r2, #4
 8001d6e:	60da      	str	r2, [r3, #12]
	}
}
 8001d70:	bf00      	nop
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	200005ae 	.word	0x200005ae
 8001d78:	40020400 	.word	0x40020400
 8001d7c:	200004a8 	.word	0x200004a8

08001d80 <HCSR04_Read_R>:
void HCSR04_Read_R(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, 1);
//	delay_us(10);
//	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, 0);
//	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC3); // Set Timer Enable
	if(ult_stg = 3)
 8001d84:	4b0c      	ldr	r3, [pc, #48]	; (8001db8 <HCSR04_Read_R+0x38>)
 8001d86:	2203      	movs	r2, #3
 8001d88:	701a      	strb	r2, [r3, #0]
	{
		HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, 1);
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	2104      	movs	r1, #4
 8001d8e:	480b      	ldr	r0, [pc, #44]	; (8001dbc <HCSR04_Read_R+0x3c>)
 8001d90:	f001 fd5a 	bl	8003848 <HAL_GPIO_WritePin>
		delay_us(10);
 8001d94:	200a      	movs	r0, #10
 8001d96:	f7fe fed9 	bl	8000b4c <delay_us>
		HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, 0);
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	2104      	movs	r1, #4
 8001d9e:	4807      	ldr	r0, [pc, #28]	; (8001dbc <HCSR04_Read_R+0x3c>)
 8001da0:	f001 fd52 	bl	8003848 <HAL_GPIO_WritePin>
		__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC3); // Set Timer Enable
 8001da4:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <HCSR04_Read_R+0x40>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	68da      	ldr	r2, [r3, #12]
 8001daa:	4b05      	ldr	r3, [pc, #20]	; (8001dc0 <HCSR04_Read_R+0x40>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f042 0208 	orr.w	r2, r2, #8
 8001db2:	60da      	str	r2, [r3, #12]
	}
}
 8001db4:	bf00      	nop
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	200005ae 	.word	0x200005ae
 8001dbc:	40020400 	.word	0x40020400
 8001dc0:	200004a8 	.word	0x200004a8

08001dc4 <HAL_TIM_IC_CaptureCallback>:
	}
}


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
	if(ult_stg == 1)
 8001dcc:	4b89      	ldr	r3, [pc, #548]	; (8001ff4 <HAL_TIM_IC_CaptureCallback+0x230>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d170      	bne.n	8001eb6 <HAL_TIM_IC_CaptureCallback+0xf2>
	{
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) // 만약 ?��?��?��?�� ?��?�� 채널?���??????????,(?��리�? 1�?????????? 채널?�� ?��기로 ?��?��)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	7f1b      	ldrb	r3, [r3, #28]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d16c      	bne.n	8001eb6 <HAL_TIM_IC_CaptureCallback+0xf2>
	{
		if(captureFlag_L == 0) // �?????????? 번째 캡쳐�?????????? ?���?????????? ?��?��?���??????????,(Falling Edge�?????????? 발생?���?????????? ?��?��?���??????????,)
 8001ddc:	4b86      	ldr	r3, [pc, #536]	; (8001ff8 <HAL_TIM_IC_CaptureCallback+0x234>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d11a      	bne.n	8001e1a <HAL_TIM_IC_CaptureCallback+0x56>
		{
			INC_Value_L1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // �?????????? 번째 Value�?????????? ?��?��?��.
 8001de4:	2100      	movs	r1, #0
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f003 fcbc 	bl	8005764 <HAL_TIM_ReadCapturedValue>
 8001dec:	4603      	mov	r3, r0
 8001dee:	4a83      	ldr	r2, [pc, #524]	; (8001ffc <HAL_TIM_IC_CaptureCallback+0x238>)
 8001df0:	6013      	str	r3, [r2, #0]
			captureFlag_L = 1; // �?????????? 번째 캡쳐 ?���??????????
 8001df2:	4b81      	ldr	r3, [pc, #516]	; (8001ff8 <HAL_TIM_IC_CaptureCallback+0x234>)
 8001df4:	2201      	movs	r2, #1
 8001df6:	701a      	strb	r2, [r3, #0]

			// Polarity �??????????�??????????(Rising -> Falling)
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING); // Echo Falling?�� 캡쳐?��?�� ?���??????????�??????????
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	6a1a      	ldr	r2, [r3, #32]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f022 020a 	bic.w	r2, r2, #10
 8001e06:	621a      	str	r2, [r3, #32]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	6a1a      	ldr	r2, [r3, #32]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f042 0202 	orr.w	r2, r2, #2
 8001e16:	621a      	str	r2, [r3, #32]
 8001e18:	e04d      	b.n	8001eb6 <HAL_TIM_IC_CaptureCallback+0xf2>
		}
		else if(captureFlag_L == 1) // 만약 �?????????? 번�?? 캡쳐�?????????? ?���?????????? ?��료됐?���??????????,
 8001e1a:	4b77      	ldr	r3, [pc, #476]	; (8001ff8 <HAL_TIM_IC_CaptureCallback+0x234>)
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d149      	bne.n	8001eb6 <HAL_TIM_IC_CaptureCallback+0xf2>
		{
			INC_Value_L2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001e22:	2100      	movs	r1, #0
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f003 fc9d 	bl	8005764 <HAL_TIM_ReadCapturedValue>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	4a74      	ldr	r2, [pc, #464]	; (8002000 <HAL_TIM_IC_CaptureCallback+0x23c>)
 8001e2e:	6013      	str	r3, [r2, #0]
//			__HAL_TIM_SET_COUNTER(&htim3, 0); // reset Counter

			if(INC_Value_L2 > INC_Value_L1)
 8001e30:	4b73      	ldr	r3, [pc, #460]	; (8002000 <HAL_TIM_IC_CaptureCallback+0x23c>)
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	4b71      	ldr	r3, [pc, #452]	; (8001ffc <HAL_TIM_IC_CaptureCallback+0x238>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d907      	bls.n	8001e4c <HAL_TIM_IC_CaptureCallback+0x88>
			{
				echoTime_L = INC_Value_L2 - INC_Value_L1;
 8001e3c:	4b70      	ldr	r3, [pc, #448]	; (8002000 <HAL_TIM_IC_CaptureCallback+0x23c>)
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	4b6e      	ldr	r3, [pc, #440]	; (8001ffc <HAL_TIM_IC_CaptureCallback+0x238>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	4a6f      	ldr	r2, [pc, #444]	; (8002004 <HAL_TIM_IC_CaptureCallback+0x240>)
 8001e48:	6013      	str	r3, [r2, #0]
 8001e4a:	e00f      	b.n	8001e6c <HAL_TIM_IC_CaptureCallback+0xa8>
			}
			else if(INC_Value_L1 > INC_Value_L2) // 거리�?????????? ?���?????????? 길면, INC_Value2 �?????????? Overflow?��?�� count�?????????? 0?���?????????? ?�� ?��?��?��?�� INC_Value1보다 ?��?���?????????? ?�� ?��?��.
 8001e4c:	4b6b      	ldr	r3, [pc, #428]	; (8001ffc <HAL_TIM_IC_CaptureCallback+0x238>)
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	4b6b      	ldr	r3, [pc, #428]	; (8002000 <HAL_TIM_IC_CaptureCallback+0x23c>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d909      	bls.n	8001e6c <HAL_TIM_IC_CaptureCallback+0xa8>
			{
				echoTime_L = (0xffff - INC_Value_L1) + INC_Value_L2;
 8001e58:	4b69      	ldr	r3, [pc, #420]	; (8002000 <HAL_TIM_IC_CaptureCallback+0x23c>)
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	4b67      	ldr	r3, [pc, #412]	; (8001ffc <HAL_TIM_IC_CaptureCallback+0x238>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001e66:	33ff      	adds	r3, #255	; 0xff
 8001e68:	4a66      	ldr	r2, [pc, #408]	; (8002004 <HAL_TIM_IC_CaptureCallback+0x240>)
 8001e6a:	6013      	str	r3, [r2, #0]
			}
			distance_L = echoTime_L / 58;
 8001e6c:	4b65      	ldr	r3, [pc, #404]	; (8002004 <HAL_TIM_IC_CaptureCallback+0x240>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a65      	ldr	r2, [pc, #404]	; (8002008 <HAL_TIM_IC_CaptureCallback+0x244>)
 8001e72:	fba2 2303 	umull	r2, r3, r2, r3
 8001e76:	095b      	lsrs	r3, r3, #5
 8001e78:	b2da      	uxtb	r2, r3
 8001e7a:	4b64      	ldr	r3, [pc, #400]	; (800200c <HAL_TIM_IC_CaptureCallback+0x248>)
 8001e7c:	701a      	strb	r2, [r3, #0]
			captureFlag_L = 0;
 8001e7e:	4b5e      	ldr	r3, [pc, #376]	; (8001ff8 <HAL_TIM_IC_CaptureCallback+0x234>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	701a      	strb	r2, [r3, #0]

			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING); // ?��?�� Echo High�?????????? 캡쳐?��?���?????????? ?��?��
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	6a1a      	ldr	r2, [r3, #32]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f022 020a 	bic.w	r2, r2, #10
 8001e92:	621a      	str	r2, [r3, #32]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	6a12      	ldr	r2, [r2, #32]
 8001e9e:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC1);
 8001ea0:	4b5b      	ldr	r3, [pc, #364]	; (8002010 <HAL_TIM_IC_CaptureCallback+0x24c>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	68da      	ldr	r2, [r3, #12]
 8001ea6:	4b5a      	ldr	r3, [pc, #360]	; (8002010 <HAL_TIM_IC_CaptureCallback+0x24c>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f022 0202 	bic.w	r2, r2, #2
 8001eae:	60da      	str	r2, [r3, #12]
			ult_stg = 2;
 8001eb0:	4b50      	ldr	r3, [pc, #320]	; (8001ff4 <HAL_TIM_IC_CaptureCallback+0x230>)
 8001eb2:	2202      	movs	r2, #2
 8001eb4:	701a      	strb	r2, [r3, #0]
		}
	}
	}
	if(ult_stg == 2)
 8001eb6:	4b4f      	ldr	r3, [pc, #316]	; (8001ff4 <HAL_TIM_IC_CaptureCallback+0x230>)
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d170      	bne.n	8001fa0 <HAL_TIM_IC_CaptureCallback+0x1dc>
	{
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) // 만약 ?��?��?��?�� ?��?�� 채널?���??????????,(?��리�? 1�?????????? 채널?�� ?��기로 ?��?��)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	7f1b      	ldrb	r3, [r3, #28]
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d16c      	bne.n	8001fa0 <HAL_TIM_IC_CaptureCallback+0x1dc>
	{
		if(captureFlag_M == 0) // �?????????? 번째 캡쳐�?????????? ?���?????????? ?��?��?���??????????,(Falling Edge�?????????? 발생?���?????????? ?��?��?���??????????,)
 8001ec6:	4b53      	ldr	r3, [pc, #332]	; (8002014 <HAL_TIM_IC_CaptureCallback+0x250>)
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d11a      	bne.n	8001f04 <HAL_TIM_IC_CaptureCallback+0x140>
		{
			INC_Value_M1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2); // �?????????? 번째 Value�?????????? ?��?��?��.
 8001ece:	2104      	movs	r1, #4
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f003 fc47 	bl	8005764 <HAL_TIM_ReadCapturedValue>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	4a4f      	ldr	r2, [pc, #316]	; (8002018 <HAL_TIM_IC_CaptureCallback+0x254>)
 8001eda:	6013      	str	r3, [r2, #0]
			captureFlag_M = 1; // �?????????? 번째 캡쳐 ?���??????????
 8001edc:	4b4d      	ldr	r3, [pc, #308]	; (8002014 <HAL_TIM_IC_CaptureCallback+0x250>)
 8001ede:	2201      	movs	r2, #1
 8001ee0:	701a      	strb	r2, [r3, #0]

			// Polarity �??????????�??????????(Rising -> Falling)
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING); // Echo Falling?�� 캡쳐?��?�� ?���??????????�??????????
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	6a1a      	ldr	r2, [r3, #32]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001ef0:	621a      	str	r2, [r3, #32]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	6a1a      	ldr	r2, [r3, #32]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f042 0220 	orr.w	r2, r2, #32
 8001f00:	621a      	str	r2, [r3, #32]
 8001f02:	e04d      	b.n	8001fa0 <HAL_TIM_IC_CaptureCallback+0x1dc>
		}
		else if(captureFlag_M == 1) // 만약 �?????????? 번�?? 캡쳐�?????????? ?���?????????? ?��료됐?���??????????,
 8001f04:	4b43      	ldr	r3, [pc, #268]	; (8002014 <HAL_TIM_IC_CaptureCallback+0x250>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d149      	bne.n	8001fa0 <HAL_TIM_IC_CaptureCallback+0x1dc>
		{
			INC_Value_M2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8001f0c:	2104      	movs	r1, #4
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f003 fc28 	bl	8005764 <HAL_TIM_ReadCapturedValue>
 8001f14:	4603      	mov	r3, r0
 8001f16:	4a41      	ldr	r2, [pc, #260]	; (800201c <HAL_TIM_IC_CaptureCallback+0x258>)
 8001f18:	6013      	str	r3, [r2, #0]
//			__HAL_TIM_SET_COUNTER(&htim3, 0); // reset Counter

			if(INC_Value_M2 > INC_Value_M1)
 8001f1a:	4b40      	ldr	r3, [pc, #256]	; (800201c <HAL_TIM_IC_CaptureCallback+0x258>)
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	4b3e      	ldr	r3, [pc, #248]	; (8002018 <HAL_TIM_IC_CaptureCallback+0x254>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d907      	bls.n	8001f36 <HAL_TIM_IC_CaptureCallback+0x172>
			{
				echoTime_M = INC_Value_M2 - INC_Value_M1;
 8001f26:	4b3d      	ldr	r3, [pc, #244]	; (800201c <HAL_TIM_IC_CaptureCallback+0x258>)
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	4b3b      	ldr	r3, [pc, #236]	; (8002018 <HAL_TIM_IC_CaptureCallback+0x254>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	4a3b      	ldr	r2, [pc, #236]	; (8002020 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001f32:	6013      	str	r3, [r2, #0]
 8001f34:	e00f      	b.n	8001f56 <HAL_TIM_IC_CaptureCallback+0x192>
			}
			else if(INC_Value_M1 > INC_Value_M2) // 거리�?????????? ?���?????????? 길면, INC_Value2 �?????????? Overflow?��?�� count�?????????? 0?���?????????? ?�� ?��?��?��?�� INC_Value1보다 ?��?���?????????? ?�� ?��?��.
 8001f36:	4b38      	ldr	r3, [pc, #224]	; (8002018 <HAL_TIM_IC_CaptureCallback+0x254>)
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	4b38      	ldr	r3, [pc, #224]	; (800201c <HAL_TIM_IC_CaptureCallback+0x258>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d909      	bls.n	8001f56 <HAL_TIM_IC_CaptureCallback+0x192>
			{
				echoTime_M = (0xffff - INC_Value_M1) + INC_Value_M2;
 8001f42:	4b36      	ldr	r3, [pc, #216]	; (800201c <HAL_TIM_IC_CaptureCallback+0x258>)
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	4b34      	ldr	r3, [pc, #208]	; (8002018 <HAL_TIM_IC_CaptureCallback+0x254>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001f50:	33ff      	adds	r3, #255	; 0xff
 8001f52:	4a33      	ldr	r2, [pc, #204]	; (8002020 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001f54:	6013      	str	r3, [r2, #0]
			}
			distance_M = echoTime_M / 58;
 8001f56:	4b32      	ldr	r3, [pc, #200]	; (8002020 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a2b      	ldr	r2, [pc, #172]	; (8002008 <HAL_TIM_IC_CaptureCallback+0x244>)
 8001f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f60:	095b      	lsrs	r3, r3, #5
 8001f62:	b2da      	uxtb	r2, r3
 8001f64:	4b2f      	ldr	r3, [pc, #188]	; (8002024 <HAL_TIM_IC_CaptureCallback+0x260>)
 8001f66:	701a      	strb	r2, [r3, #0]
			captureFlag_M = 0;
 8001f68:	4b2a      	ldr	r3, [pc, #168]	; (8002014 <HAL_TIM_IC_CaptureCallback+0x250>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	701a      	strb	r2, [r3, #0]

			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING); // ?��?�� Echo High�?????????? 캡쳐?��?���?????????? ?��?��
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	6a1a      	ldr	r2, [r3, #32]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001f7c:	621a      	str	r2, [r3, #32]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	6a12      	ldr	r2, [r2, #32]
 8001f88:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC2);
 8001f8a:	4b21      	ldr	r3, [pc, #132]	; (8002010 <HAL_TIM_IC_CaptureCallback+0x24c>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	68da      	ldr	r2, [r3, #12]
 8001f90:	4b1f      	ldr	r3, [pc, #124]	; (8002010 <HAL_TIM_IC_CaptureCallback+0x24c>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f022 0204 	bic.w	r2, r2, #4
 8001f98:	60da      	str	r2, [r3, #12]
			ult_stg = 3;
 8001f9a:	4b16      	ldr	r3, [pc, #88]	; (8001ff4 <HAL_TIM_IC_CaptureCallback+0x230>)
 8001f9c:	2203      	movs	r2, #3
 8001f9e:	701a      	strb	r2, [r3, #0]
		}
	}
	}
	if(ult_stg == 3)
 8001fa0:	4b14      	ldr	r3, [pc, #80]	; (8001ff4 <HAL_TIM_IC_CaptureCallback+0x230>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	2b03      	cmp	r3, #3
 8001fa6:	f040 8091 	bne.w	80020cc <HAL_TIM_IC_CaptureCallback+0x308>
	{
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) // 만약 ?��?��?��?�� ?��?�� 채널?���??????????,(?��리�? 1�?????????? 채널?�� ?��기로 ?��?��)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	7f1b      	ldrb	r3, [r3, #28]
 8001fae:	2b04      	cmp	r3, #4
 8001fb0:	f040 808c 	bne.w	80020cc <HAL_TIM_IC_CaptureCallback+0x308>
	{
		if(captureFlag_R == 0) // �?????????? 번째 캡쳐�?????????? ?���?????????? ?��?��?���??????????,(Falling Edge�?????????? 발생?���?????????? ?��?��?���??????????,)
 8001fb4:	4b1c      	ldr	r3, [pc, #112]	; (8002028 <HAL_TIM_IC_CaptureCallback+0x264>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d139      	bne.n	8002030 <HAL_TIM_IC_CaptureCallback+0x26c>
		{
			INC_Value_R1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3); // �?????????? 번째 Value�?????????? ?��?��?��.
 8001fbc:	2108      	movs	r1, #8
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f003 fbd0 	bl	8005764 <HAL_TIM_ReadCapturedValue>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	4a19      	ldr	r2, [pc, #100]	; (800202c <HAL_TIM_IC_CaptureCallback+0x268>)
 8001fc8:	6013      	str	r3, [r2, #0]
			captureFlag_R = 1; // �?????????? 번째 캡쳐 ?���??????????
 8001fca:	4b17      	ldr	r3, [pc, #92]	; (8002028 <HAL_TIM_IC_CaptureCallback+0x264>)
 8001fcc:	2201      	movs	r2, #1
 8001fce:	701a      	strb	r2, [r3, #0]

			// Polarity �??????????�??????????(Rising -> Falling)
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_FALLING); // Echo Falling?�� 캡쳐?��?�� ?���??????????�??????????
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	6a1a      	ldr	r2, [r3, #32]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 8001fde:	621a      	str	r2, [r3, #32]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	6a1a      	ldr	r2, [r3, #32]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fee:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC3);
			ult_stg = 1;
		}
	}
	}
}
 8001ff0:	e06c      	b.n	80020cc <HAL_TIM_IC_CaptureCallback+0x308>
 8001ff2:	bf00      	nop
 8001ff4:	200005ae 	.word	0x200005ae
 8001ff8:	2000058c 	.word	0x2000058c
 8001ffc:	20000580 	.word	0x20000580
 8002000:	20000584 	.word	0x20000584
 8002004:	20000588 	.word	0x20000588
 8002008:	8d3dcb09 	.word	0x8d3dcb09
 800200c:	2000058d 	.word	0x2000058d
 8002010:	200004a8 	.word	0x200004a8
 8002014:	2000059c 	.word	0x2000059c
 8002018:	20000590 	.word	0x20000590
 800201c:	20000594 	.word	0x20000594
 8002020:	20000598 	.word	0x20000598
 8002024:	2000059d 	.word	0x2000059d
 8002028:	200005ac 	.word	0x200005ac
 800202c:	200005a0 	.word	0x200005a0
		else if(captureFlag_R == 1) // 만약 �?????????? 번�?? 캡쳐�?????????? ?���?????????? ?��료됐?���??????????,
 8002030:	4b28      	ldr	r3, [pc, #160]	; (80020d4 <HAL_TIM_IC_CaptureCallback+0x310>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	2b01      	cmp	r3, #1
 8002036:	d149      	bne.n	80020cc <HAL_TIM_IC_CaptureCallback+0x308>
			INC_Value_R2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 8002038:	2108      	movs	r1, #8
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f003 fb92 	bl	8005764 <HAL_TIM_ReadCapturedValue>
 8002040:	4603      	mov	r3, r0
 8002042:	4a25      	ldr	r2, [pc, #148]	; (80020d8 <HAL_TIM_IC_CaptureCallback+0x314>)
 8002044:	6013      	str	r3, [r2, #0]
			if(INC_Value_R2 > INC_Value_R1)
 8002046:	4b24      	ldr	r3, [pc, #144]	; (80020d8 <HAL_TIM_IC_CaptureCallback+0x314>)
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	4b24      	ldr	r3, [pc, #144]	; (80020dc <HAL_TIM_IC_CaptureCallback+0x318>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	429a      	cmp	r2, r3
 8002050:	d907      	bls.n	8002062 <HAL_TIM_IC_CaptureCallback+0x29e>
				echoTime_R = INC_Value_R2 - INC_Value_R1;
 8002052:	4b21      	ldr	r3, [pc, #132]	; (80020d8 <HAL_TIM_IC_CaptureCallback+0x314>)
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	4b21      	ldr	r3, [pc, #132]	; (80020dc <HAL_TIM_IC_CaptureCallback+0x318>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	4a20      	ldr	r2, [pc, #128]	; (80020e0 <HAL_TIM_IC_CaptureCallback+0x31c>)
 800205e:	6013      	str	r3, [r2, #0]
 8002060:	e00f      	b.n	8002082 <HAL_TIM_IC_CaptureCallback+0x2be>
			else if(INC_Value_R1 > INC_Value_R2) // 거리�?????????? ?���?????????? 길면, INC_Value2 �?????????? Overflow?��?�� count�?????????? 0?���?????????? ?�� ?��?��?��?�� INC_Value1보다 ?��?���?????????? ?�� ?��?��.
 8002062:	4b1e      	ldr	r3, [pc, #120]	; (80020dc <HAL_TIM_IC_CaptureCallback+0x318>)
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	4b1c      	ldr	r3, [pc, #112]	; (80020d8 <HAL_TIM_IC_CaptureCallback+0x314>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	429a      	cmp	r2, r3
 800206c:	d909      	bls.n	8002082 <HAL_TIM_IC_CaptureCallback+0x2be>
				echoTime_R = (0xffff - INC_Value_R1) + INC_Value_R2;
 800206e:	4b1a      	ldr	r3, [pc, #104]	; (80020d8 <HAL_TIM_IC_CaptureCallback+0x314>)
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	4b1a      	ldr	r3, [pc, #104]	; (80020dc <HAL_TIM_IC_CaptureCallback+0x318>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800207c:	33ff      	adds	r3, #255	; 0xff
 800207e:	4a18      	ldr	r2, [pc, #96]	; (80020e0 <HAL_TIM_IC_CaptureCallback+0x31c>)
 8002080:	6013      	str	r3, [r2, #0]
			distance_R = echoTime_R / 58;
 8002082:	4b17      	ldr	r3, [pc, #92]	; (80020e0 <HAL_TIM_IC_CaptureCallback+0x31c>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a17      	ldr	r2, [pc, #92]	; (80020e4 <HAL_TIM_IC_CaptureCallback+0x320>)
 8002088:	fba2 2303 	umull	r2, r3, r2, r3
 800208c:	095b      	lsrs	r3, r3, #5
 800208e:	b2da      	uxtb	r2, r3
 8002090:	4b15      	ldr	r3, [pc, #84]	; (80020e8 <HAL_TIM_IC_CaptureCallback+0x324>)
 8002092:	701a      	strb	r2, [r3, #0]
			captureFlag_R = 0;
 8002094:	4b0f      	ldr	r3, [pc, #60]	; (80020d4 <HAL_TIM_IC_CaptureCallback+0x310>)
 8002096:	2200      	movs	r2, #0
 8002098:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING); // ?��?�� Echo High�?????????? 캡쳐?��?���?????????? ?��?��
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	6a1a      	ldr	r2, [r3, #32]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 80020a8:	621a      	str	r2, [r3, #32]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	6a12      	ldr	r2, [r2, #32]
 80020b4:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC3);
 80020b6:	4b0d      	ldr	r3, [pc, #52]	; (80020ec <HAL_TIM_IC_CaptureCallback+0x328>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	68da      	ldr	r2, [r3, #12]
 80020bc:	4b0b      	ldr	r3, [pc, #44]	; (80020ec <HAL_TIM_IC_CaptureCallback+0x328>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f022 0208 	bic.w	r2, r2, #8
 80020c4:	60da      	str	r2, [r3, #12]
			ult_stg = 1;
 80020c6:	4b0a      	ldr	r3, [pc, #40]	; (80020f0 <HAL_TIM_IC_CaptureCallback+0x32c>)
 80020c8:	2201      	movs	r2, #1
 80020ca:	701a      	strb	r2, [r3, #0]
}
 80020cc:	bf00      	nop
 80020ce:	3708      	adds	r7, #8
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	200005ac 	.word	0x200005ac
 80020d8:	200005a4 	.word	0x200005a4
 80020dc:	200005a0 	.word	0x200005a0
 80020e0:	200005a8 	.word	0x200005a8
 80020e4:	8d3dcb09 	.word	0x8d3dcb09
 80020e8:	200005ad 	.word	0x200005ad
 80020ec:	200004a8 	.word	0x200004a8
 80020f0:	200005ae 	.word	0x200005ae

080020f4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80020f8:	4b11      	ldr	r3, [pc, #68]	; (8002140 <MX_USART1_UART_Init+0x4c>)
 80020fa:	4a12      	ldr	r2, [pc, #72]	; (8002144 <MX_USART1_UART_Init+0x50>)
 80020fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80020fe:	4b10      	ldr	r3, [pc, #64]	; (8002140 <MX_USART1_UART_Init+0x4c>)
 8002100:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002104:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002106:	4b0e      	ldr	r3, [pc, #56]	; (8002140 <MX_USART1_UART_Init+0x4c>)
 8002108:	2200      	movs	r2, #0
 800210a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800210c:	4b0c      	ldr	r3, [pc, #48]	; (8002140 <MX_USART1_UART_Init+0x4c>)
 800210e:	2200      	movs	r2, #0
 8002110:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002112:	4b0b      	ldr	r3, [pc, #44]	; (8002140 <MX_USART1_UART_Init+0x4c>)
 8002114:	2200      	movs	r2, #0
 8002116:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002118:	4b09      	ldr	r3, [pc, #36]	; (8002140 <MX_USART1_UART_Init+0x4c>)
 800211a:	220c      	movs	r2, #12
 800211c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800211e:	4b08      	ldr	r3, [pc, #32]	; (8002140 <MX_USART1_UART_Init+0x4c>)
 8002120:	2200      	movs	r2, #0
 8002122:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002124:	4b06      	ldr	r3, [pc, #24]	; (8002140 <MX_USART1_UART_Init+0x4c>)
 8002126:	2200      	movs	r2, #0
 8002128:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800212a:	4805      	ldr	r0, [pc, #20]	; (8002140 <MX_USART1_UART_Init+0x4c>)
 800212c:	f003 ffe8 	bl	8006100 <HAL_UART_Init>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002136:	f7ff f899 	bl	800126c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800213a:	bf00      	nop
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	200005b0 	.word	0x200005b0
 8002144:	40011000 	.word	0x40011000

08002148 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800214c:	4b11      	ldr	r3, [pc, #68]	; (8002194 <MX_USART2_UART_Init+0x4c>)
 800214e:	4a12      	ldr	r2, [pc, #72]	; (8002198 <MX_USART2_UART_Init+0x50>)
 8002150:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002152:	4b10      	ldr	r3, [pc, #64]	; (8002194 <MX_USART2_UART_Init+0x4c>)
 8002154:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002158:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800215a:	4b0e      	ldr	r3, [pc, #56]	; (8002194 <MX_USART2_UART_Init+0x4c>)
 800215c:	2200      	movs	r2, #0
 800215e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002160:	4b0c      	ldr	r3, [pc, #48]	; (8002194 <MX_USART2_UART_Init+0x4c>)
 8002162:	2200      	movs	r2, #0
 8002164:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002166:	4b0b      	ldr	r3, [pc, #44]	; (8002194 <MX_USART2_UART_Init+0x4c>)
 8002168:	2200      	movs	r2, #0
 800216a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800216c:	4b09      	ldr	r3, [pc, #36]	; (8002194 <MX_USART2_UART_Init+0x4c>)
 800216e:	220c      	movs	r2, #12
 8002170:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002172:	4b08      	ldr	r3, [pc, #32]	; (8002194 <MX_USART2_UART_Init+0x4c>)
 8002174:	2200      	movs	r2, #0
 8002176:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002178:	4b06      	ldr	r3, [pc, #24]	; (8002194 <MX_USART2_UART_Init+0x4c>)
 800217a:	2200      	movs	r2, #0
 800217c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800217e:	4805      	ldr	r0, [pc, #20]	; (8002194 <MX_USART2_UART_Init+0x4c>)
 8002180:	f003 ffbe 	bl	8006100 <HAL_UART_Init>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800218a:	f7ff f86f 	bl	800126c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800218e:	bf00      	nop
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	200005f4 	.word	0x200005f4
 8002198:	40004400 	.word	0x40004400

0800219c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b08c      	sub	sp, #48	; 0x30
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a4:	f107 031c 	add.w	r3, r7, #28
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]
 80021ac:	605a      	str	r2, [r3, #4]
 80021ae:	609a      	str	r2, [r3, #8]
 80021b0:	60da      	str	r2, [r3, #12]
 80021b2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a63      	ldr	r2, [pc, #396]	; (8002348 <HAL_UART_MspInit+0x1ac>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d15e      	bne.n	800227c <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80021be:	2300      	movs	r3, #0
 80021c0:	61bb      	str	r3, [r7, #24]
 80021c2:	4b62      	ldr	r3, [pc, #392]	; (800234c <HAL_UART_MspInit+0x1b0>)
 80021c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c6:	4a61      	ldr	r2, [pc, #388]	; (800234c <HAL_UART_MspInit+0x1b0>)
 80021c8:	f043 0310 	orr.w	r3, r3, #16
 80021cc:	6453      	str	r3, [r2, #68]	; 0x44
 80021ce:	4b5f      	ldr	r3, [pc, #380]	; (800234c <HAL_UART_MspInit+0x1b0>)
 80021d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d2:	f003 0310 	and.w	r3, r3, #16
 80021d6:	61bb      	str	r3, [r7, #24]
 80021d8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021da:	2300      	movs	r3, #0
 80021dc:	617b      	str	r3, [r7, #20]
 80021de:	4b5b      	ldr	r3, [pc, #364]	; (800234c <HAL_UART_MspInit+0x1b0>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e2:	4a5a      	ldr	r2, [pc, #360]	; (800234c <HAL_UART_MspInit+0x1b0>)
 80021e4:	f043 0301 	orr.w	r3, r3, #1
 80021e8:	6313      	str	r3, [r2, #48]	; 0x30
 80021ea:	4b58      	ldr	r3, [pc, #352]	; (800234c <HAL_UART_MspInit+0x1b0>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	617b      	str	r3, [r7, #20]
 80021f4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80021f6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80021fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021fc:	2302      	movs	r3, #2
 80021fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002200:	2300      	movs	r3, #0
 8002202:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002204:	2303      	movs	r3, #3
 8002206:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002208:	2307      	movs	r3, #7
 800220a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800220c:	f107 031c 	add.w	r3, r7, #28
 8002210:	4619      	mov	r1, r3
 8002212:	484f      	ldr	r0, [pc, #316]	; (8002350 <HAL_UART_MspInit+0x1b4>)
 8002214:	f001 f97c 	bl	8003510 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002218:	4b4e      	ldr	r3, [pc, #312]	; (8002354 <HAL_UART_MspInit+0x1b8>)
 800221a:	4a4f      	ldr	r2, [pc, #316]	; (8002358 <HAL_UART_MspInit+0x1bc>)
 800221c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800221e:	4b4d      	ldr	r3, [pc, #308]	; (8002354 <HAL_UART_MspInit+0x1b8>)
 8002220:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002224:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002226:	4b4b      	ldr	r3, [pc, #300]	; (8002354 <HAL_UART_MspInit+0x1b8>)
 8002228:	2200      	movs	r2, #0
 800222a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800222c:	4b49      	ldr	r3, [pc, #292]	; (8002354 <HAL_UART_MspInit+0x1b8>)
 800222e:	2200      	movs	r2, #0
 8002230:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002232:	4b48      	ldr	r3, [pc, #288]	; (8002354 <HAL_UART_MspInit+0x1b8>)
 8002234:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002238:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800223a:	4b46      	ldr	r3, [pc, #280]	; (8002354 <HAL_UART_MspInit+0x1b8>)
 800223c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002240:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002242:	4b44      	ldr	r3, [pc, #272]	; (8002354 <HAL_UART_MspInit+0x1b8>)
 8002244:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002248:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800224a:	4b42      	ldr	r3, [pc, #264]	; (8002354 <HAL_UART_MspInit+0x1b8>)
 800224c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002250:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002252:	4b40      	ldr	r3, [pc, #256]	; (8002354 <HAL_UART_MspInit+0x1b8>)
 8002254:	2200      	movs	r2, #0
 8002256:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002258:	4b3e      	ldr	r3, [pc, #248]	; (8002354 <HAL_UART_MspInit+0x1b8>)
 800225a:	2200      	movs	r2, #0
 800225c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800225e:	483d      	ldr	r0, [pc, #244]	; (8002354 <HAL_UART_MspInit+0x1b8>)
 8002260:	f000 fde6 	bl	8002e30 <HAL_DMA_Init>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 800226a:	f7fe ffff 	bl	800126c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a38      	ldr	r2, [pc, #224]	; (8002354 <HAL_UART_MspInit+0x1b8>)
 8002272:	639a      	str	r2, [r3, #56]	; 0x38
 8002274:	4a37      	ldr	r2, [pc, #220]	; (8002354 <HAL_UART_MspInit+0x1b8>)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800227a:	e061      	b.n	8002340 <HAL_UART_MspInit+0x1a4>
  else if(uartHandle->Instance==USART2)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a36      	ldr	r2, [pc, #216]	; (800235c <HAL_UART_MspInit+0x1c0>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d15c      	bne.n	8002340 <HAL_UART_MspInit+0x1a4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002286:	2300      	movs	r3, #0
 8002288:	613b      	str	r3, [r7, #16]
 800228a:	4b30      	ldr	r3, [pc, #192]	; (800234c <HAL_UART_MspInit+0x1b0>)
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	4a2f      	ldr	r2, [pc, #188]	; (800234c <HAL_UART_MspInit+0x1b0>)
 8002290:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002294:	6413      	str	r3, [r2, #64]	; 0x40
 8002296:	4b2d      	ldr	r3, [pc, #180]	; (800234c <HAL_UART_MspInit+0x1b0>)
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800229e:	613b      	str	r3, [r7, #16]
 80022a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022a2:	2300      	movs	r3, #0
 80022a4:	60fb      	str	r3, [r7, #12]
 80022a6:	4b29      	ldr	r3, [pc, #164]	; (800234c <HAL_UART_MspInit+0x1b0>)
 80022a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022aa:	4a28      	ldr	r2, [pc, #160]	; (800234c <HAL_UART_MspInit+0x1b0>)
 80022ac:	f043 0301 	orr.w	r3, r3, #1
 80022b0:	6313      	str	r3, [r2, #48]	; 0x30
 80022b2:	4b26      	ldr	r3, [pc, #152]	; (800234c <HAL_UART_MspInit+0x1b0>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	60fb      	str	r3, [r7, #12]
 80022bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|GPIO_PIN_3;
 80022be:	230c      	movs	r3, #12
 80022c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c2:	2302      	movs	r3, #2
 80022c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c6:	2300      	movs	r3, #0
 80022c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ca:	2303      	movs	r3, #3
 80022cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022ce:	2307      	movs	r3, #7
 80022d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022d2:	f107 031c 	add.w	r3, r7, #28
 80022d6:	4619      	mov	r1, r3
 80022d8:	481d      	ldr	r0, [pc, #116]	; (8002350 <HAL_UART_MspInit+0x1b4>)
 80022da:	f001 f919 	bl	8003510 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream7;
 80022de:	4b20      	ldr	r3, [pc, #128]	; (8002360 <HAL_UART_MspInit+0x1c4>)
 80022e0:	4a20      	ldr	r2, [pc, #128]	; (8002364 <HAL_UART_MspInit+0x1c8>)
 80022e2:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_6;
 80022e4:	4b1e      	ldr	r3, [pc, #120]	; (8002360 <HAL_UART_MspInit+0x1c4>)
 80022e6:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80022ea:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022ec:	4b1c      	ldr	r3, [pc, #112]	; (8002360 <HAL_UART_MspInit+0x1c4>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022f2:	4b1b      	ldr	r3, [pc, #108]	; (8002360 <HAL_UART_MspInit+0x1c4>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80022f8:	4b19      	ldr	r3, [pc, #100]	; (8002360 <HAL_UART_MspInit+0x1c4>)
 80022fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022fe:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002300:	4b17      	ldr	r3, [pc, #92]	; (8002360 <HAL_UART_MspInit+0x1c4>)
 8002302:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002306:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002308:	4b15      	ldr	r3, [pc, #84]	; (8002360 <HAL_UART_MspInit+0x1c4>)
 800230a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800230e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002310:	4b13      	ldr	r3, [pc, #76]	; (8002360 <HAL_UART_MspInit+0x1c4>)
 8002312:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002316:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002318:	4b11      	ldr	r3, [pc, #68]	; (8002360 <HAL_UART_MspInit+0x1c4>)
 800231a:	2200      	movs	r2, #0
 800231c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800231e:	4b10      	ldr	r3, [pc, #64]	; (8002360 <HAL_UART_MspInit+0x1c4>)
 8002320:	2200      	movs	r2, #0
 8002322:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002324:	480e      	ldr	r0, [pc, #56]	; (8002360 <HAL_UART_MspInit+0x1c4>)
 8002326:	f000 fd83 	bl	8002e30 <HAL_DMA_Init>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <HAL_UART_MspInit+0x198>
      Error_Handler();
 8002330:	f7fe ff9c 	bl	800126c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	4a0a      	ldr	r2, [pc, #40]	; (8002360 <HAL_UART_MspInit+0x1c4>)
 8002338:	639a      	str	r2, [r3, #56]	; 0x38
 800233a:	4a09      	ldr	r2, [pc, #36]	; (8002360 <HAL_UART_MspInit+0x1c4>)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002340:	bf00      	nop
 8002342:	3730      	adds	r7, #48	; 0x30
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	40011000 	.word	0x40011000
 800234c:	40023800 	.word	0x40023800
 8002350:	40020000 	.word	0x40020000
 8002354:	20000638 	.word	0x20000638
 8002358:	40026440 	.word	0x40026440
 800235c:	40004400 	.word	0x40004400
 8002360:	20000698 	.word	0x20000698
 8002364:	400260b8 	.word	0x400260b8

08002368 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002368:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800236c:	480d      	ldr	r0, [pc, #52]	; (80023a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800236e:	490e      	ldr	r1, [pc, #56]	; (80023a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002370:	4a0e      	ldr	r2, [pc, #56]	; (80023ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002372:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002374:	e002      	b.n	800237c <LoopCopyDataInit>

08002376 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002376:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002378:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800237a:	3304      	adds	r3, #4

0800237c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800237c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800237e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002380:	d3f9      	bcc.n	8002376 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002382:	4a0b      	ldr	r2, [pc, #44]	; (80023b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002384:	4c0b      	ldr	r4, [pc, #44]	; (80023b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002386:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002388:	e001      	b.n	800238e <LoopFillZerobss>

0800238a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800238a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800238c:	3204      	adds	r2, #4

0800238e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800238e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002390:	d3fb      	bcc.n	800238a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002392:	f7ff fa79 	bl	8001888 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002396:	f006 fac9 	bl	800892c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800239a:	f7fe fecf 	bl	800113c <main>
  bx  lr    
 800239e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80023a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80023a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023a8:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80023ac:	08009634 	.word	0x08009634
  ldr r2, =_sbss
 80023b0:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80023b4:	2000459c 	.word	0x2000459c

080023b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023b8:	e7fe      	b.n	80023b8 <ADC_IRQHandler>
	...

080023bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023c0:	4b0e      	ldr	r3, [pc, #56]	; (80023fc <HAL_Init+0x40>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a0d      	ldr	r2, [pc, #52]	; (80023fc <HAL_Init+0x40>)
 80023c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023cc:	4b0b      	ldr	r3, [pc, #44]	; (80023fc <HAL_Init+0x40>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a0a      	ldr	r2, [pc, #40]	; (80023fc <HAL_Init+0x40>)
 80023d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023d8:	4b08      	ldr	r3, [pc, #32]	; (80023fc <HAL_Init+0x40>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a07      	ldr	r2, [pc, #28]	; (80023fc <HAL_Init+0x40>)
 80023de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023e4:	2003      	movs	r0, #3
 80023e6:	f000 fcee 	bl	8002dc6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023ea:	200f      	movs	r0, #15
 80023ec:	f7ff f8ea 	bl	80015c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023f0:	f7ff f8bc 	bl	800156c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	40023c00 	.word	0x40023c00

08002400 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002404:	4b06      	ldr	r3, [pc, #24]	; (8002420 <HAL_IncTick+0x20>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	461a      	mov	r2, r3
 800240a:	4b06      	ldr	r3, [pc, #24]	; (8002424 <HAL_IncTick+0x24>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4413      	add	r3, r2
 8002410:	4a04      	ldr	r2, [pc, #16]	; (8002424 <HAL_IncTick+0x24>)
 8002412:	6013      	str	r3, [r2, #0]
}
 8002414:	bf00      	nop
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	20000008 	.word	0x20000008
 8002424:	200006f8 	.word	0x200006f8

08002428 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  return uwTick;
 800242c:	4b03      	ldr	r3, [pc, #12]	; (800243c <HAL_GetTick+0x14>)
 800242e:	681b      	ldr	r3, [r3, #0]
}
 8002430:	4618      	mov	r0, r3
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	200006f8 	.word	0x200006f8

08002440 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002448:	f7ff ffee 	bl	8002428 <HAL_GetTick>
 800244c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002458:	d005      	beq.n	8002466 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800245a:	4b0a      	ldr	r3, [pc, #40]	; (8002484 <HAL_Delay+0x44>)
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	461a      	mov	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	4413      	add	r3, r2
 8002464:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002466:	bf00      	nop
 8002468:	f7ff ffde 	bl	8002428 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	68fa      	ldr	r2, [r7, #12]
 8002474:	429a      	cmp	r2, r3
 8002476:	d8f7      	bhi.n	8002468 <HAL_Delay+0x28>
  {
  }
}
 8002478:	bf00      	nop
 800247a:	bf00      	nop
 800247c:	3710      	adds	r7, #16
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	20000008 	.word	0x20000008

08002488 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002490:	2300      	movs	r3, #0
 8002492:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e033      	b.n	8002506 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d109      	bne.n	80024ba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f7fe fad8 	bl	8000a5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024be:	f003 0310 	and.w	r3, r3, #16
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d118      	bne.n	80024f8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80024ce:	f023 0302 	bic.w	r3, r3, #2
 80024d2:	f043 0202 	orr.w	r2, r3, #2
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f000 faca 	bl	8002a74 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ea:	f023 0303 	bic.w	r3, r3, #3
 80024ee:	f043 0201 	orr.w	r2, r3, #1
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	641a      	str	r2, [r3, #64]	; 0x40
 80024f6:	e001      	b.n	80024fc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002504:	7bfb      	ldrb	r3, [r7, #15]
}
 8002506:	4618      	mov	r0, r3
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
	...

08002510 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002510:	b480      	push	{r7}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002518:	2300      	movs	r3, #0
 800251a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002522:	2b01      	cmp	r3, #1
 8002524:	d101      	bne.n	800252a <HAL_ADC_Start+0x1a>
 8002526:	2302      	movs	r3, #2
 8002528:	e097      	b.n	800265a <HAL_ADC_Start+0x14a>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2201      	movs	r2, #1
 800252e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f003 0301 	and.w	r3, r3, #1
 800253c:	2b01      	cmp	r3, #1
 800253e:	d018      	beq.n	8002572 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	689a      	ldr	r2, [r3, #8]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f042 0201 	orr.w	r2, r2, #1
 800254e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002550:	4b45      	ldr	r3, [pc, #276]	; (8002668 <HAL_ADC_Start+0x158>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a45      	ldr	r2, [pc, #276]	; (800266c <HAL_ADC_Start+0x15c>)
 8002556:	fba2 2303 	umull	r2, r3, r2, r3
 800255a:	0c9a      	lsrs	r2, r3, #18
 800255c:	4613      	mov	r3, r2
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	4413      	add	r3, r2
 8002562:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002564:	e002      	b.n	800256c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	3b01      	subs	r3, #1
 800256a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d1f9      	bne.n	8002566 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f003 0301 	and.w	r3, r3, #1
 800257c:	2b01      	cmp	r3, #1
 800257e:	d15f      	bne.n	8002640 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002584:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002588:	f023 0301 	bic.w	r3, r3, #1
 800258c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d007      	beq.n	80025b2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80025aa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025be:	d106      	bne.n	80025ce <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c4:	f023 0206 	bic.w	r2, r3, #6
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	645a      	str	r2, [r3, #68]	; 0x44
 80025cc:	e002      	b.n	80025d4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025dc:	4b24      	ldr	r3, [pc, #144]	; (8002670 <HAL_ADC_Start+0x160>)
 80025de:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80025e8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f003 031f 	and.w	r3, r3, #31
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d10f      	bne.n	8002616 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d129      	bne.n	8002658 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	689a      	ldr	r2, [r3, #8]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002612:	609a      	str	r2, [r3, #8]
 8002614:	e020      	b.n	8002658 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a16      	ldr	r2, [pc, #88]	; (8002674 <HAL_ADC_Start+0x164>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d11b      	bne.n	8002658 <HAL_ADC_Start+0x148>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d114      	bne.n	8002658 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	689a      	ldr	r2, [r3, #8]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800263c:	609a      	str	r2, [r3, #8]
 800263e:	e00b      	b.n	8002658 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002644:	f043 0210 	orr.w	r2, r3, #16
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002650:	f043 0201 	orr.w	r2, r3, #1
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3714      	adds	r7, #20
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	20000000 	.word	0x20000000
 800266c:	431bde83 	.word	0x431bde83
 8002670:	40012300 	.word	0x40012300
 8002674:	40012000 	.word	0x40012000

08002678 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002686:	2b01      	cmp	r3, #1
 8002688:	d101      	bne.n	800268e <HAL_ADC_Stop+0x16>
 800268a:	2302      	movs	r3, #2
 800268c:	e021      	b.n	80026d2 <HAL_ADC_Stop+0x5a>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2201      	movs	r2, #1
 8002692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	689a      	ldr	r2, [r3, #8]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f022 0201 	bic.w	r2, r2, #1
 80026a4:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f003 0301 	and.w	r3, r3, #1
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d109      	bne.n	80026c8 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80026bc:	f023 0301 	bic.w	r3, r3, #1
 80026c0:	f043 0201 	orr.w	r2, r3, #1
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr

080026de <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	b084      	sub	sp, #16
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
 80026e6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80026e8:	2300      	movs	r3, #0
 80026ea:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026fa:	d113      	bne.n	8002724 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002706:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800270a:	d10b      	bne.n	8002724 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002710:	f043 0220 	orr.w	r2, r3, #32
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e063      	b.n	80027ec <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002724:	f7ff fe80 	bl	8002428 <HAL_GetTick>
 8002728:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800272a:	e021      	b.n	8002770 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002732:	d01d      	beq.n	8002770 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d007      	beq.n	800274a <HAL_ADC_PollForConversion+0x6c>
 800273a:	f7ff fe75 	bl	8002428 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	683a      	ldr	r2, [r7, #0]
 8002746:	429a      	cmp	r2, r3
 8002748:	d212      	bcs.n	8002770 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	2b02      	cmp	r3, #2
 8002756:	d00b      	beq.n	8002770 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275c:	f043 0204 	orr.w	r2, r3, #4
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e03d      	b.n	80027ec <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	2b02      	cmp	r3, #2
 800277c:	d1d6      	bne.n	800272c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f06f 0212 	mvn.w	r2, #18
 8002786:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d123      	bne.n	80027ea <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d11f      	bne.n	80027ea <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d006      	beq.n	80027c6 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d111      	bne.n	80027ea <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d105      	bne.n	80027ea <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e2:	f043 0201 	orr.w	r2, r3, #1
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80027ea:	2300      	movs	r3, #0
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3710      	adds	r7, #16
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002802:	4618      	mov	r0, r3
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
	...

08002810 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002810:	b480      	push	{r7}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800281a:	2300      	movs	r3, #0
 800281c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002824:	2b01      	cmp	r3, #1
 8002826:	d101      	bne.n	800282c <HAL_ADC_ConfigChannel+0x1c>
 8002828:	2302      	movs	r3, #2
 800282a:	e113      	b.n	8002a54 <HAL_ADC_ConfigChannel+0x244>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2b09      	cmp	r3, #9
 800283a:	d925      	bls.n	8002888 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	68d9      	ldr	r1, [r3, #12]
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	b29b      	uxth	r3, r3
 8002848:	461a      	mov	r2, r3
 800284a:	4613      	mov	r3, r2
 800284c:	005b      	lsls	r3, r3, #1
 800284e:	4413      	add	r3, r2
 8002850:	3b1e      	subs	r3, #30
 8002852:	2207      	movs	r2, #7
 8002854:	fa02 f303 	lsl.w	r3, r2, r3
 8002858:	43da      	mvns	r2, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	400a      	ands	r2, r1
 8002860:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	68d9      	ldr	r1, [r3, #12]
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	689a      	ldr	r2, [r3, #8]
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	b29b      	uxth	r3, r3
 8002872:	4618      	mov	r0, r3
 8002874:	4603      	mov	r3, r0
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	4403      	add	r3, r0
 800287a:	3b1e      	subs	r3, #30
 800287c:	409a      	lsls	r2, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	430a      	orrs	r2, r1
 8002884:	60da      	str	r2, [r3, #12]
 8002886:	e022      	b.n	80028ce <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	6919      	ldr	r1, [r3, #16]
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	b29b      	uxth	r3, r3
 8002894:	461a      	mov	r2, r3
 8002896:	4613      	mov	r3, r2
 8002898:	005b      	lsls	r3, r3, #1
 800289a:	4413      	add	r3, r2
 800289c:	2207      	movs	r2, #7
 800289e:	fa02 f303 	lsl.w	r3, r2, r3
 80028a2:	43da      	mvns	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	400a      	ands	r2, r1
 80028aa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	6919      	ldr	r1, [r3, #16]
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	689a      	ldr	r2, [r3, #8]
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	4618      	mov	r0, r3
 80028be:	4603      	mov	r3, r0
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	4403      	add	r3, r0
 80028c4:	409a      	lsls	r2, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	430a      	orrs	r2, r1
 80028cc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	2b06      	cmp	r3, #6
 80028d4:	d824      	bhi.n	8002920 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685a      	ldr	r2, [r3, #4]
 80028e0:	4613      	mov	r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	4413      	add	r3, r2
 80028e6:	3b05      	subs	r3, #5
 80028e8:	221f      	movs	r2, #31
 80028ea:	fa02 f303 	lsl.w	r3, r2, r3
 80028ee:	43da      	mvns	r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	400a      	ands	r2, r1
 80028f6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	b29b      	uxth	r3, r3
 8002904:	4618      	mov	r0, r3
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	685a      	ldr	r2, [r3, #4]
 800290a:	4613      	mov	r3, r2
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	4413      	add	r3, r2
 8002910:	3b05      	subs	r3, #5
 8002912:	fa00 f203 	lsl.w	r2, r0, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	430a      	orrs	r2, r1
 800291c:	635a      	str	r2, [r3, #52]	; 0x34
 800291e:	e04c      	b.n	80029ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	2b0c      	cmp	r3, #12
 8002926:	d824      	bhi.n	8002972 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	685a      	ldr	r2, [r3, #4]
 8002932:	4613      	mov	r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	4413      	add	r3, r2
 8002938:	3b23      	subs	r3, #35	; 0x23
 800293a:	221f      	movs	r2, #31
 800293c:	fa02 f303 	lsl.w	r3, r2, r3
 8002940:	43da      	mvns	r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	400a      	ands	r2, r1
 8002948:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	b29b      	uxth	r3, r3
 8002956:	4618      	mov	r0, r3
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685a      	ldr	r2, [r3, #4]
 800295c:	4613      	mov	r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	4413      	add	r3, r2
 8002962:	3b23      	subs	r3, #35	; 0x23
 8002964:	fa00 f203 	lsl.w	r2, r0, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	430a      	orrs	r2, r1
 800296e:	631a      	str	r2, [r3, #48]	; 0x30
 8002970:	e023      	b.n	80029ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685a      	ldr	r2, [r3, #4]
 800297c:	4613      	mov	r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	4413      	add	r3, r2
 8002982:	3b41      	subs	r3, #65	; 0x41
 8002984:	221f      	movs	r2, #31
 8002986:	fa02 f303 	lsl.w	r3, r2, r3
 800298a:	43da      	mvns	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	400a      	ands	r2, r1
 8002992:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	b29b      	uxth	r3, r3
 80029a0:	4618      	mov	r0, r3
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	685a      	ldr	r2, [r3, #4]
 80029a6:	4613      	mov	r3, r2
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	4413      	add	r3, r2
 80029ac:	3b41      	subs	r3, #65	; 0x41
 80029ae:	fa00 f203 	lsl.w	r2, r0, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	430a      	orrs	r2, r1
 80029b8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029ba:	4b29      	ldr	r3, [pc, #164]	; (8002a60 <HAL_ADC_ConfigChannel+0x250>)
 80029bc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a28      	ldr	r2, [pc, #160]	; (8002a64 <HAL_ADC_ConfigChannel+0x254>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d10f      	bne.n	80029e8 <HAL_ADC_ConfigChannel+0x1d8>
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2b12      	cmp	r3, #18
 80029ce:	d10b      	bne.n	80029e8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a1d      	ldr	r2, [pc, #116]	; (8002a64 <HAL_ADC_ConfigChannel+0x254>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d12b      	bne.n	8002a4a <HAL_ADC_ConfigChannel+0x23a>
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a1c      	ldr	r2, [pc, #112]	; (8002a68 <HAL_ADC_ConfigChannel+0x258>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d003      	beq.n	8002a04 <HAL_ADC_ConfigChannel+0x1f4>
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2b11      	cmp	r3, #17
 8002a02:	d122      	bne.n	8002a4a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a11      	ldr	r2, [pc, #68]	; (8002a68 <HAL_ADC_ConfigChannel+0x258>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d111      	bne.n	8002a4a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a26:	4b11      	ldr	r3, [pc, #68]	; (8002a6c <HAL_ADC_ConfigChannel+0x25c>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a11      	ldr	r2, [pc, #68]	; (8002a70 <HAL_ADC_ConfigChannel+0x260>)
 8002a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a30:	0c9a      	lsrs	r2, r3, #18
 8002a32:	4613      	mov	r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	4413      	add	r3, r2
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002a3c:	e002      	b.n	8002a44 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	3b01      	subs	r3, #1
 8002a42:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1f9      	bne.n	8002a3e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002a52:	2300      	movs	r3, #0
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3714      	adds	r7, #20
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr
 8002a60:	40012300 	.word	0x40012300
 8002a64:	40012000 	.word	0x40012000
 8002a68:	10000012 	.word	0x10000012
 8002a6c:	20000000 	.word	0x20000000
 8002a70:	431bde83 	.word	0x431bde83

08002a74 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a7c:	4b79      	ldr	r3, [pc, #484]	; (8002c64 <ADC_Init+0x1f0>)
 8002a7e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	685a      	ldr	r2, [r3, #4]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	431a      	orrs	r2, r3
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	685a      	ldr	r2, [r3, #4]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002aa8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	6859      	ldr	r1, [r3, #4]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	691b      	ldr	r3, [r3, #16]
 8002ab4:	021a      	lsls	r2, r3, #8
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	430a      	orrs	r2, r1
 8002abc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	685a      	ldr	r2, [r3, #4]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002acc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	6859      	ldr	r1, [r3, #4]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689a      	ldr	r2, [r3, #8]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	430a      	orrs	r2, r1
 8002ade:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	689a      	ldr	r2, [r3, #8]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002aee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	6899      	ldr	r1, [r3, #8]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	68da      	ldr	r2, [r3, #12]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	430a      	orrs	r2, r1
 8002b00:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b06:	4a58      	ldr	r2, [pc, #352]	; (8002c68 <ADC_Init+0x1f4>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d022      	beq.n	8002b52 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	689a      	ldr	r2, [r3, #8]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b1a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	6899      	ldr	r1, [r3, #8]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	689a      	ldr	r2, [r3, #8]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	6899      	ldr	r1, [r3, #8]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	609a      	str	r2, [r3, #8]
 8002b50:	e00f      	b.n	8002b72 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	689a      	ldr	r2, [r3, #8]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	689a      	ldr	r2, [r3, #8]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b70:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	689a      	ldr	r2, [r3, #8]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f022 0202 	bic.w	r2, r2, #2
 8002b80:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	6899      	ldr	r1, [r3, #8]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	7e1b      	ldrb	r3, [r3, #24]
 8002b8c:	005a      	lsls	r2, r3, #1
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	430a      	orrs	r2, r1
 8002b94:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d01b      	beq.n	8002bd8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	685a      	ldr	r2, [r3, #4]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bae:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	685a      	ldr	r2, [r3, #4]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002bbe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	6859      	ldr	r1, [r3, #4]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	035a      	lsls	r2, r3, #13
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	605a      	str	r2, [r3, #4]
 8002bd6:	e007      	b.n	8002be8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	685a      	ldr	r2, [r3, #4]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002be6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002bf6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	69db      	ldr	r3, [r3, #28]
 8002c02:	3b01      	subs	r3, #1
 8002c04:	051a      	lsls	r2, r3, #20
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	689a      	ldr	r2, [r3, #8]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002c1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	6899      	ldr	r1, [r3, #8]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c2a:	025a      	lsls	r2, r3, #9
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	430a      	orrs	r2, r1
 8002c32:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	689a      	ldr	r2, [r3, #8]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c42:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	6899      	ldr	r1, [r3, #8]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	695b      	ldr	r3, [r3, #20]
 8002c4e:	029a      	lsls	r2, r3, #10
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	430a      	orrs	r2, r1
 8002c56:	609a      	str	r2, [r3, #8]
}
 8002c58:	bf00      	nop
 8002c5a:	3714      	adds	r7, #20
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr
 8002c64:	40012300 	.word	0x40012300
 8002c68:	0f000001 	.word	0x0f000001

08002c6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f003 0307 	and.w	r3, r3, #7
 8002c7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c7c:	4b0c      	ldr	r3, [pc, #48]	; (8002cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c82:	68ba      	ldr	r2, [r7, #8]
 8002c84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c88:	4013      	ands	r3, r2
 8002c8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c9e:	4a04      	ldr	r2, [pc, #16]	; (8002cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	60d3      	str	r3, [r2, #12]
}
 8002ca4:	bf00      	nop
 8002ca6:	3714      	adds	r7, #20
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr
 8002cb0:	e000ed00 	.word	0xe000ed00

08002cb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cb8:	4b04      	ldr	r3, [pc, #16]	; (8002ccc <__NVIC_GetPriorityGrouping+0x18>)
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	0a1b      	lsrs	r3, r3, #8
 8002cbe:	f003 0307 	and.w	r3, r3, #7
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr
 8002ccc:	e000ed00 	.word	0xe000ed00

08002cd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	db0b      	blt.n	8002cfa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ce2:	79fb      	ldrb	r3, [r7, #7]
 8002ce4:	f003 021f 	and.w	r2, r3, #31
 8002ce8:	4907      	ldr	r1, [pc, #28]	; (8002d08 <__NVIC_EnableIRQ+0x38>)
 8002cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cee:	095b      	lsrs	r3, r3, #5
 8002cf0:	2001      	movs	r0, #1
 8002cf2:	fa00 f202 	lsl.w	r2, r0, r2
 8002cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002cfa:	bf00      	nop
 8002cfc:	370c      	adds	r7, #12
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	e000e100 	.word	0xe000e100

08002d0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	4603      	mov	r3, r0
 8002d14:	6039      	str	r1, [r7, #0]
 8002d16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	db0a      	blt.n	8002d36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	b2da      	uxtb	r2, r3
 8002d24:	490c      	ldr	r1, [pc, #48]	; (8002d58 <__NVIC_SetPriority+0x4c>)
 8002d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d2a:	0112      	lsls	r2, r2, #4
 8002d2c:	b2d2      	uxtb	r2, r2
 8002d2e:	440b      	add	r3, r1
 8002d30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d34:	e00a      	b.n	8002d4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	b2da      	uxtb	r2, r3
 8002d3a:	4908      	ldr	r1, [pc, #32]	; (8002d5c <__NVIC_SetPriority+0x50>)
 8002d3c:	79fb      	ldrb	r3, [r7, #7]
 8002d3e:	f003 030f 	and.w	r3, r3, #15
 8002d42:	3b04      	subs	r3, #4
 8002d44:	0112      	lsls	r2, r2, #4
 8002d46:	b2d2      	uxtb	r2, r2
 8002d48:	440b      	add	r3, r1
 8002d4a:	761a      	strb	r2, [r3, #24]
}
 8002d4c:	bf00      	nop
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr
 8002d58:	e000e100 	.word	0xe000e100
 8002d5c:	e000ed00 	.word	0xe000ed00

08002d60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b089      	sub	sp, #36	; 0x24
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f003 0307 	and.w	r3, r3, #7
 8002d72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	f1c3 0307 	rsb	r3, r3, #7
 8002d7a:	2b04      	cmp	r3, #4
 8002d7c:	bf28      	it	cs
 8002d7e:	2304      	movcs	r3, #4
 8002d80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	3304      	adds	r3, #4
 8002d86:	2b06      	cmp	r3, #6
 8002d88:	d902      	bls.n	8002d90 <NVIC_EncodePriority+0x30>
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	3b03      	subs	r3, #3
 8002d8e:	e000      	b.n	8002d92 <NVIC_EncodePriority+0x32>
 8002d90:	2300      	movs	r3, #0
 8002d92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d94:	f04f 32ff 	mov.w	r2, #4294967295
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9e:	43da      	mvns	r2, r3
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	401a      	ands	r2, r3
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002da8:	f04f 31ff 	mov.w	r1, #4294967295
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	fa01 f303 	lsl.w	r3, r1, r3
 8002db2:	43d9      	mvns	r1, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002db8:	4313      	orrs	r3, r2
         );
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3724      	adds	r7, #36	; 0x24
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr

08002dc6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	b082      	sub	sp, #8
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f7ff ff4c 	bl	8002c6c <__NVIC_SetPriorityGrouping>
}
 8002dd4:	bf00      	nop
 8002dd6:	3708      	adds	r7, #8
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b086      	sub	sp, #24
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	4603      	mov	r3, r0
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	607a      	str	r2, [r7, #4]
 8002de8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002dea:	2300      	movs	r3, #0
 8002dec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002dee:	f7ff ff61 	bl	8002cb4 <__NVIC_GetPriorityGrouping>
 8002df2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	68b9      	ldr	r1, [r7, #8]
 8002df8:	6978      	ldr	r0, [r7, #20]
 8002dfa:	f7ff ffb1 	bl	8002d60 <NVIC_EncodePriority>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e04:	4611      	mov	r1, r2
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7ff ff80 	bl	8002d0c <__NVIC_SetPriority>
}
 8002e0c:	bf00      	nop
 8002e0e:	3718      	adds	r7, #24
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e22:	4618      	mov	r0, r3
 8002e24:	f7ff ff54 	bl	8002cd0 <__NVIC_EnableIRQ>
}
 8002e28:	bf00      	nop
 8002e2a:	3708      	adds	r7, #8
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b086      	sub	sp, #24
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002e3c:	f7ff faf4 	bl	8002428 <HAL_GetTick>
 8002e40:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d101      	bne.n	8002e4c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e099      	b.n	8002f80 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2202      	movs	r2, #2
 8002e50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f022 0201 	bic.w	r2, r2, #1
 8002e6a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e6c:	e00f      	b.n	8002e8e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e6e:	f7ff fadb 	bl	8002428 <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	2b05      	cmp	r3, #5
 8002e7a:	d908      	bls.n	8002e8e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2220      	movs	r2, #32
 8002e80:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2203      	movs	r2, #3
 8002e86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e078      	b.n	8002f80 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0301 	and.w	r3, r3, #1
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1e8      	bne.n	8002e6e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ea4:	697a      	ldr	r2, [r7, #20]
 8002ea6:	4b38      	ldr	r3, [pc, #224]	; (8002f88 <HAL_DMA_Init+0x158>)
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685a      	ldr	r2, [r3, #4]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002eba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	691b      	ldr	r3, [r3, #16]
 8002ec0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ec6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	699b      	ldr	r3, [r3, #24]
 8002ecc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ed2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a1b      	ldr	r3, [r3, #32]
 8002ed8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002eda:	697a      	ldr	r2, [r7, #20]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee4:	2b04      	cmp	r3, #4
 8002ee6:	d107      	bne.n	8002ef8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	697a      	ldr	r2, [r7, #20]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	697a      	ldr	r2, [r7, #20]
 8002efe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	f023 0307 	bic.w	r3, r3, #7
 8002f0e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f14:	697a      	ldr	r2, [r7, #20]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1e:	2b04      	cmp	r3, #4
 8002f20:	d117      	bne.n	8002f52 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f26:	697a      	ldr	r2, [r7, #20]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d00e      	beq.n	8002f52 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f000 fa6f 	bl	8003418 <DMA_CheckFifoParam>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d008      	beq.n	8002f52 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2240      	movs	r2, #64	; 0x40
 8002f44:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e016      	b.n	8002f80 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	697a      	ldr	r2, [r7, #20]
 8002f58:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 fa26 	bl	80033ac <DMA_CalcBaseAndBitshift>
 8002f60:	4603      	mov	r3, r0
 8002f62:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f68:	223f      	movs	r2, #63	; 0x3f
 8002f6a:	409a      	lsls	r2, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3718      	adds	r7, #24
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	f010803f 	.word	0xf010803f

08002f8c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b086      	sub	sp, #24
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	607a      	str	r2, [r7, #4]
 8002f98:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d101      	bne.n	8002fb2 <HAL_DMA_Start_IT+0x26>
 8002fae:	2302      	movs	r3, #2
 8002fb0:	e040      	b.n	8003034 <HAL_DMA_Start_IT+0xa8>
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d12f      	bne.n	8003026 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2202      	movs	r2, #2
 8002fca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	68b9      	ldr	r1, [r7, #8]
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	f000 f9b8 	bl	8003350 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fe4:	223f      	movs	r2, #63	; 0x3f
 8002fe6:	409a      	lsls	r2, r3
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f042 0216 	orr.w	r2, r2, #22
 8002ffa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003000:	2b00      	cmp	r3, #0
 8003002:	d007      	beq.n	8003014 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f042 0208 	orr.w	r2, r2, #8
 8003012:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f042 0201 	orr.w	r2, r2, #1
 8003022:	601a      	str	r2, [r3, #0]
 8003024:	e005      	b.n	8003032 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800302e:	2302      	movs	r3, #2
 8003030:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003032:	7dfb      	ldrb	r3, [r7, #23]
}
 8003034:	4618      	mov	r0, r3
 8003036:	3718      	adds	r7, #24
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b086      	sub	sp, #24
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003044:	2300      	movs	r3, #0
 8003046:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003048:	4b8e      	ldr	r3, [pc, #568]	; (8003284 <HAL_DMA_IRQHandler+0x248>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a8e      	ldr	r2, [pc, #568]	; (8003288 <HAL_DMA_IRQHandler+0x24c>)
 800304e:	fba2 2303 	umull	r2, r3, r2, r3
 8003052:	0a9b      	lsrs	r3, r3, #10
 8003054:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800305a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003066:	2208      	movs	r2, #8
 8003068:	409a      	lsls	r2, r3
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	4013      	ands	r3, r2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d01a      	beq.n	80030a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0304 	and.w	r3, r3, #4
 800307c:	2b00      	cmp	r3, #0
 800307e:	d013      	beq.n	80030a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f022 0204 	bic.w	r2, r2, #4
 800308e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003094:	2208      	movs	r2, #8
 8003096:	409a      	lsls	r2, r3
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a0:	f043 0201 	orr.w	r2, r3, #1
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ac:	2201      	movs	r2, #1
 80030ae:	409a      	lsls	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	4013      	ands	r3, r2
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d012      	beq.n	80030de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00b      	beq.n	80030de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ca:	2201      	movs	r2, #1
 80030cc:	409a      	lsls	r2, r3
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030d6:	f043 0202 	orr.w	r2, r3, #2
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e2:	2204      	movs	r2, #4
 80030e4:	409a      	lsls	r2, r3
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	4013      	ands	r3, r2
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d012      	beq.n	8003114 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0302 	and.w	r3, r3, #2
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d00b      	beq.n	8003114 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003100:	2204      	movs	r2, #4
 8003102:	409a      	lsls	r2, r3
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800310c:	f043 0204 	orr.w	r2, r3, #4
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003118:	2210      	movs	r2, #16
 800311a:	409a      	lsls	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	4013      	ands	r3, r2
 8003120:	2b00      	cmp	r3, #0
 8003122:	d043      	beq.n	80031ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0308 	and.w	r3, r3, #8
 800312e:	2b00      	cmp	r3, #0
 8003130:	d03c      	beq.n	80031ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003136:	2210      	movs	r2, #16
 8003138:	409a      	lsls	r2, r3
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d018      	beq.n	800317e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d108      	bne.n	800316c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315e:	2b00      	cmp	r3, #0
 8003160:	d024      	beq.n	80031ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	4798      	blx	r3
 800316a:	e01f      	b.n	80031ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003170:	2b00      	cmp	r3, #0
 8003172:	d01b      	beq.n	80031ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	4798      	blx	r3
 800317c:	e016      	b.n	80031ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003188:	2b00      	cmp	r3, #0
 800318a:	d107      	bne.n	800319c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f022 0208 	bic.w	r2, r2, #8
 800319a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d003      	beq.n	80031ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031b0:	2220      	movs	r2, #32
 80031b2:	409a      	lsls	r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	4013      	ands	r3, r2
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	f000 808f 	beq.w	80032dc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0310 	and.w	r3, r3, #16
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	f000 8087 	beq.w	80032dc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031d2:	2220      	movs	r2, #32
 80031d4:	409a      	lsls	r2, r3
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	2b05      	cmp	r3, #5
 80031e4:	d136      	bne.n	8003254 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f022 0216 	bic.w	r2, r2, #22
 80031f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	695a      	ldr	r2, [r3, #20]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003204:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320a:	2b00      	cmp	r3, #0
 800320c:	d103      	bne.n	8003216 <HAL_DMA_IRQHandler+0x1da>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003212:	2b00      	cmp	r3, #0
 8003214:	d007      	beq.n	8003226 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f022 0208 	bic.w	r2, r2, #8
 8003224:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800322a:	223f      	movs	r2, #63	; 0x3f
 800322c:	409a      	lsls	r2, r3
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2201      	movs	r2, #1
 8003236:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003246:	2b00      	cmp	r3, #0
 8003248:	d07e      	beq.n	8003348 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	4798      	blx	r3
        }
        return;
 8003252:	e079      	b.n	8003348 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d01d      	beq.n	800329e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d10d      	bne.n	800328c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003274:	2b00      	cmp	r3, #0
 8003276:	d031      	beq.n	80032dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	4798      	blx	r3
 8003280:	e02c      	b.n	80032dc <HAL_DMA_IRQHandler+0x2a0>
 8003282:	bf00      	nop
 8003284:	20000000 	.word	0x20000000
 8003288:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003290:	2b00      	cmp	r3, #0
 8003292:	d023      	beq.n	80032dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	4798      	blx	r3
 800329c:	e01e      	b.n	80032dc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d10f      	bne.n	80032cc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f022 0210 	bic.w	r2, r2, #16
 80032ba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d003      	beq.n	80032dc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d032      	beq.n	800334a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e8:	f003 0301 	and.w	r3, r3, #1
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d022      	beq.n	8003336 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2205      	movs	r2, #5
 80032f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f022 0201 	bic.w	r2, r2, #1
 8003306:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	3301      	adds	r3, #1
 800330c:	60bb      	str	r3, [r7, #8]
 800330e:	697a      	ldr	r2, [r7, #20]
 8003310:	429a      	cmp	r2, r3
 8003312:	d307      	bcc.n	8003324 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	2b00      	cmp	r3, #0
 8003320:	d1f2      	bne.n	8003308 <HAL_DMA_IRQHandler+0x2cc>
 8003322:	e000      	b.n	8003326 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003324:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2201      	movs	r2, #1
 800332a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800333a:	2b00      	cmp	r3, #0
 800333c:	d005      	beq.n	800334a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	4798      	blx	r3
 8003346:	e000      	b.n	800334a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003348:	bf00      	nop
    }
  }
}
 800334a:	3718      	adds	r7, #24
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003350:	b480      	push	{r7}
 8003352:	b085      	sub	sp, #20
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	607a      	str	r2, [r7, #4]
 800335c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800336c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	683a      	ldr	r2, [r7, #0]
 8003374:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	2b40      	cmp	r3, #64	; 0x40
 800337c:	d108      	bne.n	8003390 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68ba      	ldr	r2, [r7, #8]
 800338c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800338e:	e007      	b.n	80033a0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68ba      	ldr	r2, [r7, #8]
 8003396:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	60da      	str	r2, [r3, #12]
}
 80033a0:	bf00      	nop
 80033a2:	3714      	adds	r7, #20
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b085      	sub	sp, #20
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	3b10      	subs	r3, #16
 80033bc:	4a14      	ldr	r2, [pc, #80]	; (8003410 <DMA_CalcBaseAndBitshift+0x64>)
 80033be:	fba2 2303 	umull	r2, r3, r2, r3
 80033c2:	091b      	lsrs	r3, r3, #4
 80033c4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80033c6:	4a13      	ldr	r2, [pc, #76]	; (8003414 <DMA_CalcBaseAndBitshift+0x68>)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	4413      	add	r3, r2
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	461a      	mov	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2b03      	cmp	r3, #3
 80033d8:	d909      	bls.n	80033ee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80033e2:	f023 0303 	bic.w	r3, r3, #3
 80033e6:	1d1a      	adds	r2, r3, #4
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	659a      	str	r2, [r3, #88]	; 0x58
 80033ec:	e007      	b.n	80033fe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80033f6:	f023 0303 	bic.w	r3, r3, #3
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003402:	4618      	mov	r0, r3
 8003404:	3714      	adds	r7, #20
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	aaaaaaab 	.word	0xaaaaaaab
 8003414:	080095e8 	.word	0x080095e8

08003418 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003418:	b480      	push	{r7}
 800341a:	b085      	sub	sp, #20
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003420:	2300      	movs	r3, #0
 8003422:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003428:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	699b      	ldr	r3, [r3, #24]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d11f      	bne.n	8003472 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	2b03      	cmp	r3, #3
 8003436:	d856      	bhi.n	80034e6 <DMA_CheckFifoParam+0xce>
 8003438:	a201      	add	r2, pc, #4	; (adr r2, 8003440 <DMA_CheckFifoParam+0x28>)
 800343a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800343e:	bf00      	nop
 8003440:	08003451 	.word	0x08003451
 8003444:	08003463 	.word	0x08003463
 8003448:	08003451 	.word	0x08003451
 800344c:	080034e7 	.word	0x080034e7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003454:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d046      	beq.n	80034ea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003460:	e043      	b.n	80034ea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003466:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800346a:	d140      	bne.n	80034ee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003470:	e03d      	b.n	80034ee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800347a:	d121      	bne.n	80034c0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	2b03      	cmp	r3, #3
 8003480:	d837      	bhi.n	80034f2 <DMA_CheckFifoParam+0xda>
 8003482:	a201      	add	r2, pc, #4	; (adr r2, 8003488 <DMA_CheckFifoParam+0x70>)
 8003484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003488:	08003499 	.word	0x08003499
 800348c:	0800349f 	.word	0x0800349f
 8003490:	08003499 	.word	0x08003499
 8003494:	080034b1 	.word	0x080034b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	73fb      	strb	r3, [r7, #15]
      break;
 800349c:	e030      	b.n	8003500 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d025      	beq.n	80034f6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034ae:	e022      	b.n	80034f6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80034b8:	d11f      	bne.n	80034fa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80034be:	e01c      	b.n	80034fa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d903      	bls.n	80034ce <DMA_CheckFifoParam+0xb6>
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	2b03      	cmp	r3, #3
 80034ca:	d003      	beq.n	80034d4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80034cc:	e018      	b.n	8003500 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	73fb      	strb	r3, [r7, #15]
      break;
 80034d2:	e015      	b.n	8003500 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d00e      	beq.n	80034fe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	73fb      	strb	r3, [r7, #15]
      break;
 80034e4:	e00b      	b.n	80034fe <DMA_CheckFifoParam+0xe6>
      break;
 80034e6:	bf00      	nop
 80034e8:	e00a      	b.n	8003500 <DMA_CheckFifoParam+0xe8>
      break;
 80034ea:	bf00      	nop
 80034ec:	e008      	b.n	8003500 <DMA_CheckFifoParam+0xe8>
      break;
 80034ee:	bf00      	nop
 80034f0:	e006      	b.n	8003500 <DMA_CheckFifoParam+0xe8>
      break;
 80034f2:	bf00      	nop
 80034f4:	e004      	b.n	8003500 <DMA_CheckFifoParam+0xe8>
      break;
 80034f6:	bf00      	nop
 80034f8:	e002      	b.n	8003500 <DMA_CheckFifoParam+0xe8>
      break;   
 80034fa:	bf00      	nop
 80034fc:	e000      	b.n	8003500 <DMA_CheckFifoParam+0xe8>
      break;
 80034fe:	bf00      	nop
    }
  } 
  
  return status; 
 8003500:	7bfb      	ldrb	r3, [r7, #15]
}
 8003502:	4618      	mov	r0, r3
 8003504:	3714      	adds	r7, #20
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop

08003510 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003510:	b480      	push	{r7}
 8003512:	b089      	sub	sp, #36	; 0x24
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800351a:	2300      	movs	r3, #0
 800351c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800351e:	2300      	movs	r3, #0
 8003520:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003522:	2300      	movs	r3, #0
 8003524:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003526:	2300      	movs	r3, #0
 8003528:	61fb      	str	r3, [r7, #28]
 800352a:	e159      	b.n	80037e0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800352c:	2201      	movs	r2, #1
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	fa02 f303 	lsl.w	r3, r2, r3
 8003534:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	697a      	ldr	r2, [r7, #20]
 800353c:	4013      	ands	r3, r2
 800353e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003540:	693a      	ldr	r2, [r7, #16]
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	429a      	cmp	r2, r3
 8003546:	f040 8148 	bne.w	80037da <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f003 0303 	and.w	r3, r3, #3
 8003552:	2b01      	cmp	r3, #1
 8003554:	d005      	beq.n	8003562 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800355e:	2b02      	cmp	r3, #2
 8003560:	d130      	bne.n	80035c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	2203      	movs	r2, #3
 800356e:	fa02 f303 	lsl.w	r3, r2, r3
 8003572:	43db      	mvns	r3, r3
 8003574:	69ba      	ldr	r2, [r7, #24]
 8003576:	4013      	ands	r3, r2
 8003578:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	68da      	ldr	r2, [r3, #12]
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	005b      	lsls	r3, r3, #1
 8003582:	fa02 f303 	lsl.w	r3, r2, r3
 8003586:	69ba      	ldr	r2, [r7, #24]
 8003588:	4313      	orrs	r3, r2
 800358a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	69ba      	ldr	r2, [r7, #24]
 8003590:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003598:	2201      	movs	r2, #1
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	fa02 f303 	lsl.w	r3, r2, r3
 80035a0:	43db      	mvns	r3, r3
 80035a2:	69ba      	ldr	r2, [r7, #24]
 80035a4:	4013      	ands	r3, r2
 80035a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	091b      	lsrs	r3, r3, #4
 80035ae:	f003 0201 	and.w	r2, r3, #1
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	fa02 f303 	lsl.w	r3, r2, r3
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f003 0303 	and.w	r3, r3, #3
 80035cc:	2b03      	cmp	r3, #3
 80035ce:	d017      	beq.n	8003600 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	005b      	lsls	r3, r3, #1
 80035da:	2203      	movs	r2, #3
 80035dc:	fa02 f303 	lsl.w	r3, r2, r3
 80035e0:	43db      	mvns	r3, r3
 80035e2:	69ba      	ldr	r2, [r7, #24]
 80035e4:	4013      	ands	r3, r2
 80035e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	689a      	ldr	r2, [r3, #8]
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	005b      	lsls	r3, r3, #1
 80035f0:	fa02 f303 	lsl.w	r3, r2, r3
 80035f4:	69ba      	ldr	r2, [r7, #24]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f003 0303 	and.w	r3, r3, #3
 8003608:	2b02      	cmp	r3, #2
 800360a:	d123      	bne.n	8003654 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	08da      	lsrs	r2, r3, #3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	3208      	adds	r2, #8
 8003614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003618:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	f003 0307 	and.w	r3, r3, #7
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	220f      	movs	r2, #15
 8003624:	fa02 f303 	lsl.w	r3, r2, r3
 8003628:	43db      	mvns	r3, r3
 800362a:	69ba      	ldr	r2, [r7, #24]
 800362c:	4013      	ands	r3, r2
 800362e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	691a      	ldr	r2, [r3, #16]
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	f003 0307 	and.w	r3, r3, #7
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	fa02 f303 	lsl.w	r3, r2, r3
 8003640:	69ba      	ldr	r2, [r7, #24]
 8003642:	4313      	orrs	r3, r2
 8003644:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	08da      	lsrs	r2, r3, #3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	3208      	adds	r2, #8
 800364e:	69b9      	ldr	r1, [r7, #24]
 8003650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	005b      	lsls	r3, r3, #1
 800365e:	2203      	movs	r2, #3
 8003660:	fa02 f303 	lsl.w	r3, r2, r3
 8003664:	43db      	mvns	r3, r3
 8003666:	69ba      	ldr	r2, [r7, #24]
 8003668:	4013      	ands	r3, r2
 800366a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f003 0203 	and.w	r2, r3, #3
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	005b      	lsls	r3, r3, #1
 8003678:	fa02 f303 	lsl.w	r3, r2, r3
 800367c:	69ba      	ldr	r2, [r7, #24]
 800367e:	4313      	orrs	r3, r2
 8003680:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	69ba      	ldr	r2, [r7, #24]
 8003686:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003690:	2b00      	cmp	r3, #0
 8003692:	f000 80a2 	beq.w	80037da <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003696:	2300      	movs	r3, #0
 8003698:	60fb      	str	r3, [r7, #12]
 800369a:	4b57      	ldr	r3, [pc, #348]	; (80037f8 <HAL_GPIO_Init+0x2e8>)
 800369c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800369e:	4a56      	ldr	r2, [pc, #344]	; (80037f8 <HAL_GPIO_Init+0x2e8>)
 80036a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036a4:	6453      	str	r3, [r2, #68]	; 0x44
 80036a6:	4b54      	ldr	r3, [pc, #336]	; (80037f8 <HAL_GPIO_Init+0x2e8>)
 80036a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036ae:	60fb      	str	r3, [r7, #12]
 80036b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036b2:	4a52      	ldr	r2, [pc, #328]	; (80037fc <HAL_GPIO_Init+0x2ec>)
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	089b      	lsrs	r3, r3, #2
 80036b8:	3302      	adds	r3, #2
 80036ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	f003 0303 	and.w	r3, r3, #3
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	220f      	movs	r2, #15
 80036ca:	fa02 f303 	lsl.w	r3, r2, r3
 80036ce:	43db      	mvns	r3, r3
 80036d0:	69ba      	ldr	r2, [r7, #24]
 80036d2:	4013      	ands	r3, r2
 80036d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a49      	ldr	r2, [pc, #292]	; (8003800 <HAL_GPIO_Init+0x2f0>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d019      	beq.n	8003712 <HAL_GPIO_Init+0x202>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a48      	ldr	r2, [pc, #288]	; (8003804 <HAL_GPIO_Init+0x2f4>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d013      	beq.n	800370e <HAL_GPIO_Init+0x1fe>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a47      	ldr	r2, [pc, #284]	; (8003808 <HAL_GPIO_Init+0x2f8>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d00d      	beq.n	800370a <HAL_GPIO_Init+0x1fa>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a46      	ldr	r2, [pc, #280]	; (800380c <HAL_GPIO_Init+0x2fc>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d007      	beq.n	8003706 <HAL_GPIO_Init+0x1f6>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a45      	ldr	r2, [pc, #276]	; (8003810 <HAL_GPIO_Init+0x300>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d101      	bne.n	8003702 <HAL_GPIO_Init+0x1f2>
 80036fe:	2304      	movs	r3, #4
 8003700:	e008      	b.n	8003714 <HAL_GPIO_Init+0x204>
 8003702:	2307      	movs	r3, #7
 8003704:	e006      	b.n	8003714 <HAL_GPIO_Init+0x204>
 8003706:	2303      	movs	r3, #3
 8003708:	e004      	b.n	8003714 <HAL_GPIO_Init+0x204>
 800370a:	2302      	movs	r3, #2
 800370c:	e002      	b.n	8003714 <HAL_GPIO_Init+0x204>
 800370e:	2301      	movs	r3, #1
 8003710:	e000      	b.n	8003714 <HAL_GPIO_Init+0x204>
 8003712:	2300      	movs	r3, #0
 8003714:	69fa      	ldr	r2, [r7, #28]
 8003716:	f002 0203 	and.w	r2, r2, #3
 800371a:	0092      	lsls	r2, r2, #2
 800371c:	4093      	lsls	r3, r2
 800371e:	69ba      	ldr	r2, [r7, #24]
 8003720:	4313      	orrs	r3, r2
 8003722:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003724:	4935      	ldr	r1, [pc, #212]	; (80037fc <HAL_GPIO_Init+0x2ec>)
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	089b      	lsrs	r3, r3, #2
 800372a:	3302      	adds	r3, #2
 800372c:	69ba      	ldr	r2, [r7, #24]
 800372e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003732:	4b38      	ldr	r3, [pc, #224]	; (8003814 <HAL_GPIO_Init+0x304>)
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	43db      	mvns	r3, r3
 800373c:	69ba      	ldr	r2, [r7, #24]
 800373e:	4013      	ands	r3, r2
 8003740:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d003      	beq.n	8003756 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800374e:	69ba      	ldr	r2, [r7, #24]
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	4313      	orrs	r3, r2
 8003754:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003756:	4a2f      	ldr	r2, [pc, #188]	; (8003814 <HAL_GPIO_Init+0x304>)
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800375c:	4b2d      	ldr	r3, [pc, #180]	; (8003814 <HAL_GPIO_Init+0x304>)
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	43db      	mvns	r3, r3
 8003766:	69ba      	ldr	r2, [r7, #24]
 8003768:	4013      	ands	r3, r2
 800376a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d003      	beq.n	8003780 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003778:	69ba      	ldr	r2, [r7, #24]
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	4313      	orrs	r3, r2
 800377e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003780:	4a24      	ldr	r2, [pc, #144]	; (8003814 <HAL_GPIO_Init+0x304>)
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003786:	4b23      	ldr	r3, [pc, #140]	; (8003814 <HAL_GPIO_Init+0x304>)
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	43db      	mvns	r3, r3
 8003790:	69ba      	ldr	r2, [r7, #24]
 8003792:	4013      	ands	r3, r2
 8003794:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d003      	beq.n	80037aa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80037a2:	69ba      	ldr	r2, [r7, #24]
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80037aa:	4a1a      	ldr	r2, [pc, #104]	; (8003814 <HAL_GPIO_Init+0x304>)
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037b0:	4b18      	ldr	r3, [pc, #96]	; (8003814 <HAL_GPIO_Init+0x304>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	43db      	mvns	r3, r3
 80037ba:	69ba      	ldr	r2, [r7, #24]
 80037bc:	4013      	ands	r3, r2
 80037be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d003      	beq.n	80037d4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80037cc:	69ba      	ldr	r2, [r7, #24]
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037d4:	4a0f      	ldr	r2, [pc, #60]	; (8003814 <HAL_GPIO_Init+0x304>)
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	3301      	adds	r3, #1
 80037de:	61fb      	str	r3, [r7, #28]
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	2b0f      	cmp	r3, #15
 80037e4:	f67f aea2 	bls.w	800352c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80037e8:	bf00      	nop
 80037ea:	bf00      	nop
 80037ec:	3724      	adds	r7, #36	; 0x24
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	40023800 	.word	0x40023800
 80037fc:	40013800 	.word	0x40013800
 8003800:	40020000 	.word	0x40020000
 8003804:	40020400 	.word	0x40020400
 8003808:	40020800 	.word	0x40020800
 800380c:	40020c00 	.word	0x40020c00
 8003810:	40021000 	.word	0x40021000
 8003814:	40013c00 	.word	0x40013c00

08003818 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003818:	b480      	push	{r7}
 800381a:	b085      	sub	sp, #20
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	460b      	mov	r3, r1
 8003822:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	691a      	ldr	r2, [r3, #16]
 8003828:	887b      	ldrh	r3, [r7, #2]
 800382a:	4013      	ands	r3, r2
 800382c:	2b00      	cmp	r3, #0
 800382e:	d002      	beq.n	8003836 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003830:	2301      	movs	r3, #1
 8003832:	73fb      	strb	r3, [r7, #15]
 8003834:	e001      	b.n	800383a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003836:	2300      	movs	r3, #0
 8003838:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800383a:	7bfb      	ldrb	r3, [r7, #15]
}
 800383c:	4618      	mov	r0, r3
 800383e:	3714      	adds	r7, #20
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	460b      	mov	r3, r1
 8003852:	807b      	strh	r3, [r7, #2]
 8003854:	4613      	mov	r3, r2
 8003856:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003858:	787b      	ldrb	r3, [r7, #1]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d003      	beq.n	8003866 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800385e:	887a      	ldrh	r2, [r7, #2]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003864:	e003      	b.n	800386e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003866:	887b      	ldrh	r3, [r7, #2]
 8003868:	041a      	lsls	r2, r3, #16
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	619a      	str	r2, [r3, #24]
}
 800386e:	bf00      	nop
 8003870:	370c      	adds	r7, #12
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
	...

0800387c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d101      	bne.n	800388e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e12b      	b.n	8003ae6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003894:	b2db      	uxtb	r3, r3
 8003896:	2b00      	cmp	r3, #0
 8003898:	d106      	bne.n	80038a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f7fd fc02 	bl	80010ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2224      	movs	r2, #36	; 0x24
 80038ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f022 0201 	bic.w	r2, r2, #1
 80038be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80038e0:	f001 f888 	bl	80049f4 <HAL_RCC_GetPCLK1Freq>
 80038e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	4a81      	ldr	r2, [pc, #516]	; (8003af0 <HAL_I2C_Init+0x274>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d807      	bhi.n	8003900 <HAL_I2C_Init+0x84>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	4a80      	ldr	r2, [pc, #512]	; (8003af4 <HAL_I2C_Init+0x278>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	bf94      	ite	ls
 80038f8:	2301      	movls	r3, #1
 80038fa:	2300      	movhi	r3, #0
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	e006      	b.n	800390e <HAL_I2C_Init+0x92>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	4a7d      	ldr	r2, [pc, #500]	; (8003af8 <HAL_I2C_Init+0x27c>)
 8003904:	4293      	cmp	r3, r2
 8003906:	bf94      	ite	ls
 8003908:	2301      	movls	r3, #1
 800390a:	2300      	movhi	r3, #0
 800390c:	b2db      	uxtb	r3, r3
 800390e:	2b00      	cmp	r3, #0
 8003910:	d001      	beq.n	8003916 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e0e7      	b.n	8003ae6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	4a78      	ldr	r2, [pc, #480]	; (8003afc <HAL_I2C_Init+0x280>)
 800391a:	fba2 2303 	umull	r2, r3, r2, r3
 800391e:	0c9b      	lsrs	r3, r3, #18
 8003920:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68ba      	ldr	r2, [r7, #8]
 8003932:	430a      	orrs	r2, r1
 8003934:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	6a1b      	ldr	r3, [r3, #32]
 800393c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	4a6a      	ldr	r2, [pc, #424]	; (8003af0 <HAL_I2C_Init+0x274>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d802      	bhi.n	8003950 <HAL_I2C_Init+0xd4>
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	3301      	adds	r3, #1
 800394e:	e009      	b.n	8003964 <HAL_I2C_Init+0xe8>
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003956:	fb02 f303 	mul.w	r3, r2, r3
 800395a:	4a69      	ldr	r2, [pc, #420]	; (8003b00 <HAL_I2C_Init+0x284>)
 800395c:	fba2 2303 	umull	r2, r3, r2, r3
 8003960:	099b      	lsrs	r3, r3, #6
 8003962:	3301      	adds	r3, #1
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	6812      	ldr	r2, [r2, #0]
 8003968:	430b      	orrs	r3, r1
 800396a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	69db      	ldr	r3, [r3, #28]
 8003972:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003976:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	495c      	ldr	r1, [pc, #368]	; (8003af0 <HAL_I2C_Init+0x274>)
 8003980:	428b      	cmp	r3, r1
 8003982:	d819      	bhi.n	80039b8 <HAL_I2C_Init+0x13c>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	1e59      	subs	r1, r3, #1
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	005b      	lsls	r3, r3, #1
 800398e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003992:	1c59      	adds	r1, r3, #1
 8003994:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003998:	400b      	ands	r3, r1
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00a      	beq.n	80039b4 <HAL_I2C_Init+0x138>
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	1e59      	subs	r1, r3, #1
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	005b      	lsls	r3, r3, #1
 80039a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80039ac:	3301      	adds	r3, #1
 80039ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039b2:	e051      	b.n	8003a58 <HAL_I2C_Init+0x1dc>
 80039b4:	2304      	movs	r3, #4
 80039b6:	e04f      	b.n	8003a58 <HAL_I2C_Init+0x1dc>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d111      	bne.n	80039e4 <HAL_I2C_Init+0x168>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	1e58      	subs	r0, r3, #1
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6859      	ldr	r1, [r3, #4]
 80039c8:	460b      	mov	r3, r1
 80039ca:	005b      	lsls	r3, r3, #1
 80039cc:	440b      	add	r3, r1
 80039ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80039d2:	3301      	adds	r3, #1
 80039d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039d8:	2b00      	cmp	r3, #0
 80039da:	bf0c      	ite	eq
 80039dc:	2301      	moveq	r3, #1
 80039de:	2300      	movne	r3, #0
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	e012      	b.n	8003a0a <HAL_I2C_Init+0x18e>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	1e58      	subs	r0, r3, #1
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6859      	ldr	r1, [r3, #4]
 80039ec:	460b      	mov	r3, r1
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	440b      	add	r3, r1
 80039f2:	0099      	lsls	r1, r3, #2
 80039f4:	440b      	add	r3, r1
 80039f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80039fa:	3301      	adds	r3, #1
 80039fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	bf0c      	ite	eq
 8003a04:	2301      	moveq	r3, #1
 8003a06:	2300      	movne	r3, #0
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d001      	beq.n	8003a12 <HAL_I2C_Init+0x196>
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e022      	b.n	8003a58 <HAL_I2C_Init+0x1dc>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d10e      	bne.n	8003a38 <HAL_I2C_Init+0x1bc>
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	1e58      	subs	r0, r3, #1
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6859      	ldr	r1, [r3, #4]
 8003a22:	460b      	mov	r3, r1
 8003a24:	005b      	lsls	r3, r3, #1
 8003a26:	440b      	add	r3, r1
 8003a28:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a36:	e00f      	b.n	8003a58 <HAL_I2C_Init+0x1dc>
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	1e58      	subs	r0, r3, #1
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6859      	ldr	r1, [r3, #4]
 8003a40:	460b      	mov	r3, r1
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	440b      	add	r3, r1
 8003a46:	0099      	lsls	r1, r3, #2
 8003a48:	440b      	add	r3, r1
 8003a4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a4e:	3301      	adds	r3, #1
 8003a50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a58:	6879      	ldr	r1, [r7, #4]
 8003a5a:	6809      	ldr	r1, [r1, #0]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	69da      	ldr	r2, [r3, #28]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a1b      	ldr	r3, [r3, #32]
 8003a72:	431a      	orrs	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	430a      	orrs	r2, r1
 8003a7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003a86:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	6911      	ldr	r1, [r2, #16]
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	68d2      	ldr	r2, [r2, #12]
 8003a92:	4311      	orrs	r1, r2
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	6812      	ldr	r2, [r2, #0]
 8003a98:	430b      	orrs	r3, r1
 8003a9a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	695a      	ldr	r2, [r3, #20]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	699b      	ldr	r3, [r3, #24]
 8003aae:	431a      	orrs	r2, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	430a      	orrs	r2, r1
 8003ab6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f042 0201 	orr.w	r2, r2, #1
 8003ac6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2220      	movs	r2, #32
 8003ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	000186a0 	.word	0x000186a0
 8003af4:	001e847f 	.word	0x001e847f
 8003af8:	003d08ff 	.word	0x003d08ff
 8003afc:	431bde83 	.word	0x431bde83
 8003b00:	10624dd3 	.word	0x10624dd3

08003b04 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b088      	sub	sp, #32
 8003b08:	af02      	add	r7, sp, #8
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	607a      	str	r2, [r7, #4]
 8003b0e:	461a      	mov	r2, r3
 8003b10:	460b      	mov	r3, r1
 8003b12:	817b      	strh	r3, [r7, #10]
 8003b14:	4613      	mov	r3, r2
 8003b16:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b18:	f7fe fc86 	bl	8002428 <HAL_GetTick>
 8003b1c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b20      	cmp	r3, #32
 8003b28:	f040 80e0 	bne.w	8003cec <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	9300      	str	r3, [sp, #0]
 8003b30:	2319      	movs	r3, #25
 8003b32:	2201      	movs	r2, #1
 8003b34:	4970      	ldr	r1, [pc, #448]	; (8003cf8 <HAL_I2C_Master_Transmit+0x1f4>)
 8003b36:	68f8      	ldr	r0, [r7, #12]
 8003b38:	f000 f964 	bl	8003e04 <I2C_WaitOnFlagUntilTimeout>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d001      	beq.n	8003b46 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003b42:	2302      	movs	r3, #2
 8003b44:	e0d3      	b.n	8003cee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d101      	bne.n	8003b54 <HAL_I2C_Master_Transmit+0x50>
 8003b50:	2302      	movs	r3, #2
 8003b52:	e0cc      	b.n	8003cee <HAL_I2C_Master_Transmit+0x1ea>
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d007      	beq.n	8003b7a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f042 0201 	orr.w	r2, r2, #1
 8003b78:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b88:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2221      	movs	r2, #33	; 0x21
 8003b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2210      	movs	r2, #16
 8003b96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	893a      	ldrh	r2, [r7, #8]
 8003baa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb0:	b29a      	uxth	r2, r3
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	4a50      	ldr	r2, [pc, #320]	; (8003cfc <HAL_I2C_Master_Transmit+0x1f8>)
 8003bba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003bbc:	8979      	ldrh	r1, [r7, #10]
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	6a3a      	ldr	r2, [r7, #32]
 8003bc2:	68f8      	ldr	r0, [r7, #12]
 8003bc4:	f000 f89c 	bl	8003d00 <I2C_MasterRequestWrite>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d001      	beq.n	8003bd2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e08d      	b.n	8003cee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	613b      	str	r3, [r7, #16]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	695b      	ldr	r3, [r3, #20]
 8003bdc:	613b      	str	r3, [r7, #16]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	699b      	ldr	r3, [r3, #24]
 8003be4:	613b      	str	r3, [r7, #16]
 8003be6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003be8:	e066      	b.n	8003cb8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bea:	697a      	ldr	r2, [r7, #20]
 8003bec:	6a39      	ldr	r1, [r7, #32]
 8003bee:	68f8      	ldr	r0, [r7, #12]
 8003bf0:	f000 f9de 	bl	8003fb0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00d      	beq.n	8003c16 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfe:	2b04      	cmp	r3, #4
 8003c00:	d107      	bne.n	8003c12 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c10:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e06b      	b.n	8003cee <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1a:	781a      	ldrb	r2, [r3, #0]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c26:	1c5a      	adds	r2, r3, #1
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	3b01      	subs	r3, #1
 8003c34:	b29a      	uxth	r2, r3
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c3e:	3b01      	subs	r3, #1
 8003c40:	b29a      	uxth	r2, r3
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	695b      	ldr	r3, [r3, #20]
 8003c4c:	f003 0304 	and.w	r3, r3, #4
 8003c50:	2b04      	cmp	r3, #4
 8003c52:	d11b      	bne.n	8003c8c <HAL_I2C_Master_Transmit+0x188>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d017      	beq.n	8003c8c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c60:	781a      	ldrb	r2, [r3, #0]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6c:	1c5a      	adds	r2, r3, #1
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	3b01      	subs	r3, #1
 8003c7a:	b29a      	uxth	r2, r3
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c84:	3b01      	subs	r3, #1
 8003c86:	b29a      	uxth	r2, r3
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c8c:	697a      	ldr	r2, [r7, #20]
 8003c8e:	6a39      	ldr	r1, [r7, #32]
 8003c90:	68f8      	ldr	r0, [r7, #12]
 8003c92:	f000 f9ce 	bl	8004032 <I2C_WaitOnBTFFlagUntilTimeout>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00d      	beq.n	8003cb8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca0:	2b04      	cmp	r3, #4
 8003ca2:	d107      	bne.n	8003cb4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cb2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e01a      	b.n	8003cee <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d194      	bne.n	8003bea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2220      	movs	r2, #32
 8003cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	e000      	b.n	8003cee <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003cec:	2302      	movs	r3, #2
  }
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3718      	adds	r7, #24
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	00100002 	.word	0x00100002
 8003cfc:	ffff0000 	.word	0xffff0000

08003d00 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b088      	sub	sp, #32
 8003d04:	af02      	add	r7, sp, #8
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	607a      	str	r2, [r7, #4]
 8003d0a:	603b      	str	r3, [r7, #0]
 8003d0c:	460b      	mov	r3, r1
 8003d0e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d14:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	2b08      	cmp	r3, #8
 8003d1a:	d006      	beq.n	8003d2a <I2C_MasterRequestWrite+0x2a>
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d003      	beq.n	8003d2a <I2C_MasterRequestWrite+0x2a>
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d28:	d108      	bne.n	8003d3c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d38:	601a      	str	r2, [r3, #0]
 8003d3a:	e00b      	b.n	8003d54 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d40:	2b12      	cmp	r3, #18
 8003d42:	d107      	bne.n	8003d54 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d52:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	9300      	str	r3, [sp, #0]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d60:	68f8      	ldr	r0, [r7, #12]
 8003d62:	f000 f84f 	bl	8003e04 <I2C_WaitOnFlagUntilTimeout>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d00d      	beq.n	8003d88 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d7a:	d103      	bne.n	8003d84 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d82:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e035      	b.n	8003df4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	691b      	ldr	r3, [r3, #16]
 8003d8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d90:	d108      	bne.n	8003da4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d92:	897b      	ldrh	r3, [r7, #10]
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	461a      	mov	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003da0:	611a      	str	r2, [r3, #16]
 8003da2:	e01b      	b.n	8003ddc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003da4:	897b      	ldrh	r3, [r7, #10]
 8003da6:	11db      	asrs	r3, r3, #7
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	f003 0306 	and.w	r3, r3, #6
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	f063 030f 	orn	r3, r3, #15
 8003db4:	b2da      	uxtb	r2, r3
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	490e      	ldr	r1, [pc, #56]	; (8003dfc <I2C_MasterRequestWrite+0xfc>)
 8003dc2:	68f8      	ldr	r0, [r7, #12]
 8003dc4:	f000 f875 	bl	8003eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d001      	beq.n	8003dd2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e010      	b.n	8003df4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003dd2:	897b      	ldrh	r3, [r7, #10]
 8003dd4:	b2da      	uxtb	r2, r3
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	4907      	ldr	r1, [pc, #28]	; (8003e00 <I2C_MasterRequestWrite+0x100>)
 8003de2:	68f8      	ldr	r0, [r7, #12]
 8003de4:	f000 f865 	bl	8003eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d001      	beq.n	8003df2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e000      	b.n	8003df4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003df2:	2300      	movs	r3, #0
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3718      	adds	r7, #24
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	00010008 	.word	0x00010008
 8003e00:	00010002 	.word	0x00010002

08003e04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	603b      	str	r3, [r7, #0]
 8003e10:	4613      	mov	r3, r2
 8003e12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e14:	e025      	b.n	8003e62 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e1c:	d021      	beq.n	8003e62 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e1e:	f7fe fb03 	bl	8002428 <HAL_GetTick>
 8003e22:	4602      	mov	r2, r0
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	683a      	ldr	r2, [r7, #0]
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d302      	bcc.n	8003e34 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d116      	bne.n	8003e62 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2200      	movs	r2, #0
 8003e38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2220      	movs	r2, #32
 8003e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4e:	f043 0220 	orr.w	r2, r3, #32
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e023      	b.n	8003eaa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	0c1b      	lsrs	r3, r3, #16
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d10d      	bne.n	8003e88 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	43da      	mvns	r2, r3
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	4013      	ands	r3, r2
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	bf0c      	ite	eq
 8003e7e:	2301      	moveq	r3, #1
 8003e80:	2300      	movne	r3, #0
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	461a      	mov	r2, r3
 8003e86:	e00c      	b.n	8003ea2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	43da      	mvns	r2, r3
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	4013      	ands	r3, r2
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	bf0c      	ite	eq
 8003e9a:	2301      	moveq	r3, #1
 8003e9c:	2300      	movne	r3, #0
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	79fb      	ldrb	r3, [r7, #7]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d0b6      	beq.n	8003e16 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3710      	adds	r7, #16
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}

08003eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003eb2:	b580      	push	{r7, lr}
 8003eb4:	b084      	sub	sp, #16
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	60f8      	str	r0, [r7, #12]
 8003eba:	60b9      	str	r1, [r7, #8]
 8003ebc:	607a      	str	r2, [r7, #4]
 8003ebe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ec0:	e051      	b.n	8003f66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	695b      	ldr	r3, [r3, #20]
 8003ec8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ecc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ed0:	d123      	bne.n	8003f1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ee0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003eea:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2220      	movs	r2, #32
 8003ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f06:	f043 0204 	orr.w	r2, r3, #4
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e046      	b.n	8003fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f20:	d021      	beq.n	8003f66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f22:	f7fe fa81 	bl	8002428 <HAL_GetTick>
 8003f26:	4602      	mov	r2, r0
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d302      	bcc.n	8003f38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d116      	bne.n	8003f66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2220      	movs	r2, #32
 8003f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f52:	f043 0220 	orr.w	r2, r3, #32
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e020      	b.n	8003fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	0c1b      	lsrs	r3, r3, #16
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d10c      	bne.n	8003f8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	43da      	mvns	r2, r3
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	bf14      	ite	ne
 8003f82:	2301      	movne	r3, #1
 8003f84:	2300      	moveq	r3, #0
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	e00b      	b.n	8003fa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	699b      	ldr	r3, [r3, #24]
 8003f90:	43da      	mvns	r2, r3
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	4013      	ands	r3, r2
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	bf14      	ite	ne
 8003f9c:	2301      	movne	r3, #1
 8003f9e:	2300      	moveq	r3, #0
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d18d      	bne.n	8003ec2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3710      	adds	r7, #16
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fbc:	e02d      	b.n	800401a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003fbe:	68f8      	ldr	r0, [r7, #12]
 8003fc0:	f000 f878 	bl	80040b4 <I2C_IsAcknowledgeFailed>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d001      	beq.n	8003fce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e02d      	b.n	800402a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd4:	d021      	beq.n	800401a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fd6:	f7fe fa27 	bl	8002428 <HAL_GetTick>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	68ba      	ldr	r2, [r7, #8]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d302      	bcc.n	8003fec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d116      	bne.n	800401a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2220      	movs	r2, #32
 8003ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004006:	f043 0220 	orr.w	r2, r3, #32
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e007      	b.n	800402a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	695b      	ldr	r3, [r3, #20]
 8004020:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004024:	2b80      	cmp	r3, #128	; 0x80
 8004026:	d1ca      	bne.n	8003fbe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3710      	adds	r7, #16
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}

08004032 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004032:	b580      	push	{r7, lr}
 8004034:	b084      	sub	sp, #16
 8004036:	af00      	add	r7, sp, #0
 8004038:	60f8      	str	r0, [r7, #12]
 800403a:	60b9      	str	r1, [r7, #8]
 800403c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800403e:	e02d      	b.n	800409c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004040:	68f8      	ldr	r0, [r7, #12]
 8004042:	f000 f837 	bl	80040b4 <I2C_IsAcknowledgeFailed>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d001      	beq.n	8004050 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e02d      	b.n	80040ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004056:	d021      	beq.n	800409c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004058:	f7fe f9e6 	bl	8002428 <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	68ba      	ldr	r2, [r7, #8]
 8004064:	429a      	cmp	r2, r3
 8004066:	d302      	bcc.n	800406e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d116      	bne.n	800409c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2200      	movs	r2, #0
 8004072:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2220      	movs	r2, #32
 8004078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2200      	movs	r2, #0
 8004080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004088:	f043 0220 	orr.w	r2, r3, #32
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e007      	b.n	80040ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	f003 0304 	and.w	r3, r3, #4
 80040a6:	2b04      	cmp	r3, #4
 80040a8:	d1ca      	bne.n	8004040 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80040aa:	2300      	movs	r3, #0
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3710      	adds	r7, #16
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	695b      	ldr	r3, [r3, #20]
 80040c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040ca:	d11b      	bne.n	8004104 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80040d4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2220      	movs	r2, #32
 80040e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f0:	f043 0204 	orr.w	r2, r3, #4
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e000      	b.n	8004106 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004104:	2300      	movs	r3, #0
}
 8004106:	4618      	mov	r0, r3
 8004108:	370c      	adds	r7, #12
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
	...

08004114 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b086      	sub	sp, #24
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d101      	bne.n	8004126 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e267      	b.n	80045f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0301 	and.w	r3, r3, #1
 800412e:	2b00      	cmp	r3, #0
 8004130:	d075      	beq.n	800421e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004132:	4b88      	ldr	r3, [pc, #544]	; (8004354 <HAL_RCC_OscConfig+0x240>)
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	f003 030c 	and.w	r3, r3, #12
 800413a:	2b04      	cmp	r3, #4
 800413c:	d00c      	beq.n	8004158 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800413e:	4b85      	ldr	r3, [pc, #532]	; (8004354 <HAL_RCC_OscConfig+0x240>)
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004146:	2b08      	cmp	r3, #8
 8004148:	d112      	bne.n	8004170 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800414a:	4b82      	ldr	r3, [pc, #520]	; (8004354 <HAL_RCC_OscConfig+0x240>)
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004152:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004156:	d10b      	bne.n	8004170 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004158:	4b7e      	ldr	r3, [pc, #504]	; (8004354 <HAL_RCC_OscConfig+0x240>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d05b      	beq.n	800421c <HAL_RCC_OscConfig+0x108>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d157      	bne.n	800421c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e242      	b.n	80045f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004178:	d106      	bne.n	8004188 <HAL_RCC_OscConfig+0x74>
 800417a:	4b76      	ldr	r3, [pc, #472]	; (8004354 <HAL_RCC_OscConfig+0x240>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a75      	ldr	r2, [pc, #468]	; (8004354 <HAL_RCC_OscConfig+0x240>)
 8004180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004184:	6013      	str	r3, [r2, #0]
 8004186:	e01d      	b.n	80041c4 <HAL_RCC_OscConfig+0xb0>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004190:	d10c      	bne.n	80041ac <HAL_RCC_OscConfig+0x98>
 8004192:	4b70      	ldr	r3, [pc, #448]	; (8004354 <HAL_RCC_OscConfig+0x240>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a6f      	ldr	r2, [pc, #444]	; (8004354 <HAL_RCC_OscConfig+0x240>)
 8004198:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800419c:	6013      	str	r3, [r2, #0]
 800419e:	4b6d      	ldr	r3, [pc, #436]	; (8004354 <HAL_RCC_OscConfig+0x240>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a6c      	ldr	r2, [pc, #432]	; (8004354 <HAL_RCC_OscConfig+0x240>)
 80041a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041a8:	6013      	str	r3, [r2, #0]
 80041aa:	e00b      	b.n	80041c4 <HAL_RCC_OscConfig+0xb0>
 80041ac:	4b69      	ldr	r3, [pc, #420]	; (8004354 <HAL_RCC_OscConfig+0x240>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a68      	ldr	r2, [pc, #416]	; (8004354 <HAL_RCC_OscConfig+0x240>)
 80041b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041b6:	6013      	str	r3, [r2, #0]
 80041b8:	4b66      	ldr	r3, [pc, #408]	; (8004354 <HAL_RCC_OscConfig+0x240>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a65      	ldr	r2, [pc, #404]	; (8004354 <HAL_RCC_OscConfig+0x240>)
 80041be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d013      	beq.n	80041f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041cc:	f7fe f92c 	bl	8002428 <HAL_GetTick>
 80041d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041d2:	e008      	b.n	80041e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041d4:	f7fe f928 	bl	8002428 <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	2b64      	cmp	r3, #100	; 0x64
 80041e0:	d901      	bls.n	80041e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e207      	b.n	80045f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041e6:	4b5b      	ldr	r3, [pc, #364]	; (8004354 <HAL_RCC_OscConfig+0x240>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d0f0      	beq.n	80041d4 <HAL_RCC_OscConfig+0xc0>
 80041f2:	e014      	b.n	800421e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041f4:	f7fe f918 	bl	8002428 <HAL_GetTick>
 80041f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041fa:	e008      	b.n	800420e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041fc:	f7fe f914 	bl	8002428 <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	2b64      	cmp	r3, #100	; 0x64
 8004208:	d901      	bls.n	800420e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e1f3      	b.n	80045f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800420e:	4b51      	ldr	r3, [pc, #324]	; (8004354 <HAL_RCC_OscConfig+0x240>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d1f0      	bne.n	80041fc <HAL_RCC_OscConfig+0xe8>
 800421a:	e000      	b.n	800421e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800421c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0302 	and.w	r3, r3, #2
 8004226:	2b00      	cmp	r3, #0
 8004228:	d063      	beq.n	80042f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800422a:	4b4a      	ldr	r3, [pc, #296]	; (8004354 <HAL_RCC_OscConfig+0x240>)
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	f003 030c 	and.w	r3, r3, #12
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00b      	beq.n	800424e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004236:	4b47      	ldr	r3, [pc, #284]	; (8004354 <HAL_RCC_OscConfig+0x240>)
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800423e:	2b08      	cmp	r3, #8
 8004240:	d11c      	bne.n	800427c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004242:	4b44      	ldr	r3, [pc, #272]	; (8004354 <HAL_RCC_OscConfig+0x240>)
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d116      	bne.n	800427c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800424e:	4b41      	ldr	r3, [pc, #260]	; (8004354 <HAL_RCC_OscConfig+0x240>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0302 	and.w	r3, r3, #2
 8004256:	2b00      	cmp	r3, #0
 8004258:	d005      	beq.n	8004266 <HAL_RCC_OscConfig+0x152>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	2b01      	cmp	r3, #1
 8004260:	d001      	beq.n	8004266 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e1c7      	b.n	80045f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004266:	4b3b      	ldr	r3, [pc, #236]	; (8004354 <HAL_RCC_OscConfig+0x240>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	00db      	lsls	r3, r3, #3
 8004274:	4937      	ldr	r1, [pc, #220]	; (8004354 <HAL_RCC_OscConfig+0x240>)
 8004276:	4313      	orrs	r3, r2
 8004278:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800427a:	e03a      	b.n	80042f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d020      	beq.n	80042c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004284:	4b34      	ldr	r3, [pc, #208]	; (8004358 <HAL_RCC_OscConfig+0x244>)
 8004286:	2201      	movs	r2, #1
 8004288:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800428a:	f7fe f8cd 	bl	8002428 <HAL_GetTick>
 800428e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004290:	e008      	b.n	80042a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004292:	f7fe f8c9 	bl	8002428 <HAL_GetTick>
 8004296:	4602      	mov	r2, r0
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	2b02      	cmp	r3, #2
 800429e:	d901      	bls.n	80042a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80042a0:	2303      	movs	r3, #3
 80042a2:	e1a8      	b.n	80045f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042a4:	4b2b      	ldr	r3, [pc, #172]	; (8004354 <HAL_RCC_OscConfig+0x240>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0302 	and.w	r3, r3, #2
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d0f0      	beq.n	8004292 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042b0:	4b28      	ldr	r3, [pc, #160]	; (8004354 <HAL_RCC_OscConfig+0x240>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	691b      	ldr	r3, [r3, #16]
 80042bc:	00db      	lsls	r3, r3, #3
 80042be:	4925      	ldr	r1, [pc, #148]	; (8004354 <HAL_RCC_OscConfig+0x240>)
 80042c0:	4313      	orrs	r3, r2
 80042c2:	600b      	str	r3, [r1, #0]
 80042c4:	e015      	b.n	80042f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042c6:	4b24      	ldr	r3, [pc, #144]	; (8004358 <HAL_RCC_OscConfig+0x244>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042cc:	f7fe f8ac 	bl	8002428 <HAL_GetTick>
 80042d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042d2:	e008      	b.n	80042e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042d4:	f7fe f8a8 	bl	8002428 <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d901      	bls.n	80042e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e187      	b.n	80045f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042e6:	4b1b      	ldr	r3, [pc, #108]	; (8004354 <HAL_RCC_OscConfig+0x240>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0302 	and.w	r3, r3, #2
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d1f0      	bne.n	80042d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0308 	and.w	r3, r3, #8
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d036      	beq.n	800436c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d016      	beq.n	8004334 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004306:	4b15      	ldr	r3, [pc, #84]	; (800435c <HAL_RCC_OscConfig+0x248>)
 8004308:	2201      	movs	r2, #1
 800430a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800430c:	f7fe f88c 	bl	8002428 <HAL_GetTick>
 8004310:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004312:	e008      	b.n	8004326 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004314:	f7fe f888 	bl	8002428 <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	2b02      	cmp	r3, #2
 8004320:	d901      	bls.n	8004326 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e167      	b.n	80045f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004326:	4b0b      	ldr	r3, [pc, #44]	; (8004354 <HAL_RCC_OscConfig+0x240>)
 8004328:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800432a:	f003 0302 	and.w	r3, r3, #2
 800432e:	2b00      	cmp	r3, #0
 8004330:	d0f0      	beq.n	8004314 <HAL_RCC_OscConfig+0x200>
 8004332:	e01b      	b.n	800436c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004334:	4b09      	ldr	r3, [pc, #36]	; (800435c <HAL_RCC_OscConfig+0x248>)
 8004336:	2200      	movs	r2, #0
 8004338:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800433a:	f7fe f875 	bl	8002428 <HAL_GetTick>
 800433e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004340:	e00e      	b.n	8004360 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004342:	f7fe f871 	bl	8002428 <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	2b02      	cmp	r3, #2
 800434e:	d907      	bls.n	8004360 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	e150      	b.n	80045f6 <HAL_RCC_OscConfig+0x4e2>
 8004354:	40023800 	.word	0x40023800
 8004358:	42470000 	.word	0x42470000
 800435c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004360:	4b88      	ldr	r3, [pc, #544]	; (8004584 <HAL_RCC_OscConfig+0x470>)
 8004362:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004364:	f003 0302 	and.w	r3, r3, #2
 8004368:	2b00      	cmp	r3, #0
 800436a:	d1ea      	bne.n	8004342 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 0304 	and.w	r3, r3, #4
 8004374:	2b00      	cmp	r3, #0
 8004376:	f000 8097 	beq.w	80044a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800437a:	2300      	movs	r3, #0
 800437c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800437e:	4b81      	ldr	r3, [pc, #516]	; (8004584 <HAL_RCC_OscConfig+0x470>)
 8004380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d10f      	bne.n	80043aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800438a:	2300      	movs	r3, #0
 800438c:	60bb      	str	r3, [r7, #8]
 800438e:	4b7d      	ldr	r3, [pc, #500]	; (8004584 <HAL_RCC_OscConfig+0x470>)
 8004390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004392:	4a7c      	ldr	r2, [pc, #496]	; (8004584 <HAL_RCC_OscConfig+0x470>)
 8004394:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004398:	6413      	str	r3, [r2, #64]	; 0x40
 800439a:	4b7a      	ldr	r3, [pc, #488]	; (8004584 <HAL_RCC_OscConfig+0x470>)
 800439c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043a2:	60bb      	str	r3, [r7, #8]
 80043a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043a6:	2301      	movs	r3, #1
 80043a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043aa:	4b77      	ldr	r3, [pc, #476]	; (8004588 <HAL_RCC_OscConfig+0x474>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d118      	bne.n	80043e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043b6:	4b74      	ldr	r3, [pc, #464]	; (8004588 <HAL_RCC_OscConfig+0x474>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a73      	ldr	r2, [pc, #460]	; (8004588 <HAL_RCC_OscConfig+0x474>)
 80043bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043c2:	f7fe f831 	bl	8002428 <HAL_GetTick>
 80043c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043c8:	e008      	b.n	80043dc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043ca:	f7fe f82d 	bl	8002428 <HAL_GetTick>
 80043ce:	4602      	mov	r2, r0
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	d901      	bls.n	80043dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80043d8:	2303      	movs	r3, #3
 80043da:	e10c      	b.n	80045f6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043dc:	4b6a      	ldr	r3, [pc, #424]	; (8004588 <HAL_RCC_OscConfig+0x474>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d0f0      	beq.n	80043ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d106      	bne.n	80043fe <HAL_RCC_OscConfig+0x2ea>
 80043f0:	4b64      	ldr	r3, [pc, #400]	; (8004584 <HAL_RCC_OscConfig+0x470>)
 80043f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f4:	4a63      	ldr	r2, [pc, #396]	; (8004584 <HAL_RCC_OscConfig+0x470>)
 80043f6:	f043 0301 	orr.w	r3, r3, #1
 80043fa:	6713      	str	r3, [r2, #112]	; 0x70
 80043fc:	e01c      	b.n	8004438 <HAL_RCC_OscConfig+0x324>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	2b05      	cmp	r3, #5
 8004404:	d10c      	bne.n	8004420 <HAL_RCC_OscConfig+0x30c>
 8004406:	4b5f      	ldr	r3, [pc, #380]	; (8004584 <HAL_RCC_OscConfig+0x470>)
 8004408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800440a:	4a5e      	ldr	r2, [pc, #376]	; (8004584 <HAL_RCC_OscConfig+0x470>)
 800440c:	f043 0304 	orr.w	r3, r3, #4
 8004410:	6713      	str	r3, [r2, #112]	; 0x70
 8004412:	4b5c      	ldr	r3, [pc, #368]	; (8004584 <HAL_RCC_OscConfig+0x470>)
 8004414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004416:	4a5b      	ldr	r2, [pc, #364]	; (8004584 <HAL_RCC_OscConfig+0x470>)
 8004418:	f043 0301 	orr.w	r3, r3, #1
 800441c:	6713      	str	r3, [r2, #112]	; 0x70
 800441e:	e00b      	b.n	8004438 <HAL_RCC_OscConfig+0x324>
 8004420:	4b58      	ldr	r3, [pc, #352]	; (8004584 <HAL_RCC_OscConfig+0x470>)
 8004422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004424:	4a57      	ldr	r2, [pc, #348]	; (8004584 <HAL_RCC_OscConfig+0x470>)
 8004426:	f023 0301 	bic.w	r3, r3, #1
 800442a:	6713      	str	r3, [r2, #112]	; 0x70
 800442c:	4b55      	ldr	r3, [pc, #340]	; (8004584 <HAL_RCC_OscConfig+0x470>)
 800442e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004430:	4a54      	ldr	r2, [pc, #336]	; (8004584 <HAL_RCC_OscConfig+0x470>)
 8004432:	f023 0304 	bic.w	r3, r3, #4
 8004436:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d015      	beq.n	800446c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004440:	f7fd fff2 	bl	8002428 <HAL_GetTick>
 8004444:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004446:	e00a      	b.n	800445e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004448:	f7fd ffee 	bl	8002428 <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	f241 3288 	movw	r2, #5000	; 0x1388
 8004456:	4293      	cmp	r3, r2
 8004458:	d901      	bls.n	800445e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e0cb      	b.n	80045f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800445e:	4b49      	ldr	r3, [pc, #292]	; (8004584 <HAL_RCC_OscConfig+0x470>)
 8004460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004462:	f003 0302 	and.w	r3, r3, #2
 8004466:	2b00      	cmp	r3, #0
 8004468:	d0ee      	beq.n	8004448 <HAL_RCC_OscConfig+0x334>
 800446a:	e014      	b.n	8004496 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800446c:	f7fd ffdc 	bl	8002428 <HAL_GetTick>
 8004470:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004472:	e00a      	b.n	800448a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004474:	f7fd ffd8 	bl	8002428 <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004482:	4293      	cmp	r3, r2
 8004484:	d901      	bls.n	800448a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e0b5      	b.n	80045f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800448a:	4b3e      	ldr	r3, [pc, #248]	; (8004584 <HAL_RCC_OscConfig+0x470>)
 800448c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800448e:	f003 0302 	and.w	r3, r3, #2
 8004492:	2b00      	cmp	r3, #0
 8004494:	d1ee      	bne.n	8004474 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004496:	7dfb      	ldrb	r3, [r7, #23]
 8004498:	2b01      	cmp	r3, #1
 800449a:	d105      	bne.n	80044a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800449c:	4b39      	ldr	r3, [pc, #228]	; (8004584 <HAL_RCC_OscConfig+0x470>)
 800449e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a0:	4a38      	ldr	r2, [pc, #224]	; (8004584 <HAL_RCC_OscConfig+0x470>)
 80044a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044a6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	699b      	ldr	r3, [r3, #24]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	f000 80a1 	beq.w	80045f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80044b2:	4b34      	ldr	r3, [pc, #208]	; (8004584 <HAL_RCC_OscConfig+0x470>)
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	f003 030c 	and.w	r3, r3, #12
 80044ba:	2b08      	cmp	r3, #8
 80044bc:	d05c      	beq.n	8004578 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	699b      	ldr	r3, [r3, #24]
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d141      	bne.n	800454a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044c6:	4b31      	ldr	r3, [pc, #196]	; (800458c <HAL_RCC_OscConfig+0x478>)
 80044c8:	2200      	movs	r2, #0
 80044ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044cc:	f7fd ffac 	bl	8002428 <HAL_GetTick>
 80044d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044d2:	e008      	b.n	80044e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044d4:	f7fd ffa8 	bl	8002428 <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d901      	bls.n	80044e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e087      	b.n	80045f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044e6:	4b27      	ldr	r3, [pc, #156]	; (8004584 <HAL_RCC_OscConfig+0x470>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1f0      	bne.n	80044d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	69da      	ldr	r2, [r3, #28]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a1b      	ldr	r3, [r3, #32]
 80044fa:	431a      	orrs	r2, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004500:	019b      	lsls	r3, r3, #6
 8004502:	431a      	orrs	r2, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004508:	085b      	lsrs	r3, r3, #1
 800450a:	3b01      	subs	r3, #1
 800450c:	041b      	lsls	r3, r3, #16
 800450e:	431a      	orrs	r2, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004514:	061b      	lsls	r3, r3, #24
 8004516:	491b      	ldr	r1, [pc, #108]	; (8004584 <HAL_RCC_OscConfig+0x470>)
 8004518:	4313      	orrs	r3, r2
 800451a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800451c:	4b1b      	ldr	r3, [pc, #108]	; (800458c <HAL_RCC_OscConfig+0x478>)
 800451e:	2201      	movs	r2, #1
 8004520:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004522:	f7fd ff81 	bl	8002428 <HAL_GetTick>
 8004526:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004528:	e008      	b.n	800453c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800452a:	f7fd ff7d 	bl	8002428 <HAL_GetTick>
 800452e:	4602      	mov	r2, r0
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	2b02      	cmp	r3, #2
 8004536:	d901      	bls.n	800453c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004538:	2303      	movs	r3, #3
 800453a:	e05c      	b.n	80045f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800453c:	4b11      	ldr	r3, [pc, #68]	; (8004584 <HAL_RCC_OscConfig+0x470>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004544:	2b00      	cmp	r3, #0
 8004546:	d0f0      	beq.n	800452a <HAL_RCC_OscConfig+0x416>
 8004548:	e054      	b.n	80045f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800454a:	4b10      	ldr	r3, [pc, #64]	; (800458c <HAL_RCC_OscConfig+0x478>)
 800454c:	2200      	movs	r2, #0
 800454e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004550:	f7fd ff6a 	bl	8002428 <HAL_GetTick>
 8004554:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004556:	e008      	b.n	800456a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004558:	f7fd ff66 	bl	8002428 <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	2b02      	cmp	r3, #2
 8004564:	d901      	bls.n	800456a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e045      	b.n	80045f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800456a:	4b06      	ldr	r3, [pc, #24]	; (8004584 <HAL_RCC_OscConfig+0x470>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d1f0      	bne.n	8004558 <HAL_RCC_OscConfig+0x444>
 8004576:	e03d      	b.n	80045f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	699b      	ldr	r3, [r3, #24]
 800457c:	2b01      	cmp	r3, #1
 800457e:	d107      	bne.n	8004590 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e038      	b.n	80045f6 <HAL_RCC_OscConfig+0x4e2>
 8004584:	40023800 	.word	0x40023800
 8004588:	40007000 	.word	0x40007000
 800458c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004590:	4b1b      	ldr	r3, [pc, #108]	; (8004600 <HAL_RCC_OscConfig+0x4ec>)
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	699b      	ldr	r3, [r3, #24]
 800459a:	2b01      	cmp	r3, #1
 800459c:	d028      	beq.n	80045f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d121      	bne.n	80045f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d11a      	bne.n	80045f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045ba:	68fa      	ldr	r2, [r7, #12]
 80045bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80045c0:	4013      	ands	r3, r2
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80045c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d111      	bne.n	80045f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d6:	085b      	lsrs	r3, r3, #1
 80045d8:	3b01      	subs	r3, #1
 80045da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045dc:	429a      	cmp	r2, r3
 80045de:	d107      	bne.n	80045f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d001      	beq.n	80045f4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e000      	b.n	80045f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3718      	adds	r7, #24
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	40023800 	.word	0x40023800

08004604 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d101      	bne.n	8004618 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e0cc      	b.n	80047b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004618:	4b68      	ldr	r3, [pc, #416]	; (80047bc <HAL_RCC_ClockConfig+0x1b8>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0307 	and.w	r3, r3, #7
 8004620:	683a      	ldr	r2, [r7, #0]
 8004622:	429a      	cmp	r2, r3
 8004624:	d90c      	bls.n	8004640 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004626:	4b65      	ldr	r3, [pc, #404]	; (80047bc <HAL_RCC_ClockConfig+0x1b8>)
 8004628:	683a      	ldr	r2, [r7, #0]
 800462a:	b2d2      	uxtb	r2, r2
 800462c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800462e:	4b63      	ldr	r3, [pc, #396]	; (80047bc <HAL_RCC_ClockConfig+0x1b8>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0307 	and.w	r3, r3, #7
 8004636:	683a      	ldr	r2, [r7, #0]
 8004638:	429a      	cmp	r2, r3
 800463a:	d001      	beq.n	8004640 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e0b8      	b.n	80047b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0302 	and.w	r3, r3, #2
 8004648:	2b00      	cmp	r3, #0
 800464a:	d020      	beq.n	800468e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0304 	and.w	r3, r3, #4
 8004654:	2b00      	cmp	r3, #0
 8004656:	d005      	beq.n	8004664 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004658:	4b59      	ldr	r3, [pc, #356]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	4a58      	ldr	r2, [pc, #352]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 800465e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004662:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0308 	and.w	r3, r3, #8
 800466c:	2b00      	cmp	r3, #0
 800466e:	d005      	beq.n	800467c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004670:	4b53      	ldr	r3, [pc, #332]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	4a52      	ldr	r2, [pc, #328]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004676:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800467a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800467c:	4b50      	ldr	r3, [pc, #320]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	494d      	ldr	r1, [pc, #308]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 800468a:	4313      	orrs	r3, r2
 800468c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0301 	and.w	r3, r3, #1
 8004696:	2b00      	cmp	r3, #0
 8004698:	d044      	beq.n	8004724 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d107      	bne.n	80046b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046a2:	4b47      	ldr	r3, [pc, #284]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d119      	bne.n	80046e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e07f      	b.n	80047b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d003      	beq.n	80046c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046be:	2b03      	cmp	r3, #3
 80046c0:	d107      	bne.n	80046d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046c2:	4b3f      	ldr	r3, [pc, #252]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d109      	bne.n	80046e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e06f      	b.n	80047b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046d2:	4b3b      	ldr	r3, [pc, #236]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0302 	and.w	r3, r3, #2
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d101      	bne.n	80046e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e067      	b.n	80047b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046e2:	4b37      	ldr	r3, [pc, #220]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f023 0203 	bic.w	r2, r3, #3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	4934      	ldr	r1, [pc, #208]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 80046f0:	4313      	orrs	r3, r2
 80046f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046f4:	f7fd fe98 	bl	8002428 <HAL_GetTick>
 80046f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046fa:	e00a      	b.n	8004712 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046fc:	f7fd fe94 	bl	8002428 <HAL_GetTick>
 8004700:	4602      	mov	r2, r0
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	f241 3288 	movw	r2, #5000	; 0x1388
 800470a:	4293      	cmp	r3, r2
 800470c:	d901      	bls.n	8004712 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e04f      	b.n	80047b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004712:	4b2b      	ldr	r3, [pc, #172]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f003 020c 	and.w	r2, r3, #12
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	429a      	cmp	r2, r3
 8004722:	d1eb      	bne.n	80046fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004724:	4b25      	ldr	r3, [pc, #148]	; (80047bc <HAL_RCC_ClockConfig+0x1b8>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0307 	and.w	r3, r3, #7
 800472c:	683a      	ldr	r2, [r7, #0]
 800472e:	429a      	cmp	r2, r3
 8004730:	d20c      	bcs.n	800474c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004732:	4b22      	ldr	r3, [pc, #136]	; (80047bc <HAL_RCC_ClockConfig+0x1b8>)
 8004734:	683a      	ldr	r2, [r7, #0]
 8004736:	b2d2      	uxtb	r2, r2
 8004738:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800473a:	4b20      	ldr	r3, [pc, #128]	; (80047bc <HAL_RCC_ClockConfig+0x1b8>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 0307 	and.w	r3, r3, #7
 8004742:	683a      	ldr	r2, [r7, #0]
 8004744:	429a      	cmp	r2, r3
 8004746:	d001      	beq.n	800474c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e032      	b.n	80047b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0304 	and.w	r3, r3, #4
 8004754:	2b00      	cmp	r3, #0
 8004756:	d008      	beq.n	800476a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004758:	4b19      	ldr	r3, [pc, #100]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	4916      	ldr	r1, [pc, #88]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004766:	4313      	orrs	r3, r2
 8004768:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0308 	and.w	r3, r3, #8
 8004772:	2b00      	cmp	r3, #0
 8004774:	d009      	beq.n	800478a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004776:	4b12      	ldr	r3, [pc, #72]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	00db      	lsls	r3, r3, #3
 8004784:	490e      	ldr	r1, [pc, #56]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004786:	4313      	orrs	r3, r2
 8004788:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800478a:	f000 f821 	bl	80047d0 <HAL_RCC_GetSysClockFreq>
 800478e:	4602      	mov	r2, r0
 8004790:	4b0b      	ldr	r3, [pc, #44]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	091b      	lsrs	r3, r3, #4
 8004796:	f003 030f 	and.w	r3, r3, #15
 800479a:	490a      	ldr	r1, [pc, #40]	; (80047c4 <HAL_RCC_ClockConfig+0x1c0>)
 800479c:	5ccb      	ldrb	r3, [r1, r3]
 800479e:	fa22 f303 	lsr.w	r3, r2, r3
 80047a2:	4a09      	ldr	r2, [pc, #36]	; (80047c8 <HAL_RCC_ClockConfig+0x1c4>)
 80047a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80047a6:	4b09      	ldr	r3, [pc, #36]	; (80047cc <HAL_RCC_ClockConfig+0x1c8>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4618      	mov	r0, r3
 80047ac:	f7fc ff0a 	bl	80015c4 <HAL_InitTick>

  return HAL_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3710      	adds	r7, #16
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	40023c00 	.word	0x40023c00
 80047c0:	40023800 	.word	0x40023800
 80047c4:	080095d0 	.word	0x080095d0
 80047c8:	20000000 	.word	0x20000000
 80047cc:	20000004 	.word	0x20000004

080047d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047d4:	b094      	sub	sp, #80	; 0x50
 80047d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80047d8:	2300      	movs	r3, #0
 80047da:	647b      	str	r3, [r7, #68]	; 0x44
 80047dc:	2300      	movs	r3, #0
 80047de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047e0:	2300      	movs	r3, #0
 80047e2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80047e4:	2300      	movs	r3, #0
 80047e6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047e8:	4b79      	ldr	r3, [pc, #484]	; (80049d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	f003 030c 	and.w	r3, r3, #12
 80047f0:	2b08      	cmp	r3, #8
 80047f2:	d00d      	beq.n	8004810 <HAL_RCC_GetSysClockFreq+0x40>
 80047f4:	2b08      	cmp	r3, #8
 80047f6:	f200 80e1 	bhi.w	80049bc <HAL_RCC_GetSysClockFreq+0x1ec>
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d002      	beq.n	8004804 <HAL_RCC_GetSysClockFreq+0x34>
 80047fe:	2b04      	cmp	r3, #4
 8004800:	d003      	beq.n	800480a <HAL_RCC_GetSysClockFreq+0x3a>
 8004802:	e0db      	b.n	80049bc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004804:	4b73      	ldr	r3, [pc, #460]	; (80049d4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004806:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004808:	e0db      	b.n	80049c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800480a:	4b73      	ldr	r3, [pc, #460]	; (80049d8 <HAL_RCC_GetSysClockFreq+0x208>)
 800480c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800480e:	e0d8      	b.n	80049c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004810:	4b6f      	ldr	r3, [pc, #444]	; (80049d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004818:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800481a:	4b6d      	ldr	r3, [pc, #436]	; (80049d0 <HAL_RCC_GetSysClockFreq+0x200>)
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d063      	beq.n	80048ee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004826:	4b6a      	ldr	r3, [pc, #424]	; (80049d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	099b      	lsrs	r3, r3, #6
 800482c:	2200      	movs	r2, #0
 800482e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004830:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004834:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004838:	633b      	str	r3, [r7, #48]	; 0x30
 800483a:	2300      	movs	r3, #0
 800483c:	637b      	str	r3, [r7, #52]	; 0x34
 800483e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004842:	4622      	mov	r2, r4
 8004844:	462b      	mov	r3, r5
 8004846:	f04f 0000 	mov.w	r0, #0
 800484a:	f04f 0100 	mov.w	r1, #0
 800484e:	0159      	lsls	r1, r3, #5
 8004850:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004854:	0150      	lsls	r0, r2, #5
 8004856:	4602      	mov	r2, r0
 8004858:	460b      	mov	r3, r1
 800485a:	4621      	mov	r1, r4
 800485c:	1a51      	subs	r1, r2, r1
 800485e:	6139      	str	r1, [r7, #16]
 8004860:	4629      	mov	r1, r5
 8004862:	eb63 0301 	sbc.w	r3, r3, r1
 8004866:	617b      	str	r3, [r7, #20]
 8004868:	f04f 0200 	mov.w	r2, #0
 800486c:	f04f 0300 	mov.w	r3, #0
 8004870:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004874:	4659      	mov	r1, fp
 8004876:	018b      	lsls	r3, r1, #6
 8004878:	4651      	mov	r1, sl
 800487a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800487e:	4651      	mov	r1, sl
 8004880:	018a      	lsls	r2, r1, #6
 8004882:	4651      	mov	r1, sl
 8004884:	ebb2 0801 	subs.w	r8, r2, r1
 8004888:	4659      	mov	r1, fp
 800488a:	eb63 0901 	sbc.w	r9, r3, r1
 800488e:	f04f 0200 	mov.w	r2, #0
 8004892:	f04f 0300 	mov.w	r3, #0
 8004896:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800489a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800489e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048a2:	4690      	mov	r8, r2
 80048a4:	4699      	mov	r9, r3
 80048a6:	4623      	mov	r3, r4
 80048a8:	eb18 0303 	adds.w	r3, r8, r3
 80048ac:	60bb      	str	r3, [r7, #8]
 80048ae:	462b      	mov	r3, r5
 80048b0:	eb49 0303 	adc.w	r3, r9, r3
 80048b4:	60fb      	str	r3, [r7, #12]
 80048b6:	f04f 0200 	mov.w	r2, #0
 80048ba:	f04f 0300 	mov.w	r3, #0
 80048be:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80048c2:	4629      	mov	r1, r5
 80048c4:	024b      	lsls	r3, r1, #9
 80048c6:	4621      	mov	r1, r4
 80048c8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80048cc:	4621      	mov	r1, r4
 80048ce:	024a      	lsls	r2, r1, #9
 80048d0:	4610      	mov	r0, r2
 80048d2:	4619      	mov	r1, r3
 80048d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048d6:	2200      	movs	r2, #0
 80048d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80048da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80048e0:	f7fb fcce 	bl	8000280 <__aeabi_uldivmod>
 80048e4:	4602      	mov	r2, r0
 80048e6:	460b      	mov	r3, r1
 80048e8:	4613      	mov	r3, r2
 80048ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048ec:	e058      	b.n	80049a0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048ee:	4b38      	ldr	r3, [pc, #224]	; (80049d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	099b      	lsrs	r3, r3, #6
 80048f4:	2200      	movs	r2, #0
 80048f6:	4618      	mov	r0, r3
 80048f8:	4611      	mov	r1, r2
 80048fa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80048fe:	623b      	str	r3, [r7, #32]
 8004900:	2300      	movs	r3, #0
 8004902:	627b      	str	r3, [r7, #36]	; 0x24
 8004904:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004908:	4642      	mov	r2, r8
 800490a:	464b      	mov	r3, r9
 800490c:	f04f 0000 	mov.w	r0, #0
 8004910:	f04f 0100 	mov.w	r1, #0
 8004914:	0159      	lsls	r1, r3, #5
 8004916:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800491a:	0150      	lsls	r0, r2, #5
 800491c:	4602      	mov	r2, r0
 800491e:	460b      	mov	r3, r1
 8004920:	4641      	mov	r1, r8
 8004922:	ebb2 0a01 	subs.w	sl, r2, r1
 8004926:	4649      	mov	r1, r9
 8004928:	eb63 0b01 	sbc.w	fp, r3, r1
 800492c:	f04f 0200 	mov.w	r2, #0
 8004930:	f04f 0300 	mov.w	r3, #0
 8004934:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004938:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800493c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004940:	ebb2 040a 	subs.w	r4, r2, sl
 8004944:	eb63 050b 	sbc.w	r5, r3, fp
 8004948:	f04f 0200 	mov.w	r2, #0
 800494c:	f04f 0300 	mov.w	r3, #0
 8004950:	00eb      	lsls	r3, r5, #3
 8004952:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004956:	00e2      	lsls	r2, r4, #3
 8004958:	4614      	mov	r4, r2
 800495a:	461d      	mov	r5, r3
 800495c:	4643      	mov	r3, r8
 800495e:	18e3      	adds	r3, r4, r3
 8004960:	603b      	str	r3, [r7, #0]
 8004962:	464b      	mov	r3, r9
 8004964:	eb45 0303 	adc.w	r3, r5, r3
 8004968:	607b      	str	r3, [r7, #4]
 800496a:	f04f 0200 	mov.w	r2, #0
 800496e:	f04f 0300 	mov.w	r3, #0
 8004972:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004976:	4629      	mov	r1, r5
 8004978:	028b      	lsls	r3, r1, #10
 800497a:	4621      	mov	r1, r4
 800497c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004980:	4621      	mov	r1, r4
 8004982:	028a      	lsls	r2, r1, #10
 8004984:	4610      	mov	r0, r2
 8004986:	4619      	mov	r1, r3
 8004988:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800498a:	2200      	movs	r2, #0
 800498c:	61bb      	str	r3, [r7, #24]
 800498e:	61fa      	str	r2, [r7, #28]
 8004990:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004994:	f7fb fc74 	bl	8000280 <__aeabi_uldivmod>
 8004998:	4602      	mov	r2, r0
 800499a:	460b      	mov	r3, r1
 800499c:	4613      	mov	r3, r2
 800499e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80049a0:	4b0b      	ldr	r3, [pc, #44]	; (80049d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	0c1b      	lsrs	r3, r3, #16
 80049a6:	f003 0303 	and.w	r3, r3, #3
 80049aa:	3301      	adds	r3, #1
 80049ac:	005b      	lsls	r3, r3, #1
 80049ae:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80049b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80049b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049b8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80049ba:	e002      	b.n	80049c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80049bc:	4b05      	ldr	r3, [pc, #20]	; (80049d4 <HAL_RCC_GetSysClockFreq+0x204>)
 80049be:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80049c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3750      	adds	r7, #80	; 0x50
 80049c8:	46bd      	mov	sp, r7
 80049ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049ce:	bf00      	nop
 80049d0:	40023800 	.word	0x40023800
 80049d4:	00f42400 	.word	0x00f42400
 80049d8:	007a1200 	.word	0x007a1200

080049dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049dc:	b480      	push	{r7}
 80049de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049e0:	4b03      	ldr	r3, [pc, #12]	; (80049f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80049e2:	681b      	ldr	r3, [r3, #0]
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	20000000 	.word	0x20000000

080049f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80049f8:	f7ff fff0 	bl	80049dc <HAL_RCC_GetHCLKFreq>
 80049fc:	4602      	mov	r2, r0
 80049fe:	4b05      	ldr	r3, [pc, #20]	; (8004a14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	0a9b      	lsrs	r3, r3, #10
 8004a04:	f003 0307 	and.w	r3, r3, #7
 8004a08:	4903      	ldr	r1, [pc, #12]	; (8004a18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a0a:	5ccb      	ldrb	r3, [r1, r3]
 8004a0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	40023800 	.word	0x40023800
 8004a18:	080095e0 	.word	0x080095e0

08004a1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004a20:	f7ff ffdc 	bl	80049dc <HAL_RCC_GetHCLKFreq>
 8004a24:	4602      	mov	r2, r0
 8004a26:	4b05      	ldr	r3, [pc, #20]	; (8004a3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	0b5b      	lsrs	r3, r3, #13
 8004a2c:	f003 0307 	and.w	r3, r3, #7
 8004a30:	4903      	ldr	r1, [pc, #12]	; (8004a40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a32:	5ccb      	ldrb	r3, [r1, r3]
 8004a34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	40023800 	.word	0x40023800
 8004a40:	080095e0 	.word	0x080095e0

08004a44 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	220f      	movs	r2, #15
 8004a52:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004a54:	4b12      	ldr	r3, [pc, #72]	; (8004aa0 <HAL_RCC_GetClockConfig+0x5c>)
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	f003 0203 	and.w	r2, r3, #3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004a60:	4b0f      	ldr	r3, [pc, #60]	; (8004aa0 <HAL_RCC_GetClockConfig+0x5c>)
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004a6c:	4b0c      	ldr	r3, [pc, #48]	; (8004aa0 <HAL_RCC_GetClockConfig+0x5c>)
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004a78:	4b09      	ldr	r3, [pc, #36]	; (8004aa0 <HAL_RCC_GetClockConfig+0x5c>)
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	08db      	lsrs	r3, r3, #3
 8004a7e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004a86:	4b07      	ldr	r3, [pc, #28]	; (8004aa4 <HAL_RCC_GetClockConfig+0x60>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0207 	and.w	r2, r3, #7
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	601a      	str	r2, [r3, #0]
}
 8004a92:	bf00      	nop
 8004a94:	370c      	adds	r7, #12
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr
 8004a9e:	bf00      	nop
 8004aa0:	40023800 	.word	0x40023800
 8004aa4:	40023c00 	.word	0x40023c00

08004aa8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b082      	sub	sp, #8
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d101      	bne.n	8004aba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e041      	b.n	8004b3e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d106      	bne.n	8004ad4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f7fd f80c 	bl	8001aec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2202      	movs	r2, #2
 8004ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	3304      	adds	r3, #4
 8004ae4:	4619      	mov	r1, r3
 8004ae6:	4610      	mov	r0, r2
 8004ae8:	f000 fe9e 	bl	8005828 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3708      	adds	r7, #8
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
	...

08004b48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b085      	sub	sp, #20
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d001      	beq.n	8004b60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e044      	b.n	8004bea <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2202      	movs	r2, #2
 8004b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68da      	ldr	r2, [r3, #12]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f042 0201 	orr.w	r2, r2, #1
 8004b76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a1e      	ldr	r2, [pc, #120]	; (8004bf8 <HAL_TIM_Base_Start_IT+0xb0>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d018      	beq.n	8004bb4 <HAL_TIM_Base_Start_IT+0x6c>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b8a:	d013      	beq.n	8004bb4 <HAL_TIM_Base_Start_IT+0x6c>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a1a      	ldr	r2, [pc, #104]	; (8004bfc <HAL_TIM_Base_Start_IT+0xb4>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d00e      	beq.n	8004bb4 <HAL_TIM_Base_Start_IT+0x6c>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a19      	ldr	r2, [pc, #100]	; (8004c00 <HAL_TIM_Base_Start_IT+0xb8>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d009      	beq.n	8004bb4 <HAL_TIM_Base_Start_IT+0x6c>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a17      	ldr	r2, [pc, #92]	; (8004c04 <HAL_TIM_Base_Start_IT+0xbc>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d004      	beq.n	8004bb4 <HAL_TIM_Base_Start_IT+0x6c>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a16      	ldr	r2, [pc, #88]	; (8004c08 <HAL_TIM_Base_Start_IT+0xc0>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d111      	bne.n	8004bd8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	f003 0307 	and.w	r3, r3, #7
 8004bbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2b06      	cmp	r3, #6
 8004bc4:	d010      	beq.n	8004be8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f042 0201 	orr.w	r2, r2, #1
 8004bd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bd6:	e007      	b.n	8004be8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f042 0201 	orr.w	r2, r2, #1
 8004be6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3714      	adds	r7, #20
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr
 8004bf6:	bf00      	nop
 8004bf8:	40010000 	.word	0x40010000
 8004bfc:	40000400 	.word	0x40000400
 8004c00:	40000800 	.word	0x40000800
 8004c04:	40000c00 	.word	0x40000c00
 8004c08:	40014000 	.word	0x40014000

08004c0c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b082      	sub	sp, #8
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d101      	bne.n	8004c1e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e041      	b.n	8004ca2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d106      	bne.n	8004c38 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 f839 	bl	8004caa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2202      	movs	r2, #2
 8004c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	3304      	adds	r3, #4
 8004c48:	4619      	mov	r1, r3
 8004c4a:	4610      	mov	r0, r2
 8004c4c:	f000 fdec 	bl	8005828 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ca0:	2300      	movs	r3, #0
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3708      	adds	r7, #8
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}

08004caa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004caa:	b480      	push	{r7}
 8004cac:	b083      	sub	sp, #12
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004cb2:	bf00      	nop
 8004cb4:	370c      	adds	r7, #12
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr
	...

08004cc0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d109      	bne.n	8004ce4 <HAL_TIM_PWM_Start+0x24>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	bf14      	ite	ne
 8004cdc:	2301      	movne	r3, #1
 8004cde:	2300      	moveq	r3, #0
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	e022      	b.n	8004d2a <HAL_TIM_PWM_Start+0x6a>
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	2b04      	cmp	r3, #4
 8004ce8:	d109      	bne.n	8004cfe <HAL_TIM_PWM_Start+0x3e>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	bf14      	ite	ne
 8004cf6:	2301      	movne	r3, #1
 8004cf8:	2300      	moveq	r3, #0
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	e015      	b.n	8004d2a <HAL_TIM_PWM_Start+0x6a>
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	2b08      	cmp	r3, #8
 8004d02:	d109      	bne.n	8004d18 <HAL_TIM_PWM_Start+0x58>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	bf14      	ite	ne
 8004d10:	2301      	movne	r3, #1
 8004d12:	2300      	moveq	r3, #0
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	e008      	b.n	8004d2a <HAL_TIM_PWM_Start+0x6a>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	bf14      	ite	ne
 8004d24:	2301      	movne	r3, #1
 8004d26:	2300      	moveq	r3, #0
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d001      	beq.n	8004d32 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e068      	b.n	8004e04 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d104      	bne.n	8004d42 <HAL_TIM_PWM_Start+0x82>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2202      	movs	r2, #2
 8004d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d40:	e013      	b.n	8004d6a <HAL_TIM_PWM_Start+0xaa>
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	2b04      	cmp	r3, #4
 8004d46:	d104      	bne.n	8004d52 <HAL_TIM_PWM_Start+0x92>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2202      	movs	r2, #2
 8004d4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d50:	e00b      	b.n	8004d6a <HAL_TIM_PWM_Start+0xaa>
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	2b08      	cmp	r3, #8
 8004d56:	d104      	bne.n	8004d62 <HAL_TIM_PWM_Start+0xa2>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2202      	movs	r2, #2
 8004d5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d60:	e003      	b.n	8004d6a <HAL_TIM_PWM_Start+0xaa>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2202      	movs	r2, #2
 8004d66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	6839      	ldr	r1, [r7, #0]
 8004d72:	4618      	mov	r0, r3
 8004d74:	f001 f91c 	bl	8005fb0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a23      	ldr	r2, [pc, #140]	; (8004e0c <HAL_TIM_PWM_Start+0x14c>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d107      	bne.n	8004d92 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d90:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a1d      	ldr	r2, [pc, #116]	; (8004e0c <HAL_TIM_PWM_Start+0x14c>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d018      	beq.n	8004dce <HAL_TIM_PWM_Start+0x10e>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004da4:	d013      	beq.n	8004dce <HAL_TIM_PWM_Start+0x10e>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a19      	ldr	r2, [pc, #100]	; (8004e10 <HAL_TIM_PWM_Start+0x150>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d00e      	beq.n	8004dce <HAL_TIM_PWM_Start+0x10e>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a17      	ldr	r2, [pc, #92]	; (8004e14 <HAL_TIM_PWM_Start+0x154>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d009      	beq.n	8004dce <HAL_TIM_PWM_Start+0x10e>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a16      	ldr	r2, [pc, #88]	; (8004e18 <HAL_TIM_PWM_Start+0x158>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d004      	beq.n	8004dce <HAL_TIM_PWM_Start+0x10e>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a14      	ldr	r2, [pc, #80]	; (8004e1c <HAL_TIM_PWM_Start+0x15c>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d111      	bne.n	8004df2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	f003 0307 	and.w	r3, r3, #7
 8004dd8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2b06      	cmp	r3, #6
 8004dde:	d010      	beq.n	8004e02 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f042 0201 	orr.w	r2, r2, #1
 8004dee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004df0:	e007      	b.n	8004e02 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f042 0201 	orr.w	r2, r2, #1
 8004e00:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e02:	2300      	movs	r3, #0
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3710      	adds	r7, #16
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}
 8004e0c:	40010000 	.word	0x40010000
 8004e10:	40000400 	.word	0x40000400
 8004e14:	40000800 	.word	0x40000800
 8004e18:	40000c00 	.word	0x40000c00
 8004e1c:	40014000 	.word	0x40014000

08004e20 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b082      	sub	sp, #8
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d101      	bne.n	8004e32 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e041      	b.n	8004eb6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d106      	bne.n	8004e4c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 f839 	bl	8004ebe <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2202      	movs	r2, #2
 8004e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	3304      	adds	r3, #4
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	4610      	mov	r0, r2
 8004e60:	f000 fce2 	bl	8005828 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3708      	adds	r7, #8
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}

08004ebe <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004ebe:	b480      	push	{r7}
 8004ec0:	b083      	sub	sp, #12
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004ec6:	bf00      	nop
 8004ec8:	370c      	adds	r7, #12
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr
	...

08004ed4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d104      	bne.n	8004ef2 <HAL_TIM_IC_Start_IT+0x1e>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	e013      	b.n	8004f1a <HAL_TIM_IC_Start_IT+0x46>
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	2b04      	cmp	r3, #4
 8004ef6:	d104      	bne.n	8004f02 <HAL_TIM_IC_Start_IT+0x2e>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	e00b      	b.n	8004f1a <HAL_TIM_IC_Start_IT+0x46>
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	2b08      	cmp	r3, #8
 8004f06:	d104      	bne.n	8004f12 <HAL_TIM_IC_Start_IT+0x3e>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	e003      	b.n	8004f1a <HAL_TIM_IC_Start_IT+0x46>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d104      	bne.n	8004f2c <HAL_TIM_IC_Start_IT+0x58>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	e013      	b.n	8004f54 <HAL_TIM_IC_Start_IT+0x80>
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	2b04      	cmp	r3, #4
 8004f30:	d104      	bne.n	8004f3c <HAL_TIM_IC_Start_IT+0x68>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	e00b      	b.n	8004f54 <HAL_TIM_IC_Start_IT+0x80>
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	2b08      	cmp	r3, #8
 8004f40:	d104      	bne.n	8004f4c <HAL_TIM_IC_Start_IT+0x78>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	e003      	b.n	8004f54 <HAL_TIM_IC_Start_IT+0x80>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f56:	7bbb      	ldrb	r3, [r7, #14]
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d102      	bne.n	8004f62 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004f5c:	7b7b      	ldrb	r3, [r7, #13]
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d001      	beq.n	8004f66 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e0c2      	b.n	80050ec <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d104      	bne.n	8004f76 <HAL_TIM_IC_Start_IT+0xa2>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2202      	movs	r2, #2
 8004f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f74:	e013      	b.n	8004f9e <HAL_TIM_IC_Start_IT+0xca>
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	2b04      	cmp	r3, #4
 8004f7a:	d104      	bne.n	8004f86 <HAL_TIM_IC_Start_IT+0xb2>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2202      	movs	r2, #2
 8004f80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f84:	e00b      	b.n	8004f9e <HAL_TIM_IC_Start_IT+0xca>
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	2b08      	cmp	r3, #8
 8004f8a:	d104      	bne.n	8004f96 <HAL_TIM_IC_Start_IT+0xc2>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2202      	movs	r2, #2
 8004f90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f94:	e003      	b.n	8004f9e <HAL_TIM_IC_Start_IT+0xca>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2202      	movs	r2, #2
 8004f9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d104      	bne.n	8004fae <HAL_TIM_IC_Start_IT+0xda>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2202      	movs	r2, #2
 8004fa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fac:	e013      	b.n	8004fd6 <HAL_TIM_IC_Start_IT+0x102>
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	2b04      	cmp	r3, #4
 8004fb2:	d104      	bne.n	8004fbe <HAL_TIM_IC_Start_IT+0xea>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2202      	movs	r2, #2
 8004fb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004fbc:	e00b      	b.n	8004fd6 <HAL_TIM_IC_Start_IT+0x102>
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	2b08      	cmp	r3, #8
 8004fc2:	d104      	bne.n	8004fce <HAL_TIM_IC_Start_IT+0xfa>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2202      	movs	r2, #2
 8004fc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fcc:	e003      	b.n	8004fd6 <HAL_TIM_IC_Start_IT+0x102>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2202      	movs	r2, #2
 8004fd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	2b0c      	cmp	r3, #12
 8004fda:	d841      	bhi.n	8005060 <HAL_TIM_IC_Start_IT+0x18c>
 8004fdc:	a201      	add	r2, pc, #4	; (adr r2, 8004fe4 <HAL_TIM_IC_Start_IT+0x110>)
 8004fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe2:	bf00      	nop
 8004fe4:	08005019 	.word	0x08005019
 8004fe8:	08005061 	.word	0x08005061
 8004fec:	08005061 	.word	0x08005061
 8004ff0:	08005061 	.word	0x08005061
 8004ff4:	0800502b 	.word	0x0800502b
 8004ff8:	08005061 	.word	0x08005061
 8004ffc:	08005061 	.word	0x08005061
 8005000:	08005061 	.word	0x08005061
 8005004:	0800503d 	.word	0x0800503d
 8005008:	08005061 	.word	0x08005061
 800500c:	08005061 	.word	0x08005061
 8005010:	08005061 	.word	0x08005061
 8005014:	0800504f 	.word	0x0800504f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	68da      	ldr	r2, [r3, #12]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f042 0202 	orr.w	r2, r2, #2
 8005026:	60da      	str	r2, [r3, #12]
      break;
 8005028:	e01d      	b.n	8005066 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68da      	ldr	r2, [r3, #12]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f042 0204 	orr.w	r2, r2, #4
 8005038:	60da      	str	r2, [r3, #12]
      break;
 800503a:	e014      	b.n	8005066 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68da      	ldr	r2, [r3, #12]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f042 0208 	orr.w	r2, r2, #8
 800504a:	60da      	str	r2, [r3, #12]
      break;
 800504c:	e00b      	b.n	8005066 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	68da      	ldr	r2, [r3, #12]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f042 0210 	orr.w	r2, r2, #16
 800505c:	60da      	str	r2, [r3, #12]
      break;
 800505e:	e002      	b.n	8005066 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	73fb      	strb	r3, [r7, #15]
      break;
 8005064:	bf00      	nop
  }

  if (status == HAL_OK)
 8005066:	7bfb      	ldrb	r3, [r7, #15]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d13e      	bne.n	80050ea <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2201      	movs	r2, #1
 8005072:	6839      	ldr	r1, [r7, #0]
 8005074:	4618      	mov	r0, r3
 8005076:	f000 ff9b 	bl	8005fb0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a1d      	ldr	r2, [pc, #116]	; (80050f4 <HAL_TIM_IC_Start_IT+0x220>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d018      	beq.n	80050b6 <HAL_TIM_IC_Start_IT+0x1e2>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800508c:	d013      	beq.n	80050b6 <HAL_TIM_IC_Start_IT+0x1e2>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a19      	ldr	r2, [pc, #100]	; (80050f8 <HAL_TIM_IC_Start_IT+0x224>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d00e      	beq.n	80050b6 <HAL_TIM_IC_Start_IT+0x1e2>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a17      	ldr	r2, [pc, #92]	; (80050fc <HAL_TIM_IC_Start_IT+0x228>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d009      	beq.n	80050b6 <HAL_TIM_IC_Start_IT+0x1e2>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a16      	ldr	r2, [pc, #88]	; (8005100 <HAL_TIM_IC_Start_IT+0x22c>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d004      	beq.n	80050b6 <HAL_TIM_IC_Start_IT+0x1e2>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a14      	ldr	r2, [pc, #80]	; (8005104 <HAL_TIM_IC_Start_IT+0x230>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d111      	bne.n	80050da <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	f003 0307 	and.w	r3, r3, #7
 80050c0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	2b06      	cmp	r3, #6
 80050c6:	d010      	beq.n	80050ea <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f042 0201 	orr.w	r2, r2, #1
 80050d6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050d8:	e007      	b.n	80050ea <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f042 0201 	orr.w	r2, r2, #1
 80050e8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80050ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3710      	adds	r7, #16
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	40010000 	.word	0x40010000
 80050f8:	40000400 	.word	0x40000400
 80050fc:	40000800 	.word	0x40000800
 8005100:	40000c00 	.word	0x40000c00
 8005104:	40014000 	.word	0x40014000

08005108 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b082      	sub	sp, #8
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	691b      	ldr	r3, [r3, #16]
 8005116:	f003 0302 	and.w	r3, r3, #2
 800511a:	2b02      	cmp	r3, #2
 800511c:	d122      	bne.n	8005164 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	f003 0302 	and.w	r3, r3, #2
 8005128:	2b02      	cmp	r3, #2
 800512a:	d11b      	bne.n	8005164 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f06f 0202 	mvn.w	r2, #2
 8005134:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2201      	movs	r2, #1
 800513a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	699b      	ldr	r3, [r3, #24]
 8005142:	f003 0303 	and.w	r3, r3, #3
 8005146:	2b00      	cmp	r3, #0
 8005148:	d003      	beq.n	8005152 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f7fc fe3a 	bl	8001dc4 <HAL_TIM_IC_CaptureCallback>
 8005150:	e005      	b.n	800515e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 fb4a 	bl	80057ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f000 fb51 	bl	8005800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	f003 0304 	and.w	r3, r3, #4
 800516e:	2b04      	cmp	r3, #4
 8005170:	d122      	bne.n	80051b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	f003 0304 	and.w	r3, r3, #4
 800517c:	2b04      	cmp	r3, #4
 800517e:	d11b      	bne.n	80051b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f06f 0204 	mvn.w	r2, #4
 8005188:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2202      	movs	r2, #2
 800518e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	699b      	ldr	r3, [r3, #24]
 8005196:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800519a:	2b00      	cmp	r3, #0
 800519c:	d003      	beq.n	80051a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f7fc fe10 	bl	8001dc4 <HAL_TIM_IC_CaptureCallback>
 80051a4:	e005      	b.n	80051b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 fb20 	bl	80057ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f000 fb27 	bl	8005800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	691b      	ldr	r3, [r3, #16]
 80051be:	f003 0308 	and.w	r3, r3, #8
 80051c2:	2b08      	cmp	r3, #8
 80051c4:	d122      	bne.n	800520c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	f003 0308 	and.w	r3, r3, #8
 80051d0:	2b08      	cmp	r3, #8
 80051d2:	d11b      	bne.n	800520c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f06f 0208 	mvn.w	r2, #8
 80051dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2204      	movs	r2, #4
 80051e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	69db      	ldr	r3, [r3, #28]
 80051ea:	f003 0303 	and.w	r3, r3, #3
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d003      	beq.n	80051fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f7fc fde6 	bl	8001dc4 <HAL_TIM_IC_CaptureCallback>
 80051f8:	e005      	b.n	8005206 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 faf6 	bl	80057ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f000 fafd 	bl	8005800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	691b      	ldr	r3, [r3, #16]
 8005212:	f003 0310 	and.w	r3, r3, #16
 8005216:	2b10      	cmp	r3, #16
 8005218:	d122      	bne.n	8005260 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	f003 0310 	and.w	r3, r3, #16
 8005224:	2b10      	cmp	r3, #16
 8005226:	d11b      	bne.n	8005260 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f06f 0210 	mvn.w	r2, #16
 8005230:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2208      	movs	r2, #8
 8005236:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	69db      	ldr	r3, [r3, #28]
 800523e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005242:	2b00      	cmp	r3, #0
 8005244:	d003      	beq.n	800524e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f7fc fdbc 	bl	8001dc4 <HAL_TIM_IC_CaptureCallback>
 800524c:	e005      	b.n	800525a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 facc 	bl	80057ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f000 fad3 	bl	8005800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	f003 0301 	and.w	r3, r3, #1
 800526a:	2b01      	cmp	r3, #1
 800526c:	d10e      	bne.n	800528c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	f003 0301 	and.w	r3, r3, #1
 8005278:	2b01      	cmp	r3, #1
 800527a:	d107      	bne.n	800528c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f06f 0201 	mvn.w	r2, #1
 8005284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f7fb ffde 	bl	8001248 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005296:	2b80      	cmp	r3, #128	; 0x80
 8005298:	d10e      	bne.n	80052b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052a4:	2b80      	cmp	r3, #128	; 0x80
 80052a6:	d107      	bne.n	80052b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80052b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f000 ff1a 	bl	80060ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052c2:	2b40      	cmp	r3, #64	; 0x40
 80052c4:	d10e      	bne.n	80052e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052d0:	2b40      	cmp	r3, #64	; 0x40
 80052d2:	d107      	bne.n	80052e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80052dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 fa98 	bl	8005814 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	691b      	ldr	r3, [r3, #16]
 80052ea:	f003 0320 	and.w	r3, r3, #32
 80052ee:	2b20      	cmp	r3, #32
 80052f0:	d10e      	bne.n	8005310 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	f003 0320 	and.w	r3, r3, #32
 80052fc:	2b20      	cmp	r3, #32
 80052fe:	d107      	bne.n	8005310 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f06f 0220 	mvn.w	r2, #32
 8005308:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 fee4 	bl	80060d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005310:	bf00      	nop
 8005312:	3708      	adds	r7, #8
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}

08005318 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b086      	sub	sp, #24
 800531c:	af00      	add	r7, sp, #0
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	60b9      	str	r1, [r7, #8]
 8005322:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005324:	2300      	movs	r3, #0
 8005326:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800532e:	2b01      	cmp	r3, #1
 8005330:	d101      	bne.n	8005336 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005332:	2302      	movs	r3, #2
 8005334:	e088      	b.n	8005448 <HAL_TIM_IC_ConfigChannel+0x130>
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2201      	movs	r2, #1
 800533a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d11b      	bne.n	800537c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	6818      	ldr	r0, [r3, #0]
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	6819      	ldr	r1, [r3, #0]
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	685a      	ldr	r2, [r3, #4]
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	f000 fc74 	bl	8005c40 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	699a      	ldr	r2, [r3, #24]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f022 020c 	bic.w	r2, r2, #12
 8005366:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	6999      	ldr	r1, [r3, #24]
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	689a      	ldr	r2, [r3, #8]
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	430a      	orrs	r2, r1
 8005378:	619a      	str	r2, [r3, #24]
 800537a:	e060      	b.n	800543e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2b04      	cmp	r3, #4
 8005380:	d11c      	bne.n	80053bc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6818      	ldr	r0, [r3, #0]
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	6819      	ldr	r1, [r3, #0]
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	685a      	ldr	r2, [r3, #4]
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	f000 fcec 	bl	8005d6e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	699a      	ldr	r2, [r3, #24]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80053a4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	6999      	ldr	r1, [r3, #24]
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	021a      	lsls	r2, r3, #8
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	430a      	orrs	r2, r1
 80053b8:	619a      	str	r2, [r3, #24]
 80053ba:	e040      	b.n	800543e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2b08      	cmp	r3, #8
 80053c0:	d11b      	bne.n	80053fa <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	6818      	ldr	r0, [r3, #0]
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	6819      	ldr	r1, [r3, #0]
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	685a      	ldr	r2, [r3, #4]
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	f000 fd39 	bl	8005e48 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	69da      	ldr	r2, [r3, #28]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f022 020c 	bic.w	r2, r2, #12
 80053e4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	69d9      	ldr	r1, [r3, #28]
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	689a      	ldr	r2, [r3, #8]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	430a      	orrs	r2, r1
 80053f6:	61da      	str	r2, [r3, #28]
 80053f8:	e021      	b.n	800543e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2b0c      	cmp	r3, #12
 80053fe:	d11c      	bne.n	800543a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6818      	ldr	r0, [r3, #0]
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	6819      	ldr	r1, [r3, #0]
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	685a      	ldr	r2, [r3, #4]
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	f000 fd56 	bl	8005ec0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	69da      	ldr	r2, [r3, #28]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005422:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	69d9      	ldr	r1, [r3, #28]
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	021a      	lsls	r2, r3, #8
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	430a      	orrs	r2, r1
 8005436:	61da      	str	r2, [r3, #28]
 8005438:	e001      	b.n	800543e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2200      	movs	r2, #0
 8005442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005446:	7dfb      	ldrb	r3, [r7, #23]
}
 8005448:	4618      	mov	r0, r3
 800544a:	3718      	adds	r7, #24
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b086      	sub	sp, #24
 8005454:	af00      	add	r7, sp, #0
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	60b9      	str	r1, [r7, #8]
 800545a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800545c:	2300      	movs	r3, #0
 800545e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005466:	2b01      	cmp	r3, #1
 8005468:	d101      	bne.n	800546e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800546a:	2302      	movs	r3, #2
 800546c:	e0ae      	b.n	80055cc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2201      	movs	r2, #1
 8005472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2b0c      	cmp	r3, #12
 800547a:	f200 809f 	bhi.w	80055bc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800547e:	a201      	add	r2, pc, #4	; (adr r2, 8005484 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005484:	080054b9 	.word	0x080054b9
 8005488:	080055bd 	.word	0x080055bd
 800548c:	080055bd 	.word	0x080055bd
 8005490:	080055bd 	.word	0x080055bd
 8005494:	080054f9 	.word	0x080054f9
 8005498:	080055bd 	.word	0x080055bd
 800549c:	080055bd 	.word	0x080055bd
 80054a0:	080055bd 	.word	0x080055bd
 80054a4:	0800553b 	.word	0x0800553b
 80054a8:	080055bd 	.word	0x080055bd
 80054ac:	080055bd 	.word	0x080055bd
 80054b0:	080055bd 	.word	0x080055bd
 80054b4:	0800557b 	.word	0x0800557b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68b9      	ldr	r1, [r7, #8]
 80054be:	4618      	mov	r0, r3
 80054c0:	f000 fa32 	bl	8005928 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	699a      	ldr	r2, [r3, #24]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f042 0208 	orr.w	r2, r2, #8
 80054d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	699a      	ldr	r2, [r3, #24]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f022 0204 	bic.w	r2, r2, #4
 80054e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	6999      	ldr	r1, [r3, #24]
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	691a      	ldr	r2, [r3, #16]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	430a      	orrs	r2, r1
 80054f4:	619a      	str	r2, [r3, #24]
      break;
 80054f6:	e064      	b.n	80055c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	68b9      	ldr	r1, [r7, #8]
 80054fe:	4618      	mov	r0, r3
 8005500:	f000 fa78 	bl	80059f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	699a      	ldr	r2, [r3, #24]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005512:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	699a      	ldr	r2, [r3, #24]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005522:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	6999      	ldr	r1, [r3, #24]
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	691b      	ldr	r3, [r3, #16]
 800552e:	021a      	lsls	r2, r3, #8
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	430a      	orrs	r2, r1
 8005536:	619a      	str	r2, [r3, #24]
      break;
 8005538:	e043      	b.n	80055c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	68b9      	ldr	r1, [r7, #8]
 8005540:	4618      	mov	r0, r3
 8005542:	f000 fac3 	bl	8005acc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	69da      	ldr	r2, [r3, #28]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f042 0208 	orr.w	r2, r2, #8
 8005554:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	69da      	ldr	r2, [r3, #28]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f022 0204 	bic.w	r2, r2, #4
 8005564:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	69d9      	ldr	r1, [r3, #28]
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	691a      	ldr	r2, [r3, #16]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	430a      	orrs	r2, r1
 8005576:	61da      	str	r2, [r3, #28]
      break;
 8005578:	e023      	b.n	80055c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	68b9      	ldr	r1, [r7, #8]
 8005580:	4618      	mov	r0, r3
 8005582:	f000 fb0d 	bl	8005ba0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	69da      	ldr	r2, [r3, #28]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005594:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	69da      	ldr	r2, [r3, #28]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	69d9      	ldr	r1, [r3, #28]
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	021a      	lsls	r2, r3, #8
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	430a      	orrs	r2, r1
 80055b8:	61da      	str	r2, [r3, #28]
      break;
 80055ba:	e002      	b.n	80055c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	75fb      	strb	r3, [r7, #23]
      break;
 80055c0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80055ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3718      	adds	r7, #24
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b084      	sub	sp, #16
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055de:	2300      	movs	r3, #0
 80055e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d101      	bne.n	80055f0 <HAL_TIM_ConfigClockSource+0x1c>
 80055ec:	2302      	movs	r3, #2
 80055ee:	e0b4      	b.n	800575a <HAL_TIM_ConfigClockSource+0x186>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2202      	movs	r2, #2
 80055fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800560e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005616:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	68ba      	ldr	r2, [r7, #8]
 800561e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005628:	d03e      	beq.n	80056a8 <HAL_TIM_ConfigClockSource+0xd4>
 800562a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800562e:	f200 8087 	bhi.w	8005740 <HAL_TIM_ConfigClockSource+0x16c>
 8005632:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005636:	f000 8086 	beq.w	8005746 <HAL_TIM_ConfigClockSource+0x172>
 800563a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800563e:	d87f      	bhi.n	8005740 <HAL_TIM_ConfigClockSource+0x16c>
 8005640:	2b70      	cmp	r3, #112	; 0x70
 8005642:	d01a      	beq.n	800567a <HAL_TIM_ConfigClockSource+0xa6>
 8005644:	2b70      	cmp	r3, #112	; 0x70
 8005646:	d87b      	bhi.n	8005740 <HAL_TIM_ConfigClockSource+0x16c>
 8005648:	2b60      	cmp	r3, #96	; 0x60
 800564a:	d050      	beq.n	80056ee <HAL_TIM_ConfigClockSource+0x11a>
 800564c:	2b60      	cmp	r3, #96	; 0x60
 800564e:	d877      	bhi.n	8005740 <HAL_TIM_ConfigClockSource+0x16c>
 8005650:	2b50      	cmp	r3, #80	; 0x50
 8005652:	d03c      	beq.n	80056ce <HAL_TIM_ConfigClockSource+0xfa>
 8005654:	2b50      	cmp	r3, #80	; 0x50
 8005656:	d873      	bhi.n	8005740 <HAL_TIM_ConfigClockSource+0x16c>
 8005658:	2b40      	cmp	r3, #64	; 0x40
 800565a:	d058      	beq.n	800570e <HAL_TIM_ConfigClockSource+0x13a>
 800565c:	2b40      	cmp	r3, #64	; 0x40
 800565e:	d86f      	bhi.n	8005740 <HAL_TIM_ConfigClockSource+0x16c>
 8005660:	2b30      	cmp	r3, #48	; 0x30
 8005662:	d064      	beq.n	800572e <HAL_TIM_ConfigClockSource+0x15a>
 8005664:	2b30      	cmp	r3, #48	; 0x30
 8005666:	d86b      	bhi.n	8005740 <HAL_TIM_ConfigClockSource+0x16c>
 8005668:	2b20      	cmp	r3, #32
 800566a:	d060      	beq.n	800572e <HAL_TIM_ConfigClockSource+0x15a>
 800566c:	2b20      	cmp	r3, #32
 800566e:	d867      	bhi.n	8005740 <HAL_TIM_ConfigClockSource+0x16c>
 8005670:	2b00      	cmp	r3, #0
 8005672:	d05c      	beq.n	800572e <HAL_TIM_ConfigClockSource+0x15a>
 8005674:	2b10      	cmp	r3, #16
 8005676:	d05a      	beq.n	800572e <HAL_TIM_ConfigClockSource+0x15a>
 8005678:	e062      	b.n	8005740 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6818      	ldr	r0, [r3, #0]
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	6899      	ldr	r1, [r3, #8]
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	685a      	ldr	r2, [r3, #4]
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	68db      	ldr	r3, [r3, #12]
 800568a:	f000 fc71 	bl	8005f70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800569c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	68ba      	ldr	r2, [r7, #8]
 80056a4:	609a      	str	r2, [r3, #8]
      break;
 80056a6:	e04f      	b.n	8005748 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6818      	ldr	r0, [r3, #0]
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	6899      	ldr	r1, [r3, #8]
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	685a      	ldr	r2, [r3, #4]
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	f000 fc5a 	bl	8005f70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	689a      	ldr	r2, [r3, #8]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056ca:	609a      	str	r2, [r3, #8]
      break;
 80056cc:	e03c      	b.n	8005748 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6818      	ldr	r0, [r3, #0]
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	6859      	ldr	r1, [r3, #4]
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	68db      	ldr	r3, [r3, #12]
 80056da:	461a      	mov	r2, r3
 80056dc:	f000 fb18 	bl	8005d10 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	2150      	movs	r1, #80	; 0x50
 80056e6:	4618      	mov	r0, r3
 80056e8:	f000 fc27 	bl	8005f3a <TIM_ITRx_SetConfig>
      break;
 80056ec:	e02c      	b.n	8005748 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6818      	ldr	r0, [r3, #0]
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	6859      	ldr	r1, [r3, #4]
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	461a      	mov	r2, r3
 80056fc:	f000 fb74 	bl	8005de8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2160      	movs	r1, #96	; 0x60
 8005706:	4618      	mov	r0, r3
 8005708:	f000 fc17 	bl	8005f3a <TIM_ITRx_SetConfig>
      break;
 800570c:	e01c      	b.n	8005748 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6818      	ldr	r0, [r3, #0]
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	6859      	ldr	r1, [r3, #4]
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	461a      	mov	r2, r3
 800571c:	f000 faf8 	bl	8005d10 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	2140      	movs	r1, #64	; 0x40
 8005726:	4618      	mov	r0, r3
 8005728:	f000 fc07 	bl	8005f3a <TIM_ITRx_SetConfig>
      break;
 800572c:	e00c      	b.n	8005748 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4619      	mov	r1, r3
 8005738:	4610      	mov	r0, r2
 800573a:	f000 fbfe 	bl	8005f3a <TIM_ITRx_SetConfig>
      break;
 800573e:	e003      	b.n	8005748 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	73fb      	strb	r3, [r7, #15]
      break;
 8005744:	e000      	b.n	8005748 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005746:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005758:	7bfb      	ldrb	r3, [r7, #15]
}
 800575a:	4618      	mov	r0, r3
 800575c:	3710      	adds	r7, #16
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
	...

08005764 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005764:	b480      	push	{r7}
 8005766:	b085      	sub	sp, #20
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800576e:	2300      	movs	r3, #0
 8005770:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	2b0c      	cmp	r3, #12
 8005776:	d831      	bhi.n	80057dc <HAL_TIM_ReadCapturedValue+0x78>
 8005778:	a201      	add	r2, pc, #4	; (adr r2, 8005780 <HAL_TIM_ReadCapturedValue+0x1c>)
 800577a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800577e:	bf00      	nop
 8005780:	080057b5 	.word	0x080057b5
 8005784:	080057dd 	.word	0x080057dd
 8005788:	080057dd 	.word	0x080057dd
 800578c:	080057dd 	.word	0x080057dd
 8005790:	080057bf 	.word	0x080057bf
 8005794:	080057dd 	.word	0x080057dd
 8005798:	080057dd 	.word	0x080057dd
 800579c:	080057dd 	.word	0x080057dd
 80057a0:	080057c9 	.word	0x080057c9
 80057a4:	080057dd 	.word	0x080057dd
 80057a8:	080057dd 	.word	0x080057dd
 80057ac:	080057dd 	.word	0x080057dd
 80057b0:	080057d3 	.word	0x080057d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ba:	60fb      	str	r3, [r7, #12]

      break;
 80057bc:	e00f      	b.n	80057de <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c4:	60fb      	str	r3, [r7, #12]

      break;
 80057c6:	e00a      	b.n	80057de <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057ce:	60fb      	str	r3, [r7, #12]

      break;
 80057d0:	e005      	b.n	80057de <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d8:	60fb      	str	r3, [r7, #12]

      break;
 80057da:	e000      	b.n	80057de <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80057dc:	bf00      	nop
  }

  return tmpreg;
 80057de:	68fb      	ldr	r3, [r7, #12]
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3714      	adds	r7, #20
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr

080057ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b083      	sub	sp, #12
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057f4:	bf00      	nop
 80057f6:	370c      	adds	r7, #12
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr

08005800 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005800:	b480      	push	{r7}
 8005802:	b083      	sub	sp, #12
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005808:	bf00      	nop
 800580a:	370c      	adds	r7, #12
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800581c:	bf00      	nop
 800581e:	370c      	adds	r7, #12
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005828:	b480      	push	{r7}
 800582a:	b085      	sub	sp, #20
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4a34      	ldr	r2, [pc, #208]	; (800590c <TIM_Base_SetConfig+0xe4>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d00f      	beq.n	8005860 <TIM_Base_SetConfig+0x38>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005846:	d00b      	beq.n	8005860 <TIM_Base_SetConfig+0x38>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4a31      	ldr	r2, [pc, #196]	; (8005910 <TIM_Base_SetConfig+0xe8>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d007      	beq.n	8005860 <TIM_Base_SetConfig+0x38>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4a30      	ldr	r2, [pc, #192]	; (8005914 <TIM_Base_SetConfig+0xec>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d003      	beq.n	8005860 <TIM_Base_SetConfig+0x38>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4a2f      	ldr	r2, [pc, #188]	; (8005918 <TIM_Base_SetConfig+0xf0>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d108      	bne.n	8005872 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005866:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	4313      	orrs	r3, r2
 8005870:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a25      	ldr	r2, [pc, #148]	; (800590c <TIM_Base_SetConfig+0xe4>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d01b      	beq.n	80058b2 <TIM_Base_SetConfig+0x8a>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005880:	d017      	beq.n	80058b2 <TIM_Base_SetConfig+0x8a>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a22      	ldr	r2, [pc, #136]	; (8005910 <TIM_Base_SetConfig+0xe8>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d013      	beq.n	80058b2 <TIM_Base_SetConfig+0x8a>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a21      	ldr	r2, [pc, #132]	; (8005914 <TIM_Base_SetConfig+0xec>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d00f      	beq.n	80058b2 <TIM_Base_SetConfig+0x8a>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a20      	ldr	r2, [pc, #128]	; (8005918 <TIM_Base_SetConfig+0xf0>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d00b      	beq.n	80058b2 <TIM_Base_SetConfig+0x8a>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a1f      	ldr	r2, [pc, #124]	; (800591c <TIM_Base_SetConfig+0xf4>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d007      	beq.n	80058b2 <TIM_Base_SetConfig+0x8a>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a1e      	ldr	r2, [pc, #120]	; (8005920 <TIM_Base_SetConfig+0xf8>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d003      	beq.n	80058b2 <TIM_Base_SetConfig+0x8a>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a1d      	ldr	r2, [pc, #116]	; (8005924 <TIM_Base_SetConfig+0xfc>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d108      	bne.n	80058c4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	68fa      	ldr	r2, [r7, #12]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	695b      	ldr	r3, [r3, #20]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	68fa      	ldr	r2, [r7, #12]
 80058d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	689a      	ldr	r2, [r3, #8]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a08      	ldr	r2, [pc, #32]	; (800590c <TIM_Base_SetConfig+0xe4>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d103      	bne.n	80058f8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	691a      	ldr	r2, [r3, #16]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	615a      	str	r2, [r3, #20]
}
 80058fe:	bf00      	nop
 8005900:	3714      	adds	r7, #20
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr
 800590a:	bf00      	nop
 800590c:	40010000 	.word	0x40010000
 8005910:	40000400 	.word	0x40000400
 8005914:	40000800 	.word	0x40000800
 8005918:	40000c00 	.word	0x40000c00
 800591c:	40014000 	.word	0x40014000
 8005920:	40014400 	.word	0x40014400
 8005924:	40014800 	.word	0x40014800

08005928 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005928:	b480      	push	{r7}
 800592a:	b087      	sub	sp, #28
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6a1b      	ldr	r3, [r3, #32]
 8005936:	f023 0201 	bic.w	r2, r3, #1
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6a1b      	ldr	r3, [r3, #32]
 8005942:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	699b      	ldr	r3, [r3, #24]
 800594e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005956:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f023 0303 	bic.w	r3, r3, #3
 800595e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	68fa      	ldr	r2, [r7, #12]
 8005966:	4313      	orrs	r3, r2
 8005968:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	f023 0302 	bic.w	r3, r3, #2
 8005970:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	697a      	ldr	r2, [r7, #20]
 8005978:	4313      	orrs	r3, r2
 800597a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a1c      	ldr	r2, [pc, #112]	; (80059f0 <TIM_OC1_SetConfig+0xc8>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d10c      	bne.n	800599e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	f023 0308 	bic.w	r3, r3, #8
 800598a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	697a      	ldr	r2, [r7, #20]
 8005992:	4313      	orrs	r3, r2
 8005994:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	f023 0304 	bic.w	r3, r3, #4
 800599c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4a13      	ldr	r2, [pc, #76]	; (80059f0 <TIM_OC1_SetConfig+0xc8>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d111      	bne.n	80059ca <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	695b      	ldr	r3, [r3, #20]
 80059ba:	693a      	ldr	r2, [r7, #16]
 80059bc:	4313      	orrs	r3, r2
 80059be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	699b      	ldr	r3, [r3, #24]
 80059c4:	693a      	ldr	r2, [r7, #16]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	693a      	ldr	r2, [r7, #16]
 80059ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	68fa      	ldr	r2, [r7, #12]
 80059d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	685a      	ldr	r2, [r3, #4]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	697a      	ldr	r2, [r7, #20]
 80059e2:	621a      	str	r2, [r3, #32]
}
 80059e4:	bf00      	nop
 80059e6:	371c      	adds	r7, #28
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr
 80059f0:	40010000 	.word	0x40010000

080059f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b087      	sub	sp, #28
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a1b      	ldr	r3, [r3, #32]
 8005a02:	f023 0210 	bic.w	r2, r3, #16
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6a1b      	ldr	r3, [r3, #32]
 8005a0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	699b      	ldr	r3, [r3, #24]
 8005a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	021b      	lsls	r3, r3, #8
 8005a32:	68fa      	ldr	r2, [r7, #12]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	f023 0320 	bic.w	r3, r3, #32
 8005a3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	011b      	lsls	r3, r3, #4
 8005a46:	697a      	ldr	r2, [r7, #20]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4a1e      	ldr	r2, [pc, #120]	; (8005ac8 <TIM_OC2_SetConfig+0xd4>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d10d      	bne.n	8005a70 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	011b      	lsls	r3, r3, #4
 8005a62:	697a      	ldr	r2, [r7, #20]
 8005a64:	4313      	orrs	r3, r2
 8005a66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a6e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4a15      	ldr	r2, [pc, #84]	; (8005ac8 <TIM_OC2_SetConfig+0xd4>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d113      	bne.n	8005aa0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	695b      	ldr	r3, [r3, #20]
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	693a      	ldr	r2, [r7, #16]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	699b      	ldr	r3, [r3, #24]
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	693a      	ldr	r2, [r7, #16]
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	693a      	ldr	r2, [r7, #16]
 8005aa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	685a      	ldr	r2, [r3, #4]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	697a      	ldr	r2, [r7, #20]
 8005ab8:	621a      	str	r2, [r3, #32]
}
 8005aba:	bf00      	nop
 8005abc:	371c      	adds	r7, #28
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr
 8005ac6:	bf00      	nop
 8005ac8:	40010000 	.word	0x40010000

08005acc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b087      	sub	sp, #28
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6a1b      	ldr	r3, [r3, #32]
 8005ada:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a1b      	ldr	r3, [r3, #32]
 8005ae6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	69db      	ldr	r3, [r3, #28]
 8005af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005afa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f023 0303 	bic.w	r3, r3, #3
 8005b02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	68fa      	ldr	r2, [r7, #12]
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	021b      	lsls	r3, r3, #8
 8005b1c:	697a      	ldr	r2, [r7, #20]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a1d      	ldr	r2, [pc, #116]	; (8005b9c <TIM_OC3_SetConfig+0xd0>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d10d      	bne.n	8005b46 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	021b      	lsls	r3, r3, #8
 8005b38:	697a      	ldr	r2, [r7, #20]
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4a14      	ldr	r2, [pc, #80]	; (8005b9c <TIM_OC3_SetConfig+0xd0>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d113      	bne.n	8005b76 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	695b      	ldr	r3, [r3, #20]
 8005b62:	011b      	lsls	r3, r3, #4
 8005b64:	693a      	ldr	r2, [r7, #16]
 8005b66:	4313      	orrs	r3, r2
 8005b68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	699b      	ldr	r3, [r3, #24]
 8005b6e:	011b      	lsls	r3, r3, #4
 8005b70:	693a      	ldr	r2, [r7, #16]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	693a      	ldr	r2, [r7, #16]
 8005b7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	68fa      	ldr	r2, [r7, #12]
 8005b80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	685a      	ldr	r2, [r3, #4]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	697a      	ldr	r2, [r7, #20]
 8005b8e:	621a      	str	r2, [r3, #32]
}
 8005b90:	bf00      	nop
 8005b92:	371c      	adds	r7, #28
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr
 8005b9c:	40010000 	.word	0x40010000

08005ba0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b087      	sub	sp, #28
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a1b      	ldr	r3, [r3, #32]
 8005bae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6a1b      	ldr	r3, [r3, #32]
 8005bba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	69db      	ldr	r3, [r3, #28]
 8005bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	021b      	lsls	r3, r3, #8
 8005bde:	68fa      	ldr	r2, [r7, #12]
 8005be0:	4313      	orrs	r3, r2
 8005be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005bea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	031b      	lsls	r3, r3, #12
 8005bf2:	693a      	ldr	r2, [r7, #16]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a10      	ldr	r2, [pc, #64]	; (8005c3c <TIM_OC4_SetConfig+0x9c>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d109      	bne.n	8005c14 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	695b      	ldr	r3, [r3, #20]
 8005c0c:	019b      	lsls	r3, r3, #6
 8005c0e:	697a      	ldr	r2, [r7, #20]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	697a      	ldr	r2, [r7, #20]
 8005c18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	68fa      	ldr	r2, [r7, #12]
 8005c1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	685a      	ldr	r2, [r3, #4]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	693a      	ldr	r2, [r7, #16]
 8005c2c:	621a      	str	r2, [r3, #32]
}
 8005c2e:	bf00      	nop
 8005c30:	371c      	adds	r7, #28
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr
 8005c3a:	bf00      	nop
 8005c3c:	40010000 	.word	0x40010000

08005c40 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b087      	sub	sp, #28
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	60f8      	str	r0, [r7, #12]
 8005c48:	60b9      	str	r1, [r7, #8]
 8005c4a:	607a      	str	r2, [r7, #4]
 8005c4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	6a1b      	ldr	r3, [r3, #32]
 8005c52:	f023 0201 	bic.w	r2, r3, #1
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	699b      	ldr	r3, [r3, #24]
 8005c5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	6a1b      	ldr	r3, [r3, #32]
 8005c64:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	4a24      	ldr	r2, [pc, #144]	; (8005cfc <TIM_TI1_SetConfig+0xbc>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d013      	beq.n	8005c96 <TIM_TI1_SetConfig+0x56>
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c74:	d00f      	beq.n	8005c96 <TIM_TI1_SetConfig+0x56>
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	4a21      	ldr	r2, [pc, #132]	; (8005d00 <TIM_TI1_SetConfig+0xc0>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d00b      	beq.n	8005c96 <TIM_TI1_SetConfig+0x56>
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	4a20      	ldr	r2, [pc, #128]	; (8005d04 <TIM_TI1_SetConfig+0xc4>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d007      	beq.n	8005c96 <TIM_TI1_SetConfig+0x56>
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	4a1f      	ldr	r2, [pc, #124]	; (8005d08 <TIM_TI1_SetConfig+0xc8>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d003      	beq.n	8005c96 <TIM_TI1_SetConfig+0x56>
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	4a1e      	ldr	r2, [pc, #120]	; (8005d0c <TIM_TI1_SetConfig+0xcc>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d101      	bne.n	8005c9a <TIM_TI1_SetConfig+0x5a>
 8005c96:	2301      	movs	r3, #1
 8005c98:	e000      	b.n	8005c9c <TIM_TI1_SetConfig+0x5c>
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d008      	beq.n	8005cb2 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	f023 0303 	bic.w	r3, r3, #3
 8005ca6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005ca8:	697a      	ldr	r2, [r7, #20]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4313      	orrs	r3, r2
 8005cae:	617b      	str	r3, [r7, #20]
 8005cb0:	e003      	b.n	8005cba <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	f043 0301 	orr.w	r3, r3, #1
 8005cb8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005cc0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	011b      	lsls	r3, r3, #4
 8005cc6:	b2db      	uxtb	r3, r3
 8005cc8:	697a      	ldr	r2, [r7, #20]
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	f023 030a 	bic.w	r3, r3, #10
 8005cd4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	f003 030a 	and.w	r3, r3, #10
 8005cdc:	693a      	ldr	r2, [r7, #16]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	697a      	ldr	r2, [r7, #20]
 8005ce6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	693a      	ldr	r2, [r7, #16]
 8005cec:	621a      	str	r2, [r3, #32]
}
 8005cee:	bf00      	nop
 8005cf0:	371c      	adds	r7, #28
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr
 8005cfa:	bf00      	nop
 8005cfc:	40010000 	.word	0x40010000
 8005d00:	40000400 	.word	0x40000400
 8005d04:	40000800 	.word	0x40000800
 8005d08:	40000c00 	.word	0x40000c00
 8005d0c:	40014000 	.word	0x40014000

08005d10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b087      	sub	sp, #28
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	60b9      	str	r1, [r7, #8]
 8005d1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	6a1b      	ldr	r3, [r3, #32]
 8005d20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	6a1b      	ldr	r3, [r3, #32]
 8005d26:	f023 0201 	bic.w	r2, r3, #1
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	699b      	ldr	r3, [r3, #24]
 8005d32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	011b      	lsls	r3, r3, #4
 8005d40:	693a      	ldr	r2, [r7, #16]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	f023 030a 	bic.w	r3, r3, #10
 8005d4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d4e:	697a      	ldr	r2, [r7, #20]
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	693a      	ldr	r2, [r7, #16]
 8005d5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	697a      	ldr	r2, [r7, #20]
 8005d60:	621a      	str	r2, [r3, #32]
}
 8005d62:	bf00      	nop
 8005d64:	371c      	adds	r7, #28
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr

08005d6e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005d6e:	b480      	push	{r7}
 8005d70:	b087      	sub	sp, #28
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	60f8      	str	r0, [r7, #12]
 8005d76:	60b9      	str	r1, [r7, #8]
 8005d78:	607a      	str	r2, [r7, #4]
 8005d7a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6a1b      	ldr	r3, [r3, #32]
 8005d80:	f023 0210 	bic.w	r2, r3, #16
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	699b      	ldr	r3, [r3, #24]
 8005d8c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	6a1b      	ldr	r3, [r3, #32]
 8005d92:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d9a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	021b      	lsls	r3, r3, #8
 8005da0:	697a      	ldr	r2, [r7, #20]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005dac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	031b      	lsls	r3, r3, #12
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	697a      	ldr	r2, [r7, #20]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005dc0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	011b      	lsls	r3, r3, #4
 8005dc6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005dca:	693a      	ldr	r2, [r7, #16]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	697a      	ldr	r2, [r7, #20]
 8005dd4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	693a      	ldr	r2, [r7, #16]
 8005dda:	621a      	str	r2, [r3, #32]
}
 8005ddc:	bf00      	nop
 8005dde:	371c      	adds	r7, #28
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr

08005de8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b087      	sub	sp, #28
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	60f8      	str	r0, [r7, #12]
 8005df0:	60b9      	str	r1, [r7, #8]
 8005df2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6a1b      	ldr	r3, [r3, #32]
 8005df8:	f023 0210 	bic.w	r2, r3, #16
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	699b      	ldr	r3, [r3, #24]
 8005e04:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6a1b      	ldr	r3, [r3, #32]
 8005e0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e12:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	031b      	lsls	r3, r3, #12
 8005e18:	697a      	ldr	r2, [r7, #20]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e24:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	011b      	lsls	r3, r3, #4
 8005e2a:	693a      	ldr	r2, [r7, #16]
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	697a      	ldr	r2, [r7, #20]
 8005e34:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	693a      	ldr	r2, [r7, #16]
 8005e3a:	621a      	str	r2, [r3, #32]
}
 8005e3c:	bf00      	nop
 8005e3e:	371c      	adds	r7, #28
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b087      	sub	sp, #28
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	60b9      	str	r1, [r7, #8]
 8005e52:	607a      	str	r2, [r7, #4]
 8005e54:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	6a1b      	ldr	r3, [r3, #32]
 8005e5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	69db      	ldr	r3, [r3, #28]
 8005e66:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	6a1b      	ldr	r3, [r3, #32]
 8005e6c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	f023 0303 	bic.w	r3, r3, #3
 8005e74:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005e76:	697a      	ldr	r2, [r7, #20]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e84:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	011b      	lsls	r3, r3, #4
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	697a      	ldr	r2, [r7, #20]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005e98:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	021b      	lsls	r3, r3, #8
 8005e9e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005ea2:	693a      	ldr	r2, [r7, #16]
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	697a      	ldr	r2, [r7, #20]
 8005eac:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	693a      	ldr	r2, [r7, #16]
 8005eb2:	621a      	str	r2, [r3, #32]
}
 8005eb4:	bf00      	nop
 8005eb6:	371c      	adds	r7, #28
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr

08005ec0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b087      	sub	sp, #28
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	60f8      	str	r0, [r7, #12]
 8005ec8:	60b9      	str	r1, [r7, #8]
 8005eca:	607a      	str	r2, [r7, #4]
 8005ecc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	6a1b      	ldr	r3, [r3, #32]
 8005ed2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	69db      	ldr	r3, [r3, #28]
 8005ede:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6a1b      	ldr	r3, [r3, #32]
 8005ee4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005eec:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	021b      	lsls	r3, r3, #8
 8005ef2:	697a      	ldr	r2, [r7, #20]
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005efe:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	031b      	lsls	r3, r3, #12
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	697a      	ldr	r2, [r7, #20]
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005f12:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	031b      	lsls	r3, r3, #12
 8005f18:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005f1c:	693a      	ldr	r2, [r7, #16]
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	697a      	ldr	r2, [r7, #20]
 8005f26:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	693a      	ldr	r2, [r7, #16]
 8005f2c:	621a      	str	r2, [r3, #32]
}
 8005f2e:	bf00      	nop
 8005f30:	371c      	adds	r7, #28
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr

08005f3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f3a:	b480      	push	{r7}
 8005f3c:	b085      	sub	sp, #20
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	6078      	str	r0, [r7, #4]
 8005f42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f52:	683a      	ldr	r2, [r7, #0]
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	f043 0307 	orr.w	r3, r3, #7
 8005f5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	68fa      	ldr	r2, [r7, #12]
 8005f62:	609a      	str	r2, [r3, #8]
}
 8005f64:	bf00      	nop
 8005f66:	3714      	adds	r7, #20
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr

08005f70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b087      	sub	sp, #28
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	60b9      	str	r1, [r7, #8]
 8005f7a:	607a      	str	r2, [r7, #4]
 8005f7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	021a      	lsls	r2, r3, #8
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	431a      	orrs	r2, r3
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	697a      	ldr	r2, [r7, #20]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	697a      	ldr	r2, [r7, #20]
 8005fa2:	609a      	str	r2, [r3, #8]
}
 8005fa4:	bf00      	nop
 8005fa6:	371c      	adds	r7, #28
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b087      	sub	sp, #28
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	60f8      	str	r0, [r7, #12]
 8005fb8:	60b9      	str	r1, [r7, #8]
 8005fba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	f003 031f 	and.w	r3, r3, #31
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	6a1a      	ldr	r2, [r3, #32]
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	43db      	mvns	r3, r3
 8005fd2:	401a      	ands	r2, r3
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	6a1a      	ldr	r2, [r3, #32]
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	f003 031f 	and.w	r3, r3, #31
 8005fe2:	6879      	ldr	r1, [r7, #4]
 8005fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8005fe8:	431a      	orrs	r2, r3
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	621a      	str	r2, [r3, #32]
}
 8005fee:	bf00      	nop
 8005ff0:	371c      	adds	r7, #28
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr
	...

08005ffc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b085      	sub	sp, #20
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800600c:	2b01      	cmp	r3, #1
 800600e:	d101      	bne.n	8006014 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006010:	2302      	movs	r3, #2
 8006012:	e050      	b.n	80060b6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2201      	movs	r2, #1
 8006018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2202      	movs	r2, #2
 8006020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800603a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	68fa      	ldr	r2, [r7, #12]
 8006042:	4313      	orrs	r3, r2
 8006044:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	68fa      	ldr	r2, [r7, #12]
 800604c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a1c      	ldr	r2, [pc, #112]	; (80060c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d018      	beq.n	800608a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006060:	d013      	beq.n	800608a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a18      	ldr	r2, [pc, #96]	; (80060c8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d00e      	beq.n	800608a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a16      	ldr	r2, [pc, #88]	; (80060cc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d009      	beq.n	800608a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a15      	ldr	r2, [pc, #84]	; (80060d0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d004      	beq.n	800608a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a13      	ldr	r2, [pc, #76]	; (80060d4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d10c      	bne.n	80060a4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006090:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	68ba      	ldr	r2, [r7, #8]
 8006098:	4313      	orrs	r3, r2
 800609a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	68ba      	ldr	r2, [r7, #8]
 80060a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060b4:	2300      	movs	r3, #0
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3714      	adds	r7, #20
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr
 80060c2:	bf00      	nop
 80060c4:	40010000 	.word	0x40010000
 80060c8:	40000400 	.word	0x40000400
 80060cc:	40000800 	.word	0x40000800
 80060d0:	40000c00 	.word	0x40000c00
 80060d4:	40014000 	.word	0x40014000

080060d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80060d8:	b480      	push	{r7}
 80060da:	b083      	sub	sp, #12
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80060e0:	bf00      	nop
 80060e2:	370c      	adds	r7, #12
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80060f4:	bf00      	nop
 80060f6:	370c      	adds	r7, #12
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr

08006100 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b082      	sub	sp, #8
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d101      	bne.n	8006112 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	e03f      	b.n	8006192 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006118:	b2db      	uxtb	r3, r3
 800611a:	2b00      	cmp	r3, #0
 800611c:	d106      	bne.n	800612c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2200      	movs	r2, #0
 8006122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f7fc f838 	bl	800219c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2224      	movs	r2, #36	; 0x24
 8006130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	68da      	ldr	r2, [r3, #12]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006142:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f000 fc47 	bl	80069d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	691a      	ldr	r2, [r3, #16]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006158:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	695a      	ldr	r2, [r3, #20]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006168:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	68da      	ldr	r2, [r3, #12]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006178:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2200      	movs	r2, #0
 800617e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2220      	movs	r2, #32
 8006184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2220      	movs	r2, #32
 800618c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006190:	2300      	movs	r3, #0
}
 8006192:	4618      	mov	r0, r3
 8006194:	3708      	adds	r7, #8
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}

0800619a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800619a:	b580      	push	{r7, lr}
 800619c:	b08a      	sub	sp, #40	; 0x28
 800619e:	af02      	add	r7, sp, #8
 80061a0:	60f8      	str	r0, [r7, #12]
 80061a2:	60b9      	str	r1, [r7, #8]
 80061a4:	603b      	str	r3, [r7, #0]
 80061a6:	4613      	mov	r3, r2
 80061a8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80061aa:	2300      	movs	r3, #0
 80061ac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	2b20      	cmp	r3, #32
 80061b8:	d17c      	bne.n	80062b4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d002      	beq.n	80061c6 <HAL_UART_Transmit+0x2c>
 80061c0:	88fb      	ldrh	r3, [r7, #6]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d101      	bne.n	80061ca <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	e075      	b.n	80062b6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	d101      	bne.n	80061d8 <HAL_UART_Transmit+0x3e>
 80061d4:	2302      	movs	r3, #2
 80061d6:	e06e      	b.n	80062b6 <HAL_UART_Transmit+0x11c>
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2201      	movs	r2, #1
 80061dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2200      	movs	r2, #0
 80061e4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2221      	movs	r2, #33	; 0x21
 80061ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80061ee:	f7fc f91b 	bl	8002428 <HAL_GetTick>
 80061f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	88fa      	ldrh	r2, [r7, #6]
 80061f8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	88fa      	ldrh	r2, [r7, #6]
 80061fe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006208:	d108      	bne.n	800621c <HAL_UART_Transmit+0x82>
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	691b      	ldr	r3, [r3, #16]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d104      	bne.n	800621c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006212:	2300      	movs	r3, #0
 8006214:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	61bb      	str	r3, [r7, #24]
 800621a:	e003      	b.n	8006224 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006220:	2300      	movs	r3, #0
 8006222:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2200      	movs	r2, #0
 8006228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800622c:	e02a      	b.n	8006284 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	9300      	str	r3, [sp, #0]
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	2200      	movs	r2, #0
 8006236:	2180      	movs	r1, #128	; 0x80
 8006238:	68f8      	ldr	r0, [r7, #12]
 800623a:	f000 fa34 	bl	80066a6 <UART_WaitOnFlagUntilTimeout>
 800623e:	4603      	mov	r3, r0
 8006240:	2b00      	cmp	r3, #0
 8006242:	d001      	beq.n	8006248 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006244:	2303      	movs	r3, #3
 8006246:	e036      	b.n	80062b6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006248:	69fb      	ldr	r3, [r7, #28]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d10b      	bne.n	8006266 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800624e:	69bb      	ldr	r3, [r7, #24]
 8006250:	881b      	ldrh	r3, [r3, #0]
 8006252:	461a      	mov	r2, r3
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800625c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800625e:	69bb      	ldr	r3, [r7, #24]
 8006260:	3302      	adds	r3, #2
 8006262:	61bb      	str	r3, [r7, #24]
 8006264:	e007      	b.n	8006276 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006266:	69fb      	ldr	r3, [r7, #28]
 8006268:	781a      	ldrb	r2, [r3, #0]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006270:	69fb      	ldr	r3, [r7, #28]
 8006272:	3301      	adds	r3, #1
 8006274:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800627a:	b29b      	uxth	r3, r3
 800627c:	3b01      	subs	r3, #1
 800627e:	b29a      	uxth	r2, r3
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006288:	b29b      	uxth	r3, r3
 800628a:	2b00      	cmp	r3, #0
 800628c:	d1cf      	bne.n	800622e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	9300      	str	r3, [sp, #0]
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	2200      	movs	r2, #0
 8006296:	2140      	movs	r1, #64	; 0x40
 8006298:	68f8      	ldr	r0, [r7, #12]
 800629a:	f000 fa04 	bl	80066a6 <UART_WaitOnFlagUntilTimeout>
 800629e:	4603      	mov	r3, r0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d001      	beq.n	80062a8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80062a4:	2303      	movs	r3, #3
 80062a6:	e006      	b.n	80062b6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2220      	movs	r2, #32
 80062ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80062b0:	2300      	movs	r3, #0
 80062b2:	e000      	b.n	80062b6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80062b4:	2302      	movs	r3, #2
  }
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3720      	adds	r7, #32
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}

080062be <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062be:	b580      	push	{r7, lr}
 80062c0:	b08a      	sub	sp, #40	; 0x28
 80062c2:	af02      	add	r7, sp, #8
 80062c4:	60f8      	str	r0, [r7, #12]
 80062c6:	60b9      	str	r1, [r7, #8]
 80062c8:	603b      	str	r3, [r7, #0]
 80062ca:	4613      	mov	r3, r2
 80062cc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80062ce:	2300      	movs	r3, #0
 80062d0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	2b20      	cmp	r3, #32
 80062dc:	f040 808c 	bne.w	80063f8 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d002      	beq.n	80062ec <HAL_UART_Receive+0x2e>
 80062e6:	88fb      	ldrh	r3, [r7, #6]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d101      	bne.n	80062f0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	e084      	b.n	80063fa <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d101      	bne.n	80062fe <HAL_UART_Receive+0x40>
 80062fa:	2302      	movs	r3, #2
 80062fc:	e07d      	b.n	80063fa <HAL_UART_Receive+0x13c>
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2201      	movs	r2, #1
 8006302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2200      	movs	r2, #0
 800630a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2222      	movs	r2, #34	; 0x22
 8006310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2200      	movs	r2, #0
 8006318:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800631a:	f7fc f885 	bl	8002428 <HAL_GetTick>
 800631e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	88fa      	ldrh	r2, [r7, #6]
 8006324:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	88fa      	ldrh	r2, [r7, #6]
 800632a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006334:	d108      	bne.n	8006348 <HAL_UART_Receive+0x8a>
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	691b      	ldr	r3, [r3, #16]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d104      	bne.n	8006348 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800633e:	2300      	movs	r3, #0
 8006340:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	61bb      	str	r3, [r7, #24]
 8006346:	e003      	b.n	8006350 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800634c:	2300      	movs	r3, #0
 800634e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2200      	movs	r2, #0
 8006354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006358:	e043      	b.n	80063e2 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	9300      	str	r3, [sp, #0]
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	2200      	movs	r2, #0
 8006362:	2120      	movs	r1, #32
 8006364:	68f8      	ldr	r0, [r7, #12]
 8006366:	f000 f99e 	bl	80066a6 <UART_WaitOnFlagUntilTimeout>
 800636a:	4603      	mov	r3, r0
 800636c:	2b00      	cmp	r3, #0
 800636e:	d001      	beq.n	8006374 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8006370:	2303      	movs	r3, #3
 8006372:	e042      	b.n	80063fa <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8006374:	69fb      	ldr	r3, [r7, #28]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d10c      	bne.n	8006394 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	b29b      	uxth	r3, r3
 8006382:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006386:	b29a      	uxth	r2, r3
 8006388:	69bb      	ldr	r3, [r7, #24]
 800638a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800638c:	69bb      	ldr	r3, [r7, #24]
 800638e:	3302      	adds	r3, #2
 8006390:	61bb      	str	r3, [r7, #24]
 8006392:	e01f      	b.n	80063d4 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800639c:	d007      	beq.n	80063ae <HAL_UART_Receive+0xf0>
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d10a      	bne.n	80063bc <HAL_UART_Receive+0xfe>
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	691b      	ldr	r3, [r3, #16]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d106      	bne.n	80063bc <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	b2da      	uxtb	r2, r3
 80063b6:	69fb      	ldr	r3, [r7, #28]
 80063b8:	701a      	strb	r2, [r3, #0]
 80063ba:	e008      	b.n	80063ce <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063c8:	b2da      	uxtb	r2, r3
 80063ca:	69fb      	ldr	r3, [r7, #28]
 80063cc:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80063ce:	69fb      	ldr	r3, [r7, #28]
 80063d0:	3301      	adds	r3, #1
 80063d2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80063d8:	b29b      	uxth	r3, r3
 80063da:	3b01      	subs	r3, #1
 80063dc:	b29a      	uxth	r2, r3
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d1b6      	bne.n	800635a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2220      	movs	r2, #32
 80063f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80063f4:	2300      	movs	r3, #0
 80063f6:	e000      	b.n	80063fa <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80063f8:	2302      	movs	r3, #2
  }
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3720      	adds	r7, #32
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}

08006402 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006402:	b580      	push	{r7, lr}
 8006404:	b084      	sub	sp, #16
 8006406:	af00      	add	r7, sp, #0
 8006408:	60f8      	str	r0, [r7, #12]
 800640a:	60b9      	str	r1, [r7, #8]
 800640c:	4613      	mov	r3, r2
 800640e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006416:	b2db      	uxtb	r3, r3
 8006418:	2b20      	cmp	r3, #32
 800641a:	d11d      	bne.n	8006458 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d002      	beq.n	8006428 <HAL_UART_Receive_DMA+0x26>
 8006422:	88fb      	ldrh	r3, [r7, #6]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d101      	bne.n	800642c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	e016      	b.n	800645a <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006432:	2b01      	cmp	r3, #1
 8006434:	d101      	bne.n	800643a <HAL_UART_Receive_DMA+0x38>
 8006436:	2302      	movs	r3, #2
 8006438:	e00f      	b.n	800645a <HAL_UART_Receive_DMA+0x58>
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2201      	movs	r2, #1
 800643e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2200      	movs	r2, #0
 8006446:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006448:	88fb      	ldrh	r3, [r7, #6]
 800644a:	461a      	mov	r2, r3
 800644c:	68b9      	ldr	r1, [r7, #8]
 800644e:	68f8      	ldr	r0, [r7, #12]
 8006450:	f000 f998 	bl	8006784 <UART_Start_Receive_DMA>
 8006454:	4603      	mov	r3, r0
 8006456:	e000      	b.n	800645a <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006458:	2302      	movs	r3, #2
  }
}
 800645a:	4618      	mov	r0, r3
 800645c:	3710      	adds	r7, #16
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}

08006462 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006462:	b480      	push	{r7}
 8006464:	b083      	sub	sp, #12
 8006466:	af00      	add	r7, sp, #0
 8006468:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800646a:	bf00      	nop
 800646c:	370c      	adds	r7, #12
 800646e:	46bd      	mov	sp, r7
 8006470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006474:	4770      	bx	lr

08006476 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006476:	b480      	push	{r7}
 8006478:	b083      	sub	sp, #12
 800647a:	af00      	add	r7, sp, #0
 800647c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800647e:	bf00      	nop
 8006480:	370c      	adds	r7, #12
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr

0800648a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800648a:	b480      	push	{r7}
 800648c:	b083      	sub	sp, #12
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006492:	bf00      	nop
 8006494:	370c      	adds	r7, #12
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr

0800649e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800649e:	b480      	push	{r7}
 80064a0:	b083      	sub	sp, #12
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	6078      	str	r0, [r7, #4]
 80064a6:	460b      	mov	r3, r1
 80064a8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80064aa:	bf00      	nop
 80064ac:	370c      	adds	r7, #12
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr

080064b6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80064b6:	b580      	push	{r7, lr}
 80064b8:	b09c      	sub	sp, #112	; 0x70
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c2:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d172      	bne.n	80065b8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80064d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064d4:	2200      	movs	r2, #0
 80064d6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80064d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	330c      	adds	r3, #12
 80064de:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064e2:	e853 3f00 	ldrex	r3, [r3]
 80064e6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80064e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80064f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	330c      	adds	r3, #12
 80064f6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80064f8:	65ba      	str	r2, [r7, #88]	; 0x58
 80064fa:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80064fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006500:	e841 2300 	strex	r3, r2, [r1]
 8006504:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006506:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006508:	2b00      	cmp	r3, #0
 800650a:	d1e5      	bne.n	80064d8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800650c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	3314      	adds	r3, #20
 8006512:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006516:	e853 3f00 	ldrex	r3, [r3]
 800651a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800651c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800651e:	f023 0301 	bic.w	r3, r3, #1
 8006522:	667b      	str	r3, [r7, #100]	; 0x64
 8006524:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	3314      	adds	r3, #20
 800652a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800652c:	647a      	str	r2, [r7, #68]	; 0x44
 800652e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006530:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006532:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006534:	e841 2300 	strex	r3, r2, [r1]
 8006538:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800653a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800653c:	2b00      	cmp	r3, #0
 800653e:	d1e5      	bne.n	800650c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006540:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	3314      	adds	r3, #20
 8006546:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654a:	e853 3f00 	ldrex	r3, [r3]
 800654e:	623b      	str	r3, [r7, #32]
   return(result);
 8006550:	6a3b      	ldr	r3, [r7, #32]
 8006552:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006556:	663b      	str	r3, [r7, #96]	; 0x60
 8006558:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	3314      	adds	r3, #20
 800655e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006560:	633a      	str	r2, [r7, #48]	; 0x30
 8006562:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006564:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006566:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006568:	e841 2300 	strex	r3, r2, [r1]
 800656c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800656e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006570:	2b00      	cmp	r3, #0
 8006572:	d1e5      	bne.n	8006540 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006574:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006576:	2220      	movs	r2, #32
 8006578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800657c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800657e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006580:	2b01      	cmp	r3, #1
 8006582:	d119      	bne.n	80065b8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006584:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	330c      	adds	r3, #12
 800658a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	e853 3f00 	ldrex	r3, [r3]
 8006592:	60fb      	str	r3, [r7, #12]
   return(result);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f023 0310 	bic.w	r3, r3, #16
 800659a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800659c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	330c      	adds	r3, #12
 80065a2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80065a4:	61fa      	str	r2, [r7, #28]
 80065a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a8:	69b9      	ldr	r1, [r7, #24]
 80065aa:	69fa      	ldr	r2, [r7, #28]
 80065ac:	e841 2300 	strex	r3, r2, [r1]
 80065b0:	617b      	str	r3, [r7, #20]
   return(result);
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d1e5      	bne.n	8006584 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d106      	bne.n	80065ce <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80065c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065c2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80065c4:	4619      	mov	r1, r3
 80065c6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80065c8:	f7ff ff69 	bl	800649e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80065cc:	e002      	b.n	80065d4 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80065ce:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80065d0:	f7ff ff47 	bl	8006462 <HAL_UART_RxCpltCallback>
}
 80065d4:	bf00      	nop
 80065d6:	3770      	adds	r7, #112	; 0x70
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}

080065dc <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b084      	sub	sp, #16
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e8:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ee:	2b01      	cmp	r3, #1
 80065f0:	d108      	bne.n	8006604 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80065f6:	085b      	lsrs	r3, r3, #1
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	4619      	mov	r1, r3
 80065fc:	68f8      	ldr	r0, [r7, #12]
 80065fe:	f7ff ff4e 	bl	800649e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006602:	e002      	b.n	800660a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8006604:	68f8      	ldr	r0, [r7, #12]
 8006606:	f7ff ff36 	bl	8006476 <HAL_UART_RxHalfCpltCallback>
}
 800660a:	bf00      	nop
 800660c:	3710      	adds	r7, #16
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}

08006612 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006612:	b580      	push	{r7, lr}
 8006614:	b084      	sub	sp, #16
 8006616:	af00      	add	r7, sp, #0
 8006618:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800661a:	2300      	movs	r3, #0
 800661c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006622:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	695b      	ldr	r3, [r3, #20]
 800662a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800662e:	2b80      	cmp	r3, #128	; 0x80
 8006630:	bf0c      	ite	eq
 8006632:	2301      	moveq	r3, #1
 8006634:	2300      	movne	r3, #0
 8006636:	b2db      	uxtb	r3, r3
 8006638:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006640:	b2db      	uxtb	r3, r3
 8006642:	2b21      	cmp	r3, #33	; 0x21
 8006644:	d108      	bne.n	8006658 <UART_DMAError+0x46>
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d005      	beq.n	8006658 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	2200      	movs	r2, #0
 8006650:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006652:	68b8      	ldr	r0, [r7, #8]
 8006654:	f000 f934 	bl	80068c0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	695b      	ldr	r3, [r3, #20]
 800665e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006662:	2b40      	cmp	r3, #64	; 0x40
 8006664:	bf0c      	ite	eq
 8006666:	2301      	moveq	r3, #1
 8006668:	2300      	movne	r3, #0
 800666a:	b2db      	uxtb	r3, r3
 800666c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006674:	b2db      	uxtb	r3, r3
 8006676:	2b22      	cmp	r3, #34	; 0x22
 8006678:	d108      	bne.n	800668c <UART_DMAError+0x7a>
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d005      	beq.n	800668c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	2200      	movs	r2, #0
 8006684:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006686:	68b8      	ldr	r0, [r7, #8]
 8006688:	f000 f942 	bl	8006910 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006690:	f043 0210 	orr.w	r2, r3, #16
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006698:	68b8      	ldr	r0, [r7, #8]
 800669a:	f7ff fef6 	bl	800648a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800669e:	bf00      	nop
 80066a0:	3710      	adds	r7, #16
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}

080066a6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80066a6:	b580      	push	{r7, lr}
 80066a8:	b090      	sub	sp, #64	; 0x40
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	60f8      	str	r0, [r7, #12]
 80066ae:	60b9      	str	r1, [r7, #8]
 80066b0:	603b      	str	r3, [r7, #0]
 80066b2:	4613      	mov	r3, r2
 80066b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066b6:	e050      	b.n	800675a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066be:	d04c      	beq.n	800675a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80066c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d007      	beq.n	80066d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80066c6:	f7fb feaf 	bl	8002428 <HAL_GetTick>
 80066ca:	4602      	mov	r2, r0
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	1ad3      	subs	r3, r2, r3
 80066d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d241      	bcs.n	800675a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	330c      	adds	r3, #12
 80066dc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e0:	e853 3f00 	ldrex	r3, [r3]
 80066e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80066e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80066ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	330c      	adds	r3, #12
 80066f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80066f6:	637a      	str	r2, [r7, #52]	; 0x34
 80066f8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80066fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80066fe:	e841 2300 	strex	r3, r2, [r1]
 8006702:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006706:	2b00      	cmp	r3, #0
 8006708:	d1e5      	bne.n	80066d6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	3314      	adds	r3, #20
 8006710:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	e853 3f00 	ldrex	r3, [r3]
 8006718:	613b      	str	r3, [r7, #16]
   return(result);
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	f023 0301 	bic.w	r3, r3, #1
 8006720:	63bb      	str	r3, [r7, #56]	; 0x38
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	3314      	adds	r3, #20
 8006728:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800672a:	623a      	str	r2, [r7, #32]
 800672c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800672e:	69f9      	ldr	r1, [r7, #28]
 8006730:	6a3a      	ldr	r2, [r7, #32]
 8006732:	e841 2300 	strex	r3, r2, [r1]
 8006736:	61bb      	str	r3, [r7, #24]
   return(result);
 8006738:	69bb      	ldr	r3, [r7, #24]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d1e5      	bne.n	800670a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2220      	movs	r2, #32
 8006742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2220      	movs	r2, #32
 800674a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2200      	movs	r2, #0
 8006752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006756:	2303      	movs	r3, #3
 8006758:	e00f      	b.n	800677a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	681a      	ldr	r2, [r3, #0]
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	4013      	ands	r3, r2
 8006764:	68ba      	ldr	r2, [r7, #8]
 8006766:	429a      	cmp	r2, r3
 8006768:	bf0c      	ite	eq
 800676a:	2301      	moveq	r3, #1
 800676c:	2300      	movne	r3, #0
 800676e:	b2db      	uxtb	r3, r3
 8006770:	461a      	mov	r2, r3
 8006772:	79fb      	ldrb	r3, [r7, #7]
 8006774:	429a      	cmp	r2, r3
 8006776:	d09f      	beq.n	80066b8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006778:	2300      	movs	r3, #0
}
 800677a:	4618      	mov	r0, r3
 800677c:	3740      	adds	r7, #64	; 0x40
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}
	...

08006784 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b098      	sub	sp, #96	; 0x60
 8006788:	af00      	add	r7, sp, #0
 800678a:	60f8      	str	r0, [r7, #12]
 800678c:	60b9      	str	r1, [r7, #8]
 800678e:	4613      	mov	r3, r2
 8006790:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006792:	68ba      	ldr	r2, [r7, #8]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	88fa      	ldrh	r2, [r7, #6]
 800679c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2200      	movs	r2, #0
 80067a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2222      	movs	r2, #34	; 0x22
 80067a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067b0:	4a40      	ldr	r2, [pc, #256]	; (80068b4 <UART_Start_Receive_DMA+0x130>)
 80067b2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067b8:	4a3f      	ldr	r2, [pc, #252]	; (80068b8 <UART_Start_Receive_DMA+0x134>)
 80067ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067c0:	4a3e      	ldr	r2, [pc, #248]	; (80068bc <UART_Start_Receive_DMA+0x138>)
 80067c2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067c8:	2200      	movs	r2, #0
 80067ca:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80067cc:	f107 0308 	add.w	r3, r7, #8
 80067d0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	3304      	adds	r3, #4
 80067dc:	4619      	mov	r1, r3
 80067de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067e0:	681a      	ldr	r2, [r3, #0]
 80067e2:	88fb      	ldrh	r3, [r7, #6]
 80067e4:	f7fc fbd2 	bl	8002f8c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80067e8:	2300      	movs	r3, #0
 80067ea:	613b      	str	r3, [r7, #16]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	613b      	str	r3, [r7, #16]
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	613b      	str	r3, [r7, #16]
 80067fc:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2200      	movs	r2, #0
 8006802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	691b      	ldr	r3, [r3, #16]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d019      	beq.n	8006842 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	330c      	adds	r3, #12
 8006814:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006816:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006818:	e853 3f00 	ldrex	r3, [r3]
 800681c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800681e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006820:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006824:	65bb      	str	r3, [r7, #88]	; 0x58
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	330c      	adds	r3, #12
 800682c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800682e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006830:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006832:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006834:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006836:	e841 2300 	strex	r3, r2, [r1]
 800683a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800683c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800683e:	2b00      	cmp	r3, #0
 8006840:	d1e5      	bne.n	800680e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	3314      	adds	r3, #20
 8006848:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800684a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800684c:	e853 3f00 	ldrex	r3, [r3]
 8006850:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006854:	f043 0301 	orr.w	r3, r3, #1
 8006858:	657b      	str	r3, [r7, #84]	; 0x54
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	3314      	adds	r3, #20
 8006860:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006862:	63ba      	str	r2, [r7, #56]	; 0x38
 8006864:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006866:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006868:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800686a:	e841 2300 	strex	r3, r2, [r1]
 800686e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006872:	2b00      	cmp	r3, #0
 8006874:	d1e5      	bne.n	8006842 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	3314      	adds	r3, #20
 800687c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800687e:	69bb      	ldr	r3, [r7, #24]
 8006880:	e853 3f00 	ldrex	r3, [r3]
 8006884:	617b      	str	r3, [r7, #20]
   return(result);
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800688c:	653b      	str	r3, [r7, #80]	; 0x50
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	3314      	adds	r3, #20
 8006894:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006896:	627a      	str	r2, [r7, #36]	; 0x24
 8006898:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800689a:	6a39      	ldr	r1, [r7, #32]
 800689c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800689e:	e841 2300 	strex	r3, r2, [r1]
 80068a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80068a4:	69fb      	ldr	r3, [r7, #28]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d1e5      	bne.n	8006876 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80068aa:	2300      	movs	r3, #0
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3760      	adds	r7, #96	; 0x60
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}
 80068b4:	080064b7 	.word	0x080064b7
 80068b8:	080065dd 	.word	0x080065dd
 80068bc:	08006613 	.word	0x08006613

080068c0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b089      	sub	sp, #36	; 0x24
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	330c      	adds	r3, #12
 80068ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	e853 3f00 	ldrex	r3, [r3]
 80068d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80068de:	61fb      	str	r3, [r7, #28]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	330c      	adds	r3, #12
 80068e6:	69fa      	ldr	r2, [r7, #28]
 80068e8:	61ba      	str	r2, [r7, #24]
 80068ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ec:	6979      	ldr	r1, [r7, #20]
 80068ee:	69ba      	ldr	r2, [r7, #24]
 80068f0:	e841 2300 	strex	r3, r2, [r1]
 80068f4:	613b      	str	r3, [r7, #16]
   return(result);
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d1e5      	bne.n	80068c8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2220      	movs	r2, #32
 8006900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006904:	bf00      	nop
 8006906:	3724      	adds	r7, #36	; 0x24
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr

08006910 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006910:	b480      	push	{r7}
 8006912:	b095      	sub	sp, #84	; 0x54
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	330c      	adds	r3, #12
 800691e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006922:	e853 3f00 	ldrex	r3, [r3]
 8006926:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800692a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800692e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	330c      	adds	r3, #12
 8006936:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006938:	643a      	str	r2, [r7, #64]	; 0x40
 800693a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800693c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800693e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006940:	e841 2300 	strex	r3, r2, [r1]
 8006944:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006948:	2b00      	cmp	r3, #0
 800694a:	d1e5      	bne.n	8006918 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	3314      	adds	r3, #20
 8006952:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006954:	6a3b      	ldr	r3, [r7, #32]
 8006956:	e853 3f00 	ldrex	r3, [r3]
 800695a:	61fb      	str	r3, [r7, #28]
   return(result);
 800695c:	69fb      	ldr	r3, [r7, #28]
 800695e:	f023 0301 	bic.w	r3, r3, #1
 8006962:	64bb      	str	r3, [r7, #72]	; 0x48
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	3314      	adds	r3, #20
 800696a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800696c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800696e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006970:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006972:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006974:	e841 2300 	strex	r3, r2, [r1]
 8006978:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800697a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697c:	2b00      	cmp	r3, #0
 800697e:	d1e5      	bne.n	800694c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006984:	2b01      	cmp	r3, #1
 8006986:	d119      	bne.n	80069bc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	330c      	adds	r3, #12
 800698e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	e853 3f00 	ldrex	r3, [r3]
 8006996:	60bb      	str	r3, [r7, #8]
   return(result);
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	f023 0310 	bic.w	r3, r3, #16
 800699e:	647b      	str	r3, [r7, #68]	; 0x44
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	330c      	adds	r3, #12
 80069a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80069a8:	61ba      	str	r2, [r7, #24]
 80069aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ac:	6979      	ldr	r1, [r7, #20]
 80069ae:	69ba      	ldr	r2, [r7, #24]
 80069b0:	e841 2300 	strex	r3, r2, [r1]
 80069b4:	613b      	str	r3, [r7, #16]
   return(result);
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d1e5      	bne.n	8006988 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2220      	movs	r2, #32
 80069c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2200      	movs	r2, #0
 80069c8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80069ca:	bf00      	nop
 80069cc:	3754      	adds	r7, #84	; 0x54
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr
	...

080069d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069dc:	b0c0      	sub	sp, #256	; 0x100
 80069de:	af00      	add	r7, sp, #0
 80069e0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	691b      	ldr	r3, [r3, #16]
 80069ec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80069f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069f4:	68d9      	ldr	r1, [r3, #12]
 80069f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069fa:	681a      	ldr	r2, [r3, #0]
 80069fc:	ea40 0301 	orr.w	r3, r0, r1
 8006a00:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006a02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a06:	689a      	ldr	r2, [r3, #8]
 8006a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a0c:	691b      	ldr	r3, [r3, #16]
 8006a0e:	431a      	orrs	r2, r3
 8006a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a14:	695b      	ldr	r3, [r3, #20]
 8006a16:	431a      	orrs	r2, r3
 8006a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a1c:	69db      	ldr	r3, [r3, #28]
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	68db      	ldr	r3, [r3, #12]
 8006a2c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006a30:	f021 010c 	bic.w	r1, r1, #12
 8006a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006a3e:	430b      	orrs	r3, r1
 8006a40:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006a42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	695b      	ldr	r3, [r3, #20]
 8006a4a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006a4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a52:	6999      	ldr	r1, [r3, #24]
 8006a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	ea40 0301 	orr.w	r3, r0, r1
 8006a5e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a64:	681a      	ldr	r2, [r3, #0]
 8006a66:	4b8f      	ldr	r3, [pc, #572]	; (8006ca4 <UART_SetConfig+0x2cc>)
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d005      	beq.n	8006a78 <UART_SetConfig+0xa0>
 8006a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a70:	681a      	ldr	r2, [r3, #0]
 8006a72:	4b8d      	ldr	r3, [pc, #564]	; (8006ca8 <UART_SetConfig+0x2d0>)
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d104      	bne.n	8006a82 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006a78:	f7fd ffd0 	bl	8004a1c <HAL_RCC_GetPCLK2Freq>
 8006a7c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006a80:	e003      	b.n	8006a8a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006a82:	f7fd ffb7 	bl	80049f4 <HAL_RCC_GetPCLK1Freq>
 8006a86:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a8e:	69db      	ldr	r3, [r3, #28]
 8006a90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a94:	f040 810c 	bne.w	8006cb0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006a98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006aa2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006aa6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006aaa:	4622      	mov	r2, r4
 8006aac:	462b      	mov	r3, r5
 8006aae:	1891      	adds	r1, r2, r2
 8006ab0:	65b9      	str	r1, [r7, #88]	; 0x58
 8006ab2:	415b      	adcs	r3, r3
 8006ab4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ab6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006aba:	4621      	mov	r1, r4
 8006abc:	eb12 0801 	adds.w	r8, r2, r1
 8006ac0:	4629      	mov	r1, r5
 8006ac2:	eb43 0901 	adc.w	r9, r3, r1
 8006ac6:	f04f 0200 	mov.w	r2, #0
 8006aca:	f04f 0300 	mov.w	r3, #0
 8006ace:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006ad2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006ad6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006ada:	4690      	mov	r8, r2
 8006adc:	4699      	mov	r9, r3
 8006ade:	4623      	mov	r3, r4
 8006ae0:	eb18 0303 	adds.w	r3, r8, r3
 8006ae4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006ae8:	462b      	mov	r3, r5
 8006aea:	eb49 0303 	adc.w	r3, r9, r3
 8006aee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	2200      	movs	r2, #0
 8006afa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006afe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006b02:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006b06:	460b      	mov	r3, r1
 8006b08:	18db      	adds	r3, r3, r3
 8006b0a:	653b      	str	r3, [r7, #80]	; 0x50
 8006b0c:	4613      	mov	r3, r2
 8006b0e:	eb42 0303 	adc.w	r3, r2, r3
 8006b12:	657b      	str	r3, [r7, #84]	; 0x54
 8006b14:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006b18:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006b1c:	f7f9 fbb0 	bl	8000280 <__aeabi_uldivmod>
 8006b20:	4602      	mov	r2, r0
 8006b22:	460b      	mov	r3, r1
 8006b24:	4b61      	ldr	r3, [pc, #388]	; (8006cac <UART_SetConfig+0x2d4>)
 8006b26:	fba3 2302 	umull	r2, r3, r3, r2
 8006b2a:	095b      	lsrs	r3, r3, #5
 8006b2c:	011c      	lsls	r4, r3, #4
 8006b2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b32:	2200      	movs	r2, #0
 8006b34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006b38:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006b3c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006b40:	4642      	mov	r2, r8
 8006b42:	464b      	mov	r3, r9
 8006b44:	1891      	adds	r1, r2, r2
 8006b46:	64b9      	str	r1, [r7, #72]	; 0x48
 8006b48:	415b      	adcs	r3, r3
 8006b4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b4c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006b50:	4641      	mov	r1, r8
 8006b52:	eb12 0a01 	adds.w	sl, r2, r1
 8006b56:	4649      	mov	r1, r9
 8006b58:	eb43 0b01 	adc.w	fp, r3, r1
 8006b5c:	f04f 0200 	mov.w	r2, #0
 8006b60:	f04f 0300 	mov.w	r3, #0
 8006b64:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006b68:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006b6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b70:	4692      	mov	sl, r2
 8006b72:	469b      	mov	fp, r3
 8006b74:	4643      	mov	r3, r8
 8006b76:	eb1a 0303 	adds.w	r3, sl, r3
 8006b7a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006b7e:	464b      	mov	r3, r9
 8006b80:	eb4b 0303 	adc.w	r3, fp, r3
 8006b84:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006b94:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006b98:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006b9c:	460b      	mov	r3, r1
 8006b9e:	18db      	adds	r3, r3, r3
 8006ba0:	643b      	str	r3, [r7, #64]	; 0x40
 8006ba2:	4613      	mov	r3, r2
 8006ba4:	eb42 0303 	adc.w	r3, r2, r3
 8006ba8:	647b      	str	r3, [r7, #68]	; 0x44
 8006baa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006bae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006bb2:	f7f9 fb65 	bl	8000280 <__aeabi_uldivmod>
 8006bb6:	4602      	mov	r2, r0
 8006bb8:	460b      	mov	r3, r1
 8006bba:	4611      	mov	r1, r2
 8006bbc:	4b3b      	ldr	r3, [pc, #236]	; (8006cac <UART_SetConfig+0x2d4>)
 8006bbe:	fba3 2301 	umull	r2, r3, r3, r1
 8006bc2:	095b      	lsrs	r3, r3, #5
 8006bc4:	2264      	movs	r2, #100	; 0x64
 8006bc6:	fb02 f303 	mul.w	r3, r2, r3
 8006bca:	1acb      	subs	r3, r1, r3
 8006bcc:	00db      	lsls	r3, r3, #3
 8006bce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006bd2:	4b36      	ldr	r3, [pc, #216]	; (8006cac <UART_SetConfig+0x2d4>)
 8006bd4:	fba3 2302 	umull	r2, r3, r3, r2
 8006bd8:	095b      	lsrs	r3, r3, #5
 8006bda:	005b      	lsls	r3, r3, #1
 8006bdc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006be0:	441c      	add	r4, r3
 8006be2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006be6:	2200      	movs	r2, #0
 8006be8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006bec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006bf0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006bf4:	4642      	mov	r2, r8
 8006bf6:	464b      	mov	r3, r9
 8006bf8:	1891      	adds	r1, r2, r2
 8006bfa:	63b9      	str	r1, [r7, #56]	; 0x38
 8006bfc:	415b      	adcs	r3, r3
 8006bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c00:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006c04:	4641      	mov	r1, r8
 8006c06:	1851      	adds	r1, r2, r1
 8006c08:	6339      	str	r1, [r7, #48]	; 0x30
 8006c0a:	4649      	mov	r1, r9
 8006c0c:	414b      	adcs	r3, r1
 8006c0e:	637b      	str	r3, [r7, #52]	; 0x34
 8006c10:	f04f 0200 	mov.w	r2, #0
 8006c14:	f04f 0300 	mov.w	r3, #0
 8006c18:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006c1c:	4659      	mov	r1, fp
 8006c1e:	00cb      	lsls	r3, r1, #3
 8006c20:	4651      	mov	r1, sl
 8006c22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c26:	4651      	mov	r1, sl
 8006c28:	00ca      	lsls	r2, r1, #3
 8006c2a:	4610      	mov	r0, r2
 8006c2c:	4619      	mov	r1, r3
 8006c2e:	4603      	mov	r3, r0
 8006c30:	4642      	mov	r2, r8
 8006c32:	189b      	adds	r3, r3, r2
 8006c34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006c38:	464b      	mov	r3, r9
 8006c3a:	460a      	mov	r2, r1
 8006c3c:	eb42 0303 	adc.w	r3, r2, r3
 8006c40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006c50:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006c54:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006c58:	460b      	mov	r3, r1
 8006c5a:	18db      	adds	r3, r3, r3
 8006c5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c5e:	4613      	mov	r3, r2
 8006c60:	eb42 0303 	adc.w	r3, r2, r3
 8006c64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c66:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006c6a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006c6e:	f7f9 fb07 	bl	8000280 <__aeabi_uldivmod>
 8006c72:	4602      	mov	r2, r0
 8006c74:	460b      	mov	r3, r1
 8006c76:	4b0d      	ldr	r3, [pc, #52]	; (8006cac <UART_SetConfig+0x2d4>)
 8006c78:	fba3 1302 	umull	r1, r3, r3, r2
 8006c7c:	095b      	lsrs	r3, r3, #5
 8006c7e:	2164      	movs	r1, #100	; 0x64
 8006c80:	fb01 f303 	mul.w	r3, r1, r3
 8006c84:	1ad3      	subs	r3, r2, r3
 8006c86:	00db      	lsls	r3, r3, #3
 8006c88:	3332      	adds	r3, #50	; 0x32
 8006c8a:	4a08      	ldr	r2, [pc, #32]	; (8006cac <UART_SetConfig+0x2d4>)
 8006c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8006c90:	095b      	lsrs	r3, r3, #5
 8006c92:	f003 0207 	and.w	r2, r3, #7
 8006c96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4422      	add	r2, r4
 8006c9e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006ca0:	e106      	b.n	8006eb0 <UART_SetConfig+0x4d8>
 8006ca2:	bf00      	nop
 8006ca4:	40011000 	.word	0x40011000
 8006ca8:	40011400 	.word	0x40011400
 8006cac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006cb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006cba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006cbe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006cc2:	4642      	mov	r2, r8
 8006cc4:	464b      	mov	r3, r9
 8006cc6:	1891      	adds	r1, r2, r2
 8006cc8:	6239      	str	r1, [r7, #32]
 8006cca:	415b      	adcs	r3, r3
 8006ccc:	627b      	str	r3, [r7, #36]	; 0x24
 8006cce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006cd2:	4641      	mov	r1, r8
 8006cd4:	1854      	adds	r4, r2, r1
 8006cd6:	4649      	mov	r1, r9
 8006cd8:	eb43 0501 	adc.w	r5, r3, r1
 8006cdc:	f04f 0200 	mov.w	r2, #0
 8006ce0:	f04f 0300 	mov.w	r3, #0
 8006ce4:	00eb      	lsls	r3, r5, #3
 8006ce6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006cea:	00e2      	lsls	r2, r4, #3
 8006cec:	4614      	mov	r4, r2
 8006cee:	461d      	mov	r5, r3
 8006cf0:	4643      	mov	r3, r8
 8006cf2:	18e3      	adds	r3, r4, r3
 8006cf4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006cf8:	464b      	mov	r3, r9
 8006cfa:	eb45 0303 	adc.w	r3, r5, r3
 8006cfe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006d02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006d0e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006d12:	f04f 0200 	mov.w	r2, #0
 8006d16:	f04f 0300 	mov.w	r3, #0
 8006d1a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006d1e:	4629      	mov	r1, r5
 8006d20:	008b      	lsls	r3, r1, #2
 8006d22:	4621      	mov	r1, r4
 8006d24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d28:	4621      	mov	r1, r4
 8006d2a:	008a      	lsls	r2, r1, #2
 8006d2c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006d30:	f7f9 faa6 	bl	8000280 <__aeabi_uldivmod>
 8006d34:	4602      	mov	r2, r0
 8006d36:	460b      	mov	r3, r1
 8006d38:	4b60      	ldr	r3, [pc, #384]	; (8006ebc <UART_SetConfig+0x4e4>)
 8006d3a:	fba3 2302 	umull	r2, r3, r3, r2
 8006d3e:	095b      	lsrs	r3, r3, #5
 8006d40:	011c      	lsls	r4, r3, #4
 8006d42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d46:	2200      	movs	r2, #0
 8006d48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006d4c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006d50:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006d54:	4642      	mov	r2, r8
 8006d56:	464b      	mov	r3, r9
 8006d58:	1891      	adds	r1, r2, r2
 8006d5a:	61b9      	str	r1, [r7, #24]
 8006d5c:	415b      	adcs	r3, r3
 8006d5e:	61fb      	str	r3, [r7, #28]
 8006d60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d64:	4641      	mov	r1, r8
 8006d66:	1851      	adds	r1, r2, r1
 8006d68:	6139      	str	r1, [r7, #16]
 8006d6a:	4649      	mov	r1, r9
 8006d6c:	414b      	adcs	r3, r1
 8006d6e:	617b      	str	r3, [r7, #20]
 8006d70:	f04f 0200 	mov.w	r2, #0
 8006d74:	f04f 0300 	mov.w	r3, #0
 8006d78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006d7c:	4659      	mov	r1, fp
 8006d7e:	00cb      	lsls	r3, r1, #3
 8006d80:	4651      	mov	r1, sl
 8006d82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d86:	4651      	mov	r1, sl
 8006d88:	00ca      	lsls	r2, r1, #3
 8006d8a:	4610      	mov	r0, r2
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	4603      	mov	r3, r0
 8006d90:	4642      	mov	r2, r8
 8006d92:	189b      	adds	r3, r3, r2
 8006d94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006d98:	464b      	mov	r3, r9
 8006d9a:	460a      	mov	r2, r1
 8006d9c:	eb42 0303 	adc.w	r3, r2, r3
 8006da0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	2200      	movs	r2, #0
 8006dac:	67bb      	str	r3, [r7, #120]	; 0x78
 8006dae:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006db0:	f04f 0200 	mov.w	r2, #0
 8006db4:	f04f 0300 	mov.w	r3, #0
 8006db8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006dbc:	4649      	mov	r1, r9
 8006dbe:	008b      	lsls	r3, r1, #2
 8006dc0:	4641      	mov	r1, r8
 8006dc2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006dc6:	4641      	mov	r1, r8
 8006dc8:	008a      	lsls	r2, r1, #2
 8006dca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006dce:	f7f9 fa57 	bl	8000280 <__aeabi_uldivmod>
 8006dd2:	4602      	mov	r2, r0
 8006dd4:	460b      	mov	r3, r1
 8006dd6:	4611      	mov	r1, r2
 8006dd8:	4b38      	ldr	r3, [pc, #224]	; (8006ebc <UART_SetConfig+0x4e4>)
 8006dda:	fba3 2301 	umull	r2, r3, r3, r1
 8006dde:	095b      	lsrs	r3, r3, #5
 8006de0:	2264      	movs	r2, #100	; 0x64
 8006de2:	fb02 f303 	mul.w	r3, r2, r3
 8006de6:	1acb      	subs	r3, r1, r3
 8006de8:	011b      	lsls	r3, r3, #4
 8006dea:	3332      	adds	r3, #50	; 0x32
 8006dec:	4a33      	ldr	r2, [pc, #204]	; (8006ebc <UART_SetConfig+0x4e4>)
 8006dee:	fba2 2303 	umull	r2, r3, r2, r3
 8006df2:	095b      	lsrs	r3, r3, #5
 8006df4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006df8:	441c      	add	r4, r3
 8006dfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006dfe:	2200      	movs	r2, #0
 8006e00:	673b      	str	r3, [r7, #112]	; 0x70
 8006e02:	677a      	str	r2, [r7, #116]	; 0x74
 8006e04:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006e08:	4642      	mov	r2, r8
 8006e0a:	464b      	mov	r3, r9
 8006e0c:	1891      	adds	r1, r2, r2
 8006e0e:	60b9      	str	r1, [r7, #8]
 8006e10:	415b      	adcs	r3, r3
 8006e12:	60fb      	str	r3, [r7, #12]
 8006e14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006e18:	4641      	mov	r1, r8
 8006e1a:	1851      	adds	r1, r2, r1
 8006e1c:	6039      	str	r1, [r7, #0]
 8006e1e:	4649      	mov	r1, r9
 8006e20:	414b      	adcs	r3, r1
 8006e22:	607b      	str	r3, [r7, #4]
 8006e24:	f04f 0200 	mov.w	r2, #0
 8006e28:	f04f 0300 	mov.w	r3, #0
 8006e2c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006e30:	4659      	mov	r1, fp
 8006e32:	00cb      	lsls	r3, r1, #3
 8006e34:	4651      	mov	r1, sl
 8006e36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e3a:	4651      	mov	r1, sl
 8006e3c:	00ca      	lsls	r2, r1, #3
 8006e3e:	4610      	mov	r0, r2
 8006e40:	4619      	mov	r1, r3
 8006e42:	4603      	mov	r3, r0
 8006e44:	4642      	mov	r2, r8
 8006e46:	189b      	adds	r3, r3, r2
 8006e48:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e4a:	464b      	mov	r3, r9
 8006e4c:	460a      	mov	r2, r1
 8006e4e:	eb42 0303 	adc.w	r3, r2, r3
 8006e52:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	663b      	str	r3, [r7, #96]	; 0x60
 8006e5e:	667a      	str	r2, [r7, #100]	; 0x64
 8006e60:	f04f 0200 	mov.w	r2, #0
 8006e64:	f04f 0300 	mov.w	r3, #0
 8006e68:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006e6c:	4649      	mov	r1, r9
 8006e6e:	008b      	lsls	r3, r1, #2
 8006e70:	4641      	mov	r1, r8
 8006e72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e76:	4641      	mov	r1, r8
 8006e78:	008a      	lsls	r2, r1, #2
 8006e7a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006e7e:	f7f9 f9ff 	bl	8000280 <__aeabi_uldivmod>
 8006e82:	4602      	mov	r2, r0
 8006e84:	460b      	mov	r3, r1
 8006e86:	4b0d      	ldr	r3, [pc, #52]	; (8006ebc <UART_SetConfig+0x4e4>)
 8006e88:	fba3 1302 	umull	r1, r3, r3, r2
 8006e8c:	095b      	lsrs	r3, r3, #5
 8006e8e:	2164      	movs	r1, #100	; 0x64
 8006e90:	fb01 f303 	mul.w	r3, r1, r3
 8006e94:	1ad3      	subs	r3, r2, r3
 8006e96:	011b      	lsls	r3, r3, #4
 8006e98:	3332      	adds	r3, #50	; 0x32
 8006e9a:	4a08      	ldr	r2, [pc, #32]	; (8006ebc <UART_SetConfig+0x4e4>)
 8006e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8006ea0:	095b      	lsrs	r3, r3, #5
 8006ea2:	f003 020f 	and.w	r2, r3, #15
 8006ea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4422      	add	r2, r4
 8006eae:	609a      	str	r2, [r3, #8]
}
 8006eb0:	bf00      	nop
 8006eb2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ebc:	51eb851f 	.word	0x51eb851f

08006ec0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b085      	sub	sp, #20
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006ece:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006ed2:	2b84      	cmp	r3, #132	; 0x84
 8006ed4:	d005      	beq.n	8006ee2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006ed6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	4413      	add	r3, r2
 8006ede:	3303      	adds	r3, #3
 8006ee0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3714      	adds	r7, #20
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr

08006ef0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006ef4:	f000 faf6 	bl	80074e4 <vTaskStartScheduler>
  
  return osOK;
 8006ef8:	2300      	movs	r3, #0
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	bd80      	pop	{r7, pc}

08006efe <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006efe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f00:	b089      	sub	sp, #36	; 0x24
 8006f02:	af04      	add	r7, sp, #16
 8006f04:	6078      	str	r0, [r7, #4]
 8006f06:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	695b      	ldr	r3, [r3, #20]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d020      	beq.n	8006f52 <osThreadCreate+0x54>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	699b      	ldr	r3, [r3, #24]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d01c      	beq.n	8006f52 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	685c      	ldr	r4, [r3, #4]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	691e      	ldr	r6, [r3, #16]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f7ff ffc8 	bl	8006ec0 <makeFreeRtosPriority>
 8006f30:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	695b      	ldr	r3, [r3, #20]
 8006f36:	687a      	ldr	r2, [r7, #4]
 8006f38:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006f3a:	9202      	str	r2, [sp, #8]
 8006f3c:	9301      	str	r3, [sp, #4]
 8006f3e:	9100      	str	r1, [sp, #0]
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	4632      	mov	r2, r6
 8006f44:	4629      	mov	r1, r5
 8006f46:	4620      	mov	r0, r4
 8006f48:	f000 f8ed 	bl	8007126 <xTaskCreateStatic>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	60fb      	str	r3, [r7, #12]
 8006f50:	e01c      	b.n	8006f8c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	685c      	ldr	r4, [r3, #4]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006f5e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006f66:	4618      	mov	r0, r3
 8006f68:	f7ff ffaa 	bl	8006ec0 <makeFreeRtosPriority>
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	f107 030c 	add.w	r3, r7, #12
 8006f72:	9301      	str	r3, [sp, #4]
 8006f74:	9200      	str	r2, [sp, #0]
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	4632      	mov	r2, r6
 8006f7a:	4629      	mov	r1, r5
 8006f7c:	4620      	mov	r0, r4
 8006f7e:	f000 f92f 	bl	80071e0 <xTaskCreate>
 8006f82:	4603      	mov	r3, r0
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d001      	beq.n	8006f8c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006f88:	2300      	movs	r3, #0
 8006f8a:	e000      	b.n	8006f8e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3714      	adds	r7, #20
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006f96 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006f96:	b580      	push	{r7, lr}
 8006f98:	b084      	sub	sp, #16
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d001      	beq.n	8006fac <osDelay+0x16>
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	e000      	b.n	8006fae <osDelay+0x18>
 8006fac:	2301      	movs	r3, #1
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f000 fa64 	bl	800747c <vTaskDelay>
  
  return osOK;
 8006fb4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3710      	adds	r7, #16
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}

08006fbe <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006fbe:	b480      	push	{r7}
 8006fc0:	b083      	sub	sp, #12
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f103 0208 	add.w	r2, r3, #8
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f04f 32ff 	mov.w	r2, #4294967295
 8006fd6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f103 0208 	add.w	r2, r3, #8
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f103 0208 	add.w	r2, r3, #8
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006ff2:	bf00      	nop
 8006ff4:	370c      	adds	r7, #12
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffc:	4770      	bx	lr

08006ffe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006ffe:	b480      	push	{r7}
 8007000:	b083      	sub	sp, #12
 8007002:	af00      	add	r7, sp, #0
 8007004:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2200      	movs	r2, #0
 800700a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800700c:	bf00      	nop
 800700e:	370c      	adds	r7, #12
 8007010:	46bd      	mov	sp, r7
 8007012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007016:	4770      	bx	lr

08007018 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007018:	b480      	push	{r7}
 800701a:	b085      	sub	sp, #20
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	68fa      	ldr	r2, [r7, #12]
 800702c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	689a      	ldr	r2, [r3, #8]
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	689b      	ldr	r3, [r3, #8]
 800703a:	683a      	ldr	r2, [r7, #0]
 800703c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	683a      	ldr	r2, [r7, #0]
 8007042:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	687a      	ldr	r2, [r7, #4]
 8007048:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	1c5a      	adds	r2, r3, #1
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	601a      	str	r2, [r3, #0]
}
 8007054:	bf00      	nop
 8007056:	3714      	adds	r7, #20
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr

08007060 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007060:	b480      	push	{r7}
 8007062:	b085      	sub	sp, #20
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007076:	d103      	bne.n	8007080 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	691b      	ldr	r3, [r3, #16]
 800707c:	60fb      	str	r3, [r7, #12]
 800707e:	e00c      	b.n	800709a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	3308      	adds	r3, #8
 8007084:	60fb      	str	r3, [r7, #12]
 8007086:	e002      	b.n	800708e <vListInsert+0x2e>
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	60fb      	str	r3, [r7, #12]
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	68ba      	ldr	r2, [r7, #8]
 8007096:	429a      	cmp	r2, r3
 8007098:	d2f6      	bcs.n	8007088 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	685a      	ldr	r2, [r3, #4]
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	683a      	ldr	r2, [r7, #0]
 80070a8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	68fa      	ldr	r2, [r7, #12]
 80070ae:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	683a      	ldr	r2, [r7, #0]
 80070b4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	687a      	ldr	r2, [r7, #4]
 80070ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	1c5a      	adds	r2, r3, #1
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	601a      	str	r2, [r3, #0]
}
 80070c6:	bf00      	nop
 80070c8:	3714      	adds	r7, #20
 80070ca:	46bd      	mov	sp, r7
 80070cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d0:	4770      	bx	lr

080070d2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80070d2:	b480      	push	{r7}
 80070d4:	b085      	sub	sp, #20
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	691b      	ldr	r3, [r3, #16]
 80070de:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	687a      	ldr	r2, [r7, #4]
 80070e6:	6892      	ldr	r2, [r2, #8]
 80070e8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	687a      	ldr	r2, [r7, #4]
 80070f0:	6852      	ldr	r2, [r2, #4]
 80070f2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	687a      	ldr	r2, [r7, #4]
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d103      	bne.n	8007106 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	689a      	ldr	r2, [r3, #8]
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2200      	movs	r2, #0
 800710a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	1e5a      	subs	r2, r3, #1
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
}
 800711a:	4618      	mov	r0, r3
 800711c:	3714      	adds	r7, #20
 800711e:	46bd      	mov	sp, r7
 8007120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007124:	4770      	bx	lr

08007126 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007126:	b580      	push	{r7, lr}
 8007128:	b08e      	sub	sp, #56	; 0x38
 800712a:	af04      	add	r7, sp, #16
 800712c:	60f8      	str	r0, [r7, #12]
 800712e:	60b9      	str	r1, [r7, #8]
 8007130:	607a      	str	r2, [r7, #4]
 8007132:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007136:	2b00      	cmp	r3, #0
 8007138:	d10a      	bne.n	8007150 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800713a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800713e:	f383 8811 	msr	BASEPRI, r3
 8007142:	f3bf 8f6f 	isb	sy
 8007146:	f3bf 8f4f 	dsb	sy
 800714a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800714c:	bf00      	nop
 800714e:	e7fe      	b.n	800714e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007152:	2b00      	cmp	r3, #0
 8007154:	d10a      	bne.n	800716c <xTaskCreateStatic+0x46>
	__asm volatile
 8007156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800715a:	f383 8811 	msr	BASEPRI, r3
 800715e:	f3bf 8f6f 	isb	sy
 8007162:	f3bf 8f4f 	dsb	sy
 8007166:	61fb      	str	r3, [r7, #28]
}
 8007168:	bf00      	nop
 800716a:	e7fe      	b.n	800716a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800716c:	23a0      	movs	r3, #160	; 0xa0
 800716e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	2ba0      	cmp	r3, #160	; 0xa0
 8007174:	d00a      	beq.n	800718c <xTaskCreateStatic+0x66>
	__asm volatile
 8007176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800717a:	f383 8811 	msr	BASEPRI, r3
 800717e:	f3bf 8f6f 	isb	sy
 8007182:	f3bf 8f4f 	dsb	sy
 8007186:	61bb      	str	r3, [r7, #24]
}
 8007188:	bf00      	nop
 800718a:	e7fe      	b.n	800718a <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800718c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800718e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007190:	2b00      	cmp	r3, #0
 8007192:	d01e      	beq.n	80071d2 <xTaskCreateStatic+0xac>
 8007194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007196:	2b00      	cmp	r3, #0
 8007198:	d01b      	beq.n	80071d2 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800719a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800719c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800719e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071a2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80071a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a6:	2202      	movs	r2, #2
 80071a8:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80071ac:	2300      	movs	r3, #0
 80071ae:	9303      	str	r3, [sp, #12]
 80071b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b2:	9302      	str	r3, [sp, #8]
 80071b4:	f107 0314 	add.w	r3, r7, #20
 80071b8:	9301      	str	r3, [sp, #4]
 80071ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071bc:	9300      	str	r3, [sp, #0]
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	687a      	ldr	r2, [r7, #4]
 80071c2:	68b9      	ldr	r1, [r7, #8]
 80071c4:	68f8      	ldr	r0, [r7, #12]
 80071c6:	f000 f851 	bl	800726c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80071ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80071cc:	f000 f8ec 	bl	80073a8 <prvAddNewTaskToReadyList>
 80071d0:	e001      	b.n	80071d6 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80071d2:	2300      	movs	r3, #0
 80071d4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80071d6:	697b      	ldr	r3, [r7, #20]
	}
 80071d8:	4618      	mov	r0, r3
 80071da:	3728      	adds	r7, #40	; 0x28
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b08c      	sub	sp, #48	; 0x30
 80071e4:	af04      	add	r7, sp, #16
 80071e6:	60f8      	str	r0, [r7, #12]
 80071e8:	60b9      	str	r1, [r7, #8]
 80071ea:	603b      	str	r3, [r7, #0]
 80071ec:	4613      	mov	r3, r2
 80071ee:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80071f0:	88fb      	ldrh	r3, [r7, #6]
 80071f2:	009b      	lsls	r3, r3, #2
 80071f4:	4618      	mov	r0, r3
 80071f6:	f000 feef 	bl	8007fd8 <pvPortMalloc>
 80071fa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d00e      	beq.n	8007220 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007202:	20a0      	movs	r0, #160	; 0xa0
 8007204:	f000 fee8 	bl	8007fd8 <pvPortMalloc>
 8007208:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800720a:	69fb      	ldr	r3, [r7, #28]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d003      	beq.n	8007218 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007210:	69fb      	ldr	r3, [r7, #28]
 8007212:	697a      	ldr	r2, [r7, #20]
 8007214:	631a      	str	r2, [r3, #48]	; 0x30
 8007216:	e005      	b.n	8007224 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007218:	6978      	ldr	r0, [r7, #20]
 800721a:	f000 ffa9 	bl	8008170 <vPortFree>
 800721e:	e001      	b.n	8007224 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007220:	2300      	movs	r3, #0
 8007222:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007224:	69fb      	ldr	r3, [r7, #28]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d017      	beq.n	800725a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800722a:	69fb      	ldr	r3, [r7, #28]
 800722c:	2200      	movs	r2, #0
 800722e:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007232:	88fa      	ldrh	r2, [r7, #6]
 8007234:	2300      	movs	r3, #0
 8007236:	9303      	str	r3, [sp, #12]
 8007238:	69fb      	ldr	r3, [r7, #28]
 800723a:	9302      	str	r3, [sp, #8]
 800723c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800723e:	9301      	str	r3, [sp, #4]
 8007240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007242:	9300      	str	r3, [sp, #0]
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	68b9      	ldr	r1, [r7, #8]
 8007248:	68f8      	ldr	r0, [r7, #12]
 800724a:	f000 f80f 	bl	800726c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800724e:	69f8      	ldr	r0, [r7, #28]
 8007250:	f000 f8aa 	bl	80073a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007254:	2301      	movs	r3, #1
 8007256:	61bb      	str	r3, [r7, #24]
 8007258:	e002      	b.n	8007260 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800725a:	f04f 33ff 	mov.w	r3, #4294967295
 800725e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007260:	69bb      	ldr	r3, [r7, #24]
	}
 8007262:	4618      	mov	r0, r3
 8007264:	3720      	adds	r7, #32
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}
	...

0800726c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b088      	sub	sp, #32
 8007270:	af00      	add	r7, sp, #0
 8007272:	60f8      	str	r0, [r7, #12]
 8007274:	60b9      	str	r1, [r7, #8]
 8007276:	607a      	str	r2, [r7, #4]
 8007278:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800727a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800727c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007284:	3b01      	subs	r3, #1
 8007286:	009b      	lsls	r3, r3, #2
 8007288:	4413      	add	r3, r2
 800728a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800728c:	69bb      	ldr	r3, [r7, #24]
 800728e:	f023 0307 	bic.w	r3, r3, #7
 8007292:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007294:	69bb      	ldr	r3, [r7, #24]
 8007296:	f003 0307 	and.w	r3, r3, #7
 800729a:	2b00      	cmp	r3, #0
 800729c:	d00a      	beq.n	80072b4 <prvInitialiseNewTask+0x48>
	__asm volatile
 800729e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a2:	f383 8811 	msr	BASEPRI, r3
 80072a6:	f3bf 8f6f 	isb	sy
 80072aa:	f3bf 8f4f 	dsb	sy
 80072ae:	617b      	str	r3, [r7, #20]
}
 80072b0:	bf00      	nop
 80072b2:	e7fe      	b.n	80072b2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d01f      	beq.n	80072fa <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80072ba:	2300      	movs	r3, #0
 80072bc:	61fb      	str	r3, [r7, #28]
 80072be:	e012      	b.n	80072e6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80072c0:	68ba      	ldr	r2, [r7, #8]
 80072c2:	69fb      	ldr	r3, [r7, #28]
 80072c4:	4413      	add	r3, r2
 80072c6:	7819      	ldrb	r1, [r3, #0]
 80072c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072ca:	69fb      	ldr	r3, [r7, #28]
 80072cc:	4413      	add	r3, r2
 80072ce:	3334      	adds	r3, #52	; 0x34
 80072d0:	460a      	mov	r2, r1
 80072d2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80072d4:	68ba      	ldr	r2, [r7, #8]
 80072d6:	69fb      	ldr	r3, [r7, #28]
 80072d8:	4413      	add	r3, r2
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d006      	beq.n	80072ee <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80072e0:	69fb      	ldr	r3, [r7, #28]
 80072e2:	3301      	adds	r3, #1
 80072e4:	61fb      	str	r3, [r7, #28]
 80072e6:	69fb      	ldr	r3, [r7, #28]
 80072e8:	2b0f      	cmp	r3, #15
 80072ea:	d9e9      	bls.n	80072c0 <prvInitialiseNewTask+0x54>
 80072ec:	e000      	b.n	80072f0 <prvInitialiseNewTask+0x84>
			{
				break;
 80072ee:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80072f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f2:	2200      	movs	r2, #0
 80072f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80072f8:	e003      	b.n	8007302 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80072fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072fc:	2200      	movs	r2, #0
 80072fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007304:	2b06      	cmp	r3, #6
 8007306:	d901      	bls.n	800730c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007308:	2306      	movs	r3, #6
 800730a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800730c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800730e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007310:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007314:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007316:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800731a:	2200      	movs	r2, #0
 800731c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800731e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007320:	3304      	adds	r3, #4
 8007322:	4618      	mov	r0, r3
 8007324:	f7ff fe6b 	bl	8006ffe <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800732a:	3318      	adds	r3, #24
 800732c:	4618      	mov	r0, r3
 800732e:	f7ff fe66 	bl	8006ffe <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007334:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007336:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800733a:	f1c3 0207 	rsb	r2, r3, #7
 800733e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007340:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007344:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007346:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800734a:	2200      	movs	r2, #0
 800734c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007352:	2200      	movs	r2, #0
 8007354:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800735a:	334c      	adds	r3, #76	; 0x4c
 800735c:	224c      	movs	r2, #76	; 0x4c
 800735e:	2100      	movs	r1, #0
 8007360:	4618      	mov	r0, r3
 8007362:	f001 fa39 	bl	80087d8 <memset>
 8007366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007368:	4a0c      	ldr	r2, [pc, #48]	; (800739c <prvInitialiseNewTask+0x130>)
 800736a:	651a      	str	r2, [r3, #80]	; 0x50
 800736c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800736e:	4a0c      	ldr	r2, [pc, #48]	; (80073a0 <prvInitialiseNewTask+0x134>)
 8007370:	655a      	str	r2, [r3, #84]	; 0x54
 8007372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007374:	4a0b      	ldr	r2, [pc, #44]	; (80073a4 <prvInitialiseNewTask+0x138>)
 8007376:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007378:	683a      	ldr	r2, [r7, #0]
 800737a:	68f9      	ldr	r1, [r7, #12]
 800737c:	69b8      	ldr	r0, [r7, #24]
 800737e:	f000 fc1f 	bl	8007bc0 <pxPortInitialiseStack>
 8007382:	4602      	mov	r2, r0
 8007384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007386:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800738a:	2b00      	cmp	r3, #0
 800738c:	d002      	beq.n	8007394 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800738e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007390:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007392:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007394:	bf00      	nop
 8007396:	3720      	adds	r7, #32
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}
 800739c:	20004450 	.word	0x20004450
 80073a0:	200044b8 	.word	0x200044b8
 80073a4:	20004520 	.word	0x20004520

080073a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b082      	sub	sp, #8
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80073b0:	f000 fd30 	bl	8007e14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80073b4:	4b2a      	ldr	r3, [pc, #168]	; (8007460 <prvAddNewTaskToReadyList+0xb8>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	3301      	adds	r3, #1
 80073ba:	4a29      	ldr	r2, [pc, #164]	; (8007460 <prvAddNewTaskToReadyList+0xb8>)
 80073bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80073be:	4b29      	ldr	r3, [pc, #164]	; (8007464 <prvAddNewTaskToReadyList+0xbc>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d109      	bne.n	80073da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80073c6:	4a27      	ldr	r2, [pc, #156]	; (8007464 <prvAddNewTaskToReadyList+0xbc>)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80073cc:	4b24      	ldr	r3, [pc, #144]	; (8007460 <prvAddNewTaskToReadyList+0xb8>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	d110      	bne.n	80073f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80073d4:	f000 facc 	bl	8007970 <prvInitialiseTaskLists>
 80073d8:	e00d      	b.n	80073f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80073da:	4b23      	ldr	r3, [pc, #140]	; (8007468 <prvAddNewTaskToReadyList+0xc0>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d109      	bne.n	80073f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80073e2:	4b20      	ldr	r3, [pc, #128]	; (8007464 <prvAddNewTaskToReadyList+0xbc>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d802      	bhi.n	80073f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80073f0:	4a1c      	ldr	r2, [pc, #112]	; (8007464 <prvAddNewTaskToReadyList+0xbc>)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80073f6:	4b1d      	ldr	r3, [pc, #116]	; (800746c <prvAddNewTaskToReadyList+0xc4>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	3301      	adds	r3, #1
 80073fc:	4a1b      	ldr	r2, [pc, #108]	; (800746c <prvAddNewTaskToReadyList+0xc4>)
 80073fe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007404:	2201      	movs	r2, #1
 8007406:	409a      	lsls	r2, r3
 8007408:	4b19      	ldr	r3, [pc, #100]	; (8007470 <prvAddNewTaskToReadyList+0xc8>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4313      	orrs	r3, r2
 800740e:	4a18      	ldr	r2, [pc, #96]	; (8007470 <prvAddNewTaskToReadyList+0xc8>)
 8007410:	6013      	str	r3, [r2, #0]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007416:	4613      	mov	r3, r2
 8007418:	009b      	lsls	r3, r3, #2
 800741a:	4413      	add	r3, r2
 800741c:	009b      	lsls	r3, r3, #2
 800741e:	4a15      	ldr	r2, [pc, #84]	; (8007474 <prvAddNewTaskToReadyList+0xcc>)
 8007420:	441a      	add	r2, r3
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	3304      	adds	r3, #4
 8007426:	4619      	mov	r1, r3
 8007428:	4610      	mov	r0, r2
 800742a:	f7ff fdf5 	bl	8007018 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800742e:	f000 fd21 	bl	8007e74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007432:	4b0d      	ldr	r3, [pc, #52]	; (8007468 <prvAddNewTaskToReadyList+0xc0>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d00e      	beq.n	8007458 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800743a:	4b0a      	ldr	r3, [pc, #40]	; (8007464 <prvAddNewTaskToReadyList+0xbc>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007444:	429a      	cmp	r2, r3
 8007446:	d207      	bcs.n	8007458 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007448:	4b0b      	ldr	r3, [pc, #44]	; (8007478 <prvAddNewTaskToReadyList+0xd0>)
 800744a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800744e:	601a      	str	r2, [r3, #0]
 8007450:	f3bf 8f4f 	dsb	sy
 8007454:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007458:	bf00      	nop
 800745a:	3708      	adds	r7, #8
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}
 8007460:	200007fc 	.word	0x200007fc
 8007464:	200006fc 	.word	0x200006fc
 8007468:	20000808 	.word	0x20000808
 800746c:	20000818 	.word	0x20000818
 8007470:	20000804 	.word	0x20000804
 8007474:	20000700 	.word	0x20000700
 8007478:	e000ed04 	.word	0xe000ed04

0800747c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800747c:	b580      	push	{r7, lr}
 800747e:	b084      	sub	sp, #16
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007484:	2300      	movs	r3, #0
 8007486:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d017      	beq.n	80074be <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800748e:	4b13      	ldr	r3, [pc, #76]	; (80074dc <vTaskDelay+0x60>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d00a      	beq.n	80074ac <vTaskDelay+0x30>
	__asm volatile
 8007496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800749a:	f383 8811 	msr	BASEPRI, r3
 800749e:	f3bf 8f6f 	isb	sy
 80074a2:	f3bf 8f4f 	dsb	sy
 80074a6:	60bb      	str	r3, [r7, #8]
}
 80074a8:	bf00      	nop
 80074aa:	e7fe      	b.n	80074aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80074ac:	f000 f884 	bl	80075b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80074b0:	2100      	movs	r1, #0
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f000 fb1e 	bl	8007af4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80074b8:	f000 f88c 	bl	80075d4 <xTaskResumeAll>
 80074bc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d107      	bne.n	80074d4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80074c4:	4b06      	ldr	r3, [pc, #24]	; (80074e0 <vTaskDelay+0x64>)
 80074c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074ca:	601a      	str	r2, [r3, #0]
 80074cc:	f3bf 8f4f 	dsb	sy
 80074d0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80074d4:	bf00      	nop
 80074d6:	3710      	adds	r7, #16
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}
 80074dc:	20000824 	.word	0x20000824
 80074e0:	e000ed04 	.word	0xe000ed04

080074e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b08a      	sub	sp, #40	; 0x28
 80074e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80074ea:	2300      	movs	r3, #0
 80074ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80074ee:	2300      	movs	r3, #0
 80074f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80074f2:	463a      	mov	r2, r7
 80074f4:	1d39      	adds	r1, r7, #4
 80074f6:	f107 0308 	add.w	r3, r7, #8
 80074fa:	4618      	mov	r0, r3
 80074fc:	f7f9 fbac 	bl	8000c58 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007500:	6839      	ldr	r1, [r7, #0]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	68ba      	ldr	r2, [r7, #8]
 8007506:	9202      	str	r2, [sp, #8]
 8007508:	9301      	str	r3, [sp, #4]
 800750a:	2300      	movs	r3, #0
 800750c:	9300      	str	r3, [sp, #0]
 800750e:	2300      	movs	r3, #0
 8007510:	460a      	mov	r2, r1
 8007512:	4921      	ldr	r1, [pc, #132]	; (8007598 <vTaskStartScheduler+0xb4>)
 8007514:	4821      	ldr	r0, [pc, #132]	; (800759c <vTaskStartScheduler+0xb8>)
 8007516:	f7ff fe06 	bl	8007126 <xTaskCreateStatic>
 800751a:	4603      	mov	r3, r0
 800751c:	4a20      	ldr	r2, [pc, #128]	; (80075a0 <vTaskStartScheduler+0xbc>)
 800751e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007520:	4b1f      	ldr	r3, [pc, #124]	; (80075a0 <vTaskStartScheduler+0xbc>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d002      	beq.n	800752e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007528:	2301      	movs	r3, #1
 800752a:	617b      	str	r3, [r7, #20]
 800752c:	e001      	b.n	8007532 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800752e:	2300      	movs	r3, #0
 8007530:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	2b01      	cmp	r3, #1
 8007536:	d11b      	bne.n	8007570 <vTaskStartScheduler+0x8c>
	__asm volatile
 8007538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800753c:	f383 8811 	msr	BASEPRI, r3
 8007540:	f3bf 8f6f 	isb	sy
 8007544:	f3bf 8f4f 	dsb	sy
 8007548:	613b      	str	r3, [r7, #16]
}
 800754a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800754c:	4b15      	ldr	r3, [pc, #84]	; (80075a4 <vTaskStartScheduler+0xc0>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	334c      	adds	r3, #76	; 0x4c
 8007552:	4a15      	ldr	r2, [pc, #84]	; (80075a8 <vTaskStartScheduler+0xc4>)
 8007554:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007556:	4b15      	ldr	r3, [pc, #84]	; (80075ac <vTaskStartScheduler+0xc8>)
 8007558:	f04f 32ff 	mov.w	r2, #4294967295
 800755c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800755e:	4b14      	ldr	r3, [pc, #80]	; (80075b0 <vTaskStartScheduler+0xcc>)
 8007560:	2201      	movs	r2, #1
 8007562:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007564:	4b13      	ldr	r3, [pc, #76]	; (80075b4 <vTaskStartScheduler+0xd0>)
 8007566:	2200      	movs	r2, #0
 8007568:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800756a:	f000 fbb1 	bl	8007cd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800756e:	e00e      	b.n	800758e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007576:	d10a      	bne.n	800758e <vTaskStartScheduler+0xaa>
	__asm volatile
 8007578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800757c:	f383 8811 	msr	BASEPRI, r3
 8007580:	f3bf 8f6f 	isb	sy
 8007584:	f3bf 8f4f 	dsb	sy
 8007588:	60fb      	str	r3, [r7, #12]
}
 800758a:	bf00      	nop
 800758c:	e7fe      	b.n	800758c <vTaskStartScheduler+0xa8>
}
 800758e:	bf00      	nop
 8007590:	3718      	adds	r7, #24
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
 8007596:	bf00      	nop
 8007598:	080095c8 	.word	0x080095c8
 800759c:	08007941 	.word	0x08007941
 80075a0:	20000820 	.word	0x20000820
 80075a4:	200006fc 	.word	0x200006fc
 80075a8:	20000068 	.word	0x20000068
 80075ac:	2000081c 	.word	0x2000081c
 80075b0:	20000808 	.word	0x20000808
 80075b4:	20000800 	.word	0x20000800

080075b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80075b8:	b480      	push	{r7}
 80075ba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80075bc:	4b04      	ldr	r3, [pc, #16]	; (80075d0 <vTaskSuspendAll+0x18>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	3301      	adds	r3, #1
 80075c2:	4a03      	ldr	r2, [pc, #12]	; (80075d0 <vTaskSuspendAll+0x18>)
 80075c4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80075c6:	bf00      	nop
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr
 80075d0:	20000824 	.word	0x20000824

080075d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b084      	sub	sp, #16
 80075d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80075da:	2300      	movs	r3, #0
 80075dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80075de:	2300      	movs	r3, #0
 80075e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80075e2:	4b41      	ldr	r3, [pc, #260]	; (80076e8 <xTaskResumeAll+0x114>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d10a      	bne.n	8007600 <xTaskResumeAll+0x2c>
	__asm volatile
 80075ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ee:	f383 8811 	msr	BASEPRI, r3
 80075f2:	f3bf 8f6f 	isb	sy
 80075f6:	f3bf 8f4f 	dsb	sy
 80075fa:	603b      	str	r3, [r7, #0]
}
 80075fc:	bf00      	nop
 80075fe:	e7fe      	b.n	80075fe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007600:	f000 fc08 	bl	8007e14 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007604:	4b38      	ldr	r3, [pc, #224]	; (80076e8 <xTaskResumeAll+0x114>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	3b01      	subs	r3, #1
 800760a:	4a37      	ldr	r2, [pc, #220]	; (80076e8 <xTaskResumeAll+0x114>)
 800760c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800760e:	4b36      	ldr	r3, [pc, #216]	; (80076e8 <xTaskResumeAll+0x114>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d161      	bne.n	80076da <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007616:	4b35      	ldr	r3, [pc, #212]	; (80076ec <xTaskResumeAll+0x118>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d05d      	beq.n	80076da <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800761e:	e02e      	b.n	800767e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007620:	4b33      	ldr	r3, [pc, #204]	; (80076f0 <xTaskResumeAll+0x11c>)
 8007622:	68db      	ldr	r3, [r3, #12]
 8007624:	68db      	ldr	r3, [r3, #12]
 8007626:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	3318      	adds	r3, #24
 800762c:	4618      	mov	r0, r3
 800762e:	f7ff fd50 	bl	80070d2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	3304      	adds	r3, #4
 8007636:	4618      	mov	r0, r3
 8007638:	f7ff fd4b 	bl	80070d2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007640:	2201      	movs	r2, #1
 8007642:	409a      	lsls	r2, r3
 8007644:	4b2b      	ldr	r3, [pc, #172]	; (80076f4 <xTaskResumeAll+0x120>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4313      	orrs	r3, r2
 800764a:	4a2a      	ldr	r2, [pc, #168]	; (80076f4 <xTaskResumeAll+0x120>)
 800764c:	6013      	str	r3, [r2, #0]
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007652:	4613      	mov	r3, r2
 8007654:	009b      	lsls	r3, r3, #2
 8007656:	4413      	add	r3, r2
 8007658:	009b      	lsls	r3, r3, #2
 800765a:	4a27      	ldr	r2, [pc, #156]	; (80076f8 <xTaskResumeAll+0x124>)
 800765c:	441a      	add	r2, r3
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	3304      	adds	r3, #4
 8007662:	4619      	mov	r1, r3
 8007664:	4610      	mov	r0, r2
 8007666:	f7ff fcd7 	bl	8007018 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800766e:	4b23      	ldr	r3, [pc, #140]	; (80076fc <xTaskResumeAll+0x128>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007674:	429a      	cmp	r2, r3
 8007676:	d302      	bcc.n	800767e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007678:	4b21      	ldr	r3, [pc, #132]	; (8007700 <xTaskResumeAll+0x12c>)
 800767a:	2201      	movs	r2, #1
 800767c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800767e:	4b1c      	ldr	r3, [pc, #112]	; (80076f0 <xTaskResumeAll+0x11c>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d1cc      	bne.n	8007620 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d001      	beq.n	8007690 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800768c:	f000 fa12 	bl	8007ab4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007690:	4b1c      	ldr	r3, [pc, #112]	; (8007704 <xTaskResumeAll+0x130>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d010      	beq.n	80076be <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800769c:	f000 f836 	bl	800770c <xTaskIncrementTick>
 80076a0:	4603      	mov	r3, r0
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d002      	beq.n	80076ac <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80076a6:	4b16      	ldr	r3, [pc, #88]	; (8007700 <xTaskResumeAll+0x12c>)
 80076a8:	2201      	movs	r2, #1
 80076aa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	3b01      	subs	r3, #1
 80076b0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d1f1      	bne.n	800769c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80076b8:	4b12      	ldr	r3, [pc, #72]	; (8007704 <xTaskResumeAll+0x130>)
 80076ba:	2200      	movs	r2, #0
 80076bc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80076be:	4b10      	ldr	r3, [pc, #64]	; (8007700 <xTaskResumeAll+0x12c>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d009      	beq.n	80076da <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80076c6:	2301      	movs	r3, #1
 80076c8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80076ca:	4b0f      	ldr	r3, [pc, #60]	; (8007708 <xTaskResumeAll+0x134>)
 80076cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076d0:	601a      	str	r2, [r3, #0]
 80076d2:	f3bf 8f4f 	dsb	sy
 80076d6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80076da:	f000 fbcb 	bl	8007e74 <vPortExitCritical>

	return xAlreadyYielded;
 80076de:	68bb      	ldr	r3, [r7, #8]
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3710      	adds	r7, #16
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}
 80076e8:	20000824 	.word	0x20000824
 80076ec:	200007fc 	.word	0x200007fc
 80076f0:	200007bc 	.word	0x200007bc
 80076f4:	20000804 	.word	0x20000804
 80076f8:	20000700 	.word	0x20000700
 80076fc:	200006fc 	.word	0x200006fc
 8007700:	20000810 	.word	0x20000810
 8007704:	2000080c 	.word	0x2000080c
 8007708:	e000ed04 	.word	0xe000ed04

0800770c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b086      	sub	sp, #24
 8007710:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007712:	2300      	movs	r3, #0
 8007714:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007716:	4b4e      	ldr	r3, [pc, #312]	; (8007850 <xTaskIncrementTick+0x144>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	2b00      	cmp	r3, #0
 800771c:	f040 808e 	bne.w	800783c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007720:	4b4c      	ldr	r3, [pc, #304]	; (8007854 <xTaskIncrementTick+0x148>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	3301      	adds	r3, #1
 8007726:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007728:	4a4a      	ldr	r2, [pc, #296]	; (8007854 <xTaskIncrementTick+0x148>)
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d120      	bne.n	8007776 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007734:	4b48      	ldr	r3, [pc, #288]	; (8007858 <xTaskIncrementTick+0x14c>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d00a      	beq.n	8007754 <xTaskIncrementTick+0x48>
	__asm volatile
 800773e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007742:	f383 8811 	msr	BASEPRI, r3
 8007746:	f3bf 8f6f 	isb	sy
 800774a:	f3bf 8f4f 	dsb	sy
 800774e:	603b      	str	r3, [r7, #0]
}
 8007750:	bf00      	nop
 8007752:	e7fe      	b.n	8007752 <xTaskIncrementTick+0x46>
 8007754:	4b40      	ldr	r3, [pc, #256]	; (8007858 <xTaskIncrementTick+0x14c>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	60fb      	str	r3, [r7, #12]
 800775a:	4b40      	ldr	r3, [pc, #256]	; (800785c <xTaskIncrementTick+0x150>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4a3e      	ldr	r2, [pc, #248]	; (8007858 <xTaskIncrementTick+0x14c>)
 8007760:	6013      	str	r3, [r2, #0]
 8007762:	4a3e      	ldr	r2, [pc, #248]	; (800785c <xTaskIncrementTick+0x150>)
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	6013      	str	r3, [r2, #0]
 8007768:	4b3d      	ldr	r3, [pc, #244]	; (8007860 <xTaskIncrementTick+0x154>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	3301      	adds	r3, #1
 800776e:	4a3c      	ldr	r2, [pc, #240]	; (8007860 <xTaskIncrementTick+0x154>)
 8007770:	6013      	str	r3, [r2, #0]
 8007772:	f000 f99f 	bl	8007ab4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007776:	4b3b      	ldr	r3, [pc, #236]	; (8007864 <xTaskIncrementTick+0x158>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	693a      	ldr	r2, [r7, #16]
 800777c:	429a      	cmp	r2, r3
 800777e:	d348      	bcc.n	8007812 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007780:	4b35      	ldr	r3, [pc, #212]	; (8007858 <xTaskIncrementTick+0x14c>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d104      	bne.n	8007794 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800778a:	4b36      	ldr	r3, [pc, #216]	; (8007864 <xTaskIncrementTick+0x158>)
 800778c:	f04f 32ff 	mov.w	r2, #4294967295
 8007790:	601a      	str	r2, [r3, #0]
					break;
 8007792:	e03e      	b.n	8007812 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007794:	4b30      	ldr	r3, [pc, #192]	; (8007858 <xTaskIncrementTick+0x14c>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	68db      	ldr	r3, [r3, #12]
 800779a:	68db      	ldr	r3, [r3, #12]
 800779c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80077a4:	693a      	ldr	r2, [r7, #16]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d203      	bcs.n	80077b4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80077ac:	4a2d      	ldr	r2, [pc, #180]	; (8007864 <xTaskIncrementTick+0x158>)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80077b2:	e02e      	b.n	8007812 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	3304      	adds	r3, #4
 80077b8:	4618      	mov	r0, r3
 80077ba:	f7ff fc8a 	bl	80070d2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d004      	beq.n	80077d0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	3318      	adds	r3, #24
 80077ca:	4618      	mov	r0, r3
 80077cc:	f7ff fc81 	bl	80070d2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077d4:	2201      	movs	r2, #1
 80077d6:	409a      	lsls	r2, r3
 80077d8:	4b23      	ldr	r3, [pc, #140]	; (8007868 <xTaskIncrementTick+0x15c>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4313      	orrs	r3, r2
 80077de:	4a22      	ldr	r2, [pc, #136]	; (8007868 <xTaskIncrementTick+0x15c>)
 80077e0:	6013      	str	r3, [r2, #0]
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077e6:	4613      	mov	r3, r2
 80077e8:	009b      	lsls	r3, r3, #2
 80077ea:	4413      	add	r3, r2
 80077ec:	009b      	lsls	r3, r3, #2
 80077ee:	4a1f      	ldr	r2, [pc, #124]	; (800786c <xTaskIncrementTick+0x160>)
 80077f0:	441a      	add	r2, r3
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	3304      	adds	r3, #4
 80077f6:	4619      	mov	r1, r3
 80077f8:	4610      	mov	r0, r2
 80077fa:	f7ff fc0d 	bl	8007018 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007802:	4b1b      	ldr	r3, [pc, #108]	; (8007870 <xTaskIncrementTick+0x164>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007808:	429a      	cmp	r2, r3
 800780a:	d3b9      	bcc.n	8007780 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800780c:	2301      	movs	r3, #1
 800780e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007810:	e7b6      	b.n	8007780 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007812:	4b17      	ldr	r3, [pc, #92]	; (8007870 <xTaskIncrementTick+0x164>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007818:	4914      	ldr	r1, [pc, #80]	; (800786c <xTaskIncrementTick+0x160>)
 800781a:	4613      	mov	r3, r2
 800781c:	009b      	lsls	r3, r3, #2
 800781e:	4413      	add	r3, r2
 8007820:	009b      	lsls	r3, r3, #2
 8007822:	440b      	add	r3, r1
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	2b01      	cmp	r3, #1
 8007828:	d901      	bls.n	800782e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800782a:	2301      	movs	r3, #1
 800782c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800782e:	4b11      	ldr	r3, [pc, #68]	; (8007874 <xTaskIncrementTick+0x168>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d007      	beq.n	8007846 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007836:	2301      	movs	r3, #1
 8007838:	617b      	str	r3, [r7, #20]
 800783a:	e004      	b.n	8007846 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800783c:	4b0e      	ldr	r3, [pc, #56]	; (8007878 <xTaskIncrementTick+0x16c>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	3301      	adds	r3, #1
 8007842:	4a0d      	ldr	r2, [pc, #52]	; (8007878 <xTaskIncrementTick+0x16c>)
 8007844:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007846:	697b      	ldr	r3, [r7, #20]
}
 8007848:	4618      	mov	r0, r3
 800784a:	3718      	adds	r7, #24
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}
 8007850:	20000824 	.word	0x20000824
 8007854:	20000800 	.word	0x20000800
 8007858:	200007b4 	.word	0x200007b4
 800785c:	200007b8 	.word	0x200007b8
 8007860:	20000814 	.word	0x20000814
 8007864:	2000081c 	.word	0x2000081c
 8007868:	20000804 	.word	0x20000804
 800786c:	20000700 	.word	0x20000700
 8007870:	200006fc 	.word	0x200006fc
 8007874:	20000810 	.word	0x20000810
 8007878:	2000080c 	.word	0x2000080c

0800787c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800787c:	b480      	push	{r7}
 800787e:	b087      	sub	sp, #28
 8007880:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007882:	4b29      	ldr	r3, [pc, #164]	; (8007928 <vTaskSwitchContext+0xac>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d003      	beq.n	8007892 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800788a:	4b28      	ldr	r3, [pc, #160]	; (800792c <vTaskSwitchContext+0xb0>)
 800788c:	2201      	movs	r2, #1
 800788e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007890:	e044      	b.n	800791c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8007892:	4b26      	ldr	r3, [pc, #152]	; (800792c <vTaskSwitchContext+0xb0>)
 8007894:	2200      	movs	r2, #0
 8007896:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007898:	4b25      	ldr	r3, [pc, #148]	; (8007930 <vTaskSwitchContext+0xb4>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	fab3 f383 	clz	r3, r3
 80078a4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80078a6:	7afb      	ldrb	r3, [r7, #11]
 80078a8:	f1c3 031f 	rsb	r3, r3, #31
 80078ac:	617b      	str	r3, [r7, #20]
 80078ae:	4921      	ldr	r1, [pc, #132]	; (8007934 <vTaskSwitchContext+0xb8>)
 80078b0:	697a      	ldr	r2, [r7, #20]
 80078b2:	4613      	mov	r3, r2
 80078b4:	009b      	lsls	r3, r3, #2
 80078b6:	4413      	add	r3, r2
 80078b8:	009b      	lsls	r3, r3, #2
 80078ba:	440b      	add	r3, r1
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d10a      	bne.n	80078d8 <vTaskSwitchContext+0x5c>
	__asm volatile
 80078c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c6:	f383 8811 	msr	BASEPRI, r3
 80078ca:	f3bf 8f6f 	isb	sy
 80078ce:	f3bf 8f4f 	dsb	sy
 80078d2:	607b      	str	r3, [r7, #4]
}
 80078d4:	bf00      	nop
 80078d6:	e7fe      	b.n	80078d6 <vTaskSwitchContext+0x5a>
 80078d8:	697a      	ldr	r2, [r7, #20]
 80078da:	4613      	mov	r3, r2
 80078dc:	009b      	lsls	r3, r3, #2
 80078de:	4413      	add	r3, r2
 80078e0:	009b      	lsls	r3, r3, #2
 80078e2:	4a14      	ldr	r2, [pc, #80]	; (8007934 <vTaskSwitchContext+0xb8>)
 80078e4:	4413      	add	r3, r2
 80078e6:	613b      	str	r3, [r7, #16]
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	685a      	ldr	r2, [r3, #4]
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	605a      	str	r2, [r3, #4]
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	685a      	ldr	r2, [r3, #4]
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	3308      	adds	r3, #8
 80078fa:	429a      	cmp	r2, r3
 80078fc:	d104      	bne.n	8007908 <vTaskSwitchContext+0x8c>
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	685a      	ldr	r2, [r3, #4]
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	605a      	str	r2, [r3, #4]
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	68db      	ldr	r3, [r3, #12]
 800790e:	4a0a      	ldr	r2, [pc, #40]	; (8007938 <vTaskSwitchContext+0xbc>)
 8007910:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007912:	4b09      	ldr	r3, [pc, #36]	; (8007938 <vTaskSwitchContext+0xbc>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	334c      	adds	r3, #76	; 0x4c
 8007918:	4a08      	ldr	r2, [pc, #32]	; (800793c <vTaskSwitchContext+0xc0>)
 800791a:	6013      	str	r3, [r2, #0]
}
 800791c:	bf00      	nop
 800791e:	371c      	adds	r7, #28
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr
 8007928:	20000824 	.word	0x20000824
 800792c:	20000810 	.word	0x20000810
 8007930:	20000804 	.word	0x20000804
 8007934:	20000700 	.word	0x20000700
 8007938:	200006fc 	.word	0x200006fc
 800793c:	20000068 	.word	0x20000068

08007940 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b082      	sub	sp, #8
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007948:	f000 f852 	bl	80079f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800794c:	4b06      	ldr	r3, [pc, #24]	; (8007968 <prvIdleTask+0x28>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	2b01      	cmp	r3, #1
 8007952:	d9f9      	bls.n	8007948 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007954:	4b05      	ldr	r3, [pc, #20]	; (800796c <prvIdleTask+0x2c>)
 8007956:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800795a:	601a      	str	r2, [r3, #0]
 800795c:	f3bf 8f4f 	dsb	sy
 8007960:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007964:	e7f0      	b.n	8007948 <prvIdleTask+0x8>
 8007966:	bf00      	nop
 8007968:	20000700 	.word	0x20000700
 800796c:	e000ed04 	.word	0xe000ed04

08007970 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b082      	sub	sp, #8
 8007974:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007976:	2300      	movs	r3, #0
 8007978:	607b      	str	r3, [r7, #4]
 800797a:	e00c      	b.n	8007996 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800797c:	687a      	ldr	r2, [r7, #4]
 800797e:	4613      	mov	r3, r2
 8007980:	009b      	lsls	r3, r3, #2
 8007982:	4413      	add	r3, r2
 8007984:	009b      	lsls	r3, r3, #2
 8007986:	4a12      	ldr	r2, [pc, #72]	; (80079d0 <prvInitialiseTaskLists+0x60>)
 8007988:	4413      	add	r3, r2
 800798a:	4618      	mov	r0, r3
 800798c:	f7ff fb17 	bl	8006fbe <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	3301      	adds	r3, #1
 8007994:	607b      	str	r3, [r7, #4]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2b06      	cmp	r3, #6
 800799a:	d9ef      	bls.n	800797c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800799c:	480d      	ldr	r0, [pc, #52]	; (80079d4 <prvInitialiseTaskLists+0x64>)
 800799e:	f7ff fb0e 	bl	8006fbe <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80079a2:	480d      	ldr	r0, [pc, #52]	; (80079d8 <prvInitialiseTaskLists+0x68>)
 80079a4:	f7ff fb0b 	bl	8006fbe <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80079a8:	480c      	ldr	r0, [pc, #48]	; (80079dc <prvInitialiseTaskLists+0x6c>)
 80079aa:	f7ff fb08 	bl	8006fbe <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80079ae:	480c      	ldr	r0, [pc, #48]	; (80079e0 <prvInitialiseTaskLists+0x70>)
 80079b0:	f7ff fb05 	bl	8006fbe <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80079b4:	480b      	ldr	r0, [pc, #44]	; (80079e4 <prvInitialiseTaskLists+0x74>)
 80079b6:	f7ff fb02 	bl	8006fbe <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80079ba:	4b0b      	ldr	r3, [pc, #44]	; (80079e8 <prvInitialiseTaskLists+0x78>)
 80079bc:	4a05      	ldr	r2, [pc, #20]	; (80079d4 <prvInitialiseTaskLists+0x64>)
 80079be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80079c0:	4b0a      	ldr	r3, [pc, #40]	; (80079ec <prvInitialiseTaskLists+0x7c>)
 80079c2:	4a05      	ldr	r2, [pc, #20]	; (80079d8 <prvInitialiseTaskLists+0x68>)
 80079c4:	601a      	str	r2, [r3, #0]
}
 80079c6:	bf00      	nop
 80079c8:	3708      	adds	r7, #8
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}
 80079ce:	bf00      	nop
 80079d0:	20000700 	.word	0x20000700
 80079d4:	2000078c 	.word	0x2000078c
 80079d8:	200007a0 	.word	0x200007a0
 80079dc:	200007bc 	.word	0x200007bc
 80079e0:	200007d0 	.word	0x200007d0
 80079e4:	200007e8 	.word	0x200007e8
 80079e8:	200007b4 	.word	0x200007b4
 80079ec:	200007b8 	.word	0x200007b8

080079f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b082      	sub	sp, #8
 80079f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80079f6:	e019      	b.n	8007a2c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80079f8:	f000 fa0c 	bl	8007e14 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079fc:	4b10      	ldr	r3, [pc, #64]	; (8007a40 <prvCheckTasksWaitingTermination+0x50>)
 80079fe:	68db      	ldr	r3, [r3, #12]
 8007a00:	68db      	ldr	r3, [r3, #12]
 8007a02:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	3304      	adds	r3, #4
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f7ff fb62 	bl	80070d2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007a0e:	4b0d      	ldr	r3, [pc, #52]	; (8007a44 <prvCheckTasksWaitingTermination+0x54>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	3b01      	subs	r3, #1
 8007a14:	4a0b      	ldr	r2, [pc, #44]	; (8007a44 <prvCheckTasksWaitingTermination+0x54>)
 8007a16:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007a18:	4b0b      	ldr	r3, [pc, #44]	; (8007a48 <prvCheckTasksWaitingTermination+0x58>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	3b01      	subs	r3, #1
 8007a1e:	4a0a      	ldr	r2, [pc, #40]	; (8007a48 <prvCheckTasksWaitingTermination+0x58>)
 8007a20:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007a22:	f000 fa27 	bl	8007e74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 f810 	bl	8007a4c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007a2c:	4b06      	ldr	r3, [pc, #24]	; (8007a48 <prvCheckTasksWaitingTermination+0x58>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d1e1      	bne.n	80079f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007a34:	bf00      	nop
 8007a36:	bf00      	nop
 8007a38:	3708      	adds	r7, #8
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}
 8007a3e:	bf00      	nop
 8007a40:	200007d0 	.word	0x200007d0
 8007a44:	200007fc 	.word	0x200007fc
 8007a48:	200007e4 	.word	0x200007e4

08007a4c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b084      	sub	sp, #16
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	334c      	adds	r3, #76	; 0x4c
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f000 fed5 	bl	8008808 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d108      	bne.n	8007a7a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	f000 fb7f 	bl	8008170 <vPortFree>
				vPortFree( pxTCB );
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f000 fb7c 	bl	8008170 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007a78:	e018      	b.n	8007aac <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8007a80:	2b01      	cmp	r3, #1
 8007a82:	d103      	bne.n	8007a8c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f000 fb73 	bl	8008170 <vPortFree>
	}
 8007a8a:	e00f      	b.n	8007aac <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8007a92:	2b02      	cmp	r3, #2
 8007a94:	d00a      	beq.n	8007aac <prvDeleteTCB+0x60>
	__asm volatile
 8007a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a9a:	f383 8811 	msr	BASEPRI, r3
 8007a9e:	f3bf 8f6f 	isb	sy
 8007aa2:	f3bf 8f4f 	dsb	sy
 8007aa6:	60fb      	str	r3, [r7, #12]
}
 8007aa8:	bf00      	nop
 8007aaa:	e7fe      	b.n	8007aaa <prvDeleteTCB+0x5e>
	}
 8007aac:	bf00      	nop
 8007aae:	3710      	adds	r7, #16
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}

08007ab4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b083      	sub	sp, #12
 8007ab8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007aba:	4b0c      	ldr	r3, [pc, #48]	; (8007aec <prvResetNextTaskUnblockTime+0x38>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d104      	bne.n	8007ace <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007ac4:	4b0a      	ldr	r3, [pc, #40]	; (8007af0 <prvResetNextTaskUnblockTime+0x3c>)
 8007ac6:	f04f 32ff 	mov.w	r2, #4294967295
 8007aca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007acc:	e008      	b.n	8007ae0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ace:	4b07      	ldr	r3, [pc, #28]	; (8007aec <prvResetNextTaskUnblockTime+0x38>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	68db      	ldr	r3, [r3, #12]
 8007ad4:	68db      	ldr	r3, [r3, #12]
 8007ad6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	4a04      	ldr	r2, [pc, #16]	; (8007af0 <prvResetNextTaskUnblockTime+0x3c>)
 8007ade:	6013      	str	r3, [r2, #0]
}
 8007ae0:	bf00      	nop
 8007ae2:	370c      	adds	r7, #12
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aea:	4770      	bx	lr
 8007aec:	200007b4 	.word	0x200007b4
 8007af0:	2000081c 	.word	0x2000081c

08007af4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b084      	sub	sp, #16
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
 8007afc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007afe:	4b29      	ldr	r3, [pc, #164]	; (8007ba4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b04:	4b28      	ldr	r3, [pc, #160]	; (8007ba8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	3304      	adds	r3, #4
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f7ff fae1 	bl	80070d2 <uxListRemove>
 8007b10:	4603      	mov	r3, r0
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d10b      	bne.n	8007b2e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007b16:	4b24      	ldr	r3, [pc, #144]	; (8007ba8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b1c:	2201      	movs	r2, #1
 8007b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8007b22:	43da      	mvns	r2, r3
 8007b24:	4b21      	ldr	r3, [pc, #132]	; (8007bac <prvAddCurrentTaskToDelayedList+0xb8>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4013      	ands	r3, r2
 8007b2a:	4a20      	ldr	r2, [pc, #128]	; (8007bac <prvAddCurrentTaskToDelayedList+0xb8>)
 8007b2c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b34:	d10a      	bne.n	8007b4c <prvAddCurrentTaskToDelayedList+0x58>
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d007      	beq.n	8007b4c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b3c:	4b1a      	ldr	r3, [pc, #104]	; (8007ba8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	3304      	adds	r3, #4
 8007b42:	4619      	mov	r1, r3
 8007b44:	481a      	ldr	r0, [pc, #104]	; (8007bb0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007b46:	f7ff fa67 	bl	8007018 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007b4a:	e026      	b.n	8007b9a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007b4c:	68fa      	ldr	r2, [r7, #12]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	4413      	add	r3, r2
 8007b52:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007b54:	4b14      	ldr	r3, [pc, #80]	; (8007ba8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	68ba      	ldr	r2, [r7, #8]
 8007b5a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007b5c:	68ba      	ldr	r2, [r7, #8]
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	429a      	cmp	r2, r3
 8007b62:	d209      	bcs.n	8007b78 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b64:	4b13      	ldr	r3, [pc, #76]	; (8007bb4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007b66:	681a      	ldr	r2, [r3, #0]
 8007b68:	4b0f      	ldr	r3, [pc, #60]	; (8007ba8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	3304      	adds	r3, #4
 8007b6e:	4619      	mov	r1, r3
 8007b70:	4610      	mov	r0, r2
 8007b72:	f7ff fa75 	bl	8007060 <vListInsert>
}
 8007b76:	e010      	b.n	8007b9a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b78:	4b0f      	ldr	r3, [pc, #60]	; (8007bb8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007b7a:	681a      	ldr	r2, [r3, #0]
 8007b7c:	4b0a      	ldr	r3, [pc, #40]	; (8007ba8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	3304      	adds	r3, #4
 8007b82:	4619      	mov	r1, r3
 8007b84:	4610      	mov	r0, r2
 8007b86:	f7ff fa6b 	bl	8007060 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007b8a:	4b0c      	ldr	r3, [pc, #48]	; (8007bbc <prvAddCurrentTaskToDelayedList+0xc8>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	68ba      	ldr	r2, [r7, #8]
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d202      	bcs.n	8007b9a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007b94:	4a09      	ldr	r2, [pc, #36]	; (8007bbc <prvAddCurrentTaskToDelayedList+0xc8>)
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	6013      	str	r3, [r2, #0]
}
 8007b9a:	bf00      	nop
 8007b9c:	3710      	adds	r7, #16
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}
 8007ba2:	bf00      	nop
 8007ba4:	20000800 	.word	0x20000800
 8007ba8:	200006fc 	.word	0x200006fc
 8007bac:	20000804 	.word	0x20000804
 8007bb0:	200007e8 	.word	0x200007e8
 8007bb4:	200007b8 	.word	0x200007b8
 8007bb8:	200007b4 	.word	0x200007b4
 8007bbc:	2000081c 	.word	0x2000081c

08007bc0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b085      	sub	sp, #20
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	60f8      	str	r0, [r7, #12]
 8007bc8:	60b9      	str	r1, [r7, #8]
 8007bca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	3b04      	subs	r3, #4
 8007bd0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007bd8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	3b04      	subs	r3, #4
 8007bde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	f023 0201 	bic.w	r2, r3, #1
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	3b04      	subs	r3, #4
 8007bee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007bf0:	4a0c      	ldr	r2, [pc, #48]	; (8007c24 <pxPortInitialiseStack+0x64>)
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	3b14      	subs	r3, #20
 8007bfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007bfc:	687a      	ldr	r2, [r7, #4]
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	3b04      	subs	r3, #4
 8007c06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	f06f 0202 	mvn.w	r2, #2
 8007c0e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	3b20      	subs	r3, #32
 8007c14:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007c16:	68fb      	ldr	r3, [r7, #12]
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	3714      	adds	r7, #20
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c22:	4770      	bx	lr
 8007c24:	08007c29 	.word	0x08007c29

08007c28 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b085      	sub	sp, #20
 8007c2c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007c32:	4b12      	ldr	r3, [pc, #72]	; (8007c7c <prvTaskExitError+0x54>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c3a:	d00a      	beq.n	8007c52 <prvTaskExitError+0x2a>
	__asm volatile
 8007c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c40:	f383 8811 	msr	BASEPRI, r3
 8007c44:	f3bf 8f6f 	isb	sy
 8007c48:	f3bf 8f4f 	dsb	sy
 8007c4c:	60fb      	str	r3, [r7, #12]
}
 8007c4e:	bf00      	nop
 8007c50:	e7fe      	b.n	8007c50 <prvTaskExitError+0x28>
	__asm volatile
 8007c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c56:	f383 8811 	msr	BASEPRI, r3
 8007c5a:	f3bf 8f6f 	isb	sy
 8007c5e:	f3bf 8f4f 	dsb	sy
 8007c62:	60bb      	str	r3, [r7, #8]
}
 8007c64:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007c66:	bf00      	nop
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d0fc      	beq.n	8007c68 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007c6e:	bf00      	nop
 8007c70:	bf00      	nop
 8007c72:	3714      	adds	r7, #20
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr
 8007c7c:	2000000c 	.word	0x2000000c

08007c80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007c80:	4b07      	ldr	r3, [pc, #28]	; (8007ca0 <pxCurrentTCBConst2>)
 8007c82:	6819      	ldr	r1, [r3, #0]
 8007c84:	6808      	ldr	r0, [r1, #0]
 8007c86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c8a:	f380 8809 	msr	PSP, r0
 8007c8e:	f3bf 8f6f 	isb	sy
 8007c92:	f04f 0000 	mov.w	r0, #0
 8007c96:	f380 8811 	msr	BASEPRI, r0
 8007c9a:	4770      	bx	lr
 8007c9c:	f3af 8000 	nop.w

08007ca0 <pxCurrentTCBConst2>:
 8007ca0:	200006fc 	.word	0x200006fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007ca4:	bf00      	nop
 8007ca6:	bf00      	nop

08007ca8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007ca8:	4808      	ldr	r0, [pc, #32]	; (8007ccc <prvPortStartFirstTask+0x24>)
 8007caa:	6800      	ldr	r0, [r0, #0]
 8007cac:	6800      	ldr	r0, [r0, #0]
 8007cae:	f380 8808 	msr	MSP, r0
 8007cb2:	f04f 0000 	mov.w	r0, #0
 8007cb6:	f380 8814 	msr	CONTROL, r0
 8007cba:	b662      	cpsie	i
 8007cbc:	b661      	cpsie	f
 8007cbe:	f3bf 8f4f 	dsb	sy
 8007cc2:	f3bf 8f6f 	isb	sy
 8007cc6:	df00      	svc	0
 8007cc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007cca:	bf00      	nop
 8007ccc:	e000ed08 	.word	0xe000ed08

08007cd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b086      	sub	sp, #24
 8007cd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007cd6:	4b46      	ldr	r3, [pc, #280]	; (8007df0 <xPortStartScheduler+0x120>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a46      	ldr	r2, [pc, #280]	; (8007df4 <xPortStartScheduler+0x124>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d10a      	bne.n	8007cf6 <xPortStartScheduler+0x26>
	__asm volatile
 8007ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce4:	f383 8811 	msr	BASEPRI, r3
 8007ce8:	f3bf 8f6f 	isb	sy
 8007cec:	f3bf 8f4f 	dsb	sy
 8007cf0:	613b      	str	r3, [r7, #16]
}
 8007cf2:	bf00      	nop
 8007cf4:	e7fe      	b.n	8007cf4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007cf6:	4b3e      	ldr	r3, [pc, #248]	; (8007df0 <xPortStartScheduler+0x120>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4a3f      	ldr	r2, [pc, #252]	; (8007df8 <xPortStartScheduler+0x128>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d10a      	bne.n	8007d16 <xPortStartScheduler+0x46>
	__asm volatile
 8007d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d04:	f383 8811 	msr	BASEPRI, r3
 8007d08:	f3bf 8f6f 	isb	sy
 8007d0c:	f3bf 8f4f 	dsb	sy
 8007d10:	60fb      	str	r3, [r7, #12]
}
 8007d12:	bf00      	nop
 8007d14:	e7fe      	b.n	8007d14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007d16:	4b39      	ldr	r3, [pc, #228]	; (8007dfc <xPortStartScheduler+0x12c>)
 8007d18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	781b      	ldrb	r3, [r3, #0]
 8007d1e:	b2db      	uxtb	r3, r3
 8007d20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	22ff      	movs	r2, #255	; 0xff
 8007d26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	781b      	ldrb	r3, [r3, #0]
 8007d2c:	b2db      	uxtb	r3, r3
 8007d2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007d30:	78fb      	ldrb	r3, [r7, #3]
 8007d32:	b2db      	uxtb	r3, r3
 8007d34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007d38:	b2da      	uxtb	r2, r3
 8007d3a:	4b31      	ldr	r3, [pc, #196]	; (8007e00 <xPortStartScheduler+0x130>)
 8007d3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007d3e:	4b31      	ldr	r3, [pc, #196]	; (8007e04 <xPortStartScheduler+0x134>)
 8007d40:	2207      	movs	r2, #7
 8007d42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007d44:	e009      	b.n	8007d5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007d46:	4b2f      	ldr	r3, [pc, #188]	; (8007e04 <xPortStartScheduler+0x134>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	3b01      	subs	r3, #1
 8007d4c:	4a2d      	ldr	r2, [pc, #180]	; (8007e04 <xPortStartScheduler+0x134>)
 8007d4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007d50:	78fb      	ldrb	r3, [r7, #3]
 8007d52:	b2db      	uxtb	r3, r3
 8007d54:	005b      	lsls	r3, r3, #1
 8007d56:	b2db      	uxtb	r3, r3
 8007d58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007d5a:	78fb      	ldrb	r3, [r7, #3]
 8007d5c:	b2db      	uxtb	r3, r3
 8007d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d62:	2b80      	cmp	r3, #128	; 0x80
 8007d64:	d0ef      	beq.n	8007d46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007d66:	4b27      	ldr	r3, [pc, #156]	; (8007e04 <xPortStartScheduler+0x134>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f1c3 0307 	rsb	r3, r3, #7
 8007d6e:	2b04      	cmp	r3, #4
 8007d70:	d00a      	beq.n	8007d88 <xPortStartScheduler+0xb8>
	__asm volatile
 8007d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d76:	f383 8811 	msr	BASEPRI, r3
 8007d7a:	f3bf 8f6f 	isb	sy
 8007d7e:	f3bf 8f4f 	dsb	sy
 8007d82:	60bb      	str	r3, [r7, #8]
}
 8007d84:	bf00      	nop
 8007d86:	e7fe      	b.n	8007d86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007d88:	4b1e      	ldr	r3, [pc, #120]	; (8007e04 <xPortStartScheduler+0x134>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	021b      	lsls	r3, r3, #8
 8007d8e:	4a1d      	ldr	r2, [pc, #116]	; (8007e04 <xPortStartScheduler+0x134>)
 8007d90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007d92:	4b1c      	ldr	r3, [pc, #112]	; (8007e04 <xPortStartScheduler+0x134>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007d9a:	4a1a      	ldr	r2, [pc, #104]	; (8007e04 <xPortStartScheduler+0x134>)
 8007d9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	b2da      	uxtb	r2, r3
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007da6:	4b18      	ldr	r3, [pc, #96]	; (8007e08 <xPortStartScheduler+0x138>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a17      	ldr	r2, [pc, #92]	; (8007e08 <xPortStartScheduler+0x138>)
 8007dac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007db0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007db2:	4b15      	ldr	r3, [pc, #84]	; (8007e08 <xPortStartScheduler+0x138>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4a14      	ldr	r2, [pc, #80]	; (8007e08 <xPortStartScheduler+0x138>)
 8007db8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007dbc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007dbe:	f000 f8dd 	bl	8007f7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007dc2:	4b12      	ldr	r3, [pc, #72]	; (8007e0c <xPortStartScheduler+0x13c>)
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007dc8:	f000 f8fc 	bl	8007fc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007dcc:	4b10      	ldr	r3, [pc, #64]	; (8007e10 <xPortStartScheduler+0x140>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a0f      	ldr	r2, [pc, #60]	; (8007e10 <xPortStartScheduler+0x140>)
 8007dd2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007dd6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007dd8:	f7ff ff66 	bl	8007ca8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007ddc:	f7ff fd4e 	bl	800787c <vTaskSwitchContext>
	prvTaskExitError();
 8007de0:	f7ff ff22 	bl	8007c28 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007de4:	2300      	movs	r3, #0
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3718      	adds	r7, #24
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
 8007dee:	bf00      	nop
 8007df0:	e000ed00 	.word	0xe000ed00
 8007df4:	410fc271 	.word	0x410fc271
 8007df8:	410fc270 	.word	0x410fc270
 8007dfc:	e000e400 	.word	0xe000e400
 8007e00:	20000828 	.word	0x20000828
 8007e04:	2000082c 	.word	0x2000082c
 8007e08:	e000ed20 	.word	0xe000ed20
 8007e0c:	2000000c 	.word	0x2000000c
 8007e10:	e000ef34 	.word	0xe000ef34

08007e14 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007e14:	b480      	push	{r7}
 8007e16:	b083      	sub	sp, #12
 8007e18:	af00      	add	r7, sp, #0
	__asm volatile
 8007e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e1e:	f383 8811 	msr	BASEPRI, r3
 8007e22:	f3bf 8f6f 	isb	sy
 8007e26:	f3bf 8f4f 	dsb	sy
 8007e2a:	607b      	str	r3, [r7, #4]
}
 8007e2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007e2e:	4b0f      	ldr	r3, [pc, #60]	; (8007e6c <vPortEnterCritical+0x58>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	3301      	adds	r3, #1
 8007e34:	4a0d      	ldr	r2, [pc, #52]	; (8007e6c <vPortEnterCritical+0x58>)
 8007e36:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007e38:	4b0c      	ldr	r3, [pc, #48]	; (8007e6c <vPortEnterCritical+0x58>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d10f      	bne.n	8007e60 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007e40:	4b0b      	ldr	r3, [pc, #44]	; (8007e70 <vPortEnterCritical+0x5c>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	b2db      	uxtb	r3, r3
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d00a      	beq.n	8007e60 <vPortEnterCritical+0x4c>
	__asm volatile
 8007e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e4e:	f383 8811 	msr	BASEPRI, r3
 8007e52:	f3bf 8f6f 	isb	sy
 8007e56:	f3bf 8f4f 	dsb	sy
 8007e5a:	603b      	str	r3, [r7, #0]
}
 8007e5c:	bf00      	nop
 8007e5e:	e7fe      	b.n	8007e5e <vPortEnterCritical+0x4a>
	}
}
 8007e60:	bf00      	nop
 8007e62:	370c      	adds	r7, #12
 8007e64:	46bd      	mov	sp, r7
 8007e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6a:	4770      	bx	lr
 8007e6c:	2000000c 	.word	0x2000000c
 8007e70:	e000ed04 	.word	0xe000ed04

08007e74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007e74:	b480      	push	{r7}
 8007e76:	b083      	sub	sp, #12
 8007e78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007e7a:	4b12      	ldr	r3, [pc, #72]	; (8007ec4 <vPortExitCritical+0x50>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d10a      	bne.n	8007e98 <vPortExitCritical+0x24>
	__asm volatile
 8007e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e86:	f383 8811 	msr	BASEPRI, r3
 8007e8a:	f3bf 8f6f 	isb	sy
 8007e8e:	f3bf 8f4f 	dsb	sy
 8007e92:	607b      	str	r3, [r7, #4]
}
 8007e94:	bf00      	nop
 8007e96:	e7fe      	b.n	8007e96 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007e98:	4b0a      	ldr	r3, [pc, #40]	; (8007ec4 <vPortExitCritical+0x50>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	3b01      	subs	r3, #1
 8007e9e:	4a09      	ldr	r2, [pc, #36]	; (8007ec4 <vPortExitCritical+0x50>)
 8007ea0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007ea2:	4b08      	ldr	r3, [pc, #32]	; (8007ec4 <vPortExitCritical+0x50>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d105      	bne.n	8007eb6 <vPortExitCritical+0x42>
 8007eaa:	2300      	movs	r3, #0
 8007eac:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007eb4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007eb6:	bf00      	nop
 8007eb8:	370c      	adds	r7, #12
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec0:	4770      	bx	lr
 8007ec2:	bf00      	nop
 8007ec4:	2000000c 	.word	0x2000000c
	...

08007ed0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007ed0:	f3ef 8009 	mrs	r0, PSP
 8007ed4:	f3bf 8f6f 	isb	sy
 8007ed8:	4b15      	ldr	r3, [pc, #84]	; (8007f30 <pxCurrentTCBConst>)
 8007eda:	681a      	ldr	r2, [r3, #0]
 8007edc:	f01e 0f10 	tst.w	lr, #16
 8007ee0:	bf08      	it	eq
 8007ee2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007ee6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eea:	6010      	str	r0, [r2, #0]
 8007eec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007ef0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007ef4:	f380 8811 	msr	BASEPRI, r0
 8007ef8:	f3bf 8f4f 	dsb	sy
 8007efc:	f3bf 8f6f 	isb	sy
 8007f00:	f7ff fcbc 	bl	800787c <vTaskSwitchContext>
 8007f04:	f04f 0000 	mov.w	r0, #0
 8007f08:	f380 8811 	msr	BASEPRI, r0
 8007f0c:	bc09      	pop	{r0, r3}
 8007f0e:	6819      	ldr	r1, [r3, #0]
 8007f10:	6808      	ldr	r0, [r1, #0]
 8007f12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f16:	f01e 0f10 	tst.w	lr, #16
 8007f1a:	bf08      	it	eq
 8007f1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007f20:	f380 8809 	msr	PSP, r0
 8007f24:	f3bf 8f6f 	isb	sy
 8007f28:	4770      	bx	lr
 8007f2a:	bf00      	nop
 8007f2c:	f3af 8000 	nop.w

08007f30 <pxCurrentTCBConst>:
 8007f30:	200006fc 	.word	0x200006fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007f34:	bf00      	nop
 8007f36:	bf00      	nop

08007f38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b082      	sub	sp, #8
 8007f3c:	af00      	add	r7, sp, #0
	__asm volatile
 8007f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f42:	f383 8811 	msr	BASEPRI, r3
 8007f46:	f3bf 8f6f 	isb	sy
 8007f4a:	f3bf 8f4f 	dsb	sy
 8007f4e:	607b      	str	r3, [r7, #4]
}
 8007f50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007f52:	f7ff fbdb 	bl	800770c <xTaskIncrementTick>
 8007f56:	4603      	mov	r3, r0
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d003      	beq.n	8007f64 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007f5c:	4b06      	ldr	r3, [pc, #24]	; (8007f78 <SysTick_Handler+0x40>)
 8007f5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f62:	601a      	str	r2, [r3, #0]
 8007f64:	2300      	movs	r3, #0
 8007f66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	f383 8811 	msr	BASEPRI, r3
}
 8007f6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007f70:	bf00      	nop
 8007f72:	3708      	adds	r7, #8
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}
 8007f78:	e000ed04 	.word	0xe000ed04

08007f7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007f80:	4b0b      	ldr	r3, [pc, #44]	; (8007fb0 <vPortSetupTimerInterrupt+0x34>)
 8007f82:	2200      	movs	r2, #0
 8007f84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007f86:	4b0b      	ldr	r3, [pc, #44]	; (8007fb4 <vPortSetupTimerInterrupt+0x38>)
 8007f88:	2200      	movs	r2, #0
 8007f8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007f8c:	4b0a      	ldr	r3, [pc, #40]	; (8007fb8 <vPortSetupTimerInterrupt+0x3c>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a0a      	ldr	r2, [pc, #40]	; (8007fbc <vPortSetupTimerInterrupt+0x40>)
 8007f92:	fba2 2303 	umull	r2, r3, r2, r3
 8007f96:	099b      	lsrs	r3, r3, #6
 8007f98:	4a09      	ldr	r2, [pc, #36]	; (8007fc0 <vPortSetupTimerInterrupt+0x44>)
 8007f9a:	3b01      	subs	r3, #1
 8007f9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007f9e:	4b04      	ldr	r3, [pc, #16]	; (8007fb0 <vPortSetupTimerInterrupt+0x34>)
 8007fa0:	2207      	movs	r2, #7
 8007fa2:	601a      	str	r2, [r3, #0]
}
 8007fa4:	bf00      	nop
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fac:	4770      	bx	lr
 8007fae:	bf00      	nop
 8007fb0:	e000e010 	.word	0xe000e010
 8007fb4:	e000e018 	.word	0xe000e018
 8007fb8:	20000000 	.word	0x20000000
 8007fbc:	10624dd3 	.word	0x10624dd3
 8007fc0:	e000e014 	.word	0xe000e014

08007fc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007fc4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007fd4 <vPortEnableVFP+0x10>
 8007fc8:	6801      	ldr	r1, [r0, #0]
 8007fca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007fce:	6001      	str	r1, [r0, #0]
 8007fd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007fd2:	bf00      	nop
 8007fd4:	e000ed88 	.word	0xe000ed88

08007fd8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b08a      	sub	sp, #40	; 0x28
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007fe4:	f7ff fae8 	bl	80075b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007fe8:	4b5b      	ldr	r3, [pc, #364]	; (8008158 <pvPortMalloc+0x180>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d101      	bne.n	8007ff4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007ff0:	f000 f920 	bl	8008234 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007ff4:	4b59      	ldr	r3, [pc, #356]	; (800815c <pvPortMalloc+0x184>)
 8007ff6:	681a      	ldr	r2, [r3, #0]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	4013      	ands	r3, r2
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	f040 8093 	bne.w	8008128 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d01d      	beq.n	8008044 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008008:	2208      	movs	r2, #8
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	4413      	add	r3, r2
 800800e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f003 0307 	and.w	r3, r3, #7
 8008016:	2b00      	cmp	r3, #0
 8008018:	d014      	beq.n	8008044 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f023 0307 	bic.w	r3, r3, #7
 8008020:	3308      	adds	r3, #8
 8008022:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f003 0307 	and.w	r3, r3, #7
 800802a:	2b00      	cmp	r3, #0
 800802c:	d00a      	beq.n	8008044 <pvPortMalloc+0x6c>
	__asm volatile
 800802e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008032:	f383 8811 	msr	BASEPRI, r3
 8008036:	f3bf 8f6f 	isb	sy
 800803a:	f3bf 8f4f 	dsb	sy
 800803e:	617b      	str	r3, [r7, #20]
}
 8008040:	bf00      	nop
 8008042:	e7fe      	b.n	8008042 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d06e      	beq.n	8008128 <pvPortMalloc+0x150>
 800804a:	4b45      	ldr	r3, [pc, #276]	; (8008160 <pvPortMalloc+0x188>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	687a      	ldr	r2, [r7, #4]
 8008050:	429a      	cmp	r2, r3
 8008052:	d869      	bhi.n	8008128 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008054:	4b43      	ldr	r3, [pc, #268]	; (8008164 <pvPortMalloc+0x18c>)
 8008056:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008058:	4b42      	ldr	r3, [pc, #264]	; (8008164 <pvPortMalloc+0x18c>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800805e:	e004      	b.n	800806a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008062:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800806a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800806c:	685b      	ldr	r3, [r3, #4]
 800806e:	687a      	ldr	r2, [r7, #4]
 8008070:	429a      	cmp	r2, r3
 8008072:	d903      	bls.n	800807c <pvPortMalloc+0xa4>
 8008074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d1f1      	bne.n	8008060 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800807c:	4b36      	ldr	r3, [pc, #216]	; (8008158 <pvPortMalloc+0x180>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008082:	429a      	cmp	r2, r3
 8008084:	d050      	beq.n	8008128 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008086:	6a3b      	ldr	r3, [r7, #32]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	2208      	movs	r2, #8
 800808c:	4413      	add	r3, r2
 800808e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008092:	681a      	ldr	r2, [r3, #0]
 8008094:	6a3b      	ldr	r3, [r7, #32]
 8008096:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800809a:	685a      	ldr	r2, [r3, #4]
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	1ad2      	subs	r2, r2, r3
 80080a0:	2308      	movs	r3, #8
 80080a2:	005b      	lsls	r3, r3, #1
 80080a4:	429a      	cmp	r2, r3
 80080a6:	d91f      	bls.n	80080e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80080a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	4413      	add	r3, r2
 80080ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80080b0:	69bb      	ldr	r3, [r7, #24]
 80080b2:	f003 0307 	and.w	r3, r3, #7
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d00a      	beq.n	80080d0 <pvPortMalloc+0xf8>
	__asm volatile
 80080ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080be:	f383 8811 	msr	BASEPRI, r3
 80080c2:	f3bf 8f6f 	isb	sy
 80080c6:	f3bf 8f4f 	dsb	sy
 80080ca:	613b      	str	r3, [r7, #16]
}
 80080cc:	bf00      	nop
 80080ce:	e7fe      	b.n	80080ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80080d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d2:	685a      	ldr	r2, [r3, #4]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	1ad2      	subs	r2, r2, r3
 80080d8:	69bb      	ldr	r3, [r7, #24]
 80080da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80080dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080de:	687a      	ldr	r2, [r7, #4]
 80080e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80080e2:	69b8      	ldr	r0, [r7, #24]
 80080e4:	f000 f908 	bl	80082f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80080e8:	4b1d      	ldr	r3, [pc, #116]	; (8008160 <pvPortMalloc+0x188>)
 80080ea:	681a      	ldr	r2, [r3, #0]
 80080ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	1ad3      	subs	r3, r2, r3
 80080f2:	4a1b      	ldr	r2, [pc, #108]	; (8008160 <pvPortMalloc+0x188>)
 80080f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80080f6:	4b1a      	ldr	r3, [pc, #104]	; (8008160 <pvPortMalloc+0x188>)
 80080f8:	681a      	ldr	r2, [r3, #0]
 80080fa:	4b1b      	ldr	r3, [pc, #108]	; (8008168 <pvPortMalloc+0x190>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	429a      	cmp	r2, r3
 8008100:	d203      	bcs.n	800810a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008102:	4b17      	ldr	r3, [pc, #92]	; (8008160 <pvPortMalloc+0x188>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4a18      	ldr	r2, [pc, #96]	; (8008168 <pvPortMalloc+0x190>)
 8008108:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800810a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800810c:	685a      	ldr	r2, [r3, #4]
 800810e:	4b13      	ldr	r3, [pc, #76]	; (800815c <pvPortMalloc+0x184>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	431a      	orrs	r2, r3
 8008114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008116:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800811a:	2200      	movs	r2, #0
 800811c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800811e:	4b13      	ldr	r3, [pc, #76]	; (800816c <pvPortMalloc+0x194>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	3301      	adds	r3, #1
 8008124:	4a11      	ldr	r2, [pc, #68]	; (800816c <pvPortMalloc+0x194>)
 8008126:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008128:	f7ff fa54 	bl	80075d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800812c:	69fb      	ldr	r3, [r7, #28]
 800812e:	f003 0307 	and.w	r3, r3, #7
 8008132:	2b00      	cmp	r3, #0
 8008134:	d00a      	beq.n	800814c <pvPortMalloc+0x174>
	__asm volatile
 8008136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800813a:	f383 8811 	msr	BASEPRI, r3
 800813e:	f3bf 8f6f 	isb	sy
 8008142:	f3bf 8f4f 	dsb	sy
 8008146:	60fb      	str	r3, [r7, #12]
}
 8008148:	bf00      	nop
 800814a:	e7fe      	b.n	800814a <pvPortMalloc+0x172>
	return pvReturn;
 800814c:	69fb      	ldr	r3, [r7, #28]
}
 800814e:	4618      	mov	r0, r3
 8008150:	3728      	adds	r7, #40	; 0x28
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}
 8008156:	bf00      	nop
 8008158:	20004438 	.word	0x20004438
 800815c:	2000444c 	.word	0x2000444c
 8008160:	2000443c 	.word	0x2000443c
 8008164:	20004430 	.word	0x20004430
 8008168:	20004440 	.word	0x20004440
 800816c:	20004444 	.word	0x20004444

08008170 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b086      	sub	sp, #24
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d04d      	beq.n	800821e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008182:	2308      	movs	r3, #8
 8008184:	425b      	negs	r3, r3
 8008186:	697a      	ldr	r2, [r7, #20]
 8008188:	4413      	add	r3, r2
 800818a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	685a      	ldr	r2, [r3, #4]
 8008194:	4b24      	ldr	r3, [pc, #144]	; (8008228 <vPortFree+0xb8>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4013      	ands	r3, r2
 800819a:	2b00      	cmp	r3, #0
 800819c:	d10a      	bne.n	80081b4 <vPortFree+0x44>
	__asm volatile
 800819e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081a2:	f383 8811 	msr	BASEPRI, r3
 80081a6:	f3bf 8f6f 	isb	sy
 80081aa:	f3bf 8f4f 	dsb	sy
 80081ae:	60fb      	str	r3, [r7, #12]
}
 80081b0:	bf00      	nop
 80081b2:	e7fe      	b.n	80081b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d00a      	beq.n	80081d2 <vPortFree+0x62>
	__asm volatile
 80081bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c0:	f383 8811 	msr	BASEPRI, r3
 80081c4:	f3bf 8f6f 	isb	sy
 80081c8:	f3bf 8f4f 	dsb	sy
 80081cc:	60bb      	str	r3, [r7, #8]
}
 80081ce:	bf00      	nop
 80081d0:	e7fe      	b.n	80081d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	685a      	ldr	r2, [r3, #4]
 80081d6:	4b14      	ldr	r3, [pc, #80]	; (8008228 <vPortFree+0xb8>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4013      	ands	r3, r2
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d01e      	beq.n	800821e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d11a      	bne.n	800821e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	685a      	ldr	r2, [r3, #4]
 80081ec:	4b0e      	ldr	r3, [pc, #56]	; (8008228 <vPortFree+0xb8>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	43db      	mvns	r3, r3
 80081f2:	401a      	ands	r2, r3
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80081f8:	f7ff f9de 	bl	80075b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	685a      	ldr	r2, [r3, #4]
 8008200:	4b0a      	ldr	r3, [pc, #40]	; (800822c <vPortFree+0xbc>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4413      	add	r3, r2
 8008206:	4a09      	ldr	r2, [pc, #36]	; (800822c <vPortFree+0xbc>)
 8008208:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800820a:	6938      	ldr	r0, [r7, #16]
 800820c:	f000 f874 	bl	80082f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008210:	4b07      	ldr	r3, [pc, #28]	; (8008230 <vPortFree+0xc0>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	3301      	adds	r3, #1
 8008216:	4a06      	ldr	r2, [pc, #24]	; (8008230 <vPortFree+0xc0>)
 8008218:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800821a:	f7ff f9db 	bl	80075d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800821e:	bf00      	nop
 8008220:	3718      	adds	r7, #24
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}
 8008226:	bf00      	nop
 8008228:	2000444c 	.word	0x2000444c
 800822c:	2000443c 	.word	0x2000443c
 8008230:	20004448 	.word	0x20004448

08008234 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008234:	b480      	push	{r7}
 8008236:	b085      	sub	sp, #20
 8008238:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800823a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800823e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008240:	4b27      	ldr	r3, [pc, #156]	; (80082e0 <prvHeapInit+0xac>)
 8008242:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	f003 0307 	and.w	r3, r3, #7
 800824a:	2b00      	cmp	r3, #0
 800824c:	d00c      	beq.n	8008268 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	3307      	adds	r3, #7
 8008252:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f023 0307 	bic.w	r3, r3, #7
 800825a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800825c:	68ba      	ldr	r2, [r7, #8]
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	1ad3      	subs	r3, r2, r3
 8008262:	4a1f      	ldr	r2, [pc, #124]	; (80082e0 <prvHeapInit+0xac>)
 8008264:	4413      	add	r3, r2
 8008266:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800826c:	4a1d      	ldr	r2, [pc, #116]	; (80082e4 <prvHeapInit+0xb0>)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008272:	4b1c      	ldr	r3, [pc, #112]	; (80082e4 <prvHeapInit+0xb0>)
 8008274:	2200      	movs	r2, #0
 8008276:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	68ba      	ldr	r2, [r7, #8]
 800827c:	4413      	add	r3, r2
 800827e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008280:	2208      	movs	r2, #8
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	1a9b      	subs	r3, r3, r2
 8008286:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	f023 0307 	bic.w	r3, r3, #7
 800828e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	4a15      	ldr	r2, [pc, #84]	; (80082e8 <prvHeapInit+0xb4>)
 8008294:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008296:	4b14      	ldr	r3, [pc, #80]	; (80082e8 <prvHeapInit+0xb4>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	2200      	movs	r2, #0
 800829c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800829e:	4b12      	ldr	r3, [pc, #72]	; (80082e8 <prvHeapInit+0xb4>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	2200      	movs	r2, #0
 80082a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	68fa      	ldr	r2, [r7, #12]
 80082ae:	1ad2      	subs	r2, r2, r3
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80082b4:	4b0c      	ldr	r3, [pc, #48]	; (80082e8 <prvHeapInit+0xb4>)
 80082b6:	681a      	ldr	r2, [r3, #0]
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	685b      	ldr	r3, [r3, #4]
 80082c0:	4a0a      	ldr	r2, [pc, #40]	; (80082ec <prvHeapInit+0xb8>)
 80082c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	685b      	ldr	r3, [r3, #4]
 80082c8:	4a09      	ldr	r2, [pc, #36]	; (80082f0 <prvHeapInit+0xbc>)
 80082ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80082cc:	4b09      	ldr	r3, [pc, #36]	; (80082f4 <prvHeapInit+0xc0>)
 80082ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80082d2:	601a      	str	r2, [r3, #0]
}
 80082d4:	bf00      	nop
 80082d6:	3714      	adds	r7, #20
 80082d8:	46bd      	mov	sp, r7
 80082da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082de:	4770      	bx	lr
 80082e0:	20000830 	.word	0x20000830
 80082e4:	20004430 	.word	0x20004430
 80082e8:	20004438 	.word	0x20004438
 80082ec:	20004440 	.word	0x20004440
 80082f0:	2000443c 	.word	0x2000443c
 80082f4:	2000444c 	.word	0x2000444c

080082f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80082f8:	b480      	push	{r7}
 80082fa:	b085      	sub	sp, #20
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008300:	4b28      	ldr	r3, [pc, #160]	; (80083a4 <prvInsertBlockIntoFreeList+0xac>)
 8008302:	60fb      	str	r3, [r7, #12]
 8008304:	e002      	b.n	800830c <prvInsertBlockIntoFreeList+0x14>
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	60fb      	str	r3, [r7, #12]
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	687a      	ldr	r2, [r7, #4]
 8008312:	429a      	cmp	r2, r3
 8008314:	d8f7      	bhi.n	8008306 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	685b      	ldr	r3, [r3, #4]
 800831e:	68ba      	ldr	r2, [r7, #8]
 8008320:	4413      	add	r3, r2
 8008322:	687a      	ldr	r2, [r7, #4]
 8008324:	429a      	cmp	r2, r3
 8008326:	d108      	bne.n	800833a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	685a      	ldr	r2, [r3, #4]
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	441a      	add	r2, r3
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	685b      	ldr	r3, [r3, #4]
 8008342:	68ba      	ldr	r2, [r7, #8]
 8008344:	441a      	add	r2, r3
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	429a      	cmp	r2, r3
 800834c:	d118      	bne.n	8008380 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681a      	ldr	r2, [r3, #0]
 8008352:	4b15      	ldr	r3, [pc, #84]	; (80083a8 <prvInsertBlockIntoFreeList+0xb0>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	429a      	cmp	r2, r3
 8008358:	d00d      	beq.n	8008376 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	685a      	ldr	r2, [r3, #4]
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	441a      	add	r2, r3
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	681a      	ldr	r2, [r3, #0]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	601a      	str	r2, [r3, #0]
 8008374:	e008      	b.n	8008388 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008376:	4b0c      	ldr	r3, [pc, #48]	; (80083a8 <prvInsertBlockIntoFreeList+0xb0>)
 8008378:	681a      	ldr	r2, [r3, #0]
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	601a      	str	r2, [r3, #0]
 800837e:	e003      	b.n	8008388 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681a      	ldr	r2, [r3, #0]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008388:	68fa      	ldr	r2, [r7, #12]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	429a      	cmp	r2, r3
 800838e:	d002      	beq.n	8008396 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	687a      	ldr	r2, [r7, #4]
 8008394:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008396:	bf00      	nop
 8008398:	3714      	adds	r7, #20
 800839a:	46bd      	mov	sp, r7
 800839c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a0:	4770      	bx	lr
 80083a2:	bf00      	nop
 80083a4:	20004430 	.word	0x20004430
 80083a8:	20004438 	.word	0x20004438

080083ac <std>:
 80083ac:	2300      	movs	r3, #0
 80083ae:	b510      	push	{r4, lr}
 80083b0:	4604      	mov	r4, r0
 80083b2:	e9c0 3300 	strd	r3, r3, [r0]
 80083b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80083ba:	6083      	str	r3, [r0, #8]
 80083bc:	8181      	strh	r1, [r0, #12]
 80083be:	6643      	str	r3, [r0, #100]	; 0x64
 80083c0:	81c2      	strh	r2, [r0, #14]
 80083c2:	6183      	str	r3, [r0, #24]
 80083c4:	4619      	mov	r1, r3
 80083c6:	2208      	movs	r2, #8
 80083c8:	305c      	adds	r0, #92	; 0x5c
 80083ca:	f000 fa05 	bl	80087d8 <memset>
 80083ce:	4b0d      	ldr	r3, [pc, #52]	; (8008404 <std+0x58>)
 80083d0:	6263      	str	r3, [r4, #36]	; 0x24
 80083d2:	4b0d      	ldr	r3, [pc, #52]	; (8008408 <std+0x5c>)
 80083d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80083d6:	4b0d      	ldr	r3, [pc, #52]	; (800840c <std+0x60>)
 80083d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80083da:	4b0d      	ldr	r3, [pc, #52]	; (8008410 <std+0x64>)
 80083dc:	6323      	str	r3, [r4, #48]	; 0x30
 80083de:	4b0d      	ldr	r3, [pc, #52]	; (8008414 <std+0x68>)
 80083e0:	6224      	str	r4, [r4, #32]
 80083e2:	429c      	cmp	r4, r3
 80083e4:	d006      	beq.n	80083f4 <std+0x48>
 80083e6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80083ea:	4294      	cmp	r4, r2
 80083ec:	d002      	beq.n	80083f4 <std+0x48>
 80083ee:	33d0      	adds	r3, #208	; 0xd0
 80083f0:	429c      	cmp	r4, r3
 80083f2:	d105      	bne.n	8008400 <std+0x54>
 80083f4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80083f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083fc:	f000 baba 	b.w	8008974 <__retarget_lock_init_recursive>
 8008400:	bd10      	pop	{r4, pc}
 8008402:	bf00      	nop
 8008404:	08008629 	.word	0x08008629
 8008408:	0800864b 	.word	0x0800864b
 800840c:	08008683 	.word	0x08008683
 8008410:	080086a7 	.word	0x080086a7
 8008414:	20004450 	.word	0x20004450

08008418 <stdio_exit_handler>:
 8008418:	4a02      	ldr	r2, [pc, #8]	; (8008424 <stdio_exit_handler+0xc>)
 800841a:	4903      	ldr	r1, [pc, #12]	; (8008428 <stdio_exit_handler+0x10>)
 800841c:	4803      	ldr	r0, [pc, #12]	; (800842c <stdio_exit_handler+0x14>)
 800841e:	f000 b869 	b.w	80084f4 <_fwalk_sglue>
 8008422:	bf00      	nop
 8008424:	20000010 	.word	0x20000010
 8008428:	08009265 	.word	0x08009265
 800842c:	2000001c 	.word	0x2000001c

08008430 <cleanup_stdio>:
 8008430:	6841      	ldr	r1, [r0, #4]
 8008432:	4b0c      	ldr	r3, [pc, #48]	; (8008464 <cleanup_stdio+0x34>)
 8008434:	4299      	cmp	r1, r3
 8008436:	b510      	push	{r4, lr}
 8008438:	4604      	mov	r4, r0
 800843a:	d001      	beq.n	8008440 <cleanup_stdio+0x10>
 800843c:	f000 ff12 	bl	8009264 <_fflush_r>
 8008440:	68a1      	ldr	r1, [r4, #8]
 8008442:	4b09      	ldr	r3, [pc, #36]	; (8008468 <cleanup_stdio+0x38>)
 8008444:	4299      	cmp	r1, r3
 8008446:	d002      	beq.n	800844e <cleanup_stdio+0x1e>
 8008448:	4620      	mov	r0, r4
 800844a:	f000 ff0b 	bl	8009264 <_fflush_r>
 800844e:	68e1      	ldr	r1, [r4, #12]
 8008450:	4b06      	ldr	r3, [pc, #24]	; (800846c <cleanup_stdio+0x3c>)
 8008452:	4299      	cmp	r1, r3
 8008454:	d004      	beq.n	8008460 <cleanup_stdio+0x30>
 8008456:	4620      	mov	r0, r4
 8008458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800845c:	f000 bf02 	b.w	8009264 <_fflush_r>
 8008460:	bd10      	pop	{r4, pc}
 8008462:	bf00      	nop
 8008464:	20004450 	.word	0x20004450
 8008468:	200044b8 	.word	0x200044b8
 800846c:	20004520 	.word	0x20004520

08008470 <global_stdio_init.part.0>:
 8008470:	b510      	push	{r4, lr}
 8008472:	4b0b      	ldr	r3, [pc, #44]	; (80084a0 <global_stdio_init.part.0+0x30>)
 8008474:	4c0b      	ldr	r4, [pc, #44]	; (80084a4 <global_stdio_init.part.0+0x34>)
 8008476:	4a0c      	ldr	r2, [pc, #48]	; (80084a8 <global_stdio_init.part.0+0x38>)
 8008478:	601a      	str	r2, [r3, #0]
 800847a:	4620      	mov	r0, r4
 800847c:	2200      	movs	r2, #0
 800847e:	2104      	movs	r1, #4
 8008480:	f7ff ff94 	bl	80083ac <std>
 8008484:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008488:	2201      	movs	r2, #1
 800848a:	2109      	movs	r1, #9
 800848c:	f7ff ff8e 	bl	80083ac <std>
 8008490:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008494:	2202      	movs	r2, #2
 8008496:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800849a:	2112      	movs	r1, #18
 800849c:	f7ff bf86 	b.w	80083ac <std>
 80084a0:	20004588 	.word	0x20004588
 80084a4:	20004450 	.word	0x20004450
 80084a8:	08008419 	.word	0x08008419

080084ac <__sfp_lock_acquire>:
 80084ac:	4801      	ldr	r0, [pc, #4]	; (80084b4 <__sfp_lock_acquire+0x8>)
 80084ae:	f000 ba62 	b.w	8008976 <__retarget_lock_acquire_recursive>
 80084b2:	bf00      	nop
 80084b4:	20004591 	.word	0x20004591

080084b8 <__sfp_lock_release>:
 80084b8:	4801      	ldr	r0, [pc, #4]	; (80084c0 <__sfp_lock_release+0x8>)
 80084ba:	f000 ba5d 	b.w	8008978 <__retarget_lock_release_recursive>
 80084be:	bf00      	nop
 80084c0:	20004591 	.word	0x20004591

080084c4 <__sinit>:
 80084c4:	b510      	push	{r4, lr}
 80084c6:	4604      	mov	r4, r0
 80084c8:	f7ff fff0 	bl	80084ac <__sfp_lock_acquire>
 80084cc:	6a23      	ldr	r3, [r4, #32]
 80084ce:	b11b      	cbz	r3, 80084d8 <__sinit+0x14>
 80084d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084d4:	f7ff bff0 	b.w	80084b8 <__sfp_lock_release>
 80084d8:	4b04      	ldr	r3, [pc, #16]	; (80084ec <__sinit+0x28>)
 80084da:	6223      	str	r3, [r4, #32]
 80084dc:	4b04      	ldr	r3, [pc, #16]	; (80084f0 <__sinit+0x2c>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d1f5      	bne.n	80084d0 <__sinit+0xc>
 80084e4:	f7ff ffc4 	bl	8008470 <global_stdio_init.part.0>
 80084e8:	e7f2      	b.n	80084d0 <__sinit+0xc>
 80084ea:	bf00      	nop
 80084ec:	08008431 	.word	0x08008431
 80084f0:	20004588 	.word	0x20004588

080084f4 <_fwalk_sglue>:
 80084f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084f8:	4607      	mov	r7, r0
 80084fa:	4688      	mov	r8, r1
 80084fc:	4614      	mov	r4, r2
 80084fe:	2600      	movs	r6, #0
 8008500:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008504:	f1b9 0901 	subs.w	r9, r9, #1
 8008508:	d505      	bpl.n	8008516 <_fwalk_sglue+0x22>
 800850a:	6824      	ldr	r4, [r4, #0]
 800850c:	2c00      	cmp	r4, #0
 800850e:	d1f7      	bne.n	8008500 <_fwalk_sglue+0xc>
 8008510:	4630      	mov	r0, r6
 8008512:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008516:	89ab      	ldrh	r3, [r5, #12]
 8008518:	2b01      	cmp	r3, #1
 800851a:	d907      	bls.n	800852c <_fwalk_sglue+0x38>
 800851c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008520:	3301      	adds	r3, #1
 8008522:	d003      	beq.n	800852c <_fwalk_sglue+0x38>
 8008524:	4629      	mov	r1, r5
 8008526:	4638      	mov	r0, r7
 8008528:	47c0      	blx	r8
 800852a:	4306      	orrs	r6, r0
 800852c:	3568      	adds	r5, #104	; 0x68
 800852e:	e7e9      	b.n	8008504 <_fwalk_sglue+0x10>

08008530 <_puts_r>:
 8008530:	6a03      	ldr	r3, [r0, #32]
 8008532:	b570      	push	{r4, r5, r6, lr}
 8008534:	6884      	ldr	r4, [r0, #8]
 8008536:	4605      	mov	r5, r0
 8008538:	460e      	mov	r6, r1
 800853a:	b90b      	cbnz	r3, 8008540 <_puts_r+0x10>
 800853c:	f7ff ffc2 	bl	80084c4 <__sinit>
 8008540:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008542:	07db      	lsls	r3, r3, #31
 8008544:	d405      	bmi.n	8008552 <_puts_r+0x22>
 8008546:	89a3      	ldrh	r3, [r4, #12]
 8008548:	0598      	lsls	r0, r3, #22
 800854a:	d402      	bmi.n	8008552 <_puts_r+0x22>
 800854c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800854e:	f000 fa12 	bl	8008976 <__retarget_lock_acquire_recursive>
 8008552:	89a3      	ldrh	r3, [r4, #12]
 8008554:	0719      	lsls	r1, r3, #28
 8008556:	d513      	bpl.n	8008580 <_puts_r+0x50>
 8008558:	6923      	ldr	r3, [r4, #16]
 800855a:	b18b      	cbz	r3, 8008580 <_puts_r+0x50>
 800855c:	3e01      	subs	r6, #1
 800855e:	68a3      	ldr	r3, [r4, #8]
 8008560:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008564:	3b01      	subs	r3, #1
 8008566:	60a3      	str	r3, [r4, #8]
 8008568:	b9e9      	cbnz	r1, 80085a6 <_puts_r+0x76>
 800856a:	2b00      	cmp	r3, #0
 800856c:	da2e      	bge.n	80085cc <_puts_r+0x9c>
 800856e:	4622      	mov	r2, r4
 8008570:	210a      	movs	r1, #10
 8008572:	4628      	mov	r0, r5
 8008574:	f000 f89b 	bl	80086ae <__swbuf_r>
 8008578:	3001      	adds	r0, #1
 800857a:	d007      	beq.n	800858c <_puts_r+0x5c>
 800857c:	250a      	movs	r5, #10
 800857e:	e007      	b.n	8008590 <_puts_r+0x60>
 8008580:	4621      	mov	r1, r4
 8008582:	4628      	mov	r0, r5
 8008584:	f000 f8d0 	bl	8008728 <__swsetup_r>
 8008588:	2800      	cmp	r0, #0
 800858a:	d0e7      	beq.n	800855c <_puts_r+0x2c>
 800858c:	f04f 35ff 	mov.w	r5, #4294967295
 8008590:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008592:	07da      	lsls	r2, r3, #31
 8008594:	d405      	bmi.n	80085a2 <_puts_r+0x72>
 8008596:	89a3      	ldrh	r3, [r4, #12]
 8008598:	059b      	lsls	r3, r3, #22
 800859a:	d402      	bmi.n	80085a2 <_puts_r+0x72>
 800859c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800859e:	f000 f9eb 	bl	8008978 <__retarget_lock_release_recursive>
 80085a2:	4628      	mov	r0, r5
 80085a4:	bd70      	pop	{r4, r5, r6, pc}
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	da04      	bge.n	80085b4 <_puts_r+0x84>
 80085aa:	69a2      	ldr	r2, [r4, #24]
 80085ac:	429a      	cmp	r2, r3
 80085ae:	dc06      	bgt.n	80085be <_puts_r+0x8e>
 80085b0:	290a      	cmp	r1, #10
 80085b2:	d004      	beq.n	80085be <_puts_r+0x8e>
 80085b4:	6823      	ldr	r3, [r4, #0]
 80085b6:	1c5a      	adds	r2, r3, #1
 80085b8:	6022      	str	r2, [r4, #0]
 80085ba:	7019      	strb	r1, [r3, #0]
 80085bc:	e7cf      	b.n	800855e <_puts_r+0x2e>
 80085be:	4622      	mov	r2, r4
 80085c0:	4628      	mov	r0, r5
 80085c2:	f000 f874 	bl	80086ae <__swbuf_r>
 80085c6:	3001      	adds	r0, #1
 80085c8:	d1c9      	bne.n	800855e <_puts_r+0x2e>
 80085ca:	e7df      	b.n	800858c <_puts_r+0x5c>
 80085cc:	6823      	ldr	r3, [r4, #0]
 80085ce:	250a      	movs	r5, #10
 80085d0:	1c5a      	adds	r2, r3, #1
 80085d2:	6022      	str	r2, [r4, #0]
 80085d4:	701d      	strb	r5, [r3, #0]
 80085d6:	e7db      	b.n	8008590 <_puts_r+0x60>

080085d8 <puts>:
 80085d8:	4b02      	ldr	r3, [pc, #8]	; (80085e4 <puts+0xc>)
 80085da:	4601      	mov	r1, r0
 80085dc:	6818      	ldr	r0, [r3, #0]
 80085de:	f7ff bfa7 	b.w	8008530 <_puts_r>
 80085e2:	bf00      	nop
 80085e4:	20000068 	.word	0x20000068

080085e8 <siprintf>:
 80085e8:	b40e      	push	{r1, r2, r3}
 80085ea:	b500      	push	{lr}
 80085ec:	b09c      	sub	sp, #112	; 0x70
 80085ee:	ab1d      	add	r3, sp, #116	; 0x74
 80085f0:	9002      	str	r0, [sp, #8]
 80085f2:	9006      	str	r0, [sp, #24]
 80085f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80085f8:	4809      	ldr	r0, [pc, #36]	; (8008620 <siprintf+0x38>)
 80085fa:	9107      	str	r1, [sp, #28]
 80085fc:	9104      	str	r1, [sp, #16]
 80085fe:	4909      	ldr	r1, [pc, #36]	; (8008624 <siprintf+0x3c>)
 8008600:	f853 2b04 	ldr.w	r2, [r3], #4
 8008604:	9105      	str	r1, [sp, #20]
 8008606:	6800      	ldr	r0, [r0, #0]
 8008608:	9301      	str	r3, [sp, #4]
 800860a:	a902      	add	r1, sp, #8
 800860c:	f000 fb16 	bl	8008c3c <_svfiprintf_r>
 8008610:	9b02      	ldr	r3, [sp, #8]
 8008612:	2200      	movs	r2, #0
 8008614:	701a      	strb	r2, [r3, #0]
 8008616:	b01c      	add	sp, #112	; 0x70
 8008618:	f85d eb04 	ldr.w	lr, [sp], #4
 800861c:	b003      	add	sp, #12
 800861e:	4770      	bx	lr
 8008620:	20000068 	.word	0x20000068
 8008624:	ffff0208 	.word	0xffff0208

08008628 <__sread>:
 8008628:	b510      	push	{r4, lr}
 800862a:	460c      	mov	r4, r1
 800862c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008630:	f000 f952 	bl	80088d8 <_read_r>
 8008634:	2800      	cmp	r0, #0
 8008636:	bfab      	itete	ge
 8008638:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800863a:	89a3      	ldrhlt	r3, [r4, #12]
 800863c:	181b      	addge	r3, r3, r0
 800863e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008642:	bfac      	ite	ge
 8008644:	6563      	strge	r3, [r4, #84]	; 0x54
 8008646:	81a3      	strhlt	r3, [r4, #12]
 8008648:	bd10      	pop	{r4, pc}

0800864a <__swrite>:
 800864a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800864e:	461f      	mov	r7, r3
 8008650:	898b      	ldrh	r3, [r1, #12]
 8008652:	05db      	lsls	r3, r3, #23
 8008654:	4605      	mov	r5, r0
 8008656:	460c      	mov	r4, r1
 8008658:	4616      	mov	r6, r2
 800865a:	d505      	bpl.n	8008668 <__swrite+0x1e>
 800865c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008660:	2302      	movs	r3, #2
 8008662:	2200      	movs	r2, #0
 8008664:	f000 f926 	bl	80088b4 <_lseek_r>
 8008668:	89a3      	ldrh	r3, [r4, #12]
 800866a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800866e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008672:	81a3      	strh	r3, [r4, #12]
 8008674:	4632      	mov	r2, r6
 8008676:	463b      	mov	r3, r7
 8008678:	4628      	mov	r0, r5
 800867a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800867e:	f000 b93d 	b.w	80088fc <_write_r>

08008682 <__sseek>:
 8008682:	b510      	push	{r4, lr}
 8008684:	460c      	mov	r4, r1
 8008686:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800868a:	f000 f913 	bl	80088b4 <_lseek_r>
 800868e:	1c43      	adds	r3, r0, #1
 8008690:	89a3      	ldrh	r3, [r4, #12]
 8008692:	bf15      	itete	ne
 8008694:	6560      	strne	r0, [r4, #84]	; 0x54
 8008696:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800869a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800869e:	81a3      	strheq	r3, [r4, #12]
 80086a0:	bf18      	it	ne
 80086a2:	81a3      	strhne	r3, [r4, #12]
 80086a4:	bd10      	pop	{r4, pc}

080086a6 <__sclose>:
 80086a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086aa:	f000 b89d 	b.w	80087e8 <_close_r>

080086ae <__swbuf_r>:
 80086ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086b0:	460e      	mov	r6, r1
 80086b2:	4614      	mov	r4, r2
 80086b4:	4605      	mov	r5, r0
 80086b6:	b118      	cbz	r0, 80086c0 <__swbuf_r+0x12>
 80086b8:	6a03      	ldr	r3, [r0, #32]
 80086ba:	b90b      	cbnz	r3, 80086c0 <__swbuf_r+0x12>
 80086bc:	f7ff ff02 	bl	80084c4 <__sinit>
 80086c0:	69a3      	ldr	r3, [r4, #24]
 80086c2:	60a3      	str	r3, [r4, #8]
 80086c4:	89a3      	ldrh	r3, [r4, #12]
 80086c6:	071a      	lsls	r2, r3, #28
 80086c8:	d525      	bpl.n	8008716 <__swbuf_r+0x68>
 80086ca:	6923      	ldr	r3, [r4, #16]
 80086cc:	b31b      	cbz	r3, 8008716 <__swbuf_r+0x68>
 80086ce:	6823      	ldr	r3, [r4, #0]
 80086d0:	6922      	ldr	r2, [r4, #16]
 80086d2:	1a98      	subs	r0, r3, r2
 80086d4:	6963      	ldr	r3, [r4, #20]
 80086d6:	b2f6      	uxtb	r6, r6
 80086d8:	4283      	cmp	r3, r0
 80086da:	4637      	mov	r7, r6
 80086dc:	dc04      	bgt.n	80086e8 <__swbuf_r+0x3a>
 80086de:	4621      	mov	r1, r4
 80086e0:	4628      	mov	r0, r5
 80086e2:	f000 fdbf 	bl	8009264 <_fflush_r>
 80086e6:	b9e0      	cbnz	r0, 8008722 <__swbuf_r+0x74>
 80086e8:	68a3      	ldr	r3, [r4, #8]
 80086ea:	3b01      	subs	r3, #1
 80086ec:	60a3      	str	r3, [r4, #8]
 80086ee:	6823      	ldr	r3, [r4, #0]
 80086f0:	1c5a      	adds	r2, r3, #1
 80086f2:	6022      	str	r2, [r4, #0]
 80086f4:	701e      	strb	r6, [r3, #0]
 80086f6:	6962      	ldr	r2, [r4, #20]
 80086f8:	1c43      	adds	r3, r0, #1
 80086fa:	429a      	cmp	r2, r3
 80086fc:	d004      	beq.n	8008708 <__swbuf_r+0x5a>
 80086fe:	89a3      	ldrh	r3, [r4, #12]
 8008700:	07db      	lsls	r3, r3, #31
 8008702:	d506      	bpl.n	8008712 <__swbuf_r+0x64>
 8008704:	2e0a      	cmp	r6, #10
 8008706:	d104      	bne.n	8008712 <__swbuf_r+0x64>
 8008708:	4621      	mov	r1, r4
 800870a:	4628      	mov	r0, r5
 800870c:	f000 fdaa 	bl	8009264 <_fflush_r>
 8008710:	b938      	cbnz	r0, 8008722 <__swbuf_r+0x74>
 8008712:	4638      	mov	r0, r7
 8008714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008716:	4621      	mov	r1, r4
 8008718:	4628      	mov	r0, r5
 800871a:	f000 f805 	bl	8008728 <__swsetup_r>
 800871e:	2800      	cmp	r0, #0
 8008720:	d0d5      	beq.n	80086ce <__swbuf_r+0x20>
 8008722:	f04f 37ff 	mov.w	r7, #4294967295
 8008726:	e7f4      	b.n	8008712 <__swbuf_r+0x64>

08008728 <__swsetup_r>:
 8008728:	b538      	push	{r3, r4, r5, lr}
 800872a:	4b2a      	ldr	r3, [pc, #168]	; (80087d4 <__swsetup_r+0xac>)
 800872c:	4605      	mov	r5, r0
 800872e:	6818      	ldr	r0, [r3, #0]
 8008730:	460c      	mov	r4, r1
 8008732:	b118      	cbz	r0, 800873c <__swsetup_r+0x14>
 8008734:	6a03      	ldr	r3, [r0, #32]
 8008736:	b90b      	cbnz	r3, 800873c <__swsetup_r+0x14>
 8008738:	f7ff fec4 	bl	80084c4 <__sinit>
 800873c:	89a3      	ldrh	r3, [r4, #12]
 800873e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008742:	0718      	lsls	r0, r3, #28
 8008744:	d422      	bmi.n	800878c <__swsetup_r+0x64>
 8008746:	06d9      	lsls	r1, r3, #27
 8008748:	d407      	bmi.n	800875a <__swsetup_r+0x32>
 800874a:	2309      	movs	r3, #9
 800874c:	602b      	str	r3, [r5, #0]
 800874e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008752:	81a3      	strh	r3, [r4, #12]
 8008754:	f04f 30ff 	mov.w	r0, #4294967295
 8008758:	e034      	b.n	80087c4 <__swsetup_r+0x9c>
 800875a:	0758      	lsls	r0, r3, #29
 800875c:	d512      	bpl.n	8008784 <__swsetup_r+0x5c>
 800875e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008760:	b141      	cbz	r1, 8008774 <__swsetup_r+0x4c>
 8008762:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008766:	4299      	cmp	r1, r3
 8008768:	d002      	beq.n	8008770 <__swsetup_r+0x48>
 800876a:	4628      	mov	r0, r5
 800876c:	f000 f914 	bl	8008998 <_free_r>
 8008770:	2300      	movs	r3, #0
 8008772:	6363      	str	r3, [r4, #52]	; 0x34
 8008774:	89a3      	ldrh	r3, [r4, #12]
 8008776:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800877a:	81a3      	strh	r3, [r4, #12]
 800877c:	2300      	movs	r3, #0
 800877e:	6063      	str	r3, [r4, #4]
 8008780:	6923      	ldr	r3, [r4, #16]
 8008782:	6023      	str	r3, [r4, #0]
 8008784:	89a3      	ldrh	r3, [r4, #12]
 8008786:	f043 0308 	orr.w	r3, r3, #8
 800878a:	81a3      	strh	r3, [r4, #12]
 800878c:	6923      	ldr	r3, [r4, #16]
 800878e:	b94b      	cbnz	r3, 80087a4 <__swsetup_r+0x7c>
 8008790:	89a3      	ldrh	r3, [r4, #12]
 8008792:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008796:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800879a:	d003      	beq.n	80087a4 <__swsetup_r+0x7c>
 800879c:	4621      	mov	r1, r4
 800879e:	4628      	mov	r0, r5
 80087a0:	f000 fdae 	bl	8009300 <__smakebuf_r>
 80087a4:	89a0      	ldrh	r0, [r4, #12]
 80087a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80087aa:	f010 0301 	ands.w	r3, r0, #1
 80087ae:	d00a      	beq.n	80087c6 <__swsetup_r+0x9e>
 80087b0:	2300      	movs	r3, #0
 80087b2:	60a3      	str	r3, [r4, #8]
 80087b4:	6963      	ldr	r3, [r4, #20]
 80087b6:	425b      	negs	r3, r3
 80087b8:	61a3      	str	r3, [r4, #24]
 80087ba:	6923      	ldr	r3, [r4, #16]
 80087bc:	b943      	cbnz	r3, 80087d0 <__swsetup_r+0xa8>
 80087be:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80087c2:	d1c4      	bne.n	800874e <__swsetup_r+0x26>
 80087c4:	bd38      	pop	{r3, r4, r5, pc}
 80087c6:	0781      	lsls	r1, r0, #30
 80087c8:	bf58      	it	pl
 80087ca:	6963      	ldrpl	r3, [r4, #20]
 80087cc:	60a3      	str	r3, [r4, #8]
 80087ce:	e7f4      	b.n	80087ba <__swsetup_r+0x92>
 80087d0:	2000      	movs	r0, #0
 80087d2:	e7f7      	b.n	80087c4 <__swsetup_r+0x9c>
 80087d4:	20000068 	.word	0x20000068

080087d8 <memset>:
 80087d8:	4402      	add	r2, r0
 80087da:	4603      	mov	r3, r0
 80087dc:	4293      	cmp	r3, r2
 80087de:	d100      	bne.n	80087e2 <memset+0xa>
 80087e0:	4770      	bx	lr
 80087e2:	f803 1b01 	strb.w	r1, [r3], #1
 80087e6:	e7f9      	b.n	80087dc <memset+0x4>

080087e8 <_close_r>:
 80087e8:	b538      	push	{r3, r4, r5, lr}
 80087ea:	4d06      	ldr	r5, [pc, #24]	; (8008804 <_close_r+0x1c>)
 80087ec:	2300      	movs	r3, #0
 80087ee:	4604      	mov	r4, r0
 80087f0:	4608      	mov	r0, r1
 80087f2:	602b      	str	r3, [r5, #0]
 80087f4:	f7f8 ffdd 	bl	80017b2 <_close>
 80087f8:	1c43      	adds	r3, r0, #1
 80087fa:	d102      	bne.n	8008802 <_close_r+0x1a>
 80087fc:	682b      	ldr	r3, [r5, #0]
 80087fe:	b103      	cbz	r3, 8008802 <_close_r+0x1a>
 8008800:	6023      	str	r3, [r4, #0]
 8008802:	bd38      	pop	{r3, r4, r5, pc}
 8008804:	2000458c 	.word	0x2000458c

08008808 <_reclaim_reent>:
 8008808:	4b29      	ldr	r3, [pc, #164]	; (80088b0 <_reclaim_reent+0xa8>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4283      	cmp	r3, r0
 800880e:	b570      	push	{r4, r5, r6, lr}
 8008810:	4604      	mov	r4, r0
 8008812:	d04b      	beq.n	80088ac <_reclaim_reent+0xa4>
 8008814:	69c3      	ldr	r3, [r0, #28]
 8008816:	b143      	cbz	r3, 800882a <_reclaim_reent+0x22>
 8008818:	68db      	ldr	r3, [r3, #12]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d144      	bne.n	80088a8 <_reclaim_reent+0xa0>
 800881e:	69e3      	ldr	r3, [r4, #28]
 8008820:	6819      	ldr	r1, [r3, #0]
 8008822:	b111      	cbz	r1, 800882a <_reclaim_reent+0x22>
 8008824:	4620      	mov	r0, r4
 8008826:	f000 f8b7 	bl	8008998 <_free_r>
 800882a:	6961      	ldr	r1, [r4, #20]
 800882c:	b111      	cbz	r1, 8008834 <_reclaim_reent+0x2c>
 800882e:	4620      	mov	r0, r4
 8008830:	f000 f8b2 	bl	8008998 <_free_r>
 8008834:	69e1      	ldr	r1, [r4, #28]
 8008836:	b111      	cbz	r1, 800883e <_reclaim_reent+0x36>
 8008838:	4620      	mov	r0, r4
 800883a:	f000 f8ad 	bl	8008998 <_free_r>
 800883e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008840:	b111      	cbz	r1, 8008848 <_reclaim_reent+0x40>
 8008842:	4620      	mov	r0, r4
 8008844:	f000 f8a8 	bl	8008998 <_free_r>
 8008848:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800884a:	b111      	cbz	r1, 8008852 <_reclaim_reent+0x4a>
 800884c:	4620      	mov	r0, r4
 800884e:	f000 f8a3 	bl	8008998 <_free_r>
 8008852:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008854:	b111      	cbz	r1, 800885c <_reclaim_reent+0x54>
 8008856:	4620      	mov	r0, r4
 8008858:	f000 f89e 	bl	8008998 <_free_r>
 800885c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800885e:	b111      	cbz	r1, 8008866 <_reclaim_reent+0x5e>
 8008860:	4620      	mov	r0, r4
 8008862:	f000 f899 	bl	8008998 <_free_r>
 8008866:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8008868:	b111      	cbz	r1, 8008870 <_reclaim_reent+0x68>
 800886a:	4620      	mov	r0, r4
 800886c:	f000 f894 	bl	8008998 <_free_r>
 8008870:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008872:	b111      	cbz	r1, 800887a <_reclaim_reent+0x72>
 8008874:	4620      	mov	r0, r4
 8008876:	f000 f88f 	bl	8008998 <_free_r>
 800887a:	6a23      	ldr	r3, [r4, #32]
 800887c:	b1b3      	cbz	r3, 80088ac <_reclaim_reent+0xa4>
 800887e:	4620      	mov	r0, r4
 8008880:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008884:	4718      	bx	r3
 8008886:	5949      	ldr	r1, [r1, r5]
 8008888:	b941      	cbnz	r1, 800889c <_reclaim_reent+0x94>
 800888a:	3504      	adds	r5, #4
 800888c:	69e3      	ldr	r3, [r4, #28]
 800888e:	2d80      	cmp	r5, #128	; 0x80
 8008890:	68d9      	ldr	r1, [r3, #12]
 8008892:	d1f8      	bne.n	8008886 <_reclaim_reent+0x7e>
 8008894:	4620      	mov	r0, r4
 8008896:	f000 f87f 	bl	8008998 <_free_r>
 800889a:	e7c0      	b.n	800881e <_reclaim_reent+0x16>
 800889c:	680e      	ldr	r6, [r1, #0]
 800889e:	4620      	mov	r0, r4
 80088a0:	f000 f87a 	bl	8008998 <_free_r>
 80088a4:	4631      	mov	r1, r6
 80088a6:	e7ef      	b.n	8008888 <_reclaim_reent+0x80>
 80088a8:	2500      	movs	r5, #0
 80088aa:	e7ef      	b.n	800888c <_reclaim_reent+0x84>
 80088ac:	bd70      	pop	{r4, r5, r6, pc}
 80088ae:	bf00      	nop
 80088b0:	20000068 	.word	0x20000068

080088b4 <_lseek_r>:
 80088b4:	b538      	push	{r3, r4, r5, lr}
 80088b6:	4d07      	ldr	r5, [pc, #28]	; (80088d4 <_lseek_r+0x20>)
 80088b8:	4604      	mov	r4, r0
 80088ba:	4608      	mov	r0, r1
 80088bc:	4611      	mov	r1, r2
 80088be:	2200      	movs	r2, #0
 80088c0:	602a      	str	r2, [r5, #0]
 80088c2:	461a      	mov	r2, r3
 80088c4:	f7f8 ff9c 	bl	8001800 <_lseek>
 80088c8:	1c43      	adds	r3, r0, #1
 80088ca:	d102      	bne.n	80088d2 <_lseek_r+0x1e>
 80088cc:	682b      	ldr	r3, [r5, #0]
 80088ce:	b103      	cbz	r3, 80088d2 <_lseek_r+0x1e>
 80088d0:	6023      	str	r3, [r4, #0]
 80088d2:	bd38      	pop	{r3, r4, r5, pc}
 80088d4:	2000458c 	.word	0x2000458c

080088d8 <_read_r>:
 80088d8:	b538      	push	{r3, r4, r5, lr}
 80088da:	4d07      	ldr	r5, [pc, #28]	; (80088f8 <_read_r+0x20>)
 80088dc:	4604      	mov	r4, r0
 80088de:	4608      	mov	r0, r1
 80088e0:	4611      	mov	r1, r2
 80088e2:	2200      	movs	r2, #0
 80088e4:	602a      	str	r2, [r5, #0]
 80088e6:	461a      	mov	r2, r3
 80088e8:	f7f8 ff2a 	bl	8001740 <_read>
 80088ec:	1c43      	adds	r3, r0, #1
 80088ee:	d102      	bne.n	80088f6 <_read_r+0x1e>
 80088f0:	682b      	ldr	r3, [r5, #0]
 80088f2:	b103      	cbz	r3, 80088f6 <_read_r+0x1e>
 80088f4:	6023      	str	r3, [r4, #0]
 80088f6:	bd38      	pop	{r3, r4, r5, pc}
 80088f8:	2000458c 	.word	0x2000458c

080088fc <_write_r>:
 80088fc:	b538      	push	{r3, r4, r5, lr}
 80088fe:	4d07      	ldr	r5, [pc, #28]	; (800891c <_write_r+0x20>)
 8008900:	4604      	mov	r4, r0
 8008902:	4608      	mov	r0, r1
 8008904:	4611      	mov	r1, r2
 8008906:	2200      	movs	r2, #0
 8008908:	602a      	str	r2, [r5, #0]
 800890a:	461a      	mov	r2, r3
 800890c:	f7f8 ff35 	bl	800177a <_write>
 8008910:	1c43      	adds	r3, r0, #1
 8008912:	d102      	bne.n	800891a <_write_r+0x1e>
 8008914:	682b      	ldr	r3, [r5, #0]
 8008916:	b103      	cbz	r3, 800891a <_write_r+0x1e>
 8008918:	6023      	str	r3, [r4, #0]
 800891a:	bd38      	pop	{r3, r4, r5, pc}
 800891c:	2000458c 	.word	0x2000458c

08008920 <__errno>:
 8008920:	4b01      	ldr	r3, [pc, #4]	; (8008928 <__errno+0x8>)
 8008922:	6818      	ldr	r0, [r3, #0]
 8008924:	4770      	bx	lr
 8008926:	bf00      	nop
 8008928:	20000068 	.word	0x20000068

0800892c <__libc_init_array>:
 800892c:	b570      	push	{r4, r5, r6, lr}
 800892e:	4d0d      	ldr	r5, [pc, #52]	; (8008964 <__libc_init_array+0x38>)
 8008930:	4c0d      	ldr	r4, [pc, #52]	; (8008968 <__libc_init_array+0x3c>)
 8008932:	1b64      	subs	r4, r4, r5
 8008934:	10a4      	asrs	r4, r4, #2
 8008936:	2600      	movs	r6, #0
 8008938:	42a6      	cmp	r6, r4
 800893a:	d109      	bne.n	8008950 <__libc_init_array+0x24>
 800893c:	4d0b      	ldr	r5, [pc, #44]	; (800896c <__libc_init_array+0x40>)
 800893e:	4c0c      	ldr	r4, [pc, #48]	; (8008970 <__libc_init_array+0x44>)
 8008940:	f000 fd9e 	bl	8009480 <_init>
 8008944:	1b64      	subs	r4, r4, r5
 8008946:	10a4      	asrs	r4, r4, #2
 8008948:	2600      	movs	r6, #0
 800894a:	42a6      	cmp	r6, r4
 800894c:	d105      	bne.n	800895a <__libc_init_array+0x2e>
 800894e:	bd70      	pop	{r4, r5, r6, pc}
 8008950:	f855 3b04 	ldr.w	r3, [r5], #4
 8008954:	4798      	blx	r3
 8008956:	3601      	adds	r6, #1
 8008958:	e7ee      	b.n	8008938 <__libc_init_array+0xc>
 800895a:	f855 3b04 	ldr.w	r3, [r5], #4
 800895e:	4798      	blx	r3
 8008960:	3601      	adds	r6, #1
 8008962:	e7f2      	b.n	800894a <__libc_init_array+0x1e>
 8008964:	0800962c 	.word	0x0800962c
 8008968:	0800962c 	.word	0x0800962c
 800896c:	0800962c 	.word	0x0800962c
 8008970:	08009630 	.word	0x08009630

08008974 <__retarget_lock_init_recursive>:
 8008974:	4770      	bx	lr

08008976 <__retarget_lock_acquire_recursive>:
 8008976:	4770      	bx	lr

08008978 <__retarget_lock_release_recursive>:
 8008978:	4770      	bx	lr

0800897a <memcpy>:
 800897a:	440a      	add	r2, r1
 800897c:	4291      	cmp	r1, r2
 800897e:	f100 33ff 	add.w	r3, r0, #4294967295
 8008982:	d100      	bne.n	8008986 <memcpy+0xc>
 8008984:	4770      	bx	lr
 8008986:	b510      	push	{r4, lr}
 8008988:	f811 4b01 	ldrb.w	r4, [r1], #1
 800898c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008990:	4291      	cmp	r1, r2
 8008992:	d1f9      	bne.n	8008988 <memcpy+0xe>
 8008994:	bd10      	pop	{r4, pc}
	...

08008998 <_free_r>:
 8008998:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800899a:	2900      	cmp	r1, #0
 800899c:	d044      	beq.n	8008a28 <_free_r+0x90>
 800899e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089a2:	9001      	str	r0, [sp, #4]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	f1a1 0404 	sub.w	r4, r1, #4
 80089aa:	bfb8      	it	lt
 80089ac:	18e4      	addlt	r4, r4, r3
 80089ae:	f000 f8df 	bl	8008b70 <__malloc_lock>
 80089b2:	4a1e      	ldr	r2, [pc, #120]	; (8008a2c <_free_r+0x94>)
 80089b4:	9801      	ldr	r0, [sp, #4]
 80089b6:	6813      	ldr	r3, [r2, #0]
 80089b8:	b933      	cbnz	r3, 80089c8 <_free_r+0x30>
 80089ba:	6063      	str	r3, [r4, #4]
 80089bc:	6014      	str	r4, [r2, #0]
 80089be:	b003      	add	sp, #12
 80089c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80089c4:	f000 b8da 	b.w	8008b7c <__malloc_unlock>
 80089c8:	42a3      	cmp	r3, r4
 80089ca:	d908      	bls.n	80089de <_free_r+0x46>
 80089cc:	6825      	ldr	r5, [r4, #0]
 80089ce:	1961      	adds	r1, r4, r5
 80089d0:	428b      	cmp	r3, r1
 80089d2:	bf01      	itttt	eq
 80089d4:	6819      	ldreq	r1, [r3, #0]
 80089d6:	685b      	ldreq	r3, [r3, #4]
 80089d8:	1949      	addeq	r1, r1, r5
 80089da:	6021      	streq	r1, [r4, #0]
 80089dc:	e7ed      	b.n	80089ba <_free_r+0x22>
 80089de:	461a      	mov	r2, r3
 80089e0:	685b      	ldr	r3, [r3, #4]
 80089e2:	b10b      	cbz	r3, 80089e8 <_free_r+0x50>
 80089e4:	42a3      	cmp	r3, r4
 80089e6:	d9fa      	bls.n	80089de <_free_r+0x46>
 80089e8:	6811      	ldr	r1, [r2, #0]
 80089ea:	1855      	adds	r5, r2, r1
 80089ec:	42a5      	cmp	r5, r4
 80089ee:	d10b      	bne.n	8008a08 <_free_r+0x70>
 80089f0:	6824      	ldr	r4, [r4, #0]
 80089f2:	4421      	add	r1, r4
 80089f4:	1854      	adds	r4, r2, r1
 80089f6:	42a3      	cmp	r3, r4
 80089f8:	6011      	str	r1, [r2, #0]
 80089fa:	d1e0      	bne.n	80089be <_free_r+0x26>
 80089fc:	681c      	ldr	r4, [r3, #0]
 80089fe:	685b      	ldr	r3, [r3, #4]
 8008a00:	6053      	str	r3, [r2, #4]
 8008a02:	440c      	add	r4, r1
 8008a04:	6014      	str	r4, [r2, #0]
 8008a06:	e7da      	b.n	80089be <_free_r+0x26>
 8008a08:	d902      	bls.n	8008a10 <_free_r+0x78>
 8008a0a:	230c      	movs	r3, #12
 8008a0c:	6003      	str	r3, [r0, #0]
 8008a0e:	e7d6      	b.n	80089be <_free_r+0x26>
 8008a10:	6825      	ldr	r5, [r4, #0]
 8008a12:	1961      	adds	r1, r4, r5
 8008a14:	428b      	cmp	r3, r1
 8008a16:	bf04      	itt	eq
 8008a18:	6819      	ldreq	r1, [r3, #0]
 8008a1a:	685b      	ldreq	r3, [r3, #4]
 8008a1c:	6063      	str	r3, [r4, #4]
 8008a1e:	bf04      	itt	eq
 8008a20:	1949      	addeq	r1, r1, r5
 8008a22:	6021      	streq	r1, [r4, #0]
 8008a24:	6054      	str	r4, [r2, #4]
 8008a26:	e7ca      	b.n	80089be <_free_r+0x26>
 8008a28:	b003      	add	sp, #12
 8008a2a:	bd30      	pop	{r4, r5, pc}
 8008a2c:	20004594 	.word	0x20004594

08008a30 <sbrk_aligned>:
 8008a30:	b570      	push	{r4, r5, r6, lr}
 8008a32:	4e0e      	ldr	r6, [pc, #56]	; (8008a6c <sbrk_aligned+0x3c>)
 8008a34:	460c      	mov	r4, r1
 8008a36:	6831      	ldr	r1, [r6, #0]
 8008a38:	4605      	mov	r5, r0
 8008a3a:	b911      	cbnz	r1, 8008a42 <sbrk_aligned+0x12>
 8008a3c:	f000 fcd8 	bl	80093f0 <_sbrk_r>
 8008a40:	6030      	str	r0, [r6, #0]
 8008a42:	4621      	mov	r1, r4
 8008a44:	4628      	mov	r0, r5
 8008a46:	f000 fcd3 	bl	80093f0 <_sbrk_r>
 8008a4a:	1c43      	adds	r3, r0, #1
 8008a4c:	d00a      	beq.n	8008a64 <sbrk_aligned+0x34>
 8008a4e:	1cc4      	adds	r4, r0, #3
 8008a50:	f024 0403 	bic.w	r4, r4, #3
 8008a54:	42a0      	cmp	r0, r4
 8008a56:	d007      	beq.n	8008a68 <sbrk_aligned+0x38>
 8008a58:	1a21      	subs	r1, r4, r0
 8008a5a:	4628      	mov	r0, r5
 8008a5c:	f000 fcc8 	bl	80093f0 <_sbrk_r>
 8008a60:	3001      	adds	r0, #1
 8008a62:	d101      	bne.n	8008a68 <sbrk_aligned+0x38>
 8008a64:	f04f 34ff 	mov.w	r4, #4294967295
 8008a68:	4620      	mov	r0, r4
 8008a6a:	bd70      	pop	{r4, r5, r6, pc}
 8008a6c:	20004598 	.word	0x20004598

08008a70 <_malloc_r>:
 8008a70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a74:	1ccd      	adds	r5, r1, #3
 8008a76:	f025 0503 	bic.w	r5, r5, #3
 8008a7a:	3508      	adds	r5, #8
 8008a7c:	2d0c      	cmp	r5, #12
 8008a7e:	bf38      	it	cc
 8008a80:	250c      	movcc	r5, #12
 8008a82:	2d00      	cmp	r5, #0
 8008a84:	4607      	mov	r7, r0
 8008a86:	db01      	blt.n	8008a8c <_malloc_r+0x1c>
 8008a88:	42a9      	cmp	r1, r5
 8008a8a:	d905      	bls.n	8008a98 <_malloc_r+0x28>
 8008a8c:	230c      	movs	r3, #12
 8008a8e:	603b      	str	r3, [r7, #0]
 8008a90:	2600      	movs	r6, #0
 8008a92:	4630      	mov	r0, r6
 8008a94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a98:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008b6c <_malloc_r+0xfc>
 8008a9c:	f000 f868 	bl	8008b70 <__malloc_lock>
 8008aa0:	f8d8 3000 	ldr.w	r3, [r8]
 8008aa4:	461c      	mov	r4, r3
 8008aa6:	bb5c      	cbnz	r4, 8008b00 <_malloc_r+0x90>
 8008aa8:	4629      	mov	r1, r5
 8008aaa:	4638      	mov	r0, r7
 8008aac:	f7ff ffc0 	bl	8008a30 <sbrk_aligned>
 8008ab0:	1c43      	adds	r3, r0, #1
 8008ab2:	4604      	mov	r4, r0
 8008ab4:	d155      	bne.n	8008b62 <_malloc_r+0xf2>
 8008ab6:	f8d8 4000 	ldr.w	r4, [r8]
 8008aba:	4626      	mov	r6, r4
 8008abc:	2e00      	cmp	r6, #0
 8008abe:	d145      	bne.n	8008b4c <_malloc_r+0xdc>
 8008ac0:	2c00      	cmp	r4, #0
 8008ac2:	d048      	beq.n	8008b56 <_malloc_r+0xe6>
 8008ac4:	6823      	ldr	r3, [r4, #0]
 8008ac6:	4631      	mov	r1, r6
 8008ac8:	4638      	mov	r0, r7
 8008aca:	eb04 0903 	add.w	r9, r4, r3
 8008ace:	f000 fc8f 	bl	80093f0 <_sbrk_r>
 8008ad2:	4581      	cmp	r9, r0
 8008ad4:	d13f      	bne.n	8008b56 <_malloc_r+0xe6>
 8008ad6:	6821      	ldr	r1, [r4, #0]
 8008ad8:	1a6d      	subs	r5, r5, r1
 8008ada:	4629      	mov	r1, r5
 8008adc:	4638      	mov	r0, r7
 8008ade:	f7ff ffa7 	bl	8008a30 <sbrk_aligned>
 8008ae2:	3001      	adds	r0, #1
 8008ae4:	d037      	beq.n	8008b56 <_malloc_r+0xe6>
 8008ae6:	6823      	ldr	r3, [r4, #0]
 8008ae8:	442b      	add	r3, r5
 8008aea:	6023      	str	r3, [r4, #0]
 8008aec:	f8d8 3000 	ldr.w	r3, [r8]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d038      	beq.n	8008b66 <_malloc_r+0xf6>
 8008af4:	685a      	ldr	r2, [r3, #4]
 8008af6:	42a2      	cmp	r2, r4
 8008af8:	d12b      	bne.n	8008b52 <_malloc_r+0xe2>
 8008afa:	2200      	movs	r2, #0
 8008afc:	605a      	str	r2, [r3, #4]
 8008afe:	e00f      	b.n	8008b20 <_malloc_r+0xb0>
 8008b00:	6822      	ldr	r2, [r4, #0]
 8008b02:	1b52      	subs	r2, r2, r5
 8008b04:	d41f      	bmi.n	8008b46 <_malloc_r+0xd6>
 8008b06:	2a0b      	cmp	r2, #11
 8008b08:	d917      	bls.n	8008b3a <_malloc_r+0xca>
 8008b0a:	1961      	adds	r1, r4, r5
 8008b0c:	42a3      	cmp	r3, r4
 8008b0e:	6025      	str	r5, [r4, #0]
 8008b10:	bf18      	it	ne
 8008b12:	6059      	strne	r1, [r3, #4]
 8008b14:	6863      	ldr	r3, [r4, #4]
 8008b16:	bf08      	it	eq
 8008b18:	f8c8 1000 	streq.w	r1, [r8]
 8008b1c:	5162      	str	r2, [r4, r5]
 8008b1e:	604b      	str	r3, [r1, #4]
 8008b20:	4638      	mov	r0, r7
 8008b22:	f104 060b 	add.w	r6, r4, #11
 8008b26:	f000 f829 	bl	8008b7c <__malloc_unlock>
 8008b2a:	f026 0607 	bic.w	r6, r6, #7
 8008b2e:	1d23      	adds	r3, r4, #4
 8008b30:	1af2      	subs	r2, r6, r3
 8008b32:	d0ae      	beq.n	8008a92 <_malloc_r+0x22>
 8008b34:	1b9b      	subs	r3, r3, r6
 8008b36:	50a3      	str	r3, [r4, r2]
 8008b38:	e7ab      	b.n	8008a92 <_malloc_r+0x22>
 8008b3a:	42a3      	cmp	r3, r4
 8008b3c:	6862      	ldr	r2, [r4, #4]
 8008b3e:	d1dd      	bne.n	8008afc <_malloc_r+0x8c>
 8008b40:	f8c8 2000 	str.w	r2, [r8]
 8008b44:	e7ec      	b.n	8008b20 <_malloc_r+0xb0>
 8008b46:	4623      	mov	r3, r4
 8008b48:	6864      	ldr	r4, [r4, #4]
 8008b4a:	e7ac      	b.n	8008aa6 <_malloc_r+0x36>
 8008b4c:	4634      	mov	r4, r6
 8008b4e:	6876      	ldr	r6, [r6, #4]
 8008b50:	e7b4      	b.n	8008abc <_malloc_r+0x4c>
 8008b52:	4613      	mov	r3, r2
 8008b54:	e7cc      	b.n	8008af0 <_malloc_r+0x80>
 8008b56:	230c      	movs	r3, #12
 8008b58:	603b      	str	r3, [r7, #0]
 8008b5a:	4638      	mov	r0, r7
 8008b5c:	f000 f80e 	bl	8008b7c <__malloc_unlock>
 8008b60:	e797      	b.n	8008a92 <_malloc_r+0x22>
 8008b62:	6025      	str	r5, [r4, #0]
 8008b64:	e7dc      	b.n	8008b20 <_malloc_r+0xb0>
 8008b66:	605b      	str	r3, [r3, #4]
 8008b68:	deff      	udf	#255	; 0xff
 8008b6a:	bf00      	nop
 8008b6c:	20004594 	.word	0x20004594

08008b70 <__malloc_lock>:
 8008b70:	4801      	ldr	r0, [pc, #4]	; (8008b78 <__malloc_lock+0x8>)
 8008b72:	f7ff bf00 	b.w	8008976 <__retarget_lock_acquire_recursive>
 8008b76:	bf00      	nop
 8008b78:	20004590 	.word	0x20004590

08008b7c <__malloc_unlock>:
 8008b7c:	4801      	ldr	r0, [pc, #4]	; (8008b84 <__malloc_unlock+0x8>)
 8008b7e:	f7ff befb 	b.w	8008978 <__retarget_lock_release_recursive>
 8008b82:	bf00      	nop
 8008b84:	20004590 	.word	0x20004590

08008b88 <__ssputs_r>:
 8008b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b8c:	688e      	ldr	r6, [r1, #8]
 8008b8e:	461f      	mov	r7, r3
 8008b90:	42be      	cmp	r6, r7
 8008b92:	680b      	ldr	r3, [r1, #0]
 8008b94:	4682      	mov	sl, r0
 8008b96:	460c      	mov	r4, r1
 8008b98:	4690      	mov	r8, r2
 8008b9a:	d82c      	bhi.n	8008bf6 <__ssputs_r+0x6e>
 8008b9c:	898a      	ldrh	r2, [r1, #12]
 8008b9e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008ba2:	d026      	beq.n	8008bf2 <__ssputs_r+0x6a>
 8008ba4:	6965      	ldr	r5, [r4, #20]
 8008ba6:	6909      	ldr	r1, [r1, #16]
 8008ba8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008bac:	eba3 0901 	sub.w	r9, r3, r1
 8008bb0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008bb4:	1c7b      	adds	r3, r7, #1
 8008bb6:	444b      	add	r3, r9
 8008bb8:	106d      	asrs	r5, r5, #1
 8008bba:	429d      	cmp	r5, r3
 8008bbc:	bf38      	it	cc
 8008bbe:	461d      	movcc	r5, r3
 8008bc0:	0553      	lsls	r3, r2, #21
 8008bc2:	d527      	bpl.n	8008c14 <__ssputs_r+0x8c>
 8008bc4:	4629      	mov	r1, r5
 8008bc6:	f7ff ff53 	bl	8008a70 <_malloc_r>
 8008bca:	4606      	mov	r6, r0
 8008bcc:	b360      	cbz	r0, 8008c28 <__ssputs_r+0xa0>
 8008bce:	6921      	ldr	r1, [r4, #16]
 8008bd0:	464a      	mov	r2, r9
 8008bd2:	f7ff fed2 	bl	800897a <memcpy>
 8008bd6:	89a3      	ldrh	r3, [r4, #12]
 8008bd8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008bdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008be0:	81a3      	strh	r3, [r4, #12]
 8008be2:	6126      	str	r6, [r4, #16]
 8008be4:	6165      	str	r5, [r4, #20]
 8008be6:	444e      	add	r6, r9
 8008be8:	eba5 0509 	sub.w	r5, r5, r9
 8008bec:	6026      	str	r6, [r4, #0]
 8008bee:	60a5      	str	r5, [r4, #8]
 8008bf0:	463e      	mov	r6, r7
 8008bf2:	42be      	cmp	r6, r7
 8008bf4:	d900      	bls.n	8008bf8 <__ssputs_r+0x70>
 8008bf6:	463e      	mov	r6, r7
 8008bf8:	6820      	ldr	r0, [r4, #0]
 8008bfa:	4632      	mov	r2, r6
 8008bfc:	4641      	mov	r1, r8
 8008bfe:	f000 fbbb 	bl	8009378 <memmove>
 8008c02:	68a3      	ldr	r3, [r4, #8]
 8008c04:	1b9b      	subs	r3, r3, r6
 8008c06:	60a3      	str	r3, [r4, #8]
 8008c08:	6823      	ldr	r3, [r4, #0]
 8008c0a:	4433      	add	r3, r6
 8008c0c:	6023      	str	r3, [r4, #0]
 8008c0e:	2000      	movs	r0, #0
 8008c10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c14:	462a      	mov	r2, r5
 8008c16:	f000 fbfb 	bl	8009410 <_realloc_r>
 8008c1a:	4606      	mov	r6, r0
 8008c1c:	2800      	cmp	r0, #0
 8008c1e:	d1e0      	bne.n	8008be2 <__ssputs_r+0x5a>
 8008c20:	6921      	ldr	r1, [r4, #16]
 8008c22:	4650      	mov	r0, sl
 8008c24:	f7ff feb8 	bl	8008998 <_free_r>
 8008c28:	230c      	movs	r3, #12
 8008c2a:	f8ca 3000 	str.w	r3, [sl]
 8008c2e:	89a3      	ldrh	r3, [r4, #12]
 8008c30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c34:	81a3      	strh	r3, [r4, #12]
 8008c36:	f04f 30ff 	mov.w	r0, #4294967295
 8008c3a:	e7e9      	b.n	8008c10 <__ssputs_r+0x88>

08008c3c <_svfiprintf_r>:
 8008c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c40:	4698      	mov	r8, r3
 8008c42:	898b      	ldrh	r3, [r1, #12]
 8008c44:	061b      	lsls	r3, r3, #24
 8008c46:	b09d      	sub	sp, #116	; 0x74
 8008c48:	4607      	mov	r7, r0
 8008c4a:	460d      	mov	r5, r1
 8008c4c:	4614      	mov	r4, r2
 8008c4e:	d50e      	bpl.n	8008c6e <_svfiprintf_r+0x32>
 8008c50:	690b      	ldr	r3, [r1, #16]
 8008c52:	b963      	cbnz	r3, 8008c6e <_svfiprintf_r+0x32>
 8008c54:	2140      	movs	r1, #64	; 0x40
 8008c56:	f7ff ff0b 	bl	8008a70 <_malloc_r>
 8008c5a:	6028      	str	r0, [r5, #0]
 8008c5c:	6128      	str	r0, [r5, #16]
 8008c5e:	b920      	cbnz	r0, 8008c6a <_svfiprintf_r+0x2e>
 8008c60:	230c      	movs	r3, #12
 8008c62:	603b      	str	r3, [r7, #0]
 8008c64:	f04f 30ff 	mov.w	r0, #4294967295
 8008c68:	e0d0      	b.n	8008e0c <_svfiprintf_r+0x1d0>
 8008c6a:	2340      	movs	r3, #64	; 0x40
 8008c6c:	616b      	str	r3, [r5, #20]
 8008c6e:	2300      	movs	r3, #0
 8008c70:	9309      	str	r3, [sp, #36]	; 0x24
 8008c72:	2320      	movs	r3, #32
 8008c74:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c78:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c7c:	2330      	movs	r3, #48	; 0x30
 8008c7e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008e24 <_svfiprintf_r+0x1e8>
 8008c82:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c86:	f04f 0901 	mov.w	r9, #1
 8008c8a:	4623      	mov	r3, r4
 8008c8c:	469a      	mov	sl, r3
 8008c8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c92:	b10a      	cbz	r2, 8008c98 <_svfiprintf_r+0x5c>
 8008c94:	2a25      	cmp	r2, #37	; 0x25
 8008c96:	d1f9      	bne.n	8008c8c <_svfiprintf_r+0x50>
 8008c98:	ebba 0b04 	subs.w	fp, sl, r4
 8008c9c:	d00b      	beq.n	8008cb6 <_svfiprintf_r+0x7a>
 8008c9e:	465b      	mov	r3, fp
 8008ca0:	4622      	mov	r2, r4
 8008ca2:	4629      	mov	r1, r5
 8008ca4:	4638      	mov	r0, r7
 8008ca6:	f7ff ff6f 	bl	8008b88 <__ssputs_r>
 8008caa:	3001      	adds	r0, #1
 8008cac:	f000 80a9 	beq.w	8008e02 <_svfiprintf_r+0x1c6>
 8008cb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008cb2:	445a      	add	r2, fp
 8008cb4:	9209      	str	r2, [sp, #36]	; 0x24
 8008cb6:	f89a 3000 	ldrb.w	r3, [sl]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	f000 80a1 	beq.w	8008e02 <_svfiprintf_r+0x1c6>
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	f04f 32ff 	mov.w	r2, #4294967295
 8008cc6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008cca:	f10a 0a01 	add.w	sl, sl, #1
 8008cce:	9304      	str	r3, [sp, #16]
 8008cd0:	9307      	str	r3, [sp, #28]
 8008cd2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008cd6:	931a      	str	r3, [sp, #104]	; 0x68
 8008cd8:	4654      	mov	r4, sl
 8008cda:	2205      	movs	r2, #5
 8008cdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ce0:	4850      	ldr	r0, [pc, #320]	; (8008e24 <_svfiprintf_r+0x1e8>)
 8008ce2:	f7f7 fa7d 	bl	80001e0 <memchr>
 8008ce6:	9a04      	ldr	r2, [sp, #16]
 8008ce8:	b9d8      	cbnz	r0, 8008d22 <_svfiprintf_r+0xe6>
 8008cea:	06d0      	lsls	r0, r2, #27
 8008cec:	bf44      	itt	mi
 8008cee:	2320      	movmi	r3, #32
 8008cf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008cf4:	0711      	lsls	r1, r2, #28
 8008cf6:	bf44      	itt	mi
 8008cf8:	232b      	movmi	r3, #43	; 0x2b
 8008cfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008cfe:	f89a 3000 	ldrb.w	r3, [sl]
 8008d02:	2b2a      	cmp	r3, #42	; 0x2a
 8008d04:	d015      	beq.n	8008d32 <_svfiprintf_r+0xf6>
 8008d06:	9a07      	ldr	r2, [sp, #28]
 8008d08:	4654      	mov	r4, sl
 8008d0a:	2000      	movs	r0, #0
 8008d0c:	f04f 0c0a 	mov.w	ip, #10
 8008d10:	4621      	mov	r1, r4
 8008d12:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d16:	3b30      	subs	r3, #48	; 0x30
 8008d18:	2b09      	cmp	r3, #9
 8008d1a:	d94d      	bls.n	8008db8 <_svfiprintf_r+0x17c>
 8008d1c:	b1b0      	cbz	r0, 8008d4c <_svfiprintf_r+0x110>
 8008d1e:	9207      	str	r2, [sp, #28]
 8008d20:	e014      	b.n	8008d4c <_svfiprintf_r+0x110>
 8008d22:	eba0 0308 	sub.w	r3, r0, r8
 8008d26:	fa09 f303 	lsl.w	r3, r9, r3
 8008d2a:	4313      	orrs	r3, r2
 8008d2c:	9304      	str	r3, [sp, #16]
 8008d2e:	46a2      	mov	sl, r4
 8008d30:	e7d2      	b.n	8008cd8 <_svfiprintf_r+0x9c>
 8008d32:	9b03      	ldr	r3, [sp, #12]
 8008d34:	1d19      	adds	r1, r3, #4
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	9103      	str	r1, [sp, #12]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	bfbb      	ittet	lt
 8008d3e:	425b      	neglt	r3, r3
 8008d40:	f042 0202 	orrlt.w	r2, r2, #2
 8008d44:	9307      	strge	r3, [sp, #28]
 8008d46:	9307      	strlt	r3, [sp, #28]
 8008d48:	bfb8      	it	lt
 8008d4a:	9204      	strlt	r2, [sp, #16]
 8008d4c:	7823      	ldrb	r3, [r4, #0]
 8008d4e:	2b2e      	cmp	r3, #46	; 0x2e
 8008d50:	d10c      	bne.n	8008d6c <_svfiprintf_r+0x130>
 8008d52:	7863      	ldrb	r3, [r4, #1]
 8008d54:	2b2a      	cmp	r3, #42	; 0x2a
 8008d56:	d134      	bne.n	8008dc2 <_svfiprintf_r+0x186>
 8008d58:	9b03      	ldr	r3, [sp, #12]
 8008d5a:	1d1a      	adds	r2, r3, #4
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	9203      	str	r2, [sp, #12]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	bfb8      	it	lt
 8008d64:	f04f 33ff 	movlt.w	r3, #4294967295
 8008d68:	3402      	adds	r4, #2
 8008d6a:	9305      	str	r3, [sp, #20]
 8008d6c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008e34 <_svfiprintf_r+0x1f8>
 8008d70:	7821      	ldrb	r1, [r4, #0]
 8008d72:	2203      	movs	r2, #3
 8008d74:	4650      	mov	r0, sl
 8008d76:	f7f7 fa33 	bl	80001e0 <memchr>
 8008d7a:	b138      	cbz	r0, 8008d8c <_svfiprintf_r+0x150>
 8008d7c:	9b04      	ldr	r3, [sp, #16]
 8008d7e:	eba0 000a 	sub.w	r0, r0, sl
 8008d82:	2240      	movs	r2, #64	; 0x40
 8008d84:	4082      	lsls	r2, r0
 8008d86:	4313      	orrs	r3, r2
 8008d88:	3401      	adds	r4, #1
 8008d8a:	9304      	str	r3, [sp, #16]
 8008d8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d90:	4825      	ldr	r0, [pc, #148]	; (8008e28 <_svfiprintf_r+0x1ec>)
 8008d92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d96:	2206      	movs	r2, #6
 8008d98:	f7f7 fa22 	bl	80001e0 <memchr>
 8008d9c:	2800      	cmp	r0, #0
 8008d9e:	d038      	beq.n	8008e12 <_svfiprintf_r+0x1d6>
 8008da0:	4b22      	ldr	r3, [pc, #136]	; (8008e2c <_svfiprintf_r+0x1f0>)
 8008da2:	bb1b      	cbnz	r3, 8008dec <_svfiprintf_r+0x1b0>
 8008da4:	9b03      	ldr	r3, [sp, #12]
 8008da6:	3307      	adds	r3, #7
 8008da8:	f023 0307 	bic.w	r3, r3, #7
 8008dac:	3308      	adds	r3, #8
 8008dae:	9303      	str	r3, [sp, #12]
 8008db0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008db2:	4433      	add	r3, r6
 8008db4:	9309      	str	r3, [sp, #36]	; 0x24
 8008db6:	e768      	b.n	8008c8a <_svfiprintf_r+0x4e>
 8008db8:	fb0c 3202 	mla	r2, ip, r2, r3
 8008dbc:	460c      	mov	r4, r1
 8008dbe:	2001      	movs	r0, #1
 8008dc0:	e7a6      	b.n	8008d10 <_svfiprintf_r+0xd4>
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	3401      	adds	r4, #1
 8008dc6:	9305      	str	r3, [sp, #20]
 8008dc8:	4619      	mov	r1, r3
 8008dca:	f04f 0c0a 	mov.w	ip, #10
 8008dce:	4620      	mov	r0, r4
 8008dd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008dd4:	3a30      	subs	r2, #48	; 0x30
 8008dd6:	2a09      	cmp	r2, #9
 8008dd8:	d903      	bls.n	8008de2 <_svfiprintf_r+0x1a6>
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d0c6      	beq.n	8008d6c <_svfiprintf_r+0x130>
 8008dde:	9105      	str	r1, [sp, #20]
 8008de0:	e7c4      	b.n	8008d6c <_svfiprintf_r+0x130>
 8008de2:	fb0c 2101 	mla	r1, ip, r1, r2
 8008de6:	4604      	mov	r4, r0
 8008de8:	2301      	movs	r3, #1
 8008dea:	e7f0      	b.n	8008dce <_svfiprintf_r+0x192>
 8008dec:	ab03      	add	r3, sp, #12
 8008dee:	9300      	str	r3, [sp, #0]
 8008df0:	462a      	mov	r2, r5
 8008df2:	4b0f      	ldr	r3, [pc, #60]	; (8008e30 <_svfiprintf_r+0x1f4>)
 8008df4:	a904      	add	r1, sp, #16
 8008df6:	4638      	mov	r0, r7
 8008df8:	f3af 8000 	nop.w
 8008dfc:	1c42      	adds	r2, r0, #1
 8008dfe:	4606      	mov	r6, r0
 8008e00:	d1d6      	bne.n	8008db0 <_svfiprintf_r+0x174>
 8008e02:	89ab      	ldrh	r3, [r5, #12]
 8008e04:	065b      	lsls	r3, r3, #25
 8008e06:	f53f af2d 	bmi.w	8008c64 <_svfiprintf_r+0x28>
 8008e0a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e0c:	b01d      	add	sp, #116	; 0x74
 8008e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e12:	ab03      	add	r3, sp, #12
 8008e14:	9300      	str	r3, [sp, #0]
 8008e16:	462a      	mov	r2, r5
 8008e18:	4b05      	ldr	r3, [pc, #20]	; (8008e30 <_svfiprintf_r+0x1f4>)
 8008e1a:	a904      	add	r1, sp, #16
 8008e1c:	4638      	mov	r0, r7
 8008e1e:	f000 f879 	bl	8008f14 <_printf_i>
 8008e22:	e7eb      	b.n	8008dfc <_svfiprintf_r+0x1c0>
 8008e24:	080095f0 	.word	0x080095f0
 8008e28:	080095fa 	.word	0x080095fa
 8008e2c:	00000000 	.word	0x00000000
 8008e30:	08008b89 	.word	0x08008b89
 8008e34:	080095f6 	.word	0x080095f6

08008e38 <_printf_common>:
 8008e38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e3c:	4616      	mov	r6, r2
 8008e3e:	4699      	mov	r9, r3
 8008e40:	688a      	ldr	r2, [r1, #8]
 8008e42:	690b      	ldr	r3, [r1, #16]
 8008e44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	bfb8      	it	lt
 8008e4c:	4613      	movlt	r3, r2
 8008e4e:	6033      	str	r3, [r6, #0]
 8008e50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008e54:	4607      	mov	r7, r0
 8008e56:	460c      	mov	r4, r1
 8008e58:	b10a      	cbz	r2, 8008e5e <_printf_common+0x26>
 8008e5a:	3301      	adds	r3, #1
 8008e5c:	6033      	str	r3, [r6, #0]
 8008e5e:	6823      	ldr	r3, [r4, #0]
 8008e60:	0699      	lsls	r1, r3, #26
 8008e62:	bf42      	ittt	mi
 8008e64:	6833      	ldrmi	r3, [r6, #0]
 8008e66:	3302      	addmi	r3, #2
 8008e68:	6033      	strmi	r3, [r6, #0]
 8008e6a:	6825      	ldr	r5, [r4, #0]
 8008e6c:	f015 0506 	ands.w	r5, r5, #6
 8008e70:	d106      	bne.n	8008e80 <_printf_common+0x48>
 8008e72:	f104 0a19 	add.w	sl, r4, #25
 8008e76:	68e3      	ldr	r3, [r4, #12]
 8008e78:	6832      	ldr	r2, [r6, #0]
 8008e7a:	1a9b      	subs	r3, r3, r2
 8008e7c:	42ab      	cmp	r3, r5
 8008e7e:	dc26      	bgt.n	8008ece <_printf_common+0x96>
 8008e80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008e84:	1e13      	subs	r3, r2, #0
 8008e86:	6822      	ldr	r2, [r4, #0]
 8008e88:	bf18      	it	ne
 8008e8a:	2301      	movne	r3, #1
 8008e8c:	0692      	lsls	r2, r2, #26
 8008e8e:	d42b      	bmi.n	8008ee8 <_printf_common+0xb0>
 8008e90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008e94:	4649      	mov	r1, r9
 8008e96:	4638      	mov	r0, r7
 8008e98:	47c0      	blx	r8
 8008e9a:	3001      	adds	r0, #1
 8008e9c:	d01e      	beq.n	8008edc <_printf_common+0xa4>
 8008e9e:	6823      	ldr	r3, [r4, #0]
 8008ea0:	6922      	ldr	r2, [r4, #16]
 8008ea2:	f003 0306 	and.w	r3, r3, #6
 8008ea6:	2b04      	cmp	r3, #4
 8008ea8:	bf02      	ittt	eq
 8008eaa:	68e5      	ldreq	r5, [r4, #12]
 8008eac:	6833      	ldreq	r3, [r6, #0]
 8008eae:	1aed      	subeq	r5, r5, r3
 8008eb0:	68a3      	ldr	r3, [r4, #8]
 8008eb2:	bf0c      	ite	eq
 8008eb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008eb8:	2500      	movne	r5, #0
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	bfc4      	itt	gt
 8008ebe:	1a9b      	subgt	r3, r3, r2
 8008ec0:	18ed      	addgt	r5, r5, r3
 8008ec2:	2600      	movs	r6, #0
 8008ec4:	341a      	adds	r4, #26
 8008ec6:	42b5      	cmp	r5, r6
 8008ec8:	d11a      	bne.n	8008f00 <_printf_common+0xc8>
 8008eca:	2000      	movs	r0, #0
 8008ecc:	e008      	b.n	8008ee0 <_printf_common+0xa8>
 8008ece:	2301      	movs	r3, #1
 8008ed0:	4652      	mov	r2, sl
 8008ed2:	4649      	mov	r1, r9
 8008ed4:	4638      	mov	r0, r7
 8008ed6:	47c0      	blx	r8
 8008ed8:	3001      	adds	r0, #1
 8008eda:	d103      	bne.n	8008ee4 <_printf_common+0xac>
 8008edc:	f04f 30ff 	mov.w	r0, #4294967295
 8008ee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ee4:	3501      	adds	r5, #1
 8008ee6:	e7c6      	b.n	8008e76 <_printf_common+0x3e>
 8008ee8:	18e1      	adds	r1, r4, r3
 8008eea:	1c5a      	adds	r2, r3, #1
 8008eec:	2030      	movs	r0, #48	; 0x30
 8008eee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008ef2:	4422      	add	r2, r4
 8008ef4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008ef8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008efc:	3302      	adds	r3, #2
 8008efe:	e7c7      	b.n	8008e90 <_printf_common+0x58>
 8008f00:	2301      	movs	r3, #1
 8008f02:	4622      	mov	r2, r4
 8008f04:	4649      	mov	r1, r9
 8008f06:	4638      	mov	r0, r7
 8008f08:	47c0      	blx	r8
 8008f0a:	3001      	adds	r0, #1
 8008f0c:	d0e6      	beq.n	8008edc <_printf_common+0xa4>
 8008f0e:	3601      	adds	r6, #1
 8008f10:	e7d9      	b.n	8008ec6 <_printf_common+0x8e>
	...

08008f14 <_printf_i>:
 8008f14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f18:	7e0f      	ldrb	r7, [r1, #24]
 8008f1a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008f1c:	2f78      	cmp	r7, #120	; 0x78
 8008f1e:	4691      	mov	r9, r2
 8008f20:	4680      	mov	r8, r0
 8008f22:	460c      	mov	r4, r1
 8008f24:	469a      	mov	sl, r3
 8008f26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008f2a:	d807      	bhi.n	8008f3c <_printf_i+0x28>
 8008f2c:	2f62      	cmp	r7, #98	; 0x62
 8008f2e:	d80a      	bhi.n	8008f46 <_printf_i+0x32>
 8008f30:	2f00      	cmp	r7, #0
 8008f32:	f000 80d4 	beq.w	80090de <_printf_i+0x1ca>
 8008f36:	2f58      	cmp	r7, #88	; 0x58
 8008f38:	f000 80c0 	beq.w	80090bc <_printf_i+0x1a8>
 8008f3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008f44:	e03a      	b.n	8008fbc <_printf_i+0xa8>
 8008f46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008f4a:	2b15      	cmp	r3, #21
 8008f4c:	d8f6      	bhi.n	8008f3c <_printf_i+0x28>
 8008f4e:	a101      	add	r1, pc, #4	; (adr r1, 8008f54 <_printf_i+0x40>)
 8008f50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008f54:	08008fad 	.word	0x08008fad
 8008f58:	08008fc1 	.word	0x08008fc1
 8008f5c:	08008f3d 	.word	0x08008f3d
 8008f60:	08008f3d 	.word	0x08008f3d
 8008f64:	08008f3d 	.word	0x08008f3d
 8008f68:	08008f3d 	.word	0x08008f3d
 8008f6c:	08008fc1 	.word	0x08008fc1
 8008f70:	08008f3d 	.word	0x08008f3d
 8008f74:	08008f3d 	.word	0x08008f3d
 8008f78:	08008f3d 	.word	0x08008f3d
 8008f7c:	08008f3d 	.word	0x08008f3d
 8008f80:	080090c5 	.word	0x080090c5
 8008f84:	08008fed 	.word	0x08008fed
 8008f88:	0800907f 	.word	0x0800907f
 8008f8c:	08008f3d 	.word	0x08008f3d
 8008f90:	08008f3d 	.word	0x08008f3d
 8008f94:	080090e7 	.word	0x080090e7
 8008f98:	08008f3d 	.word	0x08008f3d
 8008f9c:	08008fed 	.word	0x08008fed
 8008fa0:	08008f3d 	.word	0x08008f3d
 8008fa4:	08008f3d 	.word	0x08008f3d
 8008fa8:	08009087 	.word	0x08009087
 8008fac:	682b      	ldr	r3, [r5, #0]
 8008fae:	1d1a      	adds	r2, r3, #4
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	602a      	str	r2, [r5, #0]
 8008fb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008fb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	e09f      	b.n	8009100 <_printf_i+0x1ec>
 8008fc0:	6820      	ldr	r0, [r4, #0]
 8008fc2:	682b      	ldr	r3, [r5, #0]
 8008fc4:	0607      	lsls	r7, r0, #24
 8008fc6:	f103 0104 	add.w	r1, r3, #4
 8008fca:	6029      	str	r1, [r5, #0]
 8008fcc:	d501      	bpl.n	8008fd2 <_printf_i+0xbe>
 8008fce:	681e      	ldr	r6, [r3, #0]
 8008fd0:	e003      	b.n	8008fda <_printf_i+0xc6>
 8008fd2:	0646      	lsls	r6, r0, #25
 8008fd4:	d5fb      	bpl.n	8008fce <_printf_i+0xba>
 8008fd6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008fda:	2e00      	cmp	r6, #0
 8008fdc:	da03      	bge.n	8008fe6 <_printf_i+0xd2>
 8008fde:	232d      	movs	r3, #45	; 0x2d
 8008fe0:	4276      	negs	r6, r6
 8008fe2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fe6:	485a      	ldr	r0, [pc, #360]	; (8009150 <_printf_i+0x23c>)
 8008fe8:	230a      	movs	r3, #10
 8008fea:	e012      	b.n	8009012 <_printf_i+0xfe>
 8008fec:	682b      	ldr	r3, [r5, #0]
 8008fee:	6820      	ldr	r0, [r4, #0]
 8008ff0:	1d19      	adds	r1, r3, #4
 8008ff2:	6029      	str	r1, [r5, #0]
 8008ff4:	0605      	lsls	r5, r0, #24
 8008ff6:	d501      	bpl.n	8008ffc <_printf_i+0xe8>
 8008ff8:	681e      	ldr	r6, [r3, #0]
 8008ffa:	e002      	b.n	8009002 <_printf_i+0xee>
 8008ffc:	0641      	lsls	r1, r0, #25
 8008ffe:	d5fb      	bpl.n	8008ff8 <_printf_i+0xe4>
 8009000:	881e      	ldrh	r6, [r3, #0]
 8009002:	4853      	ldr	r0, [pc, #332]	; (8009150 <_printf_i+0x23c>)
 8009004:	2f6f      	cmp	r7, #111	; 0x6f
 8009006:	bf0c      	ite	eq
 8009008:	2308      	moveq	r3, #8
 800900a:	230a      	movne	r3, #10
 800900c:	2100      	movs	r1, #0
 800900e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009012:	6865      	ldr	r5, [r4, #4]
 8009014:	60a5      	str	r5, [r4, #8]
 8009016:	2d00      	cmp	r5, #0
 8009018:	bfa2      	ittt	ge
 800901a:	6821      	ldrge	r1, [r4, #0]
 800901c:	f021 0104 	bicge.w	r1, r1, #4
 8009020:	6021      	strge	r1, [r4, #0]
 8009022:	b90e      	cbnz	r6, 8009028 <_printf_i+0x114>
 8009024:	2d00      	cmp	r5, #0
 8009026:	d04b      	beq.n	80090c0 <_printf_i+0x1ac>
 8009028:	4615      	mov	r5, r2
 800902a:	fbb6 f1f3 	udiv	r1, r6, r3
 800902e:	fb03 6711 	mls	r7, r3, r1, r6
 8009032:	5dc7      	ldrb	r7, [r0, r7]
 8009034:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009038:	4637      	mov	r7, r6
 800903a:	42bb      	cmp	r3, r7
 800903c:	460e      	mov	r6, r1
 800903e:	d9f4      	bls.n	800902a <_printf_i+0x116>
 8009040:	2b08      	cmp	r3, #8
 8009042:	d10b      	bne.n	800905c <_printf_i+0x148>
 8009044:	6823      	ldr	r3, [r4, #0]
 8009046:	07de      	lsls	r6, r3, #31
 8009048:	d508      	bpl.n	800905c <_printf_i+0x148>
 800904a:	6923      	ldr	r3, [r4, #16]
 800904c:	6861      	ldr	r1, [r4, #4]
 800904e:	4299      	cmp	r1, r3
 8009050:	bfde      	ittt	le
 8009052:	2330      	movle	r3, #48	; 0x30
 8009054:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009058:	f105 35ff 	addle.w	r5, r5, #4294967295
 800905c:	1b52      	subs	r2, r2, r5
 800905e:	6122      	str	r2, [r4, #16]
 8009060:	f8cd a000 	str.w	sl, [sp]
 8009064:	464b      	mov	r3, r9
 8009066:	aa03      	add	r2, sp, #12
 8009068:	4621      	mov	r1, r4
 800906a:	4640      	mov	r0, r8
 800906c:	f7ff fee4 	bl	8008e38 <_printf_common>
 8009070:	3001      	adds	r0, #1
 8009072:	d14a      	bne.n	800910a <_printf_i+0x1f6>
 8009074:	f04f 30ff 	mov.w	r0, #4294967295
 8009078:	b004      	add	sp, #16
 800907a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800907e:	6823      	ldr	r3, [r4, #0]
 8009080:	f043 0320 	orr.w	r3, r3, #32
 8009084:	6023      	str	r3, [r4, #0]
 8009086:	4833      	ldr	r0, [pc, #204]	; (8009154 <_printf_i+0x240>)
 8009088:	2778      	movs	r7, #120	; 0x78
 800908a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800908e:	6823      	ldr	r3, [r4, #0]
 8009090:	6829      	ldr	r1, [r5, #0]
 8009092:	061f      	lsls	r7, r3, #24
 8009094:	f851 6b04 	ldr.w	r6, [r1], #4
 8009098:	d402      	bmi.n	80090a0 <_printf_i+0x18c>
 800909a:	065f      	lsls	r7, r3, #25
 800909c:	bf48      	it	mi
 800909e:	b2b6      	uxthmi	r6, r6
 80090a0:	07df      	lsls	r7, r3, #31
 80090a2:	bf48      	it	mi
 80090a4:	f043 0320 	orrmi.w	r3, r3, #32
 80090a8:	6029      	str	r1, [r5, #0]
 80090aa:	bf48      	it	mi
 80090ac:	6023      	strmi	r3, [r4, #0]
 80090ae:	b91e      	cbnz	r6, 80090b8 <_printf_i+0x1a4>
 80090b0:	6823      	ldr	r3, [r4, #0]
 80090b2:	f023 0320 	bic.w	r3, r3, #32
 80090b6:	6023      	str	r3, [r4, #0]
 80090b8:	2310      	movs	r3, #16
 80090ba:	e7a7      	b.n	800900c <_printf_i+0xf8>
 80090bc:	4824      	ldr	r0, [pc, #144]	; (8009150 <_printf_i+0x23c>)
 80090be:	e7e4      	b.n	800908a <_printf_i+0x176>
 80090c0:	4615      	mov	r5, r2
 80090c2:	e7bd      	b.n	8009040 <_printf_i+0x12c>
 80090c4:	682b      	ldr	r3, [r5, #0]
 80090c6:	6826      	ldr	r6, [r4, #0]
 80090c8:	6961      	ldr	r1, [r4, #20]
 80090ca:	1d18      	adds	r0, r3, #4
 80090cc:	6028      	str	r0, [r5, #0]
 80090ce:	0635      	lsls	r5, r6, #24
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	d501      	bpl.n	80090d8 <_printf_i+0x1c4>
 80090d4:	6019      	str	r1, [r3, #0]
 80090d6:	e002      	b.n	80090de <_printf_i+0x1ca>
 80090d8:	0670      	lsls	r0, r6, #25
 80090da:	d5fb      	bpl.n	80090d4 <_printf_i+0x1c0>
 80090dc:	8019      	strh	r1, [r3, #0]
 80090de:	2300      	movs	r3, #0
 80090e0:	6123      	str	r3, [r4, #16]
 80090e2:	4615      	mov	r5, r2
 80090e4:	e7bc      	b.n	8009060 <_printf_i+0x14c>
 80090e6:	682b      	ldr	r3, [r5, #0]
 80090e8:	1d1a      	adds	r2, r3, #4
 80090ea:	602a      	str	r2, [r5, #0]
 80090ec:	681d      	ldr	r5, [r3, #0]
 80090ee:	6862      	ldr	r2, [r4, #4]
 80090f0:	2100      	movs	r1, #0
 80090f2:	4628      	mov	r0, r5
 80090f4:	f7f7 f874 	bl	80001e0 <memchr>
 80090f8:	b108      	cbz	r0, 80090fe <_printf_i+0x1ea>
 80090fa:	1b40      	subs	r0, r0, r5
 80090fc:	6060      	str	r0, [r4, #4]
 80090fe:	6863      	ldr	r3, [r4, #4]
 8009100:	6123      	str	r3, [r4, #16]
 8009102:	2300      	movs	r3, #0
 8009104:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009108:	e7aa      	b.n	8009060 <_printf_i+0x14c>
 800910a:	6923      	ldr	r3, [r4, #16]
 800910c:	462a      	mov	r2, r5
 800910e:	4649      	mov	r1, r9
 8009110:	4640      	mov	r0, r8
 8009112:	47d0      	blx	sl
 8009114:	3001      	adds	r0, #1
 8009116:	d0ad      	beq.n	8009074 <_printf_i+0x160>
 8009118:	6823      	ldr	r3, [r4, #0]
 800911a:	079b      	lsls	r3, r3, #30
 800911c:	d413      	bmi.n	8009146 <_printf_i+0x232>
 800911e:	68e0      	ldr	r0, [r4, #12]
 8009120:	9b03      	ldr	r3, [sp, #12]
 8009122:	4298      	cmp	r0, r3
 8009124:	bfb8      	it	lt
 8009126:	4618      	movlt	r0, r3
 8009128:	e7a6      	b.n	8009078 <_printf_i+0x164>
 800912a:	2301      	movs	r3, #1
 800912c:	4632      	mov	r2, r6
 800912e:	4649      	mov	r1, r9
 8009130:	4640      	mov	r0, r8
 8009132:	47d0      	blx	sl
 8009134:	3001      	adds	r0, #1
 8009136:	d09d      	beq.n	8009074 <_printf_i+0x160>
 8009138:	3501      	adds	r5, #1
 800913a:	68e3      	ldr	r3, [r4, #12]
 800913c:	9903      	ldr	r1, [sp, #12]
 800913e:	1a5b      	subs	r3, r3, r1
 8009140:	42ab      	cmp	r3, r5
 8009142:	dcf2      	bgt.n	800912a <_printf_i+0x216>
 8009144:	e7eb      	b.n	800911e <_printf_i+0x20a>
 8009146:	2500      	movs	r5, #0
 8009148:	f104 0619 	add.w	r6, r4, #25
 800914c:	e7f5      	b.n	800913a <_printf_i+0x226>
 800914e:	bf00      	nop
 8009150:	08009601 	.word	0x08009601
 8009154:	08009612 	.word	0x08009612

08009158 <__sflush_r>:
 8009158:	898a      	ldrh	r2, [r1, #12]
 800915a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800915e:	4605      	mov	r5, r0
 8009160:	0710      	lsls	r0, r2, #28
 8009162:	460c      	mov	r4, r1
 8009164:	d458      	bmi.n	8009218 <__sflush_r+0xc0>
 8009166:	684b      	ldr	r3, [r1, #4]
 8009168:	2b00      	cmp	r3, #0
 800916a:	dc05      	bgt.n	8009178 <__sflush_r+0x20>
 800916c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800916e:	2b00      	cmp	r3, #0
 8009170:	dc02      	bgt.n	8009178 <__sflush_r+0x20>
 8009172:	2000      	movs	r0, #0
 8009174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009178:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800917a:	2e00      	cmp	r6, #0
 800917c:	d0f9      	beq.n	8009172 <__sflush_r+0x1a>
 800917e:	2300      	movs	r3, #0
 8009180:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009184:	682f      	ldr	r7, [r5, #0]
 8009186:	6a21      	ldr	r1, [r4, #32]
 8009188:	602b      	str	r3, [r5, #0]
 800918a:	d032      	beq.n	80091f2 <__sflush_r+0x9a>
 800918c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800918e:	89a3      	ldrh	r3, [r4, #12]
 8009190:	075a      	lsls	r2, r3, #29
 8009192:	d505      	bpl.n	80091a0 <__sflush_r+0x48>
 8009194:	6863      	ldr	r3, [r4, #4]
 8009196:	1ac0      	subs	r0, r0, r3
 8009198:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800919a:	b10b      	cbz	r3, 80091a0 <__sflush_r+0x48>
 800919c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800919e:	1ac0      	subs	r0, r0, r3
 80091a0:	2300      	movs	r3, #0
 80091a2:	4602      	mov	r2, r0
 80091a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80091a6:	6a21      	ldr	r1, [r4, #32]
 80091a8:	4628      	mov	r0, r5
 80091aa:	47b0      	blx	r6
 80091ac:	1c43      	adds	r3, r0, #1
 80091ae:	89a3      	ldrh	r3, [r4, #12]
 80091b0:	d106      	bne.n	80091c0 <__sflush_r+0x68>
 80091b2:	6829      	ldr	r1, [r5, #0]
 80091b4:	291d      	cmp	r1, #29
 80091b6:	d82b      	bhi.n	8009210 <__sflush_r+0xb8>
 80091b8:	4a29      	ldr	r2, [pc, #164]	; (8009260 <__sflush_r+0x108>)
 80091ba:	410a      	asrs	r2, r1
 80091bc:	07d6      	lsls	r6, r2, #31
 80091be:	d427      	bmi.n	8009210 <__sflush_r+0xb8>
 80091c0:	2200      	movs	r2, #0
 80091c2:	6062      	str	r2, [r4, #4]
 80091c4:	04d9      	lsls	r1, r3, #19
 80091c6:	6922      	ldr	r2, [r4, #16]
 80091c8:	6022      	str	r2, [r4, #0]
 80091ca:	d504      	bpl.n	80091d6 <__sflush_r+0x7e>
 80091cc:	1c42      	adds	r2, r0, #1
 80091ce:	d101      	bne.n	80091d4 <__sflush_r+0x7c>
 80091d0:	682b      	ldr	r3, [r5, #0]
 80091d2:	b903      	cbnz	r3, 80091d6 <__sflush_r+0x7e>
 80091d4:	6560      	str	r0, [r4, #84]	; 0x54
 80091d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80091d8:	602f      	str	r7, [r5, #0]
 80091da:	2900      	cmp	r1, #0
 80091dc:	d0c9      	beq.n	8009172 <__sflush_r+0x1a>
 80091de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80091e2:	4299      	cmp	r1, r3
 80091e4:	d002      	beq.n	80091ec <__sflush_r+0x94>
 80091e6:	4628      	mov	r0, r5
 80091e8:	f7ff fbd6 	bl	8008998 <_free_r>
 80091ec:	2000      	movs	r0, #0
 80091ee:	6360      	str	r0, [r4, #52]	; 0x34
 80091f0:	e7c0      	b.n	8009174 <__sflush_r+0x1c>
 80091f2:	2301      	movs	r3, #1
 80091f4:	4628      	mov	r0, r5
 80091f6:	47b0      	blx	r6
 80091f8:	1c41      	adds	r1, r0, #1
 80091fa:	d1c8      	bne.n	800918e <__sflush_r+0x36>
 80091fc:	682b      	ldr	r3, [r5, #0]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d0c5      	beq.n	800918e <__sflush_r+0x36>
 8009202:	2b1d      	cmp	r3, #29
 8009204:	d001      	beq.n	800920a <__sflush_r+0xb2>
 8009206:	2b16      	cmp	r3, #22
 8009208:	d101      	bne.n	800920e <__sflush_r+0xb6>
 800920a:	602f      	str	r7, [r5, #0]
 800920c:	e7b1      	b.n	8009172 <__sflush_r+0x1a>
 800920e:	89a3      	ldrh	r3, [r4, #12]
 8009210:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009214:	81a3      	strh	r3, [r4, #12]
 8009216:	e7ad      	b.n	8009174 <__sflush_r+0x1c>
 8009218:	690f      	ldr	r7, [r1, #16]
 800921a:	2f00      	cmp	r7, #0
 800921c:	d0a9      	beq.n	8009172 <__sflush_r+0x1a>
 800921e:	0793      	lsls	r3, r2, #30
 8009220:	680e      	ldr	r6, [r1, #0]
 8009222:	bf08      	it	eq
 8009224:	694b      	ldreq	r3, [r1, #20]
 8009226:	600f      	str	r7, [r1, #0]
 8009228:	bf18      	it	ne
 800922a:	2300      	movne	r3, #0
 800922c:	eba6 0807 	sub.w	r8, r6, r7
 8009230:	608b      	str	r3, [r1, #8]
 8009232:	f1b8 0f00 	cmp.w	r8, #0
 8009236:	dd9c      	ble.n	8009172 <__sflush_r+0x1a>
 8009238:	6a21      	ldr	r1, [r4, #32]
 800923a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800923c:	4643      	mov	r3, r8
 800923e:	463a      	mov	r2, r7
 8009240:	4628      	mov	r0, r5
 8009242:	47b0      	blx	r6
 8009244:	2800      	cmp	r0, #0
 8009246:	dc06      	bgt.n	8009256 <__sflush_r+0xfe>
 8009248:	89a3      	ldrh	r3, [r4, #12]
 800924a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800924e:	81a3      	strh	r3, [r4, #12]
 8009250:	f04f 30ff 	mov.w	r0, #4294967295
 8009254:	e78e      	b.n	8009174 <__sflush_r+0x1c>
 8009256:	4407      	add	r7, r0
 8009258:	eba8 0800 	sub.w	r8, r8, r0
 800925c:	e7e9      	b.n	8009232 <__sflush_r+0xda>
 800925e:	bf00      	nop
 8009260:	dfbffffe 	.word	0xdfbffffe

08009264 <_fflush_r>:
 8009264:	b538      	push	{r3, r4, r5, lr}
 8009266:	690b      	ldr	r3, [r1, #16]
 8009268:	4605      	mov	r5, r0
 800926a:	460c      	mov	r4, r1
 800926c:	b913      	cbnz	r3, 8009274 <_fflush_r+0x10>
 800926e:	2500      	movs	r5, #0
 8009270:	4628      	mov	r0, r5
 8009272:	bd38      	pop	{r3, r4, r5, pc}
 8009274:	b118      	cbz	r0, 800927e <_fflush_r+0x1a>
 8009276:	6a03      	ldr	r3, [r0, #32]
 8009278:	b90b      	cbnz	r3, 800927e <_fflush_r+0x1a>
 800927a:	f7ff f923 	bl	80084c4 <__sinit>
 800927e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d0f3      	beq.n	800926e <_fflush_r+0xa>
 8009286:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009288:	07d0      	lsls	r0, r2, #31
 800928a:	d404      	bmi.n	8009296 <_fflush_r+0x32>
 800928c:	0599      	lsls	r1, r3, #22
 800928e:	d402      	bmi.n	8009296 <_fflush_r+0x32>
 8009290:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009292:	f7ff fb70 	bl	8008976 <__retarget_lock_acquire_recursive>
 8009296:	4628      	mov	r0, r5
 8009298:	4621      	mov	r1, r4
 800929a:	f7ff ff5d 	bl	8009158 <__sflush_r>
 800929e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80092a0:	07da      	lsls	r2, r3, #31
 80092a2:	4605      	mov	r5, r0
 80092a4:	d4e4      	bmi.n	8009270 <_fflush_r+0xc>
 80092a6:	89a3      	ldrh	r3, [r4, #12]
 80092a8:	059b      	lsls	r3, r3, #22
 80092aa:	d4e1      	bmi.n	8009270 <_fflush_r+0xc>
 80092ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80092ae:	f7ff fb63 	bl	8008978 <__retarget_lock_release_recursive>
 80092b2:	e7dd      	b.n	8009270 <_fflush_r+0xc>

080092b4 <__swhatbuf_r>:
 80092b4:	b570      	push	{r4, r5, r6, lr}
 80092b6:	460c      	mov	r4, r1
 80092b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092bc:	2900      	cmp	r1, #0
 80092be:	b096      	sub	sp, #88	; 0x58
 80092c0:	4615      	mov	r5, r2
 80092c2:	461e      	mov	r6, r3
 80092c4:	da0d      	bge.n	80092e2 <__swhatbuf_r+0x2e>
 80092c6:	89a3      	ldrh	r3, [r4, #12]
 80092c8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80092cc:	f04f 0100 	mov.w	r1, #0
 80092d0:	bf0c      	ite	eq
 80092d2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80092d6:	2340      	movne	r3, #64	; 0x40
 80092d8:	2000      	movs	r0, #0
 80092da:	6031      	str	r1, [r6, #0]
 80092dc:	602b      	str	r3, [r5, #0]
 80092de:	b016      	add	sp, #88	; 0x58
 80092e0:	bd70      	pop	{r4, r5, r6, pc}
 80092e2:	466a      	mov	r2, sp
 80092e4:	f000 f862 	bl	80093ac <_fstat_r>
 80092e8:	2800      	cmp	r0, #0
 80092ea:	dbec      	blt.n	80092c6 <__swhatbuf_r+0x12>
 80092ec:	9901      	ldr	r1, [sp, #4]
 80092ee:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80092f2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80092f6:	4259      	negs	r1, r3
 80092f8:	4159      	adcs	r1, r3
 80092fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092fe:	e7eb      	b.n	80092d8 <__swhatbuf_r+0x24>

08009300 <__smakebuf_r>:
 8009300:	898b      	ldrh	r3, [r1, #12]
 8009302:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009304:	079d      	lsls	r5, r3, #30
 8009306:	4606      	mov	r6, r0
 8009308:	460c      	mov	r4, r1
 800930a:	d507      	bpl.n	800931c <__smakebuf_r+0x1c>
 800930c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009310:	6023      	str	r3, [r4, #0]
 8009312:	6123      	str	r3, [r4, #16]
 8009314:	2301      	movs	r3, #1
 8009316:	6163      	str	r3, [r4, #20]
 8009318:	b002      	add	sp, #8
 800931a:	bd70      	pop	{r4, r5, r6, pc}
 800931c:	ab01      	add	r3, sp, #4
 800931e:	466a      	mov	r2, sp
 8009320:	f7ff ffc8 	bl	80092b4 <__swhatbuf_r>
 8009324:	9900      	ldr	r1, [sp, #0]
 8009326:	4605      	mov	r5, r0
 8009328:	4630      	mov	r0, r6
 800932a:	f7ff fba1 	bl	8008a70 <_malloc_r>
 800932e:	b948      	cbnz	r0, 8009344 <__smakebuf_r+0x44>
 8009330:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009334:	059a      	lsls	r2, r3, #22
 8009336:	d4ef      	bmi.n	8009318 <__smakebuf_r+0x18>
 8009338:	f023 0303 	bic.w	r3, r3, #3
 800933c:	f043 0302 	orr.w	r3, r3, #2
 8009340:	81a3      	strh	r3, [r4, #12]
 8009342:	e7e3      	b.n	800930c <__smakebuf_r+0xc>
 8009344:	89a3      	ldrh	r3, [r4, #12]
 8009346:	6020      	str	r0, [r4, #0]
 8009348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800934c:	81a3      	strh	r3, [r4, #12]
 800934e:	9b00      	ldr	r3, [sp, #0]
 8009350:	6163      	str	r3, [r4, #20]
 8009352:	9b01      	ldr	r3, [sp, #4]
 8009354:	6120      	str	r0, [r4, #16]
 8009356:	b15b      	cbz	r3, 8009370 <__smakebuf_r+0x70>
 8009358:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800935c:	4630      	mov	r0, r6
 800935e:	f000 f837 	bl	80093d0 <_isatty_r>
 8009362:	b128      	cbz	r0, 8009370 <__smakebuf_r+0x70>
 8009364:	89a3      	ldrh	r3, [r4, #12]
 8009366:	f023 0303 	bic.w	r3, r3, #3
 800936a:	f043 0301 	orr.w	r3, r3, #1
 800936e:	81a3      	strh	r3, [r4, #12]
 8009370:	89a3      	ldrh	r3, [r4, #12]
 8009372:	431d      	orrs	r5, r3
 8009374:	81a5      	strh	r5, [r4, #12]
 8009376:	e7cf      	b.n	8009318 <__smakebuf_r+0x18>

08009378 <memmove>:
 8009378:	4288      	cmp	r0, r1
 800937a:	b510      	push	{r4, lr}
 800937c:	eb01 0402 	add.w	r4, r1, r2
 8009380:	d902      	bls.n	8009388 <memmove+0x10>
 8009382:	4284      	cmp	r4, r0
 8009384:	4623      	mov	r3, r4
 8009386:	d807      	bhi.n	8009398 <memmove+0x20>
 8009388:	1e43      	subs	r3, r0, #1
 800938a:	42a1      	cmp	r1, r4
 800938c:	d008      	beq.n	80093a0 <memmove+0x28>
 800938e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009392:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009396:	e7f8      	b.n	800938a <memmove+0x12>
 8009398:	4402      	add	r2, r0
 800939a:	4601      	mov	r1, r0
 800939c:	428a      	cmp	r2, r1
 800939e:	d100      	bne.n	80093a2 <memmove+0x2a>
 80093a0:	bd10      	pop	{r4, pc}
 80093a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80093a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80093aa:	e7f7      	b.n	800939c <memmove+0x24>

080093ac <_fstat_r>:
 80093ac:	b538      	push	{r3, r4, r5, lr}
 80093ae:	4d07      	ldr	r5, [pc, #28]	; (80093cc <_fstat_r+0x20>)
 80093b0:	2300      	movs	r3, #0
 80093b2:	4604      	mov	r4, r0
 80093b4:	4608      	mov	r0, r1
 80093b6:	4611      	mov	r1, r2
 80093b8:	602b      	str	r3, [r5, #0]
 80093ba:	f7f8 fa06 	bl	80017ca <_fstat>
 80093be:	1c43      	adds	r3, r0, #1
 80093c0:	d102      	bne.n	80093c8 <_fstat_r+0x1c>
 80093c2:	682b      	ldr	r3, [r5, #0]
 80093c4:	b103      	cbz	r3, 80093c8 <_fstat_r+0x1c>
 80093c6:	6023      	str	r3, [r4, #0]
 80093c8:	bd38      	pop	{r3, r4, r5, pc}
 80093ca:	bf00      	nop
 80093cc:	2000458c 	.word	0x2000458c

080093d0 <_isatty_r>:
 80093d0:	b538      	push	{r3, r4, r5, lr}
 80093d2:	4d06      	ldr	r5, [pc, #24]	; (80093ec <_isatty_r+0x1c>)
 80093d4:	2300      	movs	r3, #0
 80093d6:	4604      	mov	r4, r0
 80093d8:	4608      	mov	r0, r1
 80093da:	602b      	str	r3, [r5, #0]
 80093dc:	f7f8 fa05 	bl	80017ea <_isatty>
 80093e0:	1c43      	adds	r3, r0, #1
 80093e2:	d102      	bne.n	80093ea <_isatty_r+0x1a>
 80093e4:	682b      	ldr	r3, [r5, #0]
 80093e6:	b103      	cbz	r3, 80093ea <_isatty_r+0x1a>
 80093e8:	6023      	str	r3, [r4, #0]
 80093ea:	bd38      	pop	{r3, r4, r5, pc}
 80093ec:	2000458c 	.word	0x2000458c

080093f0 <_sbrk_r>:
 80093f0:	b538      	push	{r3, r4, r5, lr}
 80093f2:	4d06      	ldr	r5, [pc, #24]	; (800940c <_sbrk_r+0x1c>)
 80093f4:	2300      	movs	r3, #0
 80093f6:	4604      	mov	r4, r0
 80093f8:	4608      	mov	r0, r1
 80093fa:	602b      	str	r3, [r5, #0]
 80093fc:	f7f8 fa0e 	bl	800181c <_sbrk>
 8009400:	1c43      	adds	r3, r0, #1
 8009402:	d102      	bne.n	800940a <_sbrk_r+0x1a>
 8009404:	682b      	ldr	r3, [r5, #0]
 8009406:	b103      	cbz	r3, 800940a <_sbrk_r+0x1a>
 8009408:	6023      	str	r3, [r4, #0]
 800940a:	bd38      	pop	{r3, r4, r5, pc}
 800940c:	2000458c 	.word	0x2000458c

08009410 <_realloc_r>:
 8009410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009414:	4680      	mov	r8, r0
 8009416:	4614      	mov	r4, r2
 8009418:	460e      	mov	r6, r1
 800941a:	b921      	cbnz	r1, 8009426 <_realloc_r+0x16>
 800941c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009420:	4611      	mov	r1, r2
 8009422:	f7ff bb25 	b.w	8008a70 <_malloc_r>
 8009426:	b92a      	cbnz	r2, 8009434 <_realloc_r+0x24>
 8009428:	f7ff fab6 	bl	8008998 <_free_r>
 800942c:	4625      	mov	r5, r4
 800942e:	4628      	mov	r0, r5
 8009430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009434:	f000 f81b 	bl	800946e <_malloc_usable_size_r>
 8009438:	4284      	cmp	r4, r0
 800943a:	4607      	mov	r7, r0
 800943c:	d802      	bhi.n	8009444 <_realloc_r+0x34>
 800943e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009442:	d812      	bhi.n	800946a <_realloc_r+0x5a>
 8009444:	4621      	mov	r1, r4
 8009446:	4640      	mov	r0, r8
 8009448:	f7ff fb12 	bl	8008a70 <_malloc_r>
 800944c:	4605      	mov	r5, r0
 800944e:	2800      	cmp	r0, #0
 8009450:	d0ed      	beq.n	800942e <_realloc_r+0x1e>
 8009452:	42bc      	cmp	r4, r7
 8009454:	4622      	mov	r2, r4
 8009456:	4631      	mov	r1, r6
 8009458:	bf28      	it	cs
 800945a:	463a      	movcs	r2, r7
 800945c:	f7ff fa8d 	bl	800897a <memcpy>
 8009460:	4631      	mov	r1, r6
 8009462:	4640      	mov	r0, r8
 8009464:	f7ff fa98 	bl	8008998 <_free_r>
 8009468:	e7e1      	b.n	800942e <_realloc_r+0x1e>
 800946a:	4635      	mov	r5, r6
 800946c:	e7df      	b.n	800942e <_realloc_r+0x1e>

0800946e <_malloc_usable_size_r>:
 800946e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009472:	1f18      	subs	r0, r3, #4
 8009474:	2b00      	cmp	r3, #0
 8009476:	bfbc      	itt	lt
 8009478:	580b      	ldrlt	r3, [r1, r0]
 800947a:	18c0      	addlt	r0, r0, r3
 800947c:	4770      	bx	lr
	...

08009480 <_init>:
 8009480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009482:	bf00      	nop
 8009484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009486:	bc08      	pop	{r3}
 8009488:	469e      	mov	lr, r3
 800948a:	4770      	bx	lr

0800948c <_fini>:
 800948c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800948e:	bf00      	nop
 8009490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009492:	bc08      	pop	{r3}
 8009494:	469e      	mov	lr, r3
 8009496:	4770      	bx	lr
