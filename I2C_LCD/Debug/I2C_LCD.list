
I2C_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c64  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08003e04  08003e04  00013e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e7c  08003e7c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08003e7c  08003e7c  00013e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e84  08003e84  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e84  08003e84  00013e84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e88  08003e88  00013e88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003e8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  2000005c  08003ee8  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  08003ee8  00020260  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b7b0  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fc7  00000000  00000000  0002b87f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a08  00000000  00000000  0002d848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007c6  00000000  00000000  0002e250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000164ed  00000000  00000000  0002ea16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e909  00000000  00000000  00044f03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00087f9b  00000000  00000000  0005380c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002d50  00000000  00000000  000db7a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000de4f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003dec 	.word	0x08003dec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08003dec 	.word	0x08003dec

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <lcd_init>:
extern I2C_HandleTypeDef hi2c1; // hi2c1이 외부에 선언되었다는 뜻

#define SLAVE_ADDRES_LCD	0x27<<1

void lcd_init()
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
	// cmd init
	HAL_Delay(50);
 8000580:	2032      	movs	r0, #50	; 0x32
 8000582:	f000 fc31 	bl	8000de8 <HAL_Delay>
	lcd_send_cmd(0x30);
 8000586:	2030      	movs	r0, #48	; 0x30
 8000588:	f000 f832 	bl	80005f0 <lcd_send_cmd>
	HAL_Delay(5);
 800058c:	2005      	movs	r0, #5
 800058e:	f000 fc2b 	bl	8000de8 <HAL_Delay>
	lcd_send_cmd(0x30);
 8000592:	2030      	movs	r0, #48	; 0x30
 8000594:	f000 f82c 	bl	80005f0 <lcd_send_cmd>
	HAL_Delay(1);
 8000598:	2001      	movs	r0, #1
 800059a:	f000 fc25 	bl	8000de8 <HAL_Delay>
	lcd_send_cmd(0x30);
 800059e:	2030      	movs	r0, #48	; 0x30
 80005a0:	f000 f826 	bl	80005f0 <lcd_send_cmd>
	HAL_Delay(10);
 80005a4:	200a      	movs	r0, #10
 80005a6:	f000 fc1f 	bl	8000de8 <HAL_Delay>
	lcd_send_cmd(0x20); // 4bit mode
 80005aa:	2020      	movs	r0, #32
 80005ac:	f000 f820 	bl	80005f0 <lcd_send_cmd>
	HAL_Delay(10);
 80005b0:	200a      	movs	r0, #10
 80005b2:	f000 fc19 	bl	8000de8 <HAL_Delay>

	// display init
	lcd_send_cmd(0x28); // function set
 80005b6:	2028      	movs	r0, #40	; 0x28
 80005b8:	f000 f81a 	bl	80005f0 <lcd_send_cmd>
	HAL_Delay(1);
 80005bc:	2001      	movs	r0, #1
 80005be:	f000 fc13 	bl	8000de8 <HAL_Delay>
	lcd_send_cmd(0x08); // display off
 80005c2:	2008      	movs	r0, #8
 80005c4:	f000 f814 	bl	80005f0 <lcd_send_cmd>
	HAL_Delay(1);
 80005c8:	2001      	movs	r0, #1
 80005ca:	f000 fc0d 	bl	8000de8 <HAL_Delay>
	lcd_send_cmd(0x01); // clear display
 80005ce:	2001      	movs	r0, #1
 80005d0:	f000 f80e 	bl	80005f0 <lcd_send_cmd>
	HAL_Delay(1);
 80005d4:	2001      	movs	r0, #1
 80005d6:	f000 fc07 	bl	8000de8 <HAL_Delay>
	lcd_send_cmd(0x06); // entry mode
 80005da:	2006      	movs	r0, #6
 80005dc:	f000 f808 	bl	80005f0 <lcd_send_cmd>
	HAL_Delay(1);
 80005e0:	2001      	movs	r0, #1
 80005e2:	f000 fc01 	bl	8000de8 <HAL_Delay>
	lcd_send_cmd(0x0C); // display on
 80005e6:	200c      	movs	r0, #12
 80005e8:	f000 f802 	bl	80005f0 <lcd_send_cmd>
}
 80005ec:	bf00      	nop
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <lcd_send_cmd>:

void lcd_send_cmd(char cmd)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b086      	sub	sp, #24
 80005f4:	af02      	add	r7, sp, #8
 80005f6:	4603      	mov	r3, r0
 80005f8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd & 0xf0); // msb쪽 4bit만 남기고 나머지 다 버림.
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	f023 030f 	bic.w	r3, r3, #15
 8000600:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd << 4) & 0xf0); // lsb쪽 4bit만 님기고 나머지 다 버림.
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	011b      	lsls	r3, r3, #4
 8000606:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0C;	// en = 1, rs = 0
 8000608:	7bfb      	ldrb	r3, [r7, #15]
 800060a:	f043 030c 	orr.w	r3, r3, #12
 800060e:	b2db      	uxtb	r3, r3
 8000610:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x08;	// en = 0, rs = 0
 8000612:	7bfb      	ldrb	r3, [r7, #15]
 8000614:	f043 0308 	orr.w	r3, r3, #8
 8000618:	b2db      	uxtb	r3, r3
 800061a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0C;	// en = 1, rs = 0
 800061c:	7bbb      	ldrb	r3, [r7, #14]
 800061e:	f043 030c 	orr.w	r3, r3, #12
 8000622:	b2db      	uxtb	r3, r3
 8000624:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x08;	// en = 0, rs = 0
 8000626:	7bbb      	ldrb	r3, [r7, #14]
 8000628:	f043 0308 	orr.w	r3, r3, #8
 800062c:	b2db      	uxtb	r3, r3
 800062e:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRES_LCD, (uint8_t *)data_t, 4, 100);
 8000630:	f107 0208 	add.w	r2, r7, #8
 8000634:	2364      	movs	r3, #100	; 0x64
 8000636:	9300      	str	r3, [sp, #0]
 8000638:	2304      	movs	r3, #4
 800063a:	214e      	movs	r1, #78	; 0x4e
 800063c:	4803      	ldr	r0, [pc, #12]	; (800064c <lcd_send_cmd+0x5c>)
 800063e:	f001 f87d 	bl	800173c <HAL_I2C_Master_Transmit>
}
 8000642:	bf00      	nop
 8000644:	3710      	adds	r7, #16
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	20000078 	.word	0x20000078

08000650 <lcd_send_data>:

void lcd_send_data(char data)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b086      	sub	sp, #24
 8000654:	af02      	add	r7, sp, #8
 8000656:	4603      	mov	r3, r0
 8000658:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data & 0xf0); // msb쪽 4bit만 남기고 나머지 다 버림.
 800065a:	79fb      	ldrb	r3, [r7, #7]
 800065c:	f023 030f 	bic.w	r3, r3, #15
 8000660:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xf0); // lsb쪽 4bit만 님기고 나머지 다 버림.
 8000662:	79fb      	ldrb	r3, [r7, #7]
 8000664:	011b      	lsls	r3, r3, #4
 8000666:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0D;	// en = 1, rs = 0
 8000668:	7bfb      	ldrb	r3, [r7, #15]
 800066a:	f043 030d 	orr.w	r3, r3, #13
 800066e:	b2db      	uxtb	r3, r3
 8000670:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x09;	// en = 0, rs = 0
 8000672:	7bfb      	ldrb	r3, [r7, #15]
 8000674:	f043 0309 	orr.w	r3, r3, #9
 8000678:	b2db      	uxtb	r3, r3
 800067a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0D;	// en = 1, rs = 0
 800067c:	7bbb      	ldrb	r3, [r7, #14]
 800067e:	f043 030d 	orr.w	r3, r3, #13
 8000682:	b2db      	uxtb	r3, r3
 8000684:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x09;	// en = 0, rs = 0
 8000686:	7bbb      	ldrb	r3, [r7, #14]
 8000688:	f043 0309 	orr.w	r3, r3, #9
 800068c:	b2db      	uxtb	r3, r3
 800068e:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRES_LCD, (uint8_t *)data_t, 4, 100);
 8000690:	f107 0208 	add.w	r2, r7, #8
 8000694:	2364      	movs	r3, #100	; 0x64
 8000696:	9300      	str	r3, [sp, #0]
 8000698:	2304      	movs	r3, #4
 800069a:	214e      	movs	r1, #78	; 0x4e
 800069c:	4803      	ldr	r0, [pc, #12]	; (80006ac <lcd_send_data+0x5c>)
 800069e:	f001 f84d 	bl	800173c <HAL_I2C_Master_Transmit>
}
 80006a2:	bf00      	nop
 80006a4:	3710      	adds	r7, #16
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	20000078 	.word	0x20000078

080006b0 <lcd_send_string>:

void lcd_send_string(char *str)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
	while(*str) lcd_send_data(*str++); // *str이 참이면, lcd_send_data(*str++) 실행
 80006b8:	e006      	b.n	80006c8 <lcd_send_string+0x18>
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	1c5a      	adds	r2, r3, #1
 80006be:	607a      	str	r2, [r7, #4]
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	4618      	mov	r0, r3
 80006c4:	f7ff ffc4 	bl	8000650 <lcd_send_data>
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d1f4      	bne.n	80006ba <lcd_send_string+0xa>
}
 80006d0:	bf00      	nop
 80006d2:	bf00      	nop
 80006d4:	3708      	adds	r7, #8
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}

080006da <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 80006da:	b580      	push	{r7, lr}
 80006dc:	b082      	sub	sp, #8
 80006de:	af00      	add	r7, sp, #0
 80006e0:	6078      	str	r0, [r7, #4]
 80006e2:	6039      	str	r1, [r7, #0]
    switch (row)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d003      	beq.n	80006f2 <lcd_put_cur+0x18>
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	2b01      	cmp	r3, #1
 80006ee:	d005      	beq.n	80006fc <lcd_put_cur+0x22>
 80006f0:	e009      	b.n	8000706 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006f8:	603b      	str	r3, [r7, #0]
            break;
 80006fa:	e004      	b.n	8000706 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000702:	603b      	str	r3, [r7, #0]
            break;
 8000704:	bf00      	nop
    }

    lcd_send_cmd(col);
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	b2db      	uxtb	r3, r3
 800070a:	4618      	mov	r0, r3
 800070c:	f7ff ff70 	bl	80005f0 <lcd_send_cmd>
}
 8000710:	bf00      	nop
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <lcd_clear>:

void lcd_clear()
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 800071e:	2080      	movs	r0, #128	; 0x80
 8000720:	f7ff ff66 	bl	80005f0 <lcd_send_cmd>
	for (int i=0 ; i<70 ; i++)
 8000724:	2300      	movs	r3, #0
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	e005      	b.n	8000736 <lcd_clear+0x1e>
	{
		lcd_send_data(' ');
 800072a:	2020      	movs	r0, #32
 800072c:	f7ff ff90 	bl	8000650 <lcd_send_data>
	for (int i=0 ; i<70 ; i++)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	3301      	adds	r3, #1
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	2b45      	cmp	r3, #69	; 0x45
 800073a:	ddf6      	ble.n	800072a <lcd_clear+0x12>
	}
}
 800073c:	bf00      	nop
 800073e:	bf00      	nop
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
	...

08000748 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b08a      	sub	sp, #40	; 0x28
 800074c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074e:	f107 0314 	add.w	r3, r7, #20
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
 8000758:	609a      	str	r2, [r3, #8]
 800075a:	60da      	str	r2, [r3, #12]
 800075c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	613b      	str	r3, [r7, #16]
 8000762:	4b2d      	ldr	r3, [pc, #180]	; (8000818 <MX_GPIO_Init+0xd0>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a2c      	ldr	r2, [pc, #176]	; (8000818 <MX_GPIO_Init+0xd0>)
 8000768:	f043 0304 	orr.w	r3, r3, #4
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b2a      	ldr	r3, [pc, #168]	; (8000818 <MX_GPIO_Init+0xd0>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0304 	and.w	r3, r3, #4
 8000776:	613b      	str	r3, [r7, #16]
 8000778:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	60fb      	str	r3, [r7, #12]
 800077e:	4b26      	ldr	r3, [pc, #152]	; (8000818 <MX_GPIO_Init+0xd0>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a25      	ldr	r2, [pc, #148]	; (8000818 <MX_GPIO_Init+0xd0>)
 8000784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b23      	ldr	r3, [pc, #140]	; (8000818 <MX_GPIO_Init+0xd0>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	60bb      	str	r3, [r7, #8]
 800079a:	4b1f      	ldr	r3, [pc, #124]	; (8000818 <MX_GPIO_Init+0xd0>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a1e      	ldr	r2, [pc, #120]	; (8000818 <MX_GPIO_Init+0xd0>)
 80007a0:	f043 0301 	orr.w	r3, r3, #1
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b1c      	ldr	r3, [pc, #112]	; (8000818 <MX_GPIO_Init+0xd0>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0301 	and.w	r3, r3, #1
 80007ae:	60bb      	str	r3, [r7, #8]
 80007b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	607b      	str	r3, [r7, #4]
 80007b6:	4b18      	ldr	r3, [pc, #96]	; (8000818 <MX_GPIO_Init+0xd0>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a17      	ldr	r2, [pc, #92]	; (8000818 <MX_GPIO_Init+0xd0>)
 80007bc:	f043 0302 	orr.w	r3, r3, #2
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b15      	ldr	r3, [pc, #84]	; (8000818 <MX_GPIO_Init+0xd0>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0302 	and.w	r3, r3, #2
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2120      	movs	r1, #32
 80007d2:	4812      	ldr	r0, [pc, #72]	; (800081c <MX_GPIO_Init+0xd4>)
 80007d4:	f000 fe54 	bl	8001480 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007de:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	2300      	movs	r3, #0
 80007e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007e8:	f107 0314 	add.w	r3, r7, #20
 80007ec:	4619      	mov	r1, r3
 80007ee:	480c      	ldr	r0, [pc, #48]	; (8000820 <MX_GPIO_Init+0xd8>)
 80007f0:	f000 fcc2 	bl	8001178 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007f4:	2320      	movs	r3, #32
 80007f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f8:	2301      	movs	r3, #1
 80007fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000800:	2300      	movs	r3, #0
 8000802:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000804:	f107 0314 	add.w	r3, r7, #20
 8000808:	4619      	mov	r1, r3
 800080a:	4804      	ldr	r0, [pc, #16]	; (800081c <MX_GPIO_Init+0xd4>)
 800080c:	f000 fcb4 	bl	8001178 <HAL_GPIO_Init>

}
 8000810:	bf00      	nop
 8000812:	3728      	adds	r7, #40	; 0x28
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	40023800 	.word	0x40023800
 800081c:	40020000 	.word	0x40020000
 8000820:	40020800 	.word	0x40020800

08000824 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000828:	4b12      	ldr	r3, [pc, #72]	; (8000874 <MX_I2C1_Init+0x50>)
 800082a:	4a13      	ldr	r2, [pc, #76]	; (8000878 <MX_I2C1_Init+0x54>)
 800082c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800082e:	4b11      	ldr	r3, [pc, #68]	; (8000874 <MX_I2C1_Init+0x50>)
 8000830:	4a12      	ldr	r2, [pc, #72]	; (800087c <MX_I2C1_Init+0x58>)
 8000832:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000834:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <MX_I2C1_Init+0x50>)
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800083a:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <MX_I2C1_Init+0x50>)
 800083c:	2200      	movs	r2, #0
 800083e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000840:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <MX_I2C1_Init+0x50>)
 8000842:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000846:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000848:	4b0a      	ldr	r3, [pc, #40]	; (8000874 <MX_I2C1_Init+0x50>)
 800084a:	2200      	movs	r2, #0
 800084c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800084e:	4b09      	ldr	r3, [pc, #36]	; (8000874 <MX_I2C1_Init+0x50>)
 8000850:	2200      	movs	r2, #0
 8000852:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000854:	4b07      	ldr	r3, [pc, #28]	; (8000874 <MX_I2C1_Init+0x50>)
 8000856:	2200      	movs	r2, #0
 8000858:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800085a:	4b06      	ldr	r3, [pc, #24]	; (8000874 <MX_I2C1_Init+0x50>)
 800085c:	2200      	movs	r2, #0
 800085e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000860:	4804      	ldr	r0, [pc, #16]	; (8000874 <MX_I2C1_Init+0x50>)
 8000862:	f000 fe27 	bl	80014b4 <HAL_I2C_Init>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800086c:	f000 f8fc 	bl	8000a68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000870:	bf00      	nop
 8000872:	bd80      	pop	{r7, pc}
 8000874:	20000078 	.word	0x20000078
 8000878:	40005400 	.word	0x40005400
 800087c:	000186a0 	.word	0x000186a0

08000880 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b08a      	sub	sp, #40	; 0x28
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000888:	f107 0314 	add.w	r3, r7, #20
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	605a      	str	r2, [r3, #4]
 8000892:	609a      	str	r2, [r3, #8]
 8000894:	60da      	str	r2, [r3, #12]
 8000896:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a19      	ldr	r2, [pc, #100]	; (8000904 <HAL_I2C_MspInit+0x84>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d12b      	bne.n	80008fa <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	613b      	str	r3, [r7, #16]
 80008a6:	4b18      	ldr	r3, [pc, #96]	; (8000908 <HAL_I2C_MspInit+0x88>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a17      	ldr	r2, [pc, #92]	; (8000908 <HAL_I2C_MspInit+0x88>)
 80008ac:	f043 0302 	orr.w	r3, r3, #2
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b15      	ldr	r3, [pc, #84]	; (8000908 <HAL_I2C_MspInit+0x88>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0302 	and.w	r3, r3, #2
 80008ba:	613b      	str	r3, [r7, #16]
 80008bc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008be:	23c0      	movs	r3, #192	; 0xc0
 80008c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008c2:	2312      	movs	r3, #18
 80008c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ca:	2303      	movs	r3, #3
 80008cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008ce:	2304      	movs	r3, #4
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d2:	f107 0314 	add.w	r3, r7, #20
 80008d6:	4619      	mov	r1, r3
 80008d8:	480c      	ldr	r0, [pc, #48]	; (800090c <HAL_I2C_MspInit+0x8c>)
 80008da:	f000 fc4d 	bl	8001178 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	60fb      	str	r3, [r7, #12]
 80008e2:	4b09      	ldr	r3, [pc, #36]	; (8000908 <HAL_I2C_MspInit+0x88>)
 80008e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e6:	4a08      	ldr	r2, [pc, #32]	; (8000908 <HAL_I2C_MspInit+0x88>)
 80008e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008ec:	6413      	str	r3, [r2, #64]	; 0x40
 80008ee:	4b06      	ldr	r3, [pc, #24]	; (8000908 <HAL_I2C_MspInit+0x88>)
 80008f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008f6:	60fb      	str	r3, [r7, #12]
 80008f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80008fa:	bf00      	nop
 80008fc:	3728      	adds	r7, #40	; 0x28
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40005400 	.word	0x40005400
 8000908:	40023800 	.word	0x40023800
 800090c:	40020400 	.word	0x40020400

08000910 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b088      	sub	sp, #32
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000916:	f000 f9f5 	bl	8000d04 <HAL_Init>

  /* USER CODE BEGIN Init */
  uint16_t count = 0;
 800091a:	2300      	movs	r3, #0
 800091c:	83fb      	strh	r3, [r7, #30]
  uint8_t buff[30];
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800091e:	f000 f83b 	bl	8000998 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000922:	f7ff ff11 	bl	8000748 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000926:	f7ff ff7d 	bl	8000824 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800092a:	f000 f947 	bl	8000bbc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(1000); // 통신 되게 느리니까 적당히 주자.
 800092e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000932:	f000 fa59 	bl	8000de8 <HAL_Delay>
  lcd_init();
 8000936:	f7ff fe21 	bl	800057c <lcd_init>
  lcd_send_string("Hello HARMAN"); // 12글자
 800093a:	4814      	ldr	r0, [pc, #80]	; (800098c <main+0x7c>)
 800093c:	f7ff feb8 	bl	80006b0 <lcd_send_string>
  HAL_Delay(500);
 8000940:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000944:	f000 fa50 	bl	8000de8 <HAL_Delay>
  lcd_put_cur(1, 0); // 다음 행으로 커서 이동
 8000948:	2100      	movs	r1, #0
 800094a:	2001      	movs	r0, #1
 800094c:	f7ff fec5 	bl	80006da <lcd_put_cur>
  lcd_send_string("TEST LCD COM!"); // 12글자
 8000950:	480f      	ldr	r0, [pc, #60]	; (8000990 <main+0x80>)
 8000952:	f7ff fead 	bl	80006b0 <lcd_send_string>
  HAL_Delay(1000);
 8000956:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800095a:	f000 fa45 	bl	8000de8 <HAL_Delay>
  lcd_clear();
 800095e:	f7ff fedb 	bl	8000718 <lcd_clear>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  sprintf(buff, "count %-5d", count++);
 8000962:	8bfb      	ldrh	r3, [r7, #30]
 8000964:	1c5a      	adds	r2, r3, #1
 8000966:	83fa      	strh	r2, [r7, #30]
 8000968:	461a      	mov	r2, r3
 800096a:	463b      	mov	r3, r7
 800096c:	4909      	ldr	r1, [pc, #36]	; (8000994 <main+0x84>)
 800096e:	4618      	mov	r0, r3
 8000970:	f002 fd98 	bl	80034a4 <siprintf>
	  lcd_put_cur(1, 0);
 8000974:	2100      	movs	r1, #0
 8000976:	2001      	movs	r0, #1
 8000978:	f7ff feaf 	bl	80006da <lcd_put_cur>
	  lcd_send_string(buff);
 800097c:	463b      	mov	r3, r7
 800097e:	4618      	mov	r0, r3
 8000980:	f7ff fe96 	bl	80006b0 <lcd_send_string>
	  HAL_Delay(100);
 8000984:	2064      	movs	r0, #100	; 0x64
 8000986:	f000 fa2f 	bl	8000de8 <HAL_Delay>
	  sprintf(buff, "count %-5d", count++);
 800098a:	e7ea      	b.n	8000962 <main+0x52>
 800098c:	08003e04 	.word	0x08003e04
 8000990:	08003e14 	.word	0x08003e14
 8000994:	08003e24 	.word	0x08003e24

08000998 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b094      	sub	sp, #80	; 0x50
 800099c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800099e:	f107 0320 	add.w	r3, r7, #32
 80009a2:	2230      	movs	r2, #48	; 0x30
 80009a4:	2100      	movs	r1, #0
 80009a6:	4618      	mov	r0, r3
 80009a8:	f002 fd9c 	bl	80034e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009ac:	f107 030c 	add.w	r3, r7, #12
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009bc:	2300      	movs	r3, #0
 80009be:	60bb      	str	r3, [r7, #8]
 80009c0:	4b27      	ldr	r3, [pc, #156]	; (8000a60 <SystemClock_Config+0xc8>)
 80009c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c4:	4a26      	ldr	r2, [pc, #152]	; (8000a60 <SystemClock_Config+0xc8>)
 80009c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ca:	6413      	str	r3, [r2, #64]	; 0x40
 80009cc:	4b24      	ldr	r3, [pc, #144]	; (8000a60 <SystemClock_Config+0xc8>)
 80009ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d4:	60bb      	str	r3, [r7, #8]
 80009d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009d8:	2300      	movs	r3, #0
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	4b21      	ldr	r3, [pc, #132]	; (8000a64 <SystemClock_Config+0xcc>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a20      	ldr	r2, [pc, #128]	; (8000a64 <SystemClock_Config+0xcc>)
 80009e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009e6:	6013      	str	r3, [r2, #0]
 80009e8:	4b1e      	ldr	r3, [pc, #120]	; (8000a64 <SystemClock_Config+0xcc>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009f0:	607b      	str	r3, [r7, #4]
 80009f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009f4:	2301      	movs	r3, #1
 80009f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009fe:	2302      	movs	r3, #2
 8000a00:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a02:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a06:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a08:	2304      	movs	r3, #4
 8000a0a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000a0c:	2364      	movs	r3, #100	; 0x64
 8000a0e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a10:	2302      	movs	r3, #2
 8000a12:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a14:	2304      	movs	r3, #4
 8000a16:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a18:	f107 0320 	add.w	r3, r7, #32
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f001 f995 	bl	8001d4c <HAL_RCC_OscConfig>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a28:	f000 f81e 	bl	8000a68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a2c:	230f      	movs	r3, #15
 8000a2e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a30:	2302      	movs	r3, #2
 8000a32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a34:	2300      	movs	r3, #0
 8000a36:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a3c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000a42:	f107 030c 	add.w	r3, r7, #12
 8000a46:	2103      	movs	r1, #3
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f001 fbf7 	bl	800223c <HAL_RCC_ClockConfig>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000a54:	f000 f808 	bl	8000a68 <Error_Handler>
  }
}
 8000a58:	bf00      	nop
 8000a5a:	3750      	adds	r7, #80	; 0x50
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	40023800 	.word	0x40023800
 8000a64:	40007000 	.word	0x40007000

08000a68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a6c:	b672      	cpsid	i
}
 8000a6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a70:	e7fe      	b.n	8000a70 <Error_Handler+0x8>
	...

08000a74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	607b      	str	r3, [r7, #4]
 8000a7e:	4b10      	ldr	r3, [pc, #64]	; (8000ac0 <HAL_MspInit+0x4c>)
 8000a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a82:	4a0f      	ldr	r2, [pc, #60]	; (8000ac0 <HAL_MspInit+0x4c>)
 8000a84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a88:	6453      	str	r3, [r2, #68]	; 0x44
 8000a8a:	4b0d      	ldr	r3, [pc, #52]	; (8000ac0 <HAL_MspInit+0x4c>)
 8000a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a92:	607b      	str	r3, [r7, #4]
 8000a94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	603b      	str	r3, [r7, #0]
 8000a9a:	4b09      	ldr	r3, [pc, #36]	; (8000ac0 <HAL_MspInit+0x4c>)
 8000a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9e:	4a08      	ldr	r2, [pc, #32]	; (8000ac0 <HAL_MspInit+0x4c>)
 8000aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa4:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa6:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <HAL_MspInit+0x4c>)
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aae:	603b      	str	r3, [r7, #0]
 8000ab0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ab2:	2007      	movs	r0, #7
 8000ab4:	f000 fa8c 	bl	8000fd0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ab8:	bf00      	nop
 8000aba:	3708      	adds	r7, #8
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	40023800 	.word	0x40023800

08000ac4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <NMI_Handler+0x4>

08000aca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ace:	e7fe      	b.n	8000ace <HardFault_Handler+0x4>

08000ad0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <MemManage_Handler+0x4>

08000ad6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ada:	e7fe      	b.n	8000ada <BusFault_Handler+0x4>

08000adc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ae0:	e7fe      	b.n	8000ae0 <UsageFault_Handler+0x4>

08000ae2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr

08000af0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr

08000afe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000afe:	b480      	push	{r7}
 8000b00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b02:	bf00      	nop
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr

08000b0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b10:	f000 f94a 	bl	8000da8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b14:	bf00      	nop
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b1c:	4802      	ldr	r0, [pc, #8]	; (8000b28 <USART2_IRQHandler+0x10>)
 8000b1e:	f001 fdfb 	bl	8002718 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	200000d0 	.word	0x200000d0

08000b2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b086      	sub	sp, #24
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b34:	4a14      	ldr	r2, [pc, #80]	; (8000b88 <_sbrk+0x5c>)
 8000b36:	4b15      	ldr	r3, [pc, #84]	; (8000b8c <_sbrk+0x60>)
 8000b38:	1ad3      	subs	r3, r2, r3
 8000b3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b40:	4b13      	ldr	r3, [pc, #76]	; (8000b90 <_sbrk+0x64>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d102      	bne.n	8000b4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b48:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <_sbrk+0x64>)
 8000b4a:	4a12      	ldr	r2, [pc, #72]	; (8000b94 <_sbrk+0x68>)
 8000b4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b4e:	4b10      	ldr	r3, [pc, #64]	; (8000b90 <_sbrk+0x64>)
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	4413      	add	r3, r2
 8000b56:	693a      	ldr	r2, [r7, #16]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	d207      	bcs.n	8000b6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b5c:	f002 fcca 	bl	80034f4 <__errno>
 8000b60:	4603      	mov	r3, r0
 8000b62:	220c      	movs	r2, #12
 8000b64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b66:	f04f 33ff 	mov.w	r3, #4294967295
 8000b6a:	e009      	b.n	8000b80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b6c:	4b08      	ldr	r3, [pc, #32]	; (8000b90 <_sbrk+0x64>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b72:	4b07      	ldr	r3, [pc, #28]	; (8000b90 <_sbrk+0x64>)
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4413      	add	r3, r2
 8000b7a:	4a05      	ldr	r2, [pc, #20]	; (8000b90 <_sbrk+0x64>)
 8000b7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b7e:	68fb      	ldr	r3, [r7, #12]
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3718      	adds	r7, #24
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20020000 	.word	0x20020000
 8000b8c:	00000400 	.word	0x00000400
 8000b90:	200000cc 	.word	0x200000cc
 8000b94:	20000260 	.word	0x20000260

08000b98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b9c:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <SystemInit+0x20>)
 8000b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ba2:	4a05      	ldr	r2, [pc, #20]	; (8000bb8 <SystemInit+0x20>)
 8000ba4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ba8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bc0:	4b11      	ldr	r3, [pc, #68]	; (8000c08 <MX_USART2_UART_Init+0x4c>)
 8000bc2:	4a12      	ldr	r2, [pc, #72]	; (8000c0c <MX_USART2_UART_Init+0x50>)
 8000bc4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bc6:	4b10      	ldr	r3, [pc, #64]	; (8000c08 <MX_USART2_UART_Init+0x4c>)
 8000bc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bcc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bce:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <MX_USART2_UART_Init+0x4c>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bd4:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <MX_USART2_UART_Init+0x4c>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bda:	4b0b      	ldr	r3, [pc, #44]	; (8000c08 <MX_USART2_UART_Init+0x4c>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000be0:	4b09      	ldr	r3, [pc, #36]	; (8000c08 <MX_USART2_UART_Init+0x4c>)
 8000be2:	220c      	movs	r2, #12
 8000be4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000be6:	4b08      	ldr	r3, [pc, #32]	; (8000c08 <MX_USART2_UART_Init+0x4c>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bec:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <MX_USART2_UART_Init+0x4c>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bf2:	4805      	ldr	r0, [pc, #20]	; (8000c08 <MX_USART2_UART_Init+0x4c>)
 8000bf4:	f001 fd42 	bl	800267c <HAL_UART_Init>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000bfe:	f7ff ff33 	bl	8000a68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	200000d0 	.word	0x200000d0
 8000c0c:	40004400 	.word	0x40004400

08000c10 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b08a      	sub	sp, #40	; 0x28
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c18:	f107 0314 	add.w	r3, r7, #20
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	609a      	str	r2, [r3, #8]
 8000c24:	60da      	str	r2, [r3, #12]
 8000c26:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a1d      	ldr	r2, [pc, #116]	; (8000ca4 <HAL_UART_MspInit+0x94>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d133      	bne.n	8000c9a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	613b      	str	r3, [r7, #16]
 8000c36:	4b1c      	ldr	r3, [pc, #112]	; (8000ca8 <HAL_UART_MspInit+0x98>)
 8000c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3a:	4a1b      	ldr	r2, [pc, #108]	; (8000ca8 <HAL_UART_MspInit+0x98>)
 8000c3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c40:	6413      	str	r3, [r2, #64]	; 0x40
 8000c42:	4b19      	ldr	r3, [pc, #100]	; (8000ca8 <HAL_UART_MspInit+0x98>)
 8000c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c4a:	613b      	str	r3, [r7, #16]
 8000c4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	4b15      	ldr	r3, [pc, #84]	; (8000ca8 <HAL_UART_MspInit+0x98>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	4a14      	ldr	r2, [pc, #80]	; (8000ca8 <HAL_UART_MspInit+0x98>)
 8000c58:	f043 0301 	orr.w	r3, r3, #1
 8000c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5e:	4b12      	ldr	r3, [pc, #72]	; (8000ca8 <HAL_UART_MspInit+0x98>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	f003 0301 	and.w	r3, r3, #1
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c6a:	230c      	movs	r3, #12
 8000c6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c76:	2303      	movs	r3, #3
 8000c78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c7a:	2307      	movs	r3, #7
 8000c7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7e:	f107 0314 	add.w	r3, r7, #20
 8000c82:	4619      	mov	r1, r3
 8000c84:	4809      	ldr	r0, [pc, #36]	; (8000cac <HAL_UART_MspInit+0x9c>)
 8000c86:	f000 fa77 	bl	8001178 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	2026      	movs	r0, #38	; 0x26
 8000c90:	f000 f9a9 	bl	8000fe6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c94:	2026      	movs	r0, #38	; 0x26
 8000c96:	f000 f9c2 	bl	800101e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000c9a:	bf00      	nop
 8000c9c:	3728      	adds	r7, #40	; 0x28
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40004400 	.word	0x40004400
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	40020000 	.word	0x40020000

08000cb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ce8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cb4:	480d      	ldr	r0, [pc, #52]	; (8000cec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cb6:	490e      	ldr	r1, [pc, #56]	; (8000cf0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cb8:	4a0e      	ldr	r2, [pc, #56]	; (8000cf4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cbc:	e002      	b.n	8000cc4 <LoopCopyDataInit>

08000cbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cc2:	3304      	adds	r3, #4

08000cc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cc8:	d3f9      	bcc.n	8000cbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cca:	4a0b      	ldr	r2, [pc, #44]	; (8000cf8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ccc:	4c0b      	ldr	r4, [pc, #44]	; (8000cfc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd0:	e001      	b.n	8000cd6 <LoopFillZerobss>

08000cd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd4:	3204      	adds	r2, #4

08000cd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cd8:	d3fb      	bcc.n	8000cd2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cda:	f7ff ff5d 	bl	8000b98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cde:	f002 fc0f 	bl	8003500 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ce2:	f7ff fe15 	bl	8000910 <main>
  bx  lr    
 8000ce6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ce8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000cf4:	08003e8c 	.word	0x08003e8c
  ldr r2, =_sbss
 8000cf8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000cfc:	20000260 	.word	0x20000260

08000d00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d00:	e7fe      	b.n	8000d00 <ADC_IRQHandler>
	...

08000d04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d08:	4b0e      	ldr	r3, [pc, #56]	; (8000d44 <HAL_Init+0x40>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a0d      	ldr	r2, [pc, #52]	; (8000d44 <HAL_Init+0x40>)
 8000d0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d14:	4b0b      	ldr	r3, [pc, #44]	; (8000d44 <HAL_Init+0x40>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a0a      	ldr	r2, [pc, #40]	; (8000d44 <HAL_Init+0x40>)
 8000d1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d20:	4b08      	ldr	r3, [pc, #32]	; (8000d44 <HAL_Init+0x40>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a07      	ldr	r2, [pc, #28]	; (8000d44 <HAL_Init+0x40>)
 8000d26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d2c:	2003      	movs	r0, #3
 8000d2e:	f000 f94f 	bl	8000fd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d32:	2000      	movs	r0, #0
 8000d34:	f000 f808 	bl	8000d48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d38:	f7ff fe9c 	bl	8000a74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d3c:	2300      	movs	r3, #0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40023c00 	.word	0x40023c00

08000d48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d50:	4b12      	ldr	r3, [pc, #72]	; (8000d9c <HAL_InitTick+0x54>)
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	4b12      	ldr	r3, [pc, #72]	; (8000da0 <HAL_InitTick+0x58>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	4619      	mov	r1, r3
 8000d5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d66:	4618      	mov	r0, r3
 8000d68:	f000 f967 	bl	800103a <HAL_SYSTICK_Config>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
 8000d74:	e00e      	b.n	8000d94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2b0f      	cmp	r3, #15
 8000d7a:	d80a      	bhi.n	8000d92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	6879      	ldr	r1, [r7, #4]
 8000d80:	f04f 30ff 	mov.w	r0, #4294967295
 8000d84:	f000 f92f 	bl	8000fe6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d88:	4a06      	ldr	r2, [pc, #24]	; (8000da4 <HAL_InitTick+0x5c>)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	e000      	b.n	8000d94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	20000000 	.word	0x20000000
 8000da0:	20000008 	.word	0x20000008
 8000da4:	20000004 	.word	0x20000004

08000da8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dac:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <HAL_IncTick+0x20>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	461a      	mov	r2, r3
 8000db2:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <HAL_IncTick+0x24>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4413      	add	r3, r2
 8000db8:	4a04      	ldr	r2, [pc, #16]	; (8000dcc <HAL_IncTick+0x24>)
 8000dba:	6013      	str	r3, [r2, #0]
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	20000008 	.word	0x20000008
 8000dcc:	20000114 	.word	0x20000114

08000dd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000dd4:	4b03      	ldr	r3, [pc, #12]	; (8000de4 <HAL_GetTick+0x14>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	20000114 	.word	0x20000114

08000de8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000df0:	f7ff ffee 	bl	8000dd0 <HAL_GetTick>
 8000df4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e00:	d005      	beq.n	8000e0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e02:	4b0a      	ldr	r3, [pc, #40]	; (8000e2c <HAL_Delay+0x44>)
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	461a      	mov	r2, r3
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e0e:	bf00      	nop
 8000e10:	f7ff ffde 	bl	8000dd0 <HAL_GetTick>
 8000e14:	4602      	mov	r2, r0
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	68fa      	ldr	r2, [r7, #12]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	d8f7      	bhi.n	8000e10 <HAL_Delay+0x28>
  {
  }
}
 8000e20:	bf00      	nop
 8000e22:	bf00      	nop
 8000e24:	3710      	adds	r7, #16
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20000008 	.word	0x20000008

08000e30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b085      	sub	sp, #20
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	f003 0307 	and.w	r3, r3, #7
 8000e3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e40:	4b0c      	ldr	r3, [pc, #48]	; (8000e74 <__NVIC_SetPriorityGrouping+0x44>)
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e46:	68ba      	ldr	r2, [r7, #8]
 8000e48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e62:	4a04      	ldr	r2, [pc, #16]	; (8000e74 <__NVIC_SetPriorityGrouping+0x44>)
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	60d3      	str	r3, [r2, #12]
}
 8000e68:	bf00      	nop
 8000e6a:	3714      	adds	r7, #20
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	e000ed00 	.word	0xe000ed00

08000e78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e7c:	4b04      	ldr	r3, [pc, #16]	; (8000e90 <__NVIC_GetPriorityGrouping+0x18>)
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	0a1b      	lsrs	r3, r3, #8
 8000e82:	f003 0307 	and.w	r3, r3, #7
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	db0b      	blt.n	8000ebe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	f003 021f 	and.w	r2, r3, #31
 8000eac:	4907      	ldr	r1, [pc, #28]	; (8000ecc <__NVIC_EnableIRQ+0x38>)
 8000eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb2:	095b      	lsrs	r3, r3, #5
 8000eb4:	2001      	movs	r0, #1
 8000eb6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ebe:	bf00      	nop
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	e000e100 	.word	0xe000e100

08000ed0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	6039      	str	r1, [r7, #0]
 8000eda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	db0a      	blt.n	8000efa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	b2da      	uxtb	r2, r3
 8000ee8:	490c      	ldr	r1, [pc, #48]	; (8000f1c <__NVIC_SetPriority+0x4c>)
 8000eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eee:	0112      	lsls	r2, r2, #4
 8000ef0:	b2d2      	uxtb	r2, r2
 8000ef2:	440b      	add	r3, r1
 8000ef4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ef8:	e00a      	b.n	8000f10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	b2da      	uxtb	r2, r3
 8000efe:	4908      	ldr	r1, [pc, #32]	; (8000f20 <__NVIC_SetPriority+0x50>)
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	f003 030f 	and.w	r3, r3, #15
 8000f06:	3b04      	subs	r3, #4
 8000f08:	0112      	lsls	r2, r2, #4
 8000f0a:	b2d2      	uxtb	r2, r2
 8000f0c:	440b      	add	r3, r1
 8000f0e:	761a      	strb	r2, [r3, #24]
}
 8000f10:	bf00      	nop
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	e000e100 	.word	0xe000e100
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b089      	sub	sp, #36	; 0x24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	f003 0307 	and.w	r3, r3, #7
 8000f36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	f1c3 0307 	rsb	r3, r3, #7
 8000f3e:	2b04      	cmp	r3, #4
 8000f40:	bf28      	it	cs
 8000f42:	2304      	movcs	r3, #4
 8000f44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	3304      	adds	r3, #4
 8000f4a:	2b06      	cmp	r3, #6
 8000f4c:	d902      	bls.n	8000f54 <NVIC_EncodePriority+0x30>
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	3b03      	subs	r3, #3
 8000f52:	e000      	b.n	8000f56 <NVIC_EncodePriority+0x32>
 8000f54:	2300      	movs	r3, #0
 8000f56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f58:	f04f 32ff 	mov.w	r2, #4294967295
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	43da      	mvns	r2, r3
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	401a      	ands	r2, r3
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	fa01 f303 	lsl.w	r3, r1, r3
 8000f76:	43d9      	mvns	r1, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f7c:	4313      	orrs	r3, r2
         );
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3724      	adds	r7, #36	; 0x24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
	...

08000f8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	3b01      	subs	r3, #1
 8000f98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f9c:	d301      	bcc.n	8000fa2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e00f      	b.n	8000fc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fa2:	4a0a      	ldr	r2, [pc, #40]	; (8000fcc <SysTick_Config+0x40>)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	3b01      	subs	r3, #1
 8000fa8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000faa:	210f      	movs	r1, #15
 8000fac:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb0:	f7ff ff8e 	bl	8000ed0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fb4:	4b05      	ldr	r3, [pc, #20]	; (8000fcc <SysTick_Config+0x40>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fba:	4b04      	ldr	r3, [pc, #16]	; (8000fcc <SysTick_Config+0x40>)
 8000fbc:	2207      	movs	r2, #7
 8000fbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fc0:	2300      	movs	r3, #0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	e000e010 	.word	0xe000e010

08000fd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f7ff ff29 	bl	8000e30 <__NVIC_SetPriorityGrouping>
}
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b086      	sub	sp, #24
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	4603      	mov	r3, r0
 8000fee:	60b9      	str	r1, [r7, #8]
 8000ff0:	607a      	str	r2, [r7, #4]
 8000ff2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ff8:	f7ff ff3e 	bl	8000e78 <__NVIC_GetPriorityGrouping>
 8000ffc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	68b9      	ldr	r1, [r7, #8]
 8001002:	6978      	ldr	r0, [r7, #20]
 8001004:	f7ff ff8e 	bl	8000f24 <NVIC_EncodePriority>
 8001008:	4602      	mov	r2, r0
 800100a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800100e:	4611      	mov	r1, r2
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff ff5d 	bl	8000ed0 <__NVIC_SetPriority>
}
 8001016:	bf00      	nop
 8001018:	3718      	adds	r7, #24
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b082      	sub	sp, #8
 8001022:	af00      	add	r7, sp, #0
 8001024:	4603      	mov	r3, r0
 8001026:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff ff31 	bl	8000e94 <__NVIC_EnableIRQ>
}
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b082      	sub	sp, #8
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f7ff ffa2 	bl	8000f8c <SysTick_Config>
 8001048:	4603      	mov	r3, r0
}
 800104a:	4618      	mov	r0, r3
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b084      	sub	sp, #16
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800105e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001060:	f7ff feb6 	bl	8000dd0 <HAL_GetTick>
 8001064:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800106c:	b2db      	uxtb	r3, r3
 800106e:	2b02      	cmp	r3, #2
 8001070:	d008      	beq.n	8001084 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2280      	movs	r2, #128	; 0x80
 8001076:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2200      	movs	r2, #0
 800107c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	e052      	b.n	800112a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f022 0216 	bic.w	r2, r2, #22
 8001092:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	695a      	ldr	r2, [r3, #20]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010a2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d103      	bne.n	80010b4 <HAL_DMA_Abort+0x62>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d007      	beq.n	80010c4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f022 0208 	bic.w	r2, r2, #8
 80010c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f022 0201 	bic.w	r2, r2, #1
 80010d2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010d4:	e013      	b.n	80010fe <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010d6:	f7ff fe7b 	bl	8000dd0 <HAL_GetTick>
 80010da:	4602      	mov	r2, r0
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	1ad3      	subs	r3, r2, r3
 80010e0:	2b05      	cmp	r3, #5
 80010e2:	d90c      	bls.n	80010fe <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2220      	movs	r2, #32
 80010e8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2203      	movs	r2, #3
 80010ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2200      	movs	r2, #0
 80010f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80010fa:	2303      	movs	r3, #3
 80010fc:	e015      	b.n	800112a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f003 0301 	and.w	r3, r3, #1
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1e4      	bne.n	80010d6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001110:	223f      	movs	r2, #63	; 0x3f
 8001112:	409a      	lsls	r2, r3
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2201      	movs	r2, #1
 800111c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2200      	movs	r2, #0
 8001124:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001128:	2300      	movs	r3, #0
}
 800112a:	4618      	mov	r0, r3
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001132:	b480      	push	{r7}
 8001134:	b083      	sub	sp, #12
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001140:	b2db      	uxtb	r3, r3
 8001142:	2b02      	cmp	r3, #2
 8001144:	d004      	beq.n	8001150 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2280      	movs	r2, #128	; 0x80
 800114a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800114c:	2301      	movs	r3, #1
 800114e:	e00c      	b.n	800116a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2205      	movs	r2, #5
 8001154:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f022 0201 	bic.w	r2, r2, #1
 8001166:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
	...

08001178 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001178:	b480      	push	{r7}
 800117a:	b089      	sub	sp, #36	; 0x24
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001182:	2300      	movs	r3, #0
 8001184:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001186:	2300      	movs	r3, #0
 8001188:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800118a:	2300      	movs	r3, #0
 800118c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800118e:	2300      	movs	r3, #0
 8001190:	61fb      	str	r3, [r7, #28]
 8001192:	e159      	b.n	8001448 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001194:	2201      	movs	r2, #1
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	697a      	ldr	r2, [r7, #20]
 80011a4:	4013      	ands	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011a8:	693a      	ldr	r2, [r7, #16]
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	f040 8148 	bne.w	8001442 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f003 0303 	and.w	r3, r3, #3
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d005      	beq.n	80011ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d130      	bne.n	800122c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	2203      	movs	r2, #3
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	43db      	mvns	r3, r3
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	4013      	ands	r3, r2
 80011e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	68da      	ldr	r2, [r3, #12]
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001200:	2201      	movs	r2, #1
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	43db      	mvns	r3, r3
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	4013      	ands	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	091b      	lsrs	r3, r3, #4
 8001216:	f003 0201 	and.w	r2, r3, #1
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4313      	orrs	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f003 0303 	and.w	r3, r3, #3
 8001234:	2b03      	cmp	r3, #3
 8001236:	d017      	beq.n	8001268 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	2203      	movs	r2, #3
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	43db      	mvns	r3, r3
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	4013      	ands	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	689a      	ldr	r2, [r3, #8]
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	4313      	orrs	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f003 0303 	and.w	r3, r3, #3
 8001270:	2b02      	cmp	r3, #2
 8001272:	d123      	bne.n	80012bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	08da      	lsrs	r2, r3, #3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	3208      	adds	r2, #8
 800127c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001280:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	f003 0307 	and.w	r3, r3, #7
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	220f      	movs	r2, #15
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	43db      	mvns	r3, r3
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	4013      	ands	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	691a      	ldr	r2, [r3, #16]
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	f003 0307 	and.w	r3, r3, #7
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	08da      	lsrs	r2, r3, #3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	3208      	adds	r2, #8
 80012b6:	69b9      	ldr	r1, [r7, #24]
 80012b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	2203      	movs	r2, #3
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	43db      	mvns	r3, r3
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	4013      	ands	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f003 0203 	and.w	r2, r3, #3
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	f000 80a2 	beq.w	8001442 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	60fb      	str	r3, [r7, #12]
 8001302:	4b57      	ldr	r3, [pc, #348]	; (8001460 <HAL_GPIO_Init+0x2e8>)
 8001304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001306:	4a56      	ldr	r2, [pc, #344]	; (8001460 <HAL_GPIO_Init+0x2e8>)
 8001308:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800130c:	6453      	str	r3, [r2, #68]	; 0x44
 800130e:	4b54      	ldr	r3, [pc, #336]	; (8001460 <HAL_GPIO_Init+0x2e8>)
 8001310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001312:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001316:	60fb      	str	r3, [r7, #12]
 8001318:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800131a:	4a52      	ldr	r2, [pc, #328]	; (8001464 <HAL_GPIO_Init+0x2ec>)
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	089b      	lsrs	r3, r3, #2
 8001320:	3302      	adds	r3, #2
 8001322:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001326:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	f003 0303 	and.w	r3, r3, #3
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	220f      	movs	r2, #15
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	43db      	mvns	r3, r3
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	4013      	ands	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a49      	ldr	r2, [pc, #292]	; (8001468 <HAL_GPIO_Init+0x2f0>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d019      	beq.n	800137a <HAL_GPIO_Init+0x202>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a48      	ldr	r2, [pc, #288]	; (800146c <HAL_GPIO_Init+0x2f4>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d013      	beq.n	8001376 <HAL_GPIO_Init+0x1fe>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a47      	ldr	r2, [pc, #284]	; (8001470 <HAL_GPIO_Init+0x2f8>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d00d      	beq.n	8001372 <HAL_GPIO_Init+0x1fa>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a46      	ldr	r2, [pc, #280]	; (8001474 <HAL_GPIO_Init+0x2fc>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d007      	beq.n	800136e <HAL_GPIO_Init+0x1f6>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a45      	ldr	r2, [pc, #276]	; (8001478 <HAL_GPIO_Init+0x300>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d101      	bne.n	800136a <HAL_GPIO_Init+0x1f2>
 8001366:	2304      	movs	r3, #4
 8001368:	e008      	b.n	800137c <HAL_GPIO_Init+0x204>
 800136a:	2307      	movs	r3, #7
 800136c:	e006      	b.n	800137c <HAL_GPIO_Init+0x204>
 800136e:	2303      	movs	r3, #3
 8001370:	e004      	b.n	800137c <HAL_GPIO_Init+0x204>
 8001372:	2302      	movs	r3, #2
 8001374:	e002      	b.n	800137c <HAL_GPIO_Init+0x204>
 8001376:	2301      	movs	r3, #1
 8001378:	e000      	b.n	800137c <HAL_GPIO_Init+0x204>
 800137a:	2300      	movs	r3, #0
 800137c:	69fa      	ldr	r2, [r7, #28]
 800137e:	f002 0203 	and.w	r2, r2, #3
 8001382:	0092      	lsls	r2, r2, #2
 8001384:	4093      	lsls	r3, r2
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	4313      	orrs	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800138c:	4935      	ldr	r1, [pc, #212]	; (8001464 <HAL_GPIO_Init+0x2ec>)
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	089b      	lsrs	r3, r3, #2
 8001392:	3302      	adds	r3, #2
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800139a:	4b38      	ldr	r3, [pc, #224]	; (800147c <HAL_GPIO_Init+0x304>)
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	43db      	mvns	r3, r3
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	4013      	ands	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d003      	beq.n	80013be <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013be:	4a2f      	ldr	r2, [pc, #188]	; (800147c <HAL_GPIO_Init+0x304>)
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013c4:	4b2d      	ldr	r3, [pc, #180]	; (800147c <HAL_GPIO_Init+0x304>)
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	43db      	mvns	r3, r3
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	4013      	ands	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d003      	beq.n	80013e8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013e8:	4a24      	ldr	r2, [pc, #144]	; (800147c <HAL_GPIO_Init+0x304>)
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013ee:	4b23      	ldr	r3, [pc, #140]	; (800147c <HAL_GPIO_Init+0x304>)
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	43db      	mvns	r3, r3
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	4013      	ands	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d003      	beq.n	8001412 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	4313      	orrs	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001412:	4a1a      	ldr	r2, [pc, #104]	; (800147c <HAL_GPIO_Init+0x304>)
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001418:	4b18      	ldr	r3, [pc, #96]	; (800147c <HAL_GPIO_Init+0x304>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	43db      	mvns	r3, r3
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	4013      	ands	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001430:	2b00      	cmp	r3, #0
 8001432:	d003      	beq.n	800143c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	4313      	orrs	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800143c:	4a0f      	ldr	r2, [pc, #60]	; (800147c <HAL_GPIO_Init+0x304>)
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	3301      	adds	r3, #1
 8001446:	61fb      	str	r3, [r7, #28]
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	2b0f      	cmp	r3, #15
 800144c:	f67f aea2 	bls.w	8001194 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001450:	bf00      	nop
 8001452:	bf00      	nop
 8001454:	3724      	adds	r7, #36	; 0x24
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	40023800 	.word	0x40023800
 8001464:	40013800 	.word	0x40013800
 8001468:	40020000 	.word	0x40020000
 800146c:	40020400 	.word	0x40020400
 8001470:	40020800 	.word	0x40020800
 8001474:	40020c00 	.word	0x40020c00
 8001478:	40021000 	.word	0x40021000
 800147c:	40013c00 	.word	0x40013c00

08001480 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	460b      	mov	r3, r1
 800148a:	807b      	strh	r3, [r7, #2]
 800148c:	4613      	mov	r3, r2
 800148e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001490:	787b      	ldrb	r3, [r7, #1]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d003      	beq.n	800149e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001496:	887a      	ldrh	r2, [r7, #2]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800149c:	e003      	b.n	80014a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800149e:	887b      	ldrh	r3, [r7, #2]
 80014a0:	041a      	lsls	r2, r3, #16
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	619a      	str	r2, [r3, #24]
}
 80014a6:	bf00      	nop
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
	...

080014b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d101      	bne.n	80014c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e12b      	b.n	800171e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d106      	bne.n	80014e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2200      	movs	r2, #0
 80014d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f7ff f9d0 	bl	8000880 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2224      	movs	r2, #36	; 0x24
 80014e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f022 0201 	bic.w	r2, r2, #1
 80014f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001506:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001516:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001518:	f001 f888 	bl	800262c <HAL_RCC_GetPCLK1Freq>
 800151c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	4a81      	ldr	r2, [pc, #516]	; (8001728 <HAL_I2C_Init+0x274>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d807      	bhi.n	8001538 <HAL_I2C_Init+0x84>
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	4a80      	ldr	r2, [pc, #512]	; (800172c <HAL_I2C_Init+0x278>)
 800152c:	4293      	cmp	r3, r2
 800152e:	bf94      	ite	ls
 8001530:	2301      	movls	r3, #1
 8001532:	2300      	movhi	r3, #0
 8001534:	b2db      	uxtb	r3, r3
 8001536:	e006      	b.n	8001546 <HAL_I2C_Init+0x92>
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	4a7d      	ldr	r2, [pc, #500]	; (8001730 <HAL_I2C_Init+0x27c>)
 800153c:	4293      	cmp	r3, r2
 800153e:	bf94      	ite	ls
 8001540:	2301      	movls	r3, #1
 8001542:	2300      	movhi	r3, #0
 8001544:	b2db      	uxtb	r3, r3
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e0e7      	b.n	800171e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	4a78      	ldr	r2, [pc, #480]	; (8001734 <HAL_I2C_Init+0x280>)
 8001552:	fba2 2303 	umull	r2, r3, r2, r3
 8001556:	0c9b      	lsrs	r3, r3, #18
 8001558:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	68ba      	ldr	r2, [r7, #8]
 800156a:	430a      	orrs	r2, r1
 800156c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	6a1b      	ldr	r3, [r3, #32]
 8001574:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	4a6a      	ldr	r2, [pc, #424]	; (8001728 <HAL_I2C_Init+0x274>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d802      	bhi.n	8001588 <HAL_I2C_Init+0xd4>
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	3301      	adds	r3, #1
 8001586:	e009      	b.n	800159c <HAL_I2C_Init+0xe8>
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800158e:	fb02 f303 	mul.w	r3, r2, r3
 8001592:	4a69      	ldr	r2, [pc, #420]	; (8001738 <HAL_I2C_Init+0x284>)
 8001594:	fba2 2303 	umull	r2, r3, r2, r3
 8001598:	099b      	lsrs	r3, r3, #6
 800159a:	3301      	adds	r3, #1
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	6812      	ldr	r2, [r2, #0]
 80015a0:	430b      	orrs	r3, r1
 80015a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	69db      	ldr	r3, [r3, #28]
 80015aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80015ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	495c      	ldr	r1, [pc, #368]	; (8001728 <HAL_I2C_Init+0x274>)
 80015b8:	428b      	cmp	r3, r1
 80015ba:	d819      	bhi.n	80015f0 <HAL_I2C_Init+0x13c>
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	1e59      	subs	r1, r3, #1
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80015ca:	1c59      	adds	r1, r3, #1
 80015cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80015d0:	400b      	ands	r3, r1
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d00a      	beq.n	80015ec <HAL_I2C_Init+0x138>
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	1e59      	subs	r1, r3, #1
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80015e4:	3301      	adds	r3, #1
 80015e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015ea:	e051      	b.n	8001690 <HAL_I2C_Init+0x1dc>
 80015ec:	2304      	movs	r3, #4
 80015ee:	e04f      	b.n	8001690 <HAL_I2C_Init+0x1dc>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d111      	bne.n	800161c <HAL_I2C_Init+0x168>
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	1e58      	subs	r0, r3, #1
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6859      	ldr	r1, [r3, #4]
 8001600:	460b      	mov	r3, r1
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	440b      	add	r3, r1
 8001606:	fbb0 f3f3 	udiv	r3, r0, r3
 800160a:	3301      	adds	r3, #1
 800160c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001610:	2b00      	cmp	r3, #0
 8001612:	bf0c      	ite	eq
 8001614:	2301      	moveq	r3, #1
 8001616:	2300      	movne	r3, #0
 8001618:	b2db      	uxtb	r3, r3
 800161a:	e012      	b.n	8001642 <HAL_I2C_Init+0x18e>
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	1e58      	subs	r0, r3, #1
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6859      	ldr	r1, [r3, #4]
 8001624:	460b      	mov	r3, r1
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	440b      	add	r3, r1
 800162a:	0099      	lsls	r1, r3, #2
 800162c:	440b      	add	r3, r1
 800162e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001632:	3301      	adds	r3, #1
 8001634:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001638:	2b00      	cmp	r3, #0
 800163a:	bf0c      	ite	eq
 800163c:	2301      	moveq	r3, #1
 800163e:	2300      	movne	r3, #0
 8001640:	b2db      	uxtb	r3, r3
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <HAL_I2C_Init+0x196>
 8001646:	2301      	movs	r3, #1
 8001648:	e022      	b.n	8001690 <HAL_I2C_Init+0x1dc>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d10e      	bne.n	8001670 <HAL_I2C_Init+0x1bc>
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	1e58      	subs	r0, r3, #1
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6859      	ldr	r1, [r3, #4]
 800165a:	460b      	mov	r3, r1
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	440b      	add	r3, r1
 8001660:	fbb0 f3f3 	udiv	r3, r0, r3
 8001664:	3301      	adds	r3, #1
 8001666:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800166a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800166e:	e00f      	b.n	8001690 <HAL_I2C_Init+0x1dc>
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	1e58      	subs	r0, r3, #1
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6859      	ldr	r1, [r3, #4]
 8001678:	460b      	mov	r3, r1
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	440b      	add	r3, r1
 800167e:	0099      	lsls	r1, r3, #2
 8001680:	440b      	add	r3, r1
 8001682:	fbb0 f3f3 	udiv	r3, r0, r3
 8001686:	3301      	adds	r3, #1
 8001688:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800168c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001690:	6879      	ldr	r1, [r7, #4]
 8001692:	6809      	ldr	r1, [r1, #0]
 8001694:	4313      	orrs	r3, r2
 8001696:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	69da      	ldr	r2, [r3, #28]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a1b      	ldr	r3, [r3, #32]
 80016aa:	431a      	orrs	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	430a      	orrs	r2, r1
 80016b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80016be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	6911      	ldr	r1, [r2, #16]
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	68d2      	ldr	r2, [r2, #12]
 80016ca:	4311      	orrs	r1, r2
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	6812      	ldr	r2, [r2, #0]
 80016d0:	430b      	orrs	r3, r1
 80016d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	695a      	ldr	r2, [r3, #20]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	699b      	ldr	r3, [r3, #24]
 80016e6:	431a      	orrs	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	430a      	orrs	r2, r1
 80016ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f042 0201 	orr.w	r2, r2, #1
 80016fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2200      	movs	r2, #0
 8001704:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2220      	movs	r2, #32
 800170a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2200      	movs	r2, #0
 8001712:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2200      	movs	r2, #0
 8001718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	000186a0 	.word	0x000186a0
 800172c:	001e847f 	.word	0x001e847f
 8001730:	003d08ff 	.word	0x003d08ff
 8001734:	431bde83 	.word	0x431bde83
 8001738:	10624dd3 	.word	0x10624dd3

0800173c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b088      	sub	sp, #32
 8001740:	af02      	add	r7, sp, #8
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	607a      	str	r2, [r7, #4]
 8001746:	461a      	mov	r2, r3
 8001748:	460b      	mov	r3, r1
 800174a:	817b      	strh	r3, [r7, #10]
 800174c:	4613      	mov	r3, r2
 800174e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001750:	f7ff fb3e 	bl	8000dd0 <HAL_GetTick>
 8001754:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800175c:	b2db      	uxtb	r3, r3
 800175e:	2b20      	cmp	r3, #32
 8001760:	f040 80e0 	bne.w	8001924 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	2319      	movs	r3, #25
 800176a:	2201      	movs	r2, #1
 800176c:	4970      	ldr	r1, [pc, #448]	; (8001930 <HAL_I2C_Master_Transmit+0x1f4>)
 800176e:	68f8      	ldr	r0, [r7, #12]
 8001770:	f000 f964 	bl	8001a3c <I2C_WaitOnFlagUntilTimeout>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800177a:	2302      	movs	r3, #2
 800177c:	e0d3      	b.n	8001926 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001784:	2b01      	cmp	r3, #1
 8001786:	d101      	bne.n	800178c <HAL_I2C_Master_Transmit+0x50>
 8001788:	2302      	movs	r3, #2
 800178a:	e0cc      	b.n	8001926 <HAL_I2C_Master_Transmit+0x1ea>
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2201      	movs	r2, #1
 8001790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d007      	beq.n	80017b2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f042 0201 	orr.w	r2, r2, #1
 80017b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017c0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	2221      	movs	r2, #33	; 0x21
 80017c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	2210      	movs	r2, #16
 80017ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	2200      	movs	r2, #0
 80017d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	893a      	ldrh	r2, [r7, #8]
 80017e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017e8:	b29a      	uxth	r2, r3
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	4a50      	ldr	r2, [pc, #320]	; (8001934 <HAL_I2C_Master_Transmit+0x1f8>)
 80017f2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80017f4:	8979      	ldrh	r1, [r7, #10]
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	6a3a      	ldr	r2, [r7, #32]
 80017fa:	68f8      	ldr	r0, [r7, #12]
 80017fc:	f000 f89c 	bl	8001938 <I2C_MasterRequestWrite>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e08d      	b.n	8001926 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800180a:	2300      	movs	r3, #0
 800180c:	613b      	str	r3, [r7, #16]
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	695b      	ldr	r3, [r3, #20]
 8001814:	613b      	str	r3, [r7, #16]
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	699b      	ldr	r3, [r3, #24]
 800181c:	613b      	str	r3, [r7, #16]
 800181e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001820:	e066      	b.n	80018f0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001822:	697a      	ldr	r2, [r7, #20]
 8001824:	6a39      	ldr	r1, [r7, #32]
 8001826:	68f8      	ldr	r0, [r7, #12]
 8001828:	f000 f9de 	bl	8001be8 <I2C_WaitOnTXEFlagUntilTimeout>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d00d      	beq.n	800184e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001836:	2b04      	cmp	r3, #4
 8001838:	d107      	bne.n	800184a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001848:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e06b      	b.n	8001926 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001852:	781a      	ldrb	r2, [r3, #0]
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185e:	1c5a      	adds	r2, r3, #1
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001868:	b29b      	uxth	r3, r3
 800186a:	3b01      	subs	r3, #1
 800186c:	b29a      	uxth	r2, r3
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001876:	3b01      	subs	r3, #1
 8001878:	b29a      	uxth	r2, r3
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	695b      	ldr	r3, [r3, #20]
 8001884:	f003 0304 	and.w	r3, r3, #4
 8001888:	2b04      	cmp	r3, #4
 800188a:	d11b      	bne.n	80018c4 <HAL_I2C_Master_Transmit+0x188>
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001890:	2b00      	cmp	r3, #0
 8001892:	d017      	beq.n	80018c4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001898:	781a      	ldrb	r2, [r3, #0]
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a4:	1c5a      	adds	r2, r3, #1
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	3b01      	subs	r3, #1
 80018b2:	b29a      	uxth	r2, r3
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018bc:	3b01      	subs	r3, #1
 80018be:	b29a      	uxth	r2, r3
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018c4:	697a      	ldr	r2, [r7, #20]
 80018c6:	6a39      	ldr	r1, [r7, #32]
 80018c8:	68f8      	ldr	r0, [r7, #12]
 80018ca:	f000 f9ce 	bl	8001c6a <I2C_WaitOnBTFFlagUntilTimeout>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d00d      	beq.n	80018f0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d8:	2b04      	cmp	r3, #4
 80018da:	d107      	bne.n	80018ec <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018ea:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e01a      	b.n	8001926 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d194      	bne.n	8001822 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001906:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2220      	movs	r2, #32
 800190c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2200      	movs	r2, #0
 8001914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2200      	movs	r2, #0
 800191c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001920:	2300      	movs	r3, #0
 8001922:	e000      	b.n	8001926 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001924:	2302      	movs	r3, #2
  }
}
 8001926:	4618      	mov	r0, r3
 8001928:	3718      	adds	r7, #24
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	00100002 	.word	0x00100002
 8001934:	ffff0000 	.word	0xffff0000

08001938 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b088      	sub	sp, #32
 800193c:	af02      	add	r7, sp, #8
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	607a      	str	r2, [r7, #4]
 8001942:	603b      	str	r3, [r7, #0]
 8001944:	460b      	mov	r3, r1
 8001946:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800194c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	2b08      	cmp	r3, #8
 8001952:	d006      	beq.n	8001962 <I2C_MasterRequestWrite+0x2a>
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	2b01      	cmp	r3, #1
 8001958:	d003      	beq.n	8001962 <I2C_MasterRequestWrite+0x2a>
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001960:	d108      	bne.n	8001974 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	e00b      	b.n	800198c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001978:	2b12      	cmp	r3, #18
 800197a:	d107      	bne.n	800198c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800198a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	9300      	str	r3, [sp, #0]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2200      	movs	r2, #0
 8001994:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001998:	68f8      	ldr	r0, [r7, #12]
 800199a:	f000 f84f 	bl	8001a3c <I2C_WaitOnFlagUntilTimeout>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d00d      	beq.n	80019c0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019b2:	d103      	bne.n	80019bc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e035      	b.n	8001a2c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	691b      	ldr	r3, [r3, #16]
 80019c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80019c8:	d108      	bne.n	80019dc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80019ca:	897b      	ldrh	r3, [r7, #10]
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	461a      	mov	r2, r3
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80019d8:	611a      	str	r2, [r3, #16]
 80019da:	e01b      	b.n	8001a14 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80019dc:	897b      	ldrh	r3, [r7, #10]
 80019de:	11db      	asrs	r3, r3, #7
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	f003 0306 	and.w	r3, r3, #6
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	f063 030f 	orn	r3, r3, #15
 80019ec:	b2da      	uxtb	r2, r3
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	490e      	ldr	r1, [pc, #56]	; (8001a34 <I2C_MasterRequestWrite+0xfc>)
 80019fa:	68f8      	ldr	r0, [r7, #12]
 80019fc:	f000 f875 	bl	8001aea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e010      	b.n	8001a2c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001a0a:	897b      	ldrh	r3, [r7, #10]
 8001a0c:	b2da      	uxtb	r2, r3
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	4907      	ldr	r1, [pc, #28]	; (8001a38 <I2C_MasterRequestWrite+0x100>)
 8001a1a:	68f8      	ldr	r0, [r7, #12]
 8001a1c:	f000 f865 	bl	8001aea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e000      	b.n	8001a2c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001a2a:	2300      	movs	r3, #0
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3718      	adds	r7, #24
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	00010008 	.word	0x00010008
 8001a38:	00010002 	.word	0x00010002

08001a3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	60b9      	str	r1, [r7, #8]
 8001a46:	603b      	str	r3, [r7, #0]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a4c:	e025      	b.n	8001a9a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a54:	d021      	beq.n	8001a9a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a56:	f7ff f9bb 	bl	8000dd0 <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	683a      	ldr	r2, [r7, #0]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d302      	bcc.n	8001a6c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d116      	bne.n	8001a9a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	2220      	movs	r2, #32
 8001a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a86:	f043 0220 	orr.w	r2, r3, #32
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e023      	b.n	8001ae2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	0c1b      	lsrs	r3, r3, #16
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d10d      	bne.n	8001ac0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	695b      	ldr	r3, [r3, #20]
 8001aaa:	43da      	mvns	r2, r3
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	bf0c      	ite	eq
 8001ab6:	2301      	moveq	r3, #1
 8001ab8:	2300      	movne	r3, #0
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	461a      	mov	r2, r3
 8001abe:	e00c      	b.n	8001ada <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	699b      	ldr	r3, [r3, #24]
 8001ac6:	43da      	mvns	r2, r3
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	4013      	ands	r3, r2
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	bf0c      	ite	eq
 8001ad2:	2301      	moveq	r3, #1
 8001ad4:	2300      	movne	r3, #0
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	461a      	mov	r2, r3
 8001ada:	79fb      	ldrb	r3, [r7, #7]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d0b6      	beq.n	8001a4e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b084      	sub	sp, #16
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	60f8      	str	r0, [r7, #12]
 8001af2:	60b9      	str	r1, [r7, #8]
 8001af4:	607a      	str	r2, [r7, #4]
 8001af6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001af8:	e051      	b.n	8001b9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	695b      	ldr	r3, [r3, #20]
 8001b00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b08:	d123      	bne.n	8001b52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b18:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001b22:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2200      	movs	r2, #0
 8001b28:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2220      	movs	r2, #32
 8001b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	f043 0204 	orr.w	r2, r3, #4
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e046      	b.n	8001be0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b58:	d021      	beq.n	8001b9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b5a:	f7ff f939 	bl	8000dd0 <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d302      	bcc.n	8001b70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d116      	bne.n	8001b9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2200      	movs	r2, #0
 8001b74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2220      	movs	r2, #32
 8001b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8a:	f043 0220 	orr.w	r2, r3, #32
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e020      	b.n	8001be0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	0c1b      	lsrs	r3, r3, #16
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d10c      	bne.n	8001bc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	695b      	ldr	r3, [r3, #20]
 8001bae:	43da      	mvns	r2, r3
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	bf14      	ite	ne
 8001bba:	2301      	movne	r3, #1
 8001bbc:	2300      	moveq	r3, #0
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	e00b      	b.n	8001bda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	43da      	mvns	r2, r3
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	bf14      	ite	ne
 8001bd4:	2301      	movne	r3, #1
 8001bd6:	2300      	moveq	r3, #0
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d18d      	bne.n	8001afa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001bde:	2300      	movs	r3, #0
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3710      	adds	r7, #16
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001bf4:	e02d      	b.n	8001c52 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001bf6:	68f8      	ldr	r0, [r7, #12]
 8001bf8:	f000 f878 	bl	8001cec <I2C_IsAcknowledgeFailed>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e02d      	b.n	8001c62 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c0c:	d021      	beq.n	8001c52 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c0e:	f7ff f8df 	bl	8000dd0 <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	68ba      	ldr	r2, [r7, #8]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d302      	bcc.n	8001c24 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d116      	bne.n	8001c52 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2200      	movs	r2, #0
 8001c28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2220      	movs	r2, #32
 8001c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	f043 0220 	orr.w	r2, r3, #32
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e007      	b.n	8001c62 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	695b      	ldr	r3, [r3, #20]
 8001c58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c5c:	2b80      	cmp	r3, #128	; 0x80
 8001c5e:	d1ca      	bne.n	8001bf6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3710      	adds	r7, #16
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b084      	sub	sp, #16
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	60f8      	str	r0, [r7, #12]
 8001c72:	60b9      	str	r1, [r7, #8]
 8001c74:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001c76:	e02d      	b.n	8001cd4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001c78:	68f8      	ldr	r0, [r7, #12]
 8001c7a:	f000 f837 	bl	8001cec <I2C_IsAcknowledgeFailed>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e02d      	b.n	8001ce4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c8e:	d021      	beq.n	8001cd4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c90:	f7ff f89e 	bl	8000dd0 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	68ba      	ldr	r2, [r7, #8]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d302      	bcc.n	8001ca6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d116      	bne.n	8001cd4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2220      	movs	r2, #32
 8001cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc0:	f043 0220 	orr.w	r2, r3, #32
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e007      	b.n	8001ce4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	695b      	ldr	r3, [r3, #20]
 8001cda:	f003 0304 	and.w	r3, r3, #4
 8001cde:	2b04      	cmp	r3, #4
 8001ce0:	d1ca      	bne.n	8001c78 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001ce2:	2300      	movs	r3, #0
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3710      	adds	r7, #16
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	695b      	ldr	r3, [r3, #20]
 8001cfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d02:	d11b      	bne.n	8001d3c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001d0c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2220      	movs	r2, #32
 8001d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d28:	f043 0204 	orr.w	r2, r3, #4
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e000      	b.n	8001d3e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
	...

08001d4c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d101      	bne.n	8001d5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e267      	b.n	800222e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d075      	beq.n	8001e56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d6a:	4b88      	ldr	r3, [pc, #544]	; (8001f8c <HAL_RCC_OscConfig+0x240>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f003 030c 	and.w	r3, r3, #12
 8001d72:	2b04      	cmp	r3, #4
 8001d74:	d00c      	beq.n	8001d90 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d76:	4b85      	ldr	r3, [pc, #532]	; (8001f8c <HAL_RCC_OscConfig+0x240>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d7e:	2b08      	cmp	r3, #8
 8001d80:	d112      	bne.n	8001da8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d82:	4b82      	ldr	r3, [pc, #520]	; (8001f8c <HAL_RCC_OscConfig+0x240>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d8e:	d10b      	bne.n	8001da8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d90:	4b7e      	ldr	r3, [pc, #504]	; (8001f8c <HAL_RCC_OscConfig+0x240>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d05b      	beq.n	8001e54 <HAL_RCC_OscConfig+0x108>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d157      	bne.n	8001e54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e242      	b.n	800222e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001db0:	d106      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x74>
 8001db2:	4b76      	ldr	r3, [pc, #472]	; (8001f8c <HAL_RCC_OscConfig+0x240>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a75      	ldr	r2, [pc, #468]	; (8001f8c <HAL_RCC_OscConfig+0x240>)
 8001db8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dbc:	6013      	str	r3, [r2, #0]
 8001dbe:	e01d      	b.n	8001dfc <HAL_RCC_OscConfig+0xb0>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dc8:	d10c      	bne.n	8001de4 <HAL_RCC_OscConfig+0x98>
 8001dca:	4b70      	ldr	r3, [pc, #448]	; (8001f8c <HAL_RCC_OscConfig+0x240>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a6f      	ldr	r2, [pc, #444]	; (8001f8c <HAL_RCC_OscConfig+0x240>)
 8001dd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dd4:	6013      	str	r3, [r2, #0]
 8001dd6:	4b6d      	ldr	r3, [pc, #436]	; (8001f8c <HAL_RCC_OscConfig+0x240>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a6c      	ldr	r2, [pc, #432]	; (8001f8c <HAL_RCC_OscConfig+0x240>)
 8001ddc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001de0:	6013      	str	r3, [r2, #0]
 8001de2:	e00b      	b.n	8001dfc <HAL_RCC_OscConfig+0xb0>
 8001de4:	4b69      	ldr	r3, [pc, #420]	; (8001f8c <HAL_RCC_OscConfig+0x240>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a68      	ldr	r2, [pc, #416]	; (8001f8c <HAL_RCC_OscConfig+0x240>)
 8001dea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dee:	6013      	str	r3, [r2, #0]
 8001df0:	4b66      	ldr	r3, [pc, #408]	; (8001f8c <HAL_RCC_OscConfig+0x240>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a65      	ldr	r2, [pc, #404]	; (8001f8c <HAL_RCC_OscConfig+0x240>)
 8001df6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d013      	beq.n	8001e2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e04:	f7fe ffe4 	bl	8000dd0 <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e0c:	f7fe ffe0 	bl	8000dd0 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b64      	cmp	r3, #100	; 0x64
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e207      	b.n	800222e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e1e:	4b5b      	ldr	r3, [pc, #364]	; (8001f8c <HAL_RCC_OscConfig+0x240>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d0f0      	beq.n	8001e0c <HAL_RCC_OscConfig+0xc0>
 8001e2a:	e014      	b.n	8001e56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e2c:	f7fe ffd0 	bl	8000dd0 <HAL_GetTick>
 8001e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e32:	e008      	b.n	8001e46 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e34:	f7fe ffcc 	bl	8000dd0 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b64      	cmp	r3, #100	; 0x64
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e1f3      	b.n	800222e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e46:	4b51      	ldr	r3, [pc, #324]	; (8001f8c <HAL_RCC_OscConfig+0x240>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d1f0      	bne.n	8001e34 <HAL_RCC_OscConfig+0xe8>
 8001e52:	e000      	b.n	8001e56 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d063      	beq.n	8001f2a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e62:	4b4a      	ldr	r3, [pc, #296]	; (8001f8c <HAL_RCC_OscConfig+0x240>)
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f003 030c 	and.w	r3, r3, #12
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d00b      	beq.n	8001e86 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e6e:	4b47      	ldr	r3, [pc, #284]	; (8001f8c <HAL_RCC_OscConfig+0x240>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e76:	2b08      	cmp	r3, #8
 8001e78:	d11c      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e7a:	4b44      	ldr	r3, [pc, #272]	; (8001f8c <HAL_RCC_OscConfig+0x240>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d116      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e86:	4b41      	ldr	r3, [pc, #260]	; (8001f8c <HAL_RCC_OscConfig+0x240>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d005      	beq.n	8001e9e <HAL_RCC_OscConfig+0x152>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d001      	beq.n	8001e9e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e1c7      	b.n	800222e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e9e:	4b3b      	ldr	r3, [pc, #236]	; (8001f8c <HAL_RCC_OscConfig+0x240>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	00db      	lsls	r3, r3, #3
 8001eac:	4937      	ldr	r1, [pc, #220]	; (8001f8c <HAL_RCC_OscConfig+0x240>)
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eb2:	e03a      	b.n	8001f2a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d020      	beq.n	8001efe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ebc:	4b34      	ldr	r3, [pc, #208]	; (8001f90 <HAL_RCC_OscConfig+0x244>)
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec2:	f7fe ff85 	bl	8000dd0 <HAL_GetTick>
 8001ec6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ec8:	e008      	b.n	8001edc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001eca:	f7fe ff81 	bl	8000dd0 <HAL_GetTick>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d901      	bls.n	8001edc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e1a8      	b.n	800222e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001edc:	4b2b      	ldr	r3, [pc, #172]	; (8001f8c <HAL_RCC_OscConfig+0x240>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0302 	and.w	r3, r3, #2
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d0f0      	beq.n	8001eca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ee8:	4b28      	ldr	r3, [pc, #160]	; (8001f8c <HAL_RCC_OscConfig+0x240>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	691b      	ldr	r3, [r3, #16]
 8001ef4:	00db      	lsls	r3, r3, #3
 8001ef6:	4925      	ldr	r1, [pc, #148]	; (8001f8c <HAL_RCC_OscConfig+0x240>)
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	600b      	str	r3, [r1, #0]
 8001efc:	e015      	b.n	8001f2a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001efe:	4b24      	ldr	r3, [pc, #144]	; (8001f90 <HAL_RCC_OscConfig+0x244>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f04:	f7fe ff64 	bl	8000dd0 <HAL_GetTick>
 8001f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f0a:	e008      	b.n	8001f1e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f0c:	f7fe ff60 	bl	8000dd0 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e187      	b.n	800222e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f1e:	4b1b      	ldr	r3, [pc, #108]	; (8001f8c <HAL_RCC_OscConfig+0x240>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d1f0      	bne.n	8001f0c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0308 	and.w	r3, r3, #8
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d036      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	695b      	ldr	r3, [r3, #20]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d016      	beq.n	8001f6c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f3e:	4b15      	ldr	r3, [pc, #84]	; (8001f94 <HAL_RCC_OscConfig+0x248>)
 8001f40:	2201      	movs	r2, #1
 8001f42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f44:	f7fe ff44 	bl	8000dd0 <HAL_GetTick>
 8001f48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f4a:	e008      	b.n	8001f5e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f4c:	f7fe ff40 	bl	8000dd0 <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e167      	b.n	800222e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f5e:	4b0b      	ldr	r3, [pc, #44]	; (8001f8c <HAL_RCC_OscConfig+0x240>)
 8001f60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d0f0      	beq.n	8001f4c <HAL_RCC_OscConfig+0x200>
 8001f6a:	e01b      	b.n	8001fa4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f6c:	4b09      	ldr	r3, [pc, #36]	; (8001f94 <HAL_RCC_OscConfig+0x248>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f72:	f7fe ff2d 	bl	8000dd0 <HAL_GetTick>
 8001f76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f78:	e00e      	b.n	8001f98 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f7a:	f7fe ff29 	bl	8000dd0 <HAL_GetTick>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d907      	bls.n	8001f98 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e150      	b.n	800222e <HAL_RCC_OscConfig+0x4e2>
 8001f8c:	40023800 	.word	0x40023800
 8001f90:	42470000 	.word	0x42470000
 8001f94:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f98:	4b88      	ldr	r3, [pc, #544]	; (80021bc <HAL_RCC_OscConfig+0x470>)
 8001f9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f9c:	f003 0302 	and.w	r3, r3, #2
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d1ea      	bne.n	8001f7a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0304 	and.w	r3, r3, #4
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	f000 8097 	beq.w	80020e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fb6:	4b81      	ldr	r3, [pc, #516]	; (80021bc <HAL_RCC_OscConfig+0x470>)
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d10f      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	60bb      	str	r3, [r7, #8]
 8001fc6:	4b7d      	ldr	r3, [pc, #500]	; (80021bc <HAL_RCC_OscConfig+0x470>)
 8001fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fca:	4a7c      	ldr	r2, [pc, #496]	; (80021bc <HAL_RCC_OscConfig+0x470>)
 8001fcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fd0:	6413      	str	r3, [r2, #64]	; 0x40
 8001fd2:	4b7a      	ldr	r3, [pc, #488]	; (80021bc <HAL_RCC_OscConfig+0x470>)
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fda:	60bb      	str	r3, [r7, #8]
 8001fdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fe2:	4b77      	ldr	r3, [pc, #476]	; (80021c0 <HAL_RCC_OscConfig+0x474>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d118      	bne.n	8002020 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fee:	4b74      	ldr	r3, [pc, #464]	; (80021c0 <HAL_RCC_OscConfig+0x474>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a73      	ldr	r2, [pc, #460]	; (80021c0 <HAL_RCC_OscConfig+0x474>)
 8001ff4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ff8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ffa:	f7fe fee9 	bl	8000dd0 <HAL_GetTick>
 8001ffe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002000:	e008      	b.n	8002014 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002002:	f7fe fee5 	bl	8000dd0 <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	2b02      	cmp	r3, #2
 800200e:	d901      	bls.n	8002014 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e10c      	b.n	800222e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002014:	4b6a      	ldr	r3, [pc, #424]	; (80021c0 <HAL_RCC_OscConfig+0x474>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800201c:	2b00      	cmp	r3, #0
 800201e:	d0f0      	beq.n	8002002 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	2b01      	cmp	r3, #1
 8002026:	d106      	bne.n	8002036 <HAL_RCC_OscConfig+0x2ea>
 8002028:	4b64      	ldr	r3, [pc, #400]	; (80021bc <HAL_RCC_OscConfig+0x470>)
 800202a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800202c:	4a63      	ldr	r2, [pc, #396]	; (80021bc <HAL_RCC_OscConfig+0x470>)
 800202e:	f043 0301 	orr.w	r3, r3, #1
 8002032:	6713      	str	r3, [r2, #112]	; 0x70
 8002034:	e01c      	b.n	8002070 <HAL_RCC_OscConfig+0x324>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	2b05      	cmp	r3, #5
 800203c:	d10c      	bne.n	8002058 <HAL_RCC_OscConfig+0x30c>
 800203e:	4b5f      	ldr	r3, [pc, #380]	; (80021bc <HAL_RCC_OscConfig+0x470>)
 8002040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002042:	4a5e      	ldr	r2, [pc, #376]	; (80021bc <HAL_RCC_OscConfig+0x470>)
 8002044:	f043 0304 	orr.w	r3, r3, #4
 8002048:	6713      	str	r3, [r2, #112]	; 0x70
 800204a:	4b5c      	ldr	r3, [pc, #368]	; (80021bc <HAL_RCC_OscConfig+0x470>)
 800204c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800204e:	4a5b      	ldr	r2, [pc, #364]	; (80021bc <HAL_RCC_OscConfig+0x470>)
 8002050:	f043 0301 	orr.w	r3, r3, #1
 8002054:	6713      	str	r3, [r2, #112]	; 0x70
 8002056:	e00b      	b.n	8002070 <HAL_RCC_OscConfig+0x324>
 8002058:	4b58      	ldr	r3, [pc, #352]	; (80021bc <HAL_RCC_OscConfig+0x470>)
 800205a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800205c:	4a57      	ldr	r2, [pc, #348]	; (80021bc <HAL_RCC_OscConfig+0x470>)
 800205e:	f023 0301 	bic.w	r3, r3, #1
 8002062:	6713      	str	r3, [r2, #112]	; 0x70
 8002064:	4b55      	ldr	r3, [pc, #340]	; (80021bc <HAL_RCC_OscConfig+0x470>)
 8002066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002068:	4a54      	ldr	r2, [pc, #336]	; (80021bc <HAL_RCC_OscConfig+0x470>)
 800206a:	f023 0304 	bic.w	r3, r3, #4
 800206e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d015      	beq.n	80020a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002078:	f7fe feaa 	bl	8000dd0 <HAL_GetTick>
 800207c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800207e:	e00a      	b.n	8002096 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002080:	f7fe fea6 	bl	8000dd0 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	f241 3288 	movw	r2, #5000	; 0x1388
 800208e:	4293      	cmp	r3, r2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e0cb      	b.n	800222e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002096:	4b49      	ldr	r3, [pc, #292]	; (80021bc <HAL_RCC_OscConfig+0x470>)
 8002098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d0ee      	beq.n	8002080 <HAL_RCC_OscConfig+0x334>
 80020a2:	e014      	b.n	80020ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020a4:	f7fe fe94 	bl	8000dd0 <HAL_GetTick>
 80020a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020aa:	e00a      	b.n	80020c2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020ac:	f7fe fe90 	bl	8000dd0 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e0b5      	b.n	800222e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020c2:	4b3e      	ldr	r3, [pc, #248]	; (80021bc <HAL_RCC_OscConfig+0x470>)
 80020c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d1ee      	bne.n	80020ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020ce:	7dfb      	ldrb	r3, [r7, #23]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d105      	bne.n	80020e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020d4:	4b39      	ldr	r3, [pc, #228]	; (80021bc <HAL_RCC_OscConfig+0x470>)
 80020d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d8:	4a38      	ldr	r2, [pc, #224]	; (80021bc <HAL_RCC_OscConfig+0x470>)
 80020da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	f000 80a1 	beq.w	800222c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020ea:	4b34      	ldr	r3, [pc, #208]	; (80021bc <HAL_RCC_OscConfig+0x470>)
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f003 030c 	and.w	r3, r3, #12
 80020f2:	2b08      	cmp	r3, #8
 80020f4:	d05c      	beq.n	80021b0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	699b      	ldr	r3, [r3, #24]
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d141      	bne.n	8002182 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020fe:	4b31      	ldr	r3, [pc, #196]	; (80021c4 <HAL_RCC_OscConfig+0x478>)
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002104:	f7fe fe64 	bl	8000dd0 <HAL_GetTick>
 8002108:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800210a:	e008      	b.n	800211e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800210c:	f7fe fe60 	bl	8000dd0 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b02      	cmp	r3, #2
 8002118:	d901      	bls.n	800211e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e087      	b.n	800222e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800211e:	4b27      	ldr	r3, [pc, #156]	; (80021bc <HAL_RCC_OscConfig+0x470>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1f0      	bne.n	800210c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	69da      	ldr	r2, [r3, #28]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a1b      	ldr	r3, [r3, #32]
 8002132:	431a      	orrs	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002138:	019b      	lsls	r3, r3, #6
 800213a:	431a      	orrs	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002140:	085b      	lsrs	r3, r3, #1
 8002142:	3b01      	subs	r3, #1
 8002144:	041b      	lsls	r3, r3, #16
 8002146:	431a      	orrs	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800214c:	061b      	lsls	r3, r3, #24
 800214e:	491b      	ldr	r1, [pc, #108]	; (80021bc <HAL_RCC_OscConfig+0x470>)
 8002150:	4313      	orrs	r3, r2
 8002152:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002154:	4b1b      	ldr	r3, [pc, #108]	; (80021c4 <HAL_RCC_OscConfig+0x478>)
 8002156:	2201      	movs	r2, #1
 8002158:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800215a:	f7fe fe39 	bl	8000dd0 <HAL_GetTick>
 800215e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002160:	e008      	b.n	8002174 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002162:	f7fe fe35 	bl	8000dd0 <HAL_GetTick>
 8002166:	4602      	mov	r2, r0
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	2b02      	cmp	r3, #2
 800216e:	d901      	bls.n	8002174 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e05c      	b.n	800222e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002174:	4b11      	ldr	r3, [pc, #68]	; (80021bc <HAL_RCC_OscConfig+0x470>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d0f0      	beq.n	8002162 <HAL_RCC_OscConfig+0x416>
 8002180:	e054      	b.n	800222c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002182:	4b10      	ldr	r3, [pc, #64]	; (80021c4 <HAL_RCC_OscConfig+0x478>)
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002188:	f7fe fe22 	bl	8000dd0 <HAL_GetTick>
 800218c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800218e:	e008      	b.n	80021a2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002190:	f7fe fe1e 	bl	8000dd0 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b02      	cmp	r3, #2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e045      	b.n	800222e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021a2:	4b06      	ldr	r3, [pc, #24]	; (80021bc <HAL_RCC_OscConfig+0x470>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1f0      	bne.n	8002190 <HAL_RCC_OscConfig+0x444>
 80021ae:	e03d      	b.n	800222c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d107      	bne.n	80021c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e038      	b.n	800222e <HAL_RCC_OscConfig+0x4e2>
 80021bc:	40023800 	.word	0x40023800
 80021c0:	40007000 	.word	0x40007000
 80021c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80021c8:	4b1b      	ldr	r3, [pc, #108]	; (8002238 <HAL_RCC_OscConfig+0x4ec>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	699b      	ldr	r3, [r3, #24]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d028      	beq.n	8002228 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d121      	bne.n	8002228 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d11a      	bne.n	8002228 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80021f8:	4013      	ands	r3, r2
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80021fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002200:	4293      	cmp	r3, r2
 8002202:	d111      	bne.n	8002228 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800220e:	085b      	lsrs	r3, r3, #1
 8002210:	3b01      	subs	r3, #1
 8002212:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002214:	429a      	cmp	r2, r3
 8002216:	d107      	bne.n	8002228 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002222:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002224:	429a      	cmp	r2, r3
 8002226:	d001      	beq.n	800222c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e000      	b.n	800222e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3718      	adds	r7, #24
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	40023800 	.word	0x40023800

0800223c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d101      	bne.n	8002250 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e0cc      	b.n	80023ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002250:	4b68      	ldr	r3, [pc, #416]	; (80023f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0307 	and.w	r3, r3, #7
 8002258:	683a      	ldr	r2, [r7, #0]
 800225a:	429a      	cmp	r2, r3
 800225c:	d90c      	bls.n	8002278 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800225e:	4b65      	ldr	r3, [pc, #404]	; (80023f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002260:	683a      	ldr	r2, [r7, #0]
 8002262:	b2d2      	uxtb	r2, r2
 8002264:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002266:	4b63      	ldr	r3, [pc, #396]	; (80023f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0307 	and.w	r3, r3, #7
 800226e:	683a      	ldr	r2, [r7, #0]
 8002270:	429a      	cmp	r2, r3
 8002272:	d001      	beq.n	8002278 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e0b8      	b.n	80023ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0302 	and.w	r3, r3, #2
 8002280:	2b00      	cmp	r3, #0
 8002282:	d020      	beq.n	80022c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0304 	and.w	r3, r3, #4
 800228c:	2b00      	cmp	r3, #0
 800228e:	d005      	beq.n	800229c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002290:	4b59      	ldr	r3, [pc, #356]	; (80023f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	4a58      	ldr	r2, [pc, #352]	; (80023f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002296:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800229a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0308 	and.w	r3, r3, #8
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d005      	beq.n	80022b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022a8:	4b53      	ldr	r3, [pc, #332]	; (80023f8 <HAL_RCC_ClockConfig+0x1bc>)
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	4a52      	ldr	r2, [pc, #328]	; (80023f8 <HAL_RCC_ClockConfig+0x1bc>)
 80022ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80022b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022b4:	4b50      	ldr	r3, [pc, #320]	; (80023f8 <HAL_RCC_ClockConfig+0x1bc>)
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	494d      	ldr	r1, [pc, #308]	; (80023f8 <HAL_RCC_ClockConfig+0x1bc>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d044      	beq.n	800235c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d107      	bne.n	80022ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022da:	4b47      	ldr	r3, [pc, #284]	; (80023f8 <HAL_RCC_ClockConfig+0x1bc>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d119      	bne.n	800231a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e07f      	b.n	80023ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d003      	beq.n	80022fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022f6:	2b03      	cmp	r3, #3
 80022f8:	d107      	bne.n	800230a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022fa:	4b3f      	ldr	r3, [pc, #252]	; (80023f8 <HAL_RCC_ClockConfig+0x1bc>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d109      	bne.n	800231a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e06f      	b.n	80023ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800230a:	4b3b      	ldr	r3, [pc, #236]	; (80023f8 <HAL_RCC_ClockConfig+0x1bc>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d101      	bne.n	800231a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e067      	b.n	80023ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800231a:	4b37      	ldr	r3, [pc, #220]	; (80023f8 <HAL_RCC_ClockConfig+0x1bc>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f023 0203 	bic.w	r2, r3, #3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	4934      	ldr	r1, [pc, #208]	; (80023f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002328:	4313      	orrs	r3, r2
 800232a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800232c:	f7fe fd50 	bl	8000dd0 <HAL_GetTick>
 8002330:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002332:	e00a      	b.n	800234a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002334:	f7fe fd4c 	bl	8000dd0 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002342:	4293      	cmp	r3, r2
 8002344:	d901      	bls.n	800234a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e04f      	b.n	80023ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800234a:	4b2b      	ldr	r3, [pc, #172]	; (80023f8 <HAL_RCC_ClockConfig+0x1bc>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f003 020c 	and.w	r2, r3, #12
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	429a      	cmp	r2, r3
 800235a:	d1eb      	bne.n	8002334 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800235c:	4b25      	ldr	r3, [pc, #148]	; (80023f4 <HAL_RCC_ClockConfig+0x1b8>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0307 	and.w	r3, r3, #7
 8002364:	683a      	ldr	r2, [r7, #0]
 8002366:	429a      	cmp	r2, r3
 8002368:	d20c      	bcs.n	8002384 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800236a:	4b22      	ldr	r3, [pc, #136]	; (80023f4 <HAL_RCC_ClockConfig+0x1b8>)
 800236c:	683a      	ldr	r2, [r7, #0]
 800236e:	b2d2      	uxtb	r2, r2
 8002370:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002372:	4b20      	ldr	r3, [pc, #128]	; (80023f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0307 	and.w	r3, r3, #7
 800237a:	683a      	ldr	r2, [r7, #0]
 800237c:	429a      	cmp	r2, r3
 800237e:	d001      	beq.n	8002384 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e032      	b.n	80023ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0304 	and.w	r3, r3, #4
 800238c:	2b00      	cmp	r3, #0
 800238e:	d008      	beq.n	80023a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002390:	4b19      	ldr	r3, [pc, #100]	; (80023f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	4916      	ldr	r1, [pc, #88]	; (80023f8 <HAL_RCC_ClockConfig+0x1bc>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0308 	and.w	r3, r3, #8
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d009      	beq.n	80023c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023ae:	4b12      	ldr	r3, [pc, #72]	; (80023f8 <HAL_RCC_ClockConfig+0x1bc>)
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	00db      	lsls	r3, r3, #3
 80023bc:	490e      	ldr	r1, [pc, #56]	; (80023f8 <HAL_RCC_ClockConfig+0x1bc>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80023c2:	f000 f821 	bl	8002408 <HAL_RCC_GetSysClockFreq>
 80023c6:	4602      	mov	r2, r0
 80023c8:	4b0b      	ldr	r3, [pc, #44]	; (80023f8 <HAL_RCC_ClockConfig+0x1bc>)
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	091b      	lsrs	r3, r3, #4
 80023ce:	f003 030f 	and.w	r3, r3, #15
 80023d2:	490a      	ldr	r1, [pc, #40]	; (80023fc <HAL_RCC_ClockConfig+0x1c0>)
 80023d4:	5ccb      	ldrb	r3, [r1, r3]
 80023d6:	fa22 f303 	lsr.w	r3, r2, r3
 80023da:	4a09      	ldr	r2, [pc, #36]	; (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 80023dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80023de:	4b09      	ldr	r3, [pc, #36]	; (8002404 <HAL_RCC_ClockConfig+0x1c8>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7fe fcb0 	bl	8000d48 <HAL_InitTick>

  return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3710      	adds	r7, #16
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	40023c00 	.word	0x40023c00
 80023f8:	40023800 	.word	0x40023800
 80023fc:	08003e30 	.word	0x08003e30
 8002400:	20000000 	.word	0x20000000
 8002404:	20000004 	.word	0x20000004

08002408 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002408:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800240c:	b094      	sub	sp, #80	; 0x50
 800240e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002410:	2300      	movs	r3, #0
 8002412:	647b      	str	r3, [r7, #68]	; 0x44
 8002414:	2300      	movs	r3, #0
 8002416:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002418:	2300      	movs	r3, #0
 800241a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800241c:	2300      	movs	r3, #0
 800241e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002420:	4b79      	ldr	r3, [pc, #484]	; (8002608 <HAL_RCC_GetSysClockFreq+0x200>)
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	f003 030c 	and.w	r3, r3, #12
 8002428:	2b08      	cmp	r3, #8
 800242a:	d00d      	beq.n	8002448 <HAL_RCC_GetSysClockFreq+0x40>
 800242c:	2b08      	cmp	r3, #8
 800242e:	f200 80e1 	bhi.w	80025f4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002432:	2b00      	cmp	r3, #0
 8002434:	d002      	beq.n	800243c <HAL_RCC_GetSysClockFreq+0x34>
 8002436:	2b04      	cmp	r3, #4
 8002438:	d003      	beq.n	8002442 <HAL_RCC_GetSysClockFreq+0x3a>
 800243a:	e0db      	b.n	80025f4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800243c:	4b73      	ldr	r3, [pc, #460]	; (800260c <HAL_RCC_GetSysClockFreq+0x204>)
 800243e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002440:	e0db      	b.n	80025fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002442:	4b73      	ldr	r3, [pc, #460]	; (8002610 <HAL_RCC_GetSysClockFreq+0x208>)
 8002444:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002446:	e0d8      	b.n	80025fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002448:	4b6f      	ldr	r3, [pc, #444]	; (8002608 <HAL_RCC_GetSysClockFreq+0x200>)
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002450:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002452:	4b6d      	ldr	r3, [pc, #436]	; (8002608 <HAL_RCC_GetSysClockFreq+0x200>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d063      	beq.n	8002526 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800245e:	4b6a      	ldr	r3, [pc, #424]	; (8002608 <HAL_RCC_GetSysClockFreq+0x200>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	099b      	lsrs	r3, r3, #6
 8002464:	2200      	movs	r2, #0
 8002466:	63bb      	str	r3, [r7, #56]	; 0x38
 8002468:	63fa      	str	r2, [r7, #60]	; 0x3c
 800246a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800246c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002470:	633b      	str	r3, [r7, #48]	; 0x30
 8002472:	2300      	movs	r3, #0
 8002474:	637b      	str	r3, [r7, #52]	; 0x34
 8002476:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800247a:	4622      	mov	r2, r4
 800247c:	462b      	mov	r3, r5
 800247e:	f04f 0000 	mov.w	r0, #0
 8002482:	f04f 0100 	mov.w	r1, #0
 8002486:	0159      	lsls	r1, r3, #5
 8002488:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800248c:	0150      	lsls	r0, r2, #5
 800248e:	4602      	mov	r2, r0
 8002490:	460b      	mov	r3, r1
 8002492:	4621      	mov	r1, r4
 8002494:	1a51      	subs	r1, r2, r1
 8002496:	6139      	str	r1, [r7, #16]
 8002498:	4629      	mov	r1, r5
 800249a:	eb63 0301 	sbc.w	r3, r3, r1
 800249e:	617b      	str	r3, [r7, #20]
 80024a0:	f04f 0200 	mov.w	r2, #0
 80024a4:	f04f 0300 	mov.w	r3, #0
 80024a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80024ac:	4659      	mov	r1, fp
 80024ae:	018b      	lsls	r3, r1, #6
 80024b0:	4651      	mov	r1, sl
 80024b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024b6:	4651      	mov	r1, sl
 80024b8:	018a      	lsls	r2, r1, #6
 80024ba:	4651      	mov	r1, sl
 80024bc:	ebb2 0801 	subs.w	r8, r2, r1
 80024c0:	4659      	mov	r1, fp
 80024c2:	eb63 0901 	sbc.w	r9, r3, r1
 80024c6:	f04f 0200 	mov.w	r2, #0
 80024ca:	f04f 0300 	mov.w	r3, #0
 80024ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024da:	4690      	mov	r8, r2
 80024dc:	4699      	mov	r9, r3
 80024de:	4623      	mov	r3, r4
 80024e0:	eb18 0303 	adds.w	r3, r8, r3
 80024e4:	60bb      	str	r3, [r7, #8]
 80024e6:	462b      	mov	r3, r5
 80024e8:	eb49 0303 	adc.w	r3, r9, r3
 80024ec:	60fb      	str	r3, [r7, #12]
 80024ee:	f04f 0200 	mov.w	r2, #0
 80024f2:	f04f 0300 	mov.w	r3, #0
 80024f6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80024fa:	4629      	mov	r1, r5
 80024fc:	024b      	lsls	r3, r1, #9
 80024fe:	4621      	mov	r1, r4
 8002500:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002504:	4621      	mov	r1, r4
 8002506:	024a      	lsls	r2, r1, #9
 8002508:	4610      	mov	r0, r2
 800250a:	4619      	mov	r1, r3
 800250c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800250e:	2200      	movs	r2, #0
 8002510:	62bb      	str	r3, [r7, #40]	; 0x28
 8002512:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002514:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002518:	f7fd feb2 	bl	8000280 <__aeabi_uldivmod>
 800251c:	4602      	mov	r2, r0
 800251e:	460b      	mov	r3, r1
 8002520:	4613      	mov	r3, r2
 8002522:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002524:	e058      	b.n	80025d8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002526:	4b38      	ldr	r3, [pc, #224]	; (8002608 <HAL_RCC_GetSysClockFreq+0x200>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	099b      	lsrs	r3, r3, #6
 800252c:	2200      	movs	r2, #0
 800252e:	4618      	mov	r0, r3
 8002530:	4611      	mov	r1, r2
 8002532:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002536:	623b      	str	r3, [r7, #32]
 8002538:	2300      	movs	r3, #0
 800253a:	627b      	str	r3, [r7, #36]	; 0x24
 800253c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002540:	4642      	mov	r2, r8
 8002542:	464b      	mov	r3, r9
 8002544:	f04f 0000 	mov.w	r0, #0
 8002548:	f04f 0100 	mov.w	r1, #0
 800254c:	0159      	lsls	r1, r3, #5
 800254e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002552:	0150      	lsls	r0, r2, #5
 8002554:	4602      	mov	r2, r0
 8002556:	460b      	mov	r3, r1
 8002558:	4641      	mov	r1, r8
 800255a:	ebb2 0a01 	subs.w	sl, r2, r1
 800255e:	4649      	mov	r1, r9
 8002560:	eb63 0b01 	sbc.w	fp, r3, r1
 8002564:	f04f 0200 	mov.w	r2, #0
 8002568:	f04f 0300 	mov.w	r3, #0
 800256c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002570:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002574:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002578:	ebb2 040a 	subs.w	r4, r2, sl
 800257c:	eb63 050b 	sbc.w	r5, r3, fp
 8002580:	f04f 0200 	mov.w	r2, #0
 8002584:	f04f 0300 	mov.w	r3, #0
 8002588:	00eb      	lsls	r3, r5, #3
 800258a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800258e:	00e2      	lsls	r2, r4, #3
 8002590:	4614      	mov	r4, r2
 8002592:	461d      	mov	r5, r3
 8002594:	4643      	mov	r3, r8
 8002596:	18e3      	adds	r3, r4, r3
 8002598:	603b      	str	r3, [r7, #0]
 800259a:	464b      	mov	r3, r9
 800259c:	eb45 0303 	adc.w	r3, r5, r3
 80025a0:	607b      	str	r3, [r7, #4]
 80025a2:	f04f 0200 	mov.w	r2, #0
 80025a6:	f04f 0300 	mov.w	r3, #0
 80025aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80025ae:	4629      	mov	r1, r5
 80025b0:	028b      	lsls	r3, r1, #10
 80025b2:	4621      	mov	r1, r4
 80025b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80025b8:	4621      	mov	r1, r4
 80025ba:	028a      	lsls	r2, r1, #10
 80025bc:	4610      	mov	r0, r2
 80025be:	4619      	mov	r1, r3
 80025c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025c2:	2200      	movs	r2, #0
 80025c4:	61bb      	str	r3, [r7, #24]
 80025c6:	61fa      	str	r2, [r7, #28]
 80025c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025cc:	f7fd fe58 	bl	8000280 <__aeabi_uldivmod>
 80025d0:	4602      	mov	r2, r0
 80025d2:	460b      	mov	r3, r1
 80025d4:	4613      	mov	r3, r2
 80025d6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80025d8:	4b0b      	ldr	r3, [pc, #44]	; (8002608 <HAL_RCC_GetSysClockFreq+0x200>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	0c1b      	lsrs	r3, r3, #16
 80025de:	f003 0303 	and.w	r3, r3, #3
 80025e2:	3301      	adds	r3, #1
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80025e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80025ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80025f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80025f2:	e002      	b.n	80025fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025f4:	4b05      	ldr	r3, [pc, #20]	; (800260c <HAL_RCC_GetSysClockFreq+0x204>)
 80025f6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80025f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3750      	adds	r7, #80	; 0x50
 8002600:	46bd      	mov	sp, r7
 8002602:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002606:	bf00      	nop
 8002608:	40023800 	.word	0x40023800
 800260c:	00f42400 	.word	0x00f42400
 8002610:	007a1200 	.word	0x007a1200

08002614 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002618:	4b03      	ldr	r3, [pc, #12]	; (8002628 <HAL_RCC_GetHCLKFreq+0x14>)
 800261a:	681b      	ldr	r3, [r3, #0]
}
 800261c:	4618      	mov	r0, r3
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	20000000 	.word	0x20000000

0800262c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002630:	f7ff fff0 	bl	8002614 <HAL_RCC_GetHCLKFreq>
 8002634:	4602      	mov	r2, r0
 8002636:	4b05      	ldr	r3, [pc, #20]	; (800264c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	0a9b      	lsrs	r3, r3, #10
 800263c:	f003 0307 	and.w	r3, r3, #7
 8002640:	4903      	ldr	r1, [pc, #12]	; (8002650 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002642:	5ccb      	ldrb	r3, [r1, r3]
 8002644:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002648:	4618      	mov	r0, r3
 800264a:	bd80      	pop	{r7, pc}
 800264c:	40023800 	.word	0x40023800
 8002650:	08003e40 	.word	0x08003e40

08002654 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002658:	f7ff ffdc 	bl	8002614 <HAL_RCC_GetHCLKFreq>
 800265c:	4602      	mov	r2, r0
 800265e:	4b05      	ldr	r3, [pc, #20]	; (8002674 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	0b5b      	lsrs	r3, r3, #13
 8002664:	f003 0307 	and.w	r3, r3, #7
 8002668:	4903      	ldr	r1, [pc, #12]	; (8002678 <HAL_RCC_GetPCLK2Freq+0x24>)
 800266a:	5ccb      	ldrb	r3, [r1, r3]
 800266c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002670:	4618      	mov	r0, r3
 8002672:	bd80      	pop	{r7, pc}
 8002674:	40023800 	.word	0x40023800
 8002678:	08003e40 	.word	0x08003e40

0800267c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d101      	bne.n	800268e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e03f      	b.n	800270e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b00      	cmp	r3, #0
 8002698:	d106      	bne.n	80026a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f7fe fab4 	bl	8000c10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2224      	movs	r2, #36	; 0x24
 80026ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	68da      	ldr	r2, [r3, #12]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f000 fc7b 	bl	8002fbc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	691a      	ldr	r2, [r3, #16]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	695a      	ldr	r2, [r3, #20]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	68da      	ldr	r2, [r3, #12]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2220      	movs	r2, #32
 8002700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2220      	movs	r2, #32
 8002708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
	...

08002718 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b0ba      	sub	sp, #232	; 0xe8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800273e:	2300      	movs	r3, #0
 8002740:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002744:	2300      	movs	r3, #0
 8002746:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800274a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800274e:	f003 030f 	and.w	r3, r3, #15
 8002752:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002756:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800275a:	2b00      	cmp	r3, #0
 800275c:	d10f      	bne.n	800277e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800275e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002762:	f003 0320 	and.w	r3, r3, #32
 8002766:	2b00      	cmp	r3, #0
 8002768:	d009      	beq.n	800277e <HAL_UART_IRQHandler+0x66>
 800276a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800276e:	f003 0320 	and.w	r3, r3, #32
 8002772:	2b00      	cmp	r3, #0
 8002774:	d003      	beq.n	800277e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 fb65 	bl	8002e46 <UART_Receive_IT>
      return;
 800277c:	e256      	b.n	8002c2c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800277e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002782:	2b00      	cmp	r3, #0
 8002784:	f000 80de 	beq.w	8002944 <HAL_UART_IRQHandler+0x22c>
 8002788:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800278c:	f003 0301 	and.w	r3, r3, #1
 8002790:	2b00      	cmp	r3, #0
 8002792:	d106      	bne.n	80027a2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002794:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002798:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800279c:	2b00      	cmp	r3, #0
 800279e:	f000 80d1 	beq.w	8002944 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80027a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027a6:	f003 0301 	and.w	r3, r3, #1
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d00b      	beq.n	80027c6 <HAL_UART_IRQHandler+0xae>
 80027ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d005      	beq.n	80027c6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027be:	f043 0201 	orr.w	r2, r3, #1
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80027c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027ca:	f003 0304 	and.w	r3, r3, #4
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d00b      	beq.n	80027ea <HAL_UART_IRQHandler+0xd2>
 80027d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d005      	beq.n	80027ea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e2:	f043 0202 	orr.w	r2, r3, #2
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80027ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d00b      	beq.n	800280e <HAL_UART_IRQHandler+0xf6>
 80027f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d005      	beq.n	800280e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002806:	f043 0204 	orr.w	r2, r3, #4
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800280e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002812:	f003 0308 	and.w	r3, r3, #8
 8002816:	2b00      	cmp	r3, #0
 8002818:	d011      	beq.n	800283e <HAL_UART_IRQHandler+0x126>
 800281a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800281e:	f003 0320 	and.w	r3, r3, #32
 8002822:	2b00      	cmp	r3, #0
 8002824:	d105      	bne.n	8002832 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002826:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	2b00      	cmp	r3, #0
 8002830:	d005      	beq.n	800283e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002836:	f043 0208 	orr.w	r2, r3, #8
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002842:	2b00      	cmp	r3, #0
 8002844:	f000 81ed 	beq.w	8002c22 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002848:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800284c:	f003 0320 	and.w	r3, r3, #32
 8002850:	2b00      	cmp	r3, #0
 8002852:	d008      	beq.n	8002866 <HAL_UART_IRQHandler+0x14e>
 8002854:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002858:	f003 0320 	and.w	r3, r3, #32
 800285c:	2b00      	cmp	r3, #0
 800285e:	d002      	beq.n	8002866 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f000 faf0 	bl	8002e46 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	695b      	ldr	r3, [r3, #20]
 800286c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002870:	2b40      	cmp	r3, #64	; 0x40
 8002872:	bf0c      	ite	eq
 8002874:	2301      	moveq	r3, #1
 8002876:	2300      	movne	r3, #0
 8002878:	b2db      	uxtb	r3, r3
 800287a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002882:	f003 0308 	and.w	r3, r3, #8
 8002886:	2b00      	cmp	r3, #0
 8002888:	d103      	bne.n	8002892 <HAL_UART_IRQHandler+0x17a>
 800288a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800288e:	2b00      	cmp	r3, #0
 8002890:	d04f      	beq.n	8002932 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f000 f9f8 	bl	8002c88 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028a2:	2b40      	cmp	r3, #64	; 0x40
 80028a4:	d141      	bne.n	800292a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	3314      	adds	r3, #20
 80028ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80028b4:	e853 3f00 	ldrex	r3, [r3]
 80028b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80028bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80028c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	3314      	adds	r3, #20
 80028ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80028d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80028d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80028de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80028e2:	e841 2300 	strex	r3, r2, [r1]
 80028e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80028ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d1d9      	bne.n	80028a6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d013      	beq.n	8002922 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028fe:	4a7d      	ldr	r2, [pc, #500]	; (8002af4 <HAL_UART_IRQHandler+0x3dc>)
 8002900:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002906:	4618      	mov	r0, r3
 8002908:	f7fe fc13 	bl	8001132 <HAL_DMA_Abort_IT>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d016      	beq.n	8002940 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002916:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800291c:	4610      	mov	r0, r2
 800291e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002920:	e00e      	b.n	8002940 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f000 f99a 	bl	8002c5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002928:	e00a      	b.n	8002940 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 f996 	bl	8002c5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002930:	e006      	b.n	8002940 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f000 f992 	bl	8002c5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800293e:	e170      	b.n	8002c22 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002940:	bf00      	nop
    return;
 8002942:	e16e      	b.n	8002c22 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002948:	2b01      	cmp	r3, #1
 800294a:	f040 814a 	bne.w	8002be2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800294e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002952:	f003 0310 	and.w	r3, r3, #16
 8002956:	2b00      	cmp	r3, #0
 8002958:	f000 8143 	beq.w	8002be2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800295c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002960:	f003 0310 	and.w	r3, r3, #16
 8002964:	2b00      	cmp	r3, #0
 8002966:	f000 813c 	beq.w	8002be2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800296a:	2300      	movs	r3, #0
 800296c:	60bb      	str	r3, [r7, #8]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	60bb      	str	r3, [r7, #8]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	60bb      	str	r3, [r7, #8]
 800297e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	695b      	ldr	r3, [r3, #20]
 8002986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800298a:	2b40      	cmp	r3, #64	; 0x40
 800298c:	f040 80b4 	bne.w	8002af8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800299c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f000 8140 	beq.w	8002c26 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80029aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80029ae:	429a      	cmp	r2, r3
 80029b0:	f080 8139 	bcs.w	8002c26 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80029ba:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c0:	69db      	ldr	r3, [r3, #28]
 80029c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029c6:	f000 8088 	beq.w	8002ada <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	330c      	adds	r3, #12
 80029d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80029d8:	e853 3f00 	ldrex	r3, [r3]
 80029dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80029e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80029e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	330c      	adds	r3, #12
 80029f2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80029f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80029fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002a02:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002a06:	e841 2300 	strex	r3, r2, [r1]
 8002a0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002a0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d1d9      	bne.n	80029ca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	3314      	adds	r3, #20
 8002a1c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a20:	e853 3f00 	ldrex	r3, [r3]
 8002a24:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002a26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a28:	f023 0301 	bic.w	r3, r3, #1
 8002a2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	3314      	adds	r3, #20
 8002a36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002a3a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002a3e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a40:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002a42:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002a46:	e841 2300 	strex	r3, r2, [r1]
 8002a4a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002a4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d1e1      	bne.n	8002a16 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	3314      	adds	r3, #20
 8002a58:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a5c:	e853 3f00 	ldrex	r3, [r3]
 8002a60:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002a62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	3314      	adds	r3, #20
 8002a72:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002a76:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002a78:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a7a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002a7c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002a7e:	e841 2300 	strex	r3, r2, [r1]
 8002a82:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002a84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d1e3      	bne.n	8002a52 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2220      	movs	r2, #32
 8002a8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	330c      	adds	r3, #12
 8002a9e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002aa2:	e853 3f00 	ldrex	r3, [r3]
 8002aa6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002aa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002aaa:	f023 0310 	bic.w	r3, r3, #16
 8002aae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	330c      	adds	r3, #12
 8002ab8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002abc:	65ba      	str	r2, [r7, #88]	; 0x58
 8002abe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ac0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002ac2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002ac4:	e841 2300 	strex	r3, r2, [r1]
 8002ac8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002aca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d1e3      	bne.n	8002a98 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7fe fabc 	bl	8001052 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	4619      	mov	r1, r3
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f000 f8c0 	bl	8002c70 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002af0:	e099      	b.n	8002c26 <HAL_UART_IRQHandler+0x50e>
 8002af2:	bf00      	nop
 8002af4:	08002d4f 	.word	0x08002d4f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	f000 808b 	beq.w	8002c2a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002b14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	f000 8086 	beq.w	8002c2a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	330c      	adds	r3, #12
 8002b24:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b28:	e853 3f00 	ldrex	r3, [r3]
 8002b2c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002b34:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	330c      	adds	r3, #12
 8002b3e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002b42:	647a      	str	r2, [r7, #68]	; 0x44
 8002b44:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b46:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002b48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b4a:	e841 2300 	strex	r3, r2, [r1]
 8002b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002b50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1e3      	bne.n	8002b1e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	3314      	adds	r3, #20
 8002b5c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b60:	e853 3f00 	ldrex	r3, [r3]
 8002b64:	623b      	str	r3, [r7, #32]
   return(result);
 8002b66:	6a3b      	ldr	r3, [r7, #32]
 8002b68:	f023 0301 	bic.w	r3, r3, #1
 8002b6c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	3314      	adds	r3, #20
 8002b76:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002b7a:	633a      	str	r2, [r7, #48]	; 0x30
 8002b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002b80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b82:	e841 2300 	strex	r3, r2, [r1]
 8002b86:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d1e3      	bne.n	8002b56 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2220      	movs	r2, #32
 8002b92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	330c      	adds	r3, #12
 8002ba2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	e853 3f00 	ldrex	r3, [r3]
 8002baa:	60fb      	str	r3, [r7, #12]
   return(result);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f023 0310 	bic.w	r3, r3, #16
 8002bb2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	330c      	adds	r3, #12
 8002bbc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002bc0:	61fa      	str	r2, [r7, #28]
 8002bc2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bc4:	69b9      	ldr	r1, [r7, #24]
 8002bc6:	69fa      	ldr	r2, [r7, #28]
 8002bc8:	e841 2300 	strex	r3, r2, [r1]
 8002bcc:	617b      	str	r3, [r7, #20]
   return(result);
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1e3      	bne.n	8002b9c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002bd4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002bd8:	4619      	mov	r1, r3
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 f848 	bl	8002c70 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002be0:	e023      	b.n	8002c2a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d009      	beq.n	8002c02 <HAL_UART_IRQHandler+0x4ea>
 8002bee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d003      	beq.n	8002c02 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 f8bb 	bl	8002d76 <UART_Transmit_IT>
    return;
 8002c00:	e014      	b.n	8002c2c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002c02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d00e      	beq.n	8002c2c <HAL_UART_IRQHandler+0x514>
 8002c0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d008      	beq.n	8002c2c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f000 f8fb 	bl	8002e16 <UART_EndTransmit_IT>
    return;
 8002c20:	e004      	b.n	8002c2c <HAL_UART_IRQHandler+0x514>
    return;
 8002c22:	bf00      	nop
 8002c24:	e002      	b.n	8002c2c <HAL_UART_IRQHandler+0x514>
      return;
 8002c26:	bf00      	nop
 8002c28:	e000      	b.n	8002c2c <HAL_UART_IRQHandler+0x514>
      return;
 8002c2a:	bf00      	nop
  }
}
 8002c2c:	37e8      	adds	r7, #232	; 0xe8
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop

08002c34 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002c3c:	bf00      	nop
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002c50:	bf00      	nop
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002c64:	bf00      	nop
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	460b      	mov	r3, r1
 8002c7a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002c7c:	bf00      	nop
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b095      	sub	sp, #84	; 0x54
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	330c      	adds	r3, #12
 8002c96:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c9a:	e853 3f00 	ldrex	r3, [r3]
 8002c9e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002ca6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	330c      	adds	r3, #12
 8002cae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002cb0:	643a      	str	r2, [r7, #64]	; 0x40
 8002cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cb4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002cb6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002cb8:	e841 2300 	strex	r3, r2, [r1]
 8002cbc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d1e5      	bne.n	8002c90 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	3314      	adds	r3, #20
 8002cca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ccc:	6a3b      	ldr	r3, [r7, #32]
 8002cce:	e853 3f00 	ldrex	r3, [r3]
 8002cd2:	61fb      	str	r3, [r7, #28]
   return(result);
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	f023 0301 	bic.w	r3, r3, #1
 8002cda:	64bb      	str	r3, [r7, #72]	; 0x48
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	3314      	adds	r3, #20
 8002ce2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ce4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ce6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ce8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cec:	e841 2300 	strex	r3, r2, [r1]
 8002cf0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d1e5      	bne.n	8002cc4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d119      	bne.n	8002d34 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	330c      	adds	r3, #12
 8002d06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	e853 3f00 	ldrex	r3, [r3]
 8002d0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	f023 0310 	bic.w	r3, r3, #16
 8002d16:	647b      	str	r3, [r7, #68]	; 0x44
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	330c      	adds	r3, #12
 8002d1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d20:	61ba      	str	r2, [r7, #24]
 8002d22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d24:	6979      	ldr	r1, [r7, #20]
 8002d26:	69ba      	ldr	r2, [r7, #24]
 8002d28:	e841 2300 	strex	r3, r2, [r1]
 8002d2c:	613b      	str	r3, [r7, #16]
   return(result);
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d1e5      	bne.n	8002d00 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2220      	movs	r2, #32
 8002d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002d42:	bf00      	nop
 8002d44:	3754      	adds	r7, #84	; 0x54
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr

08002d4e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	b084      	sub	sp, #16
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d5a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2200      	movs	r2, #0
 8002d66:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002d68:	68f8      	ldr	r0, [r7, #12]
 8002d6a:	f7ff ff77 	bl	8002c5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d6e:	bf00      	nop
 8002d70:	3710      	adds	r7, #16
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002d76:	b480      	push	{r7}
 8002d78:	b085      	sub	sp, #20
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b21      	cmp	r3, #33	; 0x21
 8002d88:	d13e      	bne.n	8002e08 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d92:	d114      	bne.n	8002dbe <UART_Transmit_IT+0x48>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	691b      	ldr	r3, [r3, #16]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d110      	bne.n	8002dbe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a1b      	ldr	r3, [r3, #32]
 8002da0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	881b      	ldrh	r3, [r3, #0]
 8002da6:	461a      	mov	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002db0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a1b      	ldr	r3, [r3, #32]
 8002db6:	1c9a      	adds	r2, r3, #2
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	621a      	str	r2, [r3, #32]
 8002dbc:	e008      	b.n	8002dd0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a1b      	ldr	r3, [r3, #32]
 8002dc2:	1c59      	adds	r1, r3, #1
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	6211      	str	r1, [r2, #32]
 8002dc8:	781a      	ldrb	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	4619      	mov	r1, r3
 8002dde:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d10f      	bne.n	8002e04 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	68da      	ldr	r2, [r3, #12]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002df2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68da      	ldr	r2, [r3, #12]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e02:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002e04:	2300      	movs	r3, #0
 8002e06:	e000      	b.n	8002e0a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002e08:	2302      	movs	r3, #2
  }
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3714      	adds	r7, #20
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr

08002e16 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b082      	sub	sp, #8
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68da      	ldr	r2, [r3, #12]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e2c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2220      	movs	r2, #32
 8002e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f7ff fefc 	bl	8002c34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3708      	adds	r7, #8
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b08c      	sub	sp, #48	; 0x30
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	2b22      	cmp	r3, #34	; 0x22
 8002e58:	f040 80ab 	bne.w	8002fb2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e64:	d117      	bne.n	8002e96 <UART_Receive_IT+0x50>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d113      	bne.n	8002e96 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e76:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e84:	b29a      	uxth	r2, r3
 8002e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e88:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e8e:	1c9a      	adds	r2, r3, #2
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	629a      	str	r2, [r3, #40]	; 0x28
 8002e94:	e026      	b.n	8002ee4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ea8:	d007      	beq.n	8002eba <UART_Receive_IT+0x74>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d10a      	bne.n	8002ec8 <UART_Receive_IT+0x82>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d106      	bne.n	8002ec8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	b2da      	uxtb	r2, r3
 8002ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ec4:	701a      	strb	r2, [r3, #0]
 8002ec6:	e008      	b.n	8002eda <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ed4:	b2da      	uxtb	r2, r3
 8002ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ede:	1c5a      	adds	r2, r3, #1
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	3b01      	subs	r3, #1
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d15a      	bne.n	8002fae <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	68da      	ldr	r2, [r3, #12]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f022 0220 	bic.w	r2, r2, #32
 8002f06:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68da      	ldr	r2, [r3, #12]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	695a      	ldr	r2, [r3, #20]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f022 0201 	bic.w	r2, r2, #1
 8002f26:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2220      	movs	r2, #32
 8002f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d135      	bne.n	8002fa4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	330c      	adds	r3, #12
 8002f44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	e853 3f00 	ldrex	r3, [r3]
 8002f4c:	613b      	str	r3, [r7, #16]
   return(result);
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	f023 0310 	bic.w	r3, r3, #16
 8002f54:	627b      	str	r3, [r7, #36]	; 0x24
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	330c      	adds	r3, #12
 8002f5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f5e:	623a      	str	r2, [r7, #32]
 8002f60:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f62:	69f9      	ldr	r1, [r7, #28]
 8002f64:	6a3a      	ldr	r2, [r7, #32]
 8002f66:	e841 2300 	strex	r3, r2, [r1]
 8002f6a:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d1e5      	bne.n	8002f3e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0310 	and.w	r3, r3, #16
 8002f7c:	2b10      	cmp	r3, #16
 8002f7e:	d10a      	bne.n	8002f96 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f80:	2300      	movs	r3, #0
 8002f82:	60fb      	str	r3, [r7, #12]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	60fb      	str	r3, [r7, #12]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	60fb      	str	r3, [r7, #12]
 8002f94:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f7ff fe67 	bl	8002c70 <HAL_UARTEx_RxEventCallback>
 8002fa2:	e002      	b.n	8002faa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f7ff fe4f 	bl	8002c48 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002faa:	2300      	movs	r3, #0
 8002fac:	e002      	b.n	8002fb4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	e000      	b.n	8002fb4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002fb2:	2302      	movs	r3, #2
  }
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3730      	adds	r7, #48	; 0x30
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fc0:	b0c0      	sub	sp, #256	; 0x100
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	691b      	ldr	r3, [r3, #16]
 8002fd0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fd8:	68d9      	ldr	r1, [r3, #12]
 8002fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	ea40 0301 	orr.w	r3, r0, r1
 8002fe4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fea:	689a      	ldr	r2, [r3, #8]
 8002fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	431a      	orrs	r2, r3
 8002ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ff8:	695b      	ldr	r3, [r3, #20]
 8002ffa:	431a      	orrs	r2, r3
 8002ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003000:	69db      	ldr	r3, [r3, #28]
 8003002:	4313      	orrs	r3, r2
 8003004:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003014:	f021 010c 	bic.w	r1, r1, #12
 8003018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003022:	430b      	orrs	r3, r1
 8003024:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	695b      	ldr	r3, [r3, #20]
 800302e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003036:	6999      	ldr	r1, [r3, #24]
 8003038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	ea40 0301 	orr.w	r3, r0, r1
 8003042:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	4b8f      	ldr	r3, [pc, #572]	; (8003288 <UART_SetConfig+0x2cc>)
 800304c:	429a      	cmp	r2, r3
 800304e:	d005      	beq.n	800305c <UART_SetConfig+0xa0>
 8003050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	4b8d      	ldr	r3, [pc, #564]	; (800328c <UART_SetConfig+0x2d0>)
 8003058:	429a      	cmp	r2, r3
 800305a:	d104      	bne.n	8003066 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800305c:	f7ff fafa 	bl	8002654 <HAL_RCC_GetPCLK2Freq>
 8003060:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003064:	e003      	b.n	800306e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003066:	f7ff fae1 	bl	800262c <HAL_RCC_GetPCLK1Freq>
 800306a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800306e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003072:	69db      	ldr	r3, [r3, #28]
 8003074:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003078:	f040 810c 	bne.w	8003294 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800307c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003080:	2200      	movs	r2, #0
 8003082:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003086:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800308a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800308e:	4622      	mov	r2, r4
 8003090:	462b      	mov	r3, r5
 8003092:	1891      	adds	r1, r2, r2
 8003094:	65b9      	str	r1, [r7, #88]	; 0x58
 8003096:	415b      	adcs	r3, r3
 8003098:	65fb      	str	r3, [r7, #92]	; 0x5c
 800309a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800309e:	4621      	mov	r1, r4
 80030a0:	eb12 0801 	adds.w	r8, r2, r1
 80030a4:	4629      	mov	r1, r5
 80030a6:	eb43 0901 	adc.w	r9, r3, r1
 80030aa:	f04f 0200 	mov.w	r2, #0
 80030ae:	f04f 0300 	mov.w	r3, #0
 80030b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030be:	4690      	mov	r8, r2
 80030c0:	4699      	mov	r9, r3
 80030c2:	4623      	mov	r3, r4
 80030c4:	eb18 0303 	adds.w	r3, r8, r3
 80030c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80030cc:	462b      	mov	r3, r5
 80030ce:	eb49 0303 	adc.w	r3, r9, r3
 80030d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80030d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80030e2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80030e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80030ea:	460b      	mov	r3, r1
 80030ec:	18db      	adds	r3, r3, r3
 80030ee:	653b      	str	r3, [r7, #80]	; 0x50
 80030f0:	4613      	mov	r3, r2
 80030f2:	eb42 0303 	adc.w	r3, r2, r3
 80030f6:	657b      	str	r3, [r7, #84]	; 0x54
 80030f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80030fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003100:	f7fd f8be 	bl	8000280 <__aeabi_uldivmod>
 8003104:	4602      	mov	r2, r0
 8003106:	460b      	mov	r3, r1
 8003108:	4b61      	ldr	r3, [pc, #388]	; (8003290 <UART_SetConfig+0x2d4>)
 800310a:	fba3 2302 	umull	r2, r3, r3, r2
 800310e:	095b      	lsrs	r3, r3, #5
 8003110:	011c      	lsls	r4, r3, #4
 8003112:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003116:	2200      	movs	r2, #0
 8003118:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800311c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003120:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003124:	4642      	mov	r2, r8
 8003126:	464b      	mov	r3, r9
 8003128:	1891      	adds	r1, r2, r2
 800312a:	64b9      	str	r1, [r7, #72]	; 0x48
 800312c:	415b      	adcs	r3, r3
 800312e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003130:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003134:	4641      	mov	r1, r8
 8003136:	eb12 0a01 	adds.w	sl, r2, r1
 800313a:	4649      	mov	r1, r9
 800313c:	eb43 0b01 	adc.w	fp, r3, r1
 8003140:	f04f 0200 	mov.w	r2, #0
 8003144:	f04f 0300 	mov.w	r3, #0
 8003148:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800314c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003150:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003154:	4692      	mov	sl, r2
 8003156:	469b      	mov	fp, r3
 8003158:	4643      	mov	r3, r8
 800315a:	eb1a 0303 	adds.w	r3, sl, r3
 800315e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003162:	464b      	mov	r3, r9
 8003164:	eb4b 0303 	adc.w	r3, fp, r3
 8003168:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800316c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003178:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800317c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003180:	460b      	mov	r3, r1
 8003182:	18db      	adds	r3, r3, r3
 8003184:	643b      	str	r3, [r7, #64]	; 0x40
 8003186:	4613      	mov	r3, r2
 8003188:	eb42 0303 	adc.w	r3, r2, r3
 800318c:	647b      	str	r3, [r7, #68]	; 0x44
 800318e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003192:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003196:	f7fd f873 	bl	8000280 <__aeabi_uldivmod>
 800319a:	4602      	mov	r2, r0
 800319c:	460b      	mov	r3, r1
 800319e:	4611      	mov	r1, r2
 80031a0:	4b3b      	ldr	r3, [pc, #236]	; (8003290 <UART_SetConfig+0x2d4>)
 80031a2:	fba3 2301 	umull	r2, r3, r3, r1
 80031a6:	095b      	lsrs	r3, r3, #5
 80031a8:	2264      	movs	r2, #100	; 0x64
 80031aa:	fb02 f303 	mul.w	r3, r2, r3
 80031ae:	1acb      	subs	r3, r1, r3
 80031b0:	00db      	lsls	r3, r3, #3
 80031b2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80031b6:	4b36      	ldr	r3, [pc, #216]	; (8003290 <UART_SetConfig+0x2d4>)
 80031b8:	fba3 2302 	umull	r2, r3, r3, r2
 80031bc:	095b      	lsrs	r3, r3, #5
 80031be:	005b      	lsls	r3, r3, #1
 80031c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80031c4:	441c      	add	r4, r3
 80031c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031ca:	2200      	movs	r2, #0
 80031cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80031d0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80031d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80031d8:	4642      	mov	r2, r8
 80031da:	464b      	mov	r3, r9
 80031dc:	1891      	adds	r1, r2, r2
 80031de:	63b9      	str	r1, [r7, #56]	; 0x38
 80031e0:	415b      	adcs	r3, r3
 80031e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80031e8:	4641      	mov	r1, r8
 80031ea:	1851      	adds	r1, r2, r1
 80031ec:	6339      	str	r1, [r7, #48]	; 0x30
 80031ee:	4649      	mov	r1, r9
 80031f0:	414b      	adcs	r3, r1
 80031f2:	637b      	str	r3, [r7, #52]	; 0x34
 80031f4:	f04f 0200 	mov.w	r2, #0
 80031f8:	f04f 0300 	mov.w	r3, #0
 80031fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003200:	4659      	mov	r1, fp
 8003202:	00cb      	lsls	r3, r1, #3
 8003204:	4651      	mov	r1, sl
 8003206:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800320a:	4651      	mov	r1, sl
 800320c:	00ca      	lsls	r2, r1, #3
 800320e:	4610      	mov	r0, r2
 8003210:	4619      	mov	r1, r3
 8003212:	4603      	mov	r3, r0
 8003214:	4642      	mov	r2, r8
 8003216:	189b      	adds	r3, r3, r2
 8003218:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800321c:	464b      	mov	r3, r9
 800321e:	460a      	mov	r2, r1
 8003220:	eb42 0303 	adc.w	r3, r2, r3
 8003224:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003234:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003238:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800323c:	460b      	mov	r3, r1
 800323e:	18db      	adds	r3, r3, r3
 8003240:	62bb      	str	r3, [r7, #40]	; 0x28
 8003242:	4613      	mov	r3, r2
 8003244:	eb42 0303 	adc.w	r3, r2, r3
 8003248:	62fb      	str	r3, [r7, #44]	; 0x2c
 800324a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800324e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003252:	f7fd f815 	bl	8000280 <__aeabi_uldivmod>
 8003256:	4602      	mov	r2, r0
 8003258:	460b      	mov	r3, r1
 800325a:	4b0d      	ldr	r3, [pc, #52]	; (8003290 <UART_SetConfig+0x2d4>)
 800325c:	fba3 1302 	umull	r1, r3, r3, r2
 8003260:	095b      	lsrs	r3, r3, #5
 8003262:	2164      	movs	r1, #100	; 0x64
 8003264:	fb01 f303 	mul.w	r3, r1, r3
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	00db      	lsls	r3, r3, #3
 800326c:	3332      	adds	r3, #50	; 0x32
 800326e:	4a08      	ldr	r2, [pc, #32]	; (8003290 <UART_SetConfig+0x2d4>)
 8003270:	fba2 2303 	umull	r2, r3, r2, r3
 8003274:	095b      	lsrs	r3, r3, #5
 8003276:	f003 0207 	and.w	r2, r3, #7
 800327a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4422      	add	r2, r4
 8003282:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003284:	e106      	b.n	8003494 <UART_SetConfig+0x4d8>
 8003286:	bf00      	nop
 8003288:	40011000 	.word	0x40011000
 800328c:	40011400 	.word	0x40011400
 8003290:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003294:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003298:	2200      	movs	r2, #0
 800329a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800329e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80032a2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80032a6:	4642      	mov	r2, r8
 80032a8:	464b      	mov	r3, r9
 80032aa:	1891      	adds	r1, r2, r2
 80032ac:	6239      	str	r1, [r7, #32]
 80032ae:	415b      	adcs	r3, r3
 80032b0:	627b      	str	r3, [r7, #36]	; 0x24
 80032b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80032b6:	4641      	mov	r1, r8
 80032b8:	1854      	adds	r4, r2, r1
 80032ba:	4649      	mov	r1, r9
 80032bc:	eb43 0501 	adc.w	r5, r3, r1
 80032c0:	f04f 0200 	mov.w	r2, #0
 80032c4:	f04f 0300 	mov.w	r3, #0
 80032c8:	00eb      	lsls	r3, r5, #3
 80032ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032ce:	00e2      	lsls	r2, r4, #3
 80032d0:	4614      	mov	r4, r2
 80032d2:	461d      	mov	r5, r3
 80032d4:	4643      	mov	r3, r8
 80032d6:	18e3      	adds	r3, r4, r3
 80032d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80032dc:	464b      	mov	r3, r9
 80032de:	eb45 0303 	adc.w	r3, r5, r3
 80032e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80032e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80032f2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80032f6:	f04f 0200 	mov.w	r2, #0
 80032fa:	f04f 0300 	mov.w	r3, #0
 80032fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003302:	4629      	mov	r1, r5
 8003304:	008b      	lsls	r3, r1, #2
 8003306:	4621      	mov	r1, r4
 8003308:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800330c:	4621      	mov	r1, r4
 800330e:	008a      	lsls	r2, r1, #2
 8003310:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003314:	f7fc ffb4 	bl	8000280 <__aeabi_uldivmod>
 8003318:	4602      	mov	r2, r0
 800331a:	460b      	mov	r3, r1
 800331c:	4b60      	ldr	r3, [pc, #384]	; (80034a0 <UART_SetConfig+0x4e4>)
 800331e:	fba3 2302 	umull	r2, r3, r3, r2
 8003322:	095b      	lsrs	r3, r3, #5
 8003324:	011c      	lsls	r4, r3, #4
 8003326:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800332a:	2200      	movs	r2, #0
 800332c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003330:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003334:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003338:	4642      	mov	r2, r8
 800333a:	464b      	mov	r3, r9
 800333c:	1891      	adds	r1, r2, r2
 800333e:	61b9      	str	r1, [r7, #24]
 8003340:	415b      	adcs	r3, r3
 8003342:	61fb      	str	r3, [r7, #28]
 8003344:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003348:	4641      	mov	r1, r8
 800334a:	1851      	adds	r1, r2, r1
 800334c:	6139      	str	r1, [r7, #16]
 800334e:	4649      	mov	r1, r9
 8003350:	414b      	adcs	r3, r1
 8003352:	617b      	str	r3, [r7, #20]
 8003354:	f04f 0200 	mov.w	r2, #0
 8003358:	f04f 0300 	mov.w	r3, #0
 800335c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003360:	4659      	mov	r1, fp
 8003362:	00cb      	lsls	r3, r1, #3
 8003364:	4651      	mov	r1, sl
 8003366:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800336a:	4651      	mov	r1, sl
 800336c:	00ca      	lsls	r2, r1, #3
 800336e:	4610      	mov	r0, r2
 8003370:	4619      	mov	r1, r3
 8003372:	4603      	mov	r3, r0
 8003374:	4642      	mov	r2, r8
 8003376:	189b      	adds	r3, r3, r2
 8003378:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800337c:	464b      	mov	r3, r9
 800337e:	460a      	mov	r2, r1
 8003380:	eb42 0303 	adc.w	r3, r2, r3
 8003384:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	67bb      	str	r3, [r7, #120]	; 0x78
 8003392:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003394:	f04f 0200 	mov.w	r2, #0
 8003398:	f04f 0300 	mov.w	r3, #0
 800339c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80033a0:	4649      	mov	r1, r9
 80033a2:	008b      	lsls	r3, r1, #2
 80033a4:	4641      	mov	r1, r8
 80033a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033aa:	4641      	mov	r1, r8
 80033ac:	008a      	lsls	r2, r1, #2
 80033ae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80033b2:	f7fc ff65 	bl	8000280 <__aeabi_uldivmod>
 80033b6:	4602      	mov	r2, r0
 80033b8:	460b      	mov	r3, r1
 80033ba:	4611      	mov	r1, r2
 80033bc:	4b38      	ldr	r3, [pc, #224]	; (80034a0 <UART_SetConfig+0x4e4>)
 80033be:	fba3 2301 	umull	r2, r3, r3, r1
 80033c2:	095b      	lsrs	r3, r3, #5
 80033c4:	2264      	movs	r2, #100	; 0x64
 80033c6:	fb02 f303 	mul.w	r3, r2, r3
 80033ca:	1acb      	subs	r3, r1, r3
 80033cc:	011b      	lsls	r3, r3, #4
 80033ce:	3332      	adds	r3, #50	; 0x32
 80033d0:	4a33      	ldr	r2, [pc, #204]	; (80034a0 <UART_SetConfig+0x4e4>)
 80033d2:	fba2 2303 	umull	r2, r3, r2, r3
 80033d6:	095b      	lsrs	r3, r3, #5
 80033d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033dc:	441c      	add	r4, r3
 80033de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033e2:	2200      	movs	r2, #0
 80033e4:	673b      	str	r3, [r7, #112]	; 0x70
 80033e6:	677a      	str	r2, [r7, #116]	; 0x74
 80033e8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80033ec:	4642      	mov	r2, r8
 80033ee:	464b      	mov	r3, r9
 80033f0:	1891      	adds	r1, r2, r2
 80033f2:	60b9      	str	r1, [r7, #8]
 80033f4:	415b      	adcs	r3, r3
 80033f6:	60fb      	str	r3, [r7, #12]
 80033f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033fc:	4641      	mov	r1, r8
 80033fe:	1851      	adds	r1, r2, r1
 8003400:	6039      	str	r1, [r7, #0]
 8003402:	4649      	mov	r1, r9
 8003404:	414b      	adcs	r3, r1
 8003406:	607b      	str	r3, [r7, #4]
 8003408:	f04f 0200 	mov.w	r2, #0
 800340c:	f04f 0300 	mov.w	r3, #0
 8003410:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003414:	4659      	mov	r1, fp
 8003416:	00cb      	lsls	r3, r1, #3
 8003418:	4651      	mov	r1, sl
 800341a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800341e:	4651      	mov	r1, sl
 8003420:	00ca      	lsls	r2, r1, #3
 8003422:	4610      	mov	r0, r2
 8003424:	4619      	mov	r1, r3
 8003426:	4603      	mov	r3, r0
 8003428:	4642      	mov	r2, r8
 800342a:	189b      	adds	r3, r3, r2
 800342c:	66bb      	str	r3, [r7, #104]	; 0x68
 800342e:	464b      	mov	r3, r9
 8003430:	460a      	mov	r2, r1
 8003432:	eb42 0303 	adc.w	r3, r2, r3
 8003436:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	663b      	str	r3, [r7, #96]	; 0x60
 8003442:	667a      	str	r2, [r7, #100]	; 0x64
 8003444:	f04f 0200 	mov.w	r2, #0
 8003448:	f04f 0300 	mov.w	r3, #0
 800344c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003450:	4649      	mov	r1, r9
 8003452:	008b      	lsls	r3, r1, #2
 8003454:	4641      	mov	r1, r8
 8003456:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800345a:	4641      	mov	r1, r8
 800345c:	008a      	lsls	r2, r1, #2
 800345e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003462:	f7fc ff0d 	bl	8000280 <__aeabi_uldivmod>
 8003466:	4602      	mov	r2, r0
 8003468:	460b      	mov	r3, r1
 800346a:	4b0d      	ldr	r3, [pc, #52]	; (80034a0 <UART_SetConfig+0x4e4>)
 800346c:	fba3 1302 	umull	r1, r3, r3, r2
 8003470:	095b      	lsrs	r3, r3, #5
 8003472:	2164      	movs	r1, #100	; 0x64
 8003474:	fb01 f303 	mul.w	r3, r1, r3
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	011b      	lsls	r3, r3, #4
 800347c:	3332      	adds	r3, #50	; 0x32
 800347e:	4a08      	ldr	r2, [pc, #32]	; (80034a0 <UART_SetConfig+0x4e4>)
 8003480:	fba2 2303 	umull	r2, r3, r2, r3
 8003484:	095b      	lsrs	r3, r3, #5
 8003486:	f003 020f 	and.w	r2, r3, #15
 800348a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4422      	add	r2, r4
 8003492:	609a      	str	r2, [r3, #8]
}
 8003494:	bf00      	nop
 8003496:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800349a:	46bd      	mov	sp, r7
 800349c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034a0:	51eb851f 	.word	0x51eb851f

080034a4 <siprintf>:
 80034a4:	b40e      	push	{r1, r2, r3}
 80034a6:	b500      	push	{lr}
 80034a8:	b09c      	sub	sp, #112	; 0x70
 80034aa:	ab1d      	add	r3, sp, #116	; 0x74
 80034ac:	9002      	str	r0, [sp, #8]
 80034ae:	9006      	str	r0, [sp, #24]
 80034b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80034b4:	4809      	ldr	r0, [pc, #36]	; (80034dc <siprintf+0x38>)
 80034b6:	9107      	str	r1, [sp, #28]
 80034b8:	9104      	str	r1, [sp, #16]
 80034ba:	4909      	ldr	r1, [pc, #36]	; (80034e0 <siprintf+0x3c>)
 80034bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80034c0:	9105      	str	r1, [sp, #20]
 80034c2:	6800      	ldr	r0, [r0, #0]
 80034c4:	9301      	str	r3, [sp, #4]
 80034c6:	a902      	add	r1, sp, #8
 80034c8:	f000 f992 	bl	80037f0 <_svfiprintf_r>
 80034cc:	9b02      	ldr	r3, [sp, #8]
 80034ce:	2200      	movs	r2, #0
 80034d0:	701a      	strb	r2, [r3, #0]
 80034d2:	b01c      	add	sp, #112	; 0x70
 80034d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80034d8:	b003      	add	sp, #12
 80034da:	4770      	bx	lr
 80034dc:	20000058 	.word	0x20000058
 80034e0:	ffff0208 	.word	0xffff0208

080034e4 <memset>:
 80034e4:	4402      	add	r2, r0
 80034e6:	4603      	mov	r3, r0
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d100      	bne.n	80034ee <memset+0xa>
 80034ec:	4770      	bx	lr
 80034ee:	f803 1b01 	strb.w	r1, [r3], #1
 80034f2:	e7f9      	b.n	80034e8 <memset+0x4>

080034f4 <__errno>:
 80034f4:	4b01      	ldr	r3, [pc, #4]	; (80034fc <__errno+0x8>)
 80034f6:	6818      	ldr	r0, [r3, #0]
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	20000058 	.word	0x20000058

08003500 <__libc_init_array>:
 8003500:	b570      	push	{r4, r5, r6, lr}
 8003502:	4d0d      	ldr	r5, [pc, #52]	; (8003538 <__libc_init_array+0x38>)
 8003504:	4c0d      	ldr	r4, [pc, #52]	; (800353c <__libc_init_array+0x3c>)
 8003506:	1b64      	subs	r4, r4, r5
 8003508:	10a4      	asrs	r4, r4, #2
 800350a:	2600      	movs	r6, #0
 800350c:	42a6      	cmp	r6, r4
 800350e:	d109      	bne.n	8003524 <__libc_init_array+0x24>
 8003510:	4d0b      	ldr	r5, [pc, #44]	; (8003540 <__libc_init_array+0x40>)
 8003512:	4c0c      	ldr	r4, [pc, #48]	; (8003544 <__libc_init_array+0x44>)
 8003514:	f000 fc6a 	bl	8003dec <_init>
 8003518:	1b64      	subs	r4, r4, r5
 800351a:	10a4      	asrs	r4, r4, #2
 800351c:	2600      	movs	r6, #0
 800351e:	42a6      	cmp	r6, r4
 8003520:	d105      	bne.n	800352e <__libc_init_array+0x2e>
 8003522:	bd70      	pop	{r4, r5, r6, pc}
 8003524:	f855 3b04 	ldr.w	r3, [r5], #4
 8003528:	4798      	blx	r3
 800352a:	3601      	adds	r6, #1
 800352c:	e7ee      	b.n	800350c <__libc_init_array+0xc>
 800352e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003532:	4798      	blx	r3
 8003534:	3601      	adds	r6, #1
 8003536:	e7f2      	b.n	800351e <__libc_init_array+0x1e>
 8003538:	08003e84 	.word	0x08003e84
 800353c:	08003e84 	.word	0x08003e84
 8003540:	08003e84 	.word	0x08003e84
 8003544:	08003e88 	.word	0x08003e88

08003548 <__retarget_lock_acquire_recursive>:
 8003548:	4770      	bx	lr

0800354a <__retarget_lock_release_recursive>:
 800354a:	4770      	bx	lr

0800354c <_free_r>:
 800354c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800354e:	2900      	cmp	r1, #0
 8003550:	d044      	beq.n	80035dc <_free_r+0x90>
 8003552:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003556:	9001      	str	r0, [sp, #4]
 8003558:	2b00      	cmp	r3, #0
 800355a:	f1a1 0404 	sub.w	r4, r1, #4
 800355e:	bfb8      	it	lt
 8003560:	18e4      	addlt	r4, r4, r3
 8003562:	f000 f8df 	bl	8003724 <__malloc_lock>
 8003566:	4a1e      	ldr	r2, [pc, #120]	; (80035e0 <_free_r+0x94>)
 8003568:	9801      	ldr	r0, [sp, #4]
 800356a:	6813      	ldr	r3, [r2, #0]
 800356c:	b933      	cbnz	r3, 800357c <_free_r+0x30>
 800356e:	6063      	str	r3, [r4, #4]
 8003570:	6014      	str	r4, [r2, #0]
 8003572:	b003      	add	sp, #12
 8003574:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003578:	f000 b8da 	b.w	8003730 <__malloc_unlock>
 800357c:	42a3      	cmp	r3, r4
 800357e:	d908      	bls.n	8003592 <_free_r+0x46>
 8003580:	6825      	ldr	r5, [r4, #0]
 8003582:	1961      	adds	r1, r4, r5
 8003584:	428b      	cmp	r3, r1
 8003586:	bf01      	itttt	eq
 8003588:	6819      	ldreq	r1, [r3, #0]
 800358a:	685b      	ldreq	r3, [r3, #4]
 800358c:	1949      	addeq	r1, r1, r5
 800358e:	6021      	streq	r1, [r4, #0]
 8003590:	e7ed      	b.n	800356e <_free_r+0x22>
 8003592:	461a      	mov	r2, r3
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	b10b      	cbz	r3, 800359c <_free_r+0x50>
 8003598:	42a3      	cmp	r3, r4
 800359a:	d9fa      	bls.n	8003592 <_free_r+0x46>
 800359c:	6811      	ldr	r1, [r2, #0]
 800359e:	1855      	adds	r5, r2, r1
 80035a0:	42a5      	cmp	r5, r4
 80035a2:	d10b      	bne.n	80035bc <_free_r+0x70>
 80035a4:	6824      	ldr	r4, [r4, #0]
 80035a6:	4421      	add	r1, r4
 80035a8:	1854      	adds	r4, r2, r1
 80035aa:	42a3      	cmp	r3, r4
 80035ac:	6011      	str	r1, [r2, #0]
 80035ae:	d1e0      	bne.n	8003572 <_free_r+0x26>
 80035b0:	681c      	ldr	r4, [r3, #0]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	6053      	str	r3, [r2, #4]
 80035b6:	440c      	add	r4, r1
 80035b8:	6014      	str	r4, [r2, #0]
 80035ba:	e7da      	b.n	8003572 <_free_r+0x26>
 80035bc:	d902      	bls.n	80035c4 <_free_r+0x78>
 80035be:	230c      	movs	r3, #12
 80035c0:	6003      	str	r3, [r0, #0]
 80035c2:	e7d6      	b.n	8003572 <_free_r+0x26>
 80035c4:	6825      	ldr	r5, [r4, #0]
 80035c6:	1961      	adds	r1, r4, r5
 80035c8:	428b      	cmp	r3, r1
 80035ca:	bf04      	itt	eq
 80035cc:	6819      	ldreq	r1, [r3, #0]
 80035ce:	685b      	ldreq	r3, [r3, #4]
 80035d0:	6063      	str	r3, [r4, #4]
 80035d2:	bf04      	itt	eq
 80035d4:	1949      	addeq	r1, r1, r5
 80035d6:	6021      	streq	r1, [r4, #0]
 80035d8:	6054      	str	r4, [r2, #4]
 80035da:	e7ca      	b.n	8003572 <_free_r+0x26>
 80035dc:	b003      	add	sp, #12
 80035de:	bd30      	pop	{r4, r5, pc}
 80035e0:	20000258 	.word	0x20000258

080035e4 <sbrk_aligned>:
 80035e4:	b570      	push	{r4, r5, r6, lr}
 80035e6:	4e0e      	ldr	r6, [pc, #56]	; (8003620 <sbrk_aligned+0x3c>)
 80035e8:	460c      	mov	r4, r1
 80035ea:	6831      	ldr	r1, [r6, #0]
 80035ec:	4605      	mov	r5, r0
 80035ee:	b911      	cbnz	r1, 80035f6 <sbrk_aligned+0x12>
 80035f0:	f000 fba6 	bl	8003d40 <_sbrk_r>
 80035f4:	6030      	str	r0, [r6, #0]
 80035f6:	4621      	mov	r1, r4
 80035f8:	4628      	mov	r0, r5
 80035fa:	f000 fba1 	bl	8003d40 <_sbrk_r>
 80035fe:	1c43      	adds	r3, r0, #1
 8003600:	d00a      	beq.n	8003618 <sbrk_aligned+0x34>
 8003602:	1cc4      	adds	r4, r0, #3
 8003604:	f024 0403 	bic.w	r4, r4, #3
 8003608:	42a0      	cmp	r0, r4
 800360a:	d007      	beq.n	800361c <sbrk_aligned+0x38>
 800360c:	1a21      	subs	r1, r4, r0
 800360e:	4628      	mov	r0, r5
 8003610:	f000 fb96 	bl	8003d40 <_sbrk_r>
 8003614:	3001      	adds	r0, #1
 8003616:	d101      	bne.n	800361c <sbrk_aligned+0x38>
 8003618:	f04f 34ff 	mov.w	r4, #4294967295
 800361c:	4620      	mov	r0, r4
 800361e:	bd70      	pop	{r4, r5, r6, pc}
 8003620:	2000025c 	.word	0x2000025c

08003624 <_malloc_r>:
 8003624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003628:	1ccd      	adds	r5, r1, #3
 800362a:	f025 0503 	bic.w	r5, r5, #3
 800362e:	3508      	adds	r5, #8
 8003630:	2d0c      	cmp	r5, #12
 8003632:	bf38      	it	cc
 8003634:	250c      	movcc	r5, #12
 8003636:	2d00      	cmp	r5, #0
 8003638:	4607      	mov	r7, r0
 800363a:	db01      	blt.n	8003640 <_malloc_r+0x1c>
 800363c:	42a9      	cmp	r1, r5
 800363e:	d905      	bls.n	800364c <_malloc_r+0x28>
 8003640:	230c      	movs	r3, #12
 8003642:	603b      	str	r3, [r7, #0]
 8003644:	2600      	movs	r6, #0
 8003646:	4630      	mov	r0, r6
 8003648:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800364c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003720 <_malloc_r+0xfc>
 8003650:	f000 f868 	bl	8003724 <__malloc_lock>
 8003654:	f8d8 3000 	ldr.w	r3, [r8]
 8003658:	461c      	mov	r4, r3
 800365a:	bb5c      	cbnz	r4, 80036b4 <_malloc_r+0x90>
 800365c:	4629      	mov	r1, r5
 800365e:	4638      	mov	r0, r7
 8003660:	f7ff ffc0 	bl	80035e4 <sbrk_aligned>
 8003664:	1c43      	adds	r3, r0, #1
 8003666:	4604      	mov	r4, r0
 8003668:	d155      	bne.n	8003716 <_malloc_r+0xf2>
 800366a:	f8d8 4000 	ldr.w	r4, [r8]
 800366e:	4626      	mov	r6, r4
 8003670:	2e00      	cmp	r6, #0
 8003672:	d145      	bne.n	8003700 <_malloc_r+0xdc>
 8003674:	2c00      	cmp	r4, #0
 8003676:	d048      	beq.n	800370a <_malloc_r+0xe6>
 8003678:	6823      	ldr	r3, [r4, #0]
 800367a:	4631      	mov	r1, r6
 800367c:	4638      	mov	r0, r7
 800367e:	eb04 0903 	add.w	r9, r4, r3
 8003682:	f000 fb5d 	bl	8003d40 <_sbrk_r>
 8003686:	4581      	cmp	r9, r0
 8003688:	d13f      	bne.n	800370a <_malloc_r+0xe6>
 800368a:	6821      	ldr	r1, [r4, #0]
 800368c:	1a6d      	subs	r5, r5, r1
 800368e:	4629      	mov	r1, r5
 8003690:	4638      	mov	r0, r7
 8003692:	f7ff ffa7 	bl	80035e4 <sbrk_aligned>
 8003696:	3001      	adds	r0, #1
 8003698:	d037      	beq.n	800370a <_malloc_r+0xe6>
 800369a:	6823      	ldr	r3, [r4, #0]
 800369c:	442b      	add	r3, r5
 800369e:	6023      	str	r3, [r4, #0]
 80036a0:	f8d8 3000 	ldr.w	r3, [r8]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d038      	beq.n	800371a <_malloc_r+0xf6>
 80036a8:	685a      	ldr	r2, [r3, #4]
 80036aa:	42a2      	cmp	r2, r4
 80036ac:	d12b      	bne.n	8003706 <_malloc_r+0xe2>
 80036ae:	2200      	movs	r2, #0
 80036b0:	605a      	str	r2, [r3, #4]
 80036b2:	e00f      	b.n	80036d4 <_malloc_r+0xb0>
 80036b4:	6822      	ldr	r2, [r4, #0]
 80036b6:	1b52      	subs	r2, r2, r5
 80036b8:	d41f      	bmi.n	80036fa <_malloc_r+0xd6>
 80036ba:	2a0b      	cmp	r2, #11
 80036bc:	d917      	bls.n	80036ee <_malloc_r+0xca>
 80036be:	1961      	adds	r1, r4, r5
 80036c0:	42a3      	cmp	r3, r4
 80036c2:	6025      	str	r5, [r4, #0]
 80036c4:	bf18      	it	ne
 80036c6:	6059      	strne	r1, [r3, #4]
 80036c8:	6863      	ldr	r3, [r4, #4]
 80036ca:	bf08      	it	eq
 80036cc:	f8c8 1000 	streq.w	r1, [r8]
 80036d0:	5162      	str	r2, [r4, r5]
 80036d2:	604b      	str	r3, [r1, #4]
 80036d4:	4638      	mov	r0, r7
 80036d6:	f104 060b 	add.w	r6, r4, #11
 80036da:	f000 f829 	bl	8003730 <__malloc_unlock>
 80036de:	f026 0607 	bic.w	r6, r6, #7
 80036e2:	1d23      	adds	r3, r4, #4
 80036e4:	1af2      	subs	r2, r6, r3
 80036e6:	d0ae      	beq.n	8003646 <_malloc_r+0x22>
 80036e8:	1b9b      	subs	r3, r3, r6
 80036ea:	50a3      	str	r3, [r4, r2]
 80036ec:	e7ab      	b.n	8003646 <_malloc_r+0x22>
 80036ee:	42a3      	cmp	r3, r4
 80036f0:	6862      	ldr	r2, [r4, #4]
 80036f2:	d1dd      	bne.n	80036b0 <_malloc_r+0x8c>
 80036f4:	f8c8 2000 	str.w	r2, [r8]
 80036f8:	e7ec      	b.n	80036d4 <_malloc_r+0xb0>
 80036fa:	4623      	mov	r3, r4
 80036fc:	6864      	ldr	r4, [r4, #4]
 80036fe:	e7ac      	b.n	800365a <_malloc_r+0x36>
 8003700:	4634      	mov	r4, r6
 8003702:	6876      	ldr	r6, [r6, #4]
 8003704:	e7b4      	b.n	8003670 <_malloc_r+0x4c>
 8003706:	4613      	mov	r3, r2
 8003708:	e7cc      	b.n	80036a4 <_malloc_r+0x80>
 800370a:	230c      	movs	r3, #12
 800370c:	603b      	str	r3, [r7, #0]
 800370e:	4638      	mov	r0, r7
 8003710:	f000 f80e 	bl	8003730 <__malloc_unlock>
 8003714:	e797      	b.n	8003646 <_malloc_r+0x22>
 8003716:	6025      	str	r5, [r4, #0]
 8003718:	e7dc      	b.n	80036d4 <_malloc_r+0xb0>
 800371a:	605b      	str	r3, [r3, #4]
 800371c:	deff      	udf	#255	; 0xff
 800371e:	bf00      	nop
 8003720:	20000258 	.word	0x20000258

08003724 <__malloc_lock>:
 8003724:	4801      	ldr	r0, [pc, #4]	; (800372c <__malloc_lock+0x8>)
 8003726:	f7ff bf0f 	b.w	8003548 <__retarget_lock_acquire_recursive>
 800372a:	bf00      	nop
 800372c:	20000254 	.word	0x20000254

08003730 <__malloc_unlock>:
 8003730:	4801      	ldr	r0, [pc, #4]	; (8003738 <__malloc_unlock+0x8>)
 8003732:	f7ff bf0a 	b.w	800354a <__retarget_lock_release_recursive>
 8003736:	bf00      	nop
 8003738:	20000254 	.word	0x20000254

0800373c <__ssputs_r>:
 800373c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003740:	688e      	ldr	r6, [r1, #8]
 8003742:	461f      	mov	r7, r3
 8003744:	42be      	cmp	r6, r7
 8003746:	680b      	ldr	r3, [r1, #0]
 8003748:	4682      	mov	sl, r0
 800374a:	460c      	mov	r4, r1
 800374c:	4690      	mov	r8, r2
 800374e:	d82c      	bhi.n	80037aa <__ssputs_r+0x6e>
 8003750:	898a      	ldrh	r2, [r1, #12]
 8003752:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003756:	d026      	beq.n	80037a6 <__ssputs_r+0x6a>
 8003758:	6965      	ldr	r5, [r4, #20]
 800375a:	6909      	ldr	r1, [r1, #16]
 800375c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003760:	eba3 0901 	sub.w	r9, r3, r1
 8003764:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003768:	1c7b      	adds	r3, r7, #1
 800376a:	444b      	add	r3, r9
 800376c:	106d      	asrs	r5, r5, #1
 800376e:	429d      	cmp	r5, r3
 8003770:	bf38      	it	cc
 8003772:	461d      	movcc	r5, r3
 8003774:	0553      	lsls	r3, r2, #21
 8003776:	d527      	bpl.n	80037c8 <__ssputs_r+0x8c>
 8003778:	4629      	mov	r1, r5
 800377a:	f7ff ff53 	bl	8003624 <_malloc_r>
 800377e:	4606      	mov	r6, r0
 8003780:	b360      	cbz	r0, 80037dc <__ssputs_r+0xa0>
 8003782:	6921      	ldr	r1, [r4, #16]
 8003784:	464a      	mov	r2, r9
 8003786:	f000 faeb 	bl	8003d60 <memcpy>
 800378a:	89a3      	ldrh	r3, [r4, #12]
 800378c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003794:	81a3      	strh	r3, [r4, #12]
 8003796:	6126      	str	r6, [r4, #16]
 8003798:	6165      	str	r5, [r4, #20]
 800379a:	444e      	add	r6, r9
 800379c:	eba5 0509 	sub.w	r5, r5, r9
 80037a0:	6026      	str	r6, [r4, #0]
 80037a2:	60a5      	str	r5, [r4, #8]
 80037a4:	463e      	mov	r6, r7
 80037a6:	42be      	cmp	r6, r7
 80037a8:	d900      	bls.n	80037ac <__ssputs_r+0x70>
 80037aa:	463e      	mov	r6, r7
 80037ac:	6820      	ldr	r0, [r4, #0]
 80037ae:	4632      	mov	r2, r6
 80037b0:	4641      	mov	r1, r8
 80037b2:	f000 faab 	bl	8003d0c <memmove>
 80037b6:	68a3      	ldr	r3, [r4, #8]
 80037b8:	1b9b      	subs	r3, r3, r6
 80037ba:	60a3      	str	r3, [r4, #8]
 80037bc:	6823      	ldr	r3, [r4, #0]
 80037be:	4433      	add	r3, r6
 80037c0:	6023      	str	r3, [r4, #0]
 80037c2:	2000      	movs	r0, #0
 80037c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037c8:	462a      	mov	r2, r5
 80037ca:	f000 fad7 	bl	8003d7c <_realloc_r>
 80037ce:	4606      	mov	r6, r0
 80037d0:	2800      	cmp	r0, #0
 80037d2:	d1e0      	bne.n	8003796 <__ssputs_r+0x5a>
 80037d4:	6921      	ldr	r1, [r4, #16]
 80037d6:	4650      	mov	r0, sl
 80037d8:	f7ff feb8 	bl	800354c <_free_r>
 80037dc:	230c      	movs	r3, #12
 80037de:	f8ca 3000 	str.w	r3, [sl]
 80037e2:	89a3      	ldrh	r3, [r4, #12]
 80037e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037e8:	81a3      	strh	r3, [r4, #12]
 80037ea:	f04f 30ff 	mov.w	r0, #4294967295
 80037ee:	e7e9      	b.n	80037c4 <__ssputs_r+0x88>

080037f0 <_svfiprintf_r>:
 80037f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037f4:	4698      	mov	r8, r3
 80037f6:	898b      	ldrh	r3, [r1, #12]
 80037f8:	061b      	lsls	r3, r3, #24
 80037fa:	b09d      	sub	sp, #116	; 0x74
 80037fc:	4607      	mov	r7, r0
 80037fe:	460d      	mov	r5, r1
 8003800:	4614      	mov	r4, r2
 8003802:	d50e      	bpl.n	8003822 <_svfiprintf_r+0x32>
 8003804:	690b      	ldr	r3, [r1, #16]
 8003806:	b963      	cbnz	r3, 8003822 <_svfiprintf_r+0x32>
 8003808:	2140      	movs	r1, #64	; 0x40
 800380a:	f7ff ff0b 	bl	8003624 <_malloc_r>
 800380e:	6028      	str	r0, [r5, #0]
 8003810:	6128      	str	r0, [r5, #16]
 8003812:	b920      	cbnz	r0, 800381e <_svfiprintf_r+0x2e>
 8003814:	230c      	movs	r3, #12
 8003816:	603b      	str	r3, [r7, #0]
 8003818:	f04f 30ff 	mov.w	r0, #4294967295
 800381c:	e0d0      	b.n	80039c0 <_svfiprintf_r+0x1d0>
 800381e:	2340      	movs	r3, #64	; 0x40
 8003820:	616b      	str	r3, [r5, #20]
 8003822:	2300      	movs	r3, #0
 8003824:	9309      	str	r3, [sp, #36]	; 0x24
 8003826:	2320      	movs	r3, #32
 8003828:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800382c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003830:	2330      	movs	r3, #48	; 0x30
 8003832:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80039d8 <_svfiprintf_r+0x1e8>
 8003836:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800383a:	f04f 0901 	mov.w	r9, #1
 800383e:	4623      	mov	r3, r4
 8003840:	469a      	mov	sl, r3
 8003842:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003846:	b10a      	cbz	r2, 800384c <_svfiprintf_r+0x5c>
 8003848:	2a25      	cmp	r2, #37	; 0x25
 800384a:	d1f9      	bne.n	8003840 <_svfiprintf_r+0x50>
 800384c:	ebba 0b04 	subs.w	fp, sl, r4
 8003850:	d00b      	beq.n	800386a <_svfiprintf_r+0x7a>
 8003852:	465b      	mov	r3, fp
 8003854:	4622      	mov	r2, r4
 8003856:	4629      	mov	r1, r5
 8003858:	4638      	mov	r0, r7
 800385a:	f7ff ff6f 	bl	800373c <__ssputs_r>
 800385e:	3001      	adds	r0, #1
 8003860:	f000 80a9 	beq.w	80039b6 <_svfiprintf_r+0x1c6>
 8003864:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003866:	445a      	add	r2, fp
 8003868:	9209      	str	r2, [sp, #36]	; 0x24
 800386a:	f89a 3000 	ldrb.w	r3, [sl]
 800386e:	2b00      	cmp	r3, #0
 8003870:	f000 80a1 	beq.w	80039b6 <_svfiprintf_r+0x1c6>
 8003874:	2300      	movs	r3, #0
 8003876:	f04f 32ff 	mov.w	r2, #4294967295
 800387a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800387e:	f10a 0a01 	add.w	sl, sl, #1
 8003882:	9304      	str	r3, [sp, #16]
 8003884:	9307      	str	r3, [sp, #28]
 8003886:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800388a:	931a      	str	r3, [sp, #104]	; 0x68
 800388c:	4654      	mov	r4, sl
 800388e:	2205      	movs	r2, #5
 8003890:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003894:	4850      	ldr	r0, [pc, #320]	; (80039d8 <_svfiprintf_r+0x1e8>)
 8003896:	f7fc fca3 	bl	80001e0 <memchr>
 800389a:	9a04      	ldr	r2, [sp, #16]
 800389c:	b9d8      	cbnz	r0, 80038d6 <_svfiprintf_r+0xe6>
 800389e:	06d0      	lsls	r0, r2, #27
 80038a0:	bf44      	itt	mi
 80038a2:	2320      	movmi	r3, #32
 80038a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80038a8:	0711      	lsls	r1, r2, #28
 80038aa:	bf44      	itt	mi
 80038ac:	232b      	movmi	r3, #43	; 0x2b
 80038ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80038b2:	f89a 3000 	ldrb.w	r3, [sl]
 80038b6:	2b2a      	cmp	r3, #42	; 0x2a
 80038b8:	d015      	beq.n	80038e6 <_svfiprintf_r+0xf6>
 80038ba:	9a07      	ldr	r2, [sp, #28]
 80038bc:	4654      	mov	r4, sl
 80038be:	2000      	movs	r0, #0
 80038c0:	f04f 0c0a 	mov.w	ip, #10
 80038c4:	4621      	mov	r1, r4
 80038c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80038ca:	3b30      	subs	r3, #48	; 0x30
 80038cc:	2b09      	cmp	r3, #9
 80038ce:	d94d      	bls.n	800396c <_svfiprintf_r+0x17c>
 80038d0:	b1b0      	cbz	r0, 8003900 <_svfiprintf_r+0x110>
 80038d2:	9207      	str	r2, [sp, #28]
 80038d4:	e014      	b.n	8003900 <_svfiprintf_r+0x110>
 80038d6:	eba0 0308 	sub.w	r3, r0, r8
 80038da:	fa09 f303 	lsl.w	r3, r9, r3
 80038de:	4313      	orrs	r3, r2
 80038e0:	9304      	str	r3, [sp, #16]
 80038e2:	46a2      	mov	sl, r4
 80038e4:	e7d2      	b.n	800388c <_svfiprintf_r+0x9c>
 80038e6:	9b03      	ldr	r3, [sp, #12]
 80038e8:	1d19      	adds	r1, r3, #4
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	9103      	str	r1, [sp, #12]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	bfbb      	ittet	lt
 80038f2:	425b      	neglt	r3, r3
 80038f4:	f042 0202 	orrlt.w	r2, r2, #2
 80038f8:	9307      	strge	r3, [sp, #28]
 80038fa:	9307      	strlt	r3, [sp, #28]
 80038fc:	bfb8      	it	lt
 80038fe:	9204      	strlt	r2, [sp, #16]
 8003900:	7823      	ldrb	r3, [r4, #0]
 8003902:	2b2e      	cmp	r3, #46	; 0x2e
 8003904:	d10c      	bne.n	8003920 <_svfiprintf_r+0x130>
 8003906:	7863      	ldrb	r3, [r4, #1]
 8003908:	2b2a      	cmp	r3, #42	; 0x2a
 800390a:	d134      	bne.n	8003976 <_svfiprintf_r+0x186>
 800390c:	9b03      	ldr	r3, [sp, #12]
 800390e:	1d1a      	adds	r2, r3, #4
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	9203      	str	r2, [sp, #12]
 8003914:	2b00      	cmp	r3, #0
 8003916:	bfb8      	it	lt
 8003918:	f04f 33ff 	movlt.w	r3, #4294967295
 800391c:	3402      	adds	r4, #2
 800391e:	9305      	str	r3, [sp, #20]
 8003920:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80039e8 <_svfiprintf_r+0x1f8>
 8003924:	7821      	ldrb	r1, [r4, #0]
 8003926:	2203      	movs	r2, #3
 8003928:	4650      	mov	r0, sl
 800392a:	f7fc fc59 	bl	80001e0 <memchr>
 800392e:	b138      	cbz	r0, 8003940 <_svfiprintf_r+0x150>
 8003930:	9b04      	ldr	r3, [sp, #16]
 8003932:	eba0 000a 	sub.w	r0, r0, sl
 8003936:	2240      	movs	r2, #64	; 0x40
 8003938:	4082      	lsls	r2, r0
 800393a:	4313      	orrs	r3, r2
 800393c:	3401      	adds	r4, #1
 800393e:	9304      	str	r3, [sp, #16]
 8003940:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003944:	4825      	ldr	r0, [pc, #148]	; (80039dc <_svfiprintf_r+0x1ec>)
 8003946:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800394a:	2206      	movs	r2, #6
 800394c:	f7fc fc48 	bl	80001e0 <memchr>
 8003950:	2800      	cmp	r0, #0
 8003952:	d038      	beq.n	80039c6 <_svfiprintf_r+0x1d6>
 8003954:	4b22      	ldr	r3, [pc, #136]	; (80039e0 <_svfiprintf_r+0x1f0>)
 8003956:	bb1b      	cbnz	r3, 80039a0 <_svfiprintf_r+0x1b0>
 8003958:	9b03      	ldr	r3, [sp, #12]
 800395a:	3307      	adds	r3, #7
 800395c:	f023 0307 	bic.w	r3, r3, #7
 8003960:	3308      	adds	r3, #8
 8003962:	9303      	str	r3, [sp, #12]
 8003964:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003966:	4433      	add	r3, r6
 8003968:	9309      	str	r3, [sp, #36]	; 0x24
 800396a:	e768      	b.n	800383e <_svfiprintf_r+0x4e>
 800396c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003970:	460c      	mov	r4, r1
 8003972:	2001      	movs	r0, #1
 8003974:	e7a6      	b.n	80038c4 <_svfiprintf_r+0xd4>
 8003976:	2300      	movs	r3, #0
 8003978:	3401      	adds	r4, #1
 800397a:	9305      	str	r3, [sp, #20]
 800397c:	4619      	mov	r1, r3
 800397e:	f04f 0c0a 	mov.w	ip, #10
 8003982:	4620      	mov	r0, r4
 8003984:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003988:	3a30      	subs	r2, #48	; 0x30
 800398a:	2a09      	cmp	r2, #9
 800398c:	d903      	bls.n	8003996 <_svfiprintf_r+0x1a6>
 800398e:	2b00      	cmp	r3, #0
 8003990:	d0c6      	beq.n	8003920 <_svfiprintf_r+0x130>
 8003992:	9105      	str	r1, [sp, #20]
 8003994:	e7c4      	b.n	8003920 <_svfiprintf_r+0x130>
 8003996:	fb0c 2101 	mla	r1, ip, r1, r2
 800399a:	4604      	mov	r4, r0
 800399c:	2301      	movs	r3, #1
 800399e:	e7f0      	b.n	8003982 <_svfiprintf_r+0x192>
 80039a0:	ab03      	add	r3, sp, #12
 80039a2:	9300      	str	r3, [sp, #0]
 80039a4:	462a      	mov	r2, r5
 80039a6:	4b0f      	ldr	r3, [pc, #60]	; (80039e4 <_svfiprintf_r+0x1f4>)
 80039a8:	a904      	add	r1, sp, #16
 80039aa:	4638      	mov	r0, r7
 80039ac:	f3af 8000 	nop.w
 80039b0:	1c42      	adds	r2, r0, #1
 80039b2:	4606      	mov	r6, r0
 80039b4:	d1d6      	bne.n	8003964 <_svfiprintf_r+0x174>
 80039b6:	89ab      	ldrh	r3, [r5, #12]
 80039b8:	065b      	lsls	r3, r3, #25
 80039ba:	f53f af2d 	bmi.w	8003818 <_svfiprintf_r+0x28>
 80039be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80039c0:	b01d      	add	sp, #116	; 0x74
 80039c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039c6:	ab03      	add	r3, sp, #12
 80039c8:	9300      	str	r3, [sp, #0]
 80039ca:	462a      	mov	r2, r5
 80039cc:	4b05      	ldr	r3, [pc, #20]	; (80039e4 <_svfiprintf_r+0x1f4>)
 80039ce:	a904      	add	r1, sp, #16
 80039d0:	4638      	mov	r0, r7
 80039d2:	f000 f879 	bl	8003ac8 <_printf_i>
 80039d6:	e7eb      	b.n	80039b0 <_svfiprintf_r+0x1c0>
 80039d8:	08003e48 	.word	0x08003e48
 80039dc:	08003e52 	.word	0x08003e52
 80039e0:	00000000 	.word	0x00000000
 80039e4:	0800373d 	.word	0x0800373d
 80039e8:	08003e4e 	.word	0x08003e4e

080039ec <_printf_common>:
 80039ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039f0:	4616      	mov	r6, r2
 80039f2:	4699      	mov	r9, r3
 80039f4:	688a      	ldr	r2, [r1, #8]
 80039f6:	690b      	ldr	r3, [r1, #16]
 80039f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80039fc:	4293      	cmp	r3, r2
 80039fe:	bfb8      	it	lt
 8003a00:	4613      	movlt	r3, r2
 8003a02:	6033      	str	r3, [r6, #0]
 8003a04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003a08:	4607      	mov	r7, r0
 8003a0a:	460c      	mov	r4, r1
 8003a0c:	b10a      	cbz	r2, 8003a12 <_printf_common+0x26>
 8003a0e:	3301      	adds	r3, #1
 8003a10:	6033      	str	r3, [r6, #0]
 8003a12:	6823      	ldr	r3, [r4, #0]
 8003a14:	0699      	lsls	r1, r3, #26
 8003a16:	bf42      	ittt	mi
 8003a18:	6833      	ldrmi	r3, [r6, #0]
 8003a1a:	3302      	addmi	r3, #2
 8003a1c:	6033      	strmi	r3, [r6, #0]
 8003a1e:	6825      	ldr	r5, [r4, #0]
 8003a20:	f015 0506 	ands.w	r5, r5, #6
 8003a24:	d106      	bne.n	8003a34 <_printf_common+0x48>
 8003a26:	f104 0a19 	add.w	sl, r4, #25
 8003a2a:	68e3      	ldr	r3, [r4, #12]
 8003a2c:	6832      	ldr	r2, [r6, #0]
 8003a2e:	1a9b      	subs	r3, r3, r2
 8003a30:	42ab      	cmp	r3, r5
 8003a32:	dc26      	bgt.n	8003a82 <_printf_common+0x96>
 8003a34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003a38:	1e13      	subs	r3, r2, #0
 8003a3a:	6822      	ldr	r2, [r4, #0]
 8003a3c:	bf18      	it	ne
 8003a3e:	2301      	movne	r3, #1
 8003a40:	0692      	lsls	r2, r2, #26
 8003a42:	d42b      	bmi.n	8003a9c <_printf_common+0xb0>
 8003a44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003a48:	4649      	mov	r1, r9
 8003a4a:	4638      	mov	r0, r7
 8003a4c:	47c0      	blx	r8
 8003a4e:	3001      	adds	r0, #1
 8003a50:	d01e      	beq.n	8003a90 <_printf_common+0xa4>
 8003a52:	6823      	ldr	r3, [r4, #0]
 8003a54:	6922      	ldr	r2, [r4, #16]
 8003a56:	f003 0306 	and.w	r3, r3, #6
 8003a5a:	2b04      	cmp	r3, #4
 8003a5c:	bf02      	ittt	eq
 8003a5e:	68e5      	ldreq	r5, [r4, #12]
 8003a60:	6833      	ldreq	r3, [r6, #0]
 8003a62:	1aed      	subeq	r5, r5, r3
 8003a64:	68a3      	ldr	r3, [r4, #8]
 8003a66:	bf0c      	ite	eq
 8003a68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a6c:	2500      	movne	r5, #0
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	bfc4      	itt	gt
 8003a72:	1a9b      	subgt	r3, r3, r2
 8003a74:	18ed      	addgt	r5, r5, r3
 8003a76:	2600      	movs	r6, #0
 8003a78:	341a      	adds	r4, #26
 8003a7a:	42b5      	cmp	r5, r6
 8003a7c:	d11a      	bne.n	8003ab4 <_printf_common+0xc8>
 8003a7e:	2000      	movs	r0, #0
 8003a80:	e008      	b.n	8003a94 <_printf_common+0xa8>
 8003a82:	2301      	movs	r3, #1
 8003a84:	4652      	mov	r2, sl
 8003a86:	4649      	mov	r1, r9
 8003a88:	4638      	mov	r0, r7
 8003a8a:	47c0      	blx	r8
 8003a8c:	3001      	adds	r0, #1
 8003a8e:	d103      	bne.n	8003a98 <_printf_common+0xac>
 8003a90:	f04f 30ff 	mov.w	r0, #4294967295
 8003a94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a98:	3501      	adds	r5, #1
 8003a9a:	e7c6      	b.n	8003a2a <_printf_common+0x3e>
 8003a9c:	18e1      	adds	r1, r4, r3
 8003a9e:	1c5a      	adds	r2, r3, #1
 8003aa0:	2030      	movs	r0, #48	; 0x30
 8003aa2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003aa6:	4422      	add	r2, r4
 8003aa8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003aac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003ab0:	3302      	adds	r3, #2
 8003ab2:	e7c7      	b.n	8003a44 <_printf_common+0x58>
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	4622      	mov	r2, r4
 8003ab8:	4649      	mov	r1, r9
 8003aba:	4638      	mov	r0, r7
 8003abc:	47c0      	blx	r8
 8003abe:	3001      	adds	r0, #1
 8003ac0:	d0e6      	beq.n	8003a90 <_printf_common+0xa4>
 8003ac2:	3601      	adds	r6, #1
 8003ac4:	e7d9      	b.n	8003a7a <_printf_common+0x8e>
	...

08003ac8 <_printf_i>:
 8003ac8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003acc:	7e0f      	ldrb	r7, [r1, #24]
 8003ace:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003ad0:	2f78      	cmp	r7, #120	; 0x78
 8003ad2:	4691      	mov	r9, r2
 8003ad4:	4680      	mov	r8, r0
 8003ad6:	460c      	mov	r4, r1
 8003ad8:	469a      	mov	sl, r3
 8003ada:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003ade:	d807      	bhi.n	8003af0 <_printf_i+0x28>
 8003ae0:	2f62      	cmp	r7, #98	; 0x62
 8003ae2:	d80a      	bhi.n	8003afa <_printf_i+0x32>
 8003ae4:	2f00      	cmp	r7, #0
 8003ae6:	f000 80d4 	beq.w	8003c92 <_printf_i+0x1ca>
 8003aea:	2f58      	cmp	r7, #88	; 0x58
 8003aec:	f000 80c0 	beq.w	8003c70 <_printf_i+0x1a8>
 8003af0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003af4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003af8:	e03a      	b.n	8003b70 <_printf_i+0xa8>
 8003afa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003afe:	2b15      	cmp	r3, #21
 8003b00:	d8f6      	bhi.n	8003af0 <_printf_i+0x28>
 8003b02:	a101      	add	r1, pc, #4	; (adr r1, 8003b08 <_printf_i+0x40>)
 8003b04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003b08:	08003b61 	.word	0x08003b61
 8003b0c:	08003b75 	.word	0x08003b75
 8003b10:	08003af1 	.word	0x08003af1
 8003b14:	08003af1 	.word	0x08003af1
 8003b18:	08003af1 	.word	0x08003af1
 8003b1c:	08003af1 	.word	0x08003af1
 8003b20:	08003b75 	.word	0x08003b75
 8003b24:	08003af1 	.word	0x08003af1
 8003b28:	08003af1 	.word	0x08003af1
 8003b2c:	08003af1 	.word	0x08003af1
 8003b30:	08003af1 	.word	0x08003af1
 8003b34:	08003c79 	.word	0x08003c79
 8003b38:	08003ba1 	.word	0x08003ba1
 8003b3c:	08003c33 	.word	0x08003c33
 8003b40:	08003af1 	.word	0x08003af1
 8003b44:	08003af1 	.word	0x08003af1
 8003b48:	08003c9b 	.word	0x08003c9b
 8003b4c:	08003af1 	.word	0x08003af1
 8003b50:	08003ba1 	.word	0x08003ba1
 8003b54:	08003af1 	.word	0x08003af1
 8003b58:	08003af1 	.word	0x08003af1
 8003b5c:	08003c3b 	.word	0x08003c3b
 8003b60:	682b      	ldr	r3, [r5, #0]
 8003b62:	1d1a      	adds	r2, r3, #4
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	602a      	str	r2, [r5, #0]
 8003b68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b70:	2301      	movs	r3, #1
 8003b72:	e09f      	b.n	8003cb4 <_printf_i+0x1ec>
 8003b74:	6820      	ldr	r0, [r4, #0]
 8003b76:	682b      	ldr	r3, [r5, #0]
 8003b78:	0607      	lsls	r7, r0, #24
 8003b7a:	f103 0104 	add.w	r1, r3, #4
 8003b7e:	6029      	str	r1, [r5, #0]
 8003b80:	d501      	bpl.n	8003b86 <_printf_i+0xbe>
 8003b82:	681e      	ldr	r6, [r3, #0]
 8003b84:	e003      	b.n	8003b8e <_printf_i+0xc6>
 8003b86:	0646      	lsls	r6, r0, #25
 8003b88:	d5fb      	bpl.n	8003b82 <_printf_i+0xba>
 8003b8a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003b8e:	2e00      	cmp	r6, #0
 8003b90:	da03      	bge.n	8003b9a <_printf_i+0xd2>
 8003b92:	232d      	movs	r3, #45	; 0x2d
 8003b94:	4276      	negs	r6, r6
 8003b96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b9a:	485a      	ldr	r0, [pc, #360]	; (8003d04 <_printf_i+0x23c>)
 8003b9c:	230a      	movs	r3, #10
 8003b9e:	e012      	b.n	8003bc6 <_printf_i+0xfe>
 8003ba0:	682b      	ldr	r3, [r5, #0]
 8003ba2:	6820      	ldr	r0, [r4, #0]
 8003ba4:	1d19      	adds	r1, r3, #4
 8003ba6:	6029      	str	r1, [r5, #0]
 8003ba8:	0605      	lsls	r5, r0, #24
 8003baa:	d501      	bpl.n	8003bb0 <_printf_i+0xe8>
 8003bac:	681e      	ldr	r6, [r3, #0]
 8003bae:	e002      	b.n	8003bb6 <_printf_i+0xee>
 8003bb0:	0641      	lsls	r1, r0, #25
 8003bb2:	d5fb      	bpl.n	8003bac <_printf_i+0xe4>
 8003bb4:	881e      	ldrh	r6, [r3, #0]
 8003bb6:	4853      	ldr	r0, [pc, #332]	; (8003d04 <_printf_i+0x23c>)
 8003bb8:	2f6f      	cmp	r7, #111	; 0x6f
 8003bba:	bf0c      	ite	eq
 8003bbc:	2308      	moveq	r3, #8
 8003bbe:	230a      	movne	r3, #10
 8003bc0:	2100      	movs	r1, #0
 8003bc2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003bc6:	6865      	ldr	r5, [r4, #4]
 8003bc8:	60a5      	str	r5, [r4, #8]
 8003bca:	2d00      	cmp	r5, #0
 8003bcc:	bfa2      	ittt	ge
 8003bce:	6821      	ldrge	r1, [r4, #0]
 8003bd0:	f021 0104 	bicge.w	r1, r1, #4
 8003bd4:	6021      	strge	r1, [r4, #0]
 8003bd6:	b90e      	cbnz	r6, 8003bdc <_printf_i+0x114>
 8003bd8:	2d00      	cmp	r5, #0
 8003bda:	d04b      	beq.n	8003c74 <_printf_i+0x1ac>
 8003bdc:	4615      	mov	r5, r2
 8003bde:	fbb6 f1f3 	udiv	r1, r6, r3
 8003be2:	fb03 6711 	mls	r7, r3, r1, r6
 8003be6:	5dc7      	ldrb	r7, [r0, r7]
 8003be8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003bec:	4637      	mov	r7, r6
 8003bee:	42bb      	cmp	r3, r7
 8003bf0:	460e      	mov	r6, r1
 8003bf2:	d9f4      	bls.n	8003bde <_printf_i+0x116>
 8003bf4:	2b08      	cmp	r3, #8
 8003bf6:	d10b      	bne.n	8003c10 <_printf_i+0x148>
 8003bf8:	6823      	ldr	r3, [r4, #0]
 8003bfa:	07de      	lsls	r6, r3, #31
 8003bfc:	d508      	bpl.n	8003c10 <_printf_i+0x148>
 8003bfe:	6923      	ldr	r3, [r4, #16]
 8003c00:	6861      	ldr	r1, [r4, #4]
 8003c02:	4299      	cmp	r1, r3
 8003c04:	bfde      	ittt	le
 8003c06:	2330      	movle	r3, #48	; 0x30
 8003c08:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003c0c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003c10:	1b52      	subs	r2, r2, r5
 8003c12:	6122      	str	r2, [r4, #16]
 8003c14:	f8cd a000 	str.w	sl, [sp]
 8003c18:	464b      	mov	r3, r9
 8003c1a:	aa03      	add	r2, sp, #12
 8003c1c:	4621      	mov	r1, r4
 8003c1e:	4640      	mov	r0, r8
 8003c20:	f7ff fee4 	bl	80039ec <_printf_common>
 8003c24:	3001      	adds	r0, #1
 8003c26:	d14a      	bne.n	8003cbe <_printf_i+0x1f6>
 8003c28:	f04f 30ff 	mov.w	r0, #4294967295
 8003c2c:	b004      	add	sp, #16
 8003c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c32:	6823      	ldr	r3, [r4, #0]
 8003c34:	f043 0320 	orr.w	r3, r3, #32
 8003c38:	6023      	str	r3, [r4, #0]
 8003c3a:	4833      	ldr	r0, [pc, #204]	; (8003d08 <_printf_i+0x240>)
 8003c3c:	2778      	movs	r7, #120	; 0x78
 8003c3e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003c42:	6823      	ldr	r3, [r4, #0]
 8003c44:	6829      	ldr	r1, [r5, #0]
 8003c46:	061f      	lsls	r7, r3, #24
 8003c48:	f851 6b04 	ldr.w	r6, [r1], #4
 8003c4c:	d402      	bmi.n	8003c54 <_printf_i+0x18c>
 8003c4e:	065f      	lsls	r7, r3, #25
 8003c50:	bf48      	it	mi
 8003c52:	b2b6      	uxthmi	r6, r6
 8003c54:	07df      	lsls	r7, r3, #31
 8003c56:	bf48      	it	mi
 8003c58:	f043 0320 	orrmi.w	r3, r3, #32
 8003c5c:	6029      	str	r1, [r5, #0]
 8003c5e:	bf48      	it	mi
 8003c60:	6023      	strmi	r3, [r4, #0]
 8003c62:	b91e      	cbnz	r6, 8003c6c <_printf_i+0x1a4>
 8003c64:	6823      	ldr	r3, [r4, #0]
 8003c66:	f023 0320 	bic.w	r3, r3, #32
 8003c6a:	6023      	str	r3, [r4, #0]
 8003c6c:	2310      	movs	r3, #16
 8003c6e:	e7a7      	b.n	8003bc0 <_printf_i+0xf8>
 8003c70:	4824      	ldr	r0, [pc, #144]	; (8003d04 <_printf_i+0x23c>)
 8003c72:	e7e4      	b.n	8003c3e <_printf_i+0x176>
 8003c74:	4615      	mov	r5, r2
 8003c76:	e7bd      	b.n	8003bf4 <_printf_i+0x12c>
 8003c78:	682b      	ldr	r3, [r5, #0]
 8003c7a:	6826      	ldr	r6, [r4, #0]
 8003c7c:	6961      	ldr	r1, [r4, #20]
 8003c7e:	1d18      	adds	r0, r3, #4
 8003c80:	6028      	str	r0, [r5, #0]
 8003c82:	0635      	lsls	r5, r6, #24
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	d501      	bpl.n	8003c8c <_printf_i+0x1c4>
 8003c88:	6019      	str	r1, [r3, #0]
 8003c8a:	e002      	b.n	8003c92 <_printf_i+0x1ca>
 8003c8c:	0670      	lsls	r0, r6, #25
 8003c8e:	d5fb      	bpl.n	8003c88 <_printf_i+0x1c0>
 8003c90:	8019      	strh	r1, [r3, #0]
 8003c92:	2300      	movs	r3, #0
 8003c94:	6123      	str	r3, [r4, #16]
 8003c96:	4615      	mov	r5, r2
 8003c98:	e7bc      	b.n	8003c14 <_printf_i+0x14c>
 8003c9a:	682b      	ldr	r3, [r5, #0]
 8003c9c:	1d1a      	adds	r2, r3, #4
 8003c9e:	602a      	str	r2, [r5, #0]
 8003ca0:	681d      	ldr	r5, [r3, #0]
 8003ca2:	6862      	ldr	r2, [r4, #4]
 8003ca4:	2100      	movs	r1, #0
 8003ca6:	4628      	mov	r0, r5
 8003ca8:	f7fc fa9a 	bl	80001e0 <memchr>
 8003cac:	b108      	cbz	r0, 8003cb2 <_printf_i+0x1ea>
 8003cae:	1b40      	subs	r0, r0, r5
 8003cb0:	6060      	str	r0, [r4, #4]
 8003cb2:	6863      	ldr	r3, [r4, #4]
 8003cb4:	6123      	str	r3, [r4, #16]
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003cbc:	e7aa      	b.n	8003c14 <_printf_i+0x14c>
 8003cbe:	6923      	ldr	r3, [r4, #16]
 8003cc0:	462a      	mov	r2, r5
 8003cc2:	4649      	mov	r1, r9
 8003cc4:	4640      	mov	r0, r8
 8003cc6:	47d0      	blx	sl
 8003cc8:	3001      	adds	r0, #1
 8003cca:	d0ad      	beq.n	8003c28 <_printf_i+0x160>
 8003ccc:	6823      	ldr	r3, [r4, #0]
 8003cce:	079b      	lsls	r3, r3, #30
 8003cd0:	d413      	bmi.n	8003cfa <_printf_i+0x232>
 8003cd2:	68e0      	ldr	r0, [r4, #12]
 8003cd4:	9b03      	ldr	r3, [sp, #12]
 8003cd6:	4298      	cmp	r0, r3
 8003cd8:	bfb8      	it	lt
 8003cda:	4618      	movlt	r0, r3
 8003cdc:	e7a6      	b.n	8003c2c <_printf_i+0x164>
 8003cde:	2301      	movs	r3, #1
 8003ce0:	4632      	mov	r2, r6
 8003ce2:	4649      	mov	r1, r9
 8003ce4:	4640      	mov	r0, r8
 8003ce6:	47d0      	blx	sl
 8003ce8:	3001      	adds	r0, #1
 8003cea:	d09d      	beq.n	8003c28 <_printf_i+0x160>
 8003cec:	3501      	adds	r5, #1
 8003cee:	68e3      	ldr	r3, [r4, #12]
 8003cf0:	9903      	ldr	r1, [sp, #12]
 8003cf2:	1a5b      	subs	r3, r3, r1
 8003cf4:	42ab      	cmp	r3, r5
 8003cf6:	dcf2      	bgt.n	8003cde <_printf_i+0x216>
 8003cf8:	e7eb      	b.n	8003cd2 <_printf_i+0x20a>
 8003cfa:	2500      	movs	r5, #0
 8003cfc:	f104 0619 	add.w	r6, r4, #25
 8003d00:	e7f5      	b.n	8003cee <_printf_i+0x226>
 8003d02:	bf00      	nop
 8003d04:	08003e59 	.word	0x08003e59
 8003d08:	08003e6a 	.word	0x08003e6a

08003d0c <memmove>:
 8003d0c:	4288      	cmp	r0, r1
 8003d0e:	b510      	push	{r4, lr}
 8003d10:	eb01 0402 	add.w	r4, r1, r2
 8003d14:	d902      	bls.n	8003d1c <memmove+0x10>
 8003d16:	4284      	cmp	r4, r0
 8003d18:	4623      	mov	r3, r4
 8003d1a:	d807      	bhi.n	8003d2c <memmove+0x20>
 8003d1c:	1e43      	subs	r3, r0, #1
 8003d1e:	42a1      	cmp	r1, r4
 8003d20:	d008      	beq.n	8003d34 <memmove+0x28>
 8003d22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003d26:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003d2a:	e7f8      	b.n	8003d1e <memmove+0x12>
 8003d2c:	4402      	add	r2, r0
 8003d2e:	4601      	mov	r1, r0
 8003d30:	428a      	cmp	r2, r1
 8003d32:	d100      	bne.n	8003d36 <memmove+0x2a>
 8003d34:	bd10      	pop	{r4, pc}
 8003d36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003d3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003d3e:	e7f7      	b.n	8003d30 <memmove+0x24>

08003d40 <_sbrk_r>:
 8003d40:	b538      	push	{r3, r4, r5, lr}
 8003d42:	4d06      	ldr	r5, [pc, #24]	; (8003d5c <_sbrk_r+0x1c>)
 8003d44:	2300      	movs	r3, #0
 8003d46:	4604      	mov	r4, r0
 8003d48:	4608      	mov	r0, r1
 8003d4a:	602b      	str	r3, [r5, #0]
 8003d4c:	f7fc feee 	bl	8000b2c <_sbrk>
 8003d50:	1c43      	adds	r3, r0, #1
 8003d52:	d102      	bne.n	8003d5a <_sbrk_r+0x1a>
 8003d54:	682b      	ldr	r3, [r5, #0]
 8003d56:	b103      	cbz	r3, 8003d5a <_sbrk_r+0x1a>
 8003d58:	6023      	str	r3, [r4, #0]
 8003d5a:	bd38      	pop	{r3, r4, r5, pc}
 8003d5c:	20000250 	.word	0x20000250

08003d60 <memcpy>:
 8003d60:	440a      	add	r2, r1
 8003d62:	4291      	cmp	r1, r2
 8003d64:	f100 33ff 	add.w	r3, r0, #4294967295
 8003d68:	d100      	bne.n	8003d6c <memcpy+0xc>
 8003d6a:	4770      	bx	lr
 8003d6c:	b510      	push	{r4, lr}
 8003d6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d76:	4291      	cmp	r1, r2
 8003d78:	d1f9      	bne.n	8003d6e <memcpy+0xe>
 8003d7a:	bd10      	pop	{r4, pc}

08003d7c <_realloc_r>:
 8003d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d80:	4680      	mov	r8, r0
 8003d82:	4614      	mov	r4, r2
 8003d84:	460e      	mov	r6, r1
 8003d86:	b921      	cbnz	r1, 8003d92 <_realloc_r+0x16>
 8003d88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d8c:	4611      	mov	r1, r2
 8003d8e:	f7ff bc49 	b.w	8003624 <_malloc_r>
 8003d92:	b92a      	cbnz	r2, 8003da0 <_realloc_r+0x24>
 8003d94:	f7ff fbda 	bl	800354c <_free_r>
 8003d98:	4625      	mov	r5, r4
 8003d9a:	4628      	mov	r0, r5
 8003d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003da0:	f000 f81b 	bl	8003dda <_malloc_usable_size_r>
 8003da4:	4284      	cmp	r4, r0
 8003da6:	4607      	mov	r7, r0
 8003da8:	d802      	bhi.n	8003db0 <_realloc_r+0x34>
 8003daa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003dae:	d812      	bhi.n	8003dd6 <_realloc_r+0x5a>
 8003db0:	4621      	mov	r1, r4
 8003db2:	4640      	mov	r0, r8
 8003db4:	f7ff fc36 	bl	8003624 <_malloc_r>
 8003db8:	4605      	mov	r5, r0
 8003dba:	2800      	cmp	r0, #0
 8003dbc:	d0ed      	beq.n	8003d9a <_realloc_r+0x1e>
 8003dbe:	42bc      	cmp	r4, r7
 8003dc0:	4622      	mov	r2, r4
 8003dc2:	4631      	mov	r1, r6
 8003dc4:	bf28      	it	cs
 8003dc6:	463a      	movcs	r2, r7
 8003dc8:	f7ff ffca 	bl	8003d60 <memcpy>
 8003dcc:	4631      	mov	r1, r6
 8003dce:	4640      	mov	r0, r8
 8003dd0:	f7ff fbbc 	bl	800354c <_free_r>
 8003dd4:	e7e1      	b.n	8003d9a <_realloc_r+0x1e>
 8003dd6:	4635      	mov	r5, r6
 8003dd8:	e7df      	b.n	8003d9a <_realloc_r+0x1e>

08003dda <_malloc_usable_size_r>:
 8003dda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003dde:	1f18      	subs	r0, r3, #4
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	bfbc      	itt	lt
 8003de4:	580b      	ldrlt	r3, [r1, r0]
 8003de6:	18c0      	addlt	r0, r0, r3
 8003de8:	4770      	bx	lr
	...

08003dec <_init>:
 8003dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dee:	bf00      	nop
 8003df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003df2:	bc08      	pop	{r3}
 8003df4:	469e      	mov	lr, r3
 8003df6:	4770      	bx	lr

08003df8 <_fini>:
 8003df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dfa:	bf00      	nop
 8003dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dfe:	bc08      	pop	{r3}
 8003e00:	469e      	mov	lr, r3
 8003e02:	4770      	bx	lr
